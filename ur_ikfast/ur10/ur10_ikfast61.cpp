/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-06-27 16:35:18.298696
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "../include/ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.1157)*x4);
x13=((0.5723)*x1);
x14=((0.1157)*x1);
x15=((1.0)*x10);
x16=((1.0)*x9);
x17=((0.0922)*x5);
x18=((1.0)*x5);
x19=((1.0)*x4);
x20=((1.0)*x1);
x21=((0.0922)*x6);
x22=(x0*x3);
x23=(x0*x1);
x24=(x11*x9);
x25=(x0*x2);
x26=(x11*x2);
x27=(x3*x4);
x28=(x0*x9);
x29=(x11*x3);
x30=(x11*x15);
x31=(x20*x3);
x32=(x25*x4);
x33=(x20*x22);
x34=(x20*x29);
x35=(((x1*x2))+x27);
x36=((((-1.0)*x19*x2))+x31);
x37=(x35*x5);
x38=(x36*x6);
x39=((((-1.0)*x33))+x32);
x40=((((-1.0)*x34))+((x26*x4)));
x41=(((x19*x22))+((x20*x25)));
x42=(((x19*x29))+((x20*x26)));
x43=(x40*x5);
x44=(x42*x6);
x45=(x41*x6);
x46=(((x36*x5))+((x6*(((((-1.0)*x19*x3))+(((-1.0)*x2*x20)))))));
x47=(x45+((x39*x5)));
x48=(x44+x43);
x49=(((x41*x5))+((x6*(((((-1.0)*x19*x25))+x33)))));
x50=(((x42*x5))+((x6*(((((-1.0)*x19*x26))+x34)))));
x51=(x48*x9);
eerot[0]=(((x7*(((((-1.0)*x30))+((x47*x9))))))+((x49*x8)));
eerot[1]=(((x8*(((((-1.0)*x16*x47))+x30))))+((x49*x7)));
eerot[2]=((((-1.0)*x11*x16))+((x10*(((((-1.0)*x18*x39))+(((-1.0)*x45)))))));
IkReal x52=((1.0)*x22);
eetrans[0]=((((-0.0922)*x24))+(((-0.16394)*x11))+((x10*(((((-1.0)*x17*x39))+(((-1.0)*x21*x41))))))+(((-0.5723)*x32))+(((0.612)*x23))+((x5*(((((-1.0)*x12*x52))+(((-1.0)*x14*x25))))))+((x13*x22))+((x6*(((((-1.0)*x14*x52))+((x12*x25)))))));
eerot[3]=(((x50*x8))+((x7*((((x0*x10))+x51)))));
eerot[4]=(((x50*x7))+((x8*(((((-1.0)*x0*x15))+(((-1.0)*x16*x48)))))));
eerot[5]=(x28+((x10*(((((-1.0)*x44))+(((-1.0)*x18*x40)))))));
IkReal x53=((1.0)*x29);
eetrans[1]=((((0.16394)*x0))+(((-0.5723)*x26*x4))+((x6*(((((-1.0)*x14*x53))+((x12*x26))))))+((x10*(((((-1.0)*x17*x40))+(((-1.0)*x21*x42))))))+((x5*(((((-1.0)*x12*x53))+(((-1.0)*x14*x26))))))+(((0.0922)*x28))+(((0.612)*x1*x11))+((x13*x29)));
eerot[6]=(((x7*x9*((x38+x37))))+((x46*x8)));
eerot[7]=(((x8*x9*(((((-1.0)*x37))+(((-1.0)*x38))))))+((x46*x7)));
eerot[8]=(x10*(((((-1.0)*x38))+(((-1.0)*x18*x35)))));
eetrans[2]=((0.1273)+(((-0.612)*x4))+((x5*(((((-1.0)*x14*x3))+((x12*x2))))))+((x6*((((x14*x2))+((x12*x3))))))+(((-0.5723)*x27))+((x10*(((((-1.0)*x17*x35))+(((-1.0)*x21*x36))))))+(((-1.0)*x13*x2)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.0922)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.0922)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1273)+(((-0.0922)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x56))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x56))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x57=((0.2314)*npx);
IkReal x58=((0.2314)*npy);
IkReal x59=((0.1157)*r22);
IkReal x60=((0.1157)*r21);
IkReal x61=((-0.1157)*r20);
IkReal x62=((-1.0)*r20);
IkReal x63=((-1.0)*rxp0_2);
IkReal x64=((-0.1157)*r21);
IkReal x65=((-1.0)*r21);
IkReal x66=((-1.0)*rxp1_2);
IkReal x67=((-1.0)*npx);
IkReal x68=((-1.0)*r22);
IkReal x69=((-1.0)*npz);
matrixinvcoeffs[0]=x61;
matrixinvcoeffs[1]=x57;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x62;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x63;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x61;
matrixinvcoeffs[19]=x57;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x62;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x63;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x64;
matrixinvcoeffs[33]=x58;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x65;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x66;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x64;
matrixinvcoeffs[51]=x58;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x65;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x66;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x68;
matrixinvcoeffs[76]=x59;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x69;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x59;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x66;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x64;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x66;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x60;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x62;
matrixinvcoeffs[133]=x67;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1157)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x62;
matrixinvcoeffs[151]=x67;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x61;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x68;
matrixinvcoeffs[165]=x69;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x59;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x68;
matrixinvcoeffs[183]=x69;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1157)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x65;
matrixinvcoeffs[204]=x60;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x66;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x60;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x67;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x61;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x62;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x61;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x63;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x70=pz*pz;
IkReal x71=pp*pp;
IkReal x72=((0.2314)*pz);
IkReal x73=(pp*r21);
IkReal x74=((0.2314)*rxp0_2);
IkReal x75=((0.01338649)*r22);
IkReal x76=(gclwh9_0*pz);
IkReal x77=((0.01338649)*r21);
IkReal x78=(npy*pz);
IkReal x79=(pp*r20);
IkReal x80=(gclwh14_2*rxp0_2);
IkReal x81=(gclwh11_10*r22);
IkReal x82=((0.26486044)*rxp1_2);
IkReal x83=(npz*pz);
IkReal x84=(gclwh4_14*r22);
IkReal x85=(gclwh10_2*r22);
IkReal x86=((2.3686)*pp);
IkReal x87=(npx*pz);
IkReal x88=(gclwh14_8*r20);
IkReal x89=(gclwh13_9*r21);
IkReal x90=((0.27404702)*rxp2_2);
IkReal x91=((2.0)*pp);
IkReal x92=(gclwh2_0*pz);
IkReal x93=((0.26486044)*rxp2_2);
IkReal x94=(gclwh14_2*pz);
IkReal x95=(gclwh13_15*rxp1_2);
IkReal x96=((1.0)*pz);
IkReal x97=((0.2314)*rxp2_2);
IkReal x98=(gclwh11_0*pz);
IkReal x99=(gclwh11_13*r22);
IkReal x100=((0.01338649)*r20);
IkReal x101=(gclwh14_2*r20);
IkReal x102=(gclwh13_0*rxp1_2);
IkReal x103=(gclwh12_8*r21);
IkReal x104=(gclwh6_2*r21);
IkReal x105=(gclwh12_3*rxp1_2);
IkReal x106=(gclwh15_1*rxp0_2);
IkReal x107=(gclwh14_11*rxp0_2);
IkReal x108=(gclwh4_2*r22);
IkReal x109=((0.015322176454)*r20);
IkReal x110=(gclwh11_0*r22);
IkReal x111=((2.0)*gclwh9_10);
IkReal x112=(gclwh12_14*r21);
IkReal x113=((0.2832336)*rxp2_2);
IkReal x114=((0.02677298)*r20);
IkReal x115=(gclwh6_12*r21);
IkReal x116=((0.05354596)*r20);
IkReal x117=((0.000201679835612164)*r21);
IkReal x118=((0.9256)*rxp2_2);
IkReal x119=((0.000531443653)*r20);
IkReal x120=((0.02677298)*r21);
IkReal x121=((2.0)*gclwh13_10);
IkReal x122=((0.037935716)*rxp2_2);
IkReal x123=(gclwh5_0*rxp2_2);
IkReal x124=((0.00918658)*rxp2_2);
IkReal x125=(pp*r22);
IkReal x126=(gclwh7_0*r21);
IkReal x127=((0.0189560238153082)*r20);
IkReal x128=(gclwh13_9*rxp1_2);
IkReal x129=(gclwh14_8*rxp0_2);
IkReal x130=((0.0794)*pp);
IkReal x131=((0.015853620107)*r22);
IkReal x132=((1.1446)*pp);
IkReal x133=((0.0189560238153082)*r21);
IkReal x134=(gclwh7_13*r21);
IkReal x135=((2.0)*gclwh7_10);
IkReal x136=((0.0021945811706)*r22);
IkReal x137=(gclwh8_12*r20);
IkReal x138=((0.2314)*rxp1_2);
IkReal x139=(gclwh12_2*rxp1_2);
IkReal x140=((0.151742864)*rxp0_2);
IkReal x141=(gclwh15_0*pz);
IkReal x142=((0.0021945811706)*r20);
IkReal x143=(gclwh15_9*rxp0_2);
IkReal x144=(gclwh4_2*rxp2_2);
IkReal x145=((4.0)*gclwh8_11);
IkReal x146=(gclwh5_15*rxp2_2);
IkReal x147=(gclwh5_9*r22);
IkReal x148=(gclwh12_8*rxp1_2);
IkReal x149=((0.4628)*rxp1_2);
IkReal x150=((0.02677298)*r22);
IkReal x151=(gclwh7_13*rxp1_2);
IkReal x152=(gclwh6_2*rxp1_2);
IkReal x153=((0.05354596)*r21);
IkReal x154=(gclwh8_2*pz);
IkReal x155=((0.000201679835612164)*r20);
IkReal x156=((4.0)*gclwh9_10);
IkReal x157=(gclwh5_0*pz);
IkReal x158=(gclwh4_2*pz);
IkReal x159=((0.015322176454)*r21);
IkReal x160=((0.001062887306)*r20);
IkReal x161=((0.32788)*gclwh5_15);
IkReal x162=((4.0)*gclwh7_10);
IkReal x163=(gclwh10_2*pz);
IkReal x164=((0.0021945811706)*r21);
IkReal x165=((0.54809404)*rxp0_2);
IkReal x166=(gclwh5_1*r22);
IkReal x167=(gclwh12_14*rxp1_2);
IkReal x168=((0.32788)*gclwh14_14);
IkReal x169=(gclwh10_12*r22);
IkReal x170=((0.4628)*rxp0_2);
IkReal x171=(gclwh13_0*pz);
IkReal x172=((0.32788)*gclwh15_15);
IkReal x173=((0.4628)*rxp2_2);
IkReal x174=((2.0)*gclwh6_11);
IkReal x175=((0.32788)*gclwh13_15);
IkReal x176=((0.031707240214)*r21);
IkReal x177=(gclwh4_14*rxp2_2);
IkReal x178=((0.26486044)*rxp0_2);
IkReal x179=(gclwh4_3*rxp2_2);
IkReal x180=((2.0)*gclwh12_11);
IkReal x181=((0.075871432)*rxp0_2);
IkReal x182=((0.9256)*rxp1_2);
IkReal x183=(gclwh9_13*rxp0_2);
IkReal x184=((2.0)*gclwh8_11);
IkReal x185=((4.0)*gclwh10_11);
IkReal x186=((0.32788)*gclwh12_14);
IkReal x187=(gclwh6_12*rxp1_2);
IkReal x188=((2.0)*gclwh15_10);
IkReal x189=(gclwh5_1*rxp2_2);
IkReal x190=((0.037935716)*rxp0_2);
IkReal x191=(gclwh8_12*rxp0_2);
IkReal x192=((4.0)*gclwh6_11);
IkReal x193=(gclwh9_13*r20);
IkReal x194=(gclwh13_1*rxp1_2);
IkReal x195=(gclwh14_3*rxp0_2);
IkReal x196=(gclwh15_9*r20);
IkReal x197=((0.031707240214)*r20);
IkReal x198=((0.0043891623412)*r20);
IkReal x199=(gclwh10_11*r22);
IkReal x200=((0.037935716)*rxp1_2);
IkReal x201=(gclwh4_8*r22);
IkReal x202=(gclwh4_3*r22);
IkReal x203=((0.02677298)*rxp2_2);
IkReal x204=((2.0)*gclwh14_11);
IkReal x205=(gclwh6_5*x164);
IkReal x206=(gclwh14_14*x190);
IkReal x207=(gclwh10_5*x136);
IkReal x208=(gclwh8_5*x142);
IkReal x209=((0.037935716)*x167);
IkReal x210=(gclwh4_14*x122);
IkReal x211=(gclwh4_11*x97);
IkReal x212=(gclwh12_11*x138);
IkReal x213=(gclwh6_11*x77);
IkReal x214=(gclwh4_8*x203);
IkReal x215=((0.02677298)*x148);
IkReal x216=(gclwh14_11*x74);
IkReal x217=(gclwh10_11*x75);
IkReal x218=(gclwh8_11*x100);
IkReal x219=((0.02677298)*x129);
IkReal x220=(gclwh11_10*x75);
IkReal x221=(gclwh9_10*x100);
IkReal x222=((0.02677298)*x128);
IkReal x223=(gclwh15_10*x74);
IkReal x224=(gclwh5_9*x203);
IkReal x225=(gclwh5_10*x97);
IkReal x226=(gclwh13_10*x138);
IkReal x227=((0.02677298)*x143);
IkReal x228=(gclwh7_10*x77);
IkReal x229=(gclwh15_15*x190);
IkReal x230=(gclwh7_7*x164);
IkReal x231=(gclwh5_15*x122);
IkReal x232=((0.037935716)*x95);
IkReal x233=(gclwh11_7*x136);
IkReal x234=(gclwh9_7*x142);
IkReal x235=(gclwh10_5*x122);
IkReal x236=(gclwh8_5*x190);
IkReal x237=(gclwh14_14*x142);
IkReal x238=((0.0021945811706)*x84);
IkReal x239=(gclwh6_5*x200);
IkReal x240=((0.0021945811706)*x112);
IkReal x241=(gclwh4_11*x75);
IkReal x242=(gclwh12_11*x77);
IkReal x243=((0.001548816893)*x103);
IkReal x244=(gclwh8_11*x74);
IkReal x245=((0.001548816893)*x201);
IkReal x246=(gclwh10_11*x97);
IkReal x247=(gclwh14_11*x100);
IkReal x248=(gclwh6_11*x138);
IkReal x249=((0.001548816893)*x88);
IkReal x250=(gclwh5_10*x75);
IkReal x251=((0.001548816893)*x196);
IkReal x252=(gclwh9_10*x74);
IkReal x253=(gclwh11_10*x97);
IkReal x254=(gclwh13_10*x77);
IkReal x255=((0.001548816893)*x147);
IkReal x256=((0.001548816893)*x89);
IkReal x257=(gclwh7_10*x138);
IkReal x258=(gclwh15_10*x100);
IkReal x259=(gclwh5_15*x136);
IkReal x260=(gclwh7_7*x200);
IkReal x261=(gclwh13_15*x164);
IkReal x262=(gclwh15_15*x142);
IkReal x263=(gclwh9_7*x190);
IkReal x264=(gclwh11_7*x122);
IkReal x265=((0.4628)*x107);
IkReal x266=(gclwh10_11*x150);
IkReal x267=(gclwh8_11*x114);
IkReal x268=(gclwh14_14*x181);
IkReal x269=((0.075871432)*x167);
IkReal x270=((0.075871432)*x177);
IkReal x271=(gclwh4_11*x173);
IkReal x272=(gclwh6_11*x120);
IkReal x273=(gclwh12_11*x149);
IkReal x274=((0.075871432)*x95);
IkReal x275=((0.075871432)*x146);
IkReal x276=(gclwh15_15*x181);
IkReal x277=(gclwh15_10*x170);
IkReal x278=((0.02677298)*x81);
IkReal x279=(gclwh9_10*x114);
IkReal x280=(gclwh13_10*x149);
IkReal x281=(gclwh7_10*x120);
IkReal x282=(gclwh5_10*x173);
IkReal x283=(gclwh6_11*x149);
IkReal x284=(gclwh14_11*x114);
IkReal x285=(gclwh14_14*x198);
IkReal x286=((0.0043891623412)*x112);
IkReal x287=((0.0043891623412)*x84);
IkReal x288=(r20*x71);
IkReal x289=(pp*x138);
IkReal x290=((2.0)*x70);
IkReal x291=(r21*x71);
IkReal x292=((0.16394)*gclwh6_5*x73);
IkReal x293=((0.32788)*gclwh8_5*x87);
IkReal x294=((0.32788)*gclwh10_5*x83);
IkReal x295=((0.32788)*gclwh6_5*x78);
IkReal x296=((0.16394)*gclwh10_5*x125);
IkReal x297=((0.16394)*gclwh8_5*x79);
IkReal x298=(x72*x80);
IkReal x299=((0.2314)*pp*x105);
IkReal x300=(x163*x75);
IkReal x301=((2.0)*gclwh10_11*x83);
IkReal x302=(x184*x87);
IkReal x303=(pp*pz*x85);
IkReal x304=(gclwh4_3*pp*x97);
IkReal x305=(x154*x79);
IkReal x306=(x100*x154);
IkReal x307=(x174*x78);
IkReal x308=(gclwh14_3*pp*x74);
IkReal x309=(x144*x72);
IkReal x310=(x139*x72);
IkReal x311=(gclwh6_2*pz*x77);
IkReal x312=(x75*x98);
IkReal x313=(gclwh13_1*x289);
IkReal x314=(gclwh15_0*rxp0_2*x72);
IkReal x315=(gclwh5_1*pp*x97);
IkReal x316=(x100*x76);
IkReal x317=(x125*x98);
IkReal x318=(x135*x78);
IkReal x319=(x76*x79);
IkReal x320=(gclwh7_0*pz*x77);
IkReal x321=((2.0)*gclwh11_10*x83);
IkReal x322=(x102*x72);
IkReal x323=(x111*x87);
IkReal x324=(gclwh15_1*pp*x74);
IkReal x325=(x123*x72);
IkReal x326=((0.16394)*gclwh7_7*x73);
IkReal x327=((0.32788)*gclwh11_7*x83);
IkReal x328=((0.32788)*gclwh9_7*x87);
IkReal x329=((0.16394)*gclwh9_7*x79);
IkReal x330=((0.32788)*gclwh7_7*x78);
IkReal x331=((0.16394)*gclwh11_7*x125);
IkReal x332=(x186*x78);
IkReal x333=((0.16394)*gclwh14_14*x79);
IkReal x334=((0.32788)*gclwh4_14*x83);
IkReal x335=((0.16394)*gclwh12_14*x73);
IkReal x336=(x168*x87);
IkReal x337=((0.16394)*pp*x84);
IkReal x338=(x79*x94);
IkReal x339=((0.1157)*gclwh4_8*x125);
IkReal x340=(x152*x72);
IkReal x341=(gclwh12_3*x291);
IkReal x342=(gclwh1_2*pz*x100);
IkReal x343=((0.1157)*gclwh12_8*x73);
IkReal x344=(x100*x94);
IkReal x345=(gclwh14_8*npx*x72);
IkReal x346=(gclwh3_3*x291);
IkReal x347=(gclwh1_3*x288);
IkReal x348=(x204*x87);
IkReal x349=(gclwh3_2*pz*x77);
IkReal x350=(x202*x71);
IkReal x351=(gclwh12_2*pz*x77);
IkReal x352=((2.0)*gclwh4_11*x83);
IkReal x353=(gclwh12_8*npy*x72);
IkReal x354=(gclwh10_2*rxp2_2*x72);
IkReal x355=(x158*x75);
IkReal x356=(gclwh4_8*npz*x72);
IkReal x357=(x180*x78);
IkReal x358=((0.1157)*gclwh14_8*x79);
IkReal x359=(gclwh8_2*rxp0_2*x72);
IkReal x360=(x77*x92);
IkReal x361=(gclwh15_1*x288);
IkReal x362=(gclwh11_0*rxp2_2*x72);
IkReal x363=(x125*x157);
IkReal x364=(x171*x73);
IkReal x365=(gclwh0_0*pz*x100);
IkReal x366=(gclwh5_9*npz*x72);
IkReal x367=(x157*x75);
IkReal x368=(x171*x77);
IkReal x369=(gclwh13_9*npy*x72);
IkReal x370=((0.1157)*gclwh15_9*x79);
IkReal x371=(x188*x87);
IkReal x372=(gclwh9_0*rxp0_2*x72);
IkReal x373=(gclwh2_1*x291);
IkReal x374=(gclwh0_1*x288);
IkReal x375=((0.1157)*gclwh5_9*x125);
IkReal x376=((2.0)*gclwh5_10*x83);
IkReal x377=((0.1157)*gclwh13_9*x73);
IkReal x378=(x121*x78);
IkReal x379=(gclwh7_0*rxp1_2*x72);
IkReal x380=(gclwh15_9*npx*x72);
IkReal x381=(x100*x141);
IkReal x382=(x172*x87);
IkReal x383=((0.16394)*gclwh5_15*x125);
IkReal x384=((0.16394)*gclwh13_15*x73);
IkReal x385=((0.16394)*gclwh15_15*x79);
IkReal x386=(x175*x78);
IkReal x387=(x161*x83);
IkReal x388=(x184*x79);
IkReal x389=(x199*x91);
IkReal x390=(x192*x78);
IkReal x391=(x145*x87);
IkReal x392=(x174*x73);
IkReal x393=(x185*x83);
IkReal x394=(x81*x91);
IkReal x395=(x162*x78);
IkReal x396=(x111*x79);
IkReal x397=(x135*x73);
IkReal x398=(x156*x87);
IkReal x399=((4.0)*gclwh11_10*x83);
IkReal x400=(x204*x79);
IkReal x401=((4.0)*gclwh12_11*x78);
IkReal x402=((4.0)*gclwh4_11*x83);
IkReal x403=((0.65576)*gclwh4_14*x83);
IkReal x404=(x168*x79);
IkReal x405=((0.65576)*gclwh12_14*x78);
IkReal x406=((0.65576)*gclwh14_14*x87);
IkReal x407=(x186*x73);
IkReal x408=((0.32788)*pp*x84);
IkReal x409=(gclwh6_2*npy*x290);
IkReal x410=(gclwh6_2*x73*x96);
IkReal x411=(gclwh10_2*npz*x290);
IkReal x412=(gclwh8_2*npx*x290);
IkReal x413=(gclwh7_0*npy*x290);
IkReal x414=(gclwh9_0*npx*x290);
IkReal x415=(gclwh11_0*npz*x290);
IkReal x416=(gclwh7_0*x73*x96);
IkReal x417=(gclwh12_2*npy*x290);
IkReal x418=(gclwh3_2*npy*x290);
IkReal x419=(gclwh1_2*npx*x290);
IkReal x420=(gclwh14_3*x87*x91);
IkReal x421=(gclwh4_2*npz*x290);
IkReal x422=(gclwh4_3*x83*x91);
IkReal x423=(gclwh12_2*x73*x96);
IkReal x424=(gclwh1_2*x79*x96);
IkReal x425=(gclwh3_3*x78*x91);
IkReal x426=(pp*x108*x96);
IkReal x427=(gclwh1_3*x87*x91);
IkReal x428=(gclwh3_2*x73*x96);
IkReal x429=(gclwh12_3*x78*x91);
IkReal x430=(gclwh14_2*npx*x290);
IkReal x431=((1.0)*gclwh14_3*x288);
IkReal x432=(gclwh0_0*npx*x290);
IkReal x433=(gclwh2_0*npy*x290);
IkReal x434=(gclwh5_1*x83*x91);
IkReal x435=(gclwh13_1*x78*x91);
IkReal x436=(gclwh15_0*npx*x290);
IkReal x437=(gclwh2_1*x78*x91);
IkReal x438=(gclwh0_1*x87*x91);
IkReal x439=(gclwh5_0*npz*x290);
IkReal x440=(gclwh13_0*npy*x290);
IkReal x441=(gclwh0_0*x79*x96);
IkReal x442=(gclwh15_0*x79*x96);
IkReal x443=((1.0)*x73*x92);
IkReal x444=((1.0)*gclwh13_1*x291);
IkReal x445=((1.0)*x166*x71);
IkReal x446=(gclwh15_1*x87*x91);
IkReal x447=(x210+x209);
IkReal x448=(x236+x235);
IkReal x449=(x232+x231);
IkReal x450=(x264+x263);
IkReal x451=(x274+x275);
IkReal x452=(x269+x270);
IkReal x453=(x307+x216+x217+x218);
IkReal x454=(x318+x221+x220+x223);
IkReal x455=(x378+x376+x258+x257);
IkReal x456=(x352+x357+x247+x248);
IkReal x457=(x205+x292+x293+x294);
IkReal x458=(x285+x403+x405+x404);
IkReal x459=(x333+x332+x334+x237);
IkReal x460=(x326+x327+x328+x230);
IkReal x461=(x386+x387+x385+x262);
IkReal x462=(x348+x242+x241+x246+x244);
IkReal x463=(x371+x254+x250+x252+x253);
IkReal x464=(x321+x323+x228+x225+x226);
IkReal x465=(x302+x301+x211+x212+x213);
IkReal x466=(x287+x286+x407+x406+x408);
IkReal x467=(x337+x336+x335+x238+x240);
IkReal x468=(x331+x330+x329+x233+x234);
IkReal x469=(x384+x382+x383+x259+x261);
IkReal x470=(x284+x283+x401+x400+x402);
IkReal x471=(x207+x208+x295+x296+x297);
IkReal x472=(x391+x393+x392+x272+x273+x271);
IkReal x473=(x397+x399+x398+x282+x281+x280);
IkReal x474=(x388+x389+x390+x265+x267+x266);
IkReal x475=(x395+x394+x396+x277+x278+x279);
IkReal x476=(((x180*x73))+((gclwh4_11*r22*x91))+((gclwh4_11*x150))+(((4.0)*gclwh14_11*x87))+((gclwh8_11*x170))+((gclwh10_11*x173))+((gclwh12_11*x120)));
IkReal x477=(x324+x325+x320+x322+x227+x416+x414+x415);
IkReal x478=(x308+x309+x311+x310+x219+x412+x410+x411);
IkReal x479=(x319+x315+x314+x317+x316+x313+x312+x222+x224+x413);
IkReal x480=(x306+x304+x305+x303+x300+x214+x215+x298+x299+x409);
IkReal x481=(x380+x381+x379+x377+x375+x255+x256+x438+x439+x437+x445+x444+x446+x441+x440+x443+x442);
IkReal x482=(x351+x353+x355+x354+x356+x359+x358+x249+x429+x428+x427+x426+x425+x424+x423+x422+x430+x431);
IkReal x483=(x339+x338+x350+x342+x343+x340+x341+x346+x347+x344+x345+x349+x243+x245+x417+x418+x419+x421+x420+x72);
IkReal x484=(x374+x373+x372+x370+x368+x369+x360+x361+x362+x363+x364+x365+x366+x367+x251+x432+x433+x434+x435+x436+x72);
op[0]=((((-1.0)*gclwh10_12*x131))+(((-1.1843)*gclwh10_12*x125))+(((0.015853620107)*x115))+(((2.3686)*gclwh8_12*x87))+(((-1.0)*x471))+(((-0.27404702)*x148))+(((-1.0)*x206))+(((-1.0)*gclwh4_8*x90))+x447+x457+(((-2.3686)*gclwh6_12*x78))+(((-1.1843)*gclwh8_12*x79))+(((1.1843)*gclwh6_12*x73))+(((2.3686)*gclwh10_12*x83))+(((0.27404702)*x129))+(((-0.015853620107)*x137)));
op[1]=(((gclwh10_11*x125))+(((-0.32767543328104)*x105))+(((-1.0)*x478))+(((0.32767543328104)*x195))+(((-1.0)*x465))+x480+x453+(((-1.0)*gclwh6_11*x73))+(((-0.32767543328104)*x179))+((gclwh8_11*x79)));
op[2]=((-0.375291448)+(((-1.0)*x472))+x474);
op[3]=((((-1.1446)*gclwh6_2*x73))+(((-1.0)*gclwh4_2*x93))+((gclwh8_2*x109))+(((-1.0)*gclwh12_2*x82))+(((0.2832336)*x148))+(((-0.2832336)*x129))+(((1.1446)*gclwh8_2*x79))+(((2.2892)*gclwh6_2*x78))+(((-0.015322176454)*x104))+(((-1.0)*x452))+x268+(((-2.2892)*gclwh8_2*x87))+(((0.26486044)*x80))+((gclwh4_8*x113))+(((-2.2892)*gclwh10_2*x83))+((x132*x85))+(((0.015322176454)*x85)));
op[4]=((((-1.0)*x447))+(((-0.0397)*gclwh8_12*x79))+(((0.0397)*gclwh6_12*x73))+(((0.00918658)*x148))+(((-0.000531443653)*x169))+(((-1.0)*x471))+(((-0.00918658)*x129))+(((-1.0)*gclwh8_12*x119))+(((0.000531443653)*x115))+(((-0.0794)*gclwh6_12*x78))+(((-0.0397)*gclwh10_12*x125))+x206+x457+(((0.0794)*gclwh8_12*x87))+((gclwh4_8*x124))+(((0.0794)*gclwh10_12*x83)));
op[5]=((((-0.00348625472104)*x105))+((gclwh6_11*x73))+(((-1.0)*x478))+(((-1.0)*x453))+(((-1.0)*gclwh10_11*x125))+(((-0.00348625472104)*x179))+x480+x465+(((0.00348625472104)*x195))+(((-1.0)*gclwh8_11*x79)));
op[6]=((((-1.0)*pp*x81))+((gclwh7_10*x73))+(((-1.0)*x477))+(((-1.0)*x454))+(((-0.32767543328104)*x189))+x464+x479+(((-0.32767543328104)*x194))+(((-1.0)*gclwh9_10*x79))+(((0.32767543328104)*x106)));
op[7]=((((-1.1843)*gclwh9_13*x79))+(((-1.1843)*pp*x99))+(((2.3686)*gclwh9_13*x87))+(((0.015853620107)*x134))+(((-1.0)*x468))+(((0.27404702)*x143))+x449+x460+(((-1.0)*gclwh5_9*x90))+(((2.3686)*gclwh11_13*x83))+(((-0.015853620107)*x193))+(((1.1843)*gclwh7_13*x73))+(((-2.3686)*gclwh7_13*x78))+(((-0.27404702)*x128))+(((-0.015853620107)*x99))+(((-1.0)*x229)));
op[8]=((((-2.2892)*npx*x76))+(((-1.1446)*gclwh7_0*x73))+(((-1.0)*gclwh5_9*x113))+(((0.2832336)*x143))+(((-0.015322176454)*x126))+(((-0.2832336)*x128))+((gclwh15_0*x178))+(((0.015322176454)*x110))+x451+((gclwh9_0*x109))+(((-1.0)*x276))+(((1.1446)*gclwh9_0*x79))+(((-2.2892)*gclwh11_0*x83))+(((-1.0)*gclwh5_0*x93))+(((-1.0)*gclwh13_0*x82))+(((2.2892)*gclwh7_0*x78))+((x110*x132)));
op[9]=((-0.375291448)+(((-1.0)*x473))+x475);
op[10]=(((pp*x81))+(((-1.0)*x477))+(((-0.00348625472104)*x189))+(((-1.0)*x464))+(((-1.0)*gclwh7_10*x73))+(((-0.00348625472104)*x194))+(((0.00348625472104)*x106))+x454+x479+((gclwh9_10*x79)));
op[11]=((((-1.0)*x449))+(((-0.0794)*gclwh7_13*x78))+(((0.0397)*gclwh7_13*x73))+((gclwh5_9*x124))+(((0.000531443653)*x134))+(((-1.0)*x468))+(((0.00918658)*x128))+(((-1.0)*gclwh9_13*x119))+x229+(((0.0794)*gclwh11_13*x83))+x460+(((-0.000531443653)*x99))+(((-0.0397)*pp*x99))+(((-0.0397)*gclwh9_13*x79))+(((0.0794)*gclwh9_13*x87))+(((-0.00918658)*x143)));
op[12]=((((2.3686)*gclwh12_8*x78))+(((-1.1843)*gclwh4_8*x125))+(((-0.015853620107)*x103))+(((-1.1843)*gclwh12_8*x73))+(((0.015853620107)*x88))+((gclwh10_12*x90))+(((-0.27404702)*x187))+(((-1.0)*x459))+(((-2.3686)*gclwh14_8*x87))+(((-1.0)*gclwh4_8*x131))+(((-1.0)*x239))+x448+x467+(((0.27404702)*x191))+(((2.3686)*gclwh4_8*x83))+(((1.1843)*gclwh14_8*x79)));
op[13]=((-1.4294428136)+((gclwh1_3*x127))+(((-1.4294428136)*gclwh3_3*x73))+(((-1.4026698336)*gclwh4_3*x125))+(((-1.4294428136)*gclwh1_3*x79))+(((-1.0)*x482))+((gclwh3_3*x133))+(((2.8321126472)*gclwh4_3*x83))+(((-1.0)*x462))+(((-1.0)*gclwh12_11*x73))+(((-1.0)*gclwh4_11*x125))+((gclwh14_3*x127))+(((-0.0189560238153082)*x202))+(((-2.8321126472)*gclwh14_3*x87))+x483+x456+((gclwh14_11*x79))+(((2.8321126472)*gclwh12_3*x78))+(((2.8321126472)*gclwh1_3*x87))+(((-1.0)*gclwh12_3*x133))+(((1.4026698336)*gclwh14_3*x79))+(((2.8321126472)*gclwh3_3*x78))+(((-1.4026698336)*gclwh12_3*x73)));
op[14]=((-0.1477860672)+(((-1.0)*x476))+x470);
op[15]=((((2.2892)*gclwh1_2*x87))+(((-2.448)*gclwh12_8*x78))+(((2.2892)*gclwh4_2*x83))+(((-1.0)*gclwh8_2*x178))+((gclwh6_2*x82))+(((0.01638506376)*x201))+(((1.224)*gclwh4_8*x125))+(((-1.0)*gclwh12_2*x159))+(((-0.01638506376)*x88))+(((1.1446)*gclwh14_2*x79))+(((-2.448)*gclwh4_8*x83))+(((-1.0)*x466))+(((-1.0)*gclwh10_2*x93))+(((0.015322176454)*x101))+(((-0.015322176454)*x108))+x458+(((-2.2892)*gclwh14_2*x87))+(((-1.0)*x108*x132))+((gclwh1_2*x109))+(((-1.1446)*gclwh12_2*x73))+(((2.2892)*gclwh3_2*x78))+((gclwh3_2*x159))+(((2.2892)*gclwh12_2*x78))+(((-1.224)*gclwh14_8*x79))+(((1.224)*gclwh12_8*x73))+(((0.01638506376)*x103))+(((2.448)*gclwh14_8*x87))+(((-1.1446)*gclwh3_2*x73))+(((-1.1446)*gclwh1_2*x79)));
op[16]=((((0.00918658)*x191))+(((-0.00918658)*x187))+(((0.0397)*gclwh12_8*x73))+(((-0.0794)*gclwh12_8*x78))+(((0.000531443653)*x103))+((gclwh10_12*x124))+(((0.000531443653)*x201))+(((-1.0)*x467))+(((-1.0)*x239))+(((0.0397)*gclwh4_8*x125))+x448+x459+(((-0.0397)*gclwh14_8*x79))+(((-0.000531443653)*x88))+(((-0.0794)*gclwh4_8*x83))+(((0.0794)*gclwh14_8*x87)));
op[17]=((0.0284524136)+(((-0.0016794336)*gclwh4_3*x125))+(((-1.0)*x482))+(((0.0016794336)*gclwh14_3*x79))+((gclwh12_11*x73))+((gclwh4_11*x125))+((gclwh3_3*x117))+(((-1.0)*x456))+(((-0.000201679835612164)*x202))+((gclwh14_3*x155))+x483+x462+(((-0.0301318472)*gclwh14_3*x87))+(((-1.0)*gclwh12_3*x117))+(((-0.0284524136)*gclwh3_3*x73))+(((0.0301318472)*gclwh1_3*x87))+(((0.0301318472)*gclwh3_3*x78))+(((-0.0284524136)*gclwh1_3*x79))+((gclwh1_3*x155))+(((0.0301318472)*gclwh12_3*x78))+(((0.0301318472)*gclwh4_3*x83))+(((-1.0)*gclwh14_11*x79))+(((-0.0016794336)*gclwh12_3*x73)));
op[18]=((1.4294428136)+(((-1.4294428136)*gclwh0_1*x79))+(((2.8321126472)*gclwh0_1*x87))+(((-1.0)*gclwh13_10*x73))+(((-1.0)*gclwh5_10*x125))+(((-1.0)*x481))+(((-2.8321126472)*gclwh5_1*x83))+((gclwh2_1*x133))+((gclwh13_1*x133))+(((-1.0)*gclwh15_1*x127))+(((-1.0)*x463))+(((1.4026698336)*gclwh13_1*x73))+x484+x455+(((-1.4026698336)*gclwh15_1*x79))+(((0.0189560238153082)*x166))+((gclwh15_10*x79))+(((2.8321126472)*gclwh15_1*x87))+(((1.4026698336)*gclwh5_1*x125))+(((-2.8321126472)*gclwh13_1*x78))+(((-1.4294428136)*gclwh2_1*x73))+((gclwh0_1*x127))+(((2.8321126472)*gclwh2_1*x78)));
op[19]=((((1.1843)*gclwh13_9*x73))+(((-1.1843)*gclwh15_9*x79))+(((1.1843)*gclwh5_9*x125))+((gclwh5_9*x131))+(((0.015853620107)*x89))+(((-1.0)*x469))+(((-0.27404702)*x183))+(((-2.3686)*gclwh5_9*x83))+(((0.27404702)*x151))+(((-1.0)*x450))+x260+(((-1.0)*gclwh11_13*x90))+x461+(((-0.015853620107)*x196))+(((-2.3686)*gclwh13_9*x78))+(((2.3686)*gclwh15_9*x87)));
op[20]=((((2.2892)*gclwh0_0*x87))+(((-1.0)*x175*x73))+(((-1.1446)*gclwh0_0*x79))+((x172*x79))+(((0.65576)*gclwh5_15*x83))+(((0.01638506376)*x147))+(((1.224)*gclwh13_9*x73))+(((-2.448)*gclwh13_9*x78))+(((2.2892)*gclwh2_0*x78))+(((-2.448)*gclwh5_9*x83))+(((0.65576)*gclwh13_15*x78))+(((0.01638506376)*x89))+(((2.448)*gclwh15_9*x87))+((gclwh2_0*x159))+(((-1.224)*gclwh15_9*x79))+(((-1.0)*gclwh15_0*x109))+(((-1.0)*x125*x161))+(((-1.1446)*gclwh2_0*x73))+(((0.015322176454)*gclwh5_0*r22))+(((1.224)*gclwh5_9*x125))+(((1.1446)*gclwh13_0*x73))+(((-0.65576)*gclwh15_15*x87))+(((-1.0)*gclwh7_0*x82))+(((-0.0043891623412)*gclwh13_15*r21))+((gclwh11_0*x93))+(((1.1446)*gclwh5_0*x125))+(((-2.2892)*gclwh13_0*x78))+(((-0.01638506376)*x196))+(((-1.1446)*gclwh15_0*x79))+(((-0.0043891623412)*gclwh5_15*r22))+((gclwh15_15*x198))+((gclwh9_0*x178))+((gclwh13_0*x159))+(((-2.2892)*gclwh5_0*x83))+(((2.2892)*gclwh15_0*x87))+((gclwh0_0*x109)));
op[21]=((-0.1477860672)+(((-4.0)*gclwh5_10*x83))+(((4.0)*gclwh15_10*x87))+((gclwh11_10*x173))+((gclwh9_10*x170))+(((-4.0)*gclwh13_10*x78))+((x121*x73))+((gclwh13_10*x120))+(((-1.0)*x188*x79))+((gclwh5_10*x150))+(((-1.0)*gclwh7_10*x149))+(((-1.0)*gclwh15_10*x114))+((gclwh5_10*r22*x91)));
op[22]=((-0.0284524136)+(((-0.0301318472)*gclwh13_1*x78))+((gclwh2_1*x117))+(((-0.0301318472)*gclwh5_1*x83))+(((-1.0)*x481))+(((0.000201679835612164)*x166))+((gclwh5_10*x125))+((gclwh13_1*x117))+((gclwh13_10*x73))+(((0.0301318472)*gclwh0_1*x87))+(((-0.0016794336)*gclwh15_1*x79))+(((-0.0284524136)*gclwh2_1*x73))+(((0.0016794336)*gclwh5_1*x125))+(((0.0016794336)*gclwh13_1*x73))+(((-1.0)*x455))+(((0.0301318472)*gclwh15_1*x87))+x484+x463+(((-1.0)*gclwh15_1*x155))+(((0.0301318472)*gclwh2_1*x78))+((gclwh0_1*x155))+(((-1.0)*gclwh15_10*x79))+(((-0.0284524136)*gclwh0_1*x79)));
op[23]=((((-0.00918658)*x183))+(((-1.0)*gclwh11_13*x124))+(((-0.000531443653)*x147))+(((0.00918658)*x151))+(((-0.0397)*gclwh13_9*x73))+(((-1.0)*x461))+(((0.0794)*gclwh5_9*x83))+(((-1.0)*x450))+x260+x469+(((-0.0397)*gclwh5_9*x125))+(((0.0794)*gclwh13_9*x78))+(((-0.0794)*gclwh15_9*x87))+(((-0.000531443653)*x89))+(((0.0397)*gclwh15_9*x79))+((gclwh15_9*x119)));
op[24]=((-0.776616568)+(((-1.0)*x472))+x474);
op[25]=((((-0.54809404)*x139))+(((-0.031707240214)*x104))+(((0.54809404)*x80))+((gclwh8_2*x197))+((x85*x86))+(((-1.0)*x452))+x268+(((4.7372)*gclwh6_2*x78))+(((0.031707240214)*x85))+(((-2.3686)*gclwh6_2*x73))+(((2.3686)*gclwh8_2*x79))+(((-4.7372)*gclwh8_2*x87))+(((-4.7372)*gclwh10_2*x83))+(((-0.54809404)*x144)));
op[26]=((((-4.5784)*gclwh8_12*x87))+(((2.2892)*gclwh8_12*x79))+(((0.030644352908)*x169))+((gclwh14_14*x140))+(((-0.030644352908)*x115))+(((0.030644352908)*x137))+(((-4.5784)*gclwh10_12*x83))+(((-0.151742864)*x167))+(((-0.151742864)*x177))+(((-2.2892)*gclwh6_12*x73))+(((4.5784)*gclwh6_12*x78))+(((2.2892)*gclwh10_12*x125)));
op[27]=((((-1.0)*x145*x79))+(((-0.05354596)*x199))+((x192*x73))+(((-1.0)*gclwh8_11*x116))+((gclwh4_11*x118))+(((-1.0)*x125*x185))+(((8.0)*gclwh8_11*x87))+(((-0.9256)*x107))+(((8.0)*gclwh10_11*x83))+((gclwh12_11*x182))+(((-8.0)*gclwh6_11*x78))+((gclwh6_11*x153)));
op[28]=((-0.026033672)+(((-1.0)*x474))+x472);
op[29]=((((0.0794)*gclwh8_2*x79))+(((0.1588)*gclwh6_2*x78))+(((-0.01837316)*x144))+((gclwh8_2*x160))+(((-0.0794)*gclwh6_2*x73))+(((-0.1588)*gclwh8_2*x87))+x452+((x130*x85))+(((-0.1588)*gclwh10_2*x83))+(((-0.001062887306)*x104))+(((0.001062887306)*x85))+(((-1.0)*x268))+(((0.01837316)*x80))+(((-0.01837316)*x139)));
op[30]=(((x110*x86))+(((-0.54809404)*x102))+(((-4.7372)*gclwh11_0*x83))+(((-0.54809404)*x123))+(((-2.3686)*gclwh7_0*x73))+(((0.031707240214)*x110))+(((-0.031707240214)*x126))+(((-4.7372)*npx*x76))+(((2.3686)*gclwh9_0*x79))+((gclwh15_0*x165))+x451+(((-1.0)*x276))+((gclwh9_0*x197))+(((4.7372)*gclwh7_0*x78)));
op[31]=((-0.776616568)+(((-1.0)*x473))+x475);
op[32]=((((-1.0)*gclwh5_10*x118))+(((-1.0)*x162*x73))+(((-1.0)*gclwh13_10*x182))+((x156*x79))+(((8.0)*gclwh7_10*x78))+(((4.0)*pp*x81))+((gclwh9_10*x116))+(((-1.0)*gclwh7_10*x153))+(((0.05354596)*x81))+(((-8.0)*gclwh11_10*x83))+(((0.9256)*gclwh15_10*rxp0_2))+(((-8.0)*gclwh9_10*x87)));
op[33]=((((2.2892)*pp*x99))+(((-0.030644352908)*x134))+(((0.030644352908)*x99))+(((0.030644352908)*x193))+(((2.2892)*gclwh9_13*x79))+(((-0.151742864)*x146))+(((-4.5784)*gclwh11_13*x83))+(((-2.2892)*gclwh7_13*x73))+((gclwh15_15*x140))+(((-4.5784)*gclwh9_13*x87))+(((4.5784)*gclwh7_13*x78))+(((-0.151742864)*x95)));
op[34]=((((-0.01837316)*x102))+(((0.001062887306)*x110))+(((-0.0794)*gclwh7_0*x73))+(((-0.1588)*npx*x76))+(((0.01837316)*gclwh15_0*rxp0_2))+(((0.0794)*gclwh9_0*x79))+(((-0.1588)*gclwh11_0*x83))+(((-1.0)*x451))+x276+(((0.1588)*gclwh7_0*x78))+(((-0.001062887306)*x126))+((gclwh9_0*x160))+(((-0.01837316)*x123))+((x110*x130)));
op[35]=((-0.026033672)+(((-1.0)*x475))+x473);
op[36]=((2.7513803328)+(((-1.0)*x476))+x470);
op[37]=((((4.7372)*gclwh12_2*x78))+(((4.7372)*gclwh4_2*x83))+(((-1.0)*gclwh12_2*x176))+((gclwh1_2*x197))+(((-2.3686)*gclwh1_2*x79))+(((-0.031707240214)*x108))+(((0.031707240214)*x101))+(((-1.0)*x466))+(((0.54809404)*x152))+x458+(((4.7372)*gclwh3_2*x78))+(((2.3686)*gclwh14_2*x79))+(((4.7372)*gclwh1_2*x87))+(((-1.0)*x108*x86))+(((-2.3686)*gclwh3_2*x73))+(((-2.3686)*gclwh12_2*x73))+((gclwh3_2*x176))+(((-0.54809404)*gclwh10_2*rxp2_2))+(((-4.7372)*gclwh14_2*x87))+(((-1.0)*gclwh8_2*x165)));
IkReal x485=pz*pz;
IkReal x486=pp*pp;
IkReal x487=((0.2314)*pz);
IkReal x488=(pp*r21);
IkReal x489=((0.2314)*rxp0_2);
IkReal x490=((0.01338649)*r22);
IkReal x491=(gclwh9_0*pz);
IkReal x492=((0.01338649)*r21);
IkReal x493=(npy*pz);
IkReal x494=((4.0)*gclwh12_11);
IkReal x495=(pp*r20);
IkReal x496=((0.26486044)*rxp0_2);
IkReal x497=((0.01837316)*rxp1_2);
IkReal x498=(gclwh11_10*r22);
IkReal x499=((0.26486044)*rxp1_2);
IkReal x500=(npz*pz);
IkReal x501=(gclwh4_14*r22);
IkReal x502=(npx*pz);
IkReal x503=(gclwh14_8*r20);
IkReal x504=(gclwh13_9*r21);
IkReal x505=((0.27404702)*rxp2_2);
IkReal x506=((2.0)*pp);
IkReal x507=((0.0189560238153082)*r21);
IkReal x508=(gclwh2_0*pz);
IkReal x509=((0.26486044)*rxp2_2);
IkReal x510=(gclwh14_2*pz);
IkReal x511=(gclwh11_0*pz);
IkReal x512=((0.015853620107)*r22);
IkReal x513=((0.001062887306)*r20);
IkReal x514=((0.2314)*rxp2_2);
IkReal x515=((0.000531443653)*r22);
IkReal x516=((0.01338649)*r20);
IkReal x517=(gclwh12_8*r21);
IkReal x518=(gclwh15_1*rxp0_2);
IkReal x519=(gclwh10_2*r22);
IkReal x520=(gclwh15_0*r20);
IkReal x521=((2.0)*gclwh9_10);
IkReal x522=(pp*r22);
IkReal x523=(gclwh12_14*r21);
IkReal x524=((0.2832336)*rxp2_2);
IkReal x525=(gclwh15_10*r20);
IkReal x526=((4.0)*gclwh14_11);
IkReal x527=((0.000201679835612164)*r21);
IkReal x528=((0.02677298)*r21);
IkReal x529=((2.0)*gclwh13_10);
IkReal x530=((0.037935716)*rxp2_2);
IkReal x531=(gclwh11_13*rxp2_2);
IkReal x532=((0.000531443653)*r20);
IkReal x533=(gclwh5_10*r22);
IkReal x534=(gclwh1_3*r20);
IkReal x535=(gclwh13_9*rxp1_2);
IkReal x536=(gclwh14_8*rxp0_2);
IkReal x537=(gclwh4_2*r22);
IkReal x538=(gclwh7_13*r21);
IkReal x539=(gclwh1_2*pz);
IkReal x540=((2.0)*gclwh7_10);
IkReal x541=((1.0)*pz);
IkReal x542=((0.0021945811706)*r22);
IkReal x543=((0.2314)*rxp1_2);
IkReal x544=(gclwh13_0*pz);
IkReal x545=((4.0)*gclwh15_10);
IkReal x546=(gclwh12_2*pz);
IkReal x547=(gclwh15_0*pz);
IkReal x548=((0.9256)*rxp0_2);
IkReal x549=(gclwh15_15*r20);
IkReal x550=(gclwh15_9*rxp0_2);
IkReal x551=((0.65576)*gclwh13_15);
IkReal x552=(gclwh5_9*r22);
IkReal x553=(gclwh12_8*rxp1_2);
IkReal x554=((0.4628)*rxp1_2);
IkReal x555=(gclwh7_13*rxp1_2);
IkReal x556=((0.65576)*gclwh5_15);
IkReal x557=(gclwh6_2*pz);
IkReal x558=(gclwh8_2*pz);
IkReal x559=(gclwh14_3*r20);
IkReal x560=((0.32767543328104)*rxp1_2);
IkReal x561=(gclwh5_0*pz);
IkReal x562=((0.65576)*gclwh14_14);
IkReal x563=((0.015322176454)*r20);
IkReal x564=((0.32788)*gclwh13_15);
IkReal x565=(gclwh4_2*pz);
IkReal x566=(gclwh6_12*r21);
IkReal x567=(gclwh11_0*rxp2_2);
IkReal x568=((0.00918658)*rxp2_2);
IkReal x569=(gclwh13_0*r21);
IkReal x570=((0.32788)*gclwh5_15);
IkReal x571=(gclwh10_2*pz);
IkReal x572=((0.0021945811706)*r21);
IkReal x573=(gclwh4_11*r22);
IkReal x574=(gclwh5_1*r22);
IkReal x575=((0.001062887306)*r21);
IkReal x576=(gclwh12_14*rxp1_2);
IkReal x577=((0.015322176454)*r21);
IkReal x578=(gclwh10_11*rxp2_2);
IkReal x579=((0.32788)*gclwh14_14);
IkReal x580=((0.075871432)*rxp2_2);
IkReal x581=((4.0)*gclwh4_11);
IkReal x582=((0.4628)*rxp0_2);
IkReal x583=(gclwh13_15*r21);
IkReal x584=((0.32788)*gclwh15_15);
IkReal x585=((0.015853620107)*r20);
IkReal x586=((2.0)*gclwh6_11);
IkReal x587=(gclwh5_15*r22);
IkReal x588=(gclwh8_12*rxp0_2);
IkReal x589=(gclwh4_3*rxp2_2);
IkReal x590=((2.0)*gclwh12_11);
IkReal x591=((0.075871432)*rxp0_2);
IkReal x592=((0.65576)*gclwh15_15);
IkReal x593=((0.9256)*rxp1_2);
IkReal x594=(gclwh9_13*rxp0_2);
IkReal x595=(gclwh5_0*r22);
IkReal x596=((0.05354596)*r21);
IkReal x597=((0.65576)*gclwh12_14);
IkReal x598=((0.02677298)*r20);
IkReal x599=((2.0)*gclwh8_11);
IkReal x600=((0.000201679835612164)*r20);
IkReal x601=((4.0)*gclwh5_10);
IkReal x602=((0.32788)*gclwh12_14);
IkReal x603=(gclwh6_12*rxp1_2);
IkReal x604=((2.0)*gclwh15_10);
IkReal x605=((4.0)*gclwh13_10);
IkReal x606=((0.4628)*rxp2_2);
IkReal x607=((0.0189560238153082)*r20);
IkReal x608=(gclwh5_1*rxp2_2);
IkReal x609=((0.037935716)*rxp0_2);
IkReal x610=(gclwh14_14*r20);
IkReal x611=((0.01837316)*rxp0_2);
IkReal x612=(gclwh14_3*rxp0_2);
IkReal x613=(gclwh15_9*r20);
IkReal x614=((0.0021945811706)*r20);
IkReal x615=(gclwh7_0*pz);
IkReal x616=(gclwh10_11*r22);
IkReal x617=((0.037935716)*rxp1_2);
IkReal x618=((0.00348625472104)*rxp1_2);
IkReal x619=(gclwh4_8*r22);
IkReal x620=(gclwh4_3*r22);
IkReal x621=((0.02677298)*rxp2_2);
IkReal x622=((2.0)*gclwh14_11);
IkReal x623=((0.0043891623412)*x587);
IkReal x624=((0.0043891623412)*x583);
IkReal x625=((0.0043891623412)*x549);
IkReal x626=((0.02677298)*x525);
IkReal x627=(gclwh7_10*x554);
IkReal x628=(gclwh11_10*x606);
IkReal x629=(gclwh9_10*x582);
IkReal x630=(gclwh13_10*x528);
IkReal x631=((0.02677298)*x533);
IkReal x632=(gclwh6_5*x572);
IkReal x633=((0.037935716)*x576);
IkReal x634=(gclwh4_14*x530);
IkReal x635=(gclwh10_5*x542);
IkReal x636=(gclwh8_5*x614);
IkReal x637=(gclwh14_14*x609);
IkReal x638=(gclwh14_11*x489);
IkReal x639=(gclwh10_11*x490);
IkReal x640=(gclwh4_8*x621);
IkReal x641=(gclwh8_11*x516);
IkReal x642=((0.02677298)*x553);
IkReal x643=(gclwh4_11*x514);
IkReal x644=(gclwh12_11*x543);
IkReal x645=(gclwh6_11*x492);
IkReal x646=((0.02677298)*x536);
IkReal x647=(gclwh5_10*x514);
IkReal x648=(gclwh13_10*x543);
IkReal x649=((0.02677298)*x535);
IkReal x650=(gclwh5_9*x621);
IkReal x651=(gclwh7_10*x492);
IkReal x652=(gclwh11_10*x490);
IkReal x653=(gclwh9_10*x516);
IkReal x654=(gclwh15_10*x489);
IkReal x655=((0.02677298)*x550);
IkReal x656=(gclwh5_15*x530);
IkReal x657=(gclwh13_15*x617);
IkReal x658=(gclwh7_7*x572);
IkReal x659=(gclwh15_15*x609);
IkReal x660=(gclwh11_7*x542);
IkReal x661=(gclwh9_7*x614);
IkReal x662=((0.02677298)*x573);
IkReal x663=((0.4628)*x578);
IkReal x664=(gclwh8_11*x582);
IkReal x665=(gclwh12_11*x528);
IkReal x666=((0.0043891623412)*x523);
IkReal x667=((0.0043891623412)*x501);
IkReal x668=((0.0043891623412)*x610);
IkReal x669=((0.0021945811706)*x501);
IkReal x670=(gclwh10_5*x530);
IkReal x671=(gclwh8_5*x609);
IkReal x672=((0.0021945811706)*x523);
IkReal x673=(gclwh6_5*x617);
IkReal x674=((0.0021945811706)*x610);
IkReal x675=(gclwh14_11*x516);
IkReal x676=((0.001548816893)*x517);
IkReal x677=(gclwh6_11*x543);
IkReal x678=((0.001548816893)*x619);
IkReal x679=(gclwh4_11*x490);
IkReal x680=(gclwh12_11*x492);
IkReal x681=(gclwh8_11*x489);
IkReal x682=(gclwh10_11*x514);
IkReal x683=((0.001548816893)*x503);
IkReal x684=((0.001548816893)*x613);
IkReal x685=(gclwh7_10*x543);
IkReal x686=(gclwh15_10*x516);
IkReal x687=((0.001548816893)*x552);
IkReal x688=(gclwh5_10*x490);
IkReal x689=((0.001548816893)*x504);
IkReal x690=(gclwh9_10*x489);
IkReal x691=(gclwh11_10*x514);
IkReal x692=(gclwh13_10*x492);
IkReal x693=((0.0021945811706)*x549);
IkReal x694=(gclwh7_7*x617);
IkReal x695=(gclwh9_7*x609);
IkReal x696=(gclwh5_15*x542);
IkReal x697=(gclwh11_7*x530);
IkReal x698=(gclwh13_15*x572);
IkReal x699=(r20*x486);
IkReal x700=(pp*x543);
IkReal x701=((2.0)*x485);
IkReal x702=(r21*x486);
IkReal x703=(x488*x564);
IkReal x704=(x522*x570);
IkReal x705=(x502*x592);
IkReal x706=(x495*x584);
IkReal x707=(x500*x556);
IkReal x708=(x493*x551);
IkReal x709=(x495*x604);
IkReal x710=(x500*x601);
IkReal x711=(x493*x605);
IkReal x712=(x488*x529);
IkReal x713=(x502*x545);
IkReal x714=(x506*x533);
IkReal x715=((0.16394)*gclwh6_5*x488);
IkReal x716=((0.32788)*gclwh8_5*x502);
IkReal x717=((0.32788)*gclwh10_5*x500);
IkReal x718=((0.32788)*gclwh6_5*x493);
IkReal x719=((0.16394)*gclwh10_5*x522);
IkReal x720=((0.16394)*gclwh8_5*x495);
IkReal x721=(gclwh14_2*rxp0_2*x487);
IkReal x722=(gclwh12_3*x700);
IkReal x723=(x490*x571);
IkReal x724=(x493*x586);
IkReal x725=(pp*pz*x519);
IkReal x726=(gclwh4_3*pp*x514);
IkReal x727=(x495*x558);
IkReal x728=(x516*x558);
IkReal x729=((2.0)*gclwh10_11*x500);
IkReal x730=(gclwh14_3*pp*x489);
IkReal x731=(gclwh4_2*rxp2_2*x487);
IkReal x732=(gclwh12_2*rxp1_2*x487);
IkReal x733=(x502*x599);
IkReal x734=(x492*x557);
IkReal x735=(x490*x511);
IkReal x736=(gclwh13_1*x700);
IkReal x737=((2.0)*gclwh11_10*x500);
IkReal x738=(x502*x521);
IkReal x739=(gclwh15_0*rxp0_2*x487);
IkReal x740=(gclwh5_1*pp*x514);
IkReal x741=(x491*x516);
IkReal x742=(x511*x522);
IkReal x743=(x491*x495);
IkReal x744=(x492*x615);
IkReal x745=(gclwh13_0*rxp1_2*x487);
IkReal x746=(gclwh15_1*pp*x489);
IkReal x747=(gclwh5_0*rxp2_2*x487);
IkReal x748=(x493*x540);
IkReal x749=((0.16394)*gclwh7_7*x488);
IkReal x750=((0.32788)*gclwh11_7*x500);
IkReal x751=((0.32788)*gclwh9_7*x502);
IkReal x752=((0.16394)*gclwh9_7*x495);
IkReal x753=((0.32788)*gclwh7_7*x493);
IkReal x754=((0.16394)*gclwh11_7*x522);
IkReal x755=(x506*x573);
IkReal x756=(x488*x590);
IkReal x757=(x502*x526);
IkReal x758=(x502*x562);
IkReal x759=(x488*x602);
IkReal x760=((0.32788)*pp*x501);
IkReal x761=((0.65576)*gclwh4_14*x500);
IkReal x762=(x495*x579);
IkReal x763=(x493*x597);
IkReal x764=((0.16394)*gclwh12_14*x488);
IkReal x765=(x502*x579);
IkReal x766=((0.16394)*pp*x501);
IkReal x767=(x493*x602);
IkReal x768=((0.16394)*gclwh14_14*x495);
IkReal x769=((0.32788)*gclwh4_14*x500);
IkReal x770=(x495*x510);
IkReal x771=((0.1157)*gclwh4_8*x522);
IkReal x772=(gclwh6_2*rxp1_2*x487);
IkReal x773=(gclwh12_3*x702);
IkReal x774=(x516*x539);
IkReal x775=((0.1157)*gclwh12_8*x488);
IkReal x776=((2.0)*gclwh4_11*x500);
IkReal x777=(x510*x516);
IkReal x778=(gclwh14_8*npx*x487);
IkReal x779=(gclwh3_3*x702);
IkReal x780=(x486*x534);
IkReal x781=(gclwh3_2*pz*x492);
IkReal x782=(x486*x620);
IkReal x783=(x493*x590);
IkReal x784=(x492*x546);
IkReal x785=(gclwh12_8*npy*x487);
IkReal x786=(gclwh10_2*rxp2_2*x487);
IkReal x787=(x502*x622);
IkReal x788=(x490*x565);
IkReal x789=(gclwh4_8*npz*x487);
IkReal x790=((0.1157)*gclwh14_8*x495);
IkReal x791=(gclwh8_2*rxp0_2*x487);
IkReal x792=(x492*x508);
IkReal x793=(gclwh15_1*x699);
IkReal x794=(x487*x567);
IkReal x795=(x522*x561);
IkReal x796=(x488*x544);
IkReal x797=(gclwh0_0*pz*x516);
IkReal x798=(gclwh5_9*npz*x487);
IkReal x799=(x490*x561);
IkReal x800=(x492*x544);
IkReal x801=(gclwh13_9*npy*x487);
IkReal x802=((0.1157)*gclwh15_9*x495);
IkReal x803=(gclwh9_0*rxp0_2*x487);
IkReal x804=(gclwh2_1*x702);
IkReal x805=((2.0)*gclwh5_10*x500);
IkReal x806=(x493*x529);
IkReal x807=(gclwh0_1*x699);
IkReal x808=((0.1157)*gclwh5_9*x522);
IkReal x809=(x502*x604);
IkReal x810=((0.1157)*gclwh13_9*x488);
IkReal x811=(gclwh7_0*rxp1_2*x487);
IkReal x812=(gclwh15_9*npx*x487);
IkReal x813=(x516*x547);
IkReal x814=((0.16394)*gclwh15_15*x495);
IkReal x815=(x493*x564);
IkReal x816=(x500*x570);
IkReal x817=(x502*x584);
IkReal x818=((0.16394)*gclwh5_15*x522);
IkReal x819=((0.16394)*gclwh13_15*x488);
IkReal x820=(gclwh6_2*npy*x701);
IkReal x821=(gclwh6_2*x488*x541);
IkReal x822=(gclwh10_2*npz*x701);
IkReal x823=(gclwh8_2*npx*x701);
IkReal x824=(gclwh7_0*npy*x701);
IkReal x825=(gclwh9_0*npx*x701);
IkReal x826=(gclwh11_0*npz*x701);
IkReal x827=(gclwh7_0*x488*x541);
IkReal x828=(gclwh12_2*npy*x701);
IkReal x829=(gclwh3_2*npy*x701);
IkReal x830=(gclwh1_2*npx*x701);
IkReal x831=(gclwh14_3*x502*x506);
IkReal x832=(gclwh4_2*npz*x701);
IkReal x833=(gclwh4_3*x500*x506);
IkReal x834=(gclwh12_2*x488*x541);
IkReal x835=((1.0)*x495*x539);
IkReal x836=(gclwh3_3*x493*x506);
IkReal x837=(gclwh4_2*x522*x541);
IkReal x838=(gclwh1_3*x502*x506);
IkReal x839=(gclwh3_2*x488*x541);
IkReal x840=(gclwh12_3*x493*x506);
IkReal x841=(gclwh14_2*npx*x701);
IkReal x842=((1.0)*x486*x559);
IkReal x843=(gclwh0_0*npx*x701);
IkReal x844=(gclwh2_0*npy*x701);
IkReal x845=(gclwh5_1*x500*x506);
IkReal x846=(gclwh13_1*x493*x506);
IkReal x847=(gclwh15_0*npx*x701);
IkReal x848=(gclwh2_1*x493*x506);
IkReal x849=(gclwh0_1*x502*x506);
IkReal x850=(gclwh5_0*npz*x701);
IkReal x851=(gclwh13_0*npy*x701);
IkReal x852=(gclwh0_0*x495*x541);
IkReal x853=(gclwh15_0*x495*x541);
IkReal x854=((1.0)*x488*x508);
IkReal x855=((1.0)*gclwh13_1*x702);
IkReal x856=((1.0)*x486*x574);
IkReal x857=(gclwh15_1*x502*x506);
IkReal x858=(x656+x657);
IkReal x859=(x670+x671);
IkReal x860=(x634+x633);
IkReal x861=(x695+x697);
IkReal x862=(x652+x653+x654+x748);
IkReal x863=(x641+x638+x639+x724);
IkReal x864=(x686+x685+x805+x806);
IkReal x865=(x677+x675+x776+x783);
IkReal x866=(x674+x768+x769+x767);
IkReal x867=(x625+x708+x706+x707);
IkReal x868=(x632+x715+x717+x716);
IkReal x869=(x693+x816+x814+x815);
IkReal x870=(x658+x751+x750+x749);
IkReal x871=(x668+x761+x762+x763);
IkReal x872=(x688+x690+x691+x692+x809);
IkReal x873=(x679+x682+x681+x680+x787);
IkReal x874=(x645+x644+x643+x733+x729);
IkReal x875=(x647+x648+x651+x737+x738);
IkReal x876=(((x493*x494))+((gclwh14_11*x598))+((x495*x622))+((x500*x581))+((gclwh6_11*x554)));
IkReal x877=(x624+x623+x703+x704+x705);
IkReal x878=(x667+x666+x759+x758+x760);
IkReal x879=(x627+x626+x711+x710+x709);
IkReal x880=(x661+x660+x754+x753+x752);
IkReal x881=(x669+x672+x764+x765+x766);
IkReal x882=(x696+x698+x818+x819+x817);
IkReal x883=(x636+x635+x719+x718+x720);
IkReal x884=(x629+x628+x630+x631+x713+x712+x714);
IkReal x885=(x663+x662+x665+x664+x755+x757+x756);
IkReal x886=(x646+x734+x732+x731+x730+x823+x822+x821);
IkReal x887=(x655+x746+x747+x744+x745+x827+x826+x825);
IkReal x888=(x649+x650+x736+x735+x739+x742+x743+x740+x741+x824);
IkReal x889=(x642+x640+x721+x722+x723+x725+x726+x727+x728+x820);
IkReal x890=(x689+x687+x852+x853+x850+x851+x856+x857+x854+x855+x812+x813+x810+x811+x849+x848+x808);
IkReal x891=(x487+x678+x676+x773+x772+x771+x770+x777+x775+x774+x779+x778+x782+x780+x781+x829+x828+x830+x831+x832);
IkReal x892=(x683+x791+x790+x786+x784+x785+x788+x789+x834+x835+x836+x837+x833+x838+x839+x841+x840+x842);
IkReal x893=(x487+x684+x793+x792+x795+x794+x797+x796+x799+x798+x843+x845+x844+x847+x846+x804+x807+x801+x800+x803+x802);
op[38]=((((-1.0)*x488*x597))+(((-1.31152)*gclwh14_14*x502))+(((-0.0087783246824)*x501))+((x495*x562))+(((-0.0087783246824)*x523))+(((0.52972088)*x603))+(((-0.65576)*pp*x501))+(((-0.52972088)*gclwh10_12*rxp2_2))+(((1.31152)*gclwh12_14*x493))+(((0.0087783246824)*x610))+(((1.31152)*gclwh4_14*x500))+(((-0.52972088)*x588)));
op[39]=((-0.0805615456)+(((-1.0)*x495*x526))+(((-0.05354596)*gclwh14_11*r20))+(((0.05354596)*x573))+((x488*x494))+((gclwh8_11*x548))+(((-8.0)*gclwh12_11*x493))+(((-1.0)*gclwh6_11*x593))+(((0.9256)*x578))+((gclwh12_11*x596))+(((8.0)*gclwh14_11*x502))+((x522*x581))+(((-8.0)*gclwh4_11*x500)));
op[40]=((0.0506004672)+x885+(((-1.0)*x876)));
op[41]=((((-1.0)*gclwh12_2*x575))+(((-0.0794)*gclwh1_2*x495))+(((0.1588)*gclwh12_2*x493))+(((-0.0794)*gclwh3_2*x488))+(((0.0794)*gclwh14_2*x495))+(((-0.1588)*gclwh14_2*x502))+(((0.1588)*gclwh1_2*x502))+(((0.1588)*gclwh4_2*x500))+((gclwh6_2*x497))+((gclwh14_2*x513))+((gclwh1_2*x513))+(((0.1588)*gclwh3_2*x493))+(((-0.0794)*gclwh12_2*x488))+(((-0.0794)*gclwh4_2*x522))+(((-0.01837316)*gclwh10_2*rxp2_2))+((gclwh3_2*x575))+(((-0.001062887306)*x537))+(((-1.0)*gclwh8_2*x611))+x878+(((-1.0)*x871)));
op[42]=((((2.3686)*gclwh5_0*x522))+(((0.031707240214)*gclwh0_0*r20))+(((-4.7372)*gclwh13_0*x493))+(((0.54809404)*x567))+(((-2.3686)*gclwh0_0*x495))+(((2.3686)*gclwh13_0*x488))+(((-2.3686)*gclwh15_0*x495))+(((0.54809404)*gclwh9_0*rxp0_2))+(((-0.031707240214)*x520))+(((4.7372)*gclwh0_0*x502))+(((4.7372)*gclwh15_0*x502))+(((4.7372)*gclwh2_0*x493))+(((-4.7372)*gclwh5_0*x500))+(((0.031707240214)*x595))+(((0.031707240214)*gclwh2_0*r21))+(((-2.3686)*gclwh2_0*x488))+(((0.031707240214)*x569))+x867+(((-0.54809404)*gclwh7_0*rxp1_2))+(((-1.0)*x877)));
op[43]=((2.7513803328)+x884+(((-1.0)*x879)));
op[44]=((0.0805615456)+(((-1.0)*x495*x545))+(((-0.05354596)*x525))+((x488*x605))+(((-8.0)*gclwh5_10*x500))+((gclwh13_10*x596))+(((8.0)*gclwh15_10*x502))+(((0.05354596)*x533))+(((-1.0)*gclwh7_10*x593))+((x522*x601))+((gclwh9_10*x548))+(((-8.0)*gclwh13_10*x493))+(((0.9256)*gclwh11_10*rxp2_2)));
op[45]=((((-0.0087783246824)*x549))+(((-1.0)*x495*x592))+(((-1.31152)*gclwh5_15*x500))+(((0.52972088)*x594))+(((1.31152)*gclwh15_15*x502))+((x488*x551))+(((-0.52972088)*x555))+(((-1.31152)*gclwh13_15*x493))+(((0.0087783246824)*x583))+(((0.0087783246824)*x587))+(((0.52972088)*x531))+((x522*x556)));
op[46]=((((0.1588)*gclwh0_0*x502))+(((-1.0)*x867))+(((-0.1588)*gclwh13_0*x493))+((gclwh2_0*x575))+(((-1.0)*gclwh15_0*x513))+((gclwh0_0*x513))+(((0.1588)*gclwh15_0*x502))+(((0.001062887306)*x569))+(((-0.0794)*gclwh2_0*x488))+(((-0.0794)*gclwh15_0*x495))+(((0.01837316)*x567))+((gclwh9_0*x611))+(((0.0794)*gclwh13_0*x488))+(((0.001062887306)*x595))+(((-1.0)*gclwh7_0*x497))+(((0.1588)*gclwh2_0*x493))+x877+(((-0.1588)*gclwh5_0*x500))+(((0.0794)*gclwh5_0*x522))+(((-0.0794)*gclwh0_0*x495)));
op[47]=((0.0506004672)+(((-1.0)*x884))+x879);
op[48]=((((0.27404702)*x536))+(((-2.3686)*gclwh10_12*x500))+(((-1.0)*x860))+(((1.1843)*gclwh8_12*x495))+((gclwh8_12*x585))+(((-2.3686)*gclwh8_12*x502))+(((2.3686)*gclwh6_12*x493))+(((1.1843)*gclwh10_12*x522))+(((-1.0)*x883))+(((-0.27404702)*x553))+(((-1.1843)*gclwh6_12*x488))+x637+x868+(((-0.015853620107)*x566))+(((-1.0)*gclwh4_8*x505))+((gclwh10_12*x512)));
op[49]=((((-1.0)*x863))+(((0.32767543328104)*x612))+((gclwh6_11*x488))+(((-1.0)*gclwh8_11*x495))+(((-1.0)*gclwh10_11*x522))+(((-1.0)*x886))+(((-1.0)*gclwh12_3*x560))+(((-0.32767543328104)*x589))+x874+x889);
op[50]=((0.375291448)+(((-0.02677298)*x616))+(((-1.0)*x506*x616))+((gclwh12_11*x554))+((gclwh6_11*x528))+((x488*x586))+(((-1.0)*x495*x599))+(((-1.0)*gclwh8_11*x598))+(((-1.0)*gclwh14_11*x582))+(((-4.0)*gclwh6_11*x493))+(((4.0)*gclwh8_11*x502))+(((4.0)*gclwh10_11*x500))+((gclwh4_11*x606)));
op[51]=(((gclwh4_8*x524))+((gclwh4_14*x580))+(((-1.1446)*gclwh8_2*x495))+(((2.2892)*gclwh8_2*x502))+(((-0.2832336)*x536))+(((-1.0)*gclwh14_2*x496))+(((-0.015322176454)*x519))+((gclwh12_2*x499))+(((-2.2892)*gclwh6_2*x493))+(((-1.0)*gclwh8_2*x563))+(((-1.1446)*pp*x519))+(((-1.0)*gclwh14_14*x591))+((gclwh6_2*x577))+(((0.2832336)*x553))+(((0.075871432)*x576))+(((1.1446)*gclwh6_2*x488))+((gclwh4_2*x509))+(((2.2892)*gclwh10_2*x500)));
op[52]=((((0.0397)*gclwh8_12*x495))+((gclwh8_12*x532))+(((-0.00918658)*x536))+(((-0.0794)*gclwh8_12*x502))+(((-1.0)*x637))+(((-0.0397)*gclwh6_12*x488))+(((-1.0)*x883))+(((0.00918658)*x553))+((gclwh4_8*x568))+(((0.0397)*gclwh10_12*x522))+x868+x860+(((0.0794)*gclwh6_12*x493))+(((-0.0794)*gclwh10_12*x500))+(((-0.000531443653)*x566))+((gclwh10_12*x515)));
op[53]=((((-1.0)*gclwh12_3*x618))+(((-1.0)*x886))+(((0.00348625472104)*x612))+(((-1.0)*gclwh6_11*x488))+x863+x889+((gclwh10_11*x522))+(((-0.00348625472104)*x589))+((gclwh8_11*x495))+(((-1.0)*x874)));
op[54]=((((-0.32767543328104)*x608))+((gclwh9_10*x495))+(((-1.0)*gclwh13_1*x560))+(((0.32767543328104)*x518))+((pp*x498))+(((-1.0)*x887))+x862+x888+(((-1.0)*gclwh7_10*x488))+(((-1.0)*x875)));
op[55]=((((2.3686)*gclwh7_13*x493))+(((-1.0)*x858))+(((0.27404702)*x550))+(((-2.3686)*gclwh11_13*x500))+(((-0.27404702)*x535))+((gclwh11_13*x512))+(((-1.0)*x880))+(((-0.015853620107)*x538))+((gclwh9_13*x585))+x659+(((1.1843)*gclwh11_13*x522))+(((-1.1843)*gclwh7_13*x488))+x870+(((-1.0)*gclwh5_9*x505))+(((-2.3686)*gclwh9_13*x502))+(((1.1843)*gclwh9_13*x495)));
op[56]=((((-1.0)*gclwh9_0*x563))+(((-2.2892)*gclwh7_0*x493))+(((-1.0)*gclwh5_15*x580))+(((-0.2832336)*x535))+(((-0.015322176454)*gclwh11_0*r22))+(((-1.0)*gclwh5_9*x524))+((gclwh13_0*x499))+((gclwh15_15*x591))+(((2.2892)*gclwh11_0*x500))+(((-1.0)*gclwh15_0*x496))+(((2.2892)*npx*x491))+((gclwh5_0*x509))+(((-1.1446)*gclwh11_0*x522))+((gclwh7_0*x577))+(((-1.1446)*gclwh9_0*x495))+(((0.2832336)*x550))+(((-0.075871432)*gclwh13_15*rxp1_2))+(((1.1446)*gclwh7_0*x488)));
op[57]=((0.375291448)+(((-1.0)*x495*x521))+(((4.0)*gclwh11_10*x500))+((gclwh13_10*x554))+(((-0.02677298)*x498))+(((-1.0)*gclwh15_10*x582))+((x488*x540))+(((-4.0)*gclwh7_10*x493))+((gclwh5_10*x606))+((gclwh7_10*x528))+(((4.0)*gclwh9_10*x502))+(((-1.0)*x498*x506))+(((-1.0)*gclwh9_10*x598)));
op[58]=((((-1.0)*x862))+(((-1.0)*gclwh13_1*x618))+(((-0.00348625472104)*x608))+(((0.00348625472104)*x518))+(((-1.0)*pp*x498))+(((-1.0)*x887))+(((-1.0)*gclwh9_10*x495))+((gclwh7_10*x488))+x875+x888);
op[59]=((((-0.0397)*gclwh7_13*x488))+((gclwh5_9*x568))+(((0.0397)*gclwh11_13*x522))+(((-0.000531443653)*x538))+(((-0.0794)*gclwh11_13*x500))+(((0.0794)*gclwh7_13*x493))+((gclwh11_13*x515))+(((-1.0)*x880))+(((-0.00918658)*x550))+(((-1.0)*x659))+(((-0.0794)*gclwh9_13*x502))+(((0.00918658)*x535))+x858+x870+(((0.0397)*gclwh9_13*x495))+((gclwh9_13*x532)));
op[60]=((((2.3686)*gclwh4_8*x500))+(((0.015853620107)*x503))+(((-2.3686)*gclwh14_8*x502))+(((-1.0)*gclwh4_8*x512))+(((0.27404702)*x603))+(((-0.27404702)*x588))+(((-1.0)*gclwh10_12*x505))+(((-1.0)*x881))+(((-0.015853620107)*x517))+(((-1.1843)*gclwh12_8*x488))+(((-1.1843)*gclwh4_8*x522))+(((1.1843)*gclwh14_8*x495))+x859+x866+(((2.3686)*gclwh12_8*x493))+(((-1.0)*x673)));
op[61]=((1.4294428136)+((gclwh3_3*x507))+(((-1.0)*x865))+(((2.8321126472)*gclwh1_3*x502))+(((1.4026698336)*gclwh14_3*x495))+(((-1.4026698336)*gclwh4_3*x522))+(((2.8321126472)*gclwh4_3*x500))+(((-0.0189560238153082)*x620))+(((-2.8321126472)*gclwh14_3*x502))+(((-1.0)*gclwh12_3*x507))+((gclwh12_11*x488))+(((-1.4294428136)*gclwh3_3*x488))+(((2.8321126472)*gclwh3_3*x493))+(((-1.0)*x892))+(((-1.4294428136)*gclwh1_3*x495))+(((-1.0)*gclwh14_11*x495))+(((2.8321126472)*gclwh12_3*x493))+(((0.0189560238153082)*x534))+(((-1.4026698336)*gclwh12_3*x488))+x873+x891+((gclwh4_11*x522))+(((0.0189560238153082)*x559)));
op[62]=((0.1477860672)+x885+(((-1.0)*x876)));
op[63]=((((-1.0)*gclwh6_2*x499))+(((2.2892)*gclwh14_2*x502))+(((1.224)*gclwh12_8*x488))+(((0.015322176454)*x537))+(((0.01638506376)*x517))+(((-2.448)*gclwh12_8*x493))+((gclwh10_2*x509))+(((-1.0)*gclwh14_2*x563))+(((-2.2892)*gclwh1_2*x502))+(((1.1446)*gclwh1_2*x495))+(((-1.0)*gclwh1_2*x563))+(((1.1446)*gclwh12_2*x488))+(((-1.0)*gclwh3_2*x577))+(((-2.2892)*gclwh3_2*x493))+(((-2.2892)*gclwh4_2*x500))+(((-1.224)*gclwh14_8*x495))+(((-2.448)*gclwh4_8*x500))+((gclwh8_2*x496))+x878+(((0.01638506376)*x619))+(((-1.1446)*gclwh14_2*x495))+(((1.1446)*gclwh4_2*x522))+(((1.1446)*gclwh3_2*x488))+(((2.448)*gclwh14_8*x502))+((gclwh12_2*x577))+(((1.224)*gclwh4_8*x522))+(((-2.2892)*gclwh12_2*x493))+(((-1.0)*x871))+(((-0.01638506376)*x503)));
op[64]=((((-1.0)*x866))+(((0.0397)*gclwh12_8*x488))+(((-0.000531443653)*x503))+(((-0.0794)*gclwh4_8*x500))+(((-0.00918658)*x588))+(((0.000531443653)*x517))+(((-1.0)*gclwh10_12*x568))+((gclwh4_8*x515))+(((0.00918658)*x603))+(((-0.0794)*gclwh12_8*x493))+(((-0.0397)*gclwh14_8*x495))+(((0.0397)*gclwh4_8*x522))+(((0.0794)*gclwh14_8*x502))+x859+x881+(((-1.0)*x673)));
op[65]=((-0.0284524136)+((gclwh14_11*x495))+(((-0.0284524136)*gclwh1_3*x495))+(((-0.0016794336)*gclwh12_3*x488))+(((0.0301318472)*gclwh3_3*x493))+(((-1.0)*x892))+(((-0.0284524136)*gclwh3_3*x488))+(((-1.0)*gclwh4_11*x522))+(((-0.0301318472)*gclwh14_3*x502))+(((0.0016794336)*gclwh14_3*x495))+(((0.0301318472)*gclwh12_3*x493))+(((0.000201679835612164)*x534))+(((-0.0016794336)*gclwh4_3*x522))+(((0.0301318472)*gclwh4_3*x500))+(((0.000201679835612164)*x559))+(((-1.0)*gclwh12_11*x488))+x865+x891+(((-1.0)*gclwh12_3*x527))+((gclwh3_3*x527))+(((-0.000201679835612164)*x620))+(((-1.0)*x873))+(((0.0301318472)*gclwh1_3*x502)));
op[66]=((-1.4294428136)+(((-1.0)*x864))+(((1.4026698336)*gclwh13_1*x488))+(((-1.4294428136)*gclwh2_1*x488))+(((0.0189560238153082)*x574))+((gclwh2_1*x507))+(((-1.0)*x890))+((gclwh5_10*x522))+(((2.8321126472)*gclwh2_1*x493))+(((-1.0)*gclwh15_10*x495))+(((-1.4026698336)*gclwh15_1*x495))+((gclwh13_10*x488))+((gclwh0_1*x607))+x872+x893+(((-1.0)*gclwh15_1*x607))+((gclwh13_1*x507))+(((2.8321126472)*gclwh15_1*x502))+(((1.4026698336)*gclwh5_1*x522))+(((-2.8321126472)*gclwh13_1*x493))+(((-1.4294428136)*gclwh0_1*x495))+(((-2.8321126472)*gclwh5_1*x500))+(((2.8321126472)*gclwh0_1*x502)));
op[67]=((((-1.0)*gclwh15_9*x585))+(((-1.0)*x869))+(((-1.0)*x861))+(((2.3686)*gclwh15_9*x502))+(((0.015853620107)*x504))+(((1.1843)*gclwh13_9*x488))+(((-1.1843)*gclwh15_9*x495))+(((-0.27404702)*x555))+x694+(((0.27404702)*x594))+(((-2.3686)*gclwh5_9*x500))+(((1.1843)*gclwh5_9*x522))+((gclwh11_13*x505))+x882+((gclwh5_9*x512))+(((-2.3686)*gclwh13_9*x493)));
op[68]=((((1.224)*gclwh13_9*x488))+(((-2.2892)*gclwh0_0*x502))+(((-1.0)*x867))+(((2.2892)*gclwh13_0*x493))+(((0.015322176454)*x520))+(((-2.448)*gclwh13_9*x493))+(((1.1446)*gclwh2_0*x488))+(((-2.2892)*gclwh15_0*x502))+(((-1.1446)*gclwh13_0*x488))+(((-1.0)*gclwh2_0*x577))+(((0.01638506376)*x552))+(((1.1446)*gclwh15_0*x495))+(((-1.0)*gclwh9_0*x496))+((gclwh7_0*x499))+(((2.448)*gclwh15_9*x502))+(((-1.224)*gclwh15_9*x495))+(((-2.448)*gclwh5_9*x500))+(((0.01638506376)*x504))+(((-1.0)*gclwh11_0*x509))+(((1.224)*gclwh5_9*x522))+(((-0.015322176454)*x569))+(((-0.01638506376)*x613))+(((1.1446)*gclwh0_0*x495))+x877+(((-2.2892)*gclwh2_0*x493))+(((-1.0)*gclwh0_0*x563))+(((-1.1446)*gclwh5_0*x522))+(((-0.015322176454)*x595))+(((2.2892)*gclwh5_0*x500)));
op[69]=((0.1477860672)+(((-1.0)*x884))+x879);
op[70]=((0.0284524136)+(((-0.0301318472)*gclwh5_1*x500))+(((0.0016794336)*gclwh5_1*x522))+(((-0.0301318472)*gclwh13_1*x493))+(((-0.0284524136)*gclwh2_1*x488))+(((-1.0)*gclwh13_10*x488))+((gclwh15_10*x495))+(((-1.0)*gclwh5_10*x522))+(((0.000201679835612164)*x574))+(((-1.0)*x890))+((gclwh2_1*x527))+(((0.0301318472)*gclwh2_1*x493))+(((-0.0016794336)*gclwh15_1*x495))+(((0.0301318472)*gclwh15_1*x502))+(((0.0016794336)*gclwh13_1*x488))+((gclwh0_1*x600))+x864+x893+(((-1.0)*gclwh15_1*x600))+(((0.0301318472)*gclwh0_1*x502))+(((-0.0284524136)*gclwh0_1*x495))+(((-1.0)*x872))+((gclwh13_1*x527)));
op[71]=((((-1.0)*x861))+(((-0.0794)*gclwh15_9*x502))+(((0.0794)*gclwh13_9*x493))+(((-0.000531443653)*x504))+((gclwh15_9*x532))+(((-1.0)*gclwh5_9*x515))+(((0.0397)*gclwh15_9*x495))+(((-1.0)*x882))+(((-0.00918658)*x555))+(((-0.0397)*gclwh5_9*x522))+(((0.00918658)*x531))+x694+(((-0.0397)*gclwh13_9*x488))+x869+(((0.0794)*gclwh5_9*x500))+(((0.00918658)*x594)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x894=htj1*htj1;
CheckValue<IkReal> x895=IKPowWithIntegerCheck(((1.0)+x894),-1);
if(!x895.valid){
continue;
}
cj1array[numsolutions]=((x895.value)*(((1.0)+(((-1.0)*x894)))));
CheckValue<IkReal> x896=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x896.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x896.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x897=htj2*htj2;
CheckValue<IkReal> x898=IKPowWithIntegerCheck(((1.0)+x897),-1);
if(!x898.valid){
continue;
}
cj2array[numsolutions]=((x898.value)*(((1.0)+(((-1.0)*x897)))));
CheckValue<IkReal> x899=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x899.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x899.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x900=htj3*htj3;
CheckValue<IkReal> x901=IKPowWithIntegerCheck(((1.0)+x900),-1);
if(!x901.valid){
continue;
}
cj3array[numsolutions]=((x901.value)*(((1.0)+(((-1.0)*x900)))));
CheckValue<IkReal> x902=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x902.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x902.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x903=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x903);
rxp1_0=(pz*r11);
rxp1_1=(r01*x903);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x904=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x904);
rxp1_0=(pz*r11);
rxp1_1=(r01*x904);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x905=IKPowWithIntegerCheck(r22,-1);
if(!x905.valid){
continue;
}
CheckValue<IkReal> x906=IKPowWithIntegerCheck(sj3,-1);
if(!x906.valid){
continue;
}
sj4array[0]=((x905.value)*(x906.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x907=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x907);
rxp1_0=(pz*r11);
rxp1_1=(r01*x907);
IkReal x908=((16.0)*sj4);
IkReal x909=(cj1*cj2);
IkReal x910=((4.0)*sj3);
IkReal x911=((8.0)*sj4);
IkReal x912=((4.0)*cj4);
IkReal x913=(sj1*sj2);
IkReal x914=((4.0)*sj4);
IkReal x915=(cj3*r02);
IkReal x916=((16.0)*sj3);
IkReal x917=((8.0)*sj3);
IkReal x918=((12.0)*cj4);
IkReal x919=((12.0)*sj4);
IkReal x920=(cj3*r12);
IkReal x921=(r11*x910);
IkReal x922=(r01*x910);
IkReal x923=(r01*x913);
IkReal x924=(cj3*cj4*r01);
IkReal x925=(cj3*cj4*r11);
IkReal x926=(cj3*r10*x912);
IkReal x927=(x919*x920);
IkReal x928=(cj3*r00*x912);
IkReal x929=(x915*x919);
IkReal x930=(r00*x913*x914);
IkReal x931=(r02*x913*x918);
IkReal x932=(r00*x909*x914);
IkReal x933=(r02*x909*x918);
IkReal x934=(r10*x913*x914);
IkReal x935=(r12*x909*x918);
IkReal x936=(r12*x913*x918);
IkReal x937=(r10*x909*x914);
IkReal x938=(x932+x921);
IkReal x939=(x934+x922);
IkReal x940=(x930+x926);
IkReal x941=(x933+x927);
IkReal x942=(x937+x928);
IkReal x943=(x936+x929);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x940))+(((-1.0)*x941))+x938+x931)))))+(((0.5)*(IKabs((((r12*x909*x912))+(((-1.0)*x942))+(((-1.0)*r12*x912*x913))+(((-1.0)*x914*x915))+x939)))))+(IKabs(((((-8.0)*x924))+(((-1.0)*r00*x917))+((r11*x911*x913))+(((-1.0)*r11*x909*x911)))))+(((0.5)*(IKabs((((r02*x912*x913))+(((-1.0)*x940))+(((-1.0)*r02*x909*x912))+(((-1.0)*x914*x920))+x938)))))+(((0.5)*(IKabs(((((-1.0)*r11*x908*x909))+(((-1.0)*r00*x916))+((r11*x908*x913))+(((-16.0)*x924)))))))+(((0.5)*(IKabs(((((-1.0)*x943))+(((-1.0)*x942))+x939+x935)))))+(((0.5)*(IKabs(((((-1.0)*x941))+x931+x940+(((-1.0)*x938)))))))+(((0.5)*(IKabs(((((-1.0)*x943))+x935+x942+(((-1.0)*x939)))))))+(((0.5)*(IKabs((((r01*x908*x909))+(((-1.0)*r10*x916))+(((-1.0)*x908*x923))+(((-16.0)*x925)))))))+(IKabs((((r01*x909*x911))+(((-8.0)*x925))+(((-1.0)*r10*x917))+(((-1.0)*x911*x923))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x944=(r10*sj3);
IkReal x945=(r01*sj4);
IkReal x946=(cj1*cj2);
IkReal x947=(cj3*cj4);
IkReal x948=(sj1*sj2);
IkReal x949=(cj4*r02);
IkReal x950=((4.0)*r11*sj3);
IkReal x951=(cj3*r12*sj4);
IkReal x952=((4.0)*r00*sj4);
IkReal x953=((4.0)*r10*x947);
IkReal x954=((12.0)*x951);
IkReal x955=((4.0)*x951);
IkReal x956=(x946*x952);
IkReal x957=(x948*x952);
IkReal x958=((12.0)*x948*x949);
IkReal x959=((12.0)*x946*x949);
IkReal x960=((4.0)*x948*x949);
IkReal x961=((4.0)*x946*x949);
IkReal x962=(x956+x950);
IkReal x963=(x957+x953);
IkReal x964=(x961+x955);
IkReal x965=(x959+x954);
IkReal x966=((((8.0)*x945*x946))+(((-8.0)*r11*x947))+(((-8.0)*x945*x948))+(((-8.0)*x944)));
op[0]=(x962+x960+(((-1.0)*x964))+(((-1.0)*x963)));
op[1]=x966;
op[2]=(x962+x958+(((-1.0)*x965))+(((-1.0)*x963)));
op[3]=((((16.0)*x945*x946))+(((-16.0)*x945*x948))+(((-16.0)*x944))+(((-16.0)*r11*x947)));
op[4]=(x963+x958+(((-1.0)*x962))+(((-1.0)*x965)));
op[5]=x966;
op[6]=(x963+x960+(((-1.0)*x962))+(((-1.0)*x964)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x967=(cj1*cj2);
IkReal x968=((4.0)*cj4);
IkReal x969=(sj1*sj2);
IkReal x970=((4.0)*sj4);
IkReal x971=(r00*sj3);
IkReal x972=(cj3*r02);
IkReal x973=((4.0)*r01*sj3);
IkReal x974=((16.0)*r11*sj4);
IkReal x975=(cj3*cj4*r01);
IkReal x976=((12.0)*cj4*r12);
IkReal x977=((8.0)*r11*sj4);
IkReal x978=(cj3*r00*x968);
IkReal x979=((12.0)*sj4*x972);
IkReal x980=(x970*x972);
IkReal x981=(r10*x967*x970);
IkReal x982=(r10*x969*x970);
IkReal x983=(x967*x976);
IkReal x984=(x969*x976);
IkReal x985=(r12*x967*x968);
IkReal x986=(r12*x968*x969);
IkReal x987=(x982+x973);
IkReal x988=(x981+x978);
IkReal x989=(x986+x980);
IkReal x990=(x984+x979);
IkReal x991=(((x969*x977))+(((-8.0)*x975))+(((-8.0)*x971))+(((-1.0)*x967*x977)));
j5evalpoly[0]=((((-1.0)*x989))+(((-1.0)*x987))+(((htj5*htj5*htj5)*((((x969*x974))+(((-16.0)*x975))+(((-16.0)*x971))+(((-1.0)*x967*x974))))))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x988))+(((-1.0)*x990))+x987+x983))))+(((htj5*htj5)*(((((-1.0)*x987))+(((-1.0)*x990))+x988+x983))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x989))+(((-1.0)*x988))+x985+x987))))+((htj5*x991))+x988+x985+((x991*(htj5*htj5*htj5*htj5*htj5))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x992=(cj5*sj4);
IkReal x993=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x993))+(((-1.0)*r00*x992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x992))+(((-1.0)*r11*x993))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x993))+(((-1.0)*r00*x992))))+IKsqr((((r10*x992))+(((-1.0)*r11*x993))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x993))+(((-1.0)*r00*x992))), (((r10*x992))+(((-1.0)*r11*x993))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x994=IKcos(j0);
IkReal x995=IKsin(j0);
IkReal x996=(r02*sj4);
IkReal x997=(cj5*r01);
IkReal x998=((1.0)*sj3);
IkReal x999=(r12*sj4);
IkReal x1000=((1.0)*cj3);
IkReal x1001=(r00*sj5);
IkReal x1002=(r11*sj5);
IkReal x1003=(r10*sj5);
IkReal x1004=(cj5*r11);
IkReal x1005=((1.0)*cj2);
IkReal x1006=((0.5723)*sj2);
IkReal x1007=((1.0)*cj4);
IkReal x1008=((0.5723)*cj2);
IkReal x1009=(cj4*cj5*r00);
IkReal x1010=((1.0)*cj1*sj2);
IkReal x1011=(cj4*cj5*r10);
IkReal x1012=(cj4*r01*sj5);
IkReal x1013=(sj1*x994);
IkReal x1014=(cj1*x995);
IkReal x1015=((1.0)*cj5*sj4);
IkReal x1016=(cj1*x994);
IkReal x1017=(sj1*x995);
evalcond[0]=(((sj4*x1002))+(((-1.0)*r12*x1007))+x994+(((-1.0)*r10*x1015)));
evalcond[1]=((((-1.0)*x995))+((r01*sj4*sj5))+(((-1.0)*r02*x1007))+(((-1.0)*r00*x1015)));
evalcond[2]=((((-1.0)*x1006*x1013))+(((-1.0)*px))+(((0.612)*x1016))+(((-0.1157)*x997))+(((-0.1157)*x1001))+(((-0.16394)*x995))+((x1008*x1016)));
evalcond[3]=((((0.16394)*x994))+(((-1.0)*x1006*x1017))+(((-1.0)*py))+(((0.612)*x1014))+(((-0.1157)*x1003))+(((-0.1157)*x1004))+((x1008*x1014)));
evalcond[4]=(((cj3*x1012))+(((-1.0)*x1005*x1016))+((sj3*x1001))+((sj3*x997))+((sj2*x1013))+(((-1.0)*x1000*x1009))+((cj3*x996)));
evalcond[5]=((((-1.0)*x1005*x1014))+((sj3*x1004))+((sj3*x1003))+((sj2*x1017))+((cj3*cj4*x1002))+((cj3*x999))+(((-1.0)*x1000*x1011)));
evalcond[6]=((((-1.0)*x1012*x998))+((cj3*x1001))+(((-1.0)*x1005*x1013))+(((-1.0)*x996*x998))+((sj3*x1009))+(((-1.0)*x1010*x994))+((cj3*x997)));
evalcond[7]=(((cj3*x1004))+((cj3*x1003))+(((-1.0)*x1005*x1017))+(((-1.0)*cj4*x1002*x998))+(((-1.0)*x1010*x995))+((sj3*x1011))+(((-1.0)*x998*x999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1018=IKPowWithIntegerCheck(cj3,-1);
if(!x1018.valid){
continue;
}
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(r22,-1);
if(!x1019.valid){
continue;
}
sj4array[0]=((-1.0)*(x1018.value)*(x1019.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1020=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1020);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1020);
IkReal x1021=((16.0)*sj4);
IkReal x1022=(cj1*cj2);
IkReal x1023=((4.0)*sj3);
IkReal x1024=((8.0)*sj4);
IkReal x1025=((4.0)*cj4);
IkReal x1026=(sj1*sj2);
IkReal x1027=((4.0)*sj4);
IkReal x1028=(cj3*r02);
IkReal x1029=((16.0)*sj3);
IkReal x1030=((8.0)*sj3);
IkReal x1031=((12.0)*cj4);
IkReal x1032=((12.0)*sj4);
IkReal x1033=(cj3*r12);
IkReal x1034=(r11*x1023);
IkReal x1035=(r01*x1023);
IkReal x1036=(r01*x1026);
IkReal x1037=(cj3*cj4*r01);
IkReal x1038=(cj3*cj4*r11);
IkReal x1039=(cj3*r10*x1025);
IkReal x1040=(x1032*x1033);
IkReal x1041=(cj3*r00*x1025);
IkReal x1042=(x1028*x1032);
IkReal x1043=(r00*x1026*x1027);
IkReal x1044=(r02*x1026*x1031);
IkReal x1045=(r00*x1022*x1027);
IkReal x1046=(r02*x1022*x1031);
IkReal x1047=(r10*x1026*x1027);
IkReal x1048=(r12*x1022*x1031);
IkReal x1049=(r12*x1026*x1031);
IkReal x1050=(r10*x1022*x1027);
IkReal x1051=(x1045+x1034);
IkReal x1052=(x1047+x1035);
IkReal x1053=(x1043+x1039);
IkReal x1054=(x1040+x1046);
IkReal x1055=(x1050+x1041);
IkReal x1056=(x1042+x1049);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x1056))+(((-1.0)*x1052))+x1055+x1048)))))+(((0.5)*(IKabs(((((-16.0)*x1038))+(((-1.0)*x1021*x1036))+((r01*x1021*x1022))+(((-1.0)*r10*x1029)))))))+(((0.5)*(IKabs(((((-1.0)*x1027*x1033))+(((-1.0)*x1053))+x1051+((r02*x1025*x1026))+(((-1.0)*r02*x1022*x1025)))))))+(((0.5)*(IKabs(((((-1.0)*x1055))+x1052+(((-1.0)*r12*x1025*x1026))+((r12*x1022*x1025))+(((-1.0)*x1027*x1028)))))))+(IKabs(((((-1.0)*x1024*x1036))+(((-1.0)*r10*x1030))+(((-8.0)*x1038))+((r01*x1022*x1024)))))+(((0.5)*(IKabs(((((-1.0)*r11*x1021*x1022))+(((-16.0)*x1037))+((r11*x1021*x1026))+(((-1.0)*r00*x1029)))))))+(((0.5)*(IKabs(((((-1.0)*x1054))+(((-1.0)*x1053))+x1051+x1044)))))+(((0.5)*(IKabs(((((-1.0)*x1054))+(((-1.0)*x1051))+x1053+x1044)))))+(((0.5)*(IKabs(((((-1.0)*x1056))+(((-1.0)*x1055))+x1052+x1048)))))+(IKabs(((((-1.0)*r11*x1022*x1024))+((r11*x1024*x1026))+(((-8.0)*x1037))+(((-1.0)*r00*x1030))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1057=(r10*sj3);
IkReal x1058=(r01*sj4);
IkReal x1059=(cj1*cj2);
IkReal x1060=(cj3*cj4);
IkReal x1061=(sj1*sj2);
IkReal x1062=(cj4*r02);
IkReal x1063=((4.0)*r11*sj3);
IkReal x1064=(cj3*r12*sj4);
IkReal x1065=((4.0)*r00*sj4);
IkReal x1066=((4.0)*r10*x1060);
IkReal x1067=((12.0)*x1064);
IkReal x1068=((4.0)*x1064);
IkReal x1069=(x1059*x1065);
IkReal x1070=(x1061*x1065);
IkReal x1071=((12.0)*x1061*x1062);
IkReal x1072=((12.0)*x1059*x1062);
IkReal x1073=((4.0)*x1061*x1062);
IkReal x1074=((4.0)*x1059*x1062);
IkReal x1075=(x1069+x1063);
IkReal x1076=(x1070+x1066);
IkReal x1077=(x1074+x1068);
IkReal x1078=(x1072+x1067);
IkReal x1079=((((-8.0)*r11*x1060))+(((-8.0)*x1057))+(((-8.0)*x1058*x1061))+(((8.0)*x1058*x1059)));
op[0]=(x1075+x1073+(((-1.0)*x1077))+(((-1.0)*x1076)));
op[1]=x1079;
op[2]=(x1075+x1071+(((-1.0)*x1076))+(((-1.0)*x1078)));
op[3]=((((16.0)*x1058*x1059))+(((-16.0)*x1058*x1061))+(((-16.0)*x1057))+(((-16.0)*r11*x1060)));
op[4]=(x1076+x1071+(((-1.0)*x1075))+(((-1.0)*x1078)));
op[5]=x1079;
op[6]=(x1076+x1073+(((-1.0)*x1075))+(((-1.0)*x1077)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1080=(cj1*cj2);
IkReal x1081=((4.0)*cj4);
IkReal x1082=(sj1*sj2);
IkReal x1083=((4.0)*sj4);
IkReal x1084=(r00*sj3);
IkReal x1085=(cj3*r02);
IkReal x1086=((4.0)*r01*sj3);
IkReal x1087=((16.0)*r11*sj4);
IkReal x1088=(cj3*cj4*r01);
IkReal x1089=((12.0)*cj4*r12);
IkReal x1090=((8.0)*r11*sj4);
IkReal x1091=(cj3*r00*x1081);
IkReal x1092=((12.0)*sj4*x1085);
IkReal x1093=(x1083*x1085);
IkReal x1094=(r10*x1080*x1083);
IkReal x1095=(r10*x1082*x1083);
IkReal x1096=(x1080*x1089);
IkReal x1097=(x1082*x1089);
IkReal x1098=(r12*x1080*x1081);
IkReal x1099=(r12*x1081*x1082);
IkReal x1100=(x1095+x1086);
IkReal x1101=(x1094+x1091);
IkReal x1102=(x1093+x1099);
IkReal x1103=(x1097+x1092);
IkReal x1104=((((-1.0)*x1080*x1090))+((x1082*x1090))+(((-8.0)*x1088))+(((-8.0)*x1084)));
j5evalpoly[0]=(x1101+x1098+(((htj5*htj5*htj5)*((((x1082*x1087))+(((-1.0)*x1080*x1087))+(((-16.0)*x1084))+(((-16.0)*x1088))))))+(((htj5*htj5)*((x1101+x1096+(((-1.0)*x1100))+(((-1.0)*x1103))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1100+x1098+(((-1.0)*x1102))+(((-1.0)*x1101))))))+(((htj5*htj5*htj5*htj5)*((x1100+x1096+(((-1.0)*x1103))+(((-1.0)*x1101))))))+((x1104*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1100))+(((-1.0)*x1102))+((htj5*x1104)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1105=(cj5*sj4);
IkReal x1106=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1106))+(((-1.0)*r00*x1105)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1106))+((r10*x1105))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1106))+(((-1.0)*r00*x1105))))+IKsqr(((((-1.0)*r11*x1106))+((r10*x1105))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1106))+(((-1.0)*r00*x1105))), ((((-1.0)*r11*x1106))+((r10*x1105))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1107=IKcos(j0);
IkReal x1108=IKsin(j0);
IkReal x1109=(r02*sj4);
IkReal x1110=(cj5*r01);
IkReal x1111=((1.0)*sj3);
IkReal x1112=(r12*sj4);
IkReal x1113=((1.0)*cj3);
IkReal x1114=(r00*sj5);
IkReal x1115=(r11*sj5);
IkReal x1116=(r10*sj5);
IkReal x1117=(cj5*r11);
IkReal x1118=((1.0)*cj2);
IkReal x1119=((0.5723)*sj2);
IkReal x1120=((1.0)*cj4);
IkReal x1121=((0.5723)*cj2);
IkReal x1122=(cj4*cj5*r00);
IkReal x1123=((1.0)*cj1*sj2);
IkReal x1124=(cj4*cj5*r10);
IkReal x1125=(cj4*r01*sj5);
IkReal x1126=(sj1*x1107);
IkReal x1127=(cj1*x1108);
IkReal x1128=((1.0)*cj5*sj4);
IkReal x1129=(cj1*x1107);
IkReal x1130=(sj1*x1108);
evalcond[0]=(x1107+(((-1.0)*r12*x1120))+(((-1.0)*r10*x1128))+((sj4*x1115)));
evalcond[1]=((((-1.0)*x1108))+((r01*sj4*sj5))+(((-1.0)*r00*x1128))+(((-1.0)*r02*x1120)));
evalcond[2]=((((-0.16394)*x1108))+((x1121*x1129))+(((-1.0)*px))+(((-0.1157)*x1110))+(((-0.1157)*x1114))+(((-1.0)*x1119*x1126))+(((0.612)*x1129)));
evalcond[3]=(((x1121*x1127))+(((-1.0)*py))+(((-0.1157)*x1117))+(((-0.1157)*x1116))+(((-1.0)*x1119*x1130))+(((0.612)*x1127))+(((0.16394)*x1107)));
evalcond[4]=(((sj3*x1110))+((sj3*x1114))+(((-1.0)*x1113*x1122))+((sj2*x1126))+(((-1.0)*x1118*x1129))+((cj3*x1109))+((cj3*x1125)));
evalcond[5]=(((sj3*x1116))+((sj3*x1117))+((cj3*cj4*x1115))+(((-1.0)*x1113*x1124))+((sj2*x1130))+(((-1.0)*x1118*x1127))+((cj3*x1112)));
evalcond[6]=((((-1.0)*x1109*x1111))+(((-1.0)*x1107*x1123))+(((-1.0)*x1111*x1125))+((sj3*x1122))+(((-1.0)*x1118*x1126))+((cj3*x1114))+((cj3*x1110)));
evalcond[7]=((((-1.0)*cj4*x1111*x1115))+((sj3*x1124))+(((-1.0)*x1118*x1130))+(((-1.0)*x1108*x1123))+((cj3*x1116))+((cj3*x1117))+(((-1.0)*x1111*x1112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1131=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1131);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1131);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1132=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1132);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1132);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1133=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1133);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1133);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1134=IKPowWithIntegerCheck(r22,-1);
if(!x1134.valid){
continue;
}
sj4array[0]=((-1.0)*(x1134.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1135=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1135);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1135);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1137 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1137.valid){
continue;
}
IkReal x1136=x1137.value;
j5array[0]=((-1.0)*x1136);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1136)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1138=(cj5*sj4);
IkReal x1139=(sj4*sj5);
if( IKabs((((r01*x1139))+(((-1.0)*r00*x1138)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1139))+((r10*x1138)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1139))+(((-1.0)*r00*x1138))))+IKsqr(((((-1.0)*r11*x1139))+((r10*x1138))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1139))+(((-1.0)*r00*x1138))), ((((-1.0)*r11*x1139))+((r10*x1138))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1140=IKcos(j0);
IkReal x1141=IKsin(j0);
IkReal x1142=(cj5*r01);
IkReal x1143=(sj4*sj5);
IkReal x1144=((0.1157)*sj5);
IkReal x1145=((0.612)*cj1);
IkReal x1146=(cj5*r11);
IkReal x1147=((1.0)*cj1*sj2);
IkReal x1148=((1.0)*cj2*sj1);
IkReal x1149=((1.0)*cj5*sj4);
evalcond[0]=(x1140+((r11*x1143))+(((-1.0)*r10*x1149)));
evalcond[1]=((((-1.0)*r00*x1149))+(((-1.0)*x1141))+((r01*x1143)));
evalcond[2]=((((-1.0)*x1140*x1148))+(((-1.0)*x1140*x1147))+((r00*sj5))+x1142);
evalcond[3]=(x1146+((r10*sj5))+(((-1.0)*x1141*x1148))+(((-1.0)*x1141*x1147)));
evalcond[4]=(((x1140*x1145))+(((-1.0)*r00*x1144))+(((-1.0)*px))+(((-0.16394)*x1141))+(((-0.1157)*x1142)));
evalcond[5]=((((0.16394)*x1140))+((x1141*x1145))+(((-1.0)*r10*x1144))+(((-1.0)*py))+(((-0.1157)*x1146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1150=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1150);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1150);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1151=IKPowWithIntegerCheck(r22,-1);
if(!x1151.valid){
continue;
}
sj4array[0]=((x1151.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1152=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1152);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1152);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1154 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1154.valid){
continue;
}
IkReal x1153=x1154.value;
j5array[0]=((-1.0)*x1153);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1153)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1155=(cj5*sj4);
IkReal x1156=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1155))+((r01*x1156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1156))+((r10*x1155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1155))+((r01*x1156))))+IKsqr(((((-1.0)*r11*x1156))+((r10*x1155))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1155))+((r01*x1156))), ((((-1.0)*r11*x1156))+((r10*x1155))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1157=IKcos(j0);
IkReal x1158=IKsin(j0);
IkReal x1159=(cj5*r01);
IkReal x1160=((1.0)*sj5);
IkReal x1161=(sj4*sj5);
IkReal x1162=((1.0)*cj5);
IkReal x1163=((0.1157)*sj5);
IkReal x1164=((0.612)*cj1);
IkReal x1165=((1.0)*cj1*sj2);
IkReal x1166=((1.0)*cj2*sj1);
evalcond[0]=(x1157+(((-1.0)*r10*sj4*x1162))+((r11*x1161)));
evalcond[1]=(((r01*x1161))+(((-1.0)*x1158))+(((-1.0)*r00*sj4*x1162)));
evalcond[2]=(((x1157*x1164))+(((-1.0)*px))+(((-0.16394)*x1158))+(((-1.0)*r00*x1163))+(((-0.1157)*x1159)));
evalcond[3]=((((-1.0)*r10*x1163))+(((0.16394)*x1157))+(((-1.0)*py))+(((-0.1157)*cj5*r11))+((x1158*x1164)));
evalcond[4]=((((-1.0)*x1159))+(((-1.0)*r00*x1160))+(((-1.0)*x1157*x1165))+(((-1.0)*x1157*x1166)));
evalcond[5]=((((-1.0)*r10*x1160))+(((-1.0)*x1158*x1165))+(((-1.0)*x1158*x1166))+(((-1.0)*r11*x1162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1167=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1167);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1167);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1168=IKPowWithIntegerCheck(r22,-1);
if(!x1168.valid){
continue;
}
sj4array[0]=((x1168.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1169=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1169);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1169);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1171 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1171.valid){
continue;
}
IkReal x1170=x1171.value;
j5array[0]=((-1.0)*x1170);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1170)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1172=(cj5*sj4);
IkReal x1173=(sj4*sj5);
if( IKabs((((r01*x1173))+(((-1.0)*r00*x1172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1172))+(((-1.0)*r11*x1173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1173))+(((-1.0)*r00*x1172))))+IKsqr((((r10*x1172))+(((-1.0)*r11*x1173))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1173))+(((-1.0)*r00*x1172))), (((r10*x1172))+(((-1.0)*r11*x1173))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1174=IKcos(j0);
IkReal x1175=IKsin(j0);
IkReal x1176=(cj5*r01);
IkReal x1177=(sj4*sj5);
IkReal x1178=((0.1157)*sj5);
IkReal x1179=(cj5*r11);
IkReal x1180=((1.0)*x1175);
IkReal x1181=(cj1*x1175);
IkReal x1182=((1.0)*cj5*sj4);
IkReal x1183=(sj1*sj2*x1174);
IkReal x1184=(cj1*cj2*x1174);
IkReal x1185=(sj1*sj2*x1175);
evalcond[0]=(x1174+(((-1.0)*r10*x1182))+((r11*x1177)));
evalcond[1]=(((r01*x1177))+(((-1.0)*x1180))+(((-1.0)*r00*x1182)));
evalcond[2]=(((r00*sj5))+x1183+x1176+(((-1.0)*x1184)));
evalcond[3]=(x1185+x1179+((r10*sj5))+(((-1.0)*cj1*cj2*x1180)));
evalcond[4]=((((-0.16394)*x1175))+(((-0.1157)*x1176))+(((-1.0)*px))+(((0.5723)*x1184))+(((0.612)*cj1*x1174))+(((-1.0)*r00*x1178))+(((-0.5723)*x1183)));
evalcond[5]=((((-0.1157)*x1179))+(((-1.0)*py))+(((0.16394)*x1174))+(((0.5723)*cj2*x1181))+(((-1.0)*r10*x1178))+(((-0.5723)*x1185))+(((0.612)*x1181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1186=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1186);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1186);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1187=IKPowWithIntegerCheck(r22,-1);
if(!x1187.valid){
continue;
}
sj4array[0]=((-1.0)*(x1187.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1188=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1188);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1188);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1190 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1190.valid){
continue;
}
IkReal x1189=x1190.value;
j5array[0]=((-1.0)*x1189);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1189)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1191=(cj5*sj4);
IkReal x1192=(sj4*sj5);
if( IKabs((((r01*x1192))+(((-1.0)*r00*x1191)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1191))+(((-1.0)*r11*x1192)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1192))+(((-1.0)*r00*x1191))))+IKsqr((((r10*x1191))+(((-1.0)*r11*x1192))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1192))+(((-1.0)*r00*x1191))), (((r10*x1191))+(((-1.0)*r11*x1192))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1193=IKcos(j0);
IkReal x1194=IKsin(j0);
IkReal x1195=(cj5*r01);
IkReal x1196=(sj4*sj5);
IkReal x1197=((1.0)*cj5);
IkReal x1198=(r10*sj5);
IkReal x1199=(r00*sj5);
IkReal x1200=((1.0)*x1194);
IkReal x1201=(cj1*x1194);
IkReal x1202=(sj1*sj2*x1193);
IkReal x1203=(cj1*cj2*x1193);
IkReal x1204=(sj1*sj2*x1194);
evalcond[0]=(x1193+((r11*x1196))+(((-1.0)*r10*sj4*x1197)));
evalcond[1]=((((-1.0)*r00*sj4*x1197))+((r01*x1196))+(((-1.0)*x1200)));
evalcond[2]=(x1202+(((-1.0)*x1203))+(((-1.0)*x1199))+(((-1.0)*x1195)));
evalcond[3]=(x1204+(((-1.0)*cj1*cj2*x1200))+(((-1.0)*x1198))+(((-1.0)*r11*x1197)));
evalcond[4]=((((0.612)*cj1*x1193))+(((-0.5723)*x1202))+(((-0.16394)*x1194))+(((0.5723)*x1203))+(((-0.1157)*x1199))+(((-0.1157)*x1195))+(((-1.0)*px)));
evalcond[5]=((((0.16394)*x1193))+(((0.612)*x1201))+(((-0.5723)*x1204))+(((-0.1157)*x1198))+(((-1.0)*py))+(((-0.1157)*cj5*r11))+(((0.5723)*cj2*x1201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1205=IKPowWithIntegerCheck(r22,-1);
if(!x1205.valid){
continue;
}
CheckValue<IkReal> x1206=IKPowWithIntegerCheck(sj3,-1);
if(!x1206.valid){
continue;
}
sj4array[0]=((x1205.value)*(x1206.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1207=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1207);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1207);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1208=((4.0)*r01);
IkReal x1209=((16.0)*r00);
IkReal x1210=(cj3*sj2);
IkReal x1211=((8.0)*r00);
IkReal x1212=(cj2*cj3);
IkReal x1213=(cj4*r01);
IkReal x1214=((16.0)*cj1);
IkReal x1215=((8.0)*sj1);
IkReal x1216=((16.0)*sj1);
IkReal x1217=((8.0)*cj1);
IkReal x1218=(sj2*sj3);
IkReal x1219=(cj2*sj3);
IkReal x1220=(sj1*x1219);
IkReal x1221=((4.0)*cj4*r00);
IkReal x1222=(((sj1*x1218*x1221))+((cj1*x1208*x1218))+((sj1*x1208*x1210))+((x1208*x1220)));
IkReal x1223=(((sj1*x1212*x1221))+((cj1*x1208*x1212))+((cj1*x1219*x1221))+((cj1*x1210*x1221)));
IkReal x1224=(x1223+(((-1.0)*x1222)));
IkReal x1225=(((cj1*x1211*x1218))+((x1211*x1220))+(((-1.0)*cj1*x1211*x1212))+((x1210*x1213*x1217))+((x1213*x1217*x1219))+((x1212*x1213*x1215))+((sj1*x1210*x1211))+(((-1.0)*x1213*x1215*x1218)));
IkReal x1226=(x1222+(((-1.0)*x1223)));
op[0]=x1224;
op[1]=x1225;
op[2]=x1224;
op[3]=(((cj1*x1209*x1218))+((sj1*x1209*x1210))+((x1210*x1213*x1214))+((x1213*x1214*x1219))+(((-1.0)*cj1*x1209*x1212))+((x1212*x1213*x1216))+(((-1.0)*x1213*x1216*x1218))+((x1209*x1220)));
op[4]=x1226;
op[5]=x1225;
op[6]=x1226;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1227=(cj5*sj4);
IkReal x1228=(sj4*sj5);
if( IKabs((((r01*x1228))+(((-1.0)*r00*x1227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1228))+((r10*x1227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1228))+(((-1.0)*r00*x1227))))+IKsqr(((((-1.0)*r11*x1228))+((r10*x1227))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1228))+(((-1.0)*r00*x1227))), ((((-1.0)*r11*x1228))+((r10*x1227))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1229=IKcos(j0);
IkReal x1230=IKsin(j0);
IkReal x1231=(cj5*r01);
IkReal x1232=((1.0)*cj3);
IkReal x1233=(r11*sj5);
IkReal x1234=(r01*sj5);
IkReal x1235=(r10*sj5);
IkReal x1236=(cj5*r11);
IkReal x1237=(cj3*cj4);
IkReal x1238=(r00*sj5);
IkReal x1239=((1.0)*cj2);
IkReal x1240=((0.5723)*cj2);
IkReal x1241=((0.5723)*sj2);
IkReal x1242=(cj4*cj5*r00);
IkReal x1243=((1.0)*cj1*sj2);
IkReal x1244=(cj4*cj5*r10);
IkReal x1245=((1.0)*cj4*sj3);
IkReal x1246=(sj1*x1229);
IkReal x1247=(cj1*x1230);
IkReal x1248=((1.0)*cj5*sj4);
IkReal x1249=(cj1*x1229);
IkReal x1250=(sj1*x1230);
evalcond[0]=(x1229+(((-1.0)*r10*x1248))+((sj4*x1233)));
evalcond[1]=((((-1.0)*x1230))+((sj4*x1234))+(((-1.0)*r00*x1248)));
evalcond[2]=((((-1.0)*x1239*x1249))+((x1234*x1237))+((sj3*x1231))+((sj3*x1238))+((sj2*x1246))+(((-1.0)*x1232*x1242)));
evalcond[3]=((((-1.0)*x1239*x1247))+((sj3*x1236))+((sj3*x1235))+((x1233*x1237))+(((-1.0)*x1232*x1244))+((sj2*x1250)));
evalcond[4]=(((cj3*x1231))+((cj3*x1238))+(((-1.0)*x1239*x1246))+(((-1.0)*x1229*x1243))+((sj3*x1242))+(((-1.0)*x1234*x1245)));
evalcond[5]=(((cj3*x1235))+((cj3*x1236))+(((-1.0)*x1233*x1245))+((sj3*x1244))+(((-1.0)*x1239*x1250))+(((-1.0)*x1230*x1243)));
evalcond[6]=(((x1240*x1249))+(((0.612)*x1249))+(((-1.0)*px))+(((-0.16394)*x1230))+(((-1.0)*x1241*x1246))+(((-0.1157)*x1238))+(((-0.1157)*x1231)));
evalcond[7]=(((x1240*x1247))+(((-1.0)*x1241*x1250))+(((0.612)*x1247))+(((-1.0)*py))+(((0.16394)*x1229))+(((-0.1157)*x1235))+(((-0.1157)*x1236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1251=IKPowWithIntegerCheck(cj3,-1);
if(!x1251.valid){
continue;
}
CheckValue<IkReal> x1252=IKPowWithIntegerCheck(r22,-1);
if(!x1252.valid){
continue;
}
sj4array[0]=((-1.0)*(x1251.value)*(x1252.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1253=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1253);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1253);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1254=((4.0)*r01);
IkReal x1255=((16.0)*r00);
IkReal x1256=(cj3*sj2);
IkReal x1257=((8.0)*r00);
IkReal x1258=(cj2*cj3);
IkReal x1259=(cj4*r01);
IkReal x1260=((16.0)*cj1);
IkReal x1261=((8.0)*sj1);
IkReal x1262=((16.0)*sj1);
IkReal x1263=((8.0)*cj1);
IkReal x1264=(sj2*sj3);
IkReal x1265=(cj2*sj3);
IkReal x1266=(sj1*x1265);
IkReal x1267=((4.0)*cj4*r00);
IkReal x1268=(((sj1*x1264*x1267))+((sj1*x1254*x1256))+((x1254*x1266))+((cj1*x1254*x1264)));
IkReal x1269=(((cj1*x1256*x1267))+((sj1*x1258*x1267))+((cj1*x1265*x1267))+((cj1*x1254*x1258)));
IkReal x1270=(x1269+(((-1.0)*x1268)));
IkReal x1271=((((-1.0)*x1259*x1261*x1264))+((x1259*x1263*x1265))+((sj1*x1256*x1257))+((x1256*x1259*x1263))+((x1258*x1259*x1261))+(((-1.0)*cj1*x1257*x1258))+((x1257*x1266))+((cj1*x1257*x1264)));
IkReal x1272=(x1268+(((-1.0)*x1269)));
op[0]=x1270;
op[1]=x1271;
op[2]=x1270;
op[3]=(((x1259*x1260*x1265))+((cj1*x1255*x1264))+((x1255*x1266))+((x1256*x1259*x1260))+(((-1.0)*x1259*x1262*x1264))+((x1258*x1259*x1262))+(((-1.0)*cj1*x1255*x1258))+((sj1*x1255*x1256)));
op[4]=x1272;
op[5]=x1271;
op[6]=x1272;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1273=(cj5*sj4);
IkReal x1274=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1273))+((r01*x1274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1273))+(((-1.0)*r11*x1274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1273))+((r01*x1274))))+IKsqr((((r10*x1273))+(((-1.0)*r11*x1274))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1273))+((r01*x1274))), (((r10*x1273))+(((-1.0)*r11*x1274))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1275=IKcos(j0);
IkReal x1276=IKsin(j0);
IkReal x1277=(cj5*r01);
IkReal x1278=((1.0)*cj3);
IkReal x1279=(r11*sj5);
IkReal x1280=(r01*sj5);
IkReal x1281=(r10*sj5);
IkReal x1282=(cj5*r11);
IkReal x1283=(cj3*cj4);
IkReal x1284=(r00*sj5);
IkReal x1285=((1.0)*cj2);
IkReal x1286=((0.5723)*cj2);
IkReal x1287=((0.5723)*sj2);
IkReal x1288=(cj4*cj5*r00);
IkReal x1289=((1.0)*cj1*sj2);
IkReal x1290=(cj4*cj5*r10);
IkReal x1291=((1.0)*cj4*sj3);
IkReal x1292=(sj1*x1275);
IkReal x1293=(cj1*x1276);
IkReal x1294=((1.0)*cj5*sj4);
IkReal x1295=(cj1*x1275);
IkReal x1296=(sj1*x1276);
evalcond[0]=(x1275+((sj4*x1279))+(((-1.0)*r10*x1294)));
evalcond[1]=((((-1.0)*r00*x1294))+((sj4*x1280))+(((-1.0)*x1276)));
evalcond[2]=(((sj3*x1277))+((sj2*x1292))+(((-1.0)*x1278*x1288))+((sj3*x1284))+(((-1.0)*x1285*x1295))+((x1280*x1283)));
evalcond[3]=(((x1279*x1283))+((sj2*x1296))+(((-1.0)*x1278*x1290))+((sj3*x1281))+((sj3*x1282))+(((-1.0)*x1285*x1293)));
evalcond[4]=((((-1.0)*x1275*x1289))+(((-1.0)*x1280*x1291))+((cj3*x1277))+((sj3*x1288))+((cj3*x1284))+(((-1.0)*x1285*x1292)));
evalcond[5]=((((-1.0)*x1276*x1289))+((sj3*x1290))+(((-1.0)*x1279*x1291))+((cj3*x1281))+((cj3*x1282))+(((-1.0)*x1285*x1296)));
evalcond[6]=((((-1.0)*x1287*x1292))+(((-0.16394)*x1276))+((x1286*x1295))+(((-0.1157)*x1284))+(((-0.1157)*x1277))+(((-1.0)*px))+(((0.612)*x1295)));
evalcond[7]=((((0.16394)*x1275))+(((-1.0)*x1287*x1296))+((x1286*x1293))+(((-0.1157)*x1282))+(((-0.1157)*x1281))+(((-1.0)*py))+(((0.612)*x1293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1299 = IKatan2WithCheck(IkReal(((-0.1157)*r21)),IkReal(((-0.1157)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1299.valid){
continue;
}
IkReal x1297=((1.0)*(x1299.value));
if((((((0.01338649)*(r20*r20)))+(((0.01338649)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01338649)*(r20*r20)))+(((0.01338649)*(r21*r21)))))),-1);
if(!x1300.valid){
continue;
}
if( (((-1.0)*(x1300.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1300.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1298=((-1.0)*(IKasin(((-1.0)*(x1300.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1))))))));
j5array[0]=((((-1.0)*x1298))+(((-1.0)*x1297)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1297))+(((1.0)*x1298)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1301=cj5*cj5;
IkReal x1302=r21*r21;
IkReal x1303=(sj3*x1301);
IkReal x1304=(((sj3*(r22*r22)))+((sj3*x1302))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1303*(r20*r20)))+(((-1.0)*x1302*x1303)));
j4eval[0]=x1304;
j4eval[1]=IKsign(x1304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1305=cj5*cj5;
IkReal x1306=r21*r21;
IkReal x1307=((1.0)*cj3);
IkReal x1308=(cj3*x1305);
IkReal x1309=(((x1306*x1308))+(((-1.0)*x1306*x1307))+(((-1.0)*x1305*x1307*(r20*r20)))+(((-1.0)*x1307*(r22*r22)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1309;
j4eval[1]=IKsign(x1309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1310=cj1*cj1;
IkReal x1311=cj2*cj2;
IkReal x1312=(cj1*sj1*sj2);
IkReal x1313=(cj2*x1310);
IkReal x1314=(x1310*x1311);
j0eval[0]=((7.53782248056064)+x1310+(((-6.96618904215118)*x1311))+(((13.9323780843024)*x1314))+(((14.8988561726246)*x1313))+(((-14.8988561726246)*x1312))+(((-13.9323780843024)*cj2*x1312)));
j0eval[1]=IKsign(((886009034.0)+(((1751238000.0)*x1313))+(((-1637636450.0)*cj2*x1312))+(((-818818225.0)*x1311))+(((1637636450.0)*x1314))+(((117541775.0)*x1310))+(((-1751238000.0)*x1312))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1315=((1.0)*cj5);
IkReal x1316=((1.0)*sj5);
IkReal x1317=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1317;
j0eval[1]=((IKabs(((((-1.0)*r11*x1315))+(((-1.0)*r10*x1316)))))+(IKabs(((((-1.0)*r00*x1316))+(((-1.0)*r01*x1315))))));
j0eval[2]=IKsign(x1317);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1318=cj5*cj5;
IkReal x1319=r21*r21;
IkReal x1320=(sj1*sj2);
IkReal x1321=(r21*sj5);
IkReal x1322=(cj5*r20);
IkReal x1323=(cj1*cj2);
IkReal x1324=(x1319+((x1318*(r20*r20)))+(r22*r22)+(((-1.0)*x1318*x1319))+(((-2.0)*x1321*x1322)));
j4eval[0]=x1324;
j4eval[1]=IKsign(x1324);
j4eval[2]=((IKabs(((((-1.0)*x1321*x1323))+((x1320*x1321))+(((-1.0)*x1320*x1322))+((x1322*x1323)))))+(IKabs(((((-1.0)*r22*x1323))+((r22*x1320))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458648458924)*py))+(((-0.408399850136537)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458648458924)*px))+(((0.408399850136537)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458648458924)*py))+(((-0.408399850136537)*px))))+IKsqr(((((1.52458648458924)*px))+(((0.408399850136537)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458648458924)*py))+(((-0.408399850136537)*px))), ((((1.52458648458924)*px))+(((0.408399850136537)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1325=IKsin(j0);
IkReal x1326=IKcos(j0);
evalcond[0]=((((0.612)*x1326))+(((-0.16394)*x1325))+(((-1.0)*px)));
evalcond[1]=((((0.612)*x1325))+(((0.16394)*x1326))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1327=((1.0)*cj5);
IkReal x1328=((((-1.0)*r01*x1327))+(((-1.0)*r00*sj5)));
j4eval[0]=x1328;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1327)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1328);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1329=((1.0)*cj5);
IkReal x1330=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1329)));
j4eval[0]=x1330;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1329))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1330);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1331=cj5*cj5;
IkReal x1332=((1.0)*sj5);
IkReal x1333=(cj5*r20);
IkReal x1334=(r11*r21);
IkReal x1335=(x1334+((r10*r20*x1331))+((r12*r22))+(((-1.0)*r11*x1332*x1333))+(((-1.0)*x1331*x1334))+(((-1.0)*cj5*r10*r21*x1332)));
j4eval[0]=x1335;
j4eval[1]=IKsign(x1335);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1332))+((cj0*x1333)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1336=cj5*cj5;
IkReal x1337=((1.0)*sj5);
IkReal x1338=(cj5*r20);
IkReal x1339=(r11*r21);
CheckValue<IkReal> x1340=IKPowWithIntegerCheck(IKsign((x1339+((r10*r20*x1336))+((r12*r22))+(((-1.0)*x1336*x1339))+(((-1.0)*cj5*r10*r21*x1337))+(((-1.0)*r11*x1337*x1338)))),-1);
if(!x1340.valid){
continue;
}
CheckValue<IkReal> x1341 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1337))+((cj0*x1338)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1340.value)))+(x1341.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1342=IKsin(j4);
IkReal x1343=IKcos(j4);
IkReal x1344=((1.0)*sj0);
IkReal x1345=(cj5*r00);
IkReal x1346=(r11*sj5);
IkReal x1347=(cj5*r10);
IkReal x1348=(r21*sj5);
IkReal x1349=(cj5*r20);
IkReal x1350=(r01*sj5);
IkReal x1351=((1.0)*x1343);
IkReal x1352=((1.0)*x1342);
evalcond[0]=((((-1.0)*r22*x1351))+((x1342*x1348))+(((-1.0)*x1349*x1352)));
evalcond[1]=((((-1.0)*r22*x1352))+(((-1.0)*x1348*x1351))+((x1343*x1349)));
evalcond[2]=((((-1.0)*r12*x1351))+cj0+(((-1.0)*x1347*x1352))+((x1342*x1346)));
evalcond[3]=((((-1.0)*x1345*x1352))+(((-1.0)*x1344))+(((-1.0)*r02*x1351))+((x1342*x1350)));
evalcond[4]=((((-1.0)*r02*x1352))+(((-1.0)*x1350*x1351))+((x1343*x1345))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1352))+(((-1.0)*x1344))+(((-1.0)*x1346*x1351))+((x1343*x1347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1353=((1.0)*cj5);
CheckValue<IkReal> x1354 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1354.valid){
continue;
}
CheckValue<IkReal> x1355=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1353)))),-1);
if(!x1355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1354.value)+(((1.5707963267949)*(x1355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1356=IKsin(j4);
IkReal x1357=IKcos(j4);
IkReal x1358=((1.0)*sj0);
IkReal x1359=(cj5*r00);
IkReal x1360=(r11*sj5);
IkReal x1361=(cj5*r10);
IkReal x1362=(r21*sj5);
IkReal x1363=(cj5*r20);
IkReal x1364=(r01*sj5);
IkReal x1365=((1.0)*x1357);
IkReal x1366=((1.0)*x1356);
evalcond[0]=(((x1356*x1362))+(((-1.0)*r22*x1365))+(((-1.0)*x1363*x1366)));
evalcond[1]=(((x1357*x1363))+(((-1.0)*r22*x1366))+(((-1.0)*x1362*x1365)));
evalcond[2]=(((x1356*x1360))+(((-1.0)*r12*x1365))+cj0+(((-1.0)*x1361*x1366)));
evalcond[3]=(((x1356*x1364))+(((-1.0)*x1358))+(((-1.0)*r02*x1365))+(((-1.0)*x1359*x1366)));
evalcond[4]=((((-1.0)*x1364*x1365))+((x1357*x1359))+(((-1.0)*r02*x1366))+(((-1.0)*cj0)));
evalcond[5]=(((x1357*x1361))+(((-1.0)*x1358))+(((-1.0)*r12*x1366))+(((-1.0)*x1360*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1367=((1.0)*cj5);
CheckValue<IkReal> x1368 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1368.valid){
continue;
}
CheckValue<IkReal> x1369=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1367)))),-1);
if(!x1369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1368.value)+(((1.5707963267949)*(x1369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1370=IKsin(j4);
IkReal x1371=IKcos(j4);
IkReal x1372=((1.0)*sj0);
IkReal x1373=(cj5*r00);
IkReal x1374=(r11*sj5);
IkReal x1375=(cj5*r10);
IkReal x1376=(r21*sj5);
IkReal x1377=(cj5*r20);
IkReal x1378=(r01*sj5);
IkReal x1379=((1.0)*x1371);
IkReal x1380=((1.0)*x1370);
evalcond[0]=((((-1.0)*r22*x1379))+(((-1.0)*x1377*x1380))+((x1370*x1376)));
evalcond[1]=(((x1371*x1377))+(((-1.0)*x1376*x1379))+(((-1.0)*r22*x1380)));
evalcond[2]=(cj0+(((-1.0)*x1375*x1380))+(((-1.0)*r12*x1379))+((x1370*x1374)));
evalcond[3]=((((-1.0)*x1373*x1380))+(((-1.0)*r02*x1379))+(((-1.0)*x1372))+((x1370*x1378)));
evalcond[4]=((((-1.0)*r02*x1380))+((x1371*x1373))+(((-1.0)*x1378*x1379))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1380))+(((-1.0)*x1372))+(((-1.0)*x1374*x1379))+((x1371*x1375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458648458924)*py))+(((-0.408399850136537)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458648458924)*px))+(((0.408399850136537)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458648458924)*py))+(((-0.408399850136537)*px))))+IKsqr(((((1.52458648458924)*px))+(((0.408399850136537)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458648458924)*py))+(((-0.408399850136537)*px))), ((((1.52458648458924)*px))+(((0.408399850136537)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1381=IKsin(j0);
IkReal x1382=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.612)*x1382))+(((-0.16394)*x1381)));
evalcond[1]=((((-1.0)*py))+(((0.612)*x1381))+(((0.16394)*x1382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1383=((1.0)*cj5);
IkReal x1384=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1383)));
j4eval[0]=x1384;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1383))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1385=cj5*cj5;
IkReal x1386=((1.0)*r21);
IkReal x1387=(cj5*sj5);
IkReal x1388=((1.0)*r20);
IkReal x1389=((((-1.0)*r01*x1385*x1386))+(((-1.0)*r00*x1386*x1387))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x1387*x1388))+((r00*r20*x1385)));
j4eval[0]=x1389;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1388)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1390=cj5*cj5;
IkReal x1391=(r21*sj5);
IkReal x1392=(r11*r21);
IkReal x1393=((1.0)*cj5*r20);
IkReal x1394=(x1392+(((-1.0)*x1390*x1392))+((r12*r22))+(((-1.0)*r11*sj5*x1393))+((r10*r20*x1390))+(((-1.0)*cj5*r10*x1391)));
j4eval[0]=x1394;
j4eval[1]=((IKabs((((sj0*x1391))+(((-1.0)*sj0*x1393)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1395=cj5*cj5;
IkReal x1396=(r21*sj5);
IkReal x1397=(r11*r21);
IkReal x1398=((1.0)*cj5*r20);
CheckValue<IkReal> x1399 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1396))+(((-1.0)*sj0*x1398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1399.valid){
continue;
}
CheckValue<IkReal> x1400=IKPowWithIntegerCheck(IKsign((x1397+((r12*r22))+(((-1.0)*r11*sj5*x1398))+((r10*r20*x1395))+(((-1.0)*cj5*r10*x1396))+(((-1.0)*x1395*x1397)))),-1);
if(!x1400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1399.value)+(((1.5707963267949)*(x1400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1401=IKsin(j4);
IkReal x1402=IKcos(j4);
IkReal x1403=(r11*sj5);
IkReal x1404=(cj5*r00);
IkReal x1405=(cj5*r10);
IkReal x1406=(r21*sj5);
IkReal x1407=(cj5*r20);
IkReal x1408=(r01*sj5);
IkReal x1409=((1.0)*x1402);
IkReal x1410=((1.0)*x1401);
evalcond[0]=((((-1.0)*r22*x1409))+(((-1.0)*x1407*x1410))+((x1401*x1406)));
evalcond[1]=((((-1.0)*r22*x1410))+(((-1.0)*x1406*x1409))+((x1402*x1407)));
evalcond[2]=((((-1.0)*r12*x1409))+cj0+(((-1.0)*x1405*x1410))+((x1401*x1403)));
evalcond[3]=(cj0+(((-1.0)*r02*x1410))+((x1402*x1404))+(((-1.0)*x1408*x1409)));
evalcond[4]=(sj0+(((-1.0)*r12*x1410))+((x1402*x1405))+(((-1.0)*x1403*x1409)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1404*x1410))+(((-1.0)*r02*x1409))+((x1401*x1408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1411=cj5*cj5;
IkReal x1412=((1.0)*r21);
IkReal x1413=(cj5*sj5);
IkReal x1414=((1.0)*r20);
CheckValue<IkReal> x1415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1411*x1412))+(((-1.0)*r01*x1413*x1414))+((r01*r21))+((r00*r20*x1411))+((r02*r22))+(((-1.0)*r00*x1412*x1413)))),-1);
if(!x1415.valid){
continue;
}
CheckValue<IkReal> x1416 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1415.value)))+(x1416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1417=IKsin(j4);
IkReal x1418=IKcos(j4);
IkReal x1419=(r11*sj5);
IkReal x1420=(cj5*r00);
IkReal x1421=(cj5*r10);
IkReal x1422=(r21*sj5);
IkReal x1423=(cj5*r20);
IkReal x1424=(r01*sj5);
IkReal x1425=((1.0)*x1418);
IkReal x1426=((1.0)*x1417);
evalcond[0]=((((-1.0)*x1423*x1426))+(((-1.0)*r22*x1425))+((x1417*x1422)));
evalcond[1]=((((-1.0)*x1422*x1425))+((x1418*x1423))+(((-1.0)*r22*x1426)));
evalcond[2]=((((-1.0)*x1421*x1426))+cj0+((x1417*x1419))+(((-1.0)*r12*x1425)));
evalcond[3]=(cj0+(((-1.0)*x1424*x1425))+((x1418*x1420))+(((-1.0)*r02*x1426)));
evalcond[4]=(sj0+(((-1.0)*r12*x1426))+(((-1.0)*x1419*x1425))+((x1418*x1421)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1420*x1426))+(((-1.0)*r02*x1425))+((x1417*x1424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1427=((1.0)*cj5);
CheckValue<IkReal> x1428=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1427)))),-1);
if(!x1428.valid){
continue;
}
CheckValue<IkReal> x1429 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1428.value)))+(x1429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1430=IKsin(j4);
IkReal x1431=IKcos(j4);
IkReal x1432=(r11*sj5);
IkReal x1433=(cj5*r00);
IkReal x1434=(cj5*r10);
IkReal x1435=(r21*sj5);
IkReal x1436=(cj5*r20);
IkReal x1437=(r01*sj5);
IkReal x1438=((1.0)*x1431);
IkReal x1439=((1.0)*x1430);
evalcond[0]=((((-1.0)*x1436*x1439))+((x1430*x1435))+(((-1.0)*r22*x1438)));
evalcond[1]=((((-1.0)*x1435*x1438))+(((-1.0)*r22*x1439))+((x1431*x1436)));
evalcond[2]=((((-1.0)*r12*x1438))+cj0+((x1430*x1432))+(((-1.0)*x1434*x1439)));
evalcond[3]=((((-1.0)*x1437*x1438))+cj0+(((-1.0)*r02*x1439))+((x1431*x1433)));
evalcond[4]=((((-1.0)*r12*x1439))+sj0+(((-1.0)*x1432*x1438))+((x1431*x1434)));
evalcond[5]=((((-1.0)*sj0))+((x1430*x1437))+(((-1.0)*r02*x1438))+(((-1.0)*x1433*x1439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09979260705136)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09979260705136)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09979260705136)*px))+IKsqr(((6.09979260705136)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09979260705136)*px), ((6.09979260705136)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.16394)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.16394)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1440=((1.0)*cj5);
IkReal x1441=((((-1.0)*r01*x1440))+(((-1.0)*r00*sj5)));
j4eval[0]=x1441;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1440)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1442=((1.0)*cj5);
IkReal x1443=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1442)));
j4eval[0]=x1443;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1442))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1444=cj5*cj5;
IkReal x1445=((1.0)*sj5);
IkReal x1446=(cj5*r20);
IkReal x1447=(r11*r21);
IkReal x1448=((((-1.0)*cj5*r10*r21*x1445))+((r12*r22))+x1447+(((-1.0)*r11*x1445*x1446))+(((-1.0)*x1444*x1447))+((r10*r20*x1444)));
j4eval[0]=x1448;
j4eval[1]=IKsign(x1448);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1445))+((cj0*x1446)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1449=cj5*cj5;
IkReal x1450=((1.0)*sj5);
IkReal x1451=(cj5*r20);
IkReal x1452=(r11*r21);
CheckValue<IkReal> x1453=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*r11*x1450*x1451))+x1452+(((-1.0)*x1449*x1452))+(((-1.0)*cj5*r10*r21*x1450))+((r10*r20*x1449)))),-1);
if(!x1453.valid){
continue;
}
CheckValue<IkReal> x1454 = IKatan2WithCheck(IkReal((((cj0*x1451))+(((-1.0)*cj0*r21*x1450)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1453.value)))+(x1454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1455=IKsin(j4);
IkReal x1456=IKcos(j4);
IkReal x1457=((1.0)*sj0);
IkReal x1458=(cj5*r00);
IkReal x1459=(r11*sj5);
IkReal x1460=(cj5*r10);
IkReal x1461=(r21*sj5);
IkReal x1462=(cj5*r20);
IkReal x1463=(r01*sj5);
IkReal x1464=((1.0)*x1456);
IkReal x1465=((1.0)*x1455);
evalcond[0]=((((-1.0)*r22*x1464))+((x1455*x1461))+(((-1.0)*x1462*x1465)));
evalcond[1]=((((-1.0)*r22*x1465))+((x1456*x1462))+(((-1.0)*x1461*x1464)));
evalcond[2]=(((x1455*x1459))+cj0+(((-1.0)*x1460*x1465))+(((-1.0)*r12*x1464)));
evalcond[3]=((((-1.0)*x1458*x1465))+(((-1.0)*r02*x1464))+(((-1.0)*x1457))+((x1455*x1463)));
evalcond[4]=(((x1456*x1458))+(((-1.0)*r02*x1465))+(((-1.0)*x1463*x1464))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1457))+(((-1.0)*x1459*x1464))+((x1456*x1460))+(((-1.0)*r12*x1465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1466=((1.0)*cj5);
CheckValue<IkReal> x1467 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1466)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1467.valid){
continue;
}
CheckValue<IkReal> x1468=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1466)))),-1);
if(!x1468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1467.value)+(((1.5707963267949)*(x1468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1469=IKsin(j4);
IkReal x1470=IKcos(j4);
IkReal x1471=((1.0)*sj0);
IkReal x1472=(cj5*r00);
IkReal x1473=(r11*sj5);
IkReal x1474=(cj5*r10);
IkReal x1475=(r21*sj5);
IkReal x1476=(cj5*r20);
IkReal x1477=(r01*sj5);
IkReal x1478=((1.0)*x1470);
IkReal x1479=((1.0)*x1469);
evalcond[0]=((((-1.0)*r22*x1478))+(((-1.0)*x1476*x1479))+((x1469*x1475)));
evalcond[1]=((((-1.0)*r22*x1479))+((x1470*x1476))+(((-1.0)*x1475*x1478)));
evalcond[2]=(cj0+(((-1.0)*r12*x1478))+(((-1.0)*x1474*x1479))+((x1469*x1473)));
evalcond[3]=((((-1.0)*x1471))+(((-1.0)*r02*x1478))+(((-1.0)*x1472*x1479))+((x1469*x1477)));
evalcond[4]=((((-1.0)*x1477*x1478))+((x1470*x1472))+(((-1.0)*r02*x1479))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1479))+((x1470*x1474))+(((-1.0)*x1471))+(((-1.0)*x1473*x1478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1480=((1.0)*cj5);
CheckValue<IkReal> x1481=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1480))+(((-1.0)*r00*sj5)))),-1);
if(!x1481.valid){
continue;
}
CheckValue<IkReal> x1482 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1481.value)))+(x1482.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1483=IKsin(j4);
IkReal x1484=IKcos(j4);
IkReal x1485=((1.0)*sj0);
IkReal x1486=(cj5*r00);
IkReal x1487=(r11*sj5);
IkReal x1488=(cj5*r10);
IkReal x1489=(r21*sj5);
IkReal x1490=(cj5*r20);
IkReal x1491=(r01*sj5);
IkReal x1492=((1.0)*x1484);
IkReal x1493=((1.0)*x1483);
evalcond[0]=(((x1483*x1489))+(((-1.0)*x1490*x1493))+(((-1.0)*r22*x1492)));
evalcond[1]=(((x1484*x1490))+(((-1.0)*r22*x1493))+(((-1.0)*x1489*x1492)));
evalcond[2]=((((-1.0)*r12*x1492))+cj0+((x1483*x1487))+(((-1.0)*x1488*x1493)));
evalcond[3]=((((-1.0)*x1485))+(((-1.0)*x1486*x1493))+(((-1.0)*r02*x1492))+((x1483*x1491)));
evalcond[4]=((((-1.0)*r02*x1493))+((x1484*x1486))+(((-1.0)*x1491*x1492))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1493))+(((-1.0)*x1487*x1492))+(((-1.0)*x1485))+((x1484*x1488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09979260705136)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09979260705136)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09979260705136)*px))+IKsqr(((6.09979260705136)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09979260705136)*px), ((6.09979260705136)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.16394)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.16394)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1494=((1.0)*cj5);
IkReal x1495=((((-1.0)*r01*x1494))+(((-1.0)*r00*sj5)));
j4eval[0]=x1495;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1494)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1496=cj5*cj5;
IkReal x1497=((1.0)*r21);
IkReal x1498=(cj5*sj5);
IkReal x1499=((1.0)*r20);
IkReal x1500=((((-1.0)*r01*x1496*x1497))+((r01*r21))+((r00*r20*x1496))+(((-1.0)*r01*x1498*x1499))+(((-1.0)*r00*x1497*x1498))+((r02*r22)));
j4eval[0]=x1500;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1499))))));
j4eval[2]=IKsign(x1500);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1501=cj5*cj5;
IkReal x1502=(r21*sj5);
IkReal x1503=(r11*r21);
IkReal x1504=((1.0)*cj5*r20);
IkReal x1505=((((-1.0)*r11*sj5*x1504))+((r12*r22))+x1503+((r10*r20*x1501))+(((-1.0)*cj5*r10*x1502))+(((-1.0)*x1501*x1503)));
j4eval[0]=x1505;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1504))+((sj0*x1502))))));
j4eval[2]=IKsign(x1505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1506=cj5*cj5;
IkReal x1507=(r21*sj5);
IkReal x1508=(r11*r21);
IkReal x1509=((1.0)*cj5*r20);
CheckValue<IkReal> x1510=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1509))+((r12*r22))+x1508+((r10*r20*x1506))+(((-1.0)*cj5*r10*x1507))+(((-1.0)*x1506*x1508)))),-1);
if(!x1510.valid){
continue;
}
CheckValue<IkReal> x1511 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1509))+((sj0*x1507)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1510.value)))+(x1511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1512=IKsin(j4);
IkReal x1513=IKcos(j4);
IkReal x1514=(r11*sj5);
IkReal x1515=(cj5*r00);
IkReal x1516=(cj5*r10);
IkReal x1517=(r21*sj5);
IkReal x1518=(cj5*r20);
IkReal x1519=(r01*sj5);
IkReal x1520=((1.0)*x1513);
IkReal x1521=((1.0)*x1512);
evalcond[0]=((((-1.0)*x1518*x1521))+(((-1.0)*r22*x1520))+((x1512*x1517)));
evalcond[1]=(((x1513*x1518))+(((-1.0)*r22*x1521))+(((-1.0)*x1517*x1520)));
evalcond[2]=((((-1.0)*r12*x1520))+cj0+(((-1.0)*x1516*x1521))+((x1512*x1514)));
evalcond[3]=(((x1513*x1515))+cj0+(((-1.0)*x1519*x1520))+(((-1.0)*r02*x1521)));
evalcond[4]=(((x1513*x1516))+(((-1.0)*r12*x1521))+sj0+(((-1.0)*x1514*x1520)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1515*x1521))+(((-1.0)*r02*x1520))+((x1512*x1519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1522=cj5*cj5;
IkReal x1523=((1.0)*r21);
IkReal x1524=(cj5*sj5);
IkReal x1525=((1.0)*r20);
CheckValue<IkReal> x1526=IKPowWithIntegerCheck(IKsign((((r00*r20*x1522))+(((-1.0)*r00*x1523*x1524))+((r01*r21))+(((-1.0)*r01*x1524*x1525))+(((-1.0)*r01*x1522*x1523))+((r02*r22)))),-1);
if(!x1526.valid){
continue;
}
CheckValue<IkReal> x1527 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1526.value)))+(x1527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1528=IKsin(j4);
IkReal x1529=IKcos(j4);
IkReal x1530=(r11*sj5);
IkReal x1531=(cj5*r00);
IkReal x1532=(cj5*r10);
IkReal x1533=(r21*sj5);
IkReal x1534=(cj5*r20);
IkReal x1535=(r01*sj5);
IkReal x1536=((1.0)*x1529);
IkReal x1537=((1.0)*x1528);
evalcond[0]=(((x1528*x1533))+(((-1.0)*r22*x1536))+(((-1.0)*x1534*x1537)));
evalcond[1]=((((-1.0)*r22*x1537))+((x1529*x1534))+(((-1.0)*x1533*x1536)));
evalcond[2]=((((-1.0)*r12*x1536))+cj0+((x1528*x1530))+(((-1.0)*x1532*x1537)));
evalcond[3]=(cj0+(((-1.0)*r02*x1537))+(((-1.0)*x1535*x1536))+((x1529*x1531)));
evalcond[4]=(sj0+(((-1.0)*r12*x1537))+(((-1.0)*x1530*x1536))+((x1529*x1532)));
evalcond[5]=((((-1.0)*sj0))+((x1528*x1535))+(((-1.0)*x1531*x1537))+(((-1.0)*r02*x1536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1538=((1.0)*cj5);
CheckValue<IkReal> x1539=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1538))+(((-1.0)*r00*sj5)))),-1);
if(!x1539.valid){
continue;
}
CheckValue<IkReal> x1540 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1539.value)))+(x1540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1541=IKsin(j4);
IkReal x1542=IKcos(j4);
IkReal x1543=(r11*sj5);
IkReal x1544=(cj5*r00);
IkReal x1545=(cj5*r10);
IkReal x1546=(r21*sj5);
IkReal x1547=(cj5*r20);
IkReal x1548=(r01*sj5);
IkReal x1549=((1.0)*x1542);
IkReal x1550=((1.0)*x1541);
evalcond[0]=(((x1541*x1546))+(((-1.0)*r22*x1549))+(((-1.0)*x1547*x1550)));
evalcond[1]=((((-1.0)*x1546*x1549))+(((-1.0)*r22*x1550))+((x1542*x1547)));
evalcond[2]=(cj0+((x1541*x1543))+(((-1.0)*x1545*x1550))+(((-1.0)*r12*x1549)));
evalcond[3]=(cj0+(((-1.0)*x1548*x1549))+(((-1.0)*r02*x1550))+((x1542*x1544)));
evalcond[4]=((((-1.0)*x1543*x1549))+sj0+(((-1.0)*r12*x1550))+((x1542*x1545)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1549))+((x1541*x1548))+(((-1.0)*x1544*x1550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.408399850136537)*px))+(((-1.52458648458924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.408399850136537)*py))+(((-1.52458648458924)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.408399850136537)*px))+(((-1.52458648458924)*py))))+IKsqr(((((0.408399850136537)*py))+(((-1.52458648458924)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.408399850136537)*px))+(((-1.52458648458924)*py))), ((((0.408399850136537)*py))+(((-1.52458648458924)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1551=IKcos(j0);
IkReal x1552=IKsin(j0);
evalcond[0]=((((-0.16394)*x1552))+(((-0.612)*x1551))+(((-1.0)*px)));
evalcond[1]=((((-0.612)*x1552))+(((-1.0)*py))+(((0.16394)*x1551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1553=((1.0)*cj5);
IkReal x1554=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1553)));
j4eval[0]=x1554;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1553)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1554);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1555=cj5*cj5;
IkReal x1556=((1.0)*r21);
IkReal x1557=(cj5*sj5);
IkReal x1558=((1.0)*r20);
IkReal x1559=(((r01*r21))+((r00*r20*x1555))+(((-1.0)*r01*x1555*x1556))+(((-1.0)*r00*x1556*x1557))+(((-1.0)*r01*x1557*x1558))+((r02*r22)));
j4eval[0]=x1559;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1558)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1560=cj5*cj5;
IkReal x1561=(r21*sj5);
IkReal x1562=(r11*r21);
IkReal x1563=((1.0)*cj5*r20);
IkReal x1564=((((-1.0)*cj5*r10*x1561))+(((-1.0)*r11*sj5*x1563))+((r12*r22))+x1562+(((-1.0)*x1560*x1562))+((r10*r20*x1560)));
j4eval[0]=x1564;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1561))+(((-1.0)*sj0*x1563))))));
j4eval[2]=IKsign(x1564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1565=cj5*cj5;
IkReal x1566=(r21*sj5);
IkReal x1567=(r11*r21);
IkReal x1568=((1.0)*cj5*r20);
CheckValue<IkReal> x1569 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1566))+(((-1.0)*sj0*x1568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1569.valid){
continue;
}
CheckValue<IkReal> x1570=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1566))+(((-1.0)*r11*sj5*x1568))+((r12*r22))+x1567+(((-1.0)*x1565*x1567))+((r10*r20*x1565)))),-1);
if(!x1570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1569.value)+(((1.5707963267949)*(x1570.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1571=IKsin(j4);
IkReal x1572=IKcos(j4);
IkReal x1573=(r11*sj5);
IkReal x1574=(cj5*r00);
IkReal x1575=(cj5*r10);
IkReal x1576=(r21*sj5);
IkReal x1577=(cj5*r20);
IkReal x1578=(r01*sj5);
IkReal x1579=((1.0)*x1572);
IkReal x1580=((1.0)*x1571);
evalcond[0]=(((x1571*x1576))+(((-1.0)*x1577*x1580))+(((-1.0)*r22*x1579)));
evalcond[1]=((((-1.0)*x1576*x1579))+((x1572*x1577))+(((-1.0)*r22*x1580)));
evalcond[2]=(((x1571*x1573))+cj0+(((-1.0)*r12*x1579))+(((-1.0)*x1575*x1580)));
evalcond[3]=(((x1572*x1574))+cj0+(((-1.0)*r02*x1580))+(((-1.0)*x1578*x1579)));
evalcond[4]=(sj0+((x1572*x1575))+(((-1.0)*x1573*x1579))+(((-1.0)*r12*x1580)));
evalcond[5]=(((x1571*x1578))+(((-1.0)*r02*x1579))+(((-1.0)*sj0))+(((-1.0)*x1574*x1580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1581=cj5*cj5;
IkReal x1582=((1.0)*r21);
IkReal x1583=(cj5*sj5);
IkReal x1584=((1.0)*r20);
CheckValue<IkReal> x1585 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1584))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1585.valid){
continue;
}
CheckValue<IkReal> x1586=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1582*x1583))+((r01*r21))+(((-1.0)*r01*x1583*x1584))+(((-1.0)*r01*x1581*x1582))+((r00*r20*x1581))+((r02*r22)))),-1);
if(!x1586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1585.value)+(((1.5707963267949)*(x1586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1587=IKsin(j4);
IkReal x1588=IKcos(j4);
IkReal x1589=(r11*sj5);
IkReal x1590=(cj5*r00);
IkReal x1591=(cj5*r10);
IkReal x1592=(r21*sj5);
IkReal x1593=(cj5*r20);
IkReal x1594=(r01*sj5);
IkReal x1595=((1.0)*x1588);
IkReal x1596=((1.0)*x1587);
evalcond[0]=(((x1587*x1592))+(((-1.0)*x1593*x1596))+(((-1.0)*r22*x1595)));
evalcond[1]=((((-1.0)*x1592*x1595))+((x1588*x1593))+(((-1.0)*r22*x1596)));
evalcond[2]=(((x1587*x1589))+cj0+(((-1.0)*x1591*x1596))+(((-1.0)*r12*x1595)));
evalcond[3]=(cj0+((x1588*x1590))+(((-1.0)*x1594*x1595))+(((-1.0)*r02*x1596)));
evalcond[4]=(sj0+((x1588*x1591))+(((-1.0)*x1589*x1595))+(((-1.0)*r12*x1596)));
evalcond[5]=((((-1.0)*sj0))+((x1587*x1594))+(((-1.0)*r02*x1595))+(((-1.0)*x1590*x1596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1597=((1.0)*cj5);
CheckValue<IkReal> x1598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1597)))),-1);
if(!x1598.valid){
continue;
}
CheckValue<IkReal> x1599 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1597))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1598.value)))+(x1599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1600=IKsin(j4);
IkReal x1601=IKcos(j4);
IkReal x1602=(r11*sj5);
IkReal x1603=(cj5*r00);
IkReal x1604=(cj5*r10);
IkReal x1605=(r21*sj5);
IkReal x1606=(cj5*r20);
IkReal x1607=(r01*sj5);
IkReal x1608=((1.0)*x1601);
IkReal x1609=((1.0)*x1600);
evalcond[0]=(((x1600*x1605))+(((-1.0)*r22*x1608))+(((-1.0)*x1606*x1609)));
evalcond[1]=(((x1601*x1606))+(((-1.0)*r22*x1609))+(((-1.0)*x1605*x1608)));
evalcond[2]=(cj0+((x1600*x1602))+(((-1.0)*r12*x1608))+(((-1.0)*x1604*x1609)));
evalcond[3]=((((-1.0)*x1607*x1608))+cj0+((x1601*x1603))+(((-1.0)*r02*x1609)));
evalcond[4]=(sj0+((x1601*x1604))+(((-1.0)*x1602*x1608))+(((-1.0)*r12*x1609)));
evalcond[5]=((((-1.0)*sj0))+((x1600*x1607))+(((-1.0)*r02*x1608))+(((-1.0)*x1603*x1609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.408399850136537)*px))+(((-1.52458648458924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.408399850136537)*py))+(((-1.52458648458924)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.408399850136537)*px))+(((-1.52458648458924)*py))))+IKsqr(((((0.408399850136537)*py))+(((-1.52458648458924)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.408399850136537)*px))+(((-1.52458648458924)*py))), ((((0.408399850136537)*py))+(((-1.52458648458924)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1610=IKcos(j0);
IkReal x1611=IKsin(j0);
evalcond[0]=((((-0.16394)*x1611))+(((-0.612)*x1610))+(((-1.0)*px)));
evalcond[1]=((((-0.612)*x1611))+(((-1.0)*py))+(((0.16394)*x1610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1612=((1.0)*cj5);
IkReal x1613=((((-1.0)*r01*x1612))+(((-1.0)*r00*sj5)));
j4eval[0]=x1613;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1612))))));
j4eval[2]=IKsign(x1613);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1614=((1.0)*cj5);
IkReal x1615=((((-1.0)*r11*x1614))+(((-1.0)*r10*sj5)));
j4eval[0]=x1615;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1614))))));
j4eval[2]=IKsign(x1615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1616=cj5*cj5;
IkReal x1617=((1.0)*sj5);
IkReal x1618=(cj5*r20);
IkReal x1619=(r11*r21);
IkReal x1620=((((-1.0)*r11*x1617*x1618))+((r10*r20*x1616))+x1619+((r12*r22))+(((-1.0)*cj5*r10*r21*x1617))+(((-1.0)*x1616*x1619)));
j4eval[0]=x1620;
j4eval[1]=IKsign(x1620);
j4eval[2]=((IKabs((((cj0*x1618))+(((-1.0)*cj0*r21*x1617)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1621=cj5*cj5;
IkReal x1622=((1.0)*sj5);
IkReal x1623=(cj5*r20);
IkReal x1624=(r11*r21);
CheckValue<IkReal> x1625 = IKatan2WithCheck(IkReal((((cj0*x1623))+(((-1.0)*cj0*r21*x1622)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1625.valid){
continue;
}
CheckValue<IkReal> x1626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1622*x1623))+x1624+((r10*r20*x1621))+(((-1.0)*x1621*x1624))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1622)))),-1);
if(!x1626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1625.value)+(((1.5707963267949)*(x1626.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1627=IKsin(j4);
IkReal x1628=IKcos(j4);
IkReal x1629=((1.0)*sj0);
IkReal x1630=(cj5*r00);
IkReal x1631=(r11*sj5);
IkReal x1632=(cj5*r10);
IkReal x1633=(r21*sj5);
IkReal x1634=(cj5*r20);
IkReal x1635=(r01*sj5);
IkReal x1636=((1.0)*x1628);
IkReal x1637=((1.0)*x1627);
evalcond[0]=(((x1627*x1633))+(((-1.0)*r22*x1636))+(((-1.0)*x1634*x1637)));
evalcond[1]=((((-1.0)*r22*x1637))+((x1628*x1634))+(((-1.0)*x1633*x1636)));
evalcond[2]=(((x1627*x1631))+cj0+(((-1.0)*r12*x1636))+(((-1.0)*x1632*x1637)));
evalcond[3]=(((x1627*x1635))+(((-1.0)*x1629))+(((-1.0)*x1630*x1637))+(((-1.0)*r02*x1636)));
evalcond[4]=((((-1.0)*x1635*x1636))+((x1628*x1630))+(((-1.0)*r02*x1637))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1637))+((x1628*x1632))+(((-1.0)*x1629))+(((-1.0)*x1631*x1636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1638=((1.0)*cj5);
CheckValue<IkReal> x1639=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1638)))),-1);
if(!x1639.valid){
continue;
}
CheckValue<IkReal> x1640 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1638))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1639.value)))+(x1640.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1641=IKsin(j4);
IkReal x1642=IKcos(j4);
IkReal x1643=((1.0)*sj0);
IkReal x1644=(cj5*r00);
IkReal x1645=(r11*sj5);
IkReal x1646=(cj5*r10);
IkReal x1647=(r21*sj5);
IkReal x1648=(cj5*r20);
IkReal x1649=(r01*sj5);
IkReal x1650=((1.0)*x1642);
IkReal x1651=((1.0)*x1641);
evalcond[0]=((((-1.0)*r22*x1650))+((x1641*x1647))+(((-1.0)*x1648*x1651)));
evalcond[1]=((((-1.0)*r22*x1651))+(((-1.0)*x1647*x1650))+((x1642*x1648)));
evalcond[2]=(cj0+(((-1.0)*x1646*x1651))+(((-1.0)*r12*x1650))+((x1641*x1645)));
evalcond[3]=((((-1.0)*x1644*x1651))+((x1641*x1649))+(((-1.0)*x1643))+(((-1.0)*r02*x1650)));
evalcond[4]=(((x1642*x1644))+(((-1.0)*x1649*x1650))+(((-1.0)*r02*x1651))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1645*x1650))+(((-1.0)*r12*x1651))+(((-1.0)*x1643))+((x1642*x1646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1652=((1.0)*cj5);
CheckValue<IkReal> x1653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1652))+(((-1.0)*r00*sj5)))),-1);
if(!x1653.valid){
continue;
}
CheckValue<IkReal> x1654 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1653.value)))+(x1654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1655=IKsin(j4);
IkReal x1656=IKcos(j4);
IkReal x1657=((1.0)*sj0);
IkReal x1658=(cj5*r00);
IkReal x1659=(r11*sj5);
IkReal x1660=(cj5*r10);
IkReal x1661=(r21*sj5);
IkReal x1662=(cj5*r20);
IkReal x1663=(r01*sj5);
IkReal x1664=((1.0)*x1656);
IkReal x1665=((1.0)*x1655);
evalcond[0]=((((-1.0)*x1662*x1665))+((x1655*x1661))+(((-1.0)*r22*x1664)));
evalcond[1]=((((-1.0)*x1661*x1664))+(((-1.0)*r22*x1665))+((x1656*x1662)));
evalcond[2]=(cj0+(((-1.0)*r12*x1664))+((x1655*x1659))+(((-1.0)*x1660*x1665)));
evalcond[3]=(((x1655*x1663))+(((-1.0)*x1657))+(((-1.0)*r02*x1664))+(((-1.0)*x1658*x1665)));
evalcond[4]=(((x1656*x1658))+(((-1.0)*x1663*x1664))+(((-1.0)*r02*x1665))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1665))+(((-1.0)*x1657))+((x1656*x1660))+(((-1.0)*x1659*x1664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09979260705136)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09979260705136)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09979260705136)*px))+IKsqr(((6.09979260705136)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09979260705136)*px), ((6.09979260705136)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.16394)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.16394)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1666=((1.0)*cj5);
IkReal x1667=((((-1.0)*r01*x1666))+(((-1.0)*r00*sj5)));
j4eval[0]=x1667;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1666)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1667);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1668=cj5*cj5;
IkReal x1669=((1.0)*r21);
IkReal x1670=(cj5*sj5);
IkReal x1671=((1.0)*r20);
IkReal x1672=((((-1.0)*r00*x1669*x1670))+(((-1.0)*r01*x1670*x1671))+((r01*r21))+((r00*r20*x1668))+((r02*r22))+(((-1.0)*r01*x1668*x1669)));
j4eval[0]=x1672;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1671))))));
j4eval[2]=IKsign(x1672);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1673=cj5*cj5;
IkReal x1674=(r21*sj5);
IkReal x1675=(r11*r21);
IkReal x1676=((1.0)*cj5*r20);
IkReal x1677=((((-1.0)*cj5*r10*x1674))+x1675+(((-1.0)*r11*sj5*x1676))+(((-1.0)*x1673*x1675))+((r12*r22))+((r10*r20*x1673)));
j4eval[0]=x1677;
j4eval[1]=((IKabs((((sj0*x1674))+(((-1.0)*sj0*x1676)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1677);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1678=cj5*cj5;
IkReal x1679=(r21*sj5);
IkReal x1680=(r11*r21);
IkReal x1681=((1.0)*cj5*r20);
CheckValue<IkReal> x1682 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1679))+(((-1.0)*sj0*x1681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1682.valid){
continue;
}
CheckValue<IkReal> x1683=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1679))+(((-1.0)*r11*sj5*x1681))+x1680+((r12*r22))+(((-1.0)*x1678*x1680))+((r10*r20*x1678)))),-1);
if(!x1683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1682.value)+(((1.5707963267949)*(x1683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1684=IKsin(j4);
IkReal x1685=IKcos(j4);
IkReal x1686=(r11*sj5);
IkReal x1687=(cj5*r00);
IkReal x1688=(cj5*r10);
IkReal x1689=(r21*sj5);
IkReal x1690=(cj5*r20);
IkReal x1691=(r01*sj5);
IkReal x1692=((1.0)*x1685);
IkReal x1693=((1.0)*x1684);
evalcond[0]=((((-1.0)*x1690*x1693))+(((-1.0)*r22*x1692))+((x1684*x1689)));
evalcond[1]=((((-1.0)*r22*x1693))+((x1685*x1690))+(((-1.0)*x1689*x1692)));
evalcond[2]=((((-1.0)*x1688*x1693))+cj0+(((-1.0)*r12*x1692))+((x1684*x1686)));
evalcond[3]=(cj0+(((-1.0)*x1691*x1692))+(((-1.0)*r02*x1693))+((x1685*x1687)));
evalcond[4]=((((-1.0)*x1686*x1692))+sj0+(((-1.0)*r12*x1693))+((x1685*x1688)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1687*x1693))+(((-1.0)*r02*x1692))+((x1684*x1691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1694=cj5*cj5;
IkReal x1695=((1.0)*r21);
IkReal x1696=(cj5*sj5);
IkReal x1697=((1.0)*r20);
CheckValue<IkReal> x1698 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1697))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1698.valid){
continue;
}
CheckValue<IkReal> x1699=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1695*x1696))+((r01*r21))+(((-1.0)*r01*x1696*x1697))+(((-1.0)*r01*x1694*x1695))+((r00*r20*x1694))+((r02*r22)))),-1);
if(!x1699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1698.value)+(((1.5707963267949)*(x1699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1700=IKsin(j4);
IkReal x1701=IKcos(j4);
IkReal x1702=(r11*sj5);
IkReal x1703=(cj5*r00);
IkReal x1704=(cj5*r10);
IkReal x1705=(r21*sj5);
IkReal x1706=(cj5*r20);
IkReal x1707=(r01*sj5);
IkReal x1708=((1.0)*x1701);
IkReal x1709=((1.0)*x1700);
evalcond[0]=(((x1700*x1705))+(((-1.0)*x1706*x1709))+(((-1.0)*r22*x1708)));
evalcond[1]=((((-1.0)*x1705*x1708))+((x1701*x1706))+(((-1.0)*r22*x1709)));
evalcond[2]=(cj0+((x1700*x1702))+(((-1.0)*x1704*x1709))+(((-1.0)*r12*x1708)));
evalcond[3]=(cj0+(((-1.0)*x1707*x1708))+(((-1.0)*r02*x1709))+((x1701*x1703)));
evalcond[4]=((((-1.0)*x1702*x1708))+sj0+((x1701*x1704))+(((-1.0)*r12*x1709)));
evalcond[5]=((((-1.0)*sj0))+((x1700*x1707))+(((-1.0)*r02*x1708))+(((-1.0)*x1703*x1709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1710=((1.0)*cj5);
CheckValue<IkReal> x1711=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1710)))),-1);
if(!x1711.valid){
continue;
}
CheckValue<IkReal> x1712 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1711.value)))+(x1712.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1713=IKsin(j4);
IkReal x1714=IKcos(j4);
IkReal x1715=(r11*sj5);
IkReal x1716=(cj5*r00);
IkReal x1717=(cj5*r10);
IkReal x1718=(r21*sj5);
IkReal x1719=(cj5*r20);
IkReal x1720=(r01*sj5);
IkReal x1721=((1.0)*x1714);
IkReal x1722=((1.0)*x1713);
evalcond[0]=((((-1.0)*r22*x1721))+((x1713*x1718))+(((-1.0)*x1719*x1722)));
evalcond[1]=((((-1.0)*r22*x1722))+((x1714*x1719))+(((-1.0)*x1718*x1721)));
evalcond[2]=(cj0+(((-1.0)*r12*x1721))+((x1713*x1715))+(((-1.0)*x1717*x1722)));
evalcond[3]=(cj0+((x1714*x1716))+(((-1.0)*x1720*x1721))+(((-1.0)*r02*x1722)));
evalcond[4]=((((-1.0)*x1715*x1721))+sj0+(((-1.0)*r12*x1722))+((x1714*x1717)));
evalcond[5]=((((-1.0)*sj0))+((x1713*x1720))+(((-1.0)*x1716*x1722))+(((-1.0)*r02*x1721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09979260705136)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09979260705136)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09979260705136)*px))+IKsqr(((6.09979260705136)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09979260705136)*px), ((6.09979260705136)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.16394)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.16394)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1723=((1.0)*cj5);
IkReal x1724=((((-1.0)*r01*x1723))+(((-1.0)*r00*sj5)));
j4eval[0]=x1724;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1723)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1724);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1725=((1.0)*cj5);
IkReal x1726=((((-1.0)*r11*x1725))+(((-1.0)*r10*sj5)));
j4eval[0]=x1726;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1725))))));
j4eval[2]=IKsign(x1726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1727=cj5*cj5;
IkReal x1728=((1.0)*sj5);
IkReal x1729=(cj5*r20);
IkReal x1730=(r11*r21);
IkReal x1731=(x1730+(((-1.0)*r11*x1728*x1729))+(((-1.0)*cj5*r10*r21*x1728))+((r12*r22))+((r10*r20*x1727))+(((-1.0)*x1727*x1730)));
j4eval[0]=x1731;
j4eval[1]=IKsign(x1731);
j4eval[2]=((IKabs((((cj0*x1729))+(((-1.0)*cj0*r21*x1728)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1732=cj5*cj5;
IkReal x1733=((1.0)*sj5);
IkReal x1734=(cj5*r20);
IkReal x1735=(r11*r21);
CheckValue<IkReal> x1736 = IKatan2WithCheck(IkReal((((cj0*x1734))+(((-1.0)*cj0*r21*x1733)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1736.valid){
continue;
}
CheckValue<IkReal> x1737=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1733))+x1735+(((-1.0)*x1732*x1735))+((r12*r22))+(((-1.0)*r11*x1733*x1734))+((r10*r20*x1732)))),-1);
if(!x1737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1736.value)+(((1.5707963267949)*(x1737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1738=IKsin(j4);
IkReal x1739=IKcos(j4);
IkReal x1740=((1.0)*sj0);
IkReal x1741=(cj5*r00);
IkReal x1742=(r11*sj5);
IkReal x1743=(cj5*r10);
IkReal x1744=(r21*sj5);
IkReal x1745=(cj5*r20);
IkReal x1746=(r01*sj5);
IkReal x1747=((1.0)*x1739);
IkReal x1748=((1.0)*x1738);
evalcond[0]=((((-1.0)*r22*x1747))+(((-1.0)*x1745*x1748))+((x1738*x1744)));
evalcond[1]=(((x1739*x1745))+(((-1.0)*r22*x1748))+(((-1.0)*x1744*x1747)));
evalcond[2]=((((-1.0)*r12*x1747))+cj0+((x1738*x1742))+(((-1.0)*x1743*x1748)));
evalcond[3]=((((-1.0)*x1741*x1748))+(((-1.0)*x1740))+((x1738*x1746))+(((-1.0)*r02*x1747)));
evalcond[4]=(((x1739*x1741))+(((-1.0)*x1746*x1747))+(((-1.0)*r02*x1748))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1748))+((x1739*x1743))+(((-1.0)*x1740))+(((-1.0)*x1742*x1747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1749=((1.0)*cj5);
CheckValue<IkReal> x1750 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1750.valid){
continue;
}
CheckValue<IkReal> x1751=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1749))+(((-1.0)*r10*sj5)))),-1);
if(!x1751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1750.value)+(((1.5707963267949)*(x1751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1752=IKsin(j4);
IkReal x1753=IKcos(j4);
IkReal x1754=((1.0)*sj0);
IkReal x1755=(cj5*r00);
IkReal x1756=(r11*sj5);
IkReal x1757=(cj5*r10);
IkReal x1758=(r21*sj5);
IkReal x1759=(cj5*r20);
IkReal x1760=(r01*sj5);
IkReal x1761=((1.0)*x1753);
IkReal x1762=((1.0)*x1752);
evalcond[0]=(((x1752*x1758))+(((-1.0)*x1759*x1762))+(((-1.0)*r22*x1761)));
evalcond[1]=(((x1753*x1759))+(((-1.0)*x1758*x1761))+(((-1.0)*r22*x1762)));
evalcond[2]=(((x1752*x1756))+cj0+(((-1.0)*r12*x1761))+(((-1.0)*x1757*x1762)));
evalcond[3]=((((-1.0)*r02*x1761))+(((-1.0)*x1755*x1762))+((x1752*x1760))+(((-1.0)*x1754)));
evalcond[4]=(((x1753*x1755))+(((-1.0)*r02*x1762))+(((-1.0)*x1760*x1761))+(((-1.0)*cj0)));
evalcond[5]=(((x1753*x1757))+(((-1.0)*x1756*x1761))+(((-1.0)*r12*x1762))+(((-1.0)*x1754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1763=((1.0)*cj5);
CheckValue<IkReal> x1764=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1763))+(((-1.0)*r00*sj5)))),-1);
if(!x1764.valid){
continue;
}
CheckValue<IkReal> x1765 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1764.value)))+(x1765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1766=IKsin(j4);
IkReal x1767=IKcos(j4);
IkReal x1768=((1.0)*sj0);
IkReal x1769=(cj5*r00);
IkReal x1770=(r11*sj5);
IkReal x1771=(cj5*r10);
IkReal x1772=(r21*sj5);
IkReal x1773=(cj5*r20);
IkReal x1774=(r01*sj5);
IkReal x1775=((1.0)*x1767);
IkReal x1776=((1.0)*x1766);
evalcond[0]=(((x1766*x1772))+(((-1.0)*x1773*x1776))+(((-1.0)*r22*x1775)));
evalcond[1]=(((x1767*x1773))+(((-1.0)*x1772*x1775))+(((-1.0)*r22*x1776)));
evalcond[2]=(cj0+((x1766*x1770))+(((-1.0)*x1771*x1776))+(((-1.0)*r12*x1775)));
evalcond[3]=((((-1.0)*x1768))+((x1766*x1774))+(((-1.0)*r02*x1775))+(((-1.0)*x1769*x1776)));
evalcond[4]=((((-1.0)*r02*x1776))+((x1767*x1769))+(((-1.0)*x1774*x1775))+(((-1.0)*cj0)));
evalcond[5]=(((x1767*x1771))+(((-1.0)*x1768))+(((-1.0)*x1770*x1775))+(((-1.0)*r12*x1776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1777=(sj1*sj2);
IkReal x1778=(r00*sj5);
IkReal x1779=(cj5*r01);
IkReal x1780=((30600.0)*cj1);
IkReal x1781=(cj1*cj2);
IkReal x1782=((50000.0)*px);
CheckValue<IkReal> x1783=IKPowWithIntegerCheck(((((-8197.0)*x1781))+(((8197.0)*x1777))),-1);
if(!x1783.valid){
continue;
}
CheckValue<IkReal> x1784=IKPowWithIntegerCheck((x1777+(((-1.0)*x1781))),-1);
if(!x1784.valid){
continue;
}
if( IKabs(((x1783.value)*(((((-22830.0)*x1779*x1781))+(((22830.0)*x1777*x1779))+(((22830.0)*x1777*x1778))+(((-1.0)*x1777*x1782))+(((-1.0)*x1779*x1780))+(((-1.0)*x1778*x1780))+(((-22830.0)*x1778*x1781))+((x1781*x1782)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1784.value)*(((((-1.0)*x1779))+(((-1.0)*x1778)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1783.value)*(((((-22830.0)*x1779*x1781))+(((22830.0)*x1777*x1779))+(((22830.0)*x1777*x1778))+(((-1.0)*x1777*x1782))+(((-1.0)*x1779*x1780))+(((-1.0)*x1778*x1780))+(((-22830.0)*x1778*x1781))+((x1781*x1782))))))+IKsqr(((x1784.value)*(((((-1.0)*x1779))+(((-1.0)*x1778))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1783.value)*(((((-22830.0)*x1779*x1781))+(((22830.0)*x1777*x1779))+(((22830.0)*x1777*x1778))+(((-1.0)*x1777*x1782))+(((-1.0)*x1779*x1780))+(((-1.0)*x1778*x1780))+(((-22830.0)*x1778*x1781))+((x1781*x1782))))), ((x1784.value)*(((((-1.0)*x1779))+(((-1.0)*x1778))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1785=IKcos(j0);
IkReal x1786=IKsin(j0);
IkReal x1787=(cj5*r01);
IkReal x1788=(sj1*sj2);
IkReal x1789=((0.1157)*sj5);
IkReal x1790=(cj5*r11);
IkReal x1791=(cj1*cj2);
IkReal x1792=((0.5723)*x1786);
IkReal x1793=(cj1*x1786);
IkReal x1794=((0.5723)*x1785);
evalcond[0]=(((r00*sj5))+x1787+(((-1.0)*x1785*x1791))+((x1785*x1788)));
evalcond[1]=(((r10*sj5))+x1790+((x1786*x1788))+(((-1.0)*x1786*x1791)));
evalcond[2]=((((-1.0)*r00*x1789))+(((-0.1157)*x1787))+(((-1.0)*px))+(((-1.0)*x1788*x1794))+(((0.612)*cj1*x1785))+(((-0.16394)*x1786))+((x1791*x1794)));
evalcond[3]=((((-1.0)*r10*x1789))+(((-0.1157)*x1790))+(((-1.0)*py))+(((0.16394)*x1785))+(((-1.0)*x1788*x1792))+(((0.612)*x1793))+((x1791*x1792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1795=((1.0)*cj5);
IkReal x1796=((((-1.0)*r01*x1795))+(((-1.0)*r00*sj5)));
j4eval[0]=x1796;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1795))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1796);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1797=((1.0)*cj5);
IkReal x1798=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1797)));
j4eval[0]=x1798;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1797))))));
j4eval[2]=IKsign(x1798);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1799=((1.0)*sj0);
IkReal x1800=((1.0)*cj0);
IkReal x1801=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1801;
j4eval[1]=((IKabs(((((-1.0)*r12*x1799))+(((-1.0)*r02*x1800)))))+(IKabs(((((-1.0)*r11*sj5*x1799))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1800))))));
j4eval[2]=IKsign(x1801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1802=((-1.0)*r20);
IkReal x1804 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1804)==0){
continue;
}
IkReal x1803=pow(x1804,-0.5);
CheckValue<IkReal> x1805 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1802),IKFAST_ATAN2_MAGTHRESH);
if(!x1805.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1805.value));
IkReal gconst79=(r21*x1803);
IkReal gconst80=(x1802*x1803);
CheckValue<IkReal> x1806 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1806.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1806.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1807=((-1.0)*r20);
IkReal x1808=x1803;
CheckValue<IkReal> x1810 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1807),IKFAST_ATAN2_MAGTHRESH);
if(!x1810.valid){
continue;
}
IkReal x1809=((-1.0)*(x1810.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1809;
IkReal gconst78=x1809;
IkReal gconst79=(r21*x1808);
IkReal gconst80=(x1807*x1808);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1811=((-1.0)*r20);
IkReal x1812=x1803;
CheckValue<IkReal> x1814 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1811),IKFAST_ATAN2_MAGTHRESH);
if(!x1814.valid){
continue;
}
IkReal x1813=((-1.0)*(x1814.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1813;
IkReal gconst78=x1813;
IkReal gconst79=(r21*x1812);
IkReal gconst80=(x1811*x1812);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1815=((-1.0)*r20);
IkReal x1816=x1803;
CheckValue<IkReal> x1818 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1815),IKFAST_ATAN2_MAGTHRESH);
if(!x1818.valid){
continue;
}
IkReal x1817=((-1.0)*(x1818.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1817;
IkReal gconst78=x1817;
IkReal gconst79=(r21*x1816);
IkReal gconst80=(x1815*x1816);
IkReal x1819=r22*r22;
CheckValue<IkReal> x1822=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1819))),-1);
if(!x1822.valid){
continue;
}
IkReal x1820=x1822.value;
IkReal x1821=(((x1820*(r21*r21*r21*r21)))+((x1820*(r20*r20*r20*r20)))+x1819+(((2.0)*x1820*(r20*r20)*(r21*r21))));
j4eval[0]=x1821;
j4eval[1]=IKsign(x1821);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1823=(sj1*sj2);
IkReal x1824=(gconst80*r20);
IkReal x1825=(gconst79*r21);
IkReal x1826=(cj1*cj2);
CheckValue<IkReal> x1827 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1826))+((r22*x1823)))),IkReal(((((-1.0)*x1825*x1826))+((x1824*x1826))+((x1823*x1825))+(((-1.0)*x1823*x1824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1827.valid){
continue;
}
CheckValue<IkReal> x1828=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1824*x1824)+(x1825*x1825)+(((-2.0)*x1824*x1825)))),-1);
if(!x1828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1827.value)+(((1.5707963267949)*(x1828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1829=IKsin(j4);
IkReal x1830=IKcos(j4);
IkReal x1831=(gconst79*r01);
IkReal x1832=(gconst79*r21);
IkReal x1833=((1.0)*cj2);
IkReal x1834=(gconst79*r11);
IkReal x1835=((1.0)*sj0);
IkReal x1836=(cj1*sj2);
IkReal x1837=((1.0)*x1830);
IkReal x1838=(gconst80*x1830);
IkReal x1839=((1.0)*x1829);
IkReal x1840=(gconst80*x1839);
evalcond[0]=(((x1829*x1832))+(((-1.0)*r20*x1840))+(((-1.0)*r22*x1837)));
evalcond[1]=(cj0+((x1829*x1834))+(((-1.0)*r10*x1840))+(((-1.0)*r12*x1837)));
evalcond[2]=((((-1.0)*r00*x1840))+((x1829*x1831))+(((-1.0)*x1835))+(((-1.0)*r02*x1837)));
evalcond[3]=((((-1.0)*x1832*x1837))+((sj1*sj2))+((r20*x1838))+(((-1.0)*r22*x1839))+(((-1.0)*cj1*x1833)));
evalcond[4]=((((-1.0)*cj0*sj1*x1833))+(((-1.0)*cj0*x1836))+(((-1.0)*r02*x1839))+(((-1.0)*x1831*x1837))+((r00*x1838)));
evalcond[5]=(((r10*x1838))+(((-1.0)*x1834*x1837))+(((-1.0)*x1835*x1836))+(((-1.0)*sj0*sj1*x1833))+(((-1.0)*r12*x1839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1841=((1.0)*gconst80);
CheckValue<IkReal> x1842=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x1841)))),-1);
if(!x1842.valid){
continue;
}
CheckValue<IkReal> x1843 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1841))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1842.value)))+(x1843.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1844=IKsin(j4);
IkReal x1845=IKcos(j4);
IkReal x1846=(gconst79*r01);
IkReal x1847=(gconst79*r21);
IkReal x1848=((1.0)*cj2);
IkReal x1849=(gconst79*r11);
IkReal x1850=((1.0)*sj0);
IkReal x1851=(cj1*sj2);
IkReal x1852=((1.0)*x1845);
IkReal x1853=(gconst80*x1845);
IkReal x1854=((1.0)*x1844);
IkReal x1855=(gconst80*x1854);
evalcond[0]=(((x1844*x1847))+(((-1.0)*r22*x1852))+(((-1.0)*r20*x1855)));
evalcond[1]=(cj0+((x1844*x1849))+(((-1.0)*r12*x1852))+(((-1.0)*r10*x1855)));
evalcond[2]=(((x1844*x1846))+(((-1.0)*r00*x1855))+(((-1.0)*r02*x1852))+(((-1.0)*x1850)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x1854))+(((-1.0)*cj1*x1848))+(((-1.0)*x1847*x1852))+((r20*x1853)));
evalcond[4]=((((-1.0)*cj0*sj1*x1848))+((r00*x1853))+(((-1.0)*r02*x1854))+(((-1.0)*cj0*x1851))+(((-1.0)*x1846*x1852)));
evalcond[5]=(((r10*x1853))+(((-1.0)*x1849*x1852))+(((-1.0)*x1850*x1851))+(((-1.0)*sj0*sj1*x1848))+(((-1.0)*r12*x1854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1856=((1.0)*gconst80);
CheckValue<IkReal> x1857=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1856))+(((-1.0)*gconst79*r00)))),-1);
if(!x1857.valid){
continue;
}
CheckValue<IkReal> x1858 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1856))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1857.value)))+(x1858.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1859=IKsin(j4);
IkReal x1860=IKcos(j4);
IkReal x1861=(gconst79*r01);
IkReal x1862=(gconst79*r21);
IkReal x1863=((1.0)*cj2);
IkReal x1864=(gconst79*r11);
IkReal x1865=((1.0)*sj0);
IkReal x1866=(cj1*sj2);
IkReal x1867=((1.0)*x1860);
IkReal x1868=(gconst80*x1860);
IkReal x1869=((1.0)*x1859);
IkReal x1870=(gconst80*x1869);
evalcond[0]=(((x1859*x1862))+(((-1.0)*r20*x1870))+(((-1.0)*r22*x1867)));
evalcond[1]=(cj0+(((-1.0)*r10*x1870))+((x1859*x1864))+(((-1.0)*r12*x1867)));
evalcond[2]=((((-1.0)*r02*x1867))+(((-1.0)*r00*x1870))+((x1859*x1861))+(((-1.0)*x1865)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x1862*x1867))+(((-1.0)*cj1*x1863))+((r20*x1868))+(((-1.0)*r22*x1869)));
evalcond[4]=((((-1.0)*r02*x1869))+(((-1.0)*cj0*x1866))+(((-1.0)*cj0*sj1*x1863))+(((-1.0)*x1861*x1867))+((r00*x1868)));
evalcond[5]=((((-1.0)*x1864*x1867))+(((-1.0)*x1865*x1866))+(((-1.0)*r12*x1869))+((r10*x1868))+(((-1.0)*sj0*sj1*x1863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1871=((-1.0)*r21);
IkReal x1873 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1873)==0){
continue;
}
IkReal x1872=pow(x1873,-0.5);
CheckValue<IkReal> x1874 = IKatan2WithCheck(IkReal(x1871),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1874.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1874.value))));
IkReal gconst82=(x1871*x1872);
IkReal gconst83=((1.0)*r20*x1872);
CheckValue<IkReal> x1875 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1875.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1875.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1876=((-1.0)*r21);
CheckValue<IkReal> x1879 = IKatan2WithCheck(IkReal(x1876),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1879.valid){
continue;
}
IkReal x1877=((1.0)*(x1879.value));
IkReal x1878=x1872;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1877)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1877)));
IkReal gconst82=(x1876*x1878);
IkReal gconst83=((1.0)*r20*x1878);
IkReal x1880=r22*r22;
IkReal x1881=((1.0)*x1880);
CheckValue<IkReal> x1885=IKPowWithIntegerCheck(((-1.0)+x1880),-1);
if(!x1885.valid){
continue;
}
IkReal x1882=x1885.value;
if((((1.0)+(((-1.0)*x1881)))) < -0.00001)
continue;
IkReal x1883=IKsqrt(((1.0)+(((-1.0)*x1881))));
IkReal x1884=(cj0*x1882*x1883);
j4eval[0]=((IKabs((x1884+(((-1.0)*x1881*x1884)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1886=((-1.0)*r21);
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal(x1886),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
IkReal x1887=((1.0)*(x1889.value));
IkReal x1888=x1872;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1887)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1887)));
IkReal gconst82=(x1886*x1888);
IkReal gconst83=((1.0)*r20*x1888);
IkReal x1890=r22*r22;
IkReal x1891=((1.0)*x1890);
CheckValue<IkReal> x1895=IKPowWithIntegerCheck(((-1.0)+x1890),-1);
if(!x1895.valid){
continue;
}
IkReal x1892=x1895.value;
if((((1.0)+(((-1.0)*x1891)))) < -0.00001)
continue;
IkReal x1893=IKsqrt(((1.0)+(((-1.0)*x1891))));
IkReal x1894=(sj0*x1892*x1893);
j4eval[0]=((IKabs(((((-1.0)*x1891*x1894))+x1894)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1896=((-1.0)*r21);
CheckValue<IkReal> x1899 = IKatan2WithCheck(IkReal(x1896),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1899.valid){
continue;
}
IkReal x1897=((1.0)*(x1899.value));
IkReal x1898=x1872;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1897)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1897)));
IkReal gconst82=(x1896*x1898);
IkReal gconst83=((1.0)*r20*x1898);
IkReal x1900=r22*r22;
IkReal x1901=(r12*sj0);
IkReal x1902=(cj0*r02);
CheckValue<IkReal> x1906=IKPowWithIntegerCheck(((-1.0)+x1900),-1);
if(!x1906.valid){
continue;
}
IkReal x1903=x1906.value;
if((((1.0)+(((-1.0)*x1900)))) < -0.00001)
continue;
IkReal x1904=IKsqrt(((1.0)+(((-1.0)*x1900))));
IkReal x1905=(r22*x1903*x1904);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1901))+(((-1.0)*x1902)))))+(IKabs((((x1901*x1905))+((x1902*x1905))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1907=((1.0)*sj0);
IkReal x1908=((1.0)*cj0);
CheckValue<IkReal> x1909=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1909.valid){
continue;
}
CheckValue<IkReal> x1910 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1907))+(((-1.0)*r02*x1908)))),IkReal(((((-1.0)*gconst82*r11*x1907))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*gconst82*r01*x1908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1909.value)))+(x1910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1911=IKsin(j4);
IkReal x1912=IKcos(j4);
IkReal x1913=(gconst82*r11);
IkReal x1914=((1.0)*cj2);
IkReal x1915=((1.0)*sj0);
IkReal x1916=(cj1*sj2);
IkReal x1917=((1.0)*x1912);
IkReal x1918=(gconst83*x1912);
IkReal x1919=(gconst82*x1911);
IkReal x1920=((1.0)*x1911);
evalcond[0]=((((-1.0)*gconst83*r20*x1920))+(((-1.0)*r22*x1917))+((r21*x1919)));
evalcond[1]=(cj0+(((-1.0)*r12*x1917))+((x1911*x1913))+(((-1.0)*gconst83*r10*x1920)));
evalcond[2]=((((-1.0)*r02*x1917))+((r01*x1919))+(((-1.0)*gconst83*r00*x1920))+(((-1.0)*x1915)));
evalcond[3]=((((-1.0)*gconst82*r21*x1917))+((sj1*sj2))+(((-1.0)*cj1*x1914))+(((-1.0)*r22*x1920))+((r20*x1918)));
evalcond[4]=(((r00*x1918))+(((-1.0)*gconst82*r01*x1917))+(((-1.0)*cj0*sj1*x1914))+(((-1.0)*r02*x1920))+(((-1.0)*cj0*x1916)));
evalcond[5]=(((r10*x1918))+(((-1.0)*r12*x1920))+(((-1.0)*x1915*x1916))+(((-1.0)*sj0*sj1*x1914))+(((-1.0)*x1913*x1917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1921=((1.0)*gconst83);
CheckValue<IkReal> x1922 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1922.valid){
continue;
}
CheckValue<IkReal> x1923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1921))+(((-1.0)*gconst82*r10)))),-1);
if(!x1923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1922.value)+(((1.5707963267949)*(x1923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1924=IKsin(j4);
IkReal x1925=IKcos(j4);
IkReal x1926=(gconst82*r11);
IkReal x1927=((1.0)*cj2);
IkReal x1928=((1.0)*sj0);
IkReal x1929=(cj1*sj2);
IkReal x1930=((1.0)*x1925);
IkReal x1931=(gconst83*x1925);
IkReal x1932=(gconst82*x1924);
IkReal x1933=((1.0)*x1924);
evalcond[0]=((((-1.0)*r22*x1930))+((r21*x1932))+(((-1.0)*gconst83*r20*x1933)));
evalcond[1]=(cj0+(((-1.0)*r12*x1930))+(((-1.0)*gconst83*r10*x1933))+((x1924*x1926)));
evalcond[2]=((((-1.0)*gconst83*r00*x1933))+((r01*x1932))+(((-1.0)*x1928))+(((-1.0)*r02*x1930)));
evalcond[3]=((((-1.0)*cj1*x1927))+((sj1*sj2))+(((-1.0)*r22*x1933))+(((-1.0)*gconst82*r21*x1930))+((r20*x1931)));
evalcond[4]=(((r00*x1931))+(((-1.0)*cj0*x1929))+(((-1.0)*cj0*sj1*x1927))+(((-1.0)*gconst82*r01*x1930))+(((-1.0)*r02*x1933)));
evalcond[5]=((((-1.0)*sj0*sj1*x1927))+(((-1.0)*r12*x1933))+(((-1.0)*x1926*x1930))+(((-1.0)*x1928*x1929))+((r10*x1931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1934=((1.0)*gconst83);
CheckValue<IkReal> x1935 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x1934)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1935.valid){
continue;
}
CheckValue<IkReal> x1936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1934))+(((-1.0)*gconst82*r00)))),-1);
if(!x1936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1935.value)+(((1.5707963267949)*(x1936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1937=IKsin(j4);
IkReal x1938=IKcos(j4);
IkReal x1939=(gconst82*r11);
IkReal x1940=((1.0)*cj2);
IkReal x1941=((1.0)*sj0);
IkReal x1942=(cj1*sj2);
IkReal x1943=((1.0)*x1938);
IkReal x1944=(gconst83*x1938);
IkReal x1945=(gconst82*x1937);
IkReal x1946=((1.0)*x1937);
evalcond[0]=((((-1.0)*r22*x1943))+(((-1.0)*gconst83*r20*x1946))+((r21*x1945)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1946))+(((-1.0)*r12*x1943))+((x1937*x1939)));
evalcond[2]=((((-1.0)*x1941))+(((-1.0)*r02*x1943))+((r01*x1945))+(((-1.0)*gconst83*r00*x1946)));
evalcond[3]=((((-1.0)*r22*x1946))+((r20*x1944))+(((-1.0)*gconst82*r21*x1943))+((sj1*sj2))+(((-1.0)*cj1*x1940)));
evalcond[4]=((((-1.0)*cj0*x1942))+(((-1.0)*r02*x1946))+(((-1.0)*gconst82*r01*x1943))+((r00*x1944))+(((-1.0)*cj0*sj1*x1940)));
evalcond[5]=((((-1.0)*sj0*sj1*x1940))+((r10*x1944))+(((-1.0)*r12*x1946))+(((-1.0)*x1941*x1942))+(((-1.0)*x1939*x1943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1947=((-1.0)*r10);
IkReal x1949 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1949)==0){
continue;
}
IkReal x1948=pow(x1949,-0.5);
CheckValue<IkReal> x1950 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1947),IKFAST_ATAN2_MAGTHRESH);
if(!x1950.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1950.value));
IkReal gconst85=(r11*x1948);
IkReal gconst86=(x1947*x1948);
CheckValue<IkReal> x1951 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1951.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1951.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1952=((-1.0)*r10);
IkReal x1953=x1948;
CheckValue<IkReal> x1955 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1952),IKFAST_ATAN2_MAGTHRESH);
if(!x1955.valid){
continue;
}
IkReal x1954=((-1.0)*(x1955.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1954;
IkReal gconst84=x1954;
IkReal gconst85=(r11*x1953);
IkReal gconst86=(x1952*x1953);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1956=((1.0)*sj0);
IkReal x1957=((1.0)*gconst85);
CheckValue<IkReal> x1958 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1956)))),IkReal(((((-1.0)*cj0*r01*x1957))+((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x1956))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1958.valid){
continue;
}
CheckValue<IkReal> x1959=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1957)))),-1);
if(!x1959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1958.value)+(((1.5707963267949)*(x1959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1960=IKsin(j4);
IkReal x1961=IKcos(j4);
IkReal x1962=(gconst85*r21);
IkReal x1963=(gconst86*r00);
IkReal x1964=(gconst86*r10);
IkReal x1965=((1.0)*cj2);
IkReal x1966=(gconst85*r11);
IkReal x1967=(gconst85*r01);
IkReal x1968=((1.0)*sj0);
IkReal x1969=(gconst86*r20);
IkReal x1970=(cj1*sj2);
IkReal x1971=((1.0)*x1961);
IkReal x1972=((1.0)*x1960);
evalcond[0]=((((-1.0)*r22*x1971))+((x1960*x1962))+(((-1.0)*x1969*x1972)));
evalcond[1]=((((-1.0)*x1964*x1972))+cj0+((x1960*x1966))+(((-1.0)*r12*x1971)));
evalcond[2]=((((-1.0)*r02*x1971))+(((-1.0)*x1968))+((x1960*x1967))+(((-1.0)*x1963*x1972)));
evalcond[3]=((((-1.0)*r22*x1972))+((sj1*sj2))+((x1961*x1969))+(((-1.0)*x1962*x1971))+(((-1.0)*cj1*x1965)));
evalcond[4]=((((-1.0)*cj0*x1970))+(((-1.0)*cj0*sj1*x1965))+(((-1.0)*r02*x1972))+((x1961*x1963))+(((-1.0)*x1967*x1971)));
evalcond[5]=((((-1.0)*sj0*sj1*x1965))+(((-1.0)*x1966*x1971))+(((-1.0)*x1968*x1970))+((x1961*x1964))+(((-1.0)*r12*x1972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1973=((1.0)*gconst86);
CheckValue<IkReal> x1974=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1973))+(((-1.0)*gconst85*r00)))),-1);
if(!x1974.valid){
continue;
}
CheckValue<IkReal> x1975 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1973))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1974.value)))+(x1975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1976=IKsin(j4);
IkReal x1977=IKcos(j4);
IkReal x1978=(gconst85*r21);
IkReal x1979=(gconst86*r00);
IkReal x1980=(gconst86*r10);
IkReal x1981=((1.0)*cj2);
IkReal x1982=(gconst85*r11);
IkReal x1983=(gconst85*r01);
IkReal x1984=((1.0)*sj0);
IkReal x1985=(gconst86*r20);
IkReal x1986=(cj1*sj2);
IkReal x1987=((1.0)*x1977);
IkReal x1988=((1.0)*x1976);
evalcond[0]=(((x1976*x1978))+(((-1.0)*x1985*x1988))+(((-1.0)*r22*x1987)));
evalcond[1]=((((-1.0)*x1980*x1988))+cj0+((x1976*x1982))+(((-1.0)*r12*x1987)));
evalcond[2]=((((-1.0)*x1984))+(((-1.0)*r02*x1987))+((x1976*x1983))+(((-1.0)*x1979*x1988)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x1981))+(((-1.0)*x1978*x1987))+(((-1.0)*r22*x1988))+((x1977*x1985)));
evalcond[4]=((((-1.0)*x1983*x1987))+(((-1.0)*r02*x1988))+(((-1.0)*cj0*sj1*x1981))+((x1977*x1979))+(((-1.0)*cj0*x1986)));
evalcond[5]=((((-1.0)*x1984*x1986))+(((-1.0)*r12*x1988))+(((-1.0)*sj0*sj1*x1981))+(((-1.0)*x1982*x1987))+((x1977*x1980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1989=((-1.0)*r11);
IkReal x1991 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1991)==0){
continue;
}
IkReal x1990=pow(x1991,-0.5);
CheckValue<IkReal> x1992 = IKatan2WithCheck(IkReal(x1989),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1992.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1992.value))));
IkReal gconst88=(x1989*x1990);
IkReal gconst89=((1.0)*r10*x1990);
CheckValue<IkReal> x1993 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1993.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1993.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1994=((-1.0)*r11);
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal(x1994),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
IkReal x1995=((1.0)*(x1997.value));
IkReal x1996=x1990;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1995)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1995)));
IkReal gconst88=(x1994*x1996);
IkReal gconst89=((1.0)*r10*x1996);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1998=((-1.0)*r11);
CheckValue<IkReal> x2001 = IKatan2WithCheck(IkReal(x1998),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2001.valid){
continue;
}
IkReal x1999=((1.0)*(x2001.value));
IkReal x2000=x1990;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1999)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1999)));
IkReal gconst88=(x1998*x2000);
IkReal gconst89=((1.0)*r10*x2000);
IkReal x2002=r12*r12;
IkReal x2003=((1.0)*sj0);
IkReal x2004=(cj0*r02);
IkReal x2005=x1990;
j4eval[0]=((IKabs(((((-1.0)*r12*x2003))+(((-1.0)*x2004)))))+(IKabs(((((-1.0)*x2003*x2005))+((r12*x2004*x2005))+((sj0*x2002*x2005))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2006=((-1.0)*r11);
CheckValue<IkReal> x2009 = IKatan2WithCheck(IkReal(x2006),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2009.valid){
continue;
}
IkReal x2007=((1.0)*(x2009.value));
IkReal x2008=x1990;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2007)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2007)));
IkReal gconst88=(x2006*x2008);
IkReal gconst89=((1.0)*r10*x2008);
IkReal x2010=r12*r12;
IkReal x2011=(cj1*cj2*r22);
IkReal x2012=(r22*sj1*sj2);
CheckValue<IkReal> x2016=IKPowWithIntegerCheck(((-1.0)+x2010),-1);
if(!x2016.valid){
continue;
}
IkReal x2013=x2016.value;
if((((1.0)+(((-1.0)*x2010)))) < -0.00001)
continue;
IkReal x2014=IKsqrt(((1.0)+(((-1.0)*x2010))));
IkReal x2015=(r12*x2013*x2014);
j4eval[0]=((IKabs((x2012+(((-1.0)*x2011)))))+(IKabs((((x2011*x2015))+(((-1.0)*x2012*x2015))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2017=(cj1*cj2);
IkReal x2018=(gconst89*r20);
IkReal x2019=(gconst88*r21);
IkReal x2020=(sj1*sj2);
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal((((r22*x2020))+(((-1.0)*r22*x2017)))),IkReal(((((-1.0)*x2017*x2019))+((x2019*x2020))+(((-1.0)*x2018*x2020))+((x2017*x2018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
CheckValue<IkReal> x2022=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2018*x2019))+(x2019*x2019)+(r22*r22)+(x2018*x2018))),-1);
if(!x2022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2021.value)+(((1.5707963267949)*(x2022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2023=IKsin(j4);
IkReal x2024=IKcos(j4);
IkReal x2025=((1.0)*sj0);
IkReal x2026=((1.0)*cj2);
IkReal x2027=(gconst89*r20);
IkReal x2028=(gconst89*r10);
IkReal x2029=(gconst89*r00);
IkReal x2030=(cj1*sj2);
IkReal x2031=((1.0)*x2024);
IkReal x2032=((1.0)*x2023);
IkReal x2033=(gconst88*x2023);
evalcond[0]=(((r21*x2033))+(((-1.0)*r22*x2031))+(((-1.0)*x2027*x2032)));
evalcond[1]=(cj0+(((-1.0)*r12*x2031))+(((-1.0)*x2028*x2032))+((r11*x2033)));
evalcond[2]=(((r01*x2033))+(((-1.0)*x2029*x2032))+(((-1.0)*r02*x2031))+(((-1.0)*x2025)));
evalcond[3]=(((x2024*x2027))+(((-1.0)*r22*x2032))+(((-1.0)*cj1*x2026))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2031)));
evalcond[4]=((((-1.0)*cj0*sj1*x2026))+((x2024*x2029))+(((-1.0)*r02*x2032))+(((-1.0)*cj0*x2030))+(((-1.0)*gconst88*r01*x2031)));
evalcond[5]=(((x2024*x2028))+(((-1.0)*r12*x2032))+(((-1.0)*cj2*sj1*x2025))+(((-1.0)*gconst88*r11*x2031))+(((-1.0)*x2025*x2030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2034=((1.0)*sj0);
IkReal x2035=((1.0)*cj0);
CheckValue<IkReal> x2036 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2034))+(((-1.0)*r02*x2035)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2034))+(((-1.0)*gconst88*r01*x2035))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2036.valid){
continue;
}
CheckValue<IkReal> x2037=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2036.value)+(((1.5707963267949)*(x2037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2038=IKsin(j4);
IkReal x2039=IKcos(j4);
IkReal x2040=((1.0)*sj0);
IkReal x2041=((1.0)*cj2);
IkReal x2042=(gconst89*r20);
IkReal x2043=(gconst89*r10);
IkReal x2044=(gconst89*r00);
IkReal x2045=(cj1*sj2);
IkReal x2046=((1.0)*x2039);
IkReal x2047=((1.0)*x2038);
IkReal x2048=(gconst88*x2038);
evalcond[0]=(((r21*x2048))+(((-1.0)*r22*x2046))+(((-1.0)*x2042*x2047)));
evalcond[1]=(cj0+((r11*x2048))+(((-1.0)*x2043*x2047))+(((-1.0)*r12*x2046)));
evalcond[2]=((((-1.0)*x2040))+(((-1.0)*r02*x2046))+(((-1.0)*x2044*x2047))+((r01*x2048)));
evalcond[3]=((((-1.0)*r22*x2047))+((x2039*x2042))+((sj1*sj2))+(((-1.0)*cj1*x2041))+(((-1.0)*gconst88*r21*x2046)));
evalcond[4]=((((-1.0)*cj0*x2045))+(((-1.0)*r02*x2047))+((x2039*x2044))+(((-1.0)*cj0*sj1*x2041))+(((-1.0)*gconst88*r01*x2046)));
evalcond[5]=((((-1.0)*cj2*sj1*x2040))+((x2039*x2043))+(((-1.0)*x2040*x2045))+(((-1.0)*gconst88*r11*x2046))+(((-1.0)*r12*x2047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2049=((1.0)*gconst89);
CheckValue<IkReal> x2050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2049))+(((-1.0)*gconst88*r00)))),-1);
if(!x2050.valid){
continue;
}
CheckValue<IkReal> x2051 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2049))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2050.value)))+(x2051.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2052=IKsin(j4);
IkReal x2053=IKcos(j4);
IkReal x2054=((1.0)*sj0);
IkReal x2055=((1.0)*cj2);
IkReal x2056=(gconst89*r20);
IkReal x2057=(gconst89*r10);
IkReal x2058=(gconst89*r00);
IkReal x2059=(cj1*sj2);
IkReal x2060=((1.0)*x2053);
IkReal x2061=((1.0)*x2052);
IkReal x2062=(gconst88*x2052);
evalcond[0]=(((r21*x2062))+(((-1.0)*r22*x2060))+(((-1.0)*x2056*x2061)));
evalcond[1]=((((-1.0)*r12*x2060))+(((-1.0)*x2057*x2061))+cj0+((r11*x2062)));
evalcond[2]=((((-1.0)*r02*x2060))+(((-1.0)*x2058*x2061))+((r01*x2062))+(((-1.0)*x2054)));
evalcond[3]=((((-1.0)*gconst88*r21*x2060))+((x2053*x2056))+(((-1.0)*cj1*x2055))+(((-1.0)*r22*x2061))+((sj1*sj2)));
evalcond[4]=(((x2053*x2058))+(((-1.0)*r02*x2061))+(((-1.0)*cj0*x2059))+(((-1.0)*gconst88*r01*x2060))+(((-1.0)*cj0*sj1*x2055)));
evalcond[5]=((((-1.0)*x2054*x2059))+(((-1.0)*r12*x2061))+((x2053*x2057))+(((-1.0)*cj2*sj1*x2054))+(((-1.0)*gconst88*r11*x2060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2063=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2063;
j4eval[1]=IKsign(x2063);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2064=((1.0)*cj5);
IkReal x2065=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2064)));
j4eval[0]=x2065;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2064)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2065);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2066=cj5*cj5;
IkReal x2067=r11*r11;
IkReal x2068=(r11*sj5);
IkReal x2069=(cj5*r10);
IkReal x2070=((r12*r12)+(((-1.0)*x2066*x2067))+((x2066*(r10*r10)))+x2067+(((-2.0)*x2068*x2069)));
j4eval[0]=x2070;
j4eval[1]=IKsign(x2070);
j4eval[2]=((IKabs(r12))+(IKabs((x2069+(((-1.0)*x2068))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2071=cj5*cj5;
IkReal x2072=r11*r11;
IkReal x2073=(cj5*r10);
IkReal x2074=(r11*sj5);
CheckValue<IkReal> x2075=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2072+(((-1.0)*x2071*x2072))+(((-2.0)*x2073*x2074))+((x2071*(r10*r10))))),-1);
if(!x2075.valid){
continue;
}
CheckValue<IkReal> x2076 = IKatan2WithCheck(IkReal((x2073+(((-1.0)*x2074)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2075.value)))+(x2076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2077=IKsin(j4);
IkReal x2078=IKcos(j4);
IkReal x2079=(cj5*r10);
IkReal x2080=(r01*sj5);
IkReal x2081=((1.0)*cj2);
IkReal x2082=(cj5*r00);
IkReal x2083=(cj5*r20);
IkReal x2084=((1.0)*x2078);
IkReal x2085=((1.0)*x2077);
IkReal x2086=(sj5*x2077);
evalcond[0]=((((-1.0)*r22*x2084))+(((-1.0)*x2083*x2085))+((r21*x2086)));
evalcond[1]=((((-1.0)*r02*x2084))+((x2077*x2080))+(((-1.0)*x2082*x2085)));
evalcond[2]=((((-1.0)*r11*sj5*x2084))+(((-1.0)*r12*x2085))+((x2078*x2079)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2084))+(((-1.0)*x2079*x2085))+((r11*x2086)));
evalcond[4]=((((-1.0)*cj1*x2081))+(((-1.0)*r21*sj5*x2084))+(((-1.0)*r22*x2085))+((x2078*x2083))+((sj1*sj2)));
evalcond[5]=((((-1.0)*r02*x2085))+(((-1.0)*sj1*x2081))+((x2078*x2082))+(((-1.0)*cj1*sj2))+(((-1.0)*x2080*x2084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2087=((1.0)*cj5);
CheckValue<IkReal> x2088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2087)))),-1);
if(!x2088.valid){
continue;
}
CheckValue<IkReal> x2089 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2087))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2088.value)))+(x2089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2090=IKsin(j4);
IkReal x2091=IKcos(j4);
IkReal x2092=(cj5*r10);
IkReal x2093=(r01*sj5);
IkReal x2094=((1.0)*cj2);
IkReal x2095=(cj5*r00);
IkReal x2096=(cj5*r20);
IkReal x2097=((1.0)*x2091);
IkReal x2098=((1.0)*x2090);
IkReal x2099=(sj5*x2090);
evalcond[0]=((((-1.0)*x2096*x2098))+((r21*x2099))+(((-1.0)*r22*x2097)));
evalcond[1]=((((-1.0)*x2095*x2098))+((x2090*x2093))+(((-1.0)*r02*x2097)));
evalcond[2]=((((-1.0)*r11*sj5*x2097))+((x2091*x2092))+(((-1.0)*r12*x2098)));
evalcond[3]=((1.0)+(((-1.0)*x2092*x2098))+(((-1.0)*r12*x2097))+((r11*x2099)));
evalcond[4]=(((x2091*x2096))+(((-1.0)*r21*sj5*x2097))+((sj1*sj2))+(((-1.0)*cj1*x2094))+(((-1.0)*r22*x2098)));
evalcond[5]=(((x2091*x2095))+(((-1.0)*cj1*sj2))+(((-1.0)*x2093*x2097))+(((-1.0)*r02*x2098))+(((-1.0)*sj1*x2094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2100=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2100.valid){
continue;
}
CheckValue<IkReal> x2101 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2100.value)))+(x2101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2102=IKsin(j4);
IkReal x2103=IKcos(j4);
IkReal x2104=(cj5*r10);
IkReal x2105=(r01*sj5);
IkReal x2106=((1.0)*cj2);
IkReal x2107=(cj5*r00);
IkReal x2108=(cj5*r20);
IkReal x2109=((1.0)*x2103);
IkReal x2110=((1.0)*x2102);
IkReal x2111=(sj5*x2102);
evalcond[0]=((((-1.0)*r22*x2109))+((r21*x2111))+(((-1.0)*x2108*x2110)));
evalcond[1]=((((-1.0)*x2107*x2110))+(((-1.0)*r02*x2109))+((x2102*x2105)));
evalcond[2]=(((x2103*x2104))+(((-1.0)*r11*sj5*x2109))+(((-1.0)*r12*x2110)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2109))+(((-1.0)*x2104*x2110))+((r11*x2111)));
evalcond[4]=(((x2103*x2108))+(((-1.0)*cj1*x2106))+((sj1*sj2))+(((-1.0)*r21*sj5*x2109))+(((-1.0)*r22*x2110)));
evalcond[5]=((((-1.0)*sj1*x2106))+((x2103*x2107))+(((-1.0)*cj1*sj2))+(((-1.0)*x2105*x2109))+(((-1.0)*r02*x2110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2112=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2112;
j4eval[1]=IKsign(x2112);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2113=((1.0)*cj5);
IkReal x2114=((((-1.0)*r21*x2113))+(((-1.0)*r20*sj5)));
j4eval[0]=x2114;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2113))+((r01*sj5))))));
j4eval[2]=IKsign(x2114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2115=cj5*cj5;
IkReal x2116=r11*r11;
IkReal x2117=(cj5*r10);
IkReal x2118=(r11*sj5);
IkReal x2119=((((2.0)*x2117*x2118))+(((-1.0)*(r12*r12)))+(((-1.0)*x2115*(r10*r10)))+((x2115*x2116))+(((-1.0)*x2116)));
j4eval[0]=x2119;
j4eval[1]=((IKabs(r12))+(IKabs((x2117+(((-1.0)*x2118))))));
j4eval[2]=IKsign(x2119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2120=cj5*cj5;
IkReal x2121=r11*r11;
IkReal x2122=(cj5*r10);
IkReal x2123=(r11*sj5);
CheckValue<IkReal> x2124 = IKatan2WithCheck(IkReal((x2122+(((-1.0)*x2123)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2124.valid){
continue;
}
CheckValue<IkReal> x2125=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2121))+((x2120*x2121))+(((-1.0)*x2120*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x2122*x2123)))),-1);
if(!x2125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2124.value)+(((1.5707963267949)*(x2125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2126=IKsin(j4);
IkReal x2127=IKcos(j4);
IkReal x2128=(cj5*r10);
IkReal x2129=(r01*sj5);
IkReal x2130=(cj5*r00);
IkReal x2131=(cj5*r20);
IkReal x2132=((1.0)*x2127);
IkReal x2133=((1.0)*x2126);
IkReal x2134=(sj5*x2126);
evalcond[0]=((((-1.0)*r22*x2132))+((r21*x2134))+(((-1.0)*x2131*x2133)));
evalcond[1]=((((-1.0)*x2130*x2133))+((x2126*x2129))+(((-1.0)*r02*x2132)));
evalcond[2]=((((-1.0)*r12*x2133))+(((-1.0)*r11*sj5*x2132))+((x2127*x2128)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2132))+((r11*x2134))+(((-1.0)*x2128*x2133)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2127*x2130))+(((-1.0)*x2129*x2132))+(((-1.0)*r02*x2133)));
evalcond[5]=((((-1.0)*r22*x2133))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2132))+((x2127*x2131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2135=((1.0)*cj5);
CheckValue<IkReal> x2136=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2135))+(((-1.0)*r20*sj5)))),-1);
if(!x2136.valid){
continue;
}
CheckValue<IkReal> x2137 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2136.value)))+(x2137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2138=IKsin(j4);
IkReal x2139=IKcos(j4);
IkReal x2140=(cj5*r10);
IkReal x2141=(r01*sj5);
IkReal x2142=(cj5*r00);
IkReal x2143=(cj5*r20);
IkReal x2144=((1.0)*x2139);
IkReal x2145=((1.0)*x2138);
IkReal x2146=(sj5*x2138);
evalcond[0]=((((-1.0)*x2143*x2145))+(((-1.0)*r22*x2144))+((r21*x2146)));
evalcond[1]=(((x2138*x2141))+(((-1.0)*x2142*x2145))+(((-1.0)*r02*x2144)));
evalcond[2]=((((-1.0)*r11*sj5*x2144))+(((-1.0)*r12*x2145))+((x2139*x2140)));
evalcond[3]=((-1.0)+((r11*x2146))+(((-1.0)*r12*x2144))+(((-1.0)*x2140*x2145)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2145))+((cj1*sj2))+(((-1.0)*x2141*x2144))+((x2139*x2142)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2145))+(((-1.0)*r21*sj5*x2144))+((x2139*x2143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2147 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2147.valid){
continue;
}
CheckValue<IkReal> x2148=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2147.value)+(((1.5707963267949)*(x2148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2149=IKsin(j4);
IkReal x2150=IKcos(j4);
IkReal x2151=(cj5*r10);
IkReal x2152=(r01*sj5);
IkReal x2153=(cj5*r00);
IkReal x2154=(cj5*r20);
IkReal x2155=((1.0)*x2150);
IkReal x2156=((1.0)*x2149);
IkReal x2157=(sj5*x2149);
evalcond[0]=((((-1.0)*x2154*x2156))+(((-1.0)*r22*x2155))+((r21*x2157)));
evalcond[1]=(((x2149*x2152))+(((-1.0)*r02*x2155))+(((-1.0)*x2153*x2156)));
evalcond[2]=((((-1.0)*r11*sj5*x2155))+(((-1.0)*r12*x2156))+((x2150*x2151)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2155))+(((-1.0)*x2151*x2156))+((r11*x2157)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2156))+(((-1.0)*x2152*x2155))+((x2150*x2153)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2150*x2154))+(((-1.0)*r22*x2156))+(((-1.0)*r21*sj5*x2155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2158=((-1.0)*r00);
IkReal x2160 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2160)==0){
continue;
}
IkReal x2159=pow(x2160,-0.5);
CheckValue<IkReal> x2161 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2158),IKFAST_ATAN2_MAGTHRESH);
if(!x2161.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2161.value));
IkReal gconst91=(r01*x2159);
IkReal gconst92=(x2158*x2159);
CheckValue<IkReal> x2162 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2162.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2162.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2163=((-1.0)*r00);
IkReal x2164=x2159;
CheckValue<IkReal> x2166 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2163),IKFAST_ATAN2_MAGTHRESH);
if(!x2166.valid){
continue;
}
IkReal x2165=((-1.0)*(x2166.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2165;
IkReal gconst90=x2165;
IkReal gconst91=(r01*x2164);
IkReal gconst92=(x2163*x2164);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2167=((1.0)*sj0);
IkReal x2168=((1.0)*cj0);
CheckValue<IkReal> x2169 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2167))+(((-1.0)*r02*x2168)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2168))+(((-1.0)*gconst91*r11*x2167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2169.valid){
continue;
}
CheckValue<IkReal> x2170=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2169.value)+(((1.5707963267949)*(x2170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2171=IKsin(j4);
IkReal x2172=IKcos(j4);
IkReal x2173=((1.0)*cj2);
IkReal x2174=(gconst92*r00);
IkReal x2175=(gconst92*r20);
IkReal x2176=((1.0)*sj0);
IkReal x2177=(gconst92*r10);
IkReal x2178=(cj1*sj2);
IkReal x2179=((1.0)*x2172);
IkReal x2180=(gconst91*x2171);
IkReal x2181=((1.0)*x2171);
evalcond[0]=((((-1.0)*x2175*x2181))+((r21*x2180))+(((-1.0)*r22*x2179)));
evalcond[1]=(cj0+(((-1.0)*x2177*x2181))+((r11*x2180))+(((-1.0)*r12*x2179)));
evalcond[2]=((((-1.0)*r02*x2179))+(((-1.0)*x2176))+((r01*x2180))+(((-1.0)*x2174*x2181)));
evalcond[3]=((((-1.0)*gconst91*r21*x2179))+((x2172*x2175))+((sj1*sj2))+(((-1.0)*r22*x2181))+(((-1.0)*cj1*x2173)));
evalcond[4]=(((x2172*x2174))+(((-1.0)*cj0*sj1*x2173))+(((-1.0)*r02*x2181))+(((-1.0)*cj0*x2178))+(((-1.0)*gconst91*r01*x2179)));
evalcond[5]=((((-1.0)*x2176*x2178))+((x2172*x2177))+(((-1.0)*sj0*sj1*x2173))+(((-1.0)*gconst91*r11*x2179))+(((-1.0)*r12*x2181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2182=((1.0)*gconst92);
CheckValue<IkReal> x2183=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2182)))),-1);
if(!x2183.valid){
continue;
}
CheckValue<IkReal> x2184 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2182))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2183.value)))+(x2184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2185=IKsin(j4);
IkReal x2186=IKcos(j4);
IkReal x2187=((1.0)*cj2);
IkReal x2188=(gconst92*r00);
IkReal x2189=(gconst92*r20);
IkReal x2190=((1.0)*sj0);
IkReal x2191=(gconst92*r10);
IkReal x2192=(cj1*sj2);
IkReal x2193=((1.0)*x2186);
IkReal x2194=(gconst91*x2185);
IkReal x2195=((1.0)*x2185);
evalcond[0]=((((-1.0)*x2189*x2195))+((r21*x2194))+(((-1.0)*r22*x2193)));
evalcond[1]=(cj0+(((-1.0)*x2191*x2195))+((r11*x2194))+(((-1.0)*r12*x2193)));
evalcond[2]=((((-1.0)*x2188*x2195))+(((-1.0)*r02*x2193))+(((-1.0)*x2190))+((r01*x2194)));
evalcond[3]=(((x2186*x2189))+(((-1.0)*gconst91*r21*x2193))+((sj1*sj2))+(((-1.0)*r22*x2195))+(((-1.0)*cj1*x2187)));
evalcond[4]=(((x2186*x2188))+(((-1.0)*cj0*sj1*x2187))+(((-1.0)*r02*x2195))+(((-1.0)*cj0*x2192))+(((-1.0)*gconst91*r01*x2193)));
evalcond[5]=((((-1.0)*sj0*sj1*x2187))+((x2186*x2191))+(((-1.0)*r12*x2195))+(((-1.0)*x2190*x2192))+(((-1.0)*gconst91*r11*x2193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2196=((-1.0)*r01);
IkReal x2198 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2198)==0){
continue;
}
IkReal x2197=pow(x2198,-0.5);
CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal(x2196),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2199.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2199.value))));
IkReal gconst94=(x2196*x2197);
IkReal gconst95=((1.0)*r00*x2197);
CheckValue<IkReal> x2200 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2200.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2200.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2201=((-1.0)*r01);
CheckValue<IkReal> x2204 = IKatan2WithCheck(IkReal(x2201),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2204.valid){
continue;
}
IkReal x2202=((1.0)*(x2204.value));
IkReal x2203=x2197;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2202)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2202)));
IkReal gconst94=(x2201*x2203);
IkReal gconst95=((1.0)*r00*x2203);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2205=((-1.0)*r01);
CheckValue<IkReal> x2208 = IKatan2WithCheck(IkReal(x2205),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2208.valid){
continue;
}
IkReal x2206=((1.0)*(x2208.value));
IkReal x2207=x2197;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2206)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2206)));
IkReal gconst94=(x2205*x2207);
IkReal gconst95=((1.0)*r00*x2207);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2209=((-1.0)*r01);
CheckValue<IkReal> x2212 = IKatan2WithCheck(IkReal(x2209),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2212.valid){
continue;
}
IkReal x2210=((1.0)*(x2212.value));
IkReal x2211=x2197;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2210)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2210)));
IkReal gconst94=(x2209*x2211);
IkReal gconst95=((1.0)*r00*x2211);
IkReal x2213=r02*r02;
IkReal x2214=(r12*sj0);
IkReal x2215=((1.0)*cj0);
IkReal x2216=x2197;
j4eval[0]=((IKabs((((r02*x2214*x2216))+(((-1.0)*x2215*x2216))+((cj0*x2213*x2216)))))+(IKabs(((((-1.0)*x2214))+(((-1.0)*r02*x2215))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2217=((1.0)*sj0);
IkReal x2218=((1.0)*cj0);
CheckValue<IkReal> x2219 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2217))+(((-1.0)*r02*x2218)))),IkReal(((((-1.0)*gconst94*r01*x2218))+((gconst95*r10*sj0))+((cj0*gconst95*r00))+(((-1.0)*gconst94*r11*x2217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2219.valid){
continue;
}
CheckValue<IkReal> x2220=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2219.value)+(((1.5707963267949)*(x2220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2221=IKsin(j4);
IkReal x2222=IKcos(j4);
IkReal x2223=(gconst94*r11);
IkReal x2224=((1.0)*cj2);
IkReal x2225=(gconst94*r21);
IkReal x2226=((1.0)*sj0);
IkReal x2227=(gconst94*r01);
IkReal x2228=(cj1*sj2);
IkReal x2229=((1.0)*x2222);
IkReal x2230=(gconst95*x2222);
IkReal x2231=((1.0)*x2221);
IkReal x2232=(gconst95*x2231);
evalcond[0]=((((-1.0)*r20*x2232))+(((-1.0)*r22*x2229))+((x2221*x2225)));
evalcond[1]=((((-1.0)*r10*x2232))+cj0+(((-1.0)*r12*x2229))+((x2221*x2223)));
evalcond[2]=((((-1.0)*r02*x2229))+(((-1.0)*r00*x2232))+(((-1.0)*x2226))+((x2221*x2227)));
evalcond[3]=((((-1.0)*x2225*x2229))+((sj1*sj2))+((r20*x2230))+(((-1.0)*r22*x2231))+(((-1.0)*cj1*x2224)));
evalcond[4]=((((-1.0)*x2227*x2229))+(((-1.0)*r02*x2231))+(((-1.0)*cj0*x2228))+(((-1.0)*cj0*sj1*x2224))+((r00*x2230)));
evalcond[5]=((((-1.0)*x2226*x2228))+(((-1.0)*sj0*sj1*x2224))+((r10*x2230))+(((-1.0)*x2223*x2229))+(((-1.0)*r12*x2231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2233=((1.0)*gconst95);
CheckValue<IkReal> x2234=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2233)))),-1);
if(!x2234.valid){
continue;
}
CheckValue<IkReal> x2235 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2233)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2234.value)))+(x2235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2236=IKsin(j4);
IkReal x2237=IKcos(j4);
IkReal x2238=(gconst94*r11);
IkReal x2239=((1.0)*cj2);
IkReal x2240=(gconst94*r21);
IkReal x2241=((1.0)*sj0);
IkReal x2242=(gconst94*r01);
IkReal x2243=(cj1*sj2);
IkReal x2244=((1.0)*x2237);
IkReal x2245=(gconst95*x2237);
IkReal x2246=((1.0)*x2236);
IkReal x2247=(gconst95*x2246);
evalcond[0]=(((x2236*x2240))+(((-1.0)*r22*x2244))+(((-1.0)*r20*x2247)));
evalcond[1]=(cj0+(((-1.0)*r10*x2247))+((x2236*x2238))+(((-1.0)*r12*x2244)));
evalcond[2]=(((x2236*x2242))+(((-1.0)*r02*x2244))+(((-1.0)*r00*x2247))+(((-1.0)*x2241)));
evalcond[3]=((((-1.0)*cj1*x2239))+(((-1.0)*r22*x2246))+((sj1*sj2))+((r20*x2245))+(((-1.0)*x2240*x2244)));
evalcond[4]=((((-1.0)*r02*x2246))+(((-1.0)*cj0*x2243))+((r00*x2245))+(((-1.0)*x2242*x2244))+(((-1.0)*cj0*sj1*x2239)));
evalcond[5]=(((r10*x2245))+(((-1.0)*sj0*sj1*x2239))+(((-1.0)*x2241*x2243))+(((-1.0)*r12*x2246))+(((-1.0)*x2238*x2244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2248=((1.0)*gconst95);
CheckValue<IkReal> x2249=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2248)))),-1);
if(!x2249.valid){
continue;
}
CheckValue<IkReal> x2250 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2248))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2249.value)))+(x2250.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2251=IKsin(j4);
IkReal x2252=IKcos(j4);
IkReal x2253=(gconst94*r11);
IkReal x2254=((1.0)*cj2);
IkReal x2255=(gconst94*r21);
IkReal x2256=((1.0)*sj0);
IkReal x2257=(gconst94*r01);
IkReal x2258=(cj1*sj2);
IkReal x2259=((1.0)*x2252);
IkReal x2260=(gconst95*x2252);
IkReal x2261=((1.0)*x2251);
IkReal x2262=(gconst95*x2261);
evalcond[0]=((((-1.0)*r22*x2259))+(((-1.0)*r20*x2262))+((x2251*x2255)));
evalcond[1]=(cj0+(((-1.0)*r12*x2259))+(((-1.0)*r10*x2262))+((x2251*x2253)));
evalcond[2]=((((-1.0)*r00*x2262))+(((-1.0)*r02*x2259))+(((-1.0)*x2256))+((x2251*x2257)));
evalcond[3]=((((-1.0)*x2255*x2259))+((sj1*sj2))+(((-1.0)*r22*x2261))+((r20*x2260))+(((-1.0)*cj1*x2254)));
evalcond[4]=(((r00*x2260))+(((-1.0)*x2257*x2259))+(((-1.0)*cj0*x2258))+(((-1.0)*cj0*sj1*x2254))+(((-1.0)*r02*x2261)));
evalcond[5]=((((-1.0)*sj0*sj1*x2254))+(((-1.0)*x2256*x2258))+(((-1.0)*x2253*x2259))+((r10*x2260))+(((-1.0)*r12*x2261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2263=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2263;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2264=((1.0)*cj5);
IkReal x2265=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2264)));
j4eval[0]=x2265;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2264))))));
j4eval[2]=IKsign(x2265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2266=cj5*cj5;
IkReal x2267=r01*r01;
IkReal x2268=(r01*sj5);
IkReal x2269=(cj5*r00);
IkReal x2270=((((-1.0)*x2266*(r00*r00)))+(((-1.0)*(r02*r02)))+((x2266*x2267))+(((2.0)*x2268*x2269))+(((-1.0)*x2267)));
j4eval[0]=x2270;
j4eval[1]=IKsign(x2270);
j4eval[2]=((IKabs(r02))+(IKabs((x2269+(((-1.0)*x2268))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2271=cj5*cj5;
IkReal x2272=r01*r01;
IkReal x2273=(r01*sj5);
IkReal x2274=(cj5*r00);
CheckValue<IkReal> x2275 = IKatan2WithCheck(IkReal((x2274+(((-1.0)*x2273)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2275.valid){
continue;
}
CheckValue<IkReal> x2276=IKPowWithIntegerCheck(IKsign(((((2.0)*x2273*x2274))+(((-1.0)*(r02*r02)))+(((-1.0)*x2272))+(((-1.0)*x2271*(r00*r00)))+((x2271*x2272)))),-1);
if(!x2276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2275.value)+(((1.5707963267949)*(x2276.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2277=IKsin(j4);
IkReal x2278=IKcos(j4);
IkReal x2279=(cj5*r10);
IkReal x2280=(r01*sj5);
IkReal x2281=((1.0)*cj2);
IkReal x2282=(cj5*r00);
IkReal x2283=(cj5*r20);
IkReal x2284=((1.0)*x2278);
IkReal x2285=((1.0)*x2277);
IkReal x2286=(sj5*x2277);
evalcond[0]=(((r21*x2286))+(((-1.0)*r22*x2284))+(((-1.0)*x2283*x2285)));
evalcond[1]=(((r11*x2286))+(((-1.0)*r12*x2284))+(((-1.0)*x2279*x2285)));
evalcond[2]=((((-1.0)*r02*x2285))+(((-1.0)*x2280*x2284))+((x2278*x2282)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2284))+(((-1.0)*x2282*x2285))+((x2277*x2280)));
evalcond[4]=((((-1.0)*r21*sj5*x2284))+((sj1*sj2))+((x2278*x2283))+(((-1.0)*cj1*x2281))+(((-1.0)*r22*x2285)));
evalcond[5]=((((-1.0)*sj1*x2281))+(((-1.0)*r12*x2285))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2284))+((x2278*x2279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2287=((1.0)*cj5);
CheckValue<IkReal> x2288=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2287)))),-1);
if(!x2288.valid){
continue;
}
CheckValue<IkReal> x2289 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2288.value)))+(x2289.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2290=IKsin(j4);
IkReal x2291=IKcos(j4);
IkReal x2292=(cj5*r10);
IkReal x2293=(r01*sj5);
IkReal x2294=((1.0)*cj2);
IkReal x2295=(cj5*r00);
IkReal x2296=(cj5*r20);
IkReal x2297=((1.0)*x2291);
IkReal x2298=((1.0)*x2290);
IkReal x2299=(sj5*x2290);
evalcond[0]=(((r21*x2299))+(((-1.0)*x2296*x2298))+(((-1.0)*r22*x2297)));
evalcond[1]=((((-1.0)*x2292*x2298))+(((-1.0)*r12*x2297))+((r11*x2299)));
evalcond[2]=((((-1.0)*x2293*x2297))+(((-1.0)*r02*x2298))+((x2291*x2295)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2297))+(((-1.0)*x2295*x2298))+((x2290*x2293)));
evalcond[4]=(((x2291*x2296))+((sj1*sj2))+(((-1.0)*r21*sj5*x2297))+(((-1.0)*cj1*x2294))+(((-1.0)*r22*x2298)));
evalcond[5]=((((-1.0)*r11*sj5*x2297))+((x2291*x2292))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2298))+(((-1.0)*sj1*x2294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2300=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2300.valid){
continue;
}
CheckValue<IkReal> x2301 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2300.value)))+(x2301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2302=IKsin(j4);
IkReal x2303=IKcos(j4);
IkReal x2304=(cj5*r10);
IkReal x2305=(r01*sj5);
IkReal x2306=((1.0)*cj2);
IkReal x2307=(cj5*r00);
IkReal x2308=(cj5*r20);
IkReal x2309=((1.0)*x2303);
IkReal x2310=((1.0)*x2302);
IkReal x2311=(sj5*x2302);
evalcond[0]=((((-1.0)*r22*x2309))+((r21*x2311))+(((-1.0)*x2308*x2310)));
evalcond[1]=((((-1.0)*x2304*x2310))+((r11*x2311))+(((-1.0)*r12*x2309)));
evalcond[2]=(((x2303*x2307))+(((-1.0)*r02*x2310))+(((-1.0)*x2305*x2309)));
evalcond[3]=((-1.0)+(((-1.0)*x2307*x2310))+(((-1.0)*r02*x2309))+((x2302*x2305)));
evalcond[4]=((((-1.0)*r22*x2310))+((x2303*x2308))+((sj1*sj2))+(((-1.0)*r21*sj5*x2309))+(((-1.0)*cj1*x2306)));
evalcond[5]=((((-1.0)*sj1*x2306))+(((-1.0)*r11*sj5*x2309))+((x2303*x2304))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2312=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2312;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2312);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2313=((1.0)*cj5);
IkReal x2314=((((-1.0)*r21*x2313))+(((-1.0)*r20*sj5)));
j4eval[0]=x2314;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2313))+((r11*sj5))))));
j4eval[2]=IKsign(x2314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2315=cj5*cj5;
IkReal x2316=r01*r01;
IkReal x2317=(cj5*r00);
IkReal x2318=(r01*sj5);
IkReal x2319=(((x2315*(r00*r00)))+x2316+(((-2.0)*x2317*x2318))+(r02*r02)+(((-1.0)*x2315*x2316)));
j4eval[0]=x2319;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2318))+x2317))));
j4eval[2]=IKsign(x2319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2320=cj5*cj5;
IkReal x2321=r01*r01;
IkReal x2322=(r01*sj5);
IkReal x2323=(cj5*r00);
CheckValue<IkReal> x2324 = IKatan2WithCheck(IkReal((x2323+(((-1.0)*x2322)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2324.valid){
continue;
}
CheckValue<IkReal> x2325=IKPowWithIntegerCheck(IKsign((x2321+(((-1.0)*x2320*x2321))+(((-2.0)*x2322*x2323))+((x2320*(r00*r00)))+(r02*r02))),-1);
if(!x2325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2324.value)+(((1.5707963267949)*(x2325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2326=IKsin(j4);
IkReal x2327=IKcos(j4);
IkReal x2328=(cj5*r10);
IkReal x2329=(r01*sj5);
IkReal x2330=(cj5*r00);
IkReal x2331=(cj5*r20);
IkReal x2332=((1.0)*x2327);
IkReal x2333=((1.0)*x2326);
IkReal x2334=(sj5*x2326);
evalcond[0]=(((r21*x2334))+(((-1.0)*r22*x2332))+(((-1.0)*x2331*x2333)));
evalcond[1]=((((-1.0)*x2328*x2333))+((r11*x2334))+(((-1.0)*r12*x2332)));
evalcond[2]=(((x2327*x2330))+(((-1.0)*r02*x2333))+(((-1.0)*x2329*x2332)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2332))+((x2326*x2329))+(((-1.0)*x2330*x2333)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2327*x2328))+(((-1.0)*r11*sj5*x2332))+(((-1.0)*r12*x2333)));
evalcond[5]=((((-1.0)*r22*x2333))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2327*x2331))+(((-1.0)*r21*sj5*x2332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2335=((1.0)*cj5);
CheckValue<IkReal> x2336=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2335))+(((-1.0)*r20*sj5)))),-1);
if(!x2336.valid){
continue;
}
CheckValue<IkReal> x2337 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2335))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2336.value)))+(x2337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2338=IKsin(j4);
IkReal x2339=IKcos(j4);
IkReal x2340=(cj5*r10);
IkReal x2341=(r01*sj5);
IkReal x2342=(cj5*r00);
IkReal x2343=(cj5*r20);
IkReal x2344=((1.0)*x2339);
IkReal x2345=((1.0)*x2338);
IkReal x2346=(sj5*x2338);
evalcond[0]=((((-1.0)*r22*x2344))+(((-1.0)*x2343*x2345))+((r21*x2346)));
evalcond[1]=((((-1.0)*x2340*x2345))+((r11*x2346))+(((-1.0)*r12*x2344)));
evalcond[2]=((((-1.0)*x2341*x2344))+(((-1.0)*r02*x2345))+((x2339*x2342)));
evalcond[3]=((1.0)+((x2338*x2341))+(((-1.0)*r02*x2344))+(((-1.0)*x2342*x2345)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x2344))+((x2339*x2340))+(((-1.0)*r12*x2345)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2345))+((x2339*x2343))+(((-1.0)*r21*sj5*x2344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2347 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2347.valid){
continue;
}
CheckValue<IkReal> x2348=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2347.value)+(((1.5707963267949)*(x2348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2349=IKsin(j4);
IkReal x2350=IKcos(j4);
IkReal x2351=(cj5*r10);
IkReal x2352=(r01*sj5);
IkReal x2353=(cj5*r00);
IkReal x2354=(cj5*r20);
IkReal x2355=((1.0)*x2350);
IkReal x2356=((1.0)*x2349);
IkReal x2357=(sj5*x2349);
evalcond[0]=((((-1.0)*x2354*x2356))+(((-1.0)*r22*x2355))+((r21*x2357)));
evalcond[1]=(((r11*x2357))+(((-1.0)*r12*x2355))+(((-1.0)*x2351*x2356)));
evalcond[2]=(((x2350*x2353))+(((-1.0)*x2352*x2355))+(((-1.0)*r02*x2356)));
evalcond[3]=((1.0)+(((-1.0)*x2353*x2356))+(((-1.0)*r02*x2355))+((x2349*x2352)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2355))+((cj1*sj2))+((x2350*x2351))+(((-1.0)*r12*x2356)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2350*x2354))+(((-1.0)*r22*x2356))+(((-1.0)*r21*sj5*x2355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2358=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2358);
rxp1_1=(px*r21);
rxp1_2=(r11*x2358);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2359=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2359);
rxp1_1=(px*r21);
rxp1_2=(r11*x2359);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2360=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2360);
rxp1_1=(px*r21);
rxp1_2=(r11*x2360);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2363=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2363.valid){
continue;
}
IkReal x2361=x2363.value;
IkReal x2362=(sj0*x2361);
cj4array[0]=(((cj1*sj2*x2362))+((cj2*sj1*x2362)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2364=IKsin(j4);
IkReal x2365=IKcos(j4);
IkReal x2366=(cj5*r20);
IkReal x2367=(r21*sj5);
IkReal x2368=((1.0)*x2364);
IkReal x2369=((1.0)*x2365);
evalcond[0]=((-1.0)*r02*x2364);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2369)));
evalcond[2]=(((x2364*x2367))+(((-1.0)*x2366*x2368)));
evalcond[3]=(((r11*sj5*x2364))+(((-1.0)*cj5*r10*x2368)));
evalcond[4]=(((x2365*x2366))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2367*x2369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2371=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2371.valid){
continue;
}
IkReal x2370=x2371.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2370))+((cj1*cj2*x2370)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2372=IKsin(j4);
IkReal x2373=IKcos(j4);
IkReal x2374=(r11*sj5);
IkReal x2375=((1.0)*sj0);
IkReal x2376=((1.0)*x2373);
IkReal x2377=((1.0)*cj5*x2372);
evalcond[0]=((-1.0)*r02*x2372);
evalcond[1]=((((-1.0)*r02*x2376))+(((-1.0)*x2375)));
evalcond[2]=((((-1.0)*r20*x2377))+((r21*sj5*x2372)));
evalcond[3]=(((x2372*x2374))+(((-1.0)*r10*x2377)));
evalcond[4]=((((-1.0)*cj1*sj2*x2375))+(((-1.0)*x2374*x2376))+(((-1.0)*cj2*sj1*x2375))+((cj5*r10*x2373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2378=IKPowWithIntegerCheck(r02,-1);
if(!x2378.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2378.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2379=IKsin(j4);
IkReal x2380=IKcos(j4);
IkReal x2381=((1.0)*sj0);
IkReal x2382=(cj5*x2380);
IkReal x2383=(sj5*x2379);
IkReal x2384=((1.0)*sj5*x2380);
IkReal x2385=((1.0)*cj5*x2379);
evalcond[0]=((-1.0)*r02*x2379);
evalcond[1]=((((-1.0)*r20*x2385))+((r21*x2383)));
evalcond[2]=((((-1.0)*r10*x2385))+((r11*x2383)));
evalcond[3]=((((-1.0)*r21*x2384))+((r20*x2382))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj1*sj2*x2381))+(((-1.0)*cj2*sj1*x2381))+((r10*x2382))+(((-1.0)*r11*x2384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2386=((1.0)*sj0);
IkReal x2387=((1.0)*cj0);
CheckValue<IkReal> x2388 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2386))+(((-1.0)*r02*x2387)))),IkReal(((((-1.0)*r11*sj5*x2386))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2388.valid){
continue;
}
CheckValue<IkReal> x2389=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2388.value)+(((1.5707963267949)*(x2389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2390=IKsin(j4);
IkReal x2391=IKcos(j4);
IkReal x2392=(cj5*r10);
IkReal x2393=(r01*sj5);
IkReal x2394=((1.0)*cj2);
IkReal x2395=(cj5*r00);
IkReal x2396=((1.0)*sj0);
IkReal x2397=(cj5*r20);
IkReal x2398=(cj1*sj2);
IkReal x2399=((1.0)*x2391);
IkReal x2400=((1.0)*x2390);
IkReal x2401=(sj5*x2390);
evalcond[0]=((((-1.0)*x2397*x2400))+(((-1.0)*r22*x2399))+((r21*x2401)));
evalcond[1]=(cj0+((r11*x2401))+(((-1.0)*x2392*x2400))+(((-1.0)*r12*x2399)));
evalcond[2]=((((-1.0)*r02*x2399))+((x2390*x2393))+(((-1.0)*x2395*x2400))+(((-1.0)*x2396)));
evalcond[3]=((((-1.0)*cj1*x2394))+(((-1.0)*r21*sj5*x2399))+((sj1*sj2))+((x2391*x2397))+(((-1.0)*r22*x2400)));
evalcond[4]=((((-1.0)*cj0*sj1*x2394))+(((-1.0)*r02*x2400))+((x2391*x2395))+(((-1.0)*cj0*x2398))+(((-1.0)*x2393*x2399)));
evalcond[5]=((((-1.0)*x2396*x2398))+((x2391*x2392))+(((-1.0)*r12*x2400))+(((-1.0)*r11*sj5*x2399))+(((-1.0)*sj0*sj1*x2394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2402=((1.0)*cj5);
CheckValue<IkReal> x2403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2402)))),-1);
if(!x2403.valid){
continue;
}
CheckValue<IkReal> x2404 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2403.value)))+(x2404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2405=IKsin(j4);
IkReal x2406=IKcos(j4);
IkReal x2407=(cj5*r10);
IkReal x2408=(r01*sj5);
IkReal x2409=((1.0)*cj2);
IkReal x2410=(cj5*r00);
IkReal x2411=((1.0)*sj0);
IkReal x2412=(cj5*r20);
IkReal x2413=(cj1*sj2);
IkReal x2414=((1.0)*x2406);
IkReal x2415=((1.0)*x2405);
IkReal x2416=(sj5*x2405);
evalcond[0]=(((r21*x2416))+(((-1.0)*x2412*x2415))+(((-1.0)*r22*x2414)));
evalcond[1]=(((r11*x2416))+cj0+(((-1.0)*x2407*x2415))+(((-1.0)*r12*x2414)));
evalcond[2]=((((-1.0)*r02*x2414))+(((-1.0)*x2411))+((x2405*x2408))+(((-1.0)*x2410*x2415)));
evalcond[3]=(((x2406*x2412))+((sj1*sj2))+(((-1.0)*cj1*x2409))+(((-1.0)*r21*sj5*x2414))+(((-1.0)*r22*x2415)));
evalcond[4]=((((-1.0)*cj0*x2413))+(((-1.0)*x2408*x2414))+((x2406*x2410))+(((-1.0)*r02*x2415))+(((-1.0)*cj0*sj1*x2409)));
evalcond[5]=((((-1.0)*sj0*sj1*x2409))+(((-1.0)*r12*x2415))+(((-1.0)*x2411*x2413))+(((-1.0)*r11*sj5*x2414))+((x2406*x2407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2417=((1.0)*cj5);
CheckValue<IkReal> x2418 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2417))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2418.valid){
continue;
}
CheckValue<IkReal> x2419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2417)))),-1);
if(!x2419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2418.value)+(((1.5707963267949)*(x2419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2420=IKsin(j4);
IkReal x2421=IKcos(j4);
IkReal x2422=(cj5*r10);
IkReal x2423=(r01*sj5);
IkReal x2424=((1.0)*cj2);
IkReal x2425=(cj5*r00);
IkReal x2426=((1.0)*sj0);
IkReal x2427=(cj5*r20);
IkReal x2428=(cj1*sj2);
IkReal x2429=((1.0)*x2421);
IkReal x2430=((1.0)*x2420);
IkReal x2431=(sj5*x2420);
evalcond[0]=((((-1.0)*x2427*x2430))+(((-1.0)*r22*x2429))+((r21*x2431)));
evalcond[1]=(((r11*x2431))+cj0+(((-1.0)*r12*x2429))+(((-1.0)*x2422*x2430)));
evalcond[2]=((((-1.0)*x2425*x2430))+(((-1.0)*r02*x2429))+((x2420*x2423))+(((-1.0)*x2426)));
evalcond[3]=((((-1.0)*r22*x2430))+((sj1*sj2))+((x2421*x2427))+(((-1.0)*r21*sj5*x2429))+(((-1.0)*cj1*x2424)));
evalcond[4]=((((-1.0)*x2423*x2429))+(((-1.0)*cj0*sj1*x2424))+(((-1.0)*cj0*x2428))+(((-1.0)*r02*x2430))+((x2421*x2425)));
evalcond[5]=((((-1.0)*r11*sj5*x2429))+(((-1.0)*sj0*sj1*x2424))+(((-1.0)*r12*x2430))+((x2421*x2422))+(((-1.0)*x2426*x2428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2432=cj5*cj5;
IkReal x2433=r21*r21;
IkReal x2434=(sj1*sj2);
IkReal x2435=(r21*sj5);
IkReal x2436=(cj1*cj2);
IkReal x2437=(cj5*r20);
CheckValue<IkReal> x2438=IKPowWithIntegerCheck(IKsign((x2433+(r22*r22)+(((-2.0)*x2435*x2437))+(((-1.0)*x2432*x2433))+((x2432*(r20*r20))))),-1);
if(!x2438.valid){
continue;
}
CheckValue<IkReal> x2439 = IKatan2WithCheck(IkReal((((r22*x2434))+(((-1.0)*r22*x2436)))),IkReal(((((-1.0)*x2435*x2436))+((x2436*x2437))+((x2434*x2435))+(((-1.0)*x2434*x2437)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2438.value)))+(x2439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2440=IKsin(j4);
IkReal x2441=IKcos(j4);
IkReal x2442=(r21*sj5);
IkReal x2443=(cj5*r20);
IkReal x2444=((1.0)*x2441);
IkReal x2445=((1.0)*x2440);
evalcond[0]=((((-1.0)*x2443*x2445))+((x2440*x2442))+(((-1.0)*r22*x2444)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2445))+((x2441*x2443))+(((-1.0)*x2442*x2444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2446=(cj5*sj4);
IkReal x2447=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x2447))+(((-1.0)*r00*x2446)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2447))+((r10*x2446))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x2447))+(((-1.0)*r00*x2446))))+IKsqr(((((-1.0)*r11*x2447))+((r10*x2446))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x2447))+(((-1.0)*r00*x2446))), ((((-1.0)*r11*x2447))+((r10*x2446))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2448=IKcos(j0);
IkReal x2449=IKsin(j0);
IkReal x2450=(cj4*cj5);
IkReal x2451=(cj5*r01);
IkReal x2452=(r11*sj5);
IkReal x2453=((0.1157)*sj5);
IkReal x2454=((1.0)*sj4);
IkReal x2455=((1.0)*cj2);
IkReal x2456=((0.5723)*sj2);
IkReal x2457=(cj5*r11);
IkReal x2458=((1.0)*cj4);
IkReal x2459=((0.5723)*cj2);
IkReal x2460=(r01*sj5);
IkReal x2461=((1.0)*cj1*sj2);
IkReal x2462=(sj1*x2448);
IkReal x2463=(cj1*x2448);
IkReal x2464=(sj1*x2449);
IkReal x2465=(cj1*x2449);
evalcond[0]=(x2448+(((-1.0)*cj5*r10*x2454))+((sj4*x2452))+(((-1.0)*r12*x2458)));
evalcond[1]=((((-1.0)*cj5*r00*x2454))+(((-1.0)*x2449))+(((-1.0)*r02*x2458))+((sj4*x2460)));
evalcond[2]=(((r00*sj5))+x2451+(((-1.0)*x2455*x2463))+((sj2*x2462)));
evalcond[3]=(x2457+((r10*sj5))+(((-1.0)*x2455*x2465))+((sj2*x2464)));
evalcond[4]=((((-1.0)*x2448*x2461))+((r00*x2450))+(((-1.0)*x2455*x2462))+(((-1.0)*r02*x2454))+(((-1.0)*x2458*x2460)));
evalcond[5]=((((-1.0)*x2452*x2458))+(((-1.0)*x2449*x2461))+((r10*x2450))+(((-1.0)*x2455*x2464))+(((-1.0)*r12*x2454)));
evalcond[6]=(((x2459*x2463))+(((-0.16394)*x2449))+(((0.612)*x2463))+(((-0.1157)*x2451))+(((-1.0)*x2456*x2462))+(((-1.0)*px))+(((-1.0)*r00*x2453)));
evalcond[7]=(((x2459*x2465))+(((-1.0)*r10*x2453))+(((0.612)*x2465))+(((0.16394)*x2448))+(((-0.1157)*x2457))+(((-1.0)*x2456*x2464))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2466=((1.0)*cj5);
IkReal x2467=((1.0)*sj5);
CheckValue<IkReal> x2468=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2468.valid){
continue;
}
CheckValue<IkReal> x2469 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2466))+(((-1.0)*r10*x2467)))),IkReal(((((-1.0)*r00*x2467))+(((-1.0)*r01*x2466)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2469.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2468.value)))+(x2469.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2470=IKcos(j0);
IkReal x2471=IKsin(j0);
IkReal x2472=(cj5*r01);
IkReal x2473=(sj1*sj2);
IkReal x2474=((0.1157)*sj5);
IkReal x2475=(cj5*r11);
IkReal x2476=(cj1*cj2);
IkReal x2477=((0.5723)*x2471);
IkReal x2478=(cj1*x2471);
IkReal x2479=((0.5723)*x2470);
evalcond[0]=(((r00*sj5))+x2472+(((-1.0)*x2470*x2476))+((x2470*x2473)));
evalcond[1]=(((x2471*x2473))+x2475+((r10*sj5))+(((-1.0)*x2471*x2476)));
evalcond[2]=((((-0.16394)*x2471))+(((-1.0)*r00*x2474))+(((0.612)*cj1*x2470))+(((-0.1157)*x2472))+(((-1.0)*x2473*x2479))+(((-1.0)*px))+((x2476*x2479)));
evalcond[3]=((((-0.1157)*x2475))+(((-1.0)*x2473*x2477))+(((0.16394)*x2470))+(((-1.0)*py))+(((0.612)*x2478))+(((-1.0)*r10*x2474))+((x2476*x2477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2480=((1.0)*cj5);
IkReal x2481=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2480)));
j4eval[0]=x2481;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x2480))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2482=((1.0)*cj5);
IkReal x2483=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2482)));
j4eval[0]=x2483;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2482))))));
j4eval[2]=IKsign(x2483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2484=((1.0)*sj0);
IkReal x2485=((1.0)*cj0);
IkReal x2486=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2486;
j4eval[1]=((IKabs(((((-1.0)*r02*x2485))+(((-1.0)*r12*x2484)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x2484))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2485))))));
j4eval[2]=IKsign(x2486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2487=((-1.0)*r20);
IkReal x2489 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2489)==0){
continue;
}
IkReal x2488=pow(x2489,-0.5);
CheckValue<IkReal> x2490 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2487),IKFAST_ATAN2_MAGTHRESH);
if(!x2490.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2490.value));
IkReal gconst79=(r21*x2488);
IkReal gconst80=(x2487*x2488);
CheckValue<IkReal> x2491 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2491.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2491.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2492=((-1.0)*r20);
IkReal x2493=x2488;
CheckValue<IkReal> x2495 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2492),IKFAST_ATAN2_MAGTHRESH);
if(!x2495.valid){
continue;
}
IkReal x2494=((-1.0)*(x2495.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2494;
IkReal gconst78=x2494;
IkReal gconst79=(r21*x2493);
IkReal gconst80=(x2492*x2493);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2496=((-1.0)*r20);
IkReal x2497=x2488;
CheckValue<IkReal> x2499 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2496),IKFAST_ATAN2_MAGTHRESH);
if(!x2499.valid){
continue;
}
IkReal x2498=((-1.0)*(x2499.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2498;
IkReal gconst78=x2498;
IkReal gconst79=(r21*x2497);
IkReal gconst80=(x2496*x2497);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2500=((-1.0)*r20);
IkReal x2501=x2488;
CheckValue<IkReal> x2503 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2500),IKFAST_ATAN2_MAGTHRESH);
if(!x2503.valid){
continue;
}
IkReal x2502=((-1.0)*(x2503.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2502;
IkReal gconst78=x2502;
IkReal gconst79=(r21*x2501);
IkReal gconst80=(x2500*x2501);
IkReal x2504=r22*r22;
CheckValue<IkReal> x2507=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2504))),-1);
if(!x2507.valid){
continue;
}
IkReal x2505=x2507.value;
IkReal x2506=(((x2505*(r21*r21*r21*r21)))+x2504+(((2.0)*x2505*(r20*r20)*(r21*r21)))+((x2505*(r20*r20*r20*r20))));
j4eval[0]=x2506;
j4eval[1]=IKsign(x2506);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2508=(sj1*sj2);
IkReal x2509=(gconst80*r20);
IkReal x2510=(gconst79*r21);
IkReal x2511=(cj1*cj2);
CheckValue<IkReal> x2512=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2509*x2509)+(x2510*x2510)+(((-2.0)*x2509*x2510)))),-1);
if(!x2512.valid){
continue;
}
CheckValue<IkReal> x2513 = IKatan2WithCheck(IkReal((((r22*x2508))+(((-1.0)*r22*x2511)))),IkReal(((((-1.0)*x2510*x2511))+((x2508*x2510))+(((-1.0)*x2508*x2509))+((x2509*x2511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2512.value)))+(x2513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2514=IKsin(j4);
IkReal x2515=IKcos(j4);
IkReal x2516=(gconst79*r01);
IkReal x2517=(gconst79*r21);
IkReal x2518=((1.0)*cj2);
IkReal x2519=(gconst79*r11);
IkReal x2520=((1.0)*sj0);
IkReal x2521=(cj1*sj2);
IkReal x2522=((1.0)*x2515);
IkReal x2523=(gconst80*x2515);
IkReal x2524=((1.0)*x2514);
IkReal x2525=(gconst80*x2524);
evalcond[0]=(((x2514*x2517))+(((-1.0)*r20*x2525))+(((-1.0)*r22*x2522)));
evalcond[1]=(cj0+(((-1.0)*r12*x2522))+((x2514*x2519))+(((-1.0)*r10*x2525)));
evalcond[2]=(((x2514*x2516))+(((-1.0)*r00*x2525))+(((-1.0)*r02*x2522))+(((-1.0)*x2520)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2517*x2522))+((r20*x2523))+(((-1.0)*cj1*x2518))+(((-1.0)*r22*x2524)));
evalcond[4]=((((-1.0)*x2516*x2522))+(((-1.0)*cj0*sj1*x2518))+((r00*x2523))+(((-1.0)*cj0*x2521))+(((-1.0)*r02*x2524)));
evalcond[5]=((((-1.0)*x2520*x2521))+(((-1.0)*sj0*sj1*x2518))+(((-1.0)*r12*x2524))+(((-1.0)*x2519*x2522))+((r10*x2523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2526=((1.0)*gconst80);
CheckValue<IkReal> x2527 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2526))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2527.valid){
continue;
}
CheckValue<IkReal> x2528=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2526))+(((-1.0)*gconst79*r10)))),-1);
if(!x2528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2527.value)+(((1.5707963267949)*(x2528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2529=IKsin(j4);
IkReal x2530=IKcos(j4);
IkReal x2531=(gconst79*r01);
IkReal x2532=(gconst79*r21);
IkReal x2533=((1.0)*cj2);
IkReal x2534=(gconst79*r11);
IkReal x2535=((1.0)*sj0);
IkReal x2536=(cj1*sj2);
IkReal x2537=((1.0)*x2530);
IkReal x2538=(gconst80*x2530);
IkReal x2539=((1.0)*x2529);
IkReal x2540=(gconst80*x2539);
evalcond[0]=((((-1.0)*r22*x2537))+(((-1.0)*r20*x2540))+((x2529*x2532)));
evalcond[1]=((((-1.0)*r10*x2540))+cj0+(((-1.0)*r12*x2537))+((x2529*x2534)));
evalcond[2]=((((-1.0)*r02*x2537))+(((-1.0)*x2535))+(((-1.0)*r00*x2540))+((x2529*x2531)));
evalcond[3]=(((r20*x2538))+((sj1*sj2))+(((-1.0)*r22*x2539))+(((-1.0)*x2532*x2537))+(((-1.0)*cj1*x2533)));
evalcond[4]=((((-1.0)*r02*x2539))+(((-1.0)*x2531*x2537))+(((-1.0)*cj0*sj1*x2533))+((r00*x2538))+(((-1.0)*cj0*x2536)));
evalcond[5]=(((r10*x2538))+(((-1.0)*x2534*x2537))+(((-1.0)*x2535*x2536))+(((-1.0)*sj0*sj1*x2533))+(((-1.0)*r12*x2539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2541=((1.0)*gconst80);
CheckValue<IkReal> x2542 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2541))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2542.valid){
continue;
}
CheckValue<IkReal> x2543=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x2541)))),-1);
if(!x2543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2542.value)+(((1.5707963267949)*(x2543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2544=IKsin(j4);
IkReal x2545=IKcos(j4);
IkReal x2546=(gconst79*r01);
IkReal x2547=(gconst79*r21);
IkReal x2548=((1.0)*cj2);
IkReal x2549=(gconst79*r11);
IkReal x2550=((1.0)*sj0);
IkReal x2551=(cj1*sj2);
IkReal x2552=((1.0)*x2545);
IkReal x2553=(gconst80*x2545);
IkReal x2554=((1.0)*x2544);
IkReal x2555=(gconst80*x2554);
evalcond[0]=((((-1.0)*r20*x2555))+(((-1.0)*r22*x2552))+((x2544*x2547)));
evalcond[1]=(cj0+(((-1.0)*r12*x2552))+(((-1.0)*r10*x2555))+((x2544*x2549)));
evalcond[2]=((((-1.0)*r02*x2552))+(((-1.0)*r00*x2555))+(((-1.0)*x2550))+((x2544*x2546)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2548))+((r20*x2553))+(((-1.0)*x2547*x2552))+(((-1.0)*r22*x2554)));
evalcond[4]=((((-1.0)*cj0*x2551))+(((-1.0)*x2546*x2552))+((r00*x2553))+(((-1.0)*r02*x2554))+(((-1.0)*cj0*sj1*x2548)));
evalcond[5]=((((-1.0)*x2549*x2552))+(((-1.0)*r12*x2554))+(((-1.0)*x2550*x2551))+(((-1.0)*sj0*sj1*x2548))+((r10*x2553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2556=((-1.0)*r21);
IkReal x2558 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2558)==0){
continue;
}
IkReal x2557=pow(x2558,-0.5);
CheckValue<IkReal> x2559 = IKatan2WithCheck(IkReal(x2556),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2559.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2559.value))));
IkReal gconst82=(x2556*x2557);
IkReal gconst83=((1.0)*r20*x2557);
CheckValue<IkReal> x2560 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2560.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2560.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2561=((-1.0)*r21);
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal(x2561),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
IkReal x2562=((1.0)*(x2564.value));
IkReal x2563=x2557;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2562)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2562)));
IkReal gconst82=(x2561*x2563);
IkReal gconst83=((1.0)*r20*x2563);
IkReal x2565=r22*r22;
IkReal x2566=((1.0)*x2565);
CheckValue<IkReal> x2570=IKPowWithIntegerCheck(((-1.0)+x2565),-1);
if(!x2570.valid){
continue;
}
IkReal x2567=x2570.value;
if((((1.0)+(((-1.0)*x2566)))) < -0.00001)
continue;
IkReal x2568=IKsqrt(((1.0)+(((-1.0)*x2566))));
IkReal x2569=(cj0*x2567*x2568);
j4eval[0]=((IKabs((x2569+(((-1.0)*x2566*x2569)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2571=((-1.0)*r21);
CheckValue<IkReal> x2574 = IKatan2WithCheck(IkReal(x2571),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2574.valid){
continue;
}
IkReal x2572=((1.0)*(x2574.value));
IkReal x2573=x2557;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2572)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2572)));
IkReal gconst82=(x2571*x2573);
IkReal gconst83=((1.0)*r20*x2573);
IkReal x2575=r22*r22;
IkReal x2576=((1.0)*x2575);
CheckValue<IkReal> x2580=IKPowWithIntegerCheck(((-1.0)+x2575),-1);
if(!x2580.valid){
continue;
}
IkReal x2577=x2580.value;
if((((1.0)+(((-1.0)*x2576)))) < -0.00001)
continue;
IkReal x2578=IKsqrt(((1.0)+(((-1.0)*x2576))));
IkReal x2579=(sj0*x2577*x2578);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2579+(((-1.0)*x2576*x2579))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2581=((-1.0)*r21);
CheckValue<IkReal> x2584 = IKatan2WithCheck(IkReal(x2581),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2584.valid){
continue;
}
IkReal x2582=((1.0)*(x2584.value));
IkReal x2583=x2557;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2582)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2582)));
IkReal gconst82=(x2581*x2583);
IkReal gconst83=((1.0)*r20*x2583);
IkReal x2585=r22*r22;
IkReal x2586=(r12*sj0);
IkReal x2587=(cj0*r02);
CheckValue<IkReal> x2591=IKPowWithIntegerCheck(((-1.0)+x2585),-1);
if(!x2591.valid){
continue;
}
IkReal x2588=x2591.value;
if((((1.0)+(((-1.0)*x2585)))) < -0.00001)
continue;
IkReal x2589=IKsqrt(((1.0)+(((-1.0)*x2585))));
IkReal x2590=(r22*x2588*x2589);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x2586*x2590))+((x2587*x2590)))))+(IKabs(((((-1.0)*x2587))+(((-1.0)*x2586))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2592=((1.0)*sj0);
IkReal x2593=((1.0)*cj0);
CheckValue<IkReal> x2594=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2594.valid){
continue;
}
CheckValue<IkReal> x2595 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2593))+(((-1.0)*r12*x2592)))),IkReal(((((-1.0)*gconst82*r11*x2592))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*gconst82*r01*x2593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2594.value)))+(x2595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2596=IKsin(j4);
IkReal x2597=IKcos(j4);
IkReal x2598=(gconst82*r11);
IkReal x2599=((1.0)*cj2);
IkReal x2600=((1.0)*sj0);
IkReal x2601=(cj1*sj2);
IkReal x2602=((1.0)*x2597);
IkReal x2603=(gconst83*x2597);
IkReal x2604=(gconst82*x2596);
IkReal x2605=((1.0)*x2596);
evalcond[0]=((((-1.0)*gconst83*r20*x2605))+(((-1.0)*r22*x2602))+((r21*x2604)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2605))+(((-1.0)*r12*x2602))+((x2596*x2598)));
evalcond[2]=((((-1.0)*gconst83*r00*x2605))+(((-1.0)*r02*x2602))+((r01*x2604))+(((-1.0)*x2600)));
evalcond[3]=((((-1.0)*cj1*x2599))+((r20*x2603))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2602))+(((-1.0)*r22*x2605)));
evalcond[4]=((((-1.0)*cj0*x2601))+(((-1.0)*gconst82*r01*x2602))+(((-1.0)*r02*x2605))+(((-1.0)*cj0*sj1*x2599))+((r00*x2603)));
evalcond[5]=((((-1.0)*x2600*x2601))+(((-1.0)*r12*x2605))+(((-1.0)*sj0*sj1*x2599))+((r10*x2603))+(((-1.0)*x2598*x2602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2606=((1.0)*gconst83);
CheckValue<IkReal> x2607=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2606))+(((-1.0)*gconst82*r10)))),-1);
if(!x2607.valid){
continue;
}
CheckValue<IkReal> x2608 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2607.value)))+(x2608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2609=IKsin(j4);
IkReal x2610=IKcos(j4);
IkReal x2611=(gconst82*r11);
IkReal x2612=((1.0)*cj2);
IkReal x2613=((1.0)*sj0);
IkReal x2614=(cj1*sj2);
IkReal x2615=((1.0)*x2610);
IkReal x2616=(gconst83*x2610);
IkReal x2617=(gconst82*x2609);
IkReal x2618=((1.0)*x2609);
evalcond[0]=((((-1.0)*gconst83*r20*x2618))+(((-1.0)*r22*x2615))+((r21*x2617)));
evalcond[1]=(cj0+(((-1.0)*r12*x2615))+((x2609*x2611))+(((-1.0)*gconst83*r10*x2618)));
evalcond[2]=(((r01*x2617))+(((-1.0)*gconst83*r00*x2618))+(((-1.0)*r02*x2615))+(((-1.0)*x2613)));
evalcond[3]=(((r20*x2616))+(((-1.0)*gconst82*r21*x2615))+((sj1*sj2))+(((-1.0)*r22*x2618))+(((-1.0)*cj1*x2612)));
evalcond[4]=(((r00*x2616))+(((-1.0)*gconst82*r01*x2615))+(((-1.0)*cj0*x2614))+(((-1.0)*cj0*sj1*x2612))+(((-1.0)*r02*x2618)));
evalcond[5]=((((-1.0)*x2611*x2615))+(((-1.0)*r12*x2618))+(((-1.0)*x2613*x2614))+(((-1.0)*sj0*sj1*x2612))+((r10*x2616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2619=((1.0)*gconst83);
CheckValue<IkReal> x2620 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2619))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2620.valid){
continue;
}
CheckValue<IkReal> x2621=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2619))+(((-1.0)*gconst82*r00)))),-1);
if(!x2621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2620.value)+(((1.5707963267949)*(x2621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2622=IKsin(j4);
IkReal x2623=IKcos(j4);
IkReal x2624=(gconst82*r11);
IkReal x2625=((1.0)*cj2);
IkReal x2626=((1.0)*sj0);
IkReal x2627=(cj1*sj2);
IkReal x2628=((1.0)*x2623);
IkReal x2629=(gconst83*x2623);
IkReal x2630=(gconst82*x2622);
IkReal x2631=((1.0)*x2622);
evalcond[0]=(((r21*x2630))+(((-1.0)*r22*x2628))+(((-1.0)*gconst83*r20*x2631)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2631))+(((-1.0)*r12*x2628))+((x2622*x2624)));
evalcond[2]=((((-1.0)*gconst83*r00*x2631))+((r01*x2630))+(((-1.0)*r02*x2628))+(((-1.0)*x2626)));
evalcond[3]=(((r20*x2629))+(((-1.0)*gconst82*r21*x2628))+((sj1*sj2))+(((-1.0)*cj1*x2625))+(((-1.0)*r22*x2631)));
evalcond[4]=(((r00*x2629))+(((-1.0)*gconst82*r01*x2628))+(((-1.0)*r02*x2631))+(((-1.0)*cj0*x2627))+(((-1.0)*cj0*sj1*x2625)));
evalcond[5]=((((-1.0)*x2624*x2628))+(((-1.0)*x2626*x2627))+(((-1.0)*sj0*sj1*x2625))+(((-1.0)*r12*x2631))+((r10*x2629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2632=((-1.0)*r10);
IkReal x2634 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2634)==0){
continue;
}
IkReal x2633=pow(x2634,-0.5);
CheckValue<IkReal> x2635 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2632),IKFAST_ATAN2_MAGTHRESH);
if(!x2635.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2635.value));
IkReal gconst85=(r11*x2633);
IkReal gconst86=(x2632*x2633);
CheckValue<IkReal> x2636 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2636.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2636.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2637=((-1.0)*r10);
IkReal x2638=x2633;
CheckValue<IkReal> x2640 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2637),IKFAST_ATAN2_MAGTHRESH);
if(!x2640.valid){
continue;
}
IkReal x2639=((-1.0)*(x2640.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2639;
IkReal gconst84=x2639;
IkReal gconst85=(r11*x2638);
IkReal gconst86=(x2637*x2638);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2641=((1.0)*sj0);
IkReal x2642=((1.0)*gconst85);
CheckValue<IkReal> x2643 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2641))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x2641))+(((-1.0)*cj0*r01*x2642))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2643.valid){
continue;
}
CheckValue<IkReal> x2644=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2642)))),-1);
if(!x2644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2643.value)+(((1.5707963267949)*(x2644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2645=IKsin(j4);
IkReal x2646=IKcos(j4);
IkReal x2647=(gconst85*r21);
IkReal x2648=(gconst86*r00);
IkReal x2649=(gconst86*r10);
IkReal x2650=((1.0)*cj2);
IkReal x2651=(gconst85*r11);
IkReal x2652=(gconst85*r01);
IkReal x2653=((1.0)*sj0);
IkReal x2654=(gconst86*r20);
IkReal x2655=(cj1*sj2);
IkReal x2656=((1.0)*x2646);
IkReal x2657=((1.0)*x2645);
evalcond[0]=((((-1.0)*r22*x2656))+((x2645*x2647))+(((-1.0)*x2654*x2657)));
evalcond[1]=(cj0+(((-1.0)*r12*x2656))+((x2645*x2651))+(((-1.0)*x2649*x2657)));
evalcond[2]=((((-1.0)*r02*x2656))+((x2645*x2652))+(((-1.0)*x2653))+(((-1.0)*x2648*x2657)));
evalcond[3]=((((-1.0)*r22*x2657))+(((-1.0)*cj1*x2650))+(((-1.0)*x2647*x2656))+((sj1*sj2))+((x2646*x2654)));
evalcond[4]=((((-1.0)*x2652*x2656))+(((-1.0)*r02*x2657))+(((-1.0)*cj0*sj1*x2650))+((x2646*x2648))+(((-1.0)*cj0*x2655)));
evalcond[5]=((((-1.0)*x2651*x2656))+(((-1.0)*r12*x2657))+(((-1.0)*sj0*sj1*x2650))+((x2646*x2649))+(((-1.0)*x2653*x2655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2658=((1.0)*gconst86);
CheckValue<IkReal> x2659 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2659.valid){
continue;
}
CheckValue<IkReal> x2660=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2658))+(((-1.0)*gconst85*r00)))),-1);
if(!x2660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2659.value)+(((1.5707963267949)*(x2660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2661=IKsin(j4);
IkReal x2662=IKcos(j4);
IkReal x2663=(gconst85*r21);
IkReal x2664=(gconst86*r00);
IkReal x2665=(gconst86*r10);
IkReal x2666=((1.0)*cj2);
IkReal x2667=(gconst85*r11);
IkReal x2668=(gconst85*r01);
IkReal x2669=((1.0)*sj0);
IkReal x2670=(gconst86*r20);
IkReal x2671=(cj1*sj2);
IkReal x2672=((1.0)*x2662);
IkReal x2673=((1.0)*x2661);
evalcond[0]=(((x2661*x2663))+(((-1.0)*x2670*x2673))+(((-1.0)*r22*x2672)));
evalcond[1]=((((-1.0)*r12*x2672))+((x2661*x2667))+cj0+(((-1.0)*x2665*x2673)));
evalcond[2]=(((x2661*x2668))+(((-1.0)*x2664*x2673))+(((-1.0)*r02*x2672))+(((-1.0)*x2669)));
evalcond[3]=(((x2662*x2670))+((sj1*sj2))+(((-1.0)*cj1*x2666))+(((-1.0)*x2663*x2672))+(((-1.0)*r22*x2673)));
evalcond[4]=((((-1.0)*cj0*x2671))+((x2662*x2664))+(((-1.0)*cj0*sj1*x2666))+(((-1.0)*r02*x2673))+(((-1.0)*x2668*x2672)));
evalcond[5]=((((-1.0)*r12*x2673))+((x2662*x2665))+(((-1.0)*sj0*sj1*x2666))+(((-1.0)*x2667*x2672))+(((-1.0)*x2669*x2671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2674=((-1.0)*r11);
IkReal x2676 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2676)==0){
continue;
}
IkReal x2675=pow(x2676,-0.5);
CheckValue<IkReal> x2677 = IKatan2WithCheck(IkReal(x2674),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2677.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2677.value))));
IkReal gconst88=(x2674*x2675);
IkReal gconst89=((1.0)*r10*x2675);
CheckValue<IkReal> x2678 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2678.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2678.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2679=((-1.0)*r11);
CheckValue<IkReal> x2682 = IKatan2WithCheck(IkReal(x2679),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2682.valid){
continue;
}
IkReal x2680=((1.0)*(x2682.value));
IkReal x2681=x2675;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2680)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2680)));
IkReal gconst88=(x2679*x2681);
IkReal gconst89=((1.0)*r10*x2681);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2683=((-1.0)*r11);
CheckValue<IkReal> x2686 = IKatan2WithCheck(IkReal(x2683),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2686.valid){
continue;
}
IkReal x2684=((1.0)*(x2686.value));
IkReal x2685=x2675;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2684)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2684)));
IkReal gconst88=(x2683*x2685);
IkReal gconst89=((1.0)*r10*x2685);
IkReal x2687=r12*r12;
IkReal x2688=((1.0)*sj0);
IkReal x2689=(cj0*r02);
IkReal x2690=x2675;
j4eval[0]=((IKabs(((((-1.0)*x2688*x2690))+((sj0*x2687*x2690))+((r12*x2689*x2690)))))+(IKabs(((((-1.0)*r12*x2688))+(((-1.0)*x2689))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2691=((-1.0)*r11);
CheckValue<IkReal> x2694 = IKatan2WithCheck(IkReal(x2691),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2694.valid){
continue;
}
IkReal x2692=((1.0)*(x2694.value));
IkReal x2693=x2675;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2692)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2692)));
IkReal gconst88=(x2691*x2693);
IkReal gconst89=((1.0)*r10*x2693);
IkReal x2695=r12*r12;
IkReal x2696=(cj1*cj2*r22);
IkReal x2697=(r22*sj1*sj2);
CheckValue<IkReal> x2701=IKPowWithIntegerCheck(((-1.0)+x2695),-1);
if(!x2701.valid){
continue;
}
IkReal x2698=x2701.value;
if((((1.0)+(((-1.0)*x2695)))) < -0.00001)
continue;
IkReal x2699=IKsqrt(((1.0)+(((-1.0)*x2695))));
IkReal x2700=(r12*x2698*x2699);
j4eval[0]=((IKabs(((((-1.0)*x2696))+x2697)))+(IKabs(((((-1.0)*x2697*x2700))+((x2696*x2700))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2702=(cj1*cj2);
IkReal x2703=(gconst89*r20);
IkReal x2704=(gconst88*r21);
IkReal x2705=(sj1*sj2);
CheckValue<IkReal> x2706=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2703*x2704))+(x2704*x2704)+(r22*r22)+(x2703*x2703))),-1);
if(!x2706.valid){
continue;
}
CheckValue<IkReal> x2707 = IKatan2WithCheck(IkReal((((r22*x2705))+(((-1.0)*r22*x2702)))),IkReal((((x2704*x2705))+(((-1.0)*x2702*x2704))+(((-1.0)*x2703*x2705))+((x2702*x2703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2706.value)))+(x2707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2708=IKsin(j4);
IkReal x2709=IKcos(j4);
IkReal x2710=((1.0)*sj0);
IkReal x2711=((1.0)*cj2);
IkReal x2712=(gconst89*r20);
IkReal x2713=(gconst89*r10);
IkReal x2714=(gconst89*r00);
IkReal x2715=(cj1*sj2);
IkReal x2716=((1.0)*x2709);
IkReal x2717=((1.0)*x2708);
IkReal x2718=(gconst88*x2708);
evalcond[0]=((((-1.0)*x2712*x2717))+(((-1.0)*r22*x2716))+((r21*x2718)));
evalcond[1]=(cj0+(((-1.0)*x2713*x2717))+((r11*x2718))+(((-1.0)*r12*x2716)));
evalcond[2]=((((-1.0)*x2710))+(((-1.0)*r02*x2716))+(((-1.0)*x2714*x2717))+((r01*x2718)));
evalcond[3]=(((x2709*x2712))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2716))+(((-1.0)*r22*x2717))+(((-1.0)*cj1*x2711)));
evalcond[4]=((((-1.0)*cj0*sj1*x2711))+(((-1.0)*r02*x2717))+((x2709*x2714))+(((-1.0)*gconst88*r01*x2716))+(((-1.0)*cj0*x2715)));
evalcond[5]=(((x2709*x2713))+(((-1.0)*gconst88*r11*x2716))+(((-1.0)*x2710*x2715))+(((-1.0)*r12*x2717))+(((-1.0)*cj2*sj1*x2710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2719=((1.0)*sj0);
IkReal x2720=((1.0)*cj0);
CheckValue<IkReal> x2721 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2720))+(((-1.0)*r12*x2719)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2720))+(((-1.0)*gconst88*r11*x2719))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2721.valid){
continue;
}
CheckValue<IkReal> x2722=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2721.value)+(((1.5707963267949)*(x2722.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2723=IKsin(j4);
IkReal x2724=IKcos(j4);
IkReal x2725=((1.0)*sj0);
IkReal x2726=((1.0)*cj2);
IkReal x2727=(gconst89*r20);
IkReal x2728=(gconst89*r10);
IkReal x2729=(gconst89*r00);
IkReal x2730=(cj1*sj2);
IkReal x2731=((1.0)*x2724);
IkReal x2732=((1.0)*x2723);
IkReal x2733=(gconst88*x2723);
evalcond[0]=((((-1.0)*x2727*x2732))+((r21*x2733))+(((-1.0)*r22*x2731)));
evalcond[1]=(cj0+(((-1.0)*x2728*x2732))+(((-1.0)*r12*x2731))+((r11*x2733)));
evalcond[2]=(((r01*x2733))+(((-1.0)*r02*x2731))+(((-1.0)*x2725))+(((-1.0)*x2729*x2732)));
evalcond[3]=(((x2724*x2727))+((sj1*sj2))+(((-1.0)*r22*x2732))+(((-1.0)*gconst88*r21*x2731))+(((-1.0)*cj1*x2726)));
evalcond[4]=(((x2724*x2729))+(((-1.0)*cj0*x2730))+(((-1.0)*r02*x2732))+(((-1.0)*gconst88*r01*x2731))+(((-1.0)*cj0*sj1*x2726)));
evalcond[5]=((((-1.0)*cj2*sj1*x2725))+((x2724*x2728))+(((-1.0)*x2725*x2730))+(((-1.0)*r12*x2732))+(((-1.0)*gconst88*r11*x2731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2734=((1.0)*gconst89);
CheckValue<IkReal> x2735=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2734))+(((-1.0)*gconst88*r00)))),-1);
if(!x2735.valid){
continue;
}
CheckValue<IkReal> x2736 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2734))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2735.value)))+(x2736.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2737=IKsin(j4);
IkReal x2738=IKcos(j4);
IkReal x2739=((1.0)*sj0);
IkReal x2740=((1.0)*cj2);
IkReal x2741=(gconst89*r20);
IkReal x2742=(gconst89*r10);
IkReal x2743=(gconst89*r00);
IkReal x2744=(cj1*sj2);
IkReal x2745=((1.0)*x2738);
IkReal x2746=((1.0)*x2737);
IkReal x2747=(gconst88*x2737);
evalcond[0]=(((r21*x2747))+(((-1.0)*x2741*x2746))+(((-1.0)*r22*x2745)));
evalcond[1]=(((r11*x2747))+cj0+(((-1.0)*r12*x2745))+(((-1.0)*x2742*x2746)));
evalcond[2]=((((-1.0)*x2743*x2746))+((r01*x2747))+(((-1.0)*x2739))+(((-1.0)*r02*x2745)));
evalcond[3]=((((-1.0)*gconst88*r21*x2745))+((x2738*x2741))+((sj1*sj2))+(((-1.0)*cj1*x2740))+(((-1.0)*r22*x2746)));
evalcond[4]=(((x2738*x2743))+(((-1.0)*cj0*x2744))+(((-1.0)*r02*x2746))+(((-1.0)*gconst88*r01*x2745))+(((-1.0)*cj0*sj1*x2740)));
evalcond[5]=((((-1.0)*cj2*sj1*x2739))+(((-1.0)*gconst88*r11*x2745))+(((-1.0)*x2739*x2744))+((x2738*x2742))+(((-1.0)*r12*x2746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2748=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2748;
j4eval[1]=IKsign(x2748);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2749=((1.0)*cj5);
IkReal x2750=((((-1.0)*r01*x2749))+(((-1.0)*r00*sj5)));
j4eval[0]=x2750;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2749))))));
j4eval[2]=IKsign(x2750);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2751=cj5*cj5;
IkReal x2752=r11*r11;
IkReal x2753=(r11*sj5);
IkReal x2754=(cj5*r10);
IkReal x2755=((((-1.0)*x2751*x2752))+x2752+(r12*r12)+((x2751*(r10*r10)))+(((-2.0)*x2753*x2754)));
j4eval[0]=x2755;
j4eval[1]=IKsign(x2755);
j4eval[2]=((IKabs(r12))+(IKabs((x2754+(((-1.0)*x2753))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2756=cj5*cj5;
IkReal x2757=r11*r11;
IkReal x2758=(cj5*r10);
IkReal x2759=(r11*sj5);
CheckValue<IkReal> x2760 = IKatan2WithCheck(IkReal((x2758+(((-1.0)*x2759)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2760.valid){
continue;
}
CheckValue<IkReal> x2761=IKPowWithIntegerCheck(IKsign((x2757+(r12*r12)+(((-1.0)*x2756*x2757))+((x2756*(r10*r10)))+(((-2.0)*x2758*x2759)))),-1);
if(!x2761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2760.value)+(((1.5707963267949)*(x2761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2762=IKsin(j4);
IkReal x2763=IKcos(j4);
IkReal x2764=(cj5*r10);
IkReal x2765=(r01*sj5);
IkReal x2766=((1.0)*cj2);
IkReal x2767=(cj5*r00);
IkReal x2768=(cj5*r20);
IkReal x2769=((1.0)*x2763);
IkReal x2770=((1.0)*x2762);
IkReal x2771=(sj5*x2762);
evalcond[0]=((((-1.0)*x2768*x2770))+((r21*x2771))+(((-1.0)*r22*x2769)));
evalcond[1]=(((x2762*x2765))+(((-1.0)*x2767*x2770))+(((-1.0)*r02*x2769)));
evalcond[2]=((((-1.0)*r12*x2770))+(((-1.0)*r11*sj5*x2769))+((x2763*x2764)));
evalcond[3]=((1.0)+((r11*x2771))+(((-1.0)*r12*x2769))+(((-1.0)*x2764*x2770)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r21*sj5*x2769))+(((-1.0)*cj1*x2766))+((x2763*x2768))+(((-1.0)*r22*x2770)));
evalcond[5]=((((-1.0)*r02*x2770))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2766))+((x2763*x2767))+(((-1.0)*x2765*x2769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2772=((1.0)*cj5);
CheckValue<IkReal> x2773=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2772))+(((-1.0)*r00*sj5)))),-1);
if(!x2773.valid){
continue;
}
CheckValue<IkReal> x2774 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2773.value)))+(x2774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2775=IKsin(j4);
IkReal x2776=IKcos(j4);
IkReal x2777=(cj5*r10);
IkReal x2778=(r01*sj5);
IkReal x2779=((1.0)*cj2);
IkReal x2780=(cj5*r00);
IkReal x2781=(cj5*r20);
IkReal x2782=((1.0)*x2776);
IkReal x2783=((1.0)*x2775);
IkReal x2784=(sj5*x2775);
evalcond[0]=(((r21*x2784))+(((-1.0)*x2781*x2783))+(((-1.0)*r22*x2782)));
evalcond[1]=(((x2775*x2778))+(((-1.0)*x2780*x2783))+(((-1.0)*r02*x2782)));
evalcond[2]=((((-1.0)*r12*x2783))+(((-1.0)*r11*sj5*x2782))+((x2776*x2777)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2782))+((r11*x2784))+(((-1.0)*x2777*x2783)));
evalcond[4]=(((x2776*x2781))+(((-1.0)*r21*sj5*x2782))+((sj1*sj2))+(((-1.0)*r22*x2783))+(((-1.0)*cj1*x2779)));
evalcond[5]=(((x2776*x2780))+(((-1.0)*cj1*sj2))+(((-1.0)*x2778*x2782))+(((-1.0)*sj1*x2779))+(((-1.0)*r02*x2783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2785=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2785.valid){
continue;
}
CheckValue<IkReal> x2786 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2785.value)))+(x2786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2787=IKsin(j4);
IkReal x2788=IKcos(j4);
IkReal x2789=(cj5*r10);
IkReal x2790=(r01*sj5);
IkReal x2791=((1.0)*cj2);
IkReal x2792=(cj5*r00);
IkReal x2793=(cj5*r20);
IkReal x2794=((1.0)*x2788);
IkReal x2795=((1.0)*x2787);
IkReal x2796=(sj5*x2787);
evalcond[0]=(((r21*x2796))+(((-1.0)*r22*x2794))+(((-1.0)*x2793*x2795)));
evalcond[1]=(((x2787*x2790))+(((-1.0)*x2792*x2795))+(((-1.0)*r02*x2794)));
evalcond[2]=((((-1.0)*r11*sj5*x2794))+((x2788*x2789))+(((-1.0)*r12*x2795)));
evalcond[3]=((1.0)+(((-1.0)*x2789*x2795))+((r11*x2796))+(((-1.0)*r12*x2794)));
evalcond[4]=((((-1.0)*r21*sj5*x2794))+((sj1*sj2))+(((-1.0)*r22*x2795))+(((-1.0)*cj1*x2791))+((x2788*x2793)));
evalcond[5]=((((-1.0)*x2790*x2794))+(((-1.0)*sj1*x2791))+(((-1.0)*cj1*sj2))+((x2788*x2792))+(((-1.0)*r02*x2795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2797=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2797;
j4eval[1]=IKsign(x2797);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2798=((1.0)*cj5);
IkReal x2799=((((-1.0)*r21*x2798))+(((-1.0)*r20*sj5)));
j4eval[0]=x2799;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2798))))));
j4eval[2]=IKsign(x2799);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2800=cj5*cj5;
IkReal x2801=r11*r11;
IkReal x2802=(cj5*r10);
IkReal x2803=(r11*sj5);
IkReal x2804=((((-1.0)*x2801))+(((2.0)*x2802*x2803))+(((-1.0)*(r12*r12)))+((x2800*x2801))+(((-1.0)*x2800*(r10*r10))));
j4eval[0]=x2804;
j4eval[1]=((IKabs(((((-1.0)*x2803))+x2802)))+(IKabs(r12)));
j4eval[2]=IKsign(x2804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2805=cj5*cj5;
IkReal x2806=r11*r11;
IkReal x2807=(cj5*r10);
IkReal x2808=(r11*sj5);
CheckValue<IkReal> x2809=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2806))+((x2805*x2806))+(((-1.0)*(r12*r12)))+(((-1.0)*x2805*(r10*r10)))+(((2.0)*x2807*x2808)))),-1);
if(!x2809.valid){
continue;
}
CheckValue<IkReal> x2810 = IKatan2WithCheck(IkReal(((((-1.0)*x2808))+x2807)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2809.value)))+(x2810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2811=IKsin(j4);
IkReal x2812=IKcos(j4);
IkReal x2813=(cj5*r10);
IkReal x2814=(r01*sj5);
IkReal x2815=(cj5*r00);
IkReal x2816=(cj5*r20);
IkReal x2817=((1.0)*x2812);
IkReal x2818=((1.0)*x2811);
IkReal x2819=(sj5*x2811);
evalcond[0]=(((r21*x2819))+(((-1.0)*r22*x2817))+(((-1.0)*x2816*x2818)));
evalcond[1]=((((-1.0)*r02*x2817))+(((-1.0)*x2815*x2818))+((x2811*x2814)));
evalcond[2]=((((-1.0)*r12*x2818))+((x2812*x2813))+(((-1.0)*r11*sj5*x2817)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2817))+(((-1.0)*x2813*x2818))+((r11*x2819)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2818))+((x2812*x2815))+((cj1*sj2))+(((-1.0)*x2814*x2817)));
evalcond[5]=(((x2812*x2816))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2818))+(((-1.0)*r21*sj5*x2817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2820=((1.0)*cj5);
CheckValue<IkReal> x2821 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2821.valid){
continue;
}
CheckValue<IkReal> x2822=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2820))+(((-1.0)*r20*sj5)))),-1);
if(!x2822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2821.value)+(((1.5707963267949)*(x2822.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2823=IKsin(j4);
IkReal x2824=IKcos(j4);
IkReal x2825=(cj5*r10);
IkReal x2826=(r01*sj5);
IkReal x2827=(cj5*r00);
IkReal x2828=(cj5*r20);
IkReal x2829=((1.0)*x2824);
IkReal x2830=((1.0)*x2823);
IkReal x2831=(sj5*x2823);
evalcond[0]=((((-1.0)*r22*x2829))+(((-1.0)*x2828*x2830))+((r21*x2831)));
evalcond[1]=(((x2823*x2826))+(((-1.0)*r02*x2829))+(((-1.0)*x2827*x2830)));
evalcond[2]=(((x2824*x2825))+(((-1.0)*r11*sj5*x2829))+(((-1.0)*r12*x2830)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2829))+(((-1.0)*x2825*x2830))+((r11*x2831)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2824*x2827))+(((-1.0)*x2826*x2829))+(((-1.0)*r02*x2830)));
evalcond[5]=(((x2824*x2828))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2830))+(((-1.0)*r21*sj5*x2829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2832 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2832.valid){
continue;
}
CheckValue<IkReal> x2833=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2832.value)+(((1.5707963267949)*(x2833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2834=IKsin(j4);
IkReal x2835=IKcos(j4);
IkReal x2836=(cj5*r10);
IkReal x2837=(r01*sj5);
IkReal x2838=(cj5*r00);
IkReal x2839=(cj5*r20);
IkReal x2840=((1.0)*x2835);
IkReal x2841=((1.0)*x2834);
IkReal x2842=(sj5*x2834);
evalcond[0]=(((r21*x2842))+(((-1.0)*x2839*x2841))+(((-1.0)*r22*x2840)));
evalcond[1]=(((x2834*x2837))+(((-1.0)*r02*x2840))+(((-1.0)*x2838*x2841)));
evalcond[2]=((((-1.0)*r12*x2841))+((x2835*x2836))+(((-1.0)*r11*sj5*x2840)));
evalcond[3]=((-1.0)+((r11*x2842))+(((-1.0)*r12*x2840))+(((-1.0)*x2836*x2841)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2841))+((x2835*x2838))+(((-1.0)*x2837*x2840)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2841))+((x2835*x2839))+(((-1.0)*r21*sj5*x2840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2843=((-1.0)*r00);
IkReal x2845 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2845)==0){
continue;
}
IkReal x2844=pow(x2845,-0.5);
CheckValue<IkReal> x2846 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2843),IKFAST_ATAN2_MAGTHRESH);
if(!x2846.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2846.value));
IkReal gconst91=(r01*x2844);
IkReal gconst92=(x2843*x2844);
CheckValue<IkReal> x2847 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2847.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2847.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2848=((-1.0)*r00);
IkReal x2849=x2844;
CheckValue<IkReal> x2851 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2848),IKFAST_ATAN2_MAGTHRESH);
if(!x2851.valid){
continue;
}
IkReal x2850=((-1.0)*(x2851.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2850;
IkReal gconst90=x2850;
IkReal gconst91=(r01*x2849);
IkReal gconst92=(x2848*x2849);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2852=((1.0)*sj0);
IkReal x2853=((1.0)*cj0);
CheckValue<IkReal> x2854=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2854.valid){
continue;
}
CheckValue<IkReal> x2855 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2852))+(((-1.0)*r02*x2853)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x2853))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2854.value)))+(x2855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2856=IKsin(j4);
IkReal x2857=IKcos(j4);
IkReal x2858=((1.0)*cj2);
IkReal x2859=(gconst92*r00);
IkReal x2860=(gconst92*r20);
IkReal x2861=((1.0)*sj0);
IkReal x2862=(gconst92*r10);
IkReal x2863=(cj1*sj2);
IkReal x2864=((1.0)*x2857);
IkReal x2865=(gconst91*x2856);
IkReal x2866=((1.0)*x2856);
evalcond[0]=(((r21*x2865))+(((-1.0)*r22*x2864))+(((-1.0)*x2860*x2866)));
evalcond[1]=((((-1.0)*r12*x2864))+(((-1.0)*x2862*x2866))+cj0+((r11*x2865)));
evalcond[2]=((((-1.0)*r02*x2864))+(((-1.0)*x2859*x2866))+(((-1.0)*x2861))+((r01*x2865)));
evalcond[3]=((((-1.0)*cj1*x2858))+((x2857*x2860))+((sj1*sj2))+(((-1.0)*r22*x2866))+(((-1.0)*gconst91*r21*x2864)));
evalcond[4]=((((-1.0)*r02*x2866))+(((-1.0)*cj0*x2863))+(((-1.0)*gconst91*r01*x2864))+(((-1.0)*cj0*sj1*x2858))+((x2857*x2859)));
evalcond[5]=((((-1.0)*r12*x2866))+(((-1.0)*gconst91*r11*x2864))+((x2857*x2862))+(((-1.0)*x2861*x2863))+(((-1.0)*sj0*sj1*x2858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2867=((1.0)*gconst92);
CheckValue<IkReal> x2868 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2868.valid){
continue;
}
CheckValue<IkReal> x2869=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2867)))),-1);
if(!x2869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2868.value)+(((1.5707963267949)*(x2869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2870=IKsin(j4);
IkReal x2871=IKcos(j4);
IkReal x2872=((1.0)*cj2);
IkReal x2873=(gconst92*r00);
IkReal x2874=(gconst92*r20);
IkReal x2875=((1.0)*sj0);
IkReal x2876=(gconst92*r10);
IkReal x2877=(cj1*sj2);
IkReal x2878=((1.0)*x2871);
IkReal x2879=(gconst91*x2870);
IkReal x2880=((1.0)*x2870);
evalcond[0]=((((-1.0)*x2874*x2880))+(((-1.0)*r22*x2878))+((r21*x2879)));
evalcond[1]=(cj0+(((-1.0)*x2876*x2880))+((r11*x2879))+(((-1.0)*r12*x2878)));
evalcond[2]=((((-1.0)*x2873*x2880))+(((-1.0)*r02*x2878))+((r01*x2879))+(((-1.0)*x2875)));
evalcond[3]=((((-1.0)*r22*x2880))+(((-1.0)*cj1*x2872))+((sj1*sj2))+((x2871*x2874))+(((-1.0)*gconst91*r21*x2878)));
evalcond[4]=((((-1.0)*cj0*x2877))+(((-1.0)*cj0*sj1*x2872))+(((-1.0)*r02*x2880))+((x2871*x2873))+(((-1.0)*gconst91*r01*x2878)));
evalcond[5]=((((-1.0)*sj0*sj1*x2872))+(((-1.0)*gconst91*r11*x2878))+((x2871*x2876))+(((-1.0)*x2875*x2877))+(((-1.0)*r12*x2880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2881=((-1.0)*r01);
IkReal x2883 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2883)==0){
continue;
}
IkReal x2882=pow(x2883,-0.5);
CheckValue<IkReal> x2884 = IKatan2WithCheck(IkReal(x2881),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2884.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2884.value))));
IkReal gconst94=(x2881*x2882);
IkReal gconst95=((1.0)*r00*x2882);
CheckValue<IkReal> x2885 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2885.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2885.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2886=((-1.0)*r01);
CheckValue<IkReal> x2889 = IKatan2WithCheck(IkReal(x2886),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2889.valid){
continue;
}
IkReal x2887=((1.0)*(x2889.value));
IkReal x2888=x2882;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2887)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2887)));
IkReal gconst94=(x2886*x2888);
IkReal gconst95=((1.0)*r00*x2888);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2890=((-1.0)*r01);
CheckValue<IkReal> x2893 = IKatan2WithCheck(IkReal(x2890),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2893.valid){
continue;
}
IkReal x2891=((1.0)*(x2893.value));
IkReal x2892=x2882;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2891)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2891)));
IkReal gconst94=(x2890*x2892);
IkReal gconst95=((1.0)*r00*x2892);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2894=((-1.0)*r01);
CheckValue<IkReal> x2897 = IKatan2WithCheck(IkReal(x2894),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2897.valid){
continue;
}
IkReal x2895=((1.0)*(x2897.value));
IkReal x2896=x2882;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2895)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2895)));
IkReal gconst94=(x2894*x2896);
IkReal gconst95=((1.0)*r00*x2896);
IkReal x2898=r02*r02;
IkReal x2899=(r12*sj0);
IkReal x2900=((1.0)*cj0);
IkReal x2901=x2882;
j4eval[0]=((IKabs(((((-1.0)*r02*x2900))+(((-1.0)*x2899)))))+(IKabs((((r02*x2899*x2901))+(((-1.0)*x2900*x2901))+((cj0*x2898*x2901))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2902=((1.0)*sj0);
IkReal x2903=((1.0)*cj0);
CheckValue<IkReal> x2904=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2904.valid){
continue;
}
CheckValue<IkReal> x2905 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2903))+(((-1.0)*r12*x2902)))),IkReal(((((-1.0)*gconst94*r01*x2903))+(((-1.0)*gconst94*r11*x2902))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2904.value)))+(x2905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2906=IKsin(j4);
IkReal x2907=IKcos(j4);
IkReal x2908=(gconst94*r11);
IkReal x2909=((1.0)*cj2);
IkReal x2910=(gconst94*r21);
IkReal x2911=((1.0)*sj0);
IkReal x2912=(gconst94*r01);
IkReal x2913=(cj1*sj2);
IkReal x2914=((1.0)*x2907);
IkReal x2915=(gconst95*x2907);
IkReal x2916=((1.0)*x2906);
IkReal x2917=(gconst95*x2916);
evalcond[0]=(((x2906*x2910))+(((-1.0)*r20*x2917))+(((-1.0)*r22*x2914)));
evalcond[1]=(cj0+((x2906*x2908))+(((-1.0)*r10*x2917))+(((-1.0)*r12*x2914)));
evalcond[2]=(((x2906*x2912))+(((-1.0)*r02*x2914))+(((-1.0)*x2911))+(((-1.0)*r00*x2917)));
evalcond[3]=(((r20*x2915))+((sj1*sj2))+(((-1.0)*cj1*x2909))+(((-1.0)*x2910*x2914))+(((-1.0)*r22*x2916)));
evalcond[4]=((((-1.0)*x2912*x2914))+((r00*x2915))+(((-1.0)*cj0*sj1*x2909))+(((-1.0)*r02*x2916))+(((-1.0)*cj0*x2913)));
evalcond[5]=((((-1.0)*r12*x2916))+(((-1.0)*sj0*sj1*x2909))+(((-1.0)*x2911*x2913))+(((-1.0)*x2908*x2914))+((r10*x2915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2918=((1.0)*gconst95);
CheckValue<IkReal> x2919 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2919.valid){
continue;
}
CheckValue<IkReal> x2920=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2918)))),-1);
if(!x2920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2919.value)+(((1.5707963267949)*(x2920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2921=IKsin(j4);
IkReal x2922=IKcos(j4);
IkReal x2923=(gconst94*r11);
IkReal x2924=((1.0)*cj2);
IkReal x2925=(gconst94*r21);
IkReal x2926=((1.0)*sj0);
IkReal x2927=(gconst94*r01);
IkReal x2928=(cj1*sj2);
IkReal x2929=((1.0)*x2922);
IkReal x2930=(gconst95*x2922);
IkReal x2931=((1.0)*x2921);
IkReal x2932=(gconst95*x2931);
evalcond[0]=(((x2921*x2925))+(((-1.0)*r20*x2932))+(((-1.0)*r22*x2929)));
evalcond[1]=(((x2921*x2923))+cj0+(((-1.0)*r12*x2929))+(((-1.0)*r10*x2932)));
evalcond[2]=(((x2921*x2927))+(((-1.0)*r02*x2929))+(((-1.0)*x2926))+(((-1.0)*r00*x2932)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2925*x2929))+((r20*x2930))+(((-1.0)*cj1*x2924))+(((-1.0)*r22*x2931)));
evalcond[4]=((((-1.0)*x2927*x2929))+(((-1.0)*cj0*sj1*x2924))+((r00*x2930))+(((-1.0)*cj0*x2928))+(((-1.0)*r02*x2931)));
evalcond[5]=(((r10*x2930))+(((-1.0)*x2923*x2929))+(((-1.0)*sj0*sj1*x2924))+(((-1.0)*x2926*x2928))+(((-1.0)*r12*x2931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2933=((1.0)*gconst95);
CheckValue<IkReal> x2934=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2933)))),-1);
if(!x2934.valid){
continue;
}
CheckValue<IkReal> x2935 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2933))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2934.value)))+(x2935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2936=IKsin(j4);
IkReal x2937=IKcos(j4);
IkReal x2938=(gconst94*r11);
IkReal x2939=((1.0)*cj2);
IkReal x2940=(gconst94*r21);
IkReal x2941=((1.0)*sj0);
IkReal x2942=(gconst94*r01);
IkReal x2943=(cj1*sj2);
IkReal x2944=((1.0)*x2937);
IkReal x2945=(gconst95*x2937);
IkReal x2946=((1.0)*x2936);
IkReal x2947=(gconst95*x2946);
evalcond[0]=(((x2936*x2940))+(((-1.0)*r20*x2947))+(((-1.0)*r22*x2944)));
evalcond[1]=((((-1.0)*r12*x2944))+cj0+((x2936*x2938))+(((-1.0)*r10*x2947)));
evalcond[2]=(((x2936*x2942))+(((-1.0)*r02*x2944))+(((-1.0)*r00*x2947))+(((-1.0)*x2941)));
evalcond[3]=((((-1.0)*x2940*x2944))+((sj1*sj2))+(((-1.0)*cj1*x2939))+(((-1.0)*r22*x2946))+((r20*x2945)));
evalcond[4]=((((-1.0)*r02*x2946))+(((-1.0)*cj0*x2943))+(((-1.0)*x2942*x2944))+((r00*x2945))+(((-1.0)*cj0*sj1*x2939)));
evalcond[5]=((((-1.0)*r12*x2946))+((r10*x2945))+(((-1.0)*sj0*sj1*x2939))+(((-1.0)*x2938*x2944))+(((-1.0)*x2941*x2943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2948=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2948;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2949=((1.0)*cj5);
IkReal x2950=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2949)));
j4eval[0]=x2950;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2949))))));
j4eval[2]=IKsign(x2950);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2951=cj5*cj5;
IkReal x2952=r01*r01;
IkReal x2953=(r01*sj5);
IkReal x2954=(cj5*r00);
IkReal x2955=((((-1.0)*x2952))+((x2951*x2952))+(((-1.0)*(r02*r02)))+(((2.0)*x2953*x2954))+(((-1.0)*x2951*(r00*r00))));
j4eval[0]=x2955;
j4eval[1]=IKsign(x2955);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2953))+x2954))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2956=cj5*cj5;
IkReal x2957=r01*r01;
IkReal x2958=(r01*sj5);
IkReal x2959=(cj5*r00);
CheckValue<IkReal> x2960 = IKatan2WithCheck(IkReal(((((-1.0)*x2958))+x2959)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2960.valid){
continue;
}
CheckValue<IkReal> x2961=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2957))+(((2.0)*x2958*x2959))+(((-1.0)*x2956*(r00*r00)))+(((-1.0)*(r02*r02)))+((x2956*x2957)))),-1);
if(!x2961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2960.value)+(((1.5707963267949)*(x2961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2962=IKsin(j4);
IkReal x2963=IKcos(j4);
IkReal x2964=(cj5*r10);
IkReal x2965=(r01*sj5);
IkReal x2966=((1.0)*cj2);
IkReal x2967=(cj5*r00);
IkReal x2968=(cj5*r20);
IkReal x2969=((1.0)*x2963);
IkReal x2970=((1.0)*x2962);
IkReal x2971=(sj5*x2962);
evalcond[0]=((((-1.0)*x2968*x2970))+(((-1.0)*r22*x2969))+((r21*x2971)));
evalcond[1]=((((-1.0)*x2964*x2970))+((r11*x2971))+(((-1.0)*r12*x2969)));
evalcond[2]=((((-1.0)*x2965*x2969))+(((-1.0)*r02*x2970))+((x2963*x2967)));
evalcond[3]=((-1.0)+((x2962*x2965))+(((-1.0)*r02*x2969))+(((-1.0)*x2967*x2970)));
evalcond[4]=((((-1.0)*r21*sj5*x2969))+((sj1*sj2))+(((-1.0)*r22*x2970))+(((-1.0)*cj1*x2966))+((x2963*x2968)));
evalcond[5]=((((-1.0)*r11*sj5*x2969))+(((-1.0)*r12*x2970))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2966))+((x2963*x2964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2972=((1.0)*cj5);
CheckValue<IkReal> x2973=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2972))+(((-1.0)*r10*sj5)))),-1);
if(!x2973.valid){
continue;
}
CheckValue<IkReal> x2974 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2973.value)))+(x2974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2975=IKsin(j4);
IkReal x2976=IKcos(j4);
IkReal x2977=(cj5*r10);
IkReal x2978=(r01*sj5);
IkReal x2979=((1.0)*cj2);
IkReal x2980=(cj5*r00);
IkReal x2981=(cj5*r20);
IkReal x2982=((1.0)*x2976);
IkReal x2983=((1.0)*x2975);
IkReal x2984=(sj5*x2975);
evalcond[0]=((((-1.0)*x2981*x2983))+(((-1.0)*r22*x2982))+((r21*x2984)));
evalcond[1]=((((-1.0)*x2977*x2983))+((r11*x2984))+(((-1.0)*r12*x2982)));
evalcond[2]=(((x2976*x2980))+(((-1.0)*x2978*x2982))+(((-1.0)*r02*x2983)));
evalcond[3]=((-1.0)+((x2975*x2978))+(((-1.0)*x2980*x2983))+(((-1.0)*r02*x2982)));
evalcond[4]=(((x2976*x2981))+(((-1.0)*r21*sj5*x2982))+((sj1*sj2))+(((-1.0)*r22*x2983))+(((-1.0)*cj1*x2979)));
evalcond[5]=((((-1.0)*r12*x2983))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2982))+(((-1.0)*sj1*x2979))+((x2976*x2977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2985=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2985.valid){
continue;
}
CheckValue<IkReal> x2986 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2985.value)))+(x2986.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2987=IKsin(j4);
IkReal x2988=IKcos(j4);
IkReal x2989=(cj5*r10);
IkReal x2990=(r01*sj5);
IkReal x2991=((1.0)*cj2);
IkReal x2992=(cj5*r00);
IkReal x2993=(cj5*r20);
IkReal x2994=((1.0)*x2988);
IkReal x2995=((1.0)*x2987);
IkReal x2996=(sj5*x2987);
evalcond[0]=((((-1.0)*r22*x2994))+(((-1.0)*x2993*x2995))+((r21*x2996)));
evalcond[1]=((((-1.0)*r12*x2994))+(((-1.0)*x2989*x2995))+((r11*x2996)));
evalcond[2]=(((x2988*x2992))+(((-1.0)*r02*x2995))+(((-1.0)*x2990*x2994)));
evalcond[3]=((-1.0)+(((-1.0)*x2992*x2995))+((x2987*x2990))+(((-1.0)*r02*x2994)));
evalcond[4]=((((-1.0)*r22*x2995))+((sj1*sj2))+(((-1.0)*cj1*x2991))+(((-1.0)*r21*sj5*x2994))+((x2988*x2993)));
evalcond[5]=(((x2988*x2989))+(((-1.0)*sj1*x2991))+(((-1.0)*r12*x2995))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2997=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2997;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2997);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2998=((1.0)*cj5);
IkReal x2999=((((-1.0)*r21*x2998))+(((-1.0)*r20*sj5)));
j4eval[0]=x2999;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x2998)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2999);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3000=cj5*cj5;
IkReal x3001=r01*r01;
IkReal x3002=(cj5*r00);
IkReal x3003=(r01*sj5);
IkReal x3004=((((-2.0)*x3002*x3003))+x3001+(((-1.0)*x3000*x3001))+((x3000*(r00*r00)))+(r02*r02));
j4eval[0]=x3004;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x3003))+x3002))));
j4eval[2]=IKsign(x3004);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3005=cj5*cj5;
IkReal x3006=r01*r01;
IkReal x3007=(r01*sj5);
IkReal x3008=(cj5*r00);
CheckValue<IkReal> x3009 = IKatan2WithCheck(IkReal(((((-1.0)*x3007))+x3008)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3009.valid){
continue;
}
CheckValue<IkReal> x3010=IKPowWithIntegerCheck(IKsign((x3006+(((-2.0)*x3007*x3008))+(((-1.0)*x3005*x3006))+(r02*r02)+((x3005*(r00*r00))))),-1);
if(!x3010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3009.value)+(((1.5707963267949)*(x3010.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3011=IKsin(j4);
IkReal x3012=IKcos(j4);
IkReal x3013=(cj5*r10);
IkReal x3014=(r01*sj5);
IkReal x3015=(cj5*r00);
IkReal x3016=(cj5*r20);
IkReal x3017=((1.0)*x3012);
IkReal x3018=((1.0)*x3011);
IkReal x3019=(sj5*x3011);
evalcond[0]=((((-1.0)*r22*x3017))+((r21*x3019))+(((-1.0)*x3016*x3018)));
evalcond[1]=((((-1.0)*r12*x3017))+((r11*x3019))+(((-1.0)*x3013*x3018)));
evalcond[2]=((((-1.0)*r02*x3018))+((x3012*x3015))+(((-1.0)*x3014*x3017)));
evalcond[3]=((1.0)+((x3011*x3014))+(((-1.0)*r02*x3017))+(((-1.0)*x3015*x3018)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3012*x3013))+(((-1.0)*r11*sj5*x3017))+(((-1.0)*r12*x3018)));
evalcond[5]=((((-1.0)*r22*x3018))+(((-1.0)*r21*sj5*x3017))+((x3012*x3016))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3020=((1.0)*cj5);
CheckValue<IkReal> x3021 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3020)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3021.valid){
continue;
}
CheckValue<IkReal> x3022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3020))+(((-1.0)*r20*sj5)))),-1);
if(!x3022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3021.value)+(((1.5707963267949)*(x3022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3023=IKsin(j4);
IkReal x3024=IKcos(j4);
IkReal x3025=(cj5*r10);
IkReal x3026=(r01*sj5);
IkReal x3027=(cj5*r00);
IkReal x3028=(cj5*r20);
IkReal x3029=((1.0)*x3024);
IkReal x3030=((1.0)*x3023);
IkReal x3031=(sj5*x3023);
evalcond[0]=((((-1.0)*x3028*x3030))+((r21*x3031))+(((-1.0)*r22*x3029)));
evalcond[1]=((((-1.0)*r12*x3029))+(((-1.0)*x3025*x3030))+((r11*x3031)));
evalcond[2]=((((-1.0)*x3026*x3029))+(((-1.0)*r02*x3030))+((x3024*x3027)));
evalcond[3]=((1.0)+(((-1.0)*x3027*x3030))+((x3023*x3026))+(((-1.0)*r02*x3029)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3029))+((cj1*sj2))+(((-1.0)*r12*x3030))+((x3024*x3025)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x3030))+((x3024*x3028))+(((-1.0)*r21*sj5*x3029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3032 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3032.valid){
continue;
}
CheckValue<IkReal> x3033=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3032.value)+(((1.5707963267949)*(x3033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3034=IKsin(j4);
IkReal x3035=IKcos(j4);
IkReal x3036=(cj5*r10);
IkReal x3037=(r01*sj5);
IkReal x3038=(cj5*r00);
IkReal x3039=(cj5*r20);
IkReal x3040=((1.0)*x3035);
IkReal x3041=((1.0)*x3034);
IkReal x3042=(sj5*x3034);
evalcond[0]=(((r21*x3042))+(((-1.0)*r22*x3040))+(((-1.0)*x3039*x3041)));
evalcond[1]=((((-1.0)*r12*x3040))+(((-1.0)*x3036*x3041))+((r11*x3042)));
evalcond[2]=(((x3035*x3038))+(((-1.0)*x3037*x3040))+(((-1.0)*r02*x3041)));
evalcond[3]=((1.0)+(((-1.0)*x3038*x3041))+((x3034*x3037))+(((-1.0)*r02*x3040)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3041))+((cj1*sj2))+((x3035*x3036))+(((-1.0)*r11*sj5*x3040)));
evalcond[5]=((((-1.0)*r22*x3041))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3035*x3039))+(((-1.0)*r21*sj5*x3040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3043=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3043);
rxp1_1=(px*r21);
rxp1_2=(r11*x3043);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3044=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3044);
rxp1_1=(px*r21);
rxp1_2=(r11*x3044);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3045=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3045);
rxp1_1=(px*r21);
rxp1_2=(r11*x3045);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3048=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3048.valid){
continue;
}
IkReal x3046=x3048.value;
IkReal x3047=(sj0*x3046);
cj4array[0]=(((cj2*sj1*x3047))+((cj1*sj2*x3047)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3049=IKsin(j4);
IkReal x3050=IKcos(j4);
IkReal x3051=(cj5*r20);
IkReal x3052=(r21*sj5);
IkReal x3053=((1.0)*x3049);
IkReal x3054=((1.0)*x3050);
evalcond[0]=((-1.0)*r02*x3049);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3054)));
evalcond[2]=((((-1.0)*x3051*x3053))+((x3049*x3052)));
evalcond[3]=((((-1.0)*cj5*r10*x3053))+((r11*sj5*x3049)));
evalcond[4]=((((-1.0)*x3052*x3054))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3050*x3051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3056=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3056.valid){
continue;
}
IkReal x3055=x3056.value;
cj4array[0]=(((cj1*cj2*x3055))+(((-1.0)*sj1*sj2*x3055)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3057=IKsin(j4);
IkReal x3058=IKcos(j4);
IkReal x3059=(r11*sj5);
IkReal x3060=((1.0)*sj0);
IkReal x3061=((1.0)*x3058);
IkReal x3062=((1.0)*cj5*x3057);
evalcond[0]=((-1.0)*r02*x3057);
evalcond[1]=((((-1.0)*x3060))+(((-1.0)*r02*x3061)));
evalcond[2]=(((r21*sj5*x3057))+(((-1.0)*r20*x3062)));
evalcond[3]=((((-1.0)*r10*x3062))+((x3057*x3059)));
evalcond[4]=(((cj5*r10*x3058))+(((-1.0)*cj1*sj2*x3060))+(((-1.0)*cj2*sj1*x3060))+(((-1.0)*x3059*x3061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3063=IKPowWithIntegerCheck(r02,-1);
if(!x3063.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3063.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3064=IKsin(j4);
IkReal x3065=IKcos(j4);
IkReal x3066=((1.0)*sj0);
IkReal x3067=(cj5*x3065);
IkReal x3068=(sj5*x3064);
IkReal x3069=((1.0)*sj5*x3065);
IkReal x3070=((1.0)*cj5*x3064);
evalcond[0]=((-1.0)*r02*x3064);
evalcond[1]=((((-1.0)*r20*x3070))+((r21*x3068)));
evalcond[2]=((((-1.0)*r10*x3070))+((r11*x3068)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3067))+(((-1.0)*r21*x3069)));
evalcond[4]=((((-1.0)*r11*x3069))+((r10*x3067))+(((-1.0)*cj1*sj2*x3066))+(((-1.0)*cj2*sj1*x3066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3071=((1.0)*sj0);
IkReal x3072=((1.0)*cj0);
CheckValue<IkReal> x3073 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3072))+(((-1.0)*r12*x3071)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3071))+(((-1.0)*r01*sj5*x3072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3073.valid){
continue;
}
CheckValue<IkReal> x3074=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3073.value)+(((1.5707963267949)*(x3074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3075=IKsin(j4);
IkReal x3076=IKcos(j4);
IkReal x3077=(cj5*r10);
IkReal x3078=(r01*sj5);
IkReal x3079=((1.0)*cj2);
IkReal x3080=(cj5*r00);
IkReal x3081=((1.0)*sj0);
IkReal x3082=(cj5*r20);
IkReal x3083=(cj1*sj2);
IkReal x3084=((1.0)*x3076);
IkReal x3085=((1.0)*x3075);
IkReal x3086=(sj5*x3075);
evalcond[0]=((((-1.0)*x3082*x3085))+((r21*x3086))+(((-1.0)*r22*x3084)));
evalcond[1]=(cj0+((r11*x3086))+(((-1.0)*x3077*x3085))+(((-1.0)*r12*x3084)));
evalcond[2]=((((-1.0)*x3081))+(((-1.0)*x3080*x3085))+((x3075*x3078))+(((-1.0)*r02*x3084)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3079))+(((-1.0)*r21*sj5*x3084))+(((-1.0)*r22*x3085))+((x3076*x3082)));
evalcond[4]=((((-1.0)*x3078*x3084))+(((-1.0)*cj0*x3083))+(((-1.0)*r02*x3085))+((x3076*x3080))+(((-1.0)*cj0*sj1*x3079)));
evalcond[5]=((((-1.0)*sj0*sj1*x3079))+((x3076*x3077))+(((-1.0)*r12*x3085))+(((-1.0)*r11*sj5*x3084))+(((-1.0)*x3081*x3083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3087=((1.0)*cj5);
CheckValue<IkReal> x3088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3087)))),-1);
if(!x3088.valid){
continue;
}
CheckValue<IkReal> x3089 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3088.value)))+(x3089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3090=IKsin(j4);
IkReal x3091=IKcos(j4);
IkReal x3092=(cj5*r10);
IkReal x3093=(r01*sj5);
IkReal x3094=((1.0)*cj2);
IkReal x3095=(cj5*r00);
IkReal x3096=((1.0)*sj0);
IkReal x3097=(cj5*r20);
IkReal x3098=(cj1*sj2);
IkReal x3099=((1.0)*x3091);
IkReal x3100=((1.0)*x3090);
IkReal x3101=(sj5*x3090);
evalcond[0]=((((-1.0)*r22*x3099))+((r21*x3101))+(((-1.0)*x3097*x3100)));
evalcond[1]=(((r11*x3101))+(((-1.0)*r12*x3099))+cj0+(((-1.0)*x3092*x3100)));
evalcond[2]=((((-1.0)*r02*x3099))+(((-1.0)*x3096))+(((-1.0)*x3095*x3100))+((x3090*x3093)));
evalcond[3]=(((sj1*sj2))+((x3091*x3097))+(((-1.0)*cj1*x3094))+(((-1.0)*r21*sj5*x3099))+(((-1.0)*r22*x3100)));
evalcond[4]=((((-1.0)*cj0*sj1*x3094))+((x3091*x3095))+(((-1.0)*x3093*x3099))+(((-1.0)*r02*x3100))+(((-1.0)*cj0*x3098)));
evalcond[5]=((((-1.0)*r12*x3100))+(((-1.0)*x3096*x3098))+((x3091*x3092))+(((-1.0)*r11*sj5*x3099))+(((-1.0)*sj0*sj1*x3094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3102=((1.0)*cj5);
CheckValue<IkReal> x3103 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3103.valid){
continue;
}
CheckValue<IkReal> x3104=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3102))+(((-1.0)*r00*sj5)))),-1);
if(!x3104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3103.value)+(((1.5707963267949)*(x3104.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3105=IKsin(j4);
IkReal x3106=IKcos(j4);
IkReal x3107=(cj5*r10);
IkReal x3108=(r01*sj5);
IkReal x3109=((1.0)*cj2);
IkReal x3110=(cj5*r00);
IkReal x3111=((1.0)*sj0);
IkReal x3112=(cj5*r20);
IkReal x3113=(cj1*sj2);
IkReal x3114=((1.0)*x3106);
IkReal x3115=((1.0)*x3105);
IkReal x3116=(sj5*x3105);
evalcond[0]=(((r21*x3116))+(((-1.0)*r22*x3114))+(((-1.0)*x3112*x3115)));
evalcond[1]=(cj0+(((-1.0)*r12*x3114))+((r11*x3116))+(((-1.0)*x3107*x3115)));
evalcond[2]=((((-1.0)*r02*x3114))+(((-1.0)*x3111))+(((-1.0)*x3110*x3115))+((x3105*x3108)));
evalcond[3]=((((-1.0)*cj1*x3109))+((sj1*sj2))+(((-1.0)*r22*x3115))+((x3106*x3112))+(((-1.0)*r21*sj5*x3114)));
evalcond[4]=((((-1.0)*r02*x3115))+(((-1.0)*cj0*x3113))+(((-1.0)*x3108*x3114))+((x3106*x3110))+(((-1.0)*cj0*sj1*x3109)));
evalcond[5]=((((-1.0)*r12*x3115))+(((-1.0)*r11*sj5*x3114))+(((-1.0)*sj0*sj1*x3109))+((x3106*x3107))+(((-1.0)*x3111*x3113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3117=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3117;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3117);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3118=r21*r21;
IkReal x3119=cj5*cj5;
IkReal x3120=(sj1*sj2);
IkReal x3121=(r21*sj5);
IkReal x3122=(cj5*r20);
IkReal x3123=(cj1*cj2);
IkReal x3124=(((x3118*x3119))+(((-1.0)*x3118))+(((-1.0)*x3119*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x3121*x3122)));
j4eval[0]=x3124;
j4eval[1]=((IKabs((((x3120*x3121))+(((-1.0)*x3120*x3122))+(((-1.0)*x3121*x3123))+((x3122*x3123)))))+(IKabs((((r22*x3120))+(((-1.0)*r22*x3123))))));
j4eval[2]=IKsign(x3124);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458648458924)*py))+(((-0.408399850136537)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458648458924)*px))+(((0.408399850136537)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458648458924)*py))+(((-0.408399850136537)*px))))+IKsqr(((((1.52458648458924)*px))+(((0.408399850136537)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458648458924)*py))+(((-0.408399850136537)*px))), ((((1.52458648458924)*px))+(((0.408399850136537)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3125=IKsin(j0);
IkReal x3126=IKcos(j0);
evalcond[0]=((((0.612)*x3126))+(((-0.16394)*x3125))+(((-1.0)*px)));
evalcond[1]=((((0.16394)*x3126))+(((0.612)*x3125))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3127=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3127;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3127);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3128=((1.0)*cj5);
IkReal x3129=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3128)));
j4eval[0]=x3129;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3128))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3129);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3130=((1.0)*cj5);
IkReal x3131=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3130)));
j4eval[0]=x3131;
j4eval[1]=IKsign(x3131);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3130))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3132=((1.0)*cj5);
CheckValue<IkReal> x3133=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3132)))),-1);
if(!x3133.valid){
continue;
}
CheckValue<IkReal> x3134 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3132))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3133.value)))+(x3134.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3135=IKcos(j4);
IkReal x3136=IKsin(j4);
IkReal x3137=((1.0)*sj0);
IkReal x3138=(cj5*r00);
IkReal x3139=(cj5*r10);
IkReal x3140=(cj5*r20);
IkReal x3141=((1.0)*x3135);
IkReal x3142=((1.0)*x3136);
IkReal x3143=(sj5*x3135);
IkReal x3144=(sj5*x3136);
evalcond[0]=((((-1.0)*x3140*x3141))+((r22*x3136))+((r21*x3143)));
evalcond[1]=((((-1.0)*r22*x3141))+(((-1.0)*x3140*x3142))+((r21*x3144)));
evalcond[2]=((((-1.0)*r12*x3141))+cj0+((r11*x3144))+(((-1.0)*x3139*x3142)));
evalcond[3]=(((r01*x3143))+((r02*x3136))+(((-1.0)*x3138*x3141))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3143))+((r12*x3136))+(((-1.0)*x3139*x3141))+(((-1.0)*x3137)));
evalcond[5]=(((r01*x3144))+(((-1.0)*r02*x3141))+(((-1.0)*x3138*x3142))+(((-1.0)*x3137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3145=((1.0)*cj5);
CheckValue<IkReal> x3146 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3146.valid){
continue;
}
CheckValue<IkReal> x3147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3145)))),-1);
if(!x3147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3146.value)+(((1.5707963267949)*(x3147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3148=IKcos(j4);
IkReal x3149=IKsin(j4);
IkReal x3150=((1.0)*sj0);
IkReal x3151=(cj5*r00);
IkReal x3152=(cj5*r10);
IkReal x3153=(cj5*r20);
IkReal x3154=((1.0)*x3148);
IkReal x3155=((1.0)*x3149);
IkReal x3156=(sj5*x3148);
IkReal x3157=(sj5*x3149);
evalcond[0]=((((-1.0)*x3153*x3154))+((r22*x3149))+((r21*x3156)));
evalcond[1]=((((-1.0)*r22*x3154))+(((-1.0)*x3153*x3155))+((r21*x3157)));
evalcond[2]=(cj0+((r11*x3157))+(((-1.0)*r12*x3154))+(((-1.0)*x3152*x3155)));
evalcond[3]=(((r02*x3149))+((r01*x3156))+(((-1.0)*cj0))+(((-1.0)*x3151*x3154)));
evalcond[4]=((((-1.0)*x3150))+((r12*x3149))+((r11*x3156))+(((-1.0)*x3152*x3154)));
evalcond[5]=((((-1.0)*x3150))+((r01*x3157))+(((-1.0)*r02*x3154))+(((-1.0)*x3151*x3155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3158 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3158.valid){
continue;
}
CheckValue<IkReal> x3159=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3158.value)+(((1.5707963267949)*(x3159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3160=IKcos(j4);
IkReal x3161=IKsin(j4);
IkReal x3162=((1.0)*sj0);
IkReal x3163=(cj5*r00);
IkReal x3164=(cj5*r10);
IkReal x3165=(cj5*r20);
IkReal x3166=((1.0)*x3160);
IkReal x3167=((1.0)*x3161);
IkReal x3168=(sj5*x3160);
IkReal x3169=(sj5*x3161);
evalcond[0]=(((r22*x3161))+(((-1.0)*x3165*x3166))+((r21*x3168)));
evalcond[1]=((((-1.0)*x3165*x3167))+((r21*x3169))+(((-1.0)*r22*x3166)));
evalcond[2]=((((-1.0)*r12*x3166))+cj0+((r11*x3169))+(((-1.0)*x3164*x3167)));
evalcond[3]=(((r02*x3161))+(((-1.0)*x3163*x3166))+((r01*x3168))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3168))+((r12*x3161))+(((-1.0)*x3164*x3166))+(((-1.0)*x3162)));
evalcond[5]=((((-1.0)*x3163*x3167))+((r01*x3169))+(((-1.0)*r02*x3166))+(((-1.0)*x3162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458648458924)*py))+(((-0.408399850136537)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458648458924)*px))+(((0.408399850136537)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458648458924)*py))+(((-0.408399850136537)*px))))+IKsqr(((((1.52458648458924)*px))+(((0.408399850136537)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458648458924)*py))+(((-0.408399850136537)*px))), ((((1.52458648458924)*px))+(((0.408399850136537)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3170=IKsin(j0);
IkReal x3171=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.612)*x3171))+(((-0.16394)*x3170)));
evalcond[1]=((((-1.0)*py))+(((0.16394)*x3171))+(((0.612)*x3170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3172=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3172;
j4eval[1]=IKsign(x3172);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3173=((1.0)*cj5);
IkReal x3174=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3173)));
j4eval[0]=x3174;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3173)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3174);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3175=cj5*cj5;
IkReal x3176=((1.0)*r20);
IkReal x3177=(r01*r21);
IkReal x3178=(r21*sj5);
IkReal x3179=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3177))+(((-1.0)*r00*x3175*x3176))+((cj5*r00*x3178))+((x3175*x3177)));
j4eval[0]=x3179;
j4eval[1]=((IKabs((((cj0*x3178))+(((-1.0)*cj0*cj5*x3176)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3179);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3180=cj5*cj5;
IkReal x3181=((1.0)*r20);
IkReal x3182=(r01*r21);
IkReal x3183=(r21*sj5);
CheckValue<IkReal> x3184=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3180*x3181))+((cj5*r00*x3183))+((x3180*x3182))+(((-1.0)*x3182)))),-1);
if(!x3184.valid){
continue;
}
CheckValue<IkReal> x3185 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3183))+(((-1.0)*cj0*cj5*x3181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3184.value)))+(x3185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3186=IKcos(j4);
IkReal x3187=IKsin(j4);
IkReal x3188=(cj5*r00);
IkReal x3189=(cj5*r10);
IkReal x3190=(cj5*r20);
IkReal x3191=((1.0)*x3186);
IkReal x3192=((1.0)*x3187);
IkReal x3193=(sj5*x3186);
IkReal x3194=(sj5*x3187);
evalcond[0]=((((-1.0)*x3190*x3191))+((r22*x3187))+((r21*x3193)));
evalcond[1]=((((-1.0)*x3190*x3192))+(((-1.0)*r22*x3191))+((r21*x3194)));
evalcond[2]=(cj0+(((-1.0)*x3188*x3191))+((r01*x3193))+((r02*x3187)));
evalcond[3]=(sj0+((r12*x3187))+((r11*x3193))+(((-1.0)*x3189*x3191)));
evalcond[4]=(cj0+((r11*x3194))+(((-1.0)*r12*x3191))+(((-1.0)*x3189*x3192)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3188*x3192))+((r01*x3194))+(((-1.0)*r02*x3191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3195=((1.0)*cj5);
CheckValue<IkReal> x3196 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3195)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3196.valid){
continue;
}
CheckValue<IkReal> x3197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3195)))),-1);
if(!x3197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3196.value)+(((1.5707963267949)*(x3197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3198=IKcos(j4);
IkReal x3199=IKsin(j4);
IkReal x3200=(cj5*r00);
IkReal x3201=(cj5*r10);
IkReal x3202=(cj5*r20);
IkReal x3203=((1.0)*x3198);
IkReal x3204=((1.0)*x3199);
IkReal x3205=(sj5*x3198);
IkReal x3206=(sj5*x3199);
evalcond[0]=((((-1.0)*x3202*x3203))+((r22*x3199))+((r21*x3205)));
evalcond[1]=((((-1.0)*x3202*x3204))+(((-1.0)*r22*x3203))+((r21*x3206)));
evalcond[2]=(cj0+(((-1.0)*x3200*x3203))+((r01*x3205))+((r02*x3199)));
evalcond[3]=(sj0+((r11*x3205))+(((-1.0)*x3201*x3203))+((r12*x3199)));
evalcond[4]=(cj0+((r11*x3206))+(((-1.0)*r12*x3203))+(((-1.0)*x3201*x3204)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3203))+(((-1.0)*x3200*x3204))+((r01*x3206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3207 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3207.valid){
continue;
}
CheckValue<IkReal> x3208=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3207.value)+(((1.5707963267949)*(x3208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3209=IKcos(j4);
IkReal x3210=IKsin(j4);
IkReal x3211=(cj5*r00);
IkReal x3212=(cj5*r10);
IkReal x3213=(cj5*r20);
IkReal x3214=((1.0)*x3209);
IkReal x3215=((1.0)*x3210);
IkReal x3216=(sj5*x3209);
IkReal x3217=(sj5*x3210);
evalcond[0]=(((r22*x3210))+((r21*x3216))+(((-1.0)*x3213*x3214)));
evalcond[1]=(((r21*x3217))+(((-1.0)*r22*x3214))+(((-1.0)*x3213*x3215)));
evalcond[2]=((((-1.0)*x3211*x3214))+cj0+((r01*x3216))+((r02*x3210)));
evalcond[3]=(sj0+((r12*x3210))+((r11*x3216))+(((-1.0)*x3212*x3214)));
evalcond[4]=(cj0+((r11*x3217))+(((-1.0)*x3212*x3215))+(((-1.0)*r12*x3214)));
evalcond[5]=((((-1.0)*x3211*x3215))+(((-1.0)*sj0))+((r01*x3217))+(((-1.0)*r02*x3214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09979260705136)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09979260705136)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09979260705136)*px))+IKsqr(((6.09979260705136)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09979260705136)*px), ((6.09979260705136)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.16394)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.16394)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3218=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3218;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3218);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3219=((1.0)*cj5);
IkReal x3220=((((-1.0)*r01*x3219))+(((-1.0)*r00*sj5)));
j4eval[0]=x3220;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3219)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3220);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3221=((1.0)*cj5);
IkReal x3222=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3221)));
j4eval[0]=x3222;
j4eval[1]=IKsign(x3222);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3221))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3223=((1.0)*cj5);
CheckValue<IkReal> x3224 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3223))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3224.valid){
continue;
}
CheckValue<IkReal> x3225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3223)))),-1);
if(!x3225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3224.value)+(((1.5707963267949)*(x3225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3226=IKcos(j4);
IkReal x3227=IKsin(j4);
IkReal x3228=((1.0)*sj0);
IkReal x3229=(cj5*r00);
IkReal x3230=(cj5*r10);
IkReal x3231=(cj5*r20);
IkReal x3232=((1.0)*x3226);
IkReal x3233=((1.0)*x3227);
IkReal x3234=(sj5*x3226);
IkReal x3235=(sj5*x3227);
evalcond[0]=((((-1.0)*x3231*x3232))+((r22*x3227))+((r21*x3234)));
evalcond[1]=((((-1.0)*x3231*x3233))+(((-1.0)*r22*x3232))+((r21*x3235)));
evalcond[2]=(cj0+(((-1.0)*x3230*x3233))+((r11*x3235))+(((-1.0)*r12*x3232)));
evalcond[3]=((((-1.0)*x3229*x3232))+((r02*x3227))+((r01*x3234))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3227))+(((-1.0)*x3230*x3232))+((r11*x3234))+(((-1.0)*x3228)));
evalcond[5]=((((-1.0)*x3229*x3233))+(((-1.0)*r02*x3232))+((r01*x3235))+(((-1.0)*x3228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3236=((1.0)*cj5);
CheckValue<IkReal> x3237=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3236))+(((-1.0)*r00*sj5)))),-1);
if(!x3237.valid){
continue;
}
CheckValue<IkReal> x3238 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3237.value)))+(x3238.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3239=IKcos(j4);
IkReal x3240=IKsin(j4);
IkReal x3241=((1.0)*sj0);
IkReal x3242=(cj5*r00);
IkReal x3243=(cj5*r10);
IkReal x3244=(cj5*r20);
IkReal x3245=((1.0)*x3239);
IkReal x3246=((1.0)*x3240);
IkReal x3247=(sj5*x3239);
IkReal x3248=(sj5*x3240);
evalcond[0]=(((r22*x3240))+((r21*x3247))+(((-1.0)*x3244*x3245)));
evalcond[1]=(((r21*x3248))+(((-1.0)*x3244*x3246))+(((-1.0)*r22*x3245)));
evalcond[2]=((((-1.0)*x3243*x3246))+cj0+(((-1.0)*r12*x3245))+((r11*x3248)));
evalcond[3]=(((r01*x3247))+((r02*x3240))+(((-1.0)*x3242*x3245))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3243*x3245))+(((-1.0)*x3241))+((r12*x3240))+((r11*x3247)));
evalcond[5]=(((r01*x3248))+(((-1.0)*x3241))+(((-1.0)*r02*x3245))+(((-1.0)*x3242*x3246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3249 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3249.valid){
continue;
}
CheckValue<IkReal> x3250=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3249.value)+(((1.5707963267949)*(x3250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3251=IKcos(j4);
IkReal x3252=IKsin(j4);
IkReal x3253=((1.0)*sj0);
IkReal x3254=(cj5*r00);
IkReal x3255=(cj5*r10);
IkReal x3256=(cj5*r20);
IkReal x3257=((1.0)*x3251);
IkReal x3258=((1.0)*x3252);
IkReal x3259=(sj5*x3251);
IkReal x3260=(sj5*x3252);
evalcond[0]=(((r21*x3259))+((r22*x3252))+(((-1.0)*x3256*x3257)));
evalcond[1]=(((r21*x3260))+(((-1.0)*r22*x3257))+(((-1.0)*x3256*x3258)));
evalcond[2]=(cj0+((r11*x3260))+(((-1.0)*r12*x3257))+(((-1.0)*x3255*x3258)));
evalcond[3]=(((r02*x3252))+(((-1.0)*x3254*x3257))+((r01*x3259))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3252))+((r11*x3259))+(((-1.0)*x3255*x3257))+(((-1.0)*x3253)));
evalcond[5]=((((-1.0)*r02*x3257))+((r01*x3260))+(((-1.0)*x3254*x3258))+(((-1.0)*x3253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09979260705136)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09979260705136)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09979260705136)*px))+IKsqr(((6.09979260705136)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09979260705136)*px), ((6.09979260705136)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.16394)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.16394)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3261=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3261;
j4eval[1]=IKsign(x3261);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3262=((1.0)*cj5);
IkReal x3263=((((-1.0)*r11*x3262))+(((-1.0)*r10*sj5)));
j4eval[0]=x3263;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3262))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3264=cj5*cj5;
IkReal x3265=((1.0)*r20);
IkReal x3266=(r01*r21);
IkReal x3267=(r21*sj5);
IkReal x3268=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3266))+(((-1.0)*r00*x3264*x3265))+((cj5*r00*x3267))+((x3264*x3266)));
j4eval[0]=x3268;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3265))+((cj0*x3267)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3269=cj5*cj5;
IkReal x3270=((1.0)*r20);
IkReal x3271=(r01*r21);
IkReal x3272=(r21*sj5);
CheckValue<IkReal> x3273 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3272))+(((-1.0)*cj0*cj5*x3270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3273.valid){
continue;
}
CheckValue<IkReal> x3274=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3271))+(((-1.0)*r00*x3269*x3270))+((cj5*r00*x3272))+((x3269*x3271)))),-1);
if(!x3274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3273.value)+(((1.5707963267949)*(x3274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3275=IKcos(j4);
IkReal x3276=IKsin(j4);
IkReal x3277=(cj5*r00);
IkReal x3278=(cj5*r10);
IkReal x3279=(cj5*r20);
IkReal x3280=((1.0)*x3275);
IkReal x3281=((1.0)*x3276);
IkReal x3282=(sj5*x3275);
IkReal x3283=(sj5*x3276);
evalcond[0]=((((-1.0)*x3279*x3280))+((r21*x3282))+((r22*x3276)));
evalcond[1]=((((-1.0)*r22*x3280))+(((-1.0)*x3279*x3281))+((r21*x3283)));
evalcond[2]=(cj0+(((-1.0)*x3277*x3280))+((r02*x3276))+((r01*x3282)));
evalcond[3]=(sj0+((r12*x3276))+((r11*x3282))+(((-1.0)*x3278*x3280)));
evalcond[4]=((((-1.0)*r12*x3280))+cj0+((r11*x3283))+(((-1.0)*x3278*x3281)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3277*x3281))+(((-1.0)*r02*x3280))+((r01*x3283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3284=((1.0)*cj5);
CheckValue<IkReal> x3285=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3284)))),-1);
if(!x3285.valid){
continue;
}
CheckValue<IkReal> x3286 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3284))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3285.value)))+(x3286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3287=IKcos(j4);
IkReal x3288=IKsin(j4);
IkReal x3289=(cj5*r00);
IkReal x3290=(cj5*r10);
IkReal x3291=(cj5*r20);
IkReal x3292=((1.0)*x3287);
IkReal x3293=((1.0)*x3288);
IkReal x3294=(sj5*x3287);
IkReal x3295=(sj5*x3288);
evalcond[0]=((((-1.0)*x3291*x3292))+((r22*x3288))+((r21*x3294)));
evalcond[1]=((((-1.0)*r22*x3292))+(((-1.0)*x3291*x3293))+((r21*x3295)));
evalcond[2]=(((r01*x3294))+cj0+((r02*x3288))+(((-1.0)*x3289*x3292)));
evalcond[3]=(sj0+((r11*x3294))+((r12*x3288))+(((-1.0)*x3290*x3292)));
evalcond[4]=((((-1.0)*r12*x3292))+cj0+((r11*x3295))+(((-1.0)*x3290*x3293)));
evalcond[5]=(((r01*x3295))+(((-1.0)*sj0))+(((-1.0)*r02*x3292))+(((-1.0)*x3289*x3293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3296 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3296.valid){
continue;
}
CheckValue<IkReal> x3297=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3296.value)+(((1.5707963267949)*(x3297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3298=IKcos(j4);
IkReal x3299=IKsin(j4);
IkReal x3300=(cj5*r00);
IkReal x3301=(cj5*r10);
IkReal x3302=(cj5*r20);
IkReal x3303=((1.0)*x3298);
IkReal x3304=((1.0)*x3299);
IkReal x3305=(sj5*x3298);
IkReal x3306=(sj5*x3299);
evalcond[0]=(((r21*x3305))+((r22*x3299))+(((-1.0)*x3302*x3303)));
evalcond[1]=(((r21*x3306))+(((-1.0)*r22*x3303))+(((-1.0)*x3302*x3304)));
evalcond[2]=(cj0+((r02*x3299))+((r01*x3305))+(((-1.0)*x3300*x3303)));
evalcond[3]=(sj0+((r11*x3305))+(((-1.0)*x3301*x3303))+((r12*x3299)));
evalcond[4]=(cj0+((r11*x3306))+(((-1.0)*x3301*x3304))+(((-1.0)*r12*x3303)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3303))+((r01*x3306))+(((-1.0)*x3300*x3304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.408399850136537)*px))+(((-1.52458648458924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.408399850136537)*py))+(((-1.52458648458924)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.408399850136537)*px))+(((-1.52458648458924)*py))))+IKsqr(((((0.408399850136537)*py))+(((-1.52458648458924)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.408399850136537)*px))+(((-1.52458648458924)*py))), ((((0.408399850136537)*py))+(((-1.52458648458924)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3307=IKcos(j0);
IkReal x3308=IKsin(j0);
evalcond[0]=((((-0.16394)*x3308))+(((-1.0)*px))+(((-0.612)*x3307)));
evalcond[1]=((((0.16394)*x3307))+(((-1.0)*py))+(((-0.612)*x3308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3309=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3309;
j4eval[1]=IKsign(x3309);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3310=((1.0)*cj5);
IkReal x3311=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3310)));
j4eval[0]=x3311;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3310)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3311);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3312=cj5*cj5;
IkReal x3313=((1.0)*r20);
IkReal x3314=(r01*r21);
IkReal x3315=(r21*sj5);
IkReal x3316=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3315))+((x3312*x3314))+(((-1.0)*r00*x3312*x3313))+(((-1.0)*x3314)));
j4eval[0]=x3316;
j4eval[1]=((IKabs((((cj0*x3315))+(((-1.0)*cj0*cj5*x3313)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3316);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3317=cj5*cj5;
IkReal x3318=((1.0)*r20);
IkReal x3319=(r01*r21);
IkReal x3320=(r21*sj5);
CheckValue<IkReal> x3321 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3318))+((cj0*x3320)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3321.valid){
continue;
}
CheckValue<IkReal> x3322=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3317*x3318))+(((-1.0)*r02*r22))+((x3317*x3319))+((cj5*r00*x3320))+(((-1.0)*x3319)))),-1);
if(!x3322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3321.value)+(((1.5707963267949)*(x3322.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3323=IKcos(j4);
IkReal x3324=IKsin(j4);
IkReal x3325=(cj5*r00);
IkReal x3326=(cj5*r10);
IkReal x3327=(cj5*r20);
IkReal x3328=((1.0)*x3323);
IkReal x3329=((1.0)*x3324);
IkReal x3330=(sj5*x3323);
IkReal x3331=(sj5*x3324);
evalcond[0]=(((r22*x3324))+((r21*x3330))+(((-1.0)*x3327*x3328)));
evalcond[1]=(((r21*x3331))+(((-1.0)*x3327*x3329))+(((-1.0)*r22*x3328)));
evalcond[2]=(cj0+(((-1.0)*x3325*x3328))+((r01*x3330))+((r02*x3324)));
evalcond[3]=(((r12*x3324))+sj0+(((-1.0)*x3326*x3328))+((r11*x3330)));
evalcond[4]=((((-1.0)*x3326*x3329))+cj0+((r11*x3331))+(((-1.0)*r12*x3328)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3328))+(((-1.0)*x3325*x3329))+((r01*x3331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3332=((1.0)*cj5);
CheckValue<IkReal> x3333 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3332)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3333.valid){
continue;
}
CheckValue<IkReal> x3334=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3332)))),-1);
if(!x3334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3333.value)+(((1.5707963267949)*(x3334.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3335=IKcos(j4);
IkReal x3336=IKsin(j4);
IkReal x3337=(cj5*r00);
IkReal x3338=(cj5*r10);
IkReal x3339=(cj5*r20);
IkReal x3340=((1.0)*x3335);
IkReal x3341=((1.0)*x3336);
IkReal x3342=(sj5*x3335);
IkReal x3343=(sj5*x3336);
evalcond[0]=(((r21*x3342))+((r22*x3336))+(((-1.0)*x3339*x3340)));
evalcond[1]=(((r21*x3343))+(((-1.0)*x3339*x3341))+(((-1.0)*r22*x3340)));
evalcond[2]=(cj0+(((-1.0)*x3337*x3340))+((r02*x3336))+((r01*x3342)));
evalcond[3]=(sj0+((r12*x3336))+(((-1.0)*x3338*x3340))+((r11*x3342)));
evalcond[4]=(cj0+(((-1.0)*x3338*x3341))+(((-1.0)*r12*x3340))+((r11*x3343)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3337*x3341))+(((-1.0)*r02*x3340))+((r01*x3343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3344 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3344.valid){
continue;
}
CheckValue<IkReal> x3345=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3344.value)+(((1.5707963267949)*(x3345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3346=IKcos(j4);
IkReal x3347=IKsin(j4);
IkReal x3348=(cj5*r00);
IkReal x3349=(cj5*r10);
IkReal x3350=(cj5*r20);
IkReal x3351=((1.0)*x3346);
IkReal x3352=((1.0)*x3347);
IkReal x3353=(sj5*x3346);
IkReal x3354=(sj5*x3347);
evalcond[0]=(((r22*x3347))+(((-1.0)*x3350*x3351))+((r21*x3353)));
evalcond[1]=((((-1.0)*x3350*x3352))+((r21*x3354))+(((-1.0)*r22*x3351)));
evalcond[2]=((((-1.0)*x3348*x3351))+cj0+((r01*x3353))+((r02*x3347)));
evalcond[3]=(sj0+((r11*x3353))+(((-1.0)*x3349*x3351))+((r12*x3347)));
evalcond[4]=(cj0+((r11*x3354))+(((-1.0)*x3349*x3352))+(((-1.0)*r12*x3351)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3348*x3352))+(((-1.0)*r02*x3351))+((r01*x3354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.408399850136537)*px))+(((-1.52458648458924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.408399850136537)*py))+(((-1.52458648458924)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.408399850136537)*px))+(((-1.52458648458924)*py))))+IKsqr(((((0.408399850136537)*py))+(((-1.52458648458924)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.408399850136537)*px))+(((-1.52458648458924)*py))), ((((0.408399850136537)*py))+(((-1.52458648458924)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3355=IKcos(j0);
IkReal x3356=IKsin(j0);
evalcond[0]=((((-0.612)*x3355))+(((-1.0)*px))+(((-0.16394)*x3356)));
evalcond[1]=((((-0.612)*x3356))+(((-1.0)*py))+(((0.16394)*x3355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3357=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3357;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3357);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3358=((1.0)*cj5);
IkReal x3359=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3358)));
j4eval[0]=x3359;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3358)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3359);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3360=((1.0)*cj5);
IkReal x3361=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3360)));
j4eval[0]=x3361;
j4eval[1]=IKsign(x3361);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3360))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3362=((1.0)*cj5);
CheckValue<IkReal> x3363 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3362))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3363.valid){
continue;
}
CheckValue<IkReal> x3364=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3362)))),-1);
if(!x3364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3363.value)+(((1.5707963267949)*(x3364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3365=IKcos(j4);
IkReal x3366=IKsin(j4);
IkReal x3367=((1.0)*sj0);
IkReal x3368=(cj5*r00);
IkReal x3369=(cj5*r10);
IkReal x3370=(cj5*r20);
IkReal x3371=((1.0)*x3365);
IkReal x3372=((1.0)*x3366);
IkReal x3373=(sj5*x3365);
IkReal x3374=(sj5*x3366);
evalcond[0]=(((r22*x3366))+(((-1.0)*x3370*x3371))+((r21*x3373)));
evalcond[1]=((((-1.0)*r22*x3371))+(((-1.0)*x3370*x3372))+((r21*x3374)));
evalcond[2]=(cj0+(((-1.0)*r12*x3371))+((r11*x3374))+(((-1.0)*x3369*x3372)));
evalcond[3]=(((r01*x3373))+((r02*x3366))+(((-1.0)*x3368*x3371))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3367))+((r12*x3366))+((r11*x3373))+(((-1.0)*x3369*x3371)));
evalcond[5]=(((r01*x3374))+(((-1.0)*x3367))+(((-1.0)*r02*x3371))+(((-1.0)*x3368*x3372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3375=((1.0)*cj5);
CheckValue<IkReal> x3376 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3375)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3376.valid){
continue;
}
CheckValue<IkReal> x3377=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3375)))),-1);
if(!x3377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3376.value)+(((1.5707963267949)*(x3377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3378=IKcos(j4);
IkReal x3379=IKsin(j4);
IkReal x3380=((1.0)*sj0);
IkReal x3381=(cj5*r00);
IkReal x3382=(cj5*r10);
IkReal x3383=(cj5*r20);
IkReal x3384=((1.0)*x3378);
IkReal x3385=((1.0)*x3379);
IkReal x3386=(sj5*x3378);
IkReal x3387=(sj5*x3379);
evalcond[0]=(((r22*x3379))+(((-1.0)*x3383*x3384))+((r21*x3386)));
evalcond[1]=((((-1.0)*r22*x3384))+(((-1.0)*x3383*x3385))+((r21*x3387)));
evalcond[2]=(cj0+(((-1.0)*x3382*x3385))+((r11*x3387))+(((-1.0)*r12*x3384)));
evalcond[3]=(((r01*x3386))+((r02*x3379))+(((-1.0)*x3381*x3384))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3379))+(((-1.0)*x3382*x3384))+((r11*x3386))+(((-1.0)*x3380)));
evalcond[5]=(((r01*x3387))+(((-1.0)*x3381*x3385))+(((-1.0)*r02*x3384))+(((-1.0)*x3380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3388 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3388.valid){
continue;
}
CheckValue<IkReal> x3389=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3388.value)+(((1.5707963267949)*(x3389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3390=IKcos(j4);
IkReal x3391=IKsin(j4);
IkReal x3392=((1.0)*sj0);
IkReal x3393=(cj5*r00);
IkReal x3394=(cj5*r10);
IkReal x3395=(cj5*r20);
IkReal x3396=((1.0)*x3390);
IkReal x3397=((1.0)*x3391);
IkReal x3398=(sj5*x3390);
IkReal x3399=(sj5*x3391);
evalcond[0]=((((-1.0)*x3395*x3396))+((r21*x3398))+((r22*x3391)));
evalcond[1]=((((-1.0)*r22*x3396))+(((-1.0)*x3395*x3397))+((r21*x3399)));
evalcond[2]=((((-1.0)*x3394*x3397))+cj0+((r11*x3399))+(((-1.0)*r12*x3396)));
evalcond[3]=(((r01*x3398))+((r02*x3391))+(((-1.0)*x3393*x3396))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3394*x3396))+((r11*x3398))+(((-1.0)*x3392))+((r12*x3391)));
evalcond[5]=(((r01*x3399))+(((-1.0)*r02*x3396))+(((-1.0)*x3392))+(((-1.0)*x3393*x3397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09979260705136)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09979260705136)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09979260705136)*px))+IKsqr(((6.09979260705136)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09979260705136)*px), ((6.09979260705136)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.16394)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.16394)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3400=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3400;
j4eval[1]=IKsign(x3400);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3401=((1.0)*cj5);
IkReal x3402=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3401)));
j4eval[0]=x3402;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3401))))));
j4eval[2]=IKsign(x3402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3403=cj5*cj5;
IkReal x3404=((1.0)*r20);
IkReal x3405=(r01*r21);
IkReal x3406=(r21*sj5);
IkReal x3407=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3405))+((x3403*x3405))+(((-1.0)*r00*x3403*x3404))+((cj5*r00*x3406)));
j4eval[0]=x3407;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3406))+(((-1.0)*cj0*cj5*x3404))))));
j4eval[2]=IKsign(x3407);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3408=cj5*cj5;
IkReal x3409=((1.0)*r20);
IkReal x3410=(r01*r21);
IkReal x3411=(r21*sj5);
CheckValue<IkReal> x3412=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3408*x3409))+(((-1.0)*r02*r22))+(((-1.0)*x3410))+((x3408*x3410))+((cj5*r00*x3411)))),-1);
if(!x3412.valid){
continue;
}
CheckValue<IkReal> x3413 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3411))+(((-1.0)*cj0*cj5*x3409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3412.value)))+(x3413.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3414=IKcos(j4);
IkReal x3415=IKsin(j4);
IkReal x3416=(cj5*r00);
IkReal x3417=(cj5*r10);
IkReal x3418=(cj5*r20);
IkReal x3419=((1.0)*x3414);
IkReal x3420=((1.0)*x3415);
IkReal x3421=(sj5*x3414);
IkReal x3422=(sj5*x3415);
evalcond[0]=((((-1.0)*x3418*x3419))+((r22*x3415))+((r21*x3421)));
evalcond[1]=((((-1.0)*r22*x3419))+(((-1.0)*x3418*x3420))+((r21*x3422)));
evalcond[2]=(cj0+((r02*x3415))+(((-1.0)*x3416*x3419))+((r01*x3421)));
evalcond[3]=(sj0+((r12*x3415))+(((-1.0)*x3417*x3419))+((r11*x3421)));
evalcond[4]=(cj0+(((-1.0)*x3417*x3420))+(((-1.0)*r12*x3419))+((r11*x3422)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3419))+(((-1.0)*x3416*x3420))+((r01*x3422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3423=((1.0)*cj5);
CheckValue<IkReal> x3424 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3423)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3424.valid){
continue;
}
CheckValue<IkReal> x3425=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3423))+(((-1.0)*r10*sj5)))),-1);
if(!x3425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3424.value)+(((1.5707963267949)*(x3425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3426=IKcos(j4);
IkReal x3427=IKsin(j4);
IkReal x3428=(cj5*r00);
IkReal x3429=(cj5*r10);
IkReal x3430=(cj5*r20);
IkReal x3431=((1.0)*x3426);
IkReal x3432=((1.0)*x3427);
IkReal x3433=(sj5*x3426);
IkReal x3434=(sj5*x3427);
evalcond[0]=((((-1.0)*x3430*x3431))+((r21*x3433))+((r22*x3427)));
evalcond[1]=((((-1.0)*x3430*x3432))+(((-1.0)*r22*x3431))+((r21*x3434)));
evalcond[2]=((((-1.0)*x3428*x3431))+((r01*x3433))+cj0+((r02*x3427)));
evalcond[3]=(sj0+((r12*x3427))+((r11*x3433))+(((-1.0)*x3429*x3431)));
evalcond[4]=((((-1.0)*r12*x3431))+cj0+((r11*x3434))+(((-1.0)*x3429*x3432)));
evalcond[5]=((((-1.0)*x3428*x3432))+((r01*x3434))+(((-1.0)*sj0))+(((-1.0)*r02*x3431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3435 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3435.valid){
continue;
}
CheckValue<IkReal> x3436=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3435.value)+(((1.5707963267949)*(x3436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3437=IKcos(j4);
IkReal x3438=IKsin(j4);
IkReal x3439=(cj5*r00);
IkReal x3440=(cj5*r10);
IkReal x3441=(cj5*r20);
IkReal x3442=((1.0)*x3437);
IkReal x3443=((1.0)*x3438);
IkReal x3444=(sj5*x3437);
IkReal x3445=(sj5*x3438);
evalcond[0]=(((r21*x3444))+(((-1.0)*x3441*x3442))+((r22*x3438)));
evalcond[1]=(((r21*x3445))+(((-1.0)*x3441*x3443))+(((-1.0)*r22*x3442)));
evalcond[2]=(cj0+(((-1.0)*x3439*x3442))+((r01*x3444))+((r02*x3438)));
evalcond[3]=(((r11*x3444))+sj0+((r12*x3438))+(((-1.0)*x3440*x3442)));
evalcond[4]=(((r11*x3445))+cj0+(((-1.0)*r12*x3442))+(((-1.0)*x3440*x3443)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3439*x3443))+(((-1.0)*r02*x3442))+((r01*x3445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09979260705136)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09979260705136)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09979260705136)*px))+IKsqr(((6.09979260705136)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09979260705136)*px), ((6.09979260705136)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.16394)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.16394)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3446=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3446;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3446);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3447=((1.0)*cj5);
IkReal x3448=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3447)));
j4eval[0]=x3448;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3447))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3448);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3449=((1.0)*cj5);
IkReal x3450=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3449)));
j4eval[0]=x3450;
j4eval[1]=IKsign(x3450);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3449))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3451=((1.0)*cj5);
CheckValue<IkReal> x3452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3451))+(((-1.0)*r00*sj5)))),-1);
if(!x3452.valid){
continue;
}
CheckValue<IkReal> x3453 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3451))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3452.value)))+(x3453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3454=IKcos(j4);
IkReal x3455=IKsin(j4);
IkReal x3456=((1.0)*sj0);
IkReal x3457=(cj5*r00);
IkReal x3458=(cj5*r10);
IkReal x3459=(cj5*r20);
IkReal x3460=((1.0)*x3454);
IkReal x3461=((1.0)*x3455);
IkReal x3462=(sj5*x3454);
IkReal x3463=(sj5*x3455);
evalcond[0]=(((r22*x3455))+(((-1.0)*x3459*x3460))+((r21*x3462)));
evalcond[1]=((((-1.0)*r22*x3460))+(((-1.0)*x3459*x3461))+((r21*x3463)));
evalcond[2]=(cj0+(((-1.0)*x3458*x3461))+(((-1.0)*r12*x3460))+((r11*x3463)));
evalcond[3]=(((r01*x3462))+((r02*x3455))+(((-1.0)*cj0))+(((-1.0)*x3457*x3460)));
evalcond[4]=((((-1.0)*x3456))+((r12*x3455))+(((-1.0)*x3458*x3460))+((r11*x3462)));
evalcond[5]=((((-1.0)*x3456))+(((-1.0)*r02*x3460))+((r01*x3463))+(((-1.0)*x3457*x3461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3464=((1.0)*cj5);
CheckValue<IkReal> x3465 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3465.valid){
continue;
}
CheckValue<IkReal> x3466=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3464)))),-1);
if(!x3466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3465.value)+(((1.5707963267949)*(x3466.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3467=IKcos(j4);
IkReal x3468=IKsin(j4);
IkReal x3469=((1.0)*sj0);
IkReal x3470=(cj5*r00);
IkReal x3471=(cj5*r10);
IkReal x3472=(cj5*r20);
IkReal x3473=((1.0)*x3467);
IkReal x3474=((1.0)*x3468);
IkReal x3475=(sj5*x3467);
IkReal x3476=(sj5*x3468);
evalcond[0]=((((-1.0)*x3472*x3473))+((r21*x3475))+((r22*x3468)));
evalcond[1]=((((-1.0)*x3472*x3474))+(((-1.0)*r22*x3473))+((r21*x3476)));
evalcond[2]=(cj0+(((-1.0)*x3471*x3474))+(((-1.0)*r12*x3473))+((r11*x3476)));
evalcond[3]=(((r01*x3475))+(((-1.0)*x3470*x3473))+((r02*x3468))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3471*x3473))+((r12*x3468))+((r11*x3475))+(((-1.0)*x3469)));
evalcond[5]=((((-1.0)*r02*x3473))+((r01*x3476))+(((-1.0)*x3470*x3474))+(((-1.0)*x3469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3477 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3477.valid){
continue;
}
CheckValue<IkReal> x3478=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3477.value)+(((1.5707963267949)*(x3478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3479=IKcos(j4);
IkReal x3480=IKsin(j4);
IkReal x3481=((1.0)*sj0);
IkReal x3482=(cj5*r00);
IkReal x3483=(cj5*r10);
IkReal x3484=(cj5*r20);
IkReal x3485=((1.0)*x3479);
IkReal x3486=((1.0)*x3480);
IkReal x3487=(sj5*x3479);
IkReal x3488=(sj5*x3480);
evalcond[0]=((((-1.0)*x3484*x3485))+((r21*x3487))+((r22*x3480)));
evalcond[1]=((((-1.0)*r22*x3485))+(((-1.0)*x3484*x3486))+((r21*x3488)));
evalcond[2]=((((-1.0)*x3483*x3486))+cj0+(((-1.0)*r12*x3485))+((r11*x3488)));
evalcond[3]=((((-1.0)*x3482*x3485))+((r01*x3487))+((r02*x3480))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3483*x3485))+((r12*x3480))+((r11*x3487))+(((-1.0)*x3481)));
evalcond[5]=((((-1.0)*x3482*x3486))+(((-1.0)*r02*x3485))+((r01*x3488))+(((-1.0)*x3481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3489=(cj5*r01);
IkReal x3490=((30600.0)*cj1);
IkReal x3491=(sj1*sj2);
IkReal x3492=(cj1*cj2);
IkReal x3493=(r00*sj5);
IkReal x3494=((50000.0)*px);
CheckValue<IkReal> x3495=IKPowWithIntegerCheck(((((-8197.0)*x3492))+(((8197.0)*x3491))),-1);
if(!x3495.valid){
continue;
}
CheckValue<IkReal> x3496=IKPowWithIntegerCheck((x3491+(((-1.0)*x3492))),-1);
if(!x3496.valid){
continue;
}
if( IKabs(((x3495.value)*(((((-34400.0)*x3489*x3491))+(((34400.0)*x3489*x3492))+(((-34400.0)*x3491*x3493))+(((34400.0)*x3492*x3493))+((x3490*x3493))+((x3492*x3494))+(((-1.0)*x3491*x3494))+((x3489*x3490)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3496.value)*((x3493+x3489)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3495.value)*(((((-34400.0)*x3489*x3491))+(((34400.0)*x3489*x3492))+(((-34400.0)*x3491*x3493))+(((34400.0)*x3492*x3493))+((x3490*x3493))+((x3492*x3494))+(((-1.0)*x3491*x3494))+((x3489*x3490))))))+IKsqr(((x3496.value)*((x3493+x3489))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3495.value)*(((((-34400.0)*x3489*x3491))+(((34400.0)*x3489*x3492))+(((-34400.0)*x3491*x3493))+(((34400.0)*x3492*x3493))+((x3490*x3493))+((x3492*x3494))+(((-1.0)*x3491*x3494))+((x3489*x3490))))), ((x3496.value)*((x3493+x3489))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3497=IKcos(j0);
IkReal x3498=IKsin(j0);
IkReal x3499=(cj5*r01);
IkReal x3500=(r10*sj5);
IkReal x3501=(sj1*sj2);
IkReal x3502=(cj5*r11);
IkReal x3503=(r00*sj5);
IkReal x3504=(cj1*cj2);
IkReal x3505=((0.5723)*x3498);
IkReal x3506=(cj1*x3498);
IkReal x3507=((0.5723)*x3497);
evalcond[0]=((((-1.0)*x3497*x3504))+((x3497*x3501))+(((-1.0)*x3499))+(((-1.0)*x3503)));
evalcond[1]=(((x3498*x3501))+(((-1.0)*x3498*x3504))+(((-1.0)*x3500))+(((-1.0)*x3502)));
evalcond[2]=((((0.612)*cj1*x3497))+(((-0.1157)*x3503))+(((-0.1157)*x3499))+(((-1.0)*px))+(((-0.16394)*x3498))+(((-1.0)*x3501*x3507))+((x3504*x3507)));
evalcond[3]=((((-0.1157)*x3502))+(((-0.1157)*x3500))+(((0.612)*x3506))+(((0.16394)*x3497))+(((-1.0)*py))+(((-1.0)*x3501*x3505))+((x3504*x3505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3508=((1.0)*cj5);
IkReal x3509=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3508)));
j4eval[0]=x3509;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3508))))));
j4eval[2]=IKsign(x3509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3510=((1.0)*cj5);
IkReal x3511=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3510)));
j4eval[0]=x3511;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3510)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3511);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3512=((1.0)*sj0);
IkReal x3513=((1.0)*cj0);
IkReal x3514=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3514;
j4eval[1]=((IKabs(((((-1.0)*r02*x3513))+(((-1.0)*r12*x3512)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3513))+(((-1.0)*r11*sj5*x3512))))));
j4eval[2]=IKsign(x3514);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3515=((-1.0)*r20);
IkReal x3517 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3517)==0){
continue;
}
IkReal x3516=pow(x3517,-0.5);
CheckValue<IkReal> x3518 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3515),IKFAST_ATAN2_MAGTHRESH);
if(!x3518.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3518.value));
IkReal gconst97=(r21*x3516);
IkReal gconst98=(x3515*x3516);
CheckValue<IkReal> x3519 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3519.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3519.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3520=((-1.0)*r20);
IkReal x3521=x3516;
CheckValue<IkReal> x3523 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3520),IKFAST_ATAN2_MAGTHRESH);
if(!x3523.valid){
continue;
}
IkReal x3522=((-1.0)*(x3523.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3522;
IkReal gconst96=x3522;
IkReal gconst97=(r21*x3521);
IkReal gconst98=(x3520*x3521);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3524=((-1.0)*r20);
IkReal x3525=x3516;
CheckValue<IkReal> x3527 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3524),IKFAST_ATAN2_MAGTHRESH);
if(!x3527.valid){
continue;
}
IkReal x3526=((-1.0)*(x3527.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3526;
IkReal gconst96=x3526;
IkReal gconst97=(r21*x3525);
IkReal gconst98=(x3524*x3525);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3528=((-1.0)*r20);
IkReal x3529=x3516;
CheckValue<IkReal> x3531 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3528),IKFAST_ATAN2_MAGTHRESH);
if(!x3531.valid){
continue;
}
IkReal x3530=((-1.0)*(x3531.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3530;
IkReal gconst96=x3530;
IkReal gconst97=(r21*x3529);
IkReal gconst98=(x3528*x3529);
IkReal x3532=((1.0)*(r22*r22));
CheckValue<IkReal> x3536=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3532))),-1);
if(!x3536.valid){
continue;
}
IkReal x3533=x3536.value;
IkReal x3534=((1.0)*x3533);
IkReal x3535=((((-1.0)*x3534*(r20*r20*r20*r20)))+(((-1.0)*x3532))+(((-1.0)*x3534*(r21*r21*r21*r21)))+(((-2.0)*x3533*(r20*r20)*(r21*r21))));
j4eval[0]=x3535;
j4eval[1]=IKsign(x3535);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3537=(cj1*cj2);
IkReal x3538=(gconst98*r20);
IkReal x3539=(sj1*sj2);
IkReal x3540=(gconst97*r21);
CheckValue<IkReal> x3541=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3540*x3540)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3538*x3538)))+(((2.0)*x3538*x3540)))),-1);
if(!x3541.valid){
continue;
}
CheckValue<IkReal> x3542 = IKatan2WithCheck(IkReal((((r22*x3539))+(((-1.0)*r22*x3537)))),IkReal((((x3539*x3540))+(((-1.0)*x3537*x3540))+(((-1.0)*x3538*x3539))+((x3537*x3538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3541.value)))+(x3542.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3543=IKsin(j4);
IkReal x3544=IKcos(j4);
IkReal x3545=(gconst98*r10);
IkReal x3546=(gconst97*r21);
IkReal x3547=(gconst98*r20);
IkReal x3548=((1.0)*cj2);
IkReal x3549=((1.0)*sj0);
IkReal x3550=(gconst98*r00);
IkReal x3551=(cj1*sj2);
IkReal x3552=((1.0)*x3544);
IkReal x3553=((1.0)*x3543);
IkReal x3554=(gconst97*x3543);
IkReal x3555=(gconst97*x3544);
evalcond[0]=(((x3543*x3546))+(((-1.0)*r22*x3552))+(((-1.0)*x3547*x3553)));
evalcond[1]=((((-1.0)*x3545*x3553))+cj0+(((-1.0)*r12*x3552))+((r11*x3554)));
evalcond[2]=(((r01*x3554))+(((-1.0)*x3550*x3553))+(((-1.0)*x3549))+(((-1.0)*r02*x3552)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3548))+((r22*x3543))+((x3544*x3546))+(((-1.0)*x3547*x3552)));
evalcond[4]=(((r02*x3543))+((r01*x3555))+(((-1.0)*x3550*x3552))+(((-1.0)*cj0*sj1*x3548))+(((-1.0)*cj0*x3551)));
evalcond[5]=((((-1.0)*x3545*x3552))+((r12*x3543))+(((-1.0)*sj0*sj1*x3548))+((r11*x3555))+(((-1.0)*x3549*x3551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3556=((1.0)*gconst98);
CheckValue<IkReal> x3557 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3557.valid){
continue;
}
CheckValue<IkReal> x3558=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3556))+(((-1.0)*gconst97*r10)))),-1);
if(!x3558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3557.value)+(((1.5707963267949)*(x3558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3559=IKsin(j4);
IkReal x3560=IKcos(j4);
IkReal x3561=(gconst98*r10);
IkReal x3562=(gconst97*r21);
IkReal x3563=(gconst98*r20);
IkReal x3564=((1.0)*cj2);
IkReal x3565=((1.0)*sj0);
IkReal x3566=(gconst98*r00);
IkReal x3567=(cj1*sj2);
IkReal x3568=((1.0)*x3560);
IkReal x3569=((1.0)*x3559);
IkReal x3570=(gconst97*x3559);
IkReal x3571=(gconst97*x3560);
evalcond[0]=(((x3559*x3562))+(((-1.0)*x3563*x3569))+(((-1.0)*r22*x3568)));
evalcond[1]=(cj0+(((-1.0)*x3561*x3569))+(((-1.0)*r12*x3568))+((r11*x3570)));
evalcond[2]=((((-1.0)*r02*x3568))+((r01*x3570))+(((-1.0)*x3566*x3569))+(((-1.0)*x3565)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3563*x3568))+((r22*x3559))+(((-1.0)*cj1*x3564))+((x3560*x3562)));
evalcond[4]=(((r01*x3571))+(((-1.0)*x3566*x3568))+(((-1.0)*cj0*sj1*x3564))+(((-1.0)*cj0*x3567))+((r02*x3559)));
evalcond[5]=((((-1.0)*x3565*x3567))+(((-1.0)*x3561*x3568))+(((-1.0)*sj0*sj1*x3564))+((r12*x3559))+((r11*x3571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3572=((1.0)*gconst98);
CheckValue<IkReal> x3573 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3572))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3573.valid){
continue;
}
CheckValue<IkReal> x3574=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3572))+(((-1.0)*gconst97*r00)))),-1);
if(!x3574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3573.value)+(((1.5707963267949)*(x3574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3575=IKsin(j4);
IkReal x3576=IKcos(j4);
IkReal x3577=(gconst98*r10);
IkReal x3578=(gconst97*r21);
IkReal x3579=(gconst98*r20);
IkReal x3580=((1.0)*cj2);
IkReal x3581=((1.0)*sj0);
IkReal x3582=(gconst98*r00);
IkReal x3583=(cj1*sj2);
IkReal x3584=((1.0)*x3576);
IkReal x3585=((1.0)*x3575);
IkReal x3586=(gconst97*x3575);
IkReal x3587=(gconst97*x3576);
evalcond[0]=(((x3575*x3578))+(((-1.0)*r22*x3584))+(((-1.0)*x3579*x3585)));
evalcond[1]=(cj0+(((-1.0)*x3577*x3585))+((r11*x3586))+(((-1.0)*r12*x3584)));
evalcond[2]=((((-1.0)*r02*x3584))+(((-1.0)*x3582*x3585))+((r01*x3586))+(((-1.0)*x3581)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3579*x3584))+((r22*x3575))+((x3576*x3578))+(((-1.0)*cj1*x3580)));
evalcond[4]=((((-1.0)*cj0*x3583))+(((-1.0)*cj0*sj1*x3580))+(((-1.0)*x3582*x3584))+((r01*x3587))+((r02*x3575)));
evalcond[5]=((((-1.0)*x3577*x3584))+(((-1.0)*x3581*x3583))+((r11*x3587))+((r12*x3575))+(((-1.0)*sj0*sj1*x3580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3588=((-1.0)*r21);
IkReal x3590 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3590)==0){
continue;
}
IkReal x3589=pow(x3590,-0.5);
CheckValue<IkReal> x3591 = IKatan2WithCheck(IkReal(x3588),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3591.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3591.value))));
IkReal gconst100=(x3588*x3589);
IkReal gconst101=((1.0)*r20*x3589);
CheckValue<IkReal> x3592 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3592.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3592.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3593=((-1.0)*r21);
CheckValue<IkReal> x3596 = IKatan2WithCheck(IkReal(x3593),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3596.valid){
continue;
}
IkReal x3594=((1.0)*(x3596.value));
IkReal x3595=x3589;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3594)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3594)));
IkReal gconst100=(x3593*x3595);
IkReal gconst101=((1.0)*r20*x3595);
IkReal x3597=r22*r22;
IkReal x3598=((1.0)*x3597);
CheckValue<IkReal> x3602=IKPowWithIntegerCheck(((-1.0)+x3597),-1);
if(!x3602.valid){
continue;
}
IkReal x3599=x3602.value;
if((((1.0)+(((-1.0)*x3598)))) < -0.00001)
continue;
IkReal x3600=IKsqrt(((1.0)+(((-1.0)*x3598))));
IkReal x3601=(cj0*x3599*x3600);
j4eval[0]=((IKabs(((((-1.0)*x3598*x3601))+x3601)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3603=((-1.0)*r21);
CheckValue<IkReal> x3606 = IKatan2WithCheck(IkReal(x3603),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3606.valid){
continue;
}
IkReal x3604=((1.0)*(x3606.value));
IkReal x3605=x3589;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3604)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3604)));
IkReal gconst100=(x3603*x3605);
IkReal gconst101=((1.0)*r20*x3605);
IkReal x3607=r22*r22;
IkReal x3608=((1.0)*x3607);
CheckValue<IkReal> x3612=IKPowWithIntegerCheck(((-1.0)+x3607),-1);
if(!x3612.valid){
continue;
}
IkReal x3609=x3612.value;
if((((1.0)+(((-1.0)*x3608)))) < -0.00001)
continue;
IkReal x3610=IKsqrt(((1.0)+(((-1.0)*x3608))));
IkReal x3611=(sj0*x3609*x3610);
j4eval[0]=((IKabs((x3611+(((-1.0)*x3608*x3611)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3613=((-1.0)*r21);
CheckValue<IkReal> x3616 = IKatan2WithCheck(IkReal(x3613),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3616.valid){
continue;
}
IkReal x3614=((1.0)*(x3616.value));
IkReal x3615=x3589;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3614)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3614)));
IkReal gconst100=(x3613*x3615);
IkReal gconst101=((1.0)*r20*x3615);
IkReal x3617=r22*r22;
IkReal x3618=(r12*sj0);
IkReal x3619=(cj0*r02);
CheckValue<IkReal> x3623=IKPowWithIntegerCheck(((-1.0)+x3617),-1);
if(!x3623.valid){
continue;
}
IkReal x3620=x3623.value;
if((((1.0)+(((-1.0)*x3617)))) < -0.00001)
continue;
IkReal x3621=IKsqrt(((1.0)+(((-1.0)*x3617))));
IkReal x3622=(r22*x3620*x3621);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3619*x3622))+((x3618*x3622)))))+(IKabs(((((-1.0)*x3618))+(((-1.0)*x3619))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3624=((1.0)*sj0);
IkReal x3625=((1.0)*gconst100);
CheckValue<IkReal> x3626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3625))+(((-1.0)*gconst101*r21)))),-1);
if(!x3626.valid){
continue;
}
CheckValue<IkReal> x3627 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3624)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x3624))+(((-1.0)*cj0*r01*x3625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3626.value)))+(x3627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3628=IKsin(j4);
IkReal x3629=IKcos(j4);
IkReal x3630=(gconst101*r20);
IkReal x3631=(gconst101*r10);
IkReal x3632=((1.0)*cj2);
IkReal x3633=(gconst101*r00);
IkReal x3634=((1.0)*sj0);
IkReal x3635=(cj1*sj2);
IkReal x3636=((1.0)*x3629);
IkReal x3637=((1.0)*x3628);
IkReal x3638=(gconst100*x3628);
IkReal x3639=(gconst100*x3629);
evalcond[0]=((((-1.0)*x3630*x3637))+(((-1.0)*r22*x3636))+((r21*x3638)));
evalcond[1]=(((r11*x3638))+cj0+(((-1.0)*r12*x3636))+(((-1.0)*x3631*x3637)));
evalcond[2]=((((-1.0)*x3633*x3637))+(((-1.0)*x3634))+(((-1.0)*r02*x3636))+((r01*x3638)));
evalcond[3]=((((-1.0)*cj1*x3632))+(((-1.0)*x3630*x3636))+((sj1*sj2))+((r21*x3639))+((r22*x3628)));
evalcond[4]=((((-1.0)*x3633*x3636))+((r02*x3628))+(((-1.0)*cj0*sj1*x3632))+((r01*x3639))+(((-1.0)*cj0*x3635)));
evalcond[5]=(((r11*x3639))+(((-1.0)*x3634*x3635))+(((-1.0)*x3631*x3636))+(((-1.0)*sj0*sj1*x3632))+((r12*x3628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3640=((1.0)*gconst101);
CheckValue<IkReal> x3641 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3640))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3641.valid){
continue;
}
CheckValue<IkReal> x3642=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3640)))),-1);
if(!x3642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3641.value)+(((1.5707963267949)*(x3642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3643=IKsin(j4);
IkReal x3644=IKcos(j4);
IkReal x3645=(gconst101*r20);
IkReal x3646=(gconst101*r10);
IkReal x3647=((1.0)*cj2);
IkReal x3648=(gconst101*r00);
IkReal x3649=((1.0)*sj0);
IkReal x3650=(cj1*sj2);
IkReal x3651=((1.0)*x3644);
IkReal x3652=((1.0)*x3643);
IkReal x3653=(gconst100*x3643);
IkReal x3654=(gconst100*x3644);
evalcond[0]=((((-1.0)*x3645*x3652))+((r21*x3653))+(((-1.0)*r22*x3651)));
evalcond[1]=((((-1.0)*x3646*x3652))+cj0+((r11*x3653))+(((-1.0)*r12*x3651)));
evalcond[2]=((((-1.0)*x3648*x3652))+(((-1.0)*r02*x3651))+(((-1.0)*x3649))+((r01*x3653)));
evalcond[3]=((((-1.0)*x3645*x3651))+((sj1*sj2))+((r21*x3654))+(((-1.0)*cj1*x3647))+((r22*x3643)));
evalcond[4]=((((-1.0)*cj0*x3650))+((r02*x3643))+(((-1.0)*x3648*x3651))+(((-1.0)*cj0*sj1*x3647))+((r01*x3654)));
evalcond[5]=((((-1.0)*x3646*x3651))+((r12*x3643))+((r11*x3654))+(((-1.0)*x3649*x3650))+(((-1.0)*sj0*sj1*x3647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3655=((1.0)*gconst101);
CheckValue<IkReal> x3656 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3656.valid){
continue;
}
CheckValue<IkReal> x3657=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3655)))),-1);
if(!x3657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3656.value)+(((1.5707963267949)*(x3657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3658=IKsin(j4);
IkReal x3659=IKcos(j4);
IkReal x3660=(gconst101*r20);
IkReal x3661=(gconst101*r10);
IkReal x3662=((1.0)*cj2);
IkReal x3663=(gconst101*r00);
IkReal x3664=((1.0)*sj0);
IkReal x3665=(cj1*sj2);
IkReal x3666=((1.0)*x3659);
IkReal x3667=((1.0)*x3658);
IkReal x3668=(gconst100*x3658);
IkReal x3669=(gconst100*x3659);
evalcond[0]=((((-1.0)*x3660*x3667))+(((-1.0)*r22*x3666))+((r21*x3668)));
evalcond[1]=(cj0+(((-1.0)*x3661*x3667))+((r11*x3668))+(((-1.0)*r12*x3666)));
evalcond[2]=((((-1.0)*x3663*x3667))+(((-1.0)*x3664))+(((-1.0)*r02*x3666))+((r01*x3668)));
evalcond[3]=((((-1.0)*x3660*x3666))+((sj1*sj2))+(((-1.0)*cj1*x3662))+((r21*x3669))+((r22*x3658)));
evalcond[4]=((((-1.0)*x3663*x3666))+(((-1.0)*cj0*sj1*x3662))+((r01*x3669))+(((-1.0)*cj0*x3665))+((r02*x3658)));
evalcond[5]=(((r12*x3658))+(((-1.0)*x3661*x3666))+(((-1.0)*sj0*sj1*x3662))+((r11*x3669))+(((-1.0)*x3664*x3665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3670=((-1.0)*r10);
IkReal x3672 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3672)==0){
continue;
}
IkReal x3671=pow(x3672,-0.5);
CheckValue<IkReal> x3673 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3670),IKFAST_ATAN2_MAGTHRESH);
if(!x3673.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3673.value));
IkReal gconst103=(r11*x3671);
IkReal gconst104=(x3670*x3671);
CheckValue<IkReal> x3674 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3674.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3674.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3675=((-1.0)*r10);
IkReal x3676=x3671;
CheckValue<IkReal> x3678 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3675),IKFAST_ATAN2_MAGTHRESH);
if(!x3678.valid){
continue;
}
IkReal x3677=((-1.0)*(x3678.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3677;
IkReal gconst102=x3677;
IkReal gconst103=(r11*x3676);
IkReal gconst104=(x3675*x3676);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3679=((1.0)*sj0);
IkReal x3680=((1.0)*gconst103);
CheckValue<IkReal> x3681=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3680))+(((-1.0)*gconst104*r21)))),-1);
if(!x3681.valid){
continue;
}
CheckValue<IkReal> x3682 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3679))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst103*r11*x3679))+(((-1.0)*cj0*r01*x3680))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3681.value)))+(x3682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3683=IKsin(j4);
IkReal x3684=IKcos(j4);
IkReal x3685=(gconst103*r11);
IkReal x3686=((1.0)*cj2);
IkReal x3687=((1.0)*sj0);
IkReal x3688=(cj1*sj2);
IkReal x3689=((1.0)*x3684);
IkReal x3690=(gconst103*x3684);
IkReal x3691=(gconst103*x3683);
IkReal x3692=((1.0)*gconst104*x3683);
evalcond[0]=((((-1.0)*r20*x3692))+(((-1.0)*r22*x3689))+((r21*x3691)));
evalcond[1]=(cj0+(((-1.0)*r10*x3692))+(((-1.0)*r12*x3689))+((x3683*x3685)));
evalcond[2]=(((r01*x3691))+(((-1.0)*x3687))+(((-1.0)*r02*x3689))+(((-1.0)*r00*x3692)));
evalcond[3]=(((sj1*sj2))+((r21*x3690))+(((-1.0)*cj1*x3686))+(((-1.0)*gconst104*r20*x3689))+((r22*x3683)));
evalcond[4]=(((r01*x3690))+(((-1.0)*cj0*x3688))+((r02*x3683))+(((-1.0)*cj0*sj1*x3686))+(((-1.0)*gconst104*r00*x3689)));
evalcond[5]=((((-1.0)*gconst104*r10*x3689))+(((-1.0)*sj0*sj1*x3686))+((x3684*x3685))+((r12*x3683))+(((-1.0)*x3687*x3688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3693=((1.0)*gconst104);
CheckValue<IkReal> x3694 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3693))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3694.valid){
continue;
}
CheckValue<IkReal> x3695=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3693)))),-1);
if(!x3695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3694.value)+(((1.5707963267949)*(x3695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3696=IKsin(j4);
IkReal x3697=IKcos(j4);
IkReal x3698=(gconst103*r11);
IkReal x3699=((1.0)*cj2);
IkReal x3700=((1.0)*sj0);
IkReal x3701=(cj1*sj2);
IkReal x3702=((1.0)*x3697);
IkReal x3703=(gconst103*x3697);
IkReal x3704=(gconst103*x3696);
IkReal x3705=((1.0)*gconst104*x3696);
evalcond[0]=(((r21*x3704))+(((-1.0)*r20*x3705))+(((-1.0)*r22*x3702)));
evalcond[1]=(cj0+((x3696*x3698))+(((-1.0)*r10*x3705))+(((-1.0)*r12*x3702)));
evalcond[2]=((((-1.0)*r02*x3702))+(((-1.0)*r00*x3705))+((r01*x3704))+(((-1.0)*x3700)));
evalcond[3]=((((-1.0)*gconst104*r20*x3702))+(((-1.0)*cj1*x3699))+((sj1*sj2))+((r21*x3703))+((r22*x3696)));
evalcond[4]=((((-1.0)*cj0*x3701))+((r01*x3703))+((r02*x3696))+(((-1.0)*gconst104*r00*x3702))+(((-1.0)*cj0*sj1*x3699)));
evalcond[5]=(((x3697*x3698))+(((-1.0)*x3700*x3701))+(((-1.0)*sj0*sj1*x3699))+(((-1.0)*gconst104*r10*x3702))+((r12*x3696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3706=((-1.0)*r11);
IkReal x3708 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3708)==0){
continue;
}
IkReal x3707=pow(x3708,-0.5);
CheckValue<IkReal> x3709 = IKatan2WithCheck(IkReal(x3706),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3709.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3709.value))));
IkReal gconst106=(x3706*x3707);
IkReal gconst107=((1.0)*r10*x3707);
CheckValue<IkReal> x3710 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3710.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3710.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3711=((-1.0)*r11);
CheckValue<IkReal> x3714 = IKatan2WithCheck(IkReal(x3711),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3714.valid){
continue;
}
IkReal x3712=((1.0)*(x3714.value));
IkReal x3713=x3707;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3712)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3712)));
IkReal gconst106=(x3711*x3713);
IkReal gconst107=((1.0)*r10*x3713);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3715=((-1.0)*r11);
CheckValue<IkReal> x3718 = IKatan2WithCheck(IkReal(x3715),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3718.valid){
continue;
}
IkReal x3716=((1.0)*(x3718.value));
IkReal x3717=x3707;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3716)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3716)));
IkReal gconst106=(x3715*x3717);
IkReal gconst107=((1.0)*r10*x3717);
IkReal x3719=r12*r12;
IkReal x3720=((1.0)*sj0);
IkReal x3721=(cj0*r02);
IkReal x3722=x3707;
j4eval[0]=((IKabs((((sj0*x3719*x3722))+(((-1.0)*x3720*x3722))+((r12*x3721*x3722)))))+(IKabs(((((-1.0)*r12*x3720))+(((-1.0)*x3721))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3723=((-1.0)*r11);
CheckValue<IkReal> x3726 = IKatan2WithCheck(IkReal(x3723),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3726.valid){
continue;
}
IkReal x3724=((1.0)*(x3726.value));
IkReal x3725=x3707;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3724)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3724)));
IkReal gconst106=(x3723*x3725);
IkReal gconst107=((1.0)*r10*x3725);
IkReal x3727=r12*r12;
IkReal x3728=((1.0)+(((-1.0)*x3727)));
IkReal x3729=(r22*sj1*sj2);
IkReal x3730=(cj1*cj2*r22);
CheckValue<IkReal> x3737=IKPowWithIntegerCheck(x3728,-1);
if(!x3737.valid){
continue;
}
IkReal x3731=x3737.value;
CheckValue<IkReal> x3738=IKPowWithIntegerCheck(((-1.0)+x3727),-1);
if(!x3738.valid){
continue;
}
IkReal x3732=x3738.value;
IkReal x3733=((1.0)*x3731);
if((x3728) < -0.00001)
continue;
IkReal x3734=IKsqrt(x3728);
IkReal x3735=(r12*x3732*x3734);
IkReal x3736=((((-1.0)*x3733*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x3731))+(((-1.0)*(r22*r22)))+(((-1.0)*x3733*(r10*r10)*(r20*r20))));
j4eval[0]=x3736;
j4eval[1]=((IKabs(((((-1.0)*x3729*x3735))+((x3730*x3735)))))+(IKabs((x3729+(((-1.0)*x3730))))));
j4eval[2]=IKsign(x3736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3739=(sj1*sj2);
IkReal x3740=(gconst106*r21);
IkReal x3741=(gconst107*r20);
IkReal x3742=(cj1*cj2);
CheckValue<IkReal> x3743 = IKatan2WithCheck(IkReal((((r22*x3739))+(((-1.0)*r22*x3742)))),IkReal(((((-1.0)*x3740*x3742))+((x3741*x3742))+(((-1.0)*x3739*x3741))+((x3739*x3740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3743.valid){
continue;
}
CheckValue<IkReal> x3744=IKPowWithIntegerCheck(IKsign(((((2.0)*x3740*x3741))+(((-1.0)*(x3740*x3740)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3741*x3741))))),-1);
if(!x3744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3743.value)+(((1.5707963267949)*(x3744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3745=IKsin(j4);
IkReal x3746=IKcos(j4);
IkReal x3747=(gconst107*r10);
IkReal x3748=(gconst107*r00);
IkReal x3749=((1.0)*cj2);
IkReal x3750=(gconst107*r20);
IkReal x3751=((1.0)*sj0);
IkReal x3752=(cj1*sj2);
IkReal x3753=((1.0)*x3746);
IkReal x3754=(gconst106*x3746);
IkReal x3755=(gconst106*x3745);
IkReal x3756=((1.0)*x3745);
evalcond[0]=((((-1.0)*r22*x3753))+(((-1.0)*x3750*x3756))+((r21*x3755)));
evalcond[1]=(cj0+(((-1.0)*r12*x3753))+((r11*x3755))+(((-1.0)*x3747*x3756)));
evalcond[2]=((((-1.0)*x3748*x3756))+((r01*x3755))+(((-1.0)*x3751))+(((-1.0)*r02*x3753)));
evalcond[3]=((((-1.0)*x3750*x3753))+((sj1*sj2))+((r22*x3745))+((r21*x3754))+(((-1.0)*cj1*x3749)));
evalcond[4]=((((-1.0)*x3748*x3753))+((r01*x3754))+(((-1.0)*cj0*x3752))+((r02*x3745))+(((-1.0)*cj0*sj1*x3749)));
evalcond[5]=((((-1.0)*sj0*sj1*x3749))+((r12*x3745))+((r11*x3754))+(((-1.0)*x3747*x3753))+(((-1.0)*x3751*x3752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3757=((1.0)*sj0);
IkReal x3758=((1.0)*gconst106);
CheckValue<IkReal> x3759 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3757))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst106*r11*x3757))+(((-1.0)*cj0*r01*x3758))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3759.valid){
continue;
}
CheckValue<IkReal> x3760=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3758))+(((-1.0)*gconst107*r21)))),-1);
if(!x3760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3759.value)+(((1.5707963267949)*(x3760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3761=IKsin(j4);
IkReal x3762=IKcos(j4);
IkReal x3763=(gconst107*r10);
IkReal x3764=(gconst107*r00);
IkReal x3765=((1.0)*cj2);
IkReal x3766=(gconst107*r20);
IkReal x3767=((1.0)*sj0);
IkReal x3768=(cj1*sj2);
IkReal x3769=((1.0)*x3762);
IkReal x3770=(gconst106*x3762);
IkReal x3771=(gconst106*x3761);
IkReal x3772=((1.0)*x3761);
evalcond[0]=(((r21*x3771))+(((-1.0)*r22*x3769))+(((-1.0)*x3766*x3772)));
evalcond[1]=(cj0+(((-1.0)*x3763*x3772))+((r11*x3771))+(((-1.0)*r12*x3769)));
evalcond[2]=((((-1.0)*x3764*x3772))+(((-1.0)*r02*x3769))+(((-1.0)*x3767))+((r01*x3771)));
evalcond[3]=(((r22*x3761))+((r21*x3770))+((sj1*sj2))+(((-1.0)*x3766*x3769))+(((-1.0)*cj1*x3765)));
evalcond[4]=(((r02*x3761))+(((-1.0)*cj0*sj1*x3765))+(((-1.0)*x3764*x3769))+((r01*x3770))+(((-1.0)*cj0*x3768)));
evalcond[5]=((((-1.0)*x3767*x3768))+(((-1.0)*x3763*x3769))+((r11*x3770))+((r12*x3761))+(((-1.0)*sj0*sj1*x3765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3773=((1.0)*gconst107);
CheckValue<IkReal> x3774 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3774.valid){
continue;
}
CheckValue<IkReal> x3775=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3773)))),-1);
if(!x3775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3774.value)+(((1.5707963267949)*(x3775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3776=IKsin(j4);
IkReal x3777=IKcos(j4);
IkReal x3778=(gconst107*r10);
IkReal x3779=(gconst107*r00);
IkReal x3780=((1.0)*cj2);
IkReal x3781=(gconst107*r20);
IkReal x3782=((1.0)*sj0);
IkReal x3783=(cj1*sj2);
IkReal x3784=((1.0)*x3777);
IkReal x3785=(gconst106*x3777);
IkReal x3786=(gconst106*x3776);
IkReal x3787=((1.0)*x3776);
evalcond[0]=(((r21*x3786))+(((-1.0)*r22*x3784))+(((-1.0)*x3781*x3787)));
evalcond[1]=((((-1.0)*x3778*x3787))+cj0+(((-1.0)*r12*x3784))+((r11*x3786)));
evalcond[2]=((((-1.0)*x3779*x3787))+(((-1.0)*r02*x3784))+(((-1.0)*x3782))+((r01*x3786)));
evalcond[3]=(((r22*x3776))+((r21*x3785))+((sj1*sj2))+(((-1.0)*cj1*x3780))+(((-1.0)*x3781*x3784)));
evalcond[4]=(((r02*x3776))+(((-1.0)*x3779*x3784))+(((-1.0)*cj0*x3783))+((r01*x3785))+(((-1.0)*cj0*sj1*x3780)));
evalcond[5]=((((-1.0)*x3778*x3784))+(((-1.0)*x3782*x3783))+(((-1.0)*sj0*sj1*x3780))+((r12*x3776))+((r11*x3785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3788=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3788;
j4eval[1]=IKsign(x3788);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3789=((1.0)*cj5);
IkReal x3790=((((-1.0)*r01*x3789))+(((-1.0)*r00*sj5)));
j4eval[0]=x3790;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3789)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3790);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3791=(sj1*sj2);
IkReal x3792=(cj5*r10);
IkReal x3793=(r11*sj5);
IkReal x3794=(cj1*cj2);
IkReal x3795=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3795;
j4eval[1]=((IKabs(((((-1.0)*r12*x3791))+((r12*x3794)))))+(IKabs((((x3792*x3794))+((x3791*x3793))+(((-1.0)*x3791*x3792))+(((-1.0)*x3793*x3794))))));
j4eval[2]=IKsign(x3795);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3796=(sj1*sj2);
IkReal x3797=(cj5*r10);
IkReal x3798=(r11*sj5);
IkReal x3799=(cj1*cj2);
CheckValue<IkReal> x3800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3800.valid){
continue;
}
CheckValue<IkReal> x3801 = IKatan2WithCheck(IkReal((((x3796*x3798))+(((-1.0)*x3798*x3799))+(((-1.0)*x3796*x3797))+((x3797*x3799)))),IkReal(((((-1.0)*r12*x3796))+((r12*x3799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3800.value)))+(x3801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3802=IKcos(j4);
IkReal x3803=IKsin(j4);
IkReal x3804=(cj5*r00);
IkReal x3805=(cj5*r10);
IkReal x3806=(r21*sj5);
IkReal x3807=((1.0)*cj2);
IkReal x3808=(cj5*r20);
IkReal x3809=((1.0)*x3802);
IkReal x3810=((1.0)*x3803);
IkReal x3811=(sj5*x3803);
IkReal x3812=(sj5*x3802);
evalcond[0]=((((-1.0)*x3805*x3809))+((r11*x3812))+((r12*x3803)));
evalcond[1]=((((-1.0)*x3808*x3810))+((x3803*x3806))+(((-1.0)*r22*x3809)));
evalcond[2]=((((-1.0)*x3804*x3810))+(((-1.0)*r02*x3809))+((r01*x3811)));
evalcond[3]=((1.0)+((r11*x3811))+(((-1.0)*r12*x3809))+(((-1.0)*x3805*x3810)));
evalcond[4]=(((x3802*x3806))+(((-1.0)*x3808*x3809))+((r22*x3803))+((sj1*sj2))+(((-1.0)*cj1*x3807)));
evalcond[5]=((((-1.0)*sj1*x3807))+(((-1.0)*cj1*sj2))+((r02*x3803))+((r01*x3812))+(((-1.0)*x3804*x3809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3813=((1.0)*cj5);
CheckValue<IkReal> x3814=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3813))+(((-1.0)*r00*sj5)))),-1);
if(!x3814.valid){
continue;
}
CheckValue<IkReal> x3815 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3814.value)))+(x3815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3816=IKcos(j4);
IkReal x3817=IKsin(j4);
IkReal x3818=(cj5*r00);
IkReal x3819=(cj5*r10);
IkReal x3820=(r21*sj5);
IkReal x3821=((1.0)*cj2);
IkReal x3822=(cj5*r20);
IkReal x3823=((1.0)*x3816);
IkReal x3824=((1.0)*x3817);
IkReal x3825=(sj5*x3817);
IkReal x3826=(sj5*x3816);
evalcond[0]=(((r12*x3817))+((r11*x3826))+(((-1.0)*x3819*x3823)));
evalcond[1]=((((-1.0)*r22*x3823))+(((-1.0)*x3822*x3824))+((x3817*x3820)));
evalcond[2]=((((-1.0)*r02*x3823))+((r01*x3825))+(((-1.0)*x3818*x3824)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3823))+((r11*x3825))+(((-1.0)*x3819*x3824)));
evalcond[4]=((((-1.0)*x3822*x3823))+((sj1*sj2))+(((-1.0)*cj1*x3821))+((r22*x3817))+((x3816*x3820)));
evalcond[5]=((((-1.0)*sj1*x3821))+(((-1.0)*cj1*sj2))+((r02*x3817))+((r01*x3826))+(((-1.0)*x3818*x3823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3827=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3827.valid){
continue;
}
CheckValue<IkReal> x3828 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3827.value)))+(x3828.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3829=IKcos(j4);
IkReal x3830=IKsin(j4);
IkReal x3831=(cj5*r00);
IkReal x3832=(cj5*r10);
IkReal x3833=(r21*sj5);
IkReal x3834=((1.0)*cj2);
IkReal x3835=(cj5*r20);
IkReal x3836=((1.0)*x3829);
IkReal x3837=((1.0)*x3830);
IkReal x3838=(sj5*x3830);
IkReal x3839=(sj5*x3829);
evalcond[0]=((((-1.0)*x3832*x3836))+((r12*x3830))+((r11*x3839)));
evalcond[1]=((((-1.0)*r22*x3836))+(((-1.0)*x3835*x3837))+((x3830*x3833)));
evalcond[2]=((((-1.0)*x3831*x3837))+((r01*x3838))+(((-1.0)*r02*x3836)));
evalcond[3]=((1.0)+(((-1.0)*x3832*x3837))+(((-1.0)*r12*x3836))+((r11*x3838)));
evalcond[4]=(((sj1*sj2))+((x3829*x3833))+(((-1.0)*cj1*x3834))+(((-1.0)*x3835*x3836))+((r22*x3830)));
evalcond[5]=((((-1.0)*x3831*x3836))+((r02*x3830))+((r01*x3839))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3840=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3840;
j4eval[1]=IKsign(x3840);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3841=((1.0)*cj5);
IkReal x3842=((((-1.0)*r21*x3841))+(((-1.0)*r20*sj5)));
j4eval[0]=x3842;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3841))))));
j4eval[2]=IKsign(x3842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3843=cj5*cj5;
IkReal x3844=r11*r11;
IkReal x3845=(r11*sj5);
IkReal x3846=(cj5*r10);
IkReal x3847=((r12*r12)+(((-1.0)*x3843*x3844))+x3844+(((-2.0)*x3845*x3846))+((x3843*(r10*r10))));
j4eval[0]=x3847;
j4eval[1]=IKsign(x3847);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3846))+x3845))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3848=cj5*cj5;
IkReal x3849=r11*r11;
IkReal x3850=(cj5*r10);
IkReal x3851=(r11*sj5);
CheckValue<IkReal> x3852=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3848*(r10*r10)))+x3849+(((-1.0)*x3848*x3849))+(((-2.0)*x3850*x3851)))),-1);
if(!x3852.valid){
continue;
}
CheckValue<IkReal> x3853 = IKatan2WithCheck(IkReal(((((-1.0)*x3850))+x3851)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3852.value)))+(x3853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3854=IKcos(j4);
IkReal x3855=IKsin(j4);
IkReal x3856=(cj5*r00);
IkReal x3857=(cj5*r10);
IkReal x3858=(r21*sj5);
IkReal x3859=(cj5*r20);
IkReal x3860=((1.0)*x3854);
IkReal x3861=((1.0)*x3855);
IkReal x3862=(sj5*x3855);
IkReal x3863=(sj5*x3854);
evalcond[0]=(((r11*x3863))+(((-1.0)*x3857*x3860))+((r12*x3855)));
evalcond[1]=((((-1.0)*x3859*x3861))+((x3855*x3858))+(((-1.0)*r22*x3860)));
evalcond[2]=((((-1.0)*r02*x3860))+((r01*x3862))+(((-1.0)*x3856*x3861)));
evalcond[3]=((-1.0)+((r11*x3862))+(((-1.0)*x3857*x3861))+(((-1.0)*r12*x3860)));
evalcond[4]=(((r02*x3855))+((cj2*sj1))+((cj1*sj2))+((r01*x3863))+(((-1.0)*x3856*x3860)));
evalcond[5]=(((x3854*x3858))+(((-1.0)*x3859*x3860))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3864=((1.0)*cj5);
CheckValue<IkReal> x3865 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3865.valid){
continue;
}
CheckValue<IkReal> x3866=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3864))+(((-1.0)*r20*sj5)))),-1);
if(!x3866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3865.value)+(((1.5707963267949)*(x3866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3867=IKcos(j4);
IkReal x3868=IKsin(j4);
IkReal x3869=(cj5*r00);
IkReal x3870=(cj5*r10);
IkReal x3871=(r21*sj5);
IkReal x3872=(cj5*r20);
IkReal x3873=((1.0)*x3867);
IkReal x3874=((1.0)*x3868);
IkReal x3875=(sj5*x3868);
IkReal x3876=(sj5*x3867);
evalcond[0]=((((-1.0)*x3870*x3873))+((r11*x3876))+((r12*x3868)));
evalcond[1]=(((x3868*x3871))+(((-1.0)*r22*x3873))+(((-1.0)*x3872*x3874)));
evalcond[2]=(((r01*x3875))+(((-1.0)*r02*x3873))+(((-1.0)*x3869*x3874)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3873))+(((-1.0)*x3870*x3874))+((r11*x3875)));
evalcond[4]=(((cj2*sj1))+((r02*x3868))+((r01*x3876))+((cj1*sj2))+(((-1.0)*x3869*x3873)));
evalcond[5]=(((x3867*x3871))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3868))+(((-1.0)*x3872*x3873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3877 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3877.valid){
continue;
}
CheckValue<IkReal> x3878=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3877.value)+(((1.5707963267949)*(x3878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3879=IKcos(j4);
IkReal x3880=IKsin(j4);
IkReal x3881=(cj5*r00);
IkReal x3882=(cj5*r10);
IkReal x3883=(r21*sj5);
IkReal x3884=(cj5*r20);
IkReal x3885=((1.0)*x3879);
IkReal x3886=((1.0)*x3880);
IkReal x3887=(sj5*x3880);
IkReal x3888=(sj5*x3879);
evalcond[0]=(((r12*x3880))+((r11*x3888))+(((-1.0)*x3882*x3885)));
evalcond[1]=(((x3880*x3883))+(((-1.0)*r22*x3885))+(((-1.0)*x3884*x3886)));
evalcond[2]=((((-1.0)*r02*x3885))+((r01*x3887))+(((-1.0)*x3881*x3886)));
evalcond[3]=((-1.0)+((r11*x3887))+(((-1.0)*r12*x3885))+(((-1.0)*x3882*x3886)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x3880))+((r01*x3888))+(((-1.0)*x3881*x3885)));
evalcond[5]=(((r22*x3880))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3879*x3883))+(((-1.0)*x3884*x3885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3889=((-1.0)*r00);
IkReal x3891 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3891)==0){
continue;
}
IkReal x3890=pow(x3891,-0.5);
CheckValue<IkReal> x3892 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3889),IKFAST_ATAN2_MAGTHRESH);
if(!x3892.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3892.value));
IkReal gconst109=(r01*x3890);
IkReal gconst110=(x3889*x3890);
CheckValue<IkReal> x3893 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3893.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3893.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3894=((-1.0)*r00);
IkReal x3895=x3890;
CheckValue<IkReal> x3897 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3894),IKFAST_ATAN2_MAGTHRESH);
if(!x3897.valid){
continue;
}
IkReal x3896=((-1.0)*(x3897.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3896;
IkReal gconst108=x3896;
IkReal gconst109=(r01*x3895);
IkReal gconst110=(x3894*x3895);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3898=((1.0)*sj0);
IkReal x3899=((1.0)*gconst109);
CheckValue<IkReal> x3900 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3898))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst109*r11*x3898))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x3899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3900.valid){
continue;
}
CheckValue<IkReal> x3901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3899))+(((-1.0)*gconst110*r21)))),-1);
if(!x3901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3900.value)+(((1.5707963267949)*(x3901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3902=IKsin(j4);
IkReal x3903=IKcos(j4);
IkReal x3904=(gconst109*r21);
IkReal x3905=((1.0)*cj2);
IkReal x3906=((1.0)*sj0);
IkReal x3907=(cj1*sj2);
IkReal x3908=((1.0)*x3903);
IkReal x3909=(gconst109*x3902);
IkReal x3910=(gconst109*x3903);
IkReal x3911=((1.0)*gconst110*x3902);
evalcond[0]=((((-1.0)*r20*x3911))+((x3902*x3904))+(((-1.0)*r22*x3908)));
evalcond[1]=((((-1.0)*r12*x3908))+cj0+((r11*x3909))+(((-1.0)*r10*x3911)));
evalcond[2]=((((-1.0)*x3906))+((r01*x3909))+(((-1.0)*r02*x3908))+(((-1.0)*r00*x3911)));
evalcond[3]=((((-1.0)*gconst110*r20*x3908))+((x3903*x3904))+((r22*x3902))+((sj1*sj2))+(((-1.0)*cj1*x3905)));
evalcond[4]=(((r01*x3910))+(((-1.0)*cj0*sj1*x3905))+(((-1.0)*cj0*x3907))+((r02*x3902))+(((-1.0)*gconst110*r00*x3908)));
evalcond[5]=((((-1.0)*sj0*sj1*x3905))+(((-1.0)*x3906*x3907))+((r12*x3902))+((r11*x3910))+(((-1.0)*gconst110*r10*x3908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3912=((1.0)*gconst110);
CheckValue<IkReal> x3913 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x3912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3913.valid){
continue;
}
CheckValue<IkReal> x3914=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3912)))),-1);
if(!x3914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3913.value)+(((1.5707963267949)*(x3914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3915=IKsin(j4);
IkReal x3916=IKcos(j4);
IkReal x3917=(gconst109*r21);
IkReal x3918=((1.0)*cj2);
IkReal x3919=((1.0)*sj0);
IkReal x3920=(cj1*sj2);
IkReal x3921=((1.0)*x3916);
IkReal x3922=(gconst109*x3915);
IkReal x3923=(gconst109*x3916);
IkReal x3924=((1.0)*gconst110*x3915);
evalcond[0]=(((x3915*x3917))+(((-1.0)*r20*x3924))+(((-1.0)*r22*x3921)));
evalcond[1]=(((r11*x3922))+(((-1.0)*r10*x3924))+cj0+(((-1.0)*r12*x3921)));
evalcond[2]=((((-1.0)*x3919))+(((-1.0)*r02*x3921))+(((-1.0)*r00*x3924))+((r01*x3922)));
evalcond[3]=((((-1.0)*gconst110*r20*x3921))+((sj1*sj2))+((x3916*x3917))+(((-1.0)*cj1*x3918))+((r22*x3915)));
evalcond[4]=((((-1.0)*cj0*x3920))+(((-1.0)*gconst110*r00*x3921))+(((-1.0)*cj0*sj1*x3918))+((r02*x3915))+((r01*x3923)));
evalcond[5]=(((r11*x3923))+(((-1.0)*gconst110*r10*x3921))+(((-1.0)*x3919*x3920))+((r12*x3915))+(((-1.0)*sj0*sj1*x3918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3925=((-1.0)*r01);
IkReal x3927 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3927)==0){
continue;
}
IkReal x3926=pow(x3927,-0.5);
CheckValue<IkReal> x3928 = IKatan2WithCheck(IkReal(x3925),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3928.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3928.value))));
IkReal gconst112=(x3925*x3926);
IkReal gconst113=((1.0)*r00*x3926);
CheckValue<IkReal> x3929 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3929.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3929.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3930=((-1.0)*r01);
CheckValue<IkReal> x3933 = IKatan2WithCheck(IkReal(x3930),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3933.valid){
continue;
}
IkReal x3931=((1.0)*(x3933.value));
IkReal x3932=x3926;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3931)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3931)));
IkReal gconst112=(x3930*x3932);
IkReal gconst113=((1.0)*r00*x3932);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3934=((-1.0)*r01);
CheckValue<IkReal> x3937 = IKatan2WithCheck(IkReal(x3934),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3937.valid){
continue;
}
IkReal x3935=((1.0)*(x3937.value));
IkReal x3936=x3926;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3935)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3935)));
IkReal gconst112=(x3934*x3936);
IkReal gconst113=((1.0)*r00*x3936);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3938=((-1.0)*r01);
CheckValue<IkReal> x3941 = IKatan2WithCheck(IkReal(x3938),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3941.valid){
continue;
}
IkReal x3939=((1.0)*(x3941.value));
IkReal x3940=x3926;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3939)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3939)));
IkReal gconst112=(x3938*x3940);
IkReal gconst113=((1.0)*r00*x3940);
IkReal x3942=r02*r02;
IkReal x3943=(r12*sj0);
IkReal x3944=((1.0)*cj0);
IkReal x3945=x3926;
j4eval[0]=((IKabs((((r02*x3943*x3945))+(((-1.0)*x3944*x3945))+((cj0*x3942*x3945)))))+(IKabs(((((-1.0)*x3943))+(((-1.0)*r02*x3944))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3946=((1.0)*sj0);
IkReal x3947=((1.0)*gconst112);
CheckValue<IkReal> x3948=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x3947)))),-1);
if(!x3948.valid){
continue;
}
CheckValue<IkReal> x3949 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3946)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x3947))+(((-1.0)*gconst112*r11*x3946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3948.value)))+(x3949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3950=IKsin(j4);
IkReal x3951=IKcos(j4);
IkReal x3952=(gconst113*r20);
IkReal x3953=(gconst112*r21);
IkReal x3954=((1.0)*cj2);
IkReal x3955=(gconst113*r00);
IkReal x3956=(gconst113*r10);
IkReal x3957=((1.0)*sj0);
IkReal x3958=(cj1*sj2);
IkReal x3959=((1.0)*x3951);
IkReal x3960=((1.0)*x3950);
IkReal x3961=(gconst112*x3951);
IkReal x3962=(gconst112*x3950);
evalcond[0]=((((-1.0)*x3952*x3960))+(((-1.0)*r22*x3959))+((x3950*x3953)));
evalcond[1]=(cj0+((r11*x3962))+(((-1.0)*r12*x3959))+(((-1.0)*x3956*x3960)));
evalcond[2]=((((-1.0)*x3955*x3960))+(((-1.0)*x3957))+(((-1.0)*r02*x3959))+((r01*x3962)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3954))+(((-1.0)*x3952*x3959))+((x3951*x3953))+((r22*x3950)));
evalcond[4]=((((-1.0)*x3955*x3959))+(((-1.0)*cj0*sj1*x3954))+(((-1.0)*cj0*x3958))+((r02*x3950))+((r01*x3961)));
evalcond[5]=((((-1.0)*x3956*x3959))+((r11*x3961))+(((-1.0)*x3957*x3958))+(((-1.0)*sj0*sj1*x3954))+((r12*x3950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3963=((1.0)*gconst113);
CheckValue<IkReal> x3964 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3963)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3964.valid){
continue;
}
CheckValue<IkReal> x3965=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r10))+(((-1.0)*r11*x3963)))),-1);
if(!x3965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3964.value)+(((1.5707963267949)*(x3965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3966=IKsin(j4);
IkReal x3967=IKcos(j4);
IkReal x3968=(gconst113*r20);
IkReal x3969=(gconst112*r21);
IkReal x3970=((1.0)*cj2);
IkReal x3971=(gconst113*r00);
IkReal x3972=(gconst113*r10);
IkReal x3973=((1.0)*sj0);
IkReal x3974=(cj1*sj2);
IkReal x3975=((1.0)*x3967);
IkReal x3976=((1.0)*x3966);
IkReal x3977=(gconst112*x3967);
IkReal x3978=(gconst112*x3966);
evalcond[0]=((((-1.0)*x3968*x3976))+(((-1.0)*r22*x3975))+((x3966*x3969)));
evalcond[1]=((((-1.0)*x3972*x3976))+(((-1.0)*r12*x3975))+cj0+((r11*x3978)));
evalcond[2]=((((-1.0)*x3973))+(((-1.0)*r02*x3975))+(((-1.0)*x3971*x3976))+((r01*x3978)));
evalcond[3]=((((-1.0)*cj1*x3970))+(((-1.0)*x3968*x3975))+((r22*x3966))+((sj1*sj2))+((x3967*x3969)));
evalcond[4]=(((r02*x3966))+(((-1.0)*cj0*sj1*x3970))+(((-1.0)*x3971*x3975))+((r01*x3977))+(((-1.0)*cj0*x3974)));
evalcond[5]=((((-1.0)*x3972*x3975))+((r11*x3977))+((r12*x3966))+(((-1.0)*x3973*x3974))+(((-1.0)*sj0*sj1*x3970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3979=((1.0)*gconst113);
CheckValue<IkReal> x3980=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r00))+(((-1.0)*r01*x3979)))),-1);
if(!x3980.valid){
continue;
}
CheckValue<IkReal> x3981 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x3979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3980.value)))+(x3981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3982=IKsin(j4);
IkReal x3983=IKcos(j4);
IkReal x3984=(gconst113*r20);
IkReal x3985=(gconst112*r21);
IkReal x3986=((1.0)*cj2);
IkReal x3987=(gconst113*r00);
IkReal x3988=(gconst113*r10);
IkReal x3989=((1.0)*sj0);
IkReal x3990=(cj1*sj2);
IkReal x3991=((1.0)*x3983);
IkReal x3992=((1.0)*x3982);
IkReal x3993=(gconst112*x3983);
IkReal x3994=(gconst112*x3982);
evalcond[0]=((((-1.0)*x3984*x3992))+((x3982*x3985))+(((-1.0)*r22*x3991)));
evalcond[1]=((((-1.0)*x3988*x3992))+cj0+(((-1.0)*r12*x3991))+((r11*x3994)));
evalcond[2]=((((-1.0)*r02*x3991))+(((-1.0)*x3987*x3992))+((r01*x3994))+(((-1.0)*x3989)));
evalcond[3]=(((x3983*x3985))+((sj1*sj2))+(((-1.0)*x3984*x3991))+(((-1.0)*cj1*x3986))+((r22*x3982)));
evalcond[4]=((((-1.0)*cj0*sj1*x3986))+(((-1.0)*cj0*x3990))+(((-1.0)*x3987*x3991))+((r01*x3993))+((r02*x3982)));
evalcond[5]=((((-1.0)*x3989*x3990))+(((-1.0)*x3988*x3991))+(((-1.0)*sj0*sj1*x3986))+((r11*x3993))+((r12*x3982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3995=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3995;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3995);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3996=((1.0)*cj5);
IkReal x3997=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3996)));
j4eval[0]=x3997;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3996)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3997);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3998=cj5*cj5;
IkReal x3999=r01*r01;
IkReal x4000=(cj5*r00);
IkReal x4001=(r01*sj5);
IkReal x4002=((((-2.0)*x4000*x4001))+(((-1.0)*x3998*x3999))+x3999+(r02*r02)+((x3998*(r00*r00))));
j4eval[0]=x4002;
j4eval[1]=IKsign(x4002);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4000))+x4001))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4003=cj5*cj5;
IkReal x4004=r01*r01;
IkReal x4005=(r01*sj5);
IkReal x4006=(cj5*r00);
CheckValue<IkReal> x4007 = IKatan2WithCheck(IkReal(((((-1.0)*x4006))+x4005)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4007.valid){
continue;
}
CheckValue<IkReal> x4008=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4003*x4004))+x4004+((x4003*(r00*r00)))+(((-2.0)*x4005*x4006))+(r02*r02))),-1);
if(!x4008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4007.value)+(((1.5707963267949)*(x4008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4009=IKcos(j4);
IkReal x4010=IKsin(j4);
IkReal x4011=(cj5*r00);
IkReal x4012=(cj5*r10);
IkReal x4013=(r21*sj5);
IkReal x4014=((1.0)*cj2);
IkReal x4015=(cj5*r20);
IkReal x4016=((1.0)*x4009);
IkReal x4017=((1.0)*x4010);
IkReal x4018=(sj5*x4010);
IkReal x4019=(sj5*x4009);
evalcond[0]=(((r02*x4010))+(((-1.0)*x4011*x4016))+((r01*x4019)));
evalcond[1]=(((x4010*x4013))+(((-1.0)*r22*x4016))+(((-1.0)*x4015*x4017)));
evalcond[2]=((((-1.0)*r12*x4016))+(((-1.0)*x4012*x4017))+((r11*x4018)));
evalcond[3]=((-1.0)+(((-1.0)*x4011*x4017))+(((-1.0)*r02*x4016))+((r01*x4018)));
evalcond[4]=((((-1.0)*cj1*x4014))+((sj1*sj2))+(((-1.0)*x4015*x4016))+((x4009*x4013))+((r22*x4010)));
evalcond[5]=((((-1.0)*x4012*x4016))+(((-1.0)*cj1*sj2))+((r12*x4010))+((r11*x4019))+(((-1.0)*sj1*x4014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4020=((1.0)*cj5);
CheckValue<IkReal> x4021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4020))+(((-1.0)*r10*sj5)))),-1);
if(!x4021.valid){
continue;
}
CheckValue<IkReal> x4022 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4020)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4021.value)))+(x4022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4023=IKcos(j4);
IkReal x4024=IKsin(j4);
IkReal x4025=(cj5*r00);
IkReal x4026=(cj5*r10);
IkReal x4027=(r21*sj5);
IkReal x4028=((1.0)*cj2);
IkReal x4029=(cj5*r20);
IkReal x4030=((1.0)*x4023);
IkReal x4031=((1.0)*x4024);
IkReal x4032=(sj5*x4024);
IkReal x4033=(sj5*x4023);
evalcond[0]=(((r01*x4033))+(((-1.0)*x4025*x4030))+((r02*x4024)));
evalcond[1]=((((-1.0)*r22*x4030))+((x4024*x4027))+(((-1.0)*x4029*x4031)));
evalcond[2]=((((-1.0)*x4026*x4031))+(((-1.0)*r12*x4030))+((r11*x4032)));
evalcond[3]=((-1.0)+((r01*x4032))+(((-1.0)*x4025*x4031))+(((-1.0)*r02*x4030)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x4028))+((x4023*x4027))+(((-1.0)*x4029*x4030))+((r22*x4024)));
evalcond[5]=((((-1.0)*x4026*x4030))+(((-1.0)*cj1*sj2))+((r12*x4024))+(((-1.0)*sj1*x4028))+((r11*x4033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4034=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4034.valid){
continue;
}
CheckValue<IkReal> x4035 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4034.value)))+(x4035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4036=IKcos(j4);
IkReal x4037=IKsin(j4);
IkReal x4038=(cj5*r00);
IkReal x4039=(cj5*r10);
IkReal x4040=(r21*sj5);
IkReal x4041=((1.0)*cj2);
IkReal x4042=(cj5*r20);
IkReal x4043=((1.0)*x4036);
IkReal x4044=((1.0)*x4037);
IkReal x4045=(sj5*x4037);
IkReal x4046=(sj5*x4036);
evalcond[0]=(((r02*x4037))+((r01*x4046))+(((-1.0)*x4038*x4043)));
evalcond[1]=(((x4037*x4040))+(((-1.0)*x4042*x4044))+(((-1.0)*r22*x4043)));
evalcond[2]=((((-1.0)*x4039*x4044))+(((-1.0)*r12*x4043))+((r11*x4045)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4043))+((r01*x4045))+(((-1.0)*x4038*x4044)));
evalcond[4]=(((x4036*x4040))+((sj1*sj2))+(((-1.0)*x4042*x4043))+(((-1.0)*cj1*x4041))+((r22*x4037)));
evalcond[5]=((((-1.0)*sj1*x4041))+(((-1.0)*x4039*x4043))+(((-1.0)*cj1*sj2))+((r11*x4046))+((r12*x4037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4047=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4047;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4047);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4048=((1.0)*cj5);
IkReal x4049=((((-1.0)*r21*x4048))+(((-1.0)*r20*sj5)));
j4eval[0]=x4049;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4048))+((r11*sj5))))));
j4eval[2]=IKsign(x4049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4050=cj5*cj5;
IkReal x4051=r01*r01;
IkReal x4052=(r01*sj5);
IkReal x4053=(cj5*r00);
IkReal x4054=((((-1.0)*(r02*r02)))+(((2.0)*x4052*x4053))+(((-1.0)*x4050*(r00*r00)))+(((-1.0)*x4051))+((x4050*x4051)));
j4eval[0]=x4054;
j4eval[1]=IKsign(x4054);
j4eval[2]=((IKabs(r02))+(IKabs((x4052+(((-1.0)*x4053))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4055=cj5*cj5;
IkReal x4056=r01*r01;
IkReal x4057=(r01*sj5);
IkReal x4058=(cj5*r00);
CheckValue<IkReal> x4059=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4055*(r00*r00)))+(((2.0)*x4057*x4058))+(((-1.0)*(r02*r02)))+((x4055*x4056))+(((-1.0)*x4056)))),-1);
if(!x4059.valid){
continue;
}
CheckValue<IkReal> x4060 = IKatan2WithCheck(IkReal((x4057+(((-1.0)*x4058)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4059.value)))+(x4060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4061=IKcos(j4);
IkReal x4062=IKsin(j4);
IkReal x4063=(cj5*r00);
IkReal x4064=(cj5*r10);
IkReal x4065=(r21*sj5);
IkReal x4066=(cj5*r20);
IkReal x4067=((1.0)*x4061);
IkReal x4068=((1.0)*x4062);
IkReal x4069=(sj5*x4062);
IkReal x4070=(sj5*x4061);
evalcond[0]=(((r02*x4062))+(((-1.0)*x4063*x4067))+((r01*x4070)));
evalcond[1]=((((-1.0)*x4066*x4068))+((x4062*x4065))+(((-1.0)*r22*x4067)));
evalcond[2]=((((-1.0)*r12*x4067))+(((-1.0)*x4064*x4068))+((r11*x4069)));
evalcond[3]=((1.0)+(((-1.0)*x4063*x4068))+(((-1.0)*r02*x4067))+((r01*x4069)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4064*x4067))+((r12*x4062))+((r11*x4070)));
evalcond[5]=(((x4061*x4065))+(((-1.0)*x4066*x4067))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4071=((1.0)*cj5);
CheckValue<IkReal> x4072=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4071))+(((-1.0)*r20*sj5)))),-1);
if(!x4072.valid){
continue;
}
CheckValue<IkReal> x4073 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4071))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4072.value)))+(x4073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4074=IKcos(j4);
IkReal x4075=IKsin(j4);
IkReal x4076=(cj5*r00);
IkReal x4077=(cj5*r10);
IkReal x4078=(r21*sj5);
IkReal x4079=(cj5*r20);
IkReal x4080=((1.0)*x4074);
IkReal x4081=((1.0)*x4075);
IkReal x4082=(sj5*x4075);
IkReal x4083=(sj5*x4074);
evalcond[0]=(((r01*x4083))+((r02*x4075))+(((-1.0)*x4076*x4080)));
evalcond[1]=(((x4075*x4078))+(((-1.0)*r22*x4080))+(((-1.0)*x4079*x4081)));
evalcond[2]=((((-1.0)*r12*x4080))+((r11*x4082))+(((-1.0)*x4077*x4081)));
evalcond[3]=((1.0)+((r01*x4082))+(((-1.0)*r02*x4080))+(((-1.0)*x4076*x4081)));
evalcond[4]=(((cj2*sj1))+((r12*x4075))+((cj1*sj2))+((r11*x4083))+(((-1.0)*x4077*x4080)));
evalcond[5]=(((x4074*x4078))+((r22*x4075))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4079*x4080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4084 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4084.valid){
continue;
}
CheckValue<IkReal> x4085=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4084.value)+(((1.5707963267949)*(x4085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4086=IKcos(j4);
IkReal x4087=IKsin(j4);
IkReal x4088=(cj5*r00);
IkReal x4089=(cj5*r10);
IkReal x4090=(r21*sj5);
IkReal x4091=(cj5*r20);
IkReal x4092=((1.0)*x4086);
IkReal x4093=((1.0)*x4087);
IkReal x4094=(sj5*x4087);
IkReal x4095=(sj5*x4086);
evalcond[0]=(((r01*x4095))+((r02*x4087))+(((-1.0)*x4088*x4092)));
evalcond[1]=(((x4087*x4090))+(((-1.0)*r22*x4092))+(((-1.0)*x4091*x4093)));
evalcond[2]=((((-1.0)*r12*x4092))+(((-1.0)*x4089*x4093))+((r11*x4094)));
evalcond[3]=((1.0)+((r01*x4094))+(((-1.0)*r02*x4092))+(((-1.0)*x4088*x4093)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4089*x4092))+((cj1*sj2))+((r11*x4095))+((r12*x4087)));
evalcond[5]=(((x4086*x4090))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4087))+(((-1.0)*x4091*x4092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4096=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4096);
rxp1_1=(px*r21);
rxp1_2=(r11*x4096);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4097=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4097);
rxp1_1=(px*r21);
rxp1_2=(r11*x4097);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4098=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4098);
rxp1_1=(px*r21);
rxp1_2=(r11*x4098);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4101=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4101.valid){
continue;
}
IkReal x4099=x4101.value;
IkReal x4100=(sj0*x4099);
cj4array[0]=(((cj1*sj2*x4100))+((cj2*sj1*x4100)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4102=IKsin(j4);
IkReal x4103=IKcos(j4);
IkReal x4104=(r21*sj5);
IkReal x4105=((1.0)*cj5*r20);
evalcond[0]=(r02*x4102);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4103)));
evalcond[2]=((((-1.0)*x4102*x4105))+((x4102*x4104)));
evalcond[3]=((((-1.0)*cj5*r10*x4102))+((r11*sj5*x4102)));
evalcond[4]=(((x4103*x4104))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4103*x4105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4107=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4107.valid){
continue;
}
IkReal x4106=x4107.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4106))+((cj1*cj2*x4106)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4108=IKsin(j4);
IkReal x4109=IKcos(j4);
IkReal x4110=((1.0)*sj0);
IkReal x4111=((1.0)*cj5);
IkReal x4112=(sj5*x4108);
evalcond[0]=(r02*x4108);
evalcond[1]=((((-1.0)*x4110))+(((-1.0)*r02*x4109)));
evalcond[2]=(((r21*x4112))+(((-1.0)*r20*x4108*x4111)));
evalcond[3]=(((r11*x4112))+(((-1.0)*r10*x4108*x4111)));
evalcond[4]=((((-1.0)*cj2*sj1*x4110))+((r11*sj5*x4109))+(((-1.0)*r10*x4109*x4111))+(((-1.0)*cj1*sj2*x4110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4113=IKPowWithIntegerCheck(r02,-1);
if(!x4113.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4113.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4114=IKsin(j4);
IkReal x4115=IKcos(j4);
IkReal x4116=((1.0)*cj1);
IkReal x4117=(r21*sj5);
IkReal x4118=((1.0)*cj5);
IkReal x4119=(r11*sj5);
evalcond[0]=(r02*x4114);
evalcond[1]=(((x4114*x4117))+(((-1.0)*r20*x4114*x4118)));
evalcond[2]=(((x4114*x4119))+(((-1.0)*r10*x4114*x4118)));
evalcond[3]=((((-1.0)*cj2*x4116))+((sj1*sj2))+((x4115*x4117))+(((-1.0)*r20*x4115*x4118)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4115*x4118))+((x4115*x4119))+(((-1.0)*sj0*sj2*x4116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4120=((1.0)*sj0);
IkReal x4121=((1.0)*cj0);
CheckValue<IkReal> x4122 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4120))+(((-1.0)*r02*x4121)))),IkReal(((((-1.0)*r11*sj5*x4120))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4122.valid){
continue;
}
CheckValue<IkReal> x4123=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4122.value)+(((1.5707963267949)*(x4123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4124=IKsin(j4);
IkReal x4125=IKcos(j4);
IkReal x4126=(cj5*r00);
IkReal x4127=(cj5*r10);
IkReal x4128=(r21*sj5);
IkReal x4129=((1.0)*cj2);
IkReal x4130=((1.0)*sj0);
IkReal x4131=(cj1*sj2);
IkReal x4132=(cj5*r20);
IkReal x4133=((1.0)*x4125);
IkReal x4134=((1.0)*x4124);
IkReal x4135=(sj5*x4124);
IkReal x4136=(sj5*x4125);
evalcond[0]=(((x4124*x4128))+(((-1.0)*r22*x4133))+(((-1.0)*x4132*x4134)));
evalcond[1]=((((-1.0)*x4127*x4134))+cj0+((r11*x4135))+(((-1.0)*r12*x4133)));
evalcond[2]=((((-1.0)*x4126*x4134))+((r01*x4135))+(((-1.0)*r02*x4133))+(((-1.0)*x4130)));
evalcond[3]=(((x4125*x4128))+(((-1.0)*cj1*x4129))+((sj1*sj2))+((r22*x4124))+(((-1.0)*x4132*x4133)));
evalcond[4]=((((-1.0)*cj0*x4131))+(((-1.0)*cj0*sj1*x4129))+(((-1.0)*x4126*x4133))+((r02*x4124))+((r01*x4136)));
evalcond[5]=(((r12*x4124))+(((-1.0)*x4130*x4131))+(((-1.0)*x4127*x4133))+((r11*x4136))+(((-1.0)*sj0*sj1*x4129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4137=((1.0)*cj5);
CheckValue<IkReal> x4138=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4137)))),-1);
if(!x4138.valid){
continue;
}
CheckValue<IkReal> x4139 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4138.value)))+(x4139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4140=IKsin(j4);
IkReal x4141=IKcos(j4);
IkReal x4142=(cj5*r00);
IkReal x4143=(cj5*r10);
IkReal x4144=(r21*sj5);
IkReal x4145=((1.0)*cj2);
IkReal x4146=((1.0)*sj0);
IkReal x4147=(cj1*sj2);
IkReal x4148=(cj5*r20);
IkReal x4149=((1.0)*x4141);
IkReal x4150=((1.0)*x4140);
IkReal x4151=(sj5*x4140);
IkReal x4152=(sj5*x4141);
evalcond[0]=((((-1.0)*x4148*x4150))+(((-1.0)*r22*x4149))+((x4140*x4144)));
evalcond[1]=(cj0+((r11*x4151))+(((-1.0)*x4143*x4150))+(((-1.0)*r12*x4149)));
evalcond[2]=((((-1.0)*r02*x4149))+((r01*x4151))+(((-1.0)*x4142*x4150))+(((-1.0)*x4146)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4148*x4149))+((x4141*x4144))+((r22*x4140))+(((-1.0)*cj1*x4145)));
evalcond[4]=(((r02*x4140))+((r01*x4152))+(((-1.0)*x4142*x4149))+(((-1.0)*cj0*x4147))+(((-1.0)*cj0*sj1*x4145)));
evalcond[5]=((((-1.0)*x4146*x4147))+((r12*x4140))+((r11*x4152))+(((-1.0)*sj0*sj1*x4145))+(((-1.0)*x4143*x4149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4153=((1.0)*cj5);
CheckValue<IkReal> x4154 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4154.valid){
continue;
}
CheckValue<IkReal> x4155=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4153)))),-1);
if(!x4155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4154.value)+(((1.5707963267949)*(x4155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4156=IKsin(j4);
IkReal x4157=IKcos(j4);
IkReal x4158=(cj5*r00);
IkReal x4159=(cj5*r10);
IkReal x4160=(r21*sj5);
IkReal x4161=((1.0)*cj2);
IkReal x4162=((1.0)*sj0);
IkReal x4163=(cj1*sj2);
IkReal x4164=(cj5*r20);
IkReal x4165=((1.0)*x4157);
IkReal x4166=((1.0)*x4156);
IkReal x4167=(sj5*x4156);
IkReal x4168=(sj5*x4157);
evalcond[0]=(((x4156*x4160))+(((-1.0)*x4164*x4166))+(((-1.0)*r22*x4165)));
evalcond[1]=(cj0+(((-1.0)*x4159*x4166))+(((-1.0)*r12*x4165))+((r11*x4167)));
evalcond[2]=(((r01*x4167))+(((-1.0)*r02*x4165))+(((-1.0)*x4162))+(((-1.0)*x4158*x4166)));
evalcond[3]=((((-1.0)*cj1*x4161))+((r22*x4156))+((sj1*sj2))+((x4157*x4160))+(((-1.0)*x4164*x4165)));
evalcond[4]=(((r01*x4168))+((r02*x4156))+(((-1.0)*cj0*sj1*x4161))+(((-1.0)*x4158*x4165))+(((-1.0)*cj0*x4163)));
evalcond[5]=((((-1.0)*x4159*x4165))+((r12*x4156))+(((-1.0)*x4162*x4163))+((r11*x4168))+(((-1.0)*sj0*sj1*x4161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4169=r21*r21;
IkReal x4170=cj5*cj5;
IkReal x4171=(sj1*sj2);
IkReal x4172=(r21*sj5);
IkReal x4173=(cj1*cj2);
IkReal x4174=(cj5*r20);
CheckValue<IkReal> x4175 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4173))+((r22*x4171)))),IkReal((((x4173*x4174))+(((-1.0)*x4172*x4173))+((x4171*x4172))+(((-1.0)*x4171*x4174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4175.valid){
continue;
}
CheckValue<IkReal> x4176=IKPowWithIntegerCheck(IKsign((((x4169*x4170))+(((-1.0)*x4170*(r20*r20)))+(((2.0)*x4172*x4174))+(((-1.0)*x4169))+(((-1.0)*(r22*r22))))),-1);
if(!x4176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4175.value)+(((1.5707963267949)*(x4176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4177=IKsin(j4);
IkReal x4178=IKcos(j4);
IkReal x4179=(r21*sj5);
IkReal x4180=(cj5*r20);
IkReal x4181=((1.0)*x4178);
evalcond[0]=(((x4177*x4179))+(((-1.0)*r22*x4181))+(((-1.0)*x4177*x4180)));
evalcond[1]=((((-1.0)*x4180*x4181))+((x4178*x4179))+((r22*x4177))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4182=(cj5*sj4);
IkReal x4183=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4182))+((r01*x4183)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x4183))+((r10*x4182))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4182))+((r01*x4183))))+IKsqr(((((-1.0)*r11*x4183))+((r10*x4182))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4182))+((r01*x4183))), ((((-1.0)*r11*x4183))+((r10*x4182))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4184=IKcos(j0);
IkReal x4185=IKsin(j0);
IkReal x4186=(cj5*r01);
IkReal x4187=(r11*sj5);
IkReal x4188=((1.0)*sj5);
IkReal x4189=((1.0)*cj5);
IkReal x4190=((0.1157)*sj5);
IkReal x4191=((1.0)*cj2);
IkReal x4192=((0.5723)*sj2);
IkReal x4193=((1.0)*cj4);
IkReal x4194=(r01*sj5);
IkReal x4195=((0.5723)*cj2);
IkReal x4196=((1.0)*cj1*sj2);
IkReal x4197=(cj4*x4189);
IkReal x4198=(sj1*x4184);
IkReal x4199=(cj1*x4185);
IkReal x4200=(cj1*x4184);
IkReal x4201=(sj1*x4185);
evalcond[0]=((((-1.0)*r12*x4193))+x4184+((sj4*x4187))+(((-1.0)*r10*sj4*x4189)));
evalcond[1]=((((-1.0)*r00*sj4*x4189))+(((-1.0)*x4185))+(((-1.0)*r02*x4193))+((sj4*x4194)));
evalcond[2]=(((sj2*x4198))+(((-1.0)*r00*x4188))+(((-1.0)*x4191*x4200))+(((-1.0)*x4186)));
evalcond[3]=((((-1.0)*r11*x4189))+((sj2*x4201))+(((-1.0)*x4191*x4199))+(((-1.0)*r10*x4188)));
evalcond[4]=((((-1.0)*r00*x4197))+((r02*sj4))+(((-1.0)*x4184*x4196))+(((-1.0)*x4191*x4198))+((cj4*x4194)));
evalcond[5]=((((-1.0)*x4191*x4201))+((r12*sj4))+(((-1.0)*x4185*x4196))+((cj4*x4187))+(((-1.0)*r10*x4197)));
evalcond[6]=((((-1.0)*r00*x4190))+(((-0.16394)*x4185))+(((-1.0)*px))+(((0.612)*x4200))+(((-0.1157)*x4186))+(((-1.0)*x4192*x4198))+((x4195*x4200)));
evalcond[7]=((((-1.0)*x4192*x4201))+(((-1.0)*py))+(((-0.1157)*cj5*r11))+((x4195*x4199))+(((0.16394)*x4184))+(((0.612)*x4199))+(((-1.0)*r10*x4190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4202 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4202.valid){
continue;
}
CheckValue<IkReal> x4203=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4203.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4202.value)+(((1.5707963267949)*(x4203.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4204=IKcos(j0);
IkReal x4205=IKsin(j0);
IkReal x4206=(cj5*r01);
IkReal x4207=(r10*sj5);
IkReal x4208=(sj1*sj2);
IkReal x4209=(cj5*r11);
IkReal x4210=(r00*sj5);
IkReal x4211=(cj1*cj2);
IkReal x4212=((0.5723)*x4205);
IkReal x4213=(cj1*x4205);
IkReal x4214=((0.5723)*x4204);
evalcond[0]=(((x4204*x4208))+(((-1.0)*x4206))+(((-1.0)*x4204*x4211))+(((-1.0)*x4210)));
evalcond[1]=(((x4205*x4208))+(((-1.0)*x4209))+(((-1.0)*x4207))+(((-1.0)*x4205*x4211)));
evalcond[2]=((((-0.1157)*x4206))+(((-0.16394)*x4205))+(((-0.1157)*x4210))+(((-1.0)*px))+(((0.612)*cj1*x4204))+(((-1.0)*x4208*x4214))+((x4211*x4214)));
evalcond[3]=((((-0.1157)*x4209))+(((-0.1157)*x4207))+(((0.612)*x4213))+(((-1.0)*py))+(((-1.0)*x4208*x4212))+(((0.16394)*x4204))+((x4211*x4212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4215=((1.0)*cj5);
IkReal x4216=((((-1.0)*r01*x4215))+(((-1.0)*r00*sj5)));
j4eval[0]=x4216;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4215)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4217=((1.0)*cj5);
IkReal x4218=((((-1.0)*r11*x4217))+(((-1.0)*r10*sj5)));
j4eval[0]=x4218;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4217))))));
j4eval[2]=IKsign(x4218);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4219=((1.0)*sj0);
IkReal x4220=((1.0)*cj0);
IkReal x4221=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4221;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4220))+(((-1.0)*r11*sj5*x4219)))))+(IKabs(((((-1.0)*r12*x4219))+(((-1.0)*r02*x4220))))));
j4eval[2]=IKsign(x4221);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4222=((-1.0)*r20);
IkReal x4224 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4224)==0){
continue;
}
IkReal x4223=pow(x4224,-0.5);
CheckValue<IkReal> x4225 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4222),IKFAST_ATAN2_MAGTHRESH);
if(!x4225.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4225.value));
IkReal gconst97=(r21*x4223);
IkReal gconst98=(x4222*x4223);
CheckValue<IkReal> x4226 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4226.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4226.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4227=((-1.0)*r20);
IkReal x4228=x4223;
CheckValue<IkReal> x4230 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4227),IKFAST_ATAN2_MAGTHRESH);
if(!x4230.valid){
continue;
}
IkReal x4229=((-1.0)*(x4230.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4229;
IkReal gconst96=x4229;
IkReal gconst97=(r21*x4228);
IkReal gconst98=(x4227*x4228);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4231=((-1.0)*r20);
IkReal x4232=x4223;
CheckValue<IkReal> x4234 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4231),IKFAST_ATAN2_MAGTHRESH);
if(!x4234.valid){
continue;
}
IkReal x4233=((-1.0)*(x4234.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4233;
IkReal gconst96=x4233;
IkReal gconst97=(r21*x4232);
IkReal gconst98=(x4231*x4232);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4235=((-1.0)*r20);
IkReal x4236=x4223;
CheckValue<IkReal> x4238 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4235),IKFAST_ATAN2_MAGTHRESH);
if(!x4238.valid){
continue;
}
IkReal x4237=((-1.0)*(x4238.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4237;
IkReal gconst96=x4237;
IkReal gconst97=(r21*x4236);
IkReal gconst98=(x4235*x4236);
IkReal x4239=((1.0)*(r22*r22));
CheckValue<IkReal> x4243=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4239))),-1);
if(!x4243.valid){
continue;
}
IkReal x4240=x4243.value;
IkReal x4241=((1.0)*x4240);
IkReal x4242=((((-1.0)*x4239))+(((-1.0)*x4241*(r20*r20*r20*r20)))+(((-2.0)*x4240*(r20*r20)*(r21*r21)))+(((-1.0)*x4241*(r21*r21*r21*r21))));
j4eval[0]=x4242;
j4eval[1]=IKsign(x4242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4244=(cj1*cj2);
IkReal x4245=(gconst98*r20);
IkReal x4246=(sj1*sj2);
IkReal x4247=(gconst97*r21);
CheckValue<IkReal> x4248 = IKatan2WithCheck(IkReal((((r22*x4246))+(((-1.0)*r22*x4244)))),IkReal((((x4246*x4247))+(((-1.0)*x4245*x4246))+((x4244*x4245))+(((-1.0)*x4244*x4247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4248.valid){
continue;
}
CheckValue<IkReal> x4249=IKPowWithIntegerCheck(IKsign(((((2.0)*x4245*x4247))+(((-1.0)*(x4245*x4245)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4247*x4247))))),-1);
if(!x4249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4248.value)+(((1.5707963267949)*(x4249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4250=IKsin(j4);
IkReal x4251=IKcos(j4);
IkReal x4252=(gconst98*r10);
IkReal x4253=(gconst97*r21);
IkReal x4254=(gconst98*r20);
IkReal x4255=((1.0)*cj2);
IkReal x4256=((1.0)*sj0);
IkReal x4257=(gconst98*r00);
IkReal x4258=(cj1*sj2);
IkReal x4259=((1.0)*x4251);
IkReal x4260=((1.0)*x4250);
IkReal x4261=(gconst97*x4250);
IkReal x4262=(gconst97*x4251);
evalcond[0]=(((x4250*x4253))+(((-1.0)*x4254*x4260))+(((-1.0)*r22*x4259)));
evalcond[1]=(((r11*x4261))+cj0+(((-1.0)*x4252*x4260))+(((-1.0)*r12*x4259)));
evalcond[2]=(((r01*x4261))+(((-1.0)*x4256))+(((-1.0)*x4257*x4260))+(((-1.0)*r02*x4259)));
evalcond[3]=(((r22*x4250))+(((-1.0)*x4254*x4259))+((sj1*sj2))+(((-1.0)*cj1*x4255))+((x4251*x4253)));
evalcond[4]=(((r01*x4262))+(((-1.0)*x4257*x4259))+((r02*x4250))+(((-1.0)*cj0*sj1*x4255))+(((-1.0)*cj0*x4258)));
evalcond[5]=(((r11*x4262))+(((-1.0)*x4252*x4259))+(((-1.0)*sj0*sj1*x4255))+((r12*x4250))+(((-1.0)*x4256*x4258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4263=((1.0)*gconst98);
CheckValue<IkReal> x4264 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4263))+((gconst97*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4264.valid){
continue;
}
CheckValue<IkReal> x4265=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4263))+(((-1.0)*gconst97*r10)))),-1);
if(!x4265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4264.value)+(((1.5707963267949)*(x4265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4266=IKsin(j4);
IkReal x4267=IKcos(j4);
IkReal x4268=(gconst98*r10);
IkReal x4269=(gconst97*r21);
IkReal x4270=(gconst98*r20);
IkReal x4271=((1.0)*cj2);
IkReal x4272=((1.0)*sj0);
IkReal x4273=(gconst98*r00);
IkReal x4274=(cj1*sj2);
IkReal x4275=((1.0)*x4267);
IkReal x4276=((1.0)*x4266);
IkReal x4277=(gconst97*x4266);
IkReal x4278=(gconst97*x4267);
evalcond[0]=(((x4266*x4269))+(((-1.0)*r22*x4275))+(((-1.0)*x4270*x4276)));
evalcond[1]=((((-1.0)*r12*x4275))+cj0+((r11*x4277))+(((-1.0)*x4268*x4276)));
evalcond[2]=((((-1.0)*x4273*x4276))+(((-1.0)*r02*x4275))+(((-1.0)*x4272))+((r01*x4277)));
evalcond[3]=((((-1.0)*cj1*x4271))+((x4267*x4269))+((sj1*sj2))+(((-1.0)*x4270*x4275))+((r22*x4266)));
evalcond[4]=((((-1.0)*x4273*x4275))+((r02*x4266))+(((-1.0)*cj0*x4274))+(((-1.0)*cj0*sj1*x4271))+((r01*x4278)));
evalcond[5]=(((r11*x4278))+((r12*x4266))+(((-1.0)*sj0*sj1*x4271))+(((-1.0)*x4272*x4274))+(((-1.0)*x4268*x4275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4279=((1.0)*gconst98);
CheckValue<IkReal> x4280=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4279))+(((-1.0)*gconst97*r00)))),-1);
if(!x4280.valid){
continue;
}
CheckValue<IkReal> x4281 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4279))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4280.value)))+(x4281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4282=IKsin(j4);
IkReal x4283=IKcos(j4);
IkReal x4284=(gconst98*r10);
IkReal x4285=(gconst97*r21);
IkReal x4286=(gconst98*r20);
IkReal x4287=((1.0)*cj2);
IkReal x4288=((1.0)*sj0);
IkReal x4289=(gconst98*r00);
IkReal x4290=(cj1*sj2);
IkReal x4291=((1.0)*x4283);
IkReal x4292=((1.0)*x4282);
IkReal x4293=(gconst97*x4282);
IkReal x4294=(gconst97*x4283);
evalcond[0]=((((-1.0)*r22*x4291))+((x4282*x4285))+(((-1.0)*x4286*x4292)));
evalcond[1]=(cj0+(((-1.0)*x4284*x4292))+(((-1.0)*r12*x4291))+((r11*x4293)));
evalcond[2]=((((-1.0)*x4288))+((r01*x4293))+(((-1.0)*x4289*x4292))+(((-1.0)*r02*x4291)));
evalcond[3]=(((x4283*x4285))+((r22*x4282))+((sj1*sj2))+(((-1.0)*x4286*x4291))+(((-1.0)*cj1*x4287)));
evalcond[4]=(((r01*x4294))+(((-1.0)*x4289*x4291))+((r02*x4282))+(((-1.0)*cj0*x4290))+(((-1.0)*cj0*sj1*x4287)));
evalcond[5]=((((-1.0)*x4288*x4290))+((r12*x4282))+(((-1.0)*x4284*x4291))+(((-1.0)*sj0*sj1*x4287))+((r11*x4294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4295=((-1.0)*r21);
IkReal x4297 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4297)==0){
continue;
}
IkReal x4296=pow(x4297,-0.5);
CheckValue<IkReal> x4298 = IKatan2WithCheck(IkReal(x4295),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4298.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4298.value))));
IkReal gconst100=(x4295*x4296);
IkReal gconst101=((1.0)*r20*x4296);
CheckValue<IkReal> x4299 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4299.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4299.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4300=((-1.0)*r21);
CheckValue<IkReal> x4303 = IKatan2WithCheck(IkReal(x4300),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4303.valid){
continue;
}
IkReal x4301=((1.0)*(x4303.value));
IkReal x4302=x4296;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4301)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4301)));
IkReal gconst100=(x4300*x4302);
IkReal gconst101=((1.0)*r20*x4302);
IkReal x4304=r22*r22;
IkReal x4305=((1.0)*x4304);
CheckValue<IkReal> x4309=IKPowWithIntegerCheck(((-1.0)+x4304),-1);
if(!x4309.valid){
continue;
}
IkReal x4306=x4309.value;
if((((1.0)+(((-1.0)*x4305)))) < -0.00001)
continue;
IkReal x4307=IKsqrt(((1.0)+(((-1.0)*x4305))));
IkReal x4308=(cj0*x4306*x4307);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x4308+(((-1.0)*x4305*x4308))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4310=((-1.0)*r21);
CheckValue<IkReal> x4313 = IKatan2WithCheck(IkReal(x4310),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4313.valid){
continue;
}
IkReal x4311=((1.0)*(x4313.value));
IkReal x4312=x4296;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4311)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4311)));
IkReal gconst100=(x4310*x4312);
IkReal gconst101=((1.0)*r20*x4312);
IkReal x4314=r22*r22;
IkReal x4315=((1.0)*x4314);
CheckValue<IkReal> x4319=IKPowWithIntegerCheck(((-1.0)+x4314),-1);
if(!x4319.valid){
continue;
}
IkReal x4316=x4319.value;
if((((1.0)+(((-1.0)*x4315)))) < -0.00001)
continue;
IkReal x4317=IKsqrt(((1.0)+(((-1.0)*x4315))));
IkReal x4318=(sj0*x4316*x4317);
j4eval[0]=((IKabs(((((-1.0)*x4315*x4318))+x4318)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4320=((-1.0)*r21);
CheckValue<IkReal> x4323 = IKatan2WithCheck(IkReal(x4320),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4323.valid){
continue;
}
IkReal x4321=((1.0)*(x4323.value));
IkReal x4322=x4296;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4321)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4321)));
IkReal gconst100=(x4320*x4322);
IkReal gconst101=((1.0)*r20*x4322);
IkReal x4324=r22*r22;
IkReal x4325=(r12*sj0);
IkReal x4326=(cj0*r02);
CheckValue<IkReal> x4330=IKPowWithIntegerCheck(((-1.0)+x4324),-1);
if(!x4330.valid){
continue;
}
IkReal x4327=x4330.value;
if((((1.0)+(((-1.0)*x4324)))) < -0.00001)
continue;
IkReal x4328=IKsqrt(((1.0)+(((-1.0)*x4324))));
IkReal x4329=(r22*x4327*x4328);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4326*x4329))+((x4325*x4329)))))+(IKabs(((((-1.0)*x4325))+(((-1.0)*x4326))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4331=((1.0)*sj0);
IkReal x4332=((1.0)*gconst100);
CheckValue<IkReal> x4333=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4332))+(((-1.0)*gconst101*r21)))),-1);
if(!x4333.valid){
continue;
}
CheckValue<IkReal> x4334 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4331)))),IkReal(((((-1.0)*gconst100*r11*x4331))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x4332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4333.value)))+(x4334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4335=IKsin(j4);
IkReal x4336=IKcos(j4);
IkReal x4337=(gconst101*r20);
IkReal x4338=(gconst101*r10);
IkReal x4339=((1.0)*cj2);
IkReal x4340=(gconst101*r00);
IkReal x4341=((1.0)*sj0);
IkReal x4342=(cj1*sj2);
IkReal x4343=((1.0)*x4336);
IkReal x4344=((1.0)*x4335);
IkReal x4345=(gconst100*x4335);
IkReal x4346=(gconst100*x4336);
evalcond[0]=(((r21*x4345))+(((-1.0)*r22*x4343))+(((-1.0)*x4337*x4344)));
evalcond[1]=(cj0+(((-1.0)*r12*x4343))+(((-1.0)*x4338*x4344))+((r11*x4345)));
evalcond[2]=((((-1.0)*r02*x4343))+(((-1.0)*x4341))+(((-1.0)*x4340*x4344))+((r01*x4345)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4339))+((r21*x4346))+((r22*x4335))+(((-1.0)*x4337*x4343)));
evalcond[4]=((((-1.0)*x4340*x4343))+(((-1.0)*cj0*sj1*x4339))+((r02*x4335))+(((-1.0)*cj0*x4342))+((r01*x4346)));
evalcond[5]=((((-1.0)*x4341*x4342))+(((-1.0)*sj0*sj1*x4339))+((r12*x4335))+(((-1.0)*x4338*x4343))+((r11*x4346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4347=((1.0)*gconst101);
CheckValue<IkReal> x4348=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4347)))),-1);
if(!x4348.valid){
continue;
}
CheckValue<IkReal> x4349 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4347))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4348.value)))+(x4349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4350=IKsin(j4);
IkReal x4351=IKcos(j4);
IkReal x4352=(gconst101*r20);
IkReal x4353=(gconst101*r10);
IkReal x4354=((1.0)*cj2);
IkReal x4355=(gconst101*r00);
IkReal x4356=((1.0)*sj0);
IkReal x4357=(cj1*sj2);
IkReal x4358=((1.0)*x4351);
IkReal x4359=((1.0)*x4350);
IkReal x4360=(gconst100*x4350);
IkReal x4361=(gconst100*x4351);
evalcond[0]=(((r21*x4360))+(((-1.0)*x4352*x4359))+(((-1.0)*r22*x4358)));
evalcond[1]=((((-1.0)*x4353*x4359))+cj0+((r11*x4360))+(((-1.0)*r12*x4358)));
evalcond[2]=((((-1.0)*r02*x4358))+(((-1.0)*x4356))+((r01*x4360))+(((-1.0)*x4355*x4359)));
evalcond[3]=(((r21*x4361))+((r22*x4350))+((sj1*sj2))+(((-1.0)*x4352*x4358))+(((-1.0)*cj1*x4354)));
evalcond[4]=(((r01*x4361))+((r02*x4350))+(((-1.0)*cj0*sj1*x4354))+(((-1.0)*x4355*x4358))+(((-1.0)*cj0*x4357)));
evalcond[5]=((((-1.0)*x4353*x4358))+(((-1.0)*x4356*x4357))+((r11*x4361))+(((-1.0)*sj0*sj1*x4354))+((r12*x4350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4362=((1.0)*gconst101);
CheckValue<IkReal> x4363=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4362)))),-1);
if(!x4363.valid){
continue;
}
CheckValue<IkReal> x4364 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4363.value)))+(x4364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4365=IKsin(j4);
IkReal x4366=IKcos(j4);
IkReal x4367=(gconst101*r20);
IkReal x4368=(gconst101*r10);
IkReal x4369=((1.0)*cj2);
IkReal x4370=(gconst101*r00);
IkReal x4371=((1.0)*sj0);
IkReal x4372=(cj1*sj2);
IkReal x4373=((1.0)*x4366);
IkReal x4374=((1.0)*x4365);
IkReal x4375=(gconst100*x4365);
IkReal x4376=(gconst100*x4366);
evalcond[0]=((((-1.0)*r22*x4373))+(((-1.0)*x4367*x4374))+((r21*x4375)));
evalcond[1]=(cj0+((r11*x4375))+(((-1.0)*x4368*x4374))+(((-1.0)*r12*x4373)));
evalcond[2]=((((-1.0)*x4370*x4374))+((r01*x4375))+(((-1.0)*r02*x4373))+(((-1.0)*x4371)));
evalcond[3]=((((-1.0)*cj1*x4369))+((sj1*sj2))+((r22*x4365))+(((-1.0)*x4367*x4373))+((r21*x4376)));
evalcond[4]=((((-1.0)*cj0*x4372))+(((-1.0)*x4370*x4373))+((r01*x4376))+(((-1.0)*cj0*sj1*x4369))+((r02*x4365)));
evalcond[5]=((((-1.0)*x4371*x4372))+((r11*x4376))+((r12*x4365))+(((-1.0)*sj0*sj1*x4369))+(((-1.0)*x4368*x4373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4377=((-1.0)*r10);
IkReal x4379 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4379)==0){
continue;
}
IkReal x4378=pow(x4379,-0.5);
CheckValue<IkReal> x4380 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4377),IKFAST_ATAN2_MAGTHRESH);
if(!x4380.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4380.value));
IkReal gconst103=(r11*x4378);
IkReal gconst104=(x4377*x4378);
CheckValue<IkReal> x4381 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4381.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4381.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4382=((-1.0)*r10);
IkReal x4383=x4378;
CheckValue<IkReal> x4385 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4382),IKFAST_ATAN2_MAGTHRESH);
if(!x4385.valid){
continue;
}
IkReal x4384=((-1.0)*(x4385.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4384;
IkReal gconst102=x4384;
IkReal gconst103=(r11*x4383);
IkReal gconst104=(x4382*x4383);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4386=((1.0)*sj0);
IkReal x4387=((1.0)*gconst103);
CheckValue<IkReal> x4388=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4387)))),-1);
if(!x4388.valid){
continue;
}
CheckValue<IkReal> x4389 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4386))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst103*r11*x4386))+((gconst104*r10*sj0))+(((-1.0)*cj0*r01*x4387))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4388.value)))+(x4389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4390=IKsin(j4);
IkReal x4391=IKcos(j4);
IkReal x4392=(gconst103*r11);
IkReal x4393=((1.0)*cj2);
IkReal x4394=((1.0)*sj0);
IkReal x4395=(cj1*sj2);
IkReal x4396=((1.0)*x4391);
IkReal x4397=(gconst103*x4391);
IkReal x4398=(gconst103*x4390);
IkReal x4399=((1.0)*gconst104*x4390);
evalcond[0]=((((-1.0)*r22*x4396))+((r21*x4398))+(((-1.0)*r20*x4399)));
evalcond[1]=((((-1.0)*r12*x4396))+cj0+(((-1.0)*r10*x4399))+((x4390*x4392)));
evalcond[2]=((((-1.0)*x4394))+((r01*x4398))+(((-1.0)*r02*x4396))+(((-1.0)*r00*x4399)));
evalcond[3]=(((r22*x4390))+((sj1*sj2))+(((-1.0)*gconst104*r20*x4396))+(((-1.0)*cj1*x4393))+((r21*x4397)));
evalcond[4]=(((r01*x4397))+(((-1.0)*cj0*sj1*x4393))+((r02*x4390))+(((-1.0)*gconst104*r00*x4396))+(((-1.0)*cj0*x4395)));
evalcond[5]=((((-1.0)*sj0*sj1*x4393))+((x4391*x4392))+(((-1.0)*gconst104*r10*x4396))+(((-1.0)*x4394*x4395))+((r12*x4390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4400=((1.0)*gconst104);
CheckValue<IkReal> x4401 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4400))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4401.valid){
continue;
}
CheckValue<IkReal> x4402=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4400)))),-1);
if(!x4402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4401.value)+(((1.5707963267949)*(x4402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4403=IKsin(j4);
IkReal x4404=IKcos(j4);
IkReal x4405=(gconst103*r11);
IkReal x4406=((1.0)*cj2);
IkReal x4407=((1.0)*sj0);
IkReal x4408=(cj1*sj2);
IkReal x4409=((1.0)*x4404);
IkReal x4410=(gconst103*x4404);
IkReal x4411=(gconst103*x4403);
IkReal x4412=((1.0)*gconst104*x4403);
evalcond[0]=(((r21*x4411))+(((-1.0)*r20*x4412))+(((-1.0)*r22*x4409)));
evalcond[1]=(((x4403*x4405))+cj0+(((-1.0)*r10*x4412))+(((-1.0)*r12*x4409)));
evalcond[2]=(((r01*x4411))+(((-1.0)*r00*x4412))+(((-1.0)*r02*x4409))+(((-1.0)*x4407)));
evalcond[3]=(((r21*x4410))+((r22*x4403))+((sj1*sj2))+(((-1.0)*cj1*x4406))+(((-1.0)*gconst104*r20*x4409)));
evalcond[4]=((((-1.0)*cj0*x4408))+((r01*x4410))+(((-1.0)*gconst104*r00*x4409))+((r02*x4403))+(((-1.0)*cj0*sj1*x4406)));
evalcond[5]=((((-1.0)*gconst104*r10*x4409))+((r12*x4403))+(((-1.0)*x4407*x4408))+((x4404*x4405))+(((-1.0)*sj0*sj1*x4406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4413=((-1.0)*r11);
IkReal x4415 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4415)==0){
continue;
}
IkReal x4414=pow(x4415,-0.5);
CheckValue<IkReal> x4416 = IKatan2WithCheck(IkReal(x4413),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4416.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4416.value))));
IkReal gconst106=(x4413*x4414);
IkReal gconst107=((1.0)*r10*x4414);
CheckValue<IkReal> x4417 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4417.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4417.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4418=((-1.0)*r11);
CheckValue<IkReal> x4421 = IKatan2WithCheck(IkReal(x4418),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4421.valid){
continue;
}
IkReal x4419=((1.0)*(x4421.value));
IkReal x4420=x4414;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4419)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4419)));
IkReal gconst106=(x4418*x4420);
IkReal gconst107=((1.0)*r10*x4420);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4422=((-1.0)*r11);
CheckValue<IkReal> x4425 = IKatan2WithCheck(IkReal(x4422),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4425.valid){
continue;
}
IkReal x4423=((1.0)*(x4425.value));
IkReal x4424=x4414;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4423)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4423)));
IkReal gconst106=(x4422*x4424);
IkReal gconst107=((1.0)*r10*x4424);
IkReal x4426=r12*r12;
IkReal x4427=((1.0)*sj0);
IkReal x4428=(cj0*r02);
IkReal x4429=x4414;
j4eval[0]=((IKabs((((r12*x4428*x4429))+(((-1.0)*x4427*x4429))+((sj0*x4426*x4429)))))+(IKabs(((((-1.0)*x4428))+(((-1.0)*r12*x4427))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4430=((-1.0)*r11);
CheckValue<IkReal> x4433 = IKatan2WithCheck(IkReal(x4430),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4433.valid){
continue;
}
IkReal x4431=((1.0)*(x4433.value));
IkReal x4432=x4414;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4431)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4431)));
IkReal gconst106=(x4430*x4432);
IkReal gconst107=((1.0)*r10*x4432);
IkReal x4434=r12*r12;
IkReal x4435=((1.0)+(((-1.0)*x4434)));
IkReal x4436=(r22*sj1*sj2);
IkReal x4437=(cj1*cj2*r22);
CheckValue<IkReal> x4444=IKPowWithIntegerCheck(x4435,-1);
if(!x4444.valid){
continue;
}
IkReal x4438=x4444.value;
CheckValue<IkReal> x4445=IKPowWithIntegerCheck(((-1.0)+x4434),-1);
if(!x4445.valid){
continue;
}
IkReal x4439=x4445.value;
IkReal x4440=((1.0)*x4438);
if((x4435) < -0.00001)
continue;
IkReal x4441=IKsqrt(x4435);
IkReal x4442=(r12*x4439*x4441);
IkReal x4443=((((-1.0)*x4440*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x4438))+(((-1.0)*x4440*(r11*r11)*(r21*r21))));
j4eval[0]=x4443;
j4eval[1]=((IKabs(((((-1.0)*x4436*x4442))+((x4437*x4442)))))+(IKabs((x4436+(((-1.0)*x4437))))));
j4eval[2]=IKsign(x4443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4446=(sj1*sj2);
IkReal x4447=(gconst106*r21);
IkReal x4448=(gconst107*r20);
IkReal x4449=(cj1*cj2);
CheckValue<IkReal> x4450 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4449))+((r22*x4446)))),IkReal((((x4446*x4447))+(((-1.0)*x4447*x4449))+(((-1.0)*x4446*x4448))+((x4448*x4449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4450.valid){
continue;
}
CheckValue<IkReal> x4451=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4447*x4447)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4448*x4448)))+(((2.0)*x4447*x4448)))),-1);
if(!x4451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4450.value)+(((1.5707963267949)*(x4451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4452=IKsin(j4);
IkReal x4453=IKcos(j4);
IkReal x4454=(gconst107*r10);
IkReal x4455=(gconst107*r00);
IkReal x4456=((1.0)*cj2);
IkReal x4457=(gconst107*r20);
IkReal x4458=((1.0)*sj0);
IkReal x4459=(cj1*sj2);
IkReal x4460=((1.0)*x4453);
IkReal x4461=(gconst106*x4453);
IkReal x4462=(gconst106*x4452);
IkReal x4463=((1.0)*x4452);
evalcond[0]=((((-1.0)*r22*x4460))+(((-1.0)*x4457*x4463))+((r21*x4462)));
evalcond[1]=(cj0+((r11*x4462))+(((-1.0)*r12*x4460))+(((-1.0)*x4454*x4463)));
evalcond[2]=((((-1.0)*x4458))+((r01*x4462))+(((-1.0)*r02*x4460))+(((-1.0)*x4455*x4463)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4456))+(((-1.0)*x4457*x4460))+((r21*x4461))+((r22*x4452)));
evalcond[4]=((((-1.0)*cj0*sj1*x4456))+((r01*x4461))+(((-1.0)*cj0*x4459))+((r02*x4452))+(((-1.0)*x4455*x4460)));
evalcond[5]=(((r11*x4461))+((r12*x4452))+(((-1.0)*x4454*x4460))+(((-1.0)*x4458*x4459))+(((-1.0)*sj0*sj1*x4456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4464=((1.0)*sj0);
IkReal x4465=((1.0)*gconst106);
CheckValue<IkReal> x4466=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4465)))),-1);
if(!x4466.valid){
continue;
}
CheckValue<IkReal> x4467 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4464)))),IkReal(((((-1.0)*cj0*r01*x4465))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x4464))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4466.value)))+(x4467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4468=IKsin(j4);
IkReal x4469=IKcos(j4);
IkReal x4470=(gconst107*r10);
IkReal x4471=(gconst107*r00);
IkReal x4472=((1.0)*cj2);
IkReal x4473=(gconst107*r20);
IkReal x4474=((1.0)*sj0);
IkReal x4475=(cj1*sj2);
IkReal x4476=((1.0)*x4469);
IkReal x4477=(gconst106*x4469);
IkReal x4478=(gconst106*x4468);
IkReal x4479=((1.0)*x4468);
evalcond[0]=((((-1.0)*x4473*x4479))+((r21*x4478))+(((-1.0)*r22*x4476)));
evalcond[1]=((((-1.0)*r12*x4476))+cj0+(((-1.0)*x4470*x4479))+((r11*x4478)));
evalcond[2]=((((-1.0)*x4474))+(((-1.0)*x4471*x4479))+((r01*x4478))+(((-1.0)*r02*x4476)));
evalcond[3]=((((-1.0)*cj1*x4472))+((r22*x4468))+(((-1.0)*x4473*x4476))+((r21*x4477))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj1*x4472))+(((-1.0)*cj0*x4475))+(((-1.0)*x4471*x4476))+((r01*x4477))+((r02*x4468)));
evalcond[5]=((((-1.0)*x4474*x4475))+((r12*x4468))+(((-1.0)*x4470*x4476))+(((-1.0)*sj0*sj1*x4472))+((r11*x4477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4480=((1.0)*gconst107);
CheckValue<IkReal> x4481 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x4480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4481.valid){
continue;
}
CheckValue<IkReal> x4482=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4480)))),-1);
if(!x4482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4481.value)+(((1.5707963267949)*(x4482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4483=IKsin(j4);
IkReal x4484=IKcos(j4);
IkReal x4485=(gconst107*r10);
IkReal x4486=(gconst107*r00);
IkReal x4487=((1.0)*cj2);
IkReal x4488=(gconst107*r20);
IkReal x4489=((1.0)*sj0);
IkReal x4490=(cj1*sj2);
IkReal x4491=((1.0)*x4484);
IkReal x4492=(gconst106*x4484);
IkReal x4493=(gconst106*x4483);
IkReal x4494=((1.0)*x4483);
evalcond[0]=(((r21*x4493))+(((-1.0)*x4488*x4494))+(((-1.0)*r22*x4491)));
evalcond[1]=(cj0+(((-1.0)*x4485*x4494))+((r11*x4493))+(((-1.0)*r12*x4491)));
evalcond[2]=((((-1.0)*r02*x4491))+(((-1.0)*x4486*x4494))+((r01*x4493))+(((-1.0)*x4489)));
evalcond[3]=((((-1.0)*cj1*x4487))+((sj1*sj2))+((r21*x4492))+(((-1.0)*x4488*x4491))+((r22*x4483)));
evalcond[4]=((((-1.0)*cj0*sj1*x4487))+(((-1.0)*cj0*x4490))+((r02*x4483))+(((-1.0)*x4486*x4491))+((r01*x4492)));
evalcond[5]=((((-1.0)*x4489*x4490))+(((-1.0)*x4485*x4491))+(((-1.0)*sj0*sj1*x4487))+((r11*x4492))+((r12*x4483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4495=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4495;
j4eval[1]=IKsign(x4495);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4496=((1.0)*cj5);
IkReal x4497=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4496)));
j4eval[0]=x4497;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4496)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4498=(sj1*sj2);
IkReal x4499=(cj5*r10);
IkReal x4500=(r11*sj5);
IkReal x4501=(cj1*cj2);
IkReal x4502=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4502;
j4eval[1]=((IKabs((((r12*x4501))+(((-1.0)*r12*x4498)))))+(IKabs((((x4498*x4500))+(((-1.0)*x4500*x4501))+(((-1.0)*x4498*x4499))+((x4499*x4501))))));
j4eval[2]=IKsign(x4502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4503=(sj1*sj2);
IkReal x4504=(cj5*r10);
IkReal x4505=(r11*sj5);
IkReal x4506=(cj1*cj2);
CheckValue<IkReal> x4507=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4507.valid){
continue;
}
CheckValue<IkReal> x4508 = IKatan2WithCheck(IkReal(((((-1.0)*x4505*x4506))+((x4503*x4505))+((x4504*x4506))+(((-1.0)*x4503*x4504)))),IkReal((((r12*x4506))+(((-1.0)*r12*x4503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4507.value)))+(x4508.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4509=IKcos(j4);
IkReal x4510=IKsin(j4);
IkReal x4511=(cj5*r00);
IkReal x4512=(cj5*r10);
IkReal x4513=(r21*sj5);
IkReal x4514=((1.0)*cj2);
IkReal x4515=(cj5*r20);
IkReal x4516=((1.0)*x4509);
IkReal x4517=((1.0)*x4510);
IkReal x4518=(sj5*x4510);
IkReal x4519=(sj5*x4509);
evalcond[0]=((((-1.0)*x4512*x4516))+((r11*x4519))+((r12*x4510)));
evalcond[1]=(((x4510*x4513))+(((-1.0)*x4515*x4517))+(((-1.0)*r22*x4516)));
evalcond[2]=((((-1.0)*r02*x4516))+((r01*x4518))+(((-1.0)*x4511*x4517)));
evalcond[3]=((1.0)+(((-1.0)*x4512*x4517))+(((-1.0)*r12*x4516))+((r11*x4518)));
evalcond[4]=((((-1.0)*cj1*x4514))+((sj1*sj2))+(((-1.0)*x4515*x4516))+((r22*x4510))+((x4509*x4513)));
evalcond[5]=(((r02*x4510))+(((-1.0)*cj1*sj2))+((r01*x4519))+(((-1.0)*x4511*x4516))+(((-1.0)*sj1*x4514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4520=((1.0)*cj5);
CheckValue<IkReal> x4521=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4520))+(((-1.0)*r00*sj5)))),-1);
if(!x4521.valid){
continue;
}
CheckValue<IkReal> x4522 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4521.value)))+(x4522.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4523=IKcos(j4);
IkReal x4524=IKsin(j4);
IkReal x4525=(cj5*r00);
IkReal x4526=(cj5*r10);
IkReal x4527=(r21*sj5);
IkReal x4528=((1.0)*cj2);
IkReal x4529=(cj5*r20);
IkReal x4530=((1.0)*x4523);
IkReal x4531=((1.0)*x4524);
IkReal x4532=(sj5*x4524);
IkReal x4533=(sj5*x4523);
evalcond[0]=(((r12*x4524))+(((-1.0)*x4526*x4530))+((r11*x4533)));
evalcond[1]=(((x4524*x4527))+(((-1.0)*r22*x4530))+(((-1.0)*x4529*x4531)));
evalcond[2]=(((r01*x4532))+(((-1.0)*x4525*x4531))+(((-1.0)*r02*x4530)));
evalcond[3]=((1.0)+(((-1.0)*x4526*x4531))+(((-1.0)*r12*x4530))+((r11*x4532)));
evalcond[4]=(((x4523*x4527))+((sj1*sj2))+(((-1.0)*cj1*x4528))+((r22*x4524))+(((-1.0)*x4529*x4530)));
evalcond[5]=(((r01*x4533))+(((-1.0)*sj1*x4528))+(((-1.0)*cj1*sj2))+(((-1.0)*x4525*x4530))+((r02*x4524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4534=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4534.valid){
continue;
}
CheckValue<IkReal> x4535 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4534.value)))+(x4535.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4536=IKcos(j4);
IkReal x4537=IKsin(j4);
IkReal x4538=(cj5*r00);
IkReal x4539=(cj5*r10);
IkReal x4540=(r21*sj5);
IkReal x4541=((1.0)*cj2);
IkReal x4542=(cj5*r20);
IkReal x4543=((1.0)*x4536);
IkReal x4544=((1.0)*x4537);
IkReal x4545=(sj5*x4537);
IkReal x4546=(sj5*x4536);
evalcond[0]=(((r12*x4537))+((r11*x4546))+(((-1.0)*x4539*x4543)));
evalcond[1]=((((-1.0)*r22*x4543))+(((-1.0)*x4542*x4544))+((x4537*x4540)));
evalcond[2]=((((-1.0)*r02*x4543))+((r01*x4545))+(((-1.0)*x4538*x4544)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4543))+((r11*x4545))+(((-1.0)*x4539*x4544)));
evalcond[4]=((((-1.0)*x4542*x4543))+((sj1*sj2))+((r22*x4537))+((x4536*x4540))+(((-1.0)*cj1*x4541)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x4546))+(((-1.0)*x4538*x4543))+((r02*x4537))+(((-1.0)*sj1*x4541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4547=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4547;
j4eval[1]=IKsign(x4547);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4548=((1.0)*cj5);
IkReal x4549=((((-1.0)*r21*x4548))+(((-1.0)*r20*sj5)));
j4eval[0]=x4549;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4548))))));
j4eval[2]=IKsign(x4549);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4550=cj5*cj5;
IkReal x4551=r11*r11;
IkReal x4552=(r11*sj5);
IkReal x4553=(cj5*r10);
IkReal x4554=((r12*r12)+x4551+(((-1.0)*x4550*x4551))+((x4550*(r10*r10)))+(((-2.0)*x4552*x4553)));
j4eval[0]=x4554;
j4eval[1]=IKsign(x4554);
j4eval[2]=((IKabs(r12))+(IKabs((x4552+(((-1.0)*x4553))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4555=cj5*cj5;
IkReal x4556=r11*r11;
IkReal x4557=(cj5*r10);
IkReal x4558=(r11*sj5);
CheckValue<IkReal> x4559 = IKatan2WithCheck(IkReal((x4558+(((-1.0)*x4557)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4559.valid){
continue;
}
CheckValue<IkReal> x4560=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x4555*(r10*r10)))+x4556+(((-2.0)*x4557*x4558))+(((-1.0)*x4555*x4556)))),-1);
if(!x4560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4559.value)+(((1.5707963267949)*(x4560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4561=IKcos(j4);
IkReal x4562=IKsin(j4);
IkReal x4563=(cj5*r00);
IkReal x4564=(cj5*r10);
IkReal x4565=(r21*sj5);
IkReal x4566=(cj5*r20);
IkReal x4567=((1.0)*x4561);
IkReal x4568=((1.0)*x4562);
IkReal x4569=(sj5*x4562);
IkReal x4570=(sj5*x4561);
evalcond[0]=(((r12*x4562))+((r11*x4570))+(((-1.0)*x4564*x4567)));
evalcond[1]=((((-1.0)*x4566*x4568))+(((-1.0)*r22*x4567))+((x4562*x4565)));
evalcond[2]=((((-1.0)*r02*x4567))+(((-1.0)*x4563*x4568))+((r01*x4569)));
evalcond[3]=((-1.0)+((r11*x4569))+(((-1.0)*x4564*x4568))+(((-1.0)*r12*x4567)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4562))+((r01*x4570))+(((-1.0)*x4563*x4567)));
evalcond[5]=((((-1.0)*x4566*x4567))+((r22*x4562))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4561*x4565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4571=((1.0)*cj5);
CheckValue<IkReal> x4572=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4571))+(((-1.0)*r20*sj5)))),-1);
if(!x4572.valid){
continue;
}
CheckValue<IkReal> x4573 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x4571))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4572.value)))+(x4573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4574=IKcos(j4);
IkReal x4575=IKsin(j4);
IkReal x4576=(cj5*r00);
IkReal x4577=(cj5*r10);
IkReal x4578=(r21*sj5);
IkReal x4579=(cj5*r20);
IkReal x4580=((1.0)*x4574);
IkReal x4581=((1.0)*x4575);
IkReal x4582=(sj5*x4575);
IkReal x4583=(sj5*x4574);
evalcond[0]=(((r12*x4575))+((r11*x4583))+(((-1.0)*x4577*x4580)));
evalcond[1]=((((-1.0)*r22*x4580))+(((-1.0)*x4579*x4581))+((x4575*x4578)));
evalcond[2]=((((-1.0)*r02*x4580))+((r01*x4582))+(((-1.0)*x4576*x4581)));
evalcond[3]=((-1.0)+((r11*x4582))+(((-1.0)*r12*x4580))+(((-1.0)*x4577*x4581)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4575))+((r01*x4583))+(((-1.0)*x4576*x4580)));
evalcond[5]=((((-1.0)*x4579*x4580))+((r22*x4575))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4574*x4578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4584 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4584.valid){
continue;
}
CheckValue<IkReal> x4585=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4584.value)+(((1.5707963267949)*(x4585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4586=IKcos(j4);
IkReal x4587=IKsin(j4);
IkReal x4588=(cj5*r00);
IkReal x4589=(cj5*r10);
IkReal x4590=(r21*sj5);
IkReal x4591=(cj5*r20);
IkReal x4592=((1.0)*x4586);
IkReal x4593=((1.0)*x4587);
IkReal x4594=(sj5*x4587);
IkReal x4595=(sj5*x4586);
evalcond[0]=((((-1.0)*x4589*x4592))+((r11*x4595))+((r12*x4587)));
evalcond[1]=((((-1.0)*r22*x4592))+(((-1.0)*x4591*x4593))+((x4587*x4590)));
evalcond[2]=((((-1.0)*r02*x4592))+(((-1.0)*x4588*x4593))+((r01*x4594)));
evalcond[3]=((-1.0)+(((-1.0)*x4589*x4593))+((r11*x4594))+(((-1.0)*r12*x4592)));
evalcond[4]=(((cj2*sj1))+((r02*x4587))+((cj1*sj2))+(((-1.0)*x4588*x4592))+((r01*x4595)));
evalcond[5]=(((r22*x4587))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4591*x4592))+((x4586*x4590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4596=((-1.0)*r00);
IkReal x4598 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4598)==0){
continue;
}
IkReal x4597=pow(x4598,-0.5);
CheckValue<IkReal> x4599 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4596),IKFAST_ATAN2_MAGTHRESH);
if(!x4599.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4599.value));
IkReal gconst109=(r01*x4597);
IkReal gconst110=(x4596*x4597);
CheckValue<IkReal> x4600 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4600.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4600.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4601=((-1.0)*r00);
IkReal x4602=x4597;
CheckValue<IkReal> x4604 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4601),IKFAST_ATAN2_MAGTHRESH);
if(!x4604.valid){
continue;
}
IkReal x4603=((-1.0)*(x4604.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4603;
IkReal gconst108=x4603;
IkReal gconst109=(r01*x4602);
IkReal gconst110=(x4601*x4602);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4605=((1.0)*sj0);
IkReal x4606=((1.0)*gconst109);
CheckValue<IkReal> x4607=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4606))+(((-1.0)*gconst110*r21)))),-1);
if(!x4607.valid){
continue;
}
CheckValue<IkReal> x4608 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4605)))),IkReal((((cj0*gconst110*r00))+(((-1.0)*cj0*r01*x4606))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4607.value)))+(x4608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4609=IKsin(j4);
IkReal x4610=IKcos(j4);
IkReal x4611=(gconst109*r21);
IkReal x4612=((1.0)*cj2);
IkReal x4613=((1.0)*sj0);
IkReal x4614=(cj1*sj2);
IkReal x4615=((1.0)*x4610);
IkReal x4616=(gconst109*x4609);
IkReal x4617=(gconst109*x4610);
IkReal x4618=((1.0)*gconst110*x4609);
evalcond[0]=((((-1.0)*r20*x4618))+((x4609*x4611))+(((-1.0)*r22*x4615)));
evalcond[1]=(cj0+(((-1.0)*r10*x4618))+((r11*x4616))+(((-1.0)*r12*x4615)));
evalcond[2]=((((-1.0)*r02*x4615))+((r01*x4616))+(((-1.0)*r00*x4618))+(((-1.0)*x4613)));
evalcond[3]=((((-1.0)*gconst110*r20*x4615))+((sj1*sj2))+((x4610*x4611))+((r22*x4609))+(((-1.0)*cj1*x4612)));
evalcond[4]=((((-1.0)*cj0*x4614))+(((-1.0)*cj0*sj1*x4612))+((r01*x4617))+((r02*x4609))+(((-1.0)*gconst110*r00*x4615)));
evalcond[5]=((((-1.0)*gconst110*r10*x4615))+((r12*x4609))+((r11*x4617))+(((-1.0)*sj0*sj1*x4612))+(((-1.0)*x4613*x4614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4619=((1.0)*gconst110);
CheckValue<IkReal> x4620 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4619))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4620.valid){
continue;
}
CheckValue<IkReal> x4621=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4619))+(((-1.0)*gconst109*r10)))),-1);
if(!x4621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4620.value)+(((1.5707963267949)*(x4621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4622=IKsin(j4);
IkReal x4623=IKcos(j4);
IkReal x4624=(gconst109*r21);
IkReal x4625=((1.0)*cj2);
IkReal x4626=((1.0)*sj0);
IkReal x4627=(cj1*sj2);
IkReal x4628=((1.0)*x4623);
IkReal x4629=(gconst109*x4622);
IkReal x4630=(gconst109*x4623);
IkReal x4631=((1.0)*gconst110*x4622);
evalcond[0]=((((-1.0)*r20*x4631))+(((-1.0)*r22*x4628))+((x4622*x4624)));
evalcond[1]=(cj0+((r11*x4629))+(((-1.0)*r10*x4631))+(((-1.0)*r12*x4628)));
evalcond[2]=((((-1.0)*r02*x4628))+(((-1.0)*r00*x4631))+((r01*x4629))+(((-1.0)*x4626)));
evalcond[3]=((((-1.0)*gconst110*r20*x4628))+(((-1.0)*cj1*x4625))+((x4623*x4624))+((sj1*sj2))+((r22*x4622)));
evalcond[4]=(((r01*x4630))+(((-1.0)*gconst110*r00*x4628))+(((-1.0)*cj0*x4627))+((r02*x4622))+(((-1.0)*cj0*sj1*x4625)));
evalcond[5]=(((r12*x4622))+((r11*x4630))+(((-1.0)*x4626*x4627))+(((-1.0)*gconst110*r10*x4628))+(((-1.0)*sj0*sj1*x4625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4632=((-1.0)*r01);
IkReal x4634 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4634)==0){
continue;
}
IkReal x4633=pow(x4634,-0.5);
CheckValue<IkReal> x4635 = IKatan2WithCheck(IkReal(x4632),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4635.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4635.value))));
IkReal gconst112=(x4632*x4633);
IkReal gconst113=((1.0)*r00*x4633);
CheckValue<IkReal> x4636 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4636.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4636.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4637=((-1.0)*r01);
CheckValue<IkReal> x4640 = IKatan2WithCheck(IkReal(x4637),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4640.valid){
continue;
}
IkReal x4638=((1.0)*(x4640.value));
IkReal x4639=x4633;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4638)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4638)));
IkReal gconst112=(x4637*x4639);
IkReal gconst113=((1.0)*r00*x4639);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4641=((-1.0)*r01);
CheckValue<IkReal> x4644 = IKatan2WithCheck(IkReal(x4641),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4644.valid){
continue;
}
IkReal x4642=((1.0)*(x4644.value));
IkReal x4643=x4633;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4642)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4642)));
IkReal gconst112=(x4641*x4643);
IkReal gconst113=((1.0)*r00*x4643);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4645=((-1.0)*r01);
CheckValue<IkReal> x4648 = IKatan2WithCheck(IkReal(x4645),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4648.valid){
continue;
}
IkReal x4646=((1.0)*(x4648.value));
IkReal x4647=x4633;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4646)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4646)));
IkReal gconst112=(x4645*x4647);
IkReal gconst113=((1.0)*r00*x4647);
IkReal x4649=r02*r02;
IkReal x4650=(r12*sj0);
IkReal x4651=((1.0)*cj0);
IkReal x4652=x4633;
j4eval[0]=((IKabs(((((-1.0)*r02*x4651))+(((-1.0)*x4650)))))+(IKabs((((r02*x4650*x4652))+(((-1.0)*x4651*x4652))+((cj0*x4649*x4652))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4653=((1.0)*sj0);
IkReal x4654=((1.0)*gconst112);
CheckValue<IkReal> x4655 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4653)))),IkReal(((((-1.0)*cj0*r01*x4654))+(((-1.0)*gconst112*r11*x4653))+((gconst113*r10*sj0))+((cj0*gconst113*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4655.valid){
continue;
}
CheckValue<IkReal> x4656=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4654))+(((-1.0)*gconst113*r21)))),-1);
if(!x4656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4655.value)+(((1.5707963267949)*(x4656.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4657=IKsin(j4);
IkReal x4658=IKcos(j4);
IkReal x4659=(gconst113*r20);
IkReal x4660=(gconst112*r21);
IkReal x4661=((1.0)*cj2);
IkReal x4662=(gconst113*r00);
IkReal x4663=(gconst113*r10);
IkReal x4664=((1.0)*sj0);
IkReal x4665=(cj1*sj2);
IkReal x4666=((1.0)*x4658);
IkReal x4667=((1.0)*x4657);
IkReal x4668=(gconst112*x4658);
IkReal x4669=(gconst112*x4657);
evalcond[0]=((((-1.0)*x4659*x4667))+(((-1.0)*r22*x4666))+((x4657*x4660)));
evalcond[1]=((((-1.0)*x4663*x4667))+cj0+((r11*x4669))+(((-1.0)*r12*x4666)));
evalcond[2]=((((-1.0)*x4662*x4667))+((r01*x4669))+(((-1.0)*x4664))+(((-1.0)*r02*x4666)));
evalcond[3]=((((-1.0)*x4659*x4666))+((x4658*x4660))+((sj1*sj2))+((r22*x4657))+(((-1.0)*cj1*x4661)));
evalcond[4]=((((-1.0)*cj0*x4665))+(((-1.0)*x4662*x4666))+((r01*x4668))+((r02*x4657))+(((-1.0)*cj0*sj1*x4661)));
evalcond[5]=(((r12*x4657))+(((-1.0)*x4663*x4666))+((r11*x4668))+(((-1.0)*sj0*sj1*x4661))+(((-1.0)*x4664*x4665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4670=((1.0)*gconst113);
CheckValue<IkReal> x4671 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4671.valid){
continue;
}
CheckValue<IkReal> x4672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4670))+(((-1.0)*gconst112*r10)))),-1);
if(!x4672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4671.value)+(((1.5707963267949)*(x4672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4673=IKsin(j4);
IkReal x4674=IKcos(j4);
IkReal x4675=(gconst113*r20);
IkReal x4676=(gconst112*r21);
IkReal x4677=((1.0)*cj2);
IkReal x4678=(gconst113*r00);
IkReal x4679=(gconst113*r10);
IkReal x4680=((1.0)*sj0);
IkReal x4681=(cj1*sj2);
IkReal x4682=((1.0)*x4674);
IkReal x4683=((1.0)*x4673);
IkReal x4684=(gconst112*x4674);
IkReal x4685=(gconst112*x4673);
evalcond[0]=(((x4673*x4676))+(((-1.0)*x4675*x4683))+(((-1.0)*r22*x4682)));
evalcond[1]=((((-1.0)*x4679*x4683))+cj0+((r11*x4685))+(((-1.0)*r12*x4682)));
evalcond[2]=((((-1.0)*r02*x4682))+((r01*x4685))+(((-1.0)*x4680))+(((-1.0)*x4678*x4683)));
evalcond[3]=((((-1.0)*cj1*x4677))+((sj1*sj2))+((x4674*x4676))+((r22*x4673))+(((-1.0)*x4675*x4682)));
evalcond[4]=(((r02*x4673))+(((-1.0)*cj0*sj1*x4677))+(((-1.0)*cj0*x4681))+((r01*x4684))+(((-1.0)*x4678*x4682)));
evalcond[5]=((((-1.0)*x4679*x4682))+(((-1.0)*sj0*sj1*x4677))+(((-1.0)*x4680*x4681))+((r12*x4673))+((r11*x4684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4686=((1.0)*gconst113);
CheckValue<IkReal> x4687 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4686)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4687.valid){
continue;
}
CheckValue<IkReal> x4688=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4686))+(((-1.0)*gconst112*r00)))),-1);
if(!x4688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4687.value)+(((1.5707963267949)*(x4688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4689=IKsin(j4);
IkReal x4690=IKcos(j4);
IkReal x4691=(gconst113*r20);
IkReal x4692=(gconst112*r21);
IkReal x4693=((1.0)*cj2);
IkReal x4694=(gconst113*r00);
IkReal x4695=(gconst113*r10);
IkReal x4696=((1.0)*sj0);
IkReal x4697=(cj1*sj2);
IkReal x4698=((1.0)*x4690);
IkReal x4699=((1.0)*x4689);
IkReal x4700=(gconst112*x4690);
IkReal x4701=(gconst112*x4689);
evalcond[0]=((((-1.0)*r22*x4698))+(((-1.0)*x4691*x4699))+((x4689*x4692)));
evalcond[1]=((((-1.0)*r12*x4698))+cj0+(((-1.0)*x4695*x4699))+((r11*x4701)));
evalcond[2]=((((-1.0)*r02*x4698))+((r01*x4701))+(((-1.0)*x4694*x4699))+(((-1.0)*x4696)));
evalcond[3]=(((x4690*x4692))+(((-1.0)*cj1*x4693))+((sj1*sj2))+((r22*x4689))+(((-1.0)*x4691*x4698)));
evalcond[4]=(((r02*x4689))+(((-1.0)*cj0*sj1*x4693))+(((-1.0)*cj0*x4697))+((r01*x4700))+(((-1.0)*x4694*x4698)));
evalcond[5]=((((-1.0)*x4696*x4697))+(((-1.0)*sj0*sj1*x4693))+((r12*x4689))+(((-1.0)*x4695*x4698))+((r11*x4700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4702=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4702;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4703=((1.0)*cj5);
IkReal x4704=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4703)));
j4eval[0]=x4704;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4703))))));
j4eval[2]=IKsign(x4704);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4705=cj5*cj5;
IkReal x4706=r01*r01;
IkReal x4707=(cj5*r00);
IkReal x4708=(r01*sj5);
IkReal x4709=((((-1.0)*x4705*x4706))+x4706+(((-2.0)*x4707*x4708))+((x4705*(r00*r00)))+(r02*r02));
j4eval[0]=x4709;
j4eval[1]=IKsign(x4709);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4707))+x4708))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4710=cj5*cj5;
IkReal x4711=r01*r01;
IkReal x4712=(r01*sj5);
IkReal x4713=(cj5*r00);
CheckValue<IkReal> x4714=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4710*x4711))+(((-2.0)*x4712*x4713))+((x4710*(r00*r00)))+x4711+(r02*r02))),-1);
if(!x4714.valid){
continue;
}
CheckValue<IkReal> x4715 = IKatan2WithCheck(IkReal(((((-1.0)*x4713))+x4712)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4714.value)))+(x4715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4716=IKcos(j4);
IkReal x4717=IKsin(j4);
IkReal x4718=(cj5*r00);
IkReal x4719=(cj5*r10);
IkReal x4720=(r21*sj5);
IkReal x4721=((1.0)*cj2);
IkReal x4722=(cj5*r20);
IkReal x4723=((1.0)*x4716);
IkReal x4724=((1.0)*x4717);
IkReal x4725=(sj5*x4717);
IkReal x4726=(sj5*x4716);
evalcond[0]=((((-1.0)*x4718*x4723))+((r01*x4726))+((r02*x4717)));
evalcond[1]=((((-1.0)*x4722*x4724))+((x4717*x4720))+(((-1.0)*r22*x4723)));
evalcond[2]=(((r11*x4725))+(((-1.0)*r12*x4723))+(((-1.0)*x4719*x4724)));
evalcond[3]=((-1.0)+(((-1.0)*x4718*x4724))+((r01*x4725))+(((-1.0)*r02*x4723)));
evalcond[4]=((((-1.0)*x4722*x4723))+((r22*x4717))+(((-1.0)*cj1*x4721))+((sj1*sj2))+((x4716*x4720)));
evalcond[5]=((((-1.0)*sj1*x4721))+((r11*x4726))+(((-1.0)*cj1*sj2))+(((-1.0)*x4719*x4723))+((r12*x4717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4727=((1.0)*cj5);
CheckValue<IkReal> x4728 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4727)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4728.valid){
continue;
}
CheckValue<IkReal> x4729=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4727)))),-1);
if(!x4729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4728.value)+(((1.5707963267949)*(x4729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4730=IKcos(j4);
IkReal x4731=IKsin(j4);
IkReal x4732=(cj5*r00);
IkReal x4733=(cj5*r10);
IkReal x4734=(r21*sj5);
IkReal x4735=((1.0)*cj2);
IkReal x4736=(cj5*r20);
IkReal x4737=((1.0)*x4730);
IkReal x4738=((1.0)*x4731);
IkReal x4739=(sj5*x4731);
IkReal x4740=(sj5*x4730);
evalcond[0]=(((r01*x4740))+(((-1.0)*x4732*x4737))+((r02*x4731)));
evalcond[1]=(((x4731*x4734))+(((-1.0)*x4736*x4738))+(((-1.0)*r22*x4737)));
evalcond[2]=(((r11*x4739))+(((-1.0)*r12*x4737))+(((-1.0)*x4733*x4738)));
evalcond[3]=((-1.0)+(((-1.0)*x4732*x4738))+((r01*x4739))+(((-1.0)*r02*x4737)));
evalcond[4]=(((x4730*x4734))+(((-1.0)*cj1*x4735))+(((-1.0)*x4736*x4737))+((sj1*sj2))+((r22*x4731)));
evalcond[5]=(((r11*x4740))+(((-1.0)*sj1*x4735))+(((-1.0)*cj1*sj2))+(((-1.0)*x4733*x4737))+((r12*x4731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4741=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4741.valid){
continue;
}
CheckValue<IkReal> x4742 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4741.value)))+(x4742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4743=IKcos(j4);
IkReal x4744=IKsin(j4);
IkReal x4745=(cj5*r00);
IkReal x4746=(cj5*r10);
IkReal x4747=(r21*sj5);
IkReal x4748=((1.0)*cj2);
IkReal x4749=(cj5*r20);
IkReal x4750=((1.0)*x4743);
IkReal x4751=((1.0)*x4744);
IkReal x4752=(sj5*x4744);
IkReal x4753=(sj5*x4743);
evalcond[0]=(((r01*x4753))+(((-1.0)*x4745*x4750))+((r02*x4744)));
evalcond[1]=((((-1.0)*x4749*x4751))+(((-1.0)*r22*x4750))+((x4744*x4747)));
evalcond[2]=(((r11*x4752))+(((-1.0)*x4746*x4751))+(((-1.0)*r12*x4750)));
evalcond[3]=((-1.0)+((r01*x4752))+(((-1.0)*x4745*x4751))+(((-1.0)*r02*x4750)));
evalcond[4]=((((-1.0)*x4749*x4750))+(((-1.0)*cj1*x4748))+((sj1*sj2))+((x4743*x4747))+((r22*x4744)));
evalcond[5]=((((-1.0)*sj1*x4748))+((r11*x4753))+((r12*x4744))+(((-1.0)*x4746*x4750))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4754=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4754;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4754);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4755=((1.0)*cj5);
IkReal x4756=((((-1.0)*r21*x4755))+(((-1.0)*r20*sj5)));
j4eval[0]=x4756;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x4755)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4757=cj5*cj5;
IkReal x4758=r01*r01;
IkReal x4759=(r01*sj5);
IkReal x4760=(cj5*r00);
IkReal x4761=((((-1.0)*(r02*r02)))+(((2.0)*x4759*x4760))+(((-1.0)*x4757*(r00*r00)))+((x4757*x4758))+(((-1.0)*x4758)));
j4eval[0]=x4761;
j4eval[1]=IKsign(x4761);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4760))+x4759))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4762=cj5*cj5;
IkReal x4763=r01*r01;
IkReal x4764=(r01*sj5);
IkReal x4765=(cj5*r00);
CheckValue<IkReal> x4766=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4763))+(((2.0)*x4764*x4765))+(((-1.0)*(r02*r02)))+((x4762*x4763))+(((-1.0)*x4762*(r00*r00))))),-1);
if(!x4766.valid){
continue;
}
CheckValue<IkReal> x4767 = IKatan2WithCheck(IkReal(((((-1.0)*x4765))+x4764)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4766.value)))+(x4767.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4768=IKcos(j4);
IkReal x4769=IKsin(j4);
IkReal x4770=(cj5*r00);
IkReal x4771=(cj5*r10);
IkReal x4772=(r21*sj5);
IkReal x4773=(cj5*r20);
IkReal x4774=((1.0)*x4768);
IkReal x4775=((1.0)*x4769);
IkReal x4776=(sj5*x4769);
IkReal x4777=(sj5*x4768);
evalcond[0]=(((r02*x4769))+((r01*x4777))+(((-1.0)*x4770*x4774)));
evalcond[1]=(((x4769*x4772))+(((-1.0)*x4773*x4775))+(((-1.0)*r22*x4774)));
evalcond[2]=(((r11*x4776))+(((-1.0)*r12*x4774))+(((-1.0)*x4771*x4775)));
evalcond[3]=((1.0)+((r01*x4776))+(((-1.0)*x4770*x4775))+(((-1.0)*r02*x4774)));
evalcond[4]=(((cj2*sj1))+((r11*x4777))+((cj1*sj2))+(((-1.0)*x4771*x4774))+((r12*x4769)));
evalcond[5]=(((r22*x4769))+(((-1.0)*x4773*x4774))+((x4768*x4772))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4778=((1.0)*cj5);
CheckValue<IkReal> x4779=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4778))+(((-1.0)*r20*sj5)))),-1);
if(!x4779.valid){
continue;
}
CheckValue<IkReal> x4780 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4779.value)))+(x4780.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4781=IKcos(j4);
IkReal x4782=IKsin(j4);
IkReal x4783=(cj5*r00);
IkReal x4784=(cj5*r10);
IkReal x4785=(r21*sj5);
IkReal x4786=(cj5*r20);
IkReal x4787=((1.0)*x4781);
IkReal x4788=((1.0)*x4782);
IkReal x4789=(sj5*x4782);
IkReal x4790=(sj5*x4781);
evalcond[0]=(((r02*x4782))+((r01*x4790))+(((-1.0)*x4783*x4787)));
evalcond[1]=((((-1.0)*x4786*x4788))+(((-1.0)*r22*x4787))+((x4782*x4785)));
evalcond[2]=(((r11*x4789))+(((-1.0)*x4784*x4788))+(((-1.0)*r12*x4787)));
evalcond[3]=((1.0)+((r01*x4789))+(((-1.0)*x4783*x4788))+(((-1.0)*r02*x4787)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4782))+((r11*x4790))+(((-1.0)*x4784*x4787)));
evalcond[5]=(((r22*x4782))+(((-1.0)*x4786*x4787))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4781*x4785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4791 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4791.valid){
continue;
}
CheckValue<IkReal> x4792=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4791.value)+(((1.5707963267949)*(x4792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4793=IKcos(j4);
IkReal x4794=IKsin(j4);
IkReal x4795=(cj5*r00);
IkReal x4796=(cj5*r10);
IkReal x4797=(r21*sj5);
IkReal x4798=(cj5*r20);
IkReal x4799=((1.0)*x4793);
IkReal x4800=((1.0)*x4794);
IkReal x4801=(sj5*x4794);
IkReal x4802=(sj5*x4793);
evalcond[0]=(((r01*x4802))+((r02*x4794))+(((-1.0)*x4795*x4799)));
evalcond[1]=((((-1.0)*r22*x4799))+(((-1.0)*x4798*x4800))+((x4794*x4797)));
evalcond[2]=((((-1.0)*x4796*x4800))+(((-1.0)*r12*x4799))+((r11*x4801)));
evalcond[3]=((1.0)+((r01*x4801))+(((-1.0)*r02*x4799))+(((-1.0)*x4795*x4800)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4796*x4799))+((r12*x4794))+((r11*x4802)));
evalcond[5]=(((x4793*x4797))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4798*x4799))+((r22*x4794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4803=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4803);
rxp1_1=(px*r21);
rxp1_2=(r11*x4803);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4804=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4804);
rxp1_1=(px*r21);
rxp1_2=(r11*x4804);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4805=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4805);
rxp1_1=(px*r21);
rxp1_2=(r11*x4805);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4808=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4808.valid){
continue;
}
IkReal x4806=x4808.value;
IkReal x4807=(sj0*x4806);
cj4array[0]=(((cj2*sj1*x4807))+((cj1*sj2*x4807)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4809=IKsin(j4);
IkReal x4810=IKcos(j4);
IkReal x4811=(r21*sj5);
IkReal x4812=((1.0)*cj5*r20);
evalcond[0]=(r02*x4809);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4810)));
evalcond[2]=(((x4809*x4811))+(((-1.0)*x4809*x4812)));
evalcond[3]=(((r11*sj5*x4809))+(((-1.0)*cj5*r10*x4809)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4810*x4811))+(((-1.0)*x4810*x4812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4814=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4814.valid){
continue;
}
IkReal x4813=x4814.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4813))+((cj1*cj2*x4813)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4815=IKsin(j4);
IkReal x4816=IKcos(j4);
IkReal x4817=((1.0)*sj0);
IkReal x4818=((1.0)*cj5);
IkReal x4819=(sj5*x4815);
evalcond[0]=(r02*x4815);
evalcond[1]=((((-1.0)*x4817))+(((-1.0)*r02*x4816)));
evalcond[2]=(((r21*x4819))+(((-1.0)*r20*x4815*x4818)));
evalcond[3]=(((r11*x4819))+(((-1.0)*r10*x4815*x4818)));
evalcond[4]=((((-1.0)*cj2*sj1*x4817))+(((-1.0)*cj1*sj2*x4817))+((r11*sj5*x4816))+(((-1.0)*r10*x4816*x4818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4820=IKPowWithIntegerCheck(r02,-1);
if(!x4820.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4820.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4821=IKsin(j4);
IkReal x4822=IKcos(j4);
IkReal x4823=((1.0)*cj1);
IkReal x4824=(r21*sj5);
IkReal x4825=((1.0)*cj5);
IkReal x4826=(r11*sj5);
evalcond[0]=(r02*x4821);
evalcond[1]=(((x4821*x4824))+(((-1.0)*r20*x4821*x4825)));
evalcond[2]=(((x4821*x4826))+(((-1.0)*r10*x4821*x4825)));
evalcond[3]=((((-1.0)*r20*x4822*x4825))+((sj1*sj2))+((x4822*x4824))+(((-1.0)*cj2*x4823)));
evalcond[4]=((((-1.0)*sj0*sj2*x4823))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4822*x4825))+((x4822*x4826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4827=((1.0)*sj0);
IkReal x4828=((1.0)*cj0);
CheckValue<IkReal> x4829 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4828))+(((-1.0)*r12*x4827)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4828))+(((-1.0)*r11*sj5*x4827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4829.valid){
continue;
}
CheckValue<IkReal> x4830=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4829.value)+(((1.5707963267949)*(x4830.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4831=IKsin(j4);
IkReal x4832=IKcos(j4);
IkReal x4833=(cj5*r00);
IkReal x4834=(cj5*r10);
IkReal x4835=(r21*sj5);
IkReal x4836=((1.0)*cj2);
IkReal x4837=((1.0)*sj0);
IkReal x4838=(cj1*sj2);
IkReal x4839=(cj5*r20);
IkReal x4840=((1.0)*x4832);
IkReal x4841=((1.0)*x4831);
IkReal x4842=(sj5*x4831);
IkReal x4843=(sj5*x4832);
evalcond[0]=((((-1.0)*x4839*x4841))+((x4831*x4835))+(((-1.0)*r22*x4840)));
evalcond[1]=(cj0+((r11*x4842))+(((-1.0)*x4834*x4841))+(((-1.0)*r12*x4840)));
evalcond[2]=((((-1.0)*r02*x4840))+(((-1.0)*x4833*x4841))+(((-1.0)*x4837))+((r01*x4842)));
evalcond[3]=((((-1.0)*x4839*x4840))+((sj1*sj2))+((r22*x4831))+(((-1.0)*cj1*x4836))+((x4832*x4835)));
evalcond[4]=((((-1.0)*cj0*sj1*x4836))+(((-1.0)*x4833*x4840))+(((-1.0)*cj0*x4838))+((r01*x4843))+((r02*x4831)));
evalcond[5]=(((r12*x4831))+(((-1.0)*sj0*sj1*x4836))+((r11*x4843))+(((-1.0)*x4834*x4840))+(((-1.0)*x4837*x4838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4844=((1.0)*cj5);
CheckValue<IkReal> x4845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4844)))),-1);
if(!x4845.valid){
continue;
}
CheckValue<IkReal> x4846 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4845.value)))+(x4846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4847=IKsin(j4);
IkReal x4848=IKcos(j4);
IkReal x4849=(cj5*r00);
IkReal x4850=(cj5*r10);
IkReal x4851=(r21*sj5);
IkReal x4852=((1.0)*cj2);
IkReal x4853=((1.0)*sj0);
IkReal x4854=(cj1*sj2);
IkReal x4855=(cj5*r20);
IkReal x4856=((1.0)*x4848);
IkReal x4857=((1.0)*x4847);
IkReal x4858=(sj5*x4847);
IkReal x4859=(sj5*x4848);
evalcond[0]=((((-1.0)*r22*x4856))+(((-1.0)*x4855*x4857))+((x4847*x4851)));
evalcond[1]=(cj0+(((-1.0)*r12*x4856))+(((-1.0)*x4850*x4857))+((r11*x4858)));
evalcond[2]=(((r01*x4858))+(((-1.0)*x4853))+(((-1.0)*r02*x4856))+(((-1.0)*x4849*x4857)));
evalcond[3]=(((x4848*x4851))+((sj1*sj2))+((r22*x4847))+(((-1.0)*cj1*x4852))+(((-1.0)*x4855*x4856)));
evalcond[4]=(((r02*x4847))+((r01*x4859))+(((-1.0)*cj0*x4854))+(((-1.0)*x4849*x4856))+(((-1.0)*cj0*sj1*x4852)));
evalcond[5]=((((-1.0)*x4853*x4854))+(((-1.0)*sj0*sj1*x4852))+((r12*x4847))+(((-1.0)*x4850*x4856))+((r11*x4859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4860=((1.0)*cj5);
CheckValue<IkReal> x4861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4860)))),-1);
if(!x4861.valid){
continue;
}
CheckValue<IkReal> x4862 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4860))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4861.value)))+(x4862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4863=IKsin(j4);
IkReal x4864=IKcos(j4);
IkReal x4865=(cj5*r00);
IkReal x4866=(cj5*r10);
IkReal x4867=(r21*sj5);
IkReal x4868=((1.0)*cj2);
IkReal x4869=((1.0)*sj0);
IkReal x4870=(cj1*sj2);
IkReal x4871=(cj5*r20);
IkReal x4872=((1.0)*x4864);
IkReal x4873=((1.0)*x4863);
IkReal x4874=(sj5*x4863);
IkReal x4875=(sj5*x4864);
evalcond[0]=((((-1.0)*r22*x4872))+((x4863*x4867))+(((-1.0)*x4871*x4873)));
evalcond[1]=(cj0+(((-1.0)*x4866*x4873))+(((-1.0)*r12*x4872))+((r11*x4874)));
evalcond[2]=(((r01*x4874))+(((-1.0)*x4869))+(((-1.0)*x4865*x4873))+(((-1.0)*r02*x4872)));
evalcond[3]=(((r22*x4863))+((sj1*sj2))+(((-1.0)*x4871*x4872))+(((-1.0)*cj1*x4868))+((x4864*x4867)));
evalcond[4]=((((-1.0)*cj0*sj1*x4868))+((r01*x4875))+(((-1.0)*x4865*x4872))+((r02*x4863))+(((-1.0)*cj0*x4870)));
evalcond[5]=(((r12*x4863))+(((-1.0)*sj0*sj1*x4868))+(((-1.0)*x4869*x4870))+(((-1.0)*x4866*x4872))+((r11*x4875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4876=((1.0)*cj5);
IkReal x4877=((1.0)*sj5);
IkReal x4878=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4878;
j0eval[1]=((IKabs(((((-1.0)*r00*x4877))+(((-1.0)*r01*x4876)))))+(IKabs(((((-1.0)*r10*x4877))+(((-1.0)*r11*x4876))))));
j0eval[2]=IKsign(x4878);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4879=r21*r21;
IkReal x4880=cj5*cj5;
IkReal x4881=(cj2*sj1);
IkReal x4882=(cj1*sj2);
IkReal x4883=(r21*sj5);
IkReal x4884=((1.0)*cj5*r20);
IkReal x4885=(((x4879*x4880))+(((-1.0)*(r22*r22)))+(((-1.0)*x4880*(r20*r20)))+(((-1.0)*x4879))+(((2.0)*cj5*r20*x4883)));
j4eval[0]=x4885;
j4eval[1]=((IKabs((((r22*x4881))+((r22*x4882)))))+(IKabs(((((-1.0)*x4881*x4884))+(((-1.0)*x4882*x4884))+((x4881*x4883))+((x4882*x4883))))));
j4eval[2]=IKsign(x4885);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4886=cj1*cj1;
IkReal x4887=(cj2*sj2);
IkReal x4888=(cj2*sj1);
IkReal x4889=(cj1*sj1);
j0eval[0]=((((-2.0)*cj1*cj2*x4888))+(((-1.06936921195177)*sj2*x4886))+(((-1.06936921195177)*cj1*x4888))+(((-2.0)*x4886*x4887))+x4889+x4887);
j0eval[1]=((((-1.0)*x4888))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.11468804378898)*px))+(((0.828504637423993)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.11468804378898)*py))+(((0.828504637423993)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.11468804378898)*px))+(((0.828504637423993)*py))))+IKsqr(((((0.11468804378898)*py))+(((0.828504637423993)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.11468804378898)*px))+(((0.828504637423993)*py))), ((((0.11468804378898)*py))+(((0.828504637423993)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4890=IKcos(j0);
IkReal x4891=IKsin(j0);
evalcond[0]=((((1.1843)*x4890))+(((-1.0)*px))+(((-0.16394)*x4891)));
evalcond[1]=((((0.16394)*x4890))+(((1.1843)*x4891))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4892=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4892;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4893=((1.0)*cj5);
IkReal x4894=((((-1.0)*r01*x4893))+(((-1.0)*r00*sj5)));
j4eval[0]=x4894;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4893))))));
j4eval[2]=IKsign(x4894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4895=((1.0)*cj5);
IkReal x4896=((((-1.0)*r01*x4895))+(((-1.0)*r00*sj5)));
j4eval[0]=x4896;
j4eval[1]=IKsign(x4896);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4895))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4897=((1.0)*cj5);
CheckValue<IkReal> x4898 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4897))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4898.valid){
continue;
}
CheckValue<IkReal> x4899=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4897))+(((-1.0)*r00*sj5)))),-1);
if(!x4899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4898.value)+(((1.5707963267949)*(x4899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4900=IKcos(j4);
IkReal x4901=IKsin(j4);
IkReal x4902=((1.0)*sj0);
IkReal x4903=(cj5*r00);
IkReal x4904=(cj5*r10);
IkReal x4905=(cj5*r20);
IkReal x4906=((1.0)*x4900);
IkReal x4907=((1.0)*x4901);
IkReal x4908=(sj5*x4900);
IkReal x4909=(sj5*x4901);
evalcond[0]=((((-1.0)*x4905*x4906))+((r21*x4908))+((r22*x4901)));
evalcond[1]=((((-1.0)*x4905*x4907))+((r21*x4909))+(((-1.0)*r22*x4906)));
evalcond[2]=((((-1.0)*r12*x4906))+cj0+(((-1.0)*x4904*x4907))+((r11*x4909)));
evalcond[3]=(((r02*x4901))+(((-1.0)*x4903*x4906))+((r01*x4908))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4902))+(((-1.0)*x4904*x4906))+((r11*x4908))+((r12*x4901)));
evalcond[5]=((((-1.0)*x4902))+(((-1.0)*x4903*x4907))+(((-1.0)*r02*x4906))+((r01*x4909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4910=((1.0)*cj5);
CheckValue<IkReal> x4911 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4910))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4911.valid){
continue;
}
CheckValue<IkReal> x4912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4910)))),-1);
if(!x4912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4911.value)+(((1.5707963267949)*(x4912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4913=IKcos(j4);
IkReal x4914=IKsin(j4);
IkReal x4915=((1.0)*sj0);
IkReal x4916=(cj5*r00);
IkReal x4917=(cj5*r10);
IkReal x4918=(cj5*r20);
IkReal x4919=((1.0)*x4913);
IkReal x4920=((1.0)*x4914);
IkReal x4921=(sj5*x4913);
IkReal x4922=(sj5*x4914);
evalcond[0]=((((-1.0)*x4918*x4919))+((r21*x4921))+((r22*x4914)));
evalcond[1]=((((-1.0)*x4918*x4920))+((r21*x4922))+(((-1.0)*r22*x4919)));
evalcond[2]=(cj0+(((-1.0)*r12*x4919))+(((-1.0)*x4917*x4920))+((r11*x4922)));
evalcond[3]=(((r02*x4914))+((r01*x4921))+(((-1.0)*x4916*x4919))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4915))+((r12*x4914))+((r11*x4921))+(((-1.0)*x4917*x4919)));
evalcond[5]=((((-1.0)*r02*x4919))+(((-1.0)*x4915))+(((-1.0)*x4916*x4920))+((r01*x4922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4923 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4923.valid){
continue;
}
CheckValue<IkReal> x4924=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4923.value)+(((1.5707963267949)*(x4924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4925=IKcos(j4);
IkReal x4926=IKsin(j4);
IkReal x4927=((1.0)*sj0);
IkReal x4928=(cj5*r00);
IkReal x4929=(cj5*r10);
IkReal x4930=(cj5*r20);
IkReal x4931=((1.0)*x4925);
IkReal x4932=((1.0)*x4926);
IkReal x4933=(sj5*x4925);
IkReal x4934=(sj5*x4926);
evalcond[0]=((((-1.0)*x4930*x4931))+((r22*x4926))+((r21*x4933)));
evalcond[1]=((((-1.0)*x4930*x4932))+((r21*x4934))+(((-1.0)*r22*x4931)));
evalcond[2]=(cj0+(((-1.0)*r12*x4931))+(((-1.0)*x4929*x4932))+((r11*x4934)));
evalcond[3]=(((r01*x4933))+((r02*x4926))+(((-1.0)*x4928*x4931))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4929*x4931))+((r11*x4933))+(((-1.0)*x4927))+((r12*x4926)));
evalcond[5]=((((-1.0)*r02*x4931))+((r01*x4934))+(((-1.0)*x4928*x4932))+(((-1.0)*x4927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.3953122064836)*py))+(((-5.76190133831036)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.3953122064836)*px))+(((5.76190133831036)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.3953122064836)*py))+(((-5.76190133831036)*px))))+IKsqr(((((1.3953122064836)*px))+(((5.76190133831036)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.3953122064836)*py))+(((-5.76190133831036)*px))), ((((1.3953122064836)*px))+(((5.76190133831036)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4935=IKsin(j0);
IkReal x4936=IKcos(j0);
evalcond[0]=((((0.0397)*x4936))+(((-0.16394)*x4935))+(((-1.0)*px)));
evalcond[1]=((((0.0397)*x4935))+(((0.16394)*x4936))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4937=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4937;
j4eval[1]=IKsign(x4937);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4938=((1.0)*cj5);
IkReal x4939=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4938)));
j4eval[0]=x4939;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4938)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4939);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4940=cj5*cj5;
IkReal x4941=((1.0)*r20);
IkReal x4942=(r01*r21);
IkReal x4943=(r21*sj5);
IkReal x4944=(((cj5*r01*r20*sj5))+((cj5*r00*x4943))+(((-1.0)*r02*r22))+((x4940*x4942))+(((-1.0)*r00*x4940*x4941))+(((-1.0)*x4942)));
j4eval[0]=x4944;
j4eval[1]=((IKabs((((cj0*x4943))+(((-1.0)*cj0*cj5*x4941)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4945=cj5*cj5;
IkReal x4946=((1.0)*r20);
IkReal x4947=(r01*r21);
IkReal x4948=(r21*sj5);
CheckValue<IkReal> x4949=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x4948))+(((-1.0)*r00*x4945*x4946))+(((-1.0)*r02*r22))+(((-1.0)*x4947))+((x4945*x4947)))),-1);
if(!x4949.valid){
continue;
}
CheckValue<IkReal> x4950 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4948))+(((-1.0)*cj0*cj5*x4946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4949.value)))+(x4950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4951=IKcos(j4);
IkReal x4952=IKsin(j4);
IkReal x4953=(cj5*r00);
IkReal x4954=(cj5*r10);
IkReal x4955=(cj5*r20);
IkReal x4956=((1.0)*x4951);
IkReal x4957=((1.0)*x4952);
IkReal x4958=(sj5*x4951);
IkReal x4959=(sj5*x4952);
evalcond[0]=(((r22*x4952))+(((-1.0)*x4955*x4956))+((r21*x4958)));
evalcond[1]=((((-1.0)*x4955*x4957))+(((-1.0)*r22*x4956))+((r21*x4959)));
evalcond[2]=(cj0+((r02*x4952))+((r01*x4958))+(((-1.0)*x4953*x4956)));
evalcond[3]=(sj0+((r12*x4952))+((r11*x4958))+(((-1.0)*x4954*x4956)));
evalcond[4]=(cj0+((r11*x4959))+(((-1.0)*r12*x4956))+(((-1.0)*x4954*x4957)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4956))+((r01*x4959))+(((-1.0)*x4953*x4957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4960=((1.0)*cj5);
CheckValue<IkReal> x4961 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4960)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4961.valid){
continue;
}
CheckValue<IkReal> x4962=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4960)))),-1);
if(!x4962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4961.value)+(((1.5707963267949)*(x4962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4963=IKcos(j4);
IkReal x4964=IKsin(j4);
IkReal x4965=(cj5*r00);
IkReal x4966=(cj5*r10);
IkReal x4967=(cj5*r20);
IkReal x4968=((1.0)*x4963);
IkReal x4969=((1.0)*x4964);
IkReal x4970=(sj5*x4963);
IkReal x4971=(sj5*x4964);
evalcond[0]=(((r22*x4964))+(((-1.0)*x4967*x4968))+((r21*x4970)));
evalcond[1]=((((-1.0)*r22*x4968))+(((-1.0)*x4967*x4969))+((r21*x4971)));
evalcond[2]=(cj0+((r02*x4964))+(((-1.0)*x4965*x4968))+((r01*x4970)));
evalcond[3]=(sj0+((r12*x4964))+((r11*x4970))+(((-1.0)*x4966*x4968)));
evalcond[4]=(cj0+((r11*x4971))+(((-1.0)*r12*x4968))+(((-1.0)*x4966*x4969)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4968))+(((-1.0)*x4965*x4969))+((r01*x4971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4972 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4972.valid){
continue;
}
CheckValue<IkReal> x4973=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4972.value)+(((1.5707963267949)*(x4973.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4974=IKcos(j4);
IkReal x4975=IKsin(j4);
IkReal x4976=(cj5*r00);
IkReal x4977=(cj5*r10);
IkReal x4978=(cj5*r20);
IkReal x4979=((1.0)*x4974);
IkReal x4980=((1.0)*x4975);
IkReal x4981=(sj5*x4974);
IkReal x4982=(sj5*x4975);
evalcond[0]=(((r22*x4975))+(((-1.0)*x4978*x4979))+((r21*x4981)));
evalcond[1]=(((r21*x4982))+(((-1.0)*r22*x4979))+(((-1.0)*x4978*x4980)));
evalcond[2]=(((r01*x4981))+cj0+(((-1.0)*x4976*x4979))+((r02*x4975)));
evalcond[3]=(sj0+((r11*x4981))+((r12*x4975))+(((-1.0)*x4977*x4979)));
evalcond[4]=((((-1.0)*x4977*x4980))+cj0+((r11*x4982))+(((-1.0)*r12*x4979)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4982))+(((-1.0)*r02*x4979))+(((-1.0)*x4976*x4980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4983=IKsin(j0);
IkReal x4984=IKcos(j0);
IkReal x4985=(cj5*r01);
IkReal x4986=((0.1157)*sj5);
IkReal x4987=(cj5*r11);
evalcond[0]=(x4985+((r00*sj5))+(((-1.0)*x4984)));
evalcond[1]=(x4987+((r10*sj5))+(((-1.0)*x4983)));
evalcond[2]=((((-1.0)*px))+(((-0.16394)*x4983))+(((-1.0)*r00*x4986))+(((-0.1157)*x4985)));
evalcond[3]=((((0.16394)*x4984))+(((-1.0)*py))+(((-1.0)*r10*x4986))+(((-0.1157)*x4987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4988=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4988;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x4988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4989=((1.0)*cj5);
IkReal x4990=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4989)));
j4eval[0]=x4990;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4989))))));
j4eval[2]=IKsign(x4990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4991=cj5*cj5;
IkReal x4992=(r01*r11);
IkReal x4993=((1.0)*r00);
IkReal x4994=(r01*sj5);
IkReal x4995=((((-1.0)*r02*r12))+(((-1.0)*r10*x4991*x4993))+((cj5*r10*x4994))+(((-1.0)*x4992))+((x4991*x4992))+((cj5*r00*r11*sj5)));
j4eval[0]=x4995;
j4eval[1]=IKsign(x4995);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x4993))+((cj0*x4994))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4996=cj5*cj5;
IkReal x4997=(r01*r11);
IkReal x4998=(cj5*r00);
IkReal x4999=(r01*sj5);
CheckValue<IkReal> x5000=IKPowWithIntegerCheck(IKsign((((r11*sj5*x4998))+(((-1.0)*r02*r12))+((x4996*x4997))+(((-1.0)*r00*r10*x4996))+((cj5*r10*x4999))+(((-1.0)*x4997)))),-1);
if(!x5000.valid){
continue;
}
CheckValue<IkReal> x5001 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x4998))+((cj0*x4999)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5000.value)))+(x5001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5002=IKcos(j4);
IkReal x5003=IKsin(j4);
IkReal x5004=(cj5*r00);
IkReal x5005=(r01*sj5);
IkReal x5006=(cj5*r10);
IkReal x5007=(cj5*r20);
IkReal x5008=((1.0)*x5002);
IkReal x5009=((1.0)*x5003);
IkReal x5010=(sj5*x5003);
IkReal x5011=(sj5*x5002);
evalcond[0]=(((x5002*x5005))+((r02*x5003))+(((-1.0)*x5004*x5008)));
evalcond[1]=(((r12*x5003))+(((-1.0)*x5006*x5008))+((r11*x5011)));
evalcond[2]=((((-1.0)*x5007*x5009))+((r21*x5010))+(((-1.0)*r22*x5008)));
evalcond[3]=((1.0)+(((-1.0)*x5007*x5008))+((r21*x5011))+((r22*x5003)));
evalcond[4]=(cj0+(((-1.0)*x5006*x5009))+(((-1.0)*r12*x5008))+((r11*x5010)));
evalcond[5]=((((-1.0)*sj0))+((x5003*x5005))+(((-1.0)*x5004*x5009))+(((-1.0)*r02*x5008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5012=((1.0)*cj5);
CheckValue<IkReal> x5013 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5012))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5013.valid){
continue;
}
CheckValue<IkReal> x5014=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5012)))),-1);
if(!x5014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5013.value)+(((1.5707963267949)*(x5014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5015=IKcos(j4);
IkReal x5016=IKsin(j4);
IkReal x5017=(cj5*r00);
IkReal x5018=(r01*sj5);
IkReal x5019=(cj5*r10);
IkReal x5020=(cj5*r20);
IkReal x5021=((1.0)*x5015);
IkReal x5022=((1.0)*x5016);
IkReal x5023=(sj5*x5016);
IkReal x5024=(sj5*x5015);
evalcond[0]=(((r02*x5016))+(((-1.0)*x5017*x5021))+((x5015*x5018)));
evalcond[1]=((((-1.0)*x5019*x5021))+((r11*x5024))+((r12*x5016)));
evalcond[2]=((((-1.0)*x5020*x5022))+(((-1.0)*r22*x5021))+((r21*x5023)));
evalcond[3]=((1.0)+(((-1.0)*x5020*x5021))+((r22*x5016))+((r21*x5024)));
evalcond[4]=((((-1.0)*x5019*x5022))+((r11*x5023))+cj0+(((-1.0)*r12*x5021)));
evalcond[5]=((((-1.0)*r02*x5021))+(((-1.0)*sj0))+((x5016*x5018))+(((-1.0)*x5017*x5022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5025 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5025.valid){
continue;
}
CheckValue<IkReal> x5026=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5025.value)+(((1.5707963267949)*(x5026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5027=IKcos(j4);
IkReal x5028=IKsin(j4);
IkReal x5029=(cj5*r00);
IkReal x5030=(r01*sj5);
IkReal x5031=(cj5*r10);
IkReal x5032=(cj5*r20);
IkReal x5033=((1.0)*x5027);
IkReal x5034=((1.0)*x5028);
IkReal x5035=(sj5*x5028);
IkReal x5036=(sj5*x5027);
evalcond[0]=(((r02*x5028))+(((-1.0)*x5029*x5033))+((x5027*x5030)));
evalcond[1]=(((r12*x5028))+((r11*x5036))+(((-1.0)*x5031*x5033)));
evalcond[2]=((((-1.0)*x5032*x5034))+((r21*x5035))+(((-1.0)*r22*x5033)));
evalcond[3]=((1.0)+(((-1.0)*x5032*x5033))+((r22*x5028))+((r21*x5036)));
evalcond[4]=(cj0+((r11*x5035))+(((-1.0)*x5031*x5034))+(((-1.0)*r12*x5033)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5029*x5034))+((x5028*x5030))+(((-1.0)*r02*x5033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482552106799)*py))+(((-0.462579933468263)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482552106799)*px))+(((0.462579933468263)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482552106799)*py))+(((-0.462579933468263)*px))))+IKsqr(((((-1.61482552106799)*px))+(((0.462579933468263)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482552106799)*py))+(((-0.462579933468263)*px))), ((((-1.61482552106799)*px))+(((0.462579933468263)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5037=IKcos(j0);
IkReal x5038=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.5723)*x5037))+(((-0.16394)*x5038)));
evalcond[1]=((((-1.0)*py))+(((-0.5723)*x5038))+(((0.16394)*x5037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5039=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5039;
j4eval[1]=IKsign(x5039);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5040=((1.0)*cj5);
IkReal x5041=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5040)));
j4eval[0]=x5041;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5040))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5042=cj5*cj5;
IkReal x5043=((1.0)*r20);
IkReal x5044=(r01*r21);
IkReal x5045=(r21*sj5);
IkReal x5046=(((cj5*r01*r20*sj5))+((cj5*r00*x5045))+(((-1.0)*r02*r22))+((x5042*x5044))+(((-1.0)*x5044))+(((-1.0)*r00*x5042*x5043)));
j4eval[0]=x5046;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x5045))+(((-1.0)*cj0*cj5*x5043))))));
j4eval[2]=IKsign(x5046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5047=cj5*cj5;
IkReal x5048=((1.0)*r20);
IkReal x5049=(r01*r21);
IkReal x5050=(r21*sj5);
CheckValue<IkReal> x5051 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5048))+((cj0*x5050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5051.valid){
continue;
}
CheckValue<IkReal> x5052=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x5047*x5048))+(((-1.0)*r02*r22))+(((-1.0)*x5049))+((x5047*x5049))+((cj5*r00*x5050)))),-1);
if(!x5052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5051.value)+(((1.5707963267949)*(x5052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5053=IKcos(j4);
IkReal x5054=IKsin(j4);
IkReal x5055=(cj5*r00);
IkReal x5056=(cj5*r10);
IkReal x5057=(cj5*r20);
IkReal x5058=((1.0)*x5053);
IkReal x5059=((1.0)*x5054);
IkReal x5060=(sj5*x5053);
IkReal x5061=(sj5*x5054);
evalcond[0]=(((r22*x5054))+((r21*x5060))+(((-1.0)*x5057*x5058)));
evalcond[1]=((((-1.0)*r22*x5058))+((r21*x5061))+(((-1.0)*x5057*x5059)));
evalcond[2]=(cj0+(((-1.0)*x5055*x5058))+((r01*x5060))+((r02*x5054)));
evalcond[3]=(sj0+((r12*x5054))+((r11*x5060))+(((-1.0)*x5056*x5058)));
evalcond[4]=(cj0+(((-1.0)*r12*x5058))+((r11*x5061))+(((-1.0)*x5056*x5059)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5055*x5059))+(((-1.0)*r02*x5058))+((r01*x5061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5062=((1.0)*cj5);
CheckValue<IkReal> x5063=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5062)))),-1);
if(!x5063.valid){
continue;
}
CheckValue<IkReal> x5064 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5062)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5063.value)))+(x5064.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5065=IKcos(j4);
IkReal x5066=IKsin(j4);
IkReal x5067=(cj5*r00);
IkReal x5068=(cj5*r10);
IkReal x5069=(cj5*r20);
IkReal x5070=((1.0)*x5065);
IkReal x5071=((1.0)*x5066);
IkReal x5072=(sj5*x5065);
IkReal x5073=(sj5*x5066);
evalcond[0]=((((-1.0)*x5069*x5070))+((r21*x5072))+((r22*x5066)));
evalcond[1]=((((-1.0)*x5069*x5071))+((r21*x5073))+(((-1.0)*r22*x5070)));
evalcond[2]=((((-1.0)*x5067*x5070))+cj0+((r02*x5066))+((r01*x5072)));
evalcond[3]=(sj0+(((-1.0)*x5068*x5070))+((r12*x5066))+((r11*x5072)));
evalcond[4]=(cj0+(((-1.0)*r12*x5070))+(((-1.0)*x5068*x5071))+((r11*x5073)));
evalcond[5]=((((-1.0)*x5067*x5071))+(((-1.0)*sj0))+(((-1.0)*r02*x5070))+((r01*x5073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5074 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5074.valid){
continue;
}
CheckValue<IkReal> x5075=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5074.value)+(((1.5707963267949)*(x5075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5076=IKcos(j4);
IkReal x5077=IKsin(j4);
IkReal x5078=(cj5*r00);
IkReal x5079=(cj5*r10);
IkReal x5080=(cj5*r20);
IkReal x5081=((1.0)*x5076);
IkReal x5082=((1.0)*x5077);
IkReal x5083=(sj5*x5076);
IkReal x5084=(sj5*x5077);
evalcond[0]=(((r21*x5083))+(((-1.0)*x5080*x5081))+((r22*x5077)));
evalcond[1]=(((r21*x5084))+(((-1.0)*x5080*x5082))+(((-1.0)*r22*x5081)));
evalcond[2]=(cj0+((r01*x5083))+((r02*x5077))+(((-1.0)*x5078*x5081)));
evalcond[3]=(sj0+((r11*x5083))+(((-1.0)*x5079*x5081))+((r12*x5077)));
evalcond[4]=((((-1.0)*r12*x5081))+cj0+((r11*x5084))+(((-1.0)*x5079*x5082)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5084))+(((-1.0)*x5078*x5082))+(((-1.0)*r02*x5081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5085=((1.0)*sj5);
IkReal x5086=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5086))+(((-1.0)*r10*x5085)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5086))+(((-1.0)*r00*x5085)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5086))+(((-1.0)*r10*x5085))))+IKsqr(((((-1.0)*r01*x5086))+(((-1.0)*r00*x5085))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5086))+(((-1.0)*r10*x5085))), ((((-1.0)*r01*x5086))+(((-1.0)*r00*x5085))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5087=IKsin(j0);
IkReal x5088=IKcos(j0);
IkReal x5089=(cj5*r01);
IkReal x5090=((0.1157)*sj5);
IkReal x5091=(cj5*r11);
evalcond[0]=(((r00*sj5))+x5089+x5088);
evalcond[1]=(((r10*sj5))+x5091+x5087);
evalcond[2]=((((-0.16394)*x5087))+(((-1.0)*r00*x5090))+(((-0.1157)*x5089))+(((-1.0)*px)));
evalcond[3]=((((0.16394)*x5088))+(((-1.0)*r10*x5090))+(((-0.1157)*x5091))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5092=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5092;
j4eval[1]=IKsign(x5092);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5093=((1.0)*cj5);
IkReal x5094=((((-1.0)*r11*x5093))+(((-1.0)*r10*sj5)));
j4eval[0]=x5094;
j4eval[1]=IKsign(x5094);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5093))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5095=cj5*cj5;
IkReal x5096=(r01*r11);
IkReal x5097=((1.0)*r00);
IkReal x5098=(r01*sj5);
IkReal x5099=((((-1.0)*x5096))+(((-1.0)*r02*r12))+((cj5*r10*x5098))+(((-1.0)*r10*x5095*x5097))+((x5095*x5096))+((cj5*r00*r11*sj5)));
j4eval[0]=x5099;
j4eval[1]=IKsign(x5099);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5098))+(((-1.0)*cj0*cj5*x5097))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5100=cj5*cj5;
IkReal x5101=(r01*r11);
IkReal x5102=(cj5*r00);
IkReal x5103=(r01*sj5);
CheckValue<IkReal> x5104 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5102))+((cj0*x5103)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5104.valid){
continue;
}
CheckValue<IkReal> x5105=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r10*x5100))+(((-1.0)*r02*r12))+(((-1.0)*x5101))+((r11*sj5*x5102))+((x5100*x5101))+((cj5*r10*x5103)))),-1);
if(!x5105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5104.value)+(((1.5707963267949)*(x5105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5106=IKcos(j4);
IkReal x5107=IKsin(j4);
IkReal x5108=(cj5*r00);
IkReal x5109=(r01*sj5);
IkReal x5110=(cj5*r10);
IkReal x5111=(cj5*r20);
IkReal x5112=((1.0)*x5106);
IkReal x5113=((1.0)*x5107);
IkReal x5114=(sj5*x5107);
IkReal x5115=(sj5*x5106);
evalcond[0]=(((x5106*x5109))+((r02*x5107))+(((-1.0)*x5108*x5112)));
evalcond[1]=(((r12*x5107))+(((-1.0)*x5110*x5112))+((r11*x5115)));
evalcond[2]=((((-1.0)*r22*x5112))+(((-1.0)*x5111*x5113))+((r21*x5114)));
evalcond[3]=((-1.0)+(((-1.0)*x5111*x5112))+((r22*x5107))+((r21*x5115)));
evalcond[4]=(cj0+(((-1.0)*x5110*x5113))+((r11*x5114))+(((-1.0)*r12*x5112)));
evalcond[5]=(((x5107*x5109))+(((-1.0)*sj0))+(((-1.0)*r02*x5112))+(((-1.0)*x5108*x5113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5116=((1.0)*cj5);
CheckValue<IkReal> x5117 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5116)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5117.valid){
continue;
}
CheckValue<IkReal> x5118=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5116)))),-1);
if(!x5118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5117.value)+(((1.5707963267949)*(x5118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5119=IKcos(j4);
IkReal x5120=IKsin(j4);
IkReal x5121=(cj5*r00);
IkReal x5122=(r01*sj5);
IkReal x5123=(cj5*r10);
IkReal x5124=(cj5*r20);
IkReal x5125=((1.0)*x5119);
IkReal x5126=((1.0)*x5120);
IkReal x5127=(sj5*x5120);
IkReal x5128=(sj5*x5119);
evalcond[0]=(((x5119*x5122))+(((-1.0)*x5121*x5125))+((r02*x5120)));
evalcond[1]=(((r12*x5120))+((r11*x5128))+(((-1.0)*x5123*x5125)));
evalcond[2]=((((-1.0)*x5124*x5126))+((r21*x5127))+(((-1.0)*r22*x5125)));
evalcond[3]=((-1.0)+((r22*x5120))+(((-1.0)*x5124*x5125))+((r21*x5128)));
evalcond[4]=(cj0+((r11*x5127))+(((-1.0)*x5123*x5126))+(((-1.0)*r12*x5125)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5121*x5126))+(((-1.0)*r02*x5125))+((x5120*x5122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5129=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5129.valid){
continue;
}
CheckValue<IkReal> x5130 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5129.value)))+(x5130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5131=IKcos(j4);
IkReal x5132=IKsin(j4);
IkReal x5133=(cj5*r00);
IkReal x5134=(r01*sj5);
IkReal x5135=(cj5*r10);
IkReal x5136=(cj5*r20);
IkReal x5137=((1.0)*x5131);
IkReal x5138=((1.0)*x5132);
IkReal x5139=(sj5*x5132);
IkReal x5140=(sj5*x5131);
evalcond[0]=(((x5131*x5134))+((r02*x5132))+(((-1.0)*x5133*x5137)));
evalcond[1]=(((r12*x5132))+(((-1.0)*x5135*x5137))+((r11*x5140)));
evalcond[2]=((((-1.0)*x5136*x5138))+((r21*x5139))+(((-1.0)*r22*x5137)));
evalcond[3]=((-1.0)+((r21*x5140))+((r22*x5132))+(((-1.0)*x5136*x5137)));
evalcond[4]=(cj0+(((-1.0)*x5135*x5138))+((r11*x5139))+(((-1.0)*r12*x5137)));
evalcond[5]=(((x5132*x5134))+(((-1.0)*sj0))+(((-1.0)*r02*x5137))+(((-1.0)*x5133*x5138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482552106799)*py))+(((-0.462579933468263)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482552106799)*px))+(((0.462579933468263)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482552106799)*py))+(((-0.462579933468263)*px))))+IKsqr(((((1.61482552106799)*px))+(((0.462579933468263)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482552106799)*py))+(((-0.462579933468263)*px))), ((((1.61482552106799)*px))+(((0.462579933468263)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5141=IKsin(j0);
IkReal x5142=IKcos(j0);
evalcond[0]=((((0.5723)*x5142))+(((-1.0)*px))+(((-0.16394)*x5141)));
evalcond[1]=((((0.5723)*x5141))+(((-1.0)*py))+(((0.16394)*x5142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5143=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5143;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5143);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5144=((1.0)*cj5);
IkReal x5145=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5144)));
j4eval[0]=x5145;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5144)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5145);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5146=((1.0)*cj5);
IkReal x5147=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5146)));
j4eval[0]=x5147;
j4eval[1]=IKsign(x5147);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5146))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5148=((1.0)*cj5);
CheckValue<IkReal> x5149 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5148))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5149.valid){
continue;
}
CheckValue<IkReal> x5150=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5148)))),-1);
if(!x5150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5149.value)+(((1.5707963267949)*(x5150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5151=IKcos(j4);
IkReal x5152=IKsin(j4);
IkReal x5153=((1.0)*sj0);
IkReal x5154=(cj5*r00);
IkReal x5155=(cj5*r10);
IkReal x5156=(cj5*r20);
IkReal x5157=((1.0)*x5151);
IkReal x5158=((1.0)*x5152);
IkReal x5159=(sj5*x5151);
IkReal x5160=(sj5*x5152);
evalcond[0]=(((r21*x5159))+((r22*x5152))+(((-1.0)*x5156*x5157)));
evalcond[1]=(((r21*x5160))+(((-1.0)*r22*x5157))+(((-1.0)*x5156*x5158)));
evalcond[2]=(cj0+(((-1.0)*r12*x5157))+((r11*x5160))+(((-1.0)*x5155*x5158)));
evalcond[3]=((((-1.0)*x5154*x5157))+((r01*x5159))+((r02*x5152))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5159))+((r12*x5152))+(((-1.0)*x5153))+(((-1.0)*x5155*x5157)));
evalcond[5]=((((-1.0)*x5154*x5158))+((r01*x5160))+(((-1.0)*x5153))+(((-1.0)*r02*x5157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5161=((1.0)*cj5);
CheckValue<IkReal> x5162=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5161)))),-1);
if(!x5162.valid){
continue;
}
CheckValue<IkReal> x5163 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5162.value)))+(x5163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5164=IKcos(j4);
IkReal x5165=IKsin(j4);
IkReal x5166=((1.0)*sj0);
IkReal x5167=(cj5*r00);
IkReal x5168=(cj5*r10);
IkReal x5169=(cj5*r20);
IkReal x5170=((1.0)*x5164);
IkReal x5171=((1.0)*x5165);
IkReal x5172=(sj5*x5164);
IkReal x5173=(sj5*x5165);
evalcond[0]=((((-1.0)*x5169*x5170))+((r22*x5165))+((r21*x5172)));
evalcond[1]=((((-1.0)*x5169*x5171))+(((-1.0)*r22*x5170))+((r21*x5173)));
evalcond[2]=(cj0+(((-1.0)*r12*x5170))+(((-1.0)*x5168*x5171))+((r11*x5173)));
evalcond[3]=(((r01*x5172))+((r02*x5165))+(((-1.0)*x5167*x5170))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5168*x5170))+(((-1.0)*x5166))+((r12*x5165))+((r11*x5172)));
evalcond[5]=(((r01*x5173))+(((-1.0)*r02*x5170))+(((-1.0)*x5166))+(((-1.0)*x5167*x5171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5174 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5174.valid){
continue;
}
CheckValue<IkReal> x5175=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5174.value)+(((1.5707963267949)*(x5175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5176=IKcos(j4);
IkReal x5177=IKsin(j4);
IkReal x5178=((1.0)*sj0);
IkReal x5179=(cj5*r00);
IkReal x5180=(cj5*r10);
IkReal x5181=(cj5*r20);
IkReal x5182=((1.0)*x5176);
IkReal x5183=((1.0)*x5177);
IkReal x5184=(sj5*x5176);
IkReal x5185=(sj5*x5177);
evalcond[0]=(((r21*x5184))+((r22*x5177))+(((-1.0)*x5181*x5182)));
evalcond[1]=((((-1.0)*r22*x5182))+((r21*x5185))+(((-1.0)*x5181*x5183)));
evalcond[2]=(cj0+(((-1.0)*r12*x5182))+((r11*x5185))+(((-1.0)*x5180*x5183)));
evalcond[3]=(((r01*x5184))+((r02*x5177))+(((-1.0)*x5179*x5182))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5178))+((r12*x5177))+((r11*x5184))+(((-1.0)*x5180*x5182)));
evalcond[5]=((((-1.0)*r02*x5182))+((r01*x5185))+(((-1.0)*x5178))+(((-1.0)*x5179*x5183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.11468804378898)*px))+(((-0.828504637423993)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.828504637423993)*px))+(((0.11468804378898)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.11468804378898)*px))+(((-0.828504637423993)*py))))+IKsqr(((((-0.828504637423993)*px))+(((0.11468804378898)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.11468804378898)*px))+(((-0.828504637423993)*py))), ((((-0.828504637423993)*px))+(((0.11468804378898)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5186=IKcos(j0);
IkReal x5187=IKsin(j0);
evalcond[0]=((((-1.1843)*x5186))+(((-1.0)*px))+(((-0.16394)*x5187)));
evalcond[1]=((((-1.1843)*x5187))+(((-1.0)*py))+(((0.16394)*x5186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5188=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5188;
j4eval[1]=IKsign(x5188);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5189=((1.0)*cj5);
IkReal x5190=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5189)));
j4eval[0]=x5190;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5189))))));
j4eval[2]=IKsign(x5190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5191=cj5*cj5;
IkReal x5192=((1.0)*r20);
IkReal x5193=(r01*r21);
IkReal x5194=(r21*sj5);
IkReal x5195=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5193))+((x5191*x5193))+((cj5*r00*x5194))+(((-1.0)*r00*x5191*x5192)));
j4eval[0]=x5195;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5192))+((cj0*x5194)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5195);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5196=cj5*cj5;
IkReal x5197=((1.0)*r20);
IkReal x5198=(r01*r21);
IkReal x5199=(r21*sj5);
CheckValue<IkReal> x5200 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5197))+((cj0*x5199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5200.valid){
continue;
}
CheckValue<IkReal> x5201=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5198))+(((-1.0)*r00*x5196*x5197))+((x5196*x5198))+((cj5*r00*x5199)))),-1);
if(!x5201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5200.value)+(((1.5707963267949)*(x5201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5202=IKcos(j4);
IkReal x5203=IKsin(j4);
IkReal x5204=(cj5*r00);
IkReal x5205=(cj5*r10);
IkReal x5206=(cj5*r20);
IkReal x5207=((1.0)*x5202);
IkReal x5208=((1.0)*x5203);
IkReal x5209=(sj5*x5202);
IkReal x5210=(sj5*x5203);
evalcond[0]=((((-1.0)*x5206*x5207))+((r22*x5203))+((r21*x5209)));
evalcond[1]=((((-1.0)*x5206*x5208))+(((-1.0)*r22*x5207))+((r21*x5210)));
evalcond[2]=(cj0+((r01*x5209))+((r02*x5203))+(((-1.0)*x5204*x5207)));
evalcond[3]=(sj0+((r11*x5209))+(((-1.0)*x5205*x5207))+((r12*x5203)));
evalcond[4]=(cj0+((r11*x5210))+(((-1.0)*x5205*x5208))+(((-1.0)*r12*x5207)));
evalcond[5]=(((r01*x5210))+(((-1.0)*r02*x5207))+(((-1.0)*sj0))+(((-1.0)*x5204*x5208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5211=((1.0)*cj5);
CheckValue<IkReal> x5212 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5211)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5212.valid){
continue;
}
CheckValue<IkReal> x5213=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5211))+(((-1.0)*r10*sj5)))),-1);
if(!x5213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5212.value)+(((1.5707963267949)*(x5213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5214=IKcos(j4);
IkReal x5215=IKsin(j4);
IkReal x5216=(cj5*r00);
IkReal x5217=(cj5*r10);
IkReal x5218=(cj5*r20);
IkReal x5219=((1.0)*x5214);
IkReal x5220=((1.0)*x5215);
IkReal x5221=(sj5*x5214);
IkReal x5222=(sj5*x5215);
evalcond[0]=(((r21*x5221))+(((-1.0)*x5218*x5219))+((r22*x5215)));
evalcond[1]=(((r21*x5222))+(((-1.0)*x5218*x5220))+(((-1.0)*r22*x5219)));
evalcond[2]=(cj0+((r02*x5215))+((r01*x5221))+(((-1.0)*x5216*x5219)));
evalcond[3]=((((-1.0)*x5217*x5219))+sj0+((r12*x5215))+((r11*x5221)));
evalcond[4]=(cj0+(((-1.0)*x5217*x5220))+((r11*x5222))+(((-1.0)*r12*x5219)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5216*x5220))+((r01*x5222))+(((-1.0)*r02*x5219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5223 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5223.valid){
continue;
}
CheckValue<IkReal> x5224=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5223.value)+(((1.5707963267949)*(x5224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5225=IKcos(j4);
IkReal x5226=IKsin(j4);
IkReal x5227=(cj5*r00);
IkReal x5228=(cj5*r10);
IkReal x5229=(cj5*r20);
IkReal x5230=((1.0)*x5225);
IkReal x5231=((1.0)*x5226);
IkReal x5232=(sj5*x5225);
IkReal x5233=(sj5*x5226);
evalcond[0]=(((r22*x5226))+(((-1.0)*x5229*x5230))+((r21*x5232)));
evalcond[1]=((((-1.0)*r22*x5230))+(((-1.0)*x5229*x5231))+((r21*x5233)));
evalcond[2]=(cj0+((r02*x5226))+((r01*x5232))+(((-1.0)*x5227*x5230)));
evalcond[3]=(sj0+((r11*x5232))+(((-1.0)*x5228*x5230))+((r12*x5226)));
evalcond[4]=(cj0+((r11*x5233))+(((-1.0)*r12*x5230))+(((-1.0)*x5228*x5231)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5230))+((r01*x5233))+(((-1.0)*x5227*x5231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.3953122064836)*py))+(((-5.76190133831036)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.3953122064836)*px))+(((5.76190133831036)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.3953122064836)*py))+(((-5.76190133831036)*px))))+IKsqr(((((-1.3953122064836)*px))+(((5.76190133831036)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.3953122064836)*py))+(((-5.76190133831036)*px))), ((((-1.3953122064836)*px))+(((5.76190133831036)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5234=IKcos(j0);
IkReal x5235=IKsin(j0);
evalcond[0]=((((-0.16394)*x5235))+(((-1.0)*px))+(((-0.0397)*x5234)));
evalcond[1]=((((-1.0)*py))+(((-0.0397)*x5235))+(((0.16394)*x5234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5236=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5236;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5236);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5237=((1.0)*cj5);
IkReal x5238=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5237)));
j4eval[0]=x5238;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5237))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5238);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5239=((1.0)*cj5);
IkReal x5240=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5239)));
j4eval[0]=x5240;
j4eval[1]=IKsign(x5240);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x5239))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5241=((1.0)*cj5);
CheckValue<IkReal> x5242 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5241))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5242.valid){
continue;
}
CheckValue<IkReal> x5243=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5241)))),-1);
if(!x5243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5242.value)+(((1.5707963267949)*(x5243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5244=IKcos(j4);
IkReal x5245=IKsin(j4);
IkReal x5246=((1.0)*sj0);
IkReal x5247=(cj5*r00);
IkReal x5248=(cj5*r10);
IkReal x5249=(cj5*r20);
IkReal x5250=((1.0)*x5244);
IkReal x5251=((1.0)*x5245);
IkReal x5252=(sj5*x5244);
IkReal x5253=(sj5*x5245);
evalcond[0]=((((-1.0)*x5249*x5250))+((r21*x5252))+((r22*x5245)));
evalcond[1]=((((-1.0)*x5249*x5251))+((r21*x5253))+(((-1.0)*r22*x5250)));
evalcond[2]=((((-1.0)*x5248*x5251))+cj0+(((-1.0)*r12*x5250))+((r11*x5253)));
evalcond[3]=(((r01*x5252))+(((-1.0)*x5247*x5250))+((r02*x5245))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5248*x5250))+(((-1.0)*x5246))+((r12*x5245))+((r11*x5252)));
evalcond[5]=((((-1.0)*r02*x5250))+((r01*x5253))+(((-1.0)*x5246))+(((-1.0)*x5247*x5251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5254=((1.0)*cj5);
CheckValue<IkReal> x5255=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5254))+(((-1.0)*r00*sj5)))),-1);
if(!x5255.valid){
continue;
}
CheckValue<IkReal> x5256 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5255.value)))+(x5256.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5257=IKcos(j4);
IkReal x5258=IKsin(j4);
IkReal x5259=((1.0)*sj0);
IkReal x5260=(cj5*r00);
IkReal x5261=(cj5*r10);
IkReal x5262=(cj5*r20);
IkReal x5263=((1.0)*x5257);
IkReal x5264=((1.0)*x5258);
IkReal x5265=(sj5*x5257);
IkReal x5266=(sj5*x5258);
evalcond[0]=(((r22*x5258))+((r21*x5265))+(((-1.0)*x5262*x5263)));
evalcond[1]=(((r21*x5266))+(((-1.0)*r22*x5263))+(((-1.0)*x5262*x5264)));
evalcond[2]=(cj0+(((-1.0)*r12*x5263))+((r11*x5266))+(((-1.0)*x5261*x5264)));
evalcond[3]=(((r01*x5265))+(((-1.0)*x5260*x5263))+(((-1.0)*cj0))+((r02*x5258)));
evalcond[4]=(((r12*x5258))+(((-1.0)*x5259))+((r11*x5265))+(((-1.0)*x5261*x5263)));
evalcond[5]=(((r01*x5266))+(((-1.0)*r02*x5263))+(((-1.0)*x5259))+(((-1.0)*x5260*x5264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5267 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5267.valid){
continue;
}
CheckValue<IkReal> x5268=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5267.value)+(((1.5707963267949)*(x5268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5269=IKcos(j4);
IkReal x5270=IKsin(j4);
IkReal x5271=((1.0)*sj0);
IkReal x5272=(cj5*r00);
IkReal x5273=(cj5*r10);
IkReal x5274=(cj5*r20);
IkReal x5275=((1.0)*x5269);
IkReal x5276=((1.0)*x5270);
IkReal x5277=(sj5*x5269);
IkReal x5278=(sj5*x5270);
evalcond[0]=(((r22*x5270))+(((-1.0)*x5274*x5275))+((r21*x5277)));
evalcond[1]=((((-1.0)*x5274*x5276))+((r21*x5278))+(((-1.0)*r22*x5275)));
evalcond[2]=(cj0+(((-1.0)*r12*x5275))+((r11*x5278))+(((-1.0)*x5273*x5276)));
evalcond[3]=((((-1.0)*x5272*x5275))+((r02*x5270))+((r01*x5277))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5271))+((r11*x5277))+(((-1.0)*x5273*x5275))+((r12*x5270)));
evalcond[5]=((((-1.0)*x5272*x5276))+(((-1.0)*x5271))+((r01*x5278))+(((-1.0)*r02*x5275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5279=((1.0)*sj5);
IkReal x5280=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5280))+(((-1.0)*r10*x5279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5280))+(((-1.0)*r00*x5279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5280))+(((-1.0)*r10*x5279))))+IKsqr(((((-1.0)*r01*x5280))+(((-1.0)*r00*x5279))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5280))+(((-1.0)*r10*x5279))), ((((-1.0)*r01*x5280))+(((-1.0)*r00*x5279))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5281=IKsin(j0);
IkReal x5282=IKcos(j0);
IkReal x5283=(cj5*r01);
IkReal x5284=((0.1157)*sj5);
IkReal x5285=(cj5*r11);
evalcond[0]=(((r00*sj5))+x5283+x5282);
evalcond[1]=(((r10*sj5))+x5281+x5285);
evalcond[2]=((((-1.0)*r00*x5284))+(((-0.1157)*x5283))+(((-1.0)*px))+(((-0.16394)*x5281)));
evalcond[3]=((((-0.1157)*x5285))+(((-1.0)*py))+(((0.16394)*x5282))+(((-1.0)*r10*x5284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5286=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5286;
j4eval[1]=IKsign(x5286);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5287=((1.0)*cj5);
IkReal x5288=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5287)));
j4eval[0]=x5288;
j4eval[1]=IKsign(x5288);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5287))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5289=cj5*cj5;
IkReal x5290=(r01*r11);
IkReal x5291=((1.0)*r00);
IkReal x5292=(r01*sj5);
IkReal x5293=((((-1.0)*r02*r12))+((x5289*x5290))+((cj5*r10*x5292))+(((-1.0)*x5290))+(((-1.0)*r10*x5289*x5291))+((cj5*r00*r11*sj5)));
j4eval[0]=x5293;
j4eval[1]=IKsign(x5293);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5292))+(((-1.0)*cj0*cj5*x5291))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5294=cj5*cj5;
IkReal x5295=(r01*r11);
IkReal x5296=(cj5*r00);
IkReal x5297=(r01*sj5);
CheckValue<IkReal> x5298 = IKatan2WithCheck(IkReal((((cj0*x5297))+(((-1.0)*cj0*x5296)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5298.valid){
continue;
}
CheckValue<IkReal> x5299=IKPowWithIntegerCheck(IKsign((((x5294*x5295))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x5294))+((cj5*r10*x5297))+(((-1.0)*x5295))+((r11*sj5*x5296)))),-1);
if(!x5299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5298.value)+(((1.5707963267949)*(x5299.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5300=IKcos(j4);
IkReal x5301=IKsin(j4);
IkReal x5302=(cj5*r00);
IkReal x5303=(r01*sj5);
IkReal x5304=(cj5*r10);
IkReal x5305=(cj5*r20);
IkReal x5306=((1.0)*x5300);
IkReal x5307=((1.0)*x5301);
IkReal x5308=(sj5*x5301);
IkReal x5309=(sj5*x5300);
evalcond[0]=(((x5300*x5303))+(((-1.0)*x5302*x5306))+((r02*x5301)));
evalcond[1]=(((r12*x5301))+((r11*x5309))+(((-1.0)*x5304*x5306)));
evalcond[2]=((((-1.0)*r22*x5306))+((r21*x5308))+(((-1.0)*x5305*x5307)));
evalcond[3]=((-1.0)+((r21*x5309))+(((-1.0)*x5305*x5306))+((r22*x5301)));
evalcond[4]=(cj0+(((-1.0)*r12*x5306))+((r11*x5308))+(((-1.0)*x5304*x5307)));
evalcond[5]=(((x5301*x5303))+(((-1.0)*sj0))+(((-1.0)*x5302*x5307))+(((-1.0)*r02*x5306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5310=((1.0)*cj5);
CheckValue<IkReal> x5311=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5310))+(((-1.0)*r10*sj5)))),-1);
if(!x5311.valid){
continue;
}
CheckValue<IkReal> x5312 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5310)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5311.value)))+(x5312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5313=IKcos(j4);
IkReal x5314=IKsin(j4);
IkReal x5315=(cj5*r00);
IkReal x5316=(r01*sj5);
IkReal x5317=(cj5*r10);
IkReal x5318=(cj5*r20);
IkReal x5319=((1.0)*x5313);
IkReal x5320=((1.0)*x5314);
IkReal x5321=(sj5*x5314);
IkReal x5322=(sj5*x5313);
evalcond[0]=(((x5313*x5316))+((r02*x5314))+(((-1.0)*x5315*x5319)));
evalcond[1]=(((r11*x5322))+((r12*x5314))+(((-1.0)*x5317*x5319)));
evalcond[2]=((((-1.0)*x5318*x5320))+((r21*x5321))+(((-1.0)*r22*x5319)));
evalcond[3]=((-1.0)+((r22*x5314))+(((-1.0)*x5318*x5319))+((r21*x5322)));
evalcond[4]=((((-1.0)*r12*x5319))+((r11*x5321))+cj0+(((-1.0)*x5317*x5320)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5315*x5320))+((x5314*x5316))+(((-1.0)*r02*x5319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5323=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5323.valid){
continue;
}
CheckValue<IkReal> x5324 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5323.value)))+(x5324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5325=IKcos(j4);
IkReal x5326=IKsin(j4);
IkReal x5327=(cj5*r00);
IkReal x5328=(r01*sj5);
IkReal x5329=(cj5*r10);
IkReal x5330=(cj5*r20);
IkReal x5331=((1.0)*x5325);
IkReal x5332=((1.0)*x5326);
IkReal x5333=(sj5*x5326);
IkReal x5334=(sj5*x5325);
evalcond[0]=(((x5325*x5328))+((r02*x5326))+(((-1.0)*x5327*x5331)));
evalcond[1]=(((r11*x5334))+((r12*x5326))+(((-1.0)*x5329*x5331)));
evalcond[2]=((((-1.0)*x5330*x5332))+(((-1.0)*r22*x5331))+((r21*x5333)));
evalcond[3]=((-1.0)+(((-1.0)*x5330*x5331))+((r22*x5326))+((r21*x5334)));
evalcond[4]=(cj0+((r11*x5333))+(((-1.0)*x5329*x5332))+(((-1.0)*r12*x5331)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5331))+((x5326*x5328))+(((-1.0)*x5327*x5332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482552106799)*py))+(((-0.462579933468263)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482552106799)*px))+(((0.462579933468263)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482552106799)*py))+(((-0.462579933468263)*px))))+IKsqr(((((1.61482552106799)*px))+(((0.462579933468263)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482552106799)*py))+(((-0.462579933468263)*px))), ((((1.61482552106799)*px))+(((0.462579933468263)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5335=IKsin(j0);
IkReal x5336=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.16394)*x5335))+(((0.5723)*x5336)));
evalcond[1]=((((-1.0)*py))+(((0.5723)*x5335))+(((0.16394)*x5336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5337=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5337;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5337);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5338=((1.0)*cj5);
IkReal x5339=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5338)));
j4eval[0]=x5339;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5338)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5339);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5340=((1.0)*cj5);
IkReal x5341=((((-1.0)*r01*x5340))+(((-1.0)*r00*sj5)));
j4eval[0]=x5341;
j4eval[1]=IKsign(x5341);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5340))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5342=((1.0)*cj5);
CheckValue<IkReal> x5343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5342))+(((-1.0)*r00*sj5)))),-1);
if(!x5343.valid){
continue;
}
CheckValue<IkReal> x5344 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5342)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5343.value)))+(x5344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5345=IKcos(j4);
IkReal x5346=IKsin(j4);
IkReal x5347=((1.0)*sj0);
IkReal x5348=(cj5*r00);
IkReal x5349=(cj5*r10);
IkReal x5350=(cj5*r20);
IkReal x5351=((1.0)*x5345);
IkReal x5352=((1.0)*x5346);
IkReal x5353=(sj5*x5345);
IkReal x5354=(sj5*x5346);
evalcond[0]=((((-1.0)*x5350*x5351))+((r22*x5346))+((r21*x5353)));
evalcond[1]=((((-1.0)*x5350*x5352))+(((-1.0)*r22*x5351))+((r21*x5354)));
evalcond[2]=(cj0+((r11*x5354))+(((-1.0)*r12*x5351))+(((-1.0)*x5349*x5352)));
evalcond[3]=(((r01*x5353))+((r02*x5346))+(((-1.0)*x5348*x5351))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5346))+((r11*x5353))+(((-1.0)*x5347))+(((-1.0)*x5349*x5351)));
evalcond[5]=((((-1.0)*r02*x5351))+((r01*x5354))+(((-1.0)*x5347))+(((-1.0)*x5348*x5352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5355=((1.0)*cj5);
CheckValue<IkReal> x5356=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5355))+(((-1.0)*r00*sj5)))),-1);
if(!x5356.valid){
continue;
}
CheckValue<IkReal> x5357 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5356.value)))+(x5357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5358=IKcos(j4);
IkReal x5359=IKsin(j4);
IkReal x5360=((1.0)*sj0);
IkReal x5361=(cj5*r00);
IkReal x5362=(cj5*r10);
IkReal x5363=(cj5*r20);
IkReal x5364=((1.0)*x5358);
IkReal x5365=((1.0)*x5359);
IkReal x5366=(sj5*x5358);
IkReal x5367=(sj5*x5359);
evalcond[0]=(((r22*x5359))+((r21*x5366))+(((-1.0)*x5363*x5364)));
evalcond[1]=((((-1.0)*r22*x5364))+((r21*x5367))+(((-1.0)*x5363*x5365)));
evalcond[2]=(cj0+(((-1.0)*x5362*x5365))+(((-1.0)*r12*x5364))+((r11*x5367)));
evalcond[3]=(((r02*x5359))+(((-1.0)*x5361*x5364))+((r01*x5366))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5359))+(((-1.0)*x5362*x5364))+(((-1.0)*x5360))+((r11*x5366)));
evalcond[5]=((((-1.0)*r02*x5364))+(((-1.0)*x5361*x5365))+(((-1.0)*x5360))+((r01*x5367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5368 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5368.valid){
continue;
}
CheckValue<IkReal> x5369=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5368.value)+(((1.5707963267949)*(x5369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5370=IKcos(j4);
IkReal x5371=IKsin(j4);
IkReal x5372=((1.0)*sj0);
IkReal x5373=(cj5*r00);
IkReal x5374=(cj5*r10);
IkReal x5375=(cj5*r20);
IkReal x5376=((1.0)*x5370);
IkReal x5377=((1.0)*x5371);
IkReal x5378=(sj5*x5370);
IkReal x5379=(sj5*x5371);
evalcond[0]=(((r21*x5378))+((r22*x5371))+(((-1.0)*x5375*x5376)));
evalcond[1]=((((-1.0)*r22*x5376))+((r21*x5379))+(((-1.0)*x5375*x5377)));
evalcond[2]=(cj0+(((-1.0)*r12*x5376))+((r11*x5379))+(((-1.0)*x5374*x5377)));
evalcond[3]=((((-1.0)*x5373*x5376))+((r02*x5371))+((r01*x5378))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5372))+((r12*x5371))+((r11*x5378))+(((-1.0)*x5374*x5376)));
evalcond[5]=((((-1.0)*x5372))+(((-1.0)*x5373*x5377))+(((-1.0)*r02*x5376))+((r01*x5379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5380=IKsin(j0);
IkReal x5381=IKcos(j0);
IkReal x5382=(cj5*r01);
IkReal x5383=((0.1157)*sj5);
IkReal x5384=(cj5*r11);
evalcond[0]=(((r00*sj5))+x5382+(((-1.0)*x5381)));
evalcond[1]=(((r10*sj5))+x5384+(((-1.0)*x5380)));
evalcond[2]=((((-0.1157)*x5382))+(((-0.16394)*x5380))+(((-1.0)*px))+(((-1.0)*r00*x5383)));
evalcond[3]=((((-0.1157)*x5384))+(((0.16394)*x5381))+(((-1.0)*py))+(((-1.0)*r10*x5383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5385=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5385;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5385);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5386=((1.0)*cj5);
IkReal x5387=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5386)));
j4eval[0]=x5387;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5386))))));
j4eval[2]=IKsign(x5387);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5388=cj5*cj5;
IkReal x5389=(r01*r11);
IkReal x5390=((1.0)*r00);
IkReal x5391=(r01*sj5);
IkReal x5392=(((x5388*x5389))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5388*x5390))+((cj5*r10*x5391))+(((-1.0)*x5389))+((cj5*r00*r11*sj5)));
j4eval[0]=x5392;
j4eval[1]=IKsign(x5392);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5391))+(((-1.0)*cj0*cj5*x5390))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5393=cj5*cj5;
IkReal x5394=(r01*r11);
IkReal x5395=(cj5*r00);
IkReal x5396=(r01*sj5);
CheckValue<IkReal> x5397=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5395))+(((-1.0)*r00*r10*x5393))+(((-1.0)*r02*r12))+((x5393*x5394))+((cj5*r10*x5396))+(((-1.0)*x5394)))),-1);
if(!x5397.valid){
continue;
}
CheckValue<IkReal> x5398 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5395))+((cj0*x5396)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5397.value)))+(x5398.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5399=IKcos(j4);
IkReal x5400=IKsin(j4);
IkReal x5401=(cj5*r00);
IkReal x5402=(r01*sj5);
IkReal x5403=(cj5*r10);
IkReal x5404=(cj5*r20);
IkReal x5405=((1.0)*x5399);
IkReal x5406=((1.0)*x5400);
IkReal x5407=(sj5*x5400);
IkReal x5408=(sj5*x5399);
evalcond[0]=(((r02*x5400))+((x5399*x5402))+(((-1.0)*x5401*x5405)));
evalcond[1]=(((r12*x5400))+(((-1.0)*x5403*x5405))+((r11*x5408)));
evalcond[2]=(((r21*x5407))+(((-1.0)*x5404*x5406))+(((-1.0)*r22*x5405)));
evalcond[3]=((1.0)+((r21*x5408))+((r22*x5400))+(((-1.0)*x5404*x5405)));
evalcond[4]=((((-1.0)*x5403*x5406))+cj0+(((-1.0)*r12*x5405))+((r11*x5407)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5405))+((x5400*x5402))+(((-1.0)*x5401*x5406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5409=((1.0)*cj5);
CheckValue<IkReal> x5410=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5409))+(((-1.0)*r00*sj5)))),-1);
if(!x5410.valid){
continue;
}
CheckValue<IkReal> x5411 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5409)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5410.value)))+(x5411.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5412=IKcos(j4);
IkReal x5413=IKsin(j4);
IkReal x5414=(cj5*r00);
IkReal x5415=(r01*sj5);
IkReal x5416=(cj5*r10);
IkReal x5417=(cj5*r20);
IkReal x5418=((1.0)*x5412);
IkReal x5419=((1.0)*x5413);
IkReal x5420=(sj5*x5413);
IkReal x5421=(sj5*x5412);
evalcond[0]=((((-1.0)*x5414*x5418))+((r02*x5413))+((x5412*x5415)));
evalcond[1]=((((-1.0)*x5416*x5418))+((r12*x5413))+((r11*x5421)));
evalcond[2]=(((r21*x5420))+(((-1.0)*x5417*x5419))+(((-1.0)*r22*x5418)));
evalcond[3]=((1.0)+((r22*x5413))+((r21*x5421))+(((-1.0)*x5417*x5418)));
evalcond[4]=((((-1.0)*x5416*x5419))+cj0+(((-1.0)*r12*x5418))+((r11*x5420)));
evalcond[5]=((((-1.0)*r02*x5418))+(((-1.0)*sj0))+(((-1.0)*x5414*x5419))+((x5413*x5415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5422 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5422.valid){
continue;
}
CheckValue<IkReal> x5423=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5422.value)+(((1.5707963267949)*(x5423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5424=IKcos(j4);
IkReal x5425=IKsin(j4);
IkReal x5426=(cj5*r00);
IkReal x5427=(r01*sj5);
IkReal x5428=(cj5*r10);
IkReal x5429=(cj5*r20);
IkReal x5430=((1.0)*x5424);
IkReal x5431=((1.0)*x5425);
IkReal x5432=(sj5*x5425);
IkReal x5433=(sj5*x5424);
evalcond[0]=((((-1.0)*x5426*x5430))+((r02*x5425))+((x5424*x5427)));
evalcond[1]=((((-1.0)*x5428*x5430))+((r12*x5425))+((r11*x5433)));
evalcond[2]=((((-1.0)*x5429*x5431))+(((-1.0)*r22*x5430))+((r21*x5432)));
evalcond[3]=((1.0)+((r22*x5425))+(((-1.0)*x5429*x5430))+((r21*x5433)));
evalcond[4]=((((-1.0)*x5428*x5431))+cj0+(((-1.0)*r12*x5430))+((r11*x5432)));
evalcond[5]=((((-1.0)*x5426*x5431))+(((-1.0)*sj0))+(((-1.0)*r02*x5430))+((x5425*x5427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482552106799)*py))+(((-0.462579933468263)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482552106799)*px))+(((0.462579933468263)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482552106799)*py))+(((-0.462579933468263)*px))))+IKsqr(((((-1.61482552106799)*px))+(((0.462579933468263)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482552106799)*py))+(((-0.462579933468263)*px))), ((((-1.61482552106799)*px))+(((0.462579933468263)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5434=IKcos(j0);
IkReal x5435=IKsin(j0);
evalcond[0]=((((-0.5723)*x5434))+(((-0.16394)*x5435))+(((-1.0)*px)));
evalcond[1]=((((0.16394)*x5434))+(((-0.5723)*x5435))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5436=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5436;
j4eval[1]=IKsign(x5436);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5437=((1.0)*cj5);
IkReal x5438=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5437)));
j4eval[0]=x5438;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5437))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5438);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5439=cj5*cj5;
IkReal x5440=((1.0)*r20);
IkReal x5441=(r01*r21);
IkReal x5442=(r21*sj5);
IkReal x5443=(((cj5*r01*r20*sj5))+(((-1.0)*x5441))+(((-1.0)*r02*r22))+((cj5*r00*x5442))+(((-1.0)*r00*x5439*x5440))+((x5439*x5441)));
j4eval[0]=x5443;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5440))+((cj0*x5442)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5444=cj5*cj5;
IkReal x5445=((1.0)*r20);
IkReal x5446=(r01*r21);
IkReal x5447=(r21*sj5);
CheckValue<IkReal> x5448 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5445))+((cj0*x5447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5448.valid){
continue;
}
CheckValue<IkReal> x5449=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x5446))+(((-1.0)*r02*r22))+((x5444*x5446))+((cj5*r00*x5447))+(((-1.0)*r00*x5444*x5445)))),-1);
if(!x5449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5448.value)+(((1.5707963267949)*(x5449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5450=IKcos(j4);
IkReal x5451=IKsin(j4);
IkReal x5452=(cj5*r00);
IkReal x5453=(cj5*r10);
IkReal x5454=(cj5*r20);
IkReal x5455=((1.0)*x5450);
IkReal x5456=((1.0)*x5451);
IkReal x5457=(sj5*x5450);
IkReal x5458=(sj5*x5451);
evalcond[0]=((((-1.0)*x5454*x5455))+((r21*x5457))+((r22*x5451)));
evalcond[1]=((((-1.0)*x5454*x5456))+((r21*x5458))+(((-1.0)*r22*x5455)));
evalcond[2]=((((-1.0)*x5452*x5455))+((r01*x5457))+cj0+((r02*x5451)));
evalcond[3]=(((r12*x5451))+sj0+(((-1.0)*x5453*x5455))+((r11*x5457)));
evalcond[4]=((((-1.0)*r12*x5455))+cj0+(((-1.0)*x5453*x5456))+((r11*x5458)));
evalcond[5]=((((-1.0)*x5452*x5456))+(((-1.0)*sj0))+((r01*x5458))+(((-1.0)*r02*x5455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5459=((1.0)*cj5);
CheckValue<IkReal> x5460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5459)))),-1);
if(!x5460.valid){
continue;
}
CheckValue<IkReal> x5461 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5459)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5460.value)))+(x5461.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5462=IKcos(j4);
IkReal x5463=IKsin(j4);
IkReal x5464=(cj5*r00);
IkReal x5465=(cj5*r10);
IkReal x5466=(cj5*r20);
IkReal x5467=((1.0)*x5462);
IkReal x5468=((1.0)*x5463);
IkReal x5469=(sj5*x5462);
IkReal x5470=(sj5*x5463);
evalcond[0]=((((-1.0)*x5466*x5467))+((r22*x5463))+((r21*x5469)));
evalcond[1]=((((-1.0)*x5466*x5468))+((r21*x5470))+(((-1.0)*r22*x5467)));
evalcond[2]=((((-1.0)*x5464*x5467))+((r01*x5469))+cj0+((r02*x5463)));
evalcond[3]=(sj0+((r11*x5469))+((r12*x5463))+(((-1.0)*x5465*x5467)));
evalcond[4]=(cj0+(((-1.0)*r12*x5467))+((r11*x5470))+(((-1.0)*x5465*x5468)));
evalcond[5]=((((-1.0)*x5464*x5468))+(((-1.0)*sj0))+((r01*x5470))+(((-1.0)*r02*x5467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5471 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5471.valid){
continue;
}
CheckValue<IkReal> x5472=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5471.value)+(((1.5707963267949)*(x5472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5473=IKcos(j4);
IkReal x5474=IKsin(j4);
IkReal x5475=(cj5*r00);
IkReal x5476=(cj5*r10);
IkReal x5477=(cj5*r20);
IkReal x5478=((1.0)*x5473);
IkReal x5479=((1.0)*x5474);
IkReal x5480=(sj5*x5473);
IkReal x5481=(sj5*x5474);
evalcond[0]=((((-1.0)*x5477*x5478))+((r21*x5480))+((r22*x5474)));
evalcond[1]=((((-1.0)*x5477*x5479))+((r21*x5481))+(((-1.0)*r22*x5478)));
evalcond[2]=(cj0+((r01*x5480))+(((-1.0)*x5475*x5478))+((r02*x5474)));
evalcond[3]=(sj0+((r11*x5480))+(((-1.0)*x5476*x5478))+((r12*x5474)));
evalcond[4]=(cj0+((r11*x5481))+(((-1.0)*x5476*x5479))+(((-1.0)*r12*x5478)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5481))+(((-1.0)*x5475*x5479))+(((-1.0)*r02*x5478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5482=cj1*cj1;
IkReal x5483=(cj5*r01);
IkReal x5484=(cj1*sj2);
IkReal x5485=(cj1*sj1);
IkReal x5486=(r00*sj5);
IkReal x5487=(cj2*sj1);
IkReal x5488=((50000.0)*py);
IkReal x5489=((5785.0)*cj5*r11);
IkReal x5490=((5785.0)*r10*sj5);
IkReal x5491=(sj2*x5482);
CheckValue<IkReal> x5492=IKPowWithIntegerCheck(((((28615.0)*x5485))+(((28615.0)*cj2*sj2))+(((-57230.0)*x5485*(cj2*cj2)))+(((-57230.0)*cj2*x5491))+(((-30600.0)*x5491))+(((-30600.0)*cj2*x5485))),-1);
if(!x5492.valid){
continue;
}
CheckValue<IkReal> x5493=IKPowWithIntegerCheck(((((-1.0)*x5484))+(((-1.0)*x5487))),-1);
if(!x5493.valid){
continue;
}
if( IKabs(((x5492.value)*(((((8197.0)*x5483))+(((8197.0)*x5486))+(((-1.0)*x5484*x5488))+(((-1.0)*x5484*x5489))+(((-1.0)*x5487*x5489))+(((-1.0)*x5487*x5488))+(((-1.0)*x5484*x5490))+(((-1.0)*x5487*x5490)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5493.value)*(((((-1.0)*x5483))+(((-1.0)*x5486)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5492.value)*(((((8197.0)*x5483))+(((8197.0)*x5486))+(((-1.0)*x5484*x5488))+(((-1.0)*x5484*x5489))+(((-1.0)*x5487*x5489))+(((-1.0)*x5487*x5488))+(((-1.0)*x5484*x5490))+(((-1.0)*x5487*x5490))))))+IKsqr(((x5493.value)*(((((-1.0)*x5483))+(((-1.0)*x5486))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5492.value)*(((((8197.0)*x5483))+(((8197.0)*x5486))+(((-1.0)*x5484*x5488))+(((-1.0)*x5484*x5489))+(((-1.0)*x5487*x5489))+(((-1.0)*x5487*x5488))+(((-1.0)*x5484*x5490))+(((-1.0)*x5487*x5490))))), ((x5493.value)*(((((-1.0)*x5483))+(((-1.0)*x5486))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5494=IKcos(j0);
IkReal x5495=IKsin(j0);
IkReal x5496=(cj5*r01);
IkReal x5497=((0.1157)*sj5);
IkReal x5498=((1.0)*sj1);
IkReal x5499=(cj5*r11);
IkReal x5500=((1.0)*cj1*sj2);
IkReal x5501=((0.5723)*sj1*sj2);
IkReal x5502=(cj2*x5494);
IkReal x5503=(cj1*x5495);
evalcond[0]=(((r00*sj5))+x5496+(((-1.0)*x5498*x5502))+(((-1.0)*x5494*x5500)));
evalcond[1]=(x5499+((r10*sj5))+(((-1.0)*cj2*x5495*x5498))+(((-1.0)*x5495*x5500)));
evalcond[2]=((((-0.16394)*x5495))+(((0.612)*cj1*x5494))+(((-1.0)*px))+(((-1.0)*r00*x5497))+(((-0.1157)*x5496))+(((0.5723)*cj1*x5502))+(((-1.0)*x5494*x5501)));
evalcond[3]=((((0.612)*x5503))+(((-1.0)*py))+(((-0.1157)*x5499))+(((0.16394)*x5494))+(((-1.0)*r10*x5497))+(((0.5723)*cj2*x5503))+(((-1.0)*x5495*x5501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5504=((1.0)*cj5);
IkReal x5505=((((-1.0)*r01*x5504))+(((-1.0)*r00*sj5)));
j4eval[0]=x5505;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5504)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5506=((1.0)*cj5);
IkReal x5507=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5506)));
j4eval[0]=x5507;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5506)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5508=((1.0)*sj0);
IkReal x5509=((1.0)*cj0);
IkReal x5510=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5510;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x5508))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x5509))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r02*x5509))+(((-1.0)*r12*x5508))))));
j4eval[2]=IKsign(x5510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5511=((-1.0)*r20);
IkReal x5513 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5513)==0){
continue;
}
IkReal x5512=pow(x5513,-0.5);
CheckValue<IkReal> x5514 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5511),IKFAST_ATAN2_MAGTHRESH);
if(!x5514.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5514.value));
IkReal gconst115=(r21*x5512);
IkReal gconst116=(x5511*x5512);
CheckValue<IkReal> x5515 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5515.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5515.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5516=((-1.0)*r20);
IkReal x5517=x5512;
CheckValue<IkReal> x5519 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5516),IKFAST_ATAN2_MAGTHRESH);
if(!x5519.valid){
continue;
}
IkReal x5518=((-1.0)*(x5519.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5518;
IkReal gconst114=x5518;
IkReal gconst115=(r21*x5517);
IkReal gconst116=(x5516*x5517);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5520=((-1.0)*r20);
IkReal x5521=x5512;
CheckValue<IkReal> x5523 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5520),IKFAST_ATAN2_MAGTHRESH);
if(!x5523.valid){
continue;
}
IkReal x5522=((-1.0)*(x5523.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5522;
IkReal gconst114=x5522;
IkReal gconst115=(r21*x5521);
IkReal gconst116=(x5520*x5521);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5524=((-1.0)*r20);
IkReal x5525=x5512;
CheckValue<IkReal> x5527 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5524),IKFAST_ATAN2_MAGTHRESH);
if(!x5527.valid){
continue;
}
IkReal x5526=((-1.0)*(x5527.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5526;
IkReal gconst114=x5526;
IkReal gconst115=(r21*x5525);
IkReal gconst116=(x5524*x5525);
IkReal x5528=((1.0)*(r22*r22));
CheckValue<IkReal> x5532=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5528))),-1);
if(!x5532.valid){
continue;
}
IkReal x5529=x5532.value;
IkReal x5530=((1.0)*x5529);
IkReal x5531=((((-1.0)*x5528))+(((-1.0)*x5530*(r21*r21*r21*r21)))+(((-2.0)*x5529*(r20*r20)*(r21*r21)))+(((-1.0)*x5530*(r20*r20*r20*r20))));
j4eval[0]=x5531;
j4eval[1]=IKsign(x5531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5533=(cj2*sj1);
IkReal x5534=(gconst115*r21);
IkReal x5535=(cj1*sj2);
IkReal x5536=((1.0)*gconst116*r20);
CheckValue<IkReal> x5537 = IKatan2WithCheck(IkReal((((r22*x5533))+((r22*x5535)))),IkReal(((((-1.0)*x5535*x5536))+((x5534*x5535))+((x5533*x5534))+(((-1.0)*x5533*x5536)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5537.valid){
continue;
}
CheckValue<IkReal> x5538=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5534))+(((-1.0)*(x5534*x5534)))+(((-1.0)*gconst116*r20*x5536))+(((-1.0)*(r22*r22))))),-1);
if(!x5538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5537.value)+(((1.5707963267949)*(x5538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5539=IKsin(j4);
IkReal x5540=IKcos(j4);
IkReal x5541=(sj1*sj2);
IkReal x5542=((1.0)*x5540);
IkReal x5543=((1.0)*cj1*cj2);
IkReal x5544=(gconst115*x5539);
IkReal x5545=(gconst115*x5540);
IkReal x5546=((1.0)*gconst116*x5539);
evalcond[0]=((((-1.0)*r22*x5542))+(((-1.0)*r20*x5546))+((r21*x5544)));
evalcond[1]=(cj0+((r11*x5544))+(((-1.0)*r12*x5542))+(((-1.0)*r10*x5546)));
evalcond[2]=((((-1.0)*r00*x5546))+(((-1.0)*sj0))+(((-1.0)*r02*x5542))+((r01*x5544)));
evalcond[3]=((((-1.0)*gconst116*r20*x5542))+((cj2*sj1))+((cj1*sj2))+((r22*x5539))+((r21*x5545)));
evalcond[4]=(((cj0*x5541))+(((-1.0)*cj0*x5543))+(((-1.0)*gconst116*r00*x5542))+((r02*x5539))+((r01*x5545)));
evalcond[5]=(((sj0*x5541))+(((-1.0)*gconst116*r10*x5542))+((r11*x5545))+(((-1.0)*sj0*x5543))+((r12*x5539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5547=((1.0)*gconst116);
CheckValue<IkReal> x5548=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5547)))),-1);
if(!x5548.valid){
continue;
}
CheckValue<IkReal> x5549 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5548.value)))+(x5549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5550=IKsin(j4);
IkReal x5551=IKcos(j4);
IkReal x5552=(sj1*sj2);
IkReal x5553=((1.0)*x5551);
IkReal x5554=((1.0)*cj1*cj2);
IkReal x5555=(gconst115*x5550);
IkReal x5556=(gconst115*x5551);
IkReal x5557=((1.0)*gconst116*x5550);
evalcond[0]=((((-1.0)*r20*x5557))+((r21*x5555))+(((-1.0)*r22*x5553)));
evalcond[1]=(cj0+((r11*x5555))+(((-1.0)*r12*x5553))+(((-1.0)*r10*x5557)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5557))+((r01*x5555))+(((-1.0)*r02*x5553)));
evalcond[3]=(((cj2*sj1))+((r21*x5556))+(((-1.0)*gconst116*r20*x5553))+((cj1*sj2))+((r22*x5550)));
evalcond[4]=(((r01*x5556))+((r02*x5550))+((cj0*x5552))+(((-1.0)*cj0*x5554))+(((-1.0)*gconst116*r00*x5553)));
evalcond[5]=((((-1.0)*sj0*x5554))+((r11*x5556))+(((-1.0)*gconst116*r10*x5553))+((sj0*x5552))+((r12*x5550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5558=((1.0)*gconst116);
CheckValue<IkReal> x5559 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5558))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5559.valid){
continue;
}
CheckValue<IkReal> x5560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5558))+(((-1.0)*gconst115*r00)))),-1);
if(!x5560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5559.value)+(((1.5707963267949)*(x5560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5561=IKsin(j4);
IkReal x5562=IKcos(j4);
IkReal x5563=(sj1*sj2);
IkReal x5564=((1.0)*x5562);
IkReal x5565=((1.0)*cj1*cj2);
IkReal x5566=(gconst115*x5561);
IkReal x5567=(gconst115*x5562);
IkReal x5568=((1.0)*gconst116*x5561);
evalcond[0]=((((-1.0)*r22*x5564))+((r21*x5566))+(((-1.0)*r20*x5568)));
evalcond[1]=((((-1.0)*r12*x5564))+cj0+(((-1.0)*r10*x5568))+((r11*x5566)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5568))+(((-1.0)*r02*x5564))+((r01*x5566)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5561))+((r21*x5567))+(((-1.0)*gconst116*r20*x5564)));
evalcond[4]=(((r02*x5561))+((cj0*x5563))+(((-1.0)*gconst116*r00*x5564))+(((-1.0)*cj0*x5565))+((r01*x5567)));
evalcond[5]=((((-1.0)*sj0*x5565))+((r11*x5567))+(((-1.0)*gconst116*r10*x5564))+((sj0*x5563))+((r12*x5561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5569=((-1.0)*r21);
IkReal x5571 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5571)==0){
continue;
}
IkReal x5570=pow(x5571,-0.5);
CheckValue<IkReal> x5572 = IKatan2WithCheck(IkReal(x5569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5572.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5572.value))));
IkReal gconst118=(x5569*x5570);
IkReal gconst119=((1.0)*r20*x5570);
CheckValue<IkReal> x5573 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5573.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5573.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5574=((-1.0)*r21);
CheckValue<IkReal> x5577 = IKatan2WithCheck(IkReal(x5574),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5577.valid){
continue;
}
IkReal x5575=((1.0)*(x5577.value));
IkReal x5576=x5570;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5575)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5575)));
IkReal gconst118=(x5574*x5576);
IkReal gconst119=((1.0)*r20*x5576);
IkReal x5578=r22*r22;
IkReal x5579=((1.0)*x5578);
CheckValue<IkReal> x5583=IKPowWithIntegerCheck(((-1.0)+x5578),-1);
if(!x5583.valid){
continue;
}
IkReal x5580=x5583.value;
if((((1.0)+(((-1.0)*x5579)))) < -0.00001)
continue;
IkReal x5581=IKsqrt(((1.0)+(((-1.0)*x5579))));
IkReal x5582=(cj0*x5580*x5581);
j4eval[0]=((IKabs((x5582+(((-1.0)*x5579*x5582)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5584=((-1.0)*r21);
CheckValue<IkReal> x5587 = IKatan2WithCheck(IkReal(x5584),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5587.valid){
continue;
}
IkReal x5585=((1.0)*(x5587.value));
IkReal x5586=x5570;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5585)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5585)));
IkReal gconst118=(x5584*x5586);
IkReal gconst119=((1.0)*r20*x5586);
IkReal x5588=r22*r22;
IkReal x5589=((1.0)*x5588);
CheckValue<IkReal> x5593=IKPowWithIntegerCheck(((-1.0)+x5588),-1);
if(!x5593.valid){
continue;
}
IkReal x5590=x5593.value;
if((((1.0)+(((-1.0)*x5589)))) < -0.00001)
continue;
IkReal x5591=IKsqrt(((1.0)+(((-1.0)*x5589))));
IkReal x5592=(sj0*x5590*x5591);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5592+(((-1.0)*x5589*x5592))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5594=((-1.0)*r21);
CheckValue<IkReal> x5597 = IKatan2WithCheck(IkReal(x5594),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5597.valid){
continue;
}
IkReal x5595=((1.0)*(x5597.value));
IkReal x5596=x5570;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5595)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5595)));
IkReal gconst118=(x5594*x5596);
IkReal gconst119=((1.0)*r20*x5596);
IkReal x5598=r22*r22;
IkReal x5599=(r12*sj0);
IkReal x5600=(cj0*r02);
CheckValue<IkReal> x5604=IKPowWithIntegerCheck(((-1.0)+x5598),-1);
if(!x5604.valid){
continue;
}
IkReal x5601=x5604.value;
if((((1.0)+(((-1.0)*x5598)))) < -0.00001)
continue;
IkReal x5602=IKsqrt(((1.0)+(((-1.0)*x5598))));
IkReal x5603=(r22*x5601*x5602);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5600))+(((-1.0)*x5599)))))+(IKabs((((x5600*x5603))+((x5599*x5603))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5605=((1.0)*sj0);
IkReal x5606=((1.0)*gconst118);
CheckValue<IkReal> x5607=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5606)))),-1);
if(!x5607.valid){
continue;
}
CheckValue<IkReal> x5608 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5605)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5606))+(((-1.0)*gconst118*r11*x5605))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5607.value)))+(x5608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5609=IKsin(j4);
IkReal x5610=IKcos(j4);
IkReal x5611=(gconst118*r01);
IkReal x5612=(sj1*sj2);
IkReal x5613=(gconst119*r20);
IkReal x5614=(gconst119*r10);
IkReal x5615=(gconst119*r00);
IkReal x5616=(gconst118*r21);
IkReal x5617=(gconst118*r11);
IkReal x5618=((1.0)*x5610);
IkReal x5619=((1.0)*cj1*cj2);
IkReal x5620=((1.0)*x5609);
evalcond[0]=((((-1.0)*x5613*x5620))+((x5609*x5616))+(((-1.0)*r22*x5618)));
evalcond[1]=(((x5609*x5617))+cj0+(((-1.0)*r12*x5618))+(((-1.0)*x5614*x5620)));
evalcond[2]=((((-1.0)*sj0))+((x5609*x5611))+(((-1.0)*x5615*x5620))+(((-1.0)*r02*x5618)));
evalcond[3]=((((-1.0)*x5613*x5618))+((cj2*sj1))+((cj1*sj2))+((x5610*x5616))+((r22*x5609)));
evalcond[4]=(((cj0*x5612))+((r02*x5609))+(((-1.0)*cj0*x5619))+((x5610*x5611))+(((-1.0)*x5615*x5618)));
evalcond[5]=(((sj0*x5612))+((x5610*x5617))+((r12*x5609))+(((-1.0)*sj0*x5619))+(((-1.0)*x5614*x5618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5621=((1.0)*gconst119);
CheckValue<IkReal> x5622=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5621)))),-1);
if(!x5622.valid){
continue;
}
CheckValue<IkReal> x5623 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x5621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5622.value)))+(x5623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5624=IKsin(j4);
IkReal x5625=IKcos(j4);
IkReal x5626=(gconst118*r01);
IkReal x5627=(sj1*sj2);
IkReal x5628=(gconst119*r20);
IkReal x5629=(gconst119*r10);
IkReal x5630=(gconst119*r00);
IkReal x5631=(gconst118*r21);
IkReal x5632=(gconst118*r11);
IkReal x5633=((1.0)*x5625);
IkReal x5634=((1.0)*cj1*cj2);
IkReal x5635=((1.0)*x5624);
evalcond[0]=((((-1.0)*x5628*x5635))+((x5624*x5631))+(((-1.0)*r22*x5633)));
evalcond[1]=((((-1.0)*r12*x5633))+(((-1.0)*x5629*x5635))+cj0+((x5624*x5632)));
evalcond[2]=(((x5624*x5626))+(((-1.0)*sj0))+(((-1.0)*r02*x5633))+(((-1.0)*x5630*x5635)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5628*x5633))+((cj1*sj2))+((x5625*x5631))+((r22*x5624)));
evalcond[4]=(((x5625*x5626))+((cj0*x5627))+((r02*x5624))+(((-1.0)*cj0*x5634))+(((-1.0)*x5630*x5633)));
evalcond[5]=((((-1.0)*sj0*x5634))+(((-1.0)*x5629*x5633))+((sj0*x5627))+((x5625*x5632))+((r12*x5624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5636=((1.0)*gconst119);
CheckValue<IkReal> x5637 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5637.valid){
continue;
}
CheckValue<IkReal> x5638=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5636)))),-1);
if(!x5638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5637.value)+(((1.5707963267949)*(x5638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5639=IKsin(j4);
IkReal x5640=IKcos(j4);
IkReal x5641=(gconst118*r01);
IkReal x5642=(sj1*sj2);
IkReal x5643=(gconst119*r20);
IkReal x5644=(gconst119*r10);
IkReal x5645=(gconst119*r00);
IkReal x5646=(gconst118*r21);
IkReal x5647=(gconst118*r11);
IkReal x5648=((1.0)*x5640);
IkReal x5649=((1.0)*cj1*cj2);
IkReal x5650=((1.0)*x5639);
evalcond[0]=((((-1.0)*r22*x5648))+((x5639*x5646))+(((-1.0)*x5643*x5650)));
evalcond[1]=(((x5639*x5647))+cj0+(((-1.0)*r12*x5648))+(((-1.0)*x5644*x5650)));
evalcond[2]=((((-1.0)*sj0))+((x5639*x5641))+(((-1.0)*x5645*x5650))+(((-1.0)*r02*x5648)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5640*x5646))+((r22*x5639))+(((-1.0)*x5643*x5648)));
evalcond[4]=(((cj0*x5642))+(((-1.0)*x5645*x5648))+((x5640*x5641))+(((-1.0)*cj0*x5649))+((r02*x5639)));
evalcond[5]=(((r12*x5639))+(((-1.0)*sj0*x5649))+(((-1.0)*x5644*x5648))+((sj0*x5642))+((x5640*x5647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5651=((-1.0)*r10);
IkReal x5653 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5653)==0){
continue;
}
IkReal x5652=pow(x5653,-0.5);
CheckValue<IkReal> x5654 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5651),IKFAST_ATAN2_MAGTHRESH);
if(!x5654.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5654.value));
IkReal gconst121=(r11*x5652);
IkReal gconst122=(x5651*x5652);
CheckValue<IkReal> x5655 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5655.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5655.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5656=((-1.0)*r10);
IkReal x5657=x5652;
CheckValue<IkReal> x5659 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5656),IKFAST_ATAN2_MAGTHRESH);
if(!x5659.valid){
continue;
}
IkReal x5658=((-1.0)*(x5659.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5658;
IkReal gconst120=x5658;
IkReal gconst121=(r11*x5657);
IkReal gconst122=(x5656*x5657);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5660=((1.0)*sj0);
IkReal x5661=((1.0)*gconst121);
CheckValue<IkReal> x5662 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5660)))),IkReal(((((-1.0)*cj0*r01*x5661))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5660))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5662.valid){
continue;
}
CheckValue<IkReal> x5663=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5661))+(((-1.0)*gconst122*r21)))),-1);
if(!x5663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5662.value)+(((1.5707963267949)*(x5663.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5664=IKsin(j4);
IkReal x5665=IKcos(j4);
IkReal x5666=(gconst121*r11);
IkReal x5667=(sj1*sj2);
IkReal x5668=(gconst122*r00);
IkReal x5669=(gconst122*r10);
IkReal x5670=(gconst122*r20);
IkReal x5671=((1.0)*x5665);
IkReal x5672=((1.0)*cj1*cj2);
IkReal x5673=((1.0)*x5664);
IkReal x5674=(gconst121*x5664);
IkReal x5675=(gconst121*x5665);
evalcond[0]=((((-1.0)*x5670*x5673))+(((-1.0)*r22*x5671))+((r21*x5674)));
evalcond[1]=(((x5664*x5666))+cj0+(((-1.0)*x5669*x5673))+(((-1.0)*r12*x5671)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5668*x5673))+((r01*x5674))+(((-1.0)*r02*x5671)));
evalcond[3]=(((cj2*sj1))+((r22*x5664))+(((-1.0)*x5670*x5671))+((cj1*sj2))+((r21*x5675)));
evalcond[4]=(((r02*x5664))+(((-1.0)*cj0*x5672))+(((-1.0)*x5668*x5671))+((r01*x5675))+((cj0*x5667)));
evalcond[5]=((((-1.0)*x5669*x5671))+((sj0*x5667))+((r12*x5664))+((x5665*x5666))+(((-1.0)*sj0*x5672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5676=((1.0)*gconst122);
CheckValue<IkReal> x5677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5676))+(((-1.0)*gconst121*r00)))),-1);
if(!x5677.valid){
continue;
}
CheckValue<IkReal> x5678 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5676))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5677.value)))+(x5678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5679=IKsin(j4);
IkReal x5680=IKcos(j4);
IkReal x5681=(gconst121*r11);
IkReal x5682=(sj1*sj2);
IkReal x5683=(gconst122*r00);
IkReal x5684=(gconst122*r10);
IkReal x5685=(gconst122*r20);
IkReal x5686=((1.0)*x5680);
IkReal x5687=((1.0)*cj1*cj2);
IkReal x5688=((1.0)*x5679);
IkReal x5689=(gconst121*x5679);
IkReal x5690=(gconst121*x5680);
evalcond[0]=((((-1.0)*r22*x5686))+(((-1.0)*x5685*x5688))+((r21*x5689)));
evalcond[1]=(cj0+(((-1.0)*x5684*x5688))+((x5679*x5681))+(((-1.0)*r12*x5686)));
evalcond[2]=((((-1.0)*r02*x5686))+(((-1.0)*sj0))+(((-1.0)*x5683*x5688))+((r01*x5689)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5685*x5686))+((r22*x5679))+((r21*x5690)));
evalcond[4]=(((r02*x5679))+(((-1.0)*cj0*x5687))+(((-1.0)*x5683*x5686))+((cj0*x5682))+((r01*x5690)));
evalcond[5]=(((x5680*x5681))+(((-1.0)*x5684*x5686))+(((-1.0)*sj0*x5687))+((sj0*x5682))+((r12*x5679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5691=((-1.0)*r11);
IkReal x5693 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5693)==0){
continue;
}
IkReal x5692=pow(x5693,-0.5);
CheckValue<IkReal> x5694 = IKatan2WithCheck(IkReal(x5691),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5694.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5694.value))));
IkReal gconst124=(x5691*x5692);
IkReal gconst125=((1.0)*r10*x5692);
CheckValue<IkReal> x5695 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5695.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5695.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5696=((-1.0)*r11);
CheckValue<IkReal> x5699 = IKatan2WithCheck(IkReal(x5696),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5699.valid){
continue;
}
IkReal x5697=((1.0)*(x5699.value));
IkReal x5698=x5692;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5697)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5697)));
IkReal gconst124=(x5696*x5698);
IkReal gconst125=((1.0)*r10*x5698);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5700=((-1.0)*r11);
CheckValue<IkReal> x5703 = IKatan2WithCheck(IkReal(x5700),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5703.valid){
continue;
}
IkReal x5701=((1.0)*(x5703.value));
IkReal x5702=x5692;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5701)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5701)));
IkReal gconst124=(x5700*x5702);
IkReal gconst125=((1.0)*r10*x5702);
IkReal x5704=r12*r12;
IkReal x5705=((1.0)*sj0);
IkReal x5706=(cj0*r02);
IkReal x5707=x5692;
j4eval[0]=((IKabs((((r12*x5706*x5707))+((sj0*x5704*x5707))+(((-1.0)*x5705*x5707)))))+(IKabs(((((-1.0)*r12*x5705))+(((-1.0)*x5706))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5708=((-1.0)*r11);
CheckValue<IkReal> x5711 = IKatan2WithCheck(IkReal(x5708),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5711.valid){
continue;
}
IkReal x5709=((1.0)*(x5711.value));
IkReal x5710=x5692;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5709)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5709)));
IkReal gconst124=(x5708*x5710);
IkReal gconst125=((1.0)*r10*x5710);
IkReal x5712=r12*r12;
IkReal x5713=((1.0)+(((-1.0)*x5712)));
IkReal x5714=(cj2*r22*sj1);
IkReal x5715=(cj1*r22*sj2);
CheckValue<IkReal> x5722=IKPowWithIntegerCheck(x5713,-1);
if(!x5722.valid){
continue;
}
IkReal x5716=x5722.value;
CheckValue<IkReal> x5723=IKPowWithIntegerCheck(((-1.0)+x5712),-1);
if(!x5723.valid){
continue;
}
IkReal x5717=x5723.value;
IkReal x5718=((1.0)*x5716);
if((x5713) < -0.00001)
continue;
IkReal x5719=IKsqrt(x5713);
IkReal x5720=((1.0)*r12*x5717*x5719);
IkReal x5721=((((-1.0)*x5718*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5718*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x5716)));
j4eval[0]=x5721;
j4eval[1]=IKsign(x5721);
j4eval[2]=((IKabs((x5715+x5714)))+(IKabs(((((-1.0)*x5715*x5720))+(((-1.0)*x5714*x5720))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5724=(gconst124*r21);
IkReal x5725=(cj1*sj2);
IkReal x5726=(cj2*sj1);
IkReal x5727=(gconst125*r20);
CheckValue<IkReal> x5728=IKPowWithIntegerCheck(IKsign(((((2.0)*x5724*x5727))+(((-1.0)*(x5727*x5727)))+(((-1.0)*(x5724*x5724)))+(((-1.0)*(r22*r22))))),-1);
if(!x5728.valid){
continue;
}
CheckValue<IkReal> x5729 = IKatan2WithCheck(IkReal((((r22*x5726))+((r22*x5725)))),IkReal(((((-1.0)*x5725*x5727))+((x5724*x5726))+((x5724*x5725))+(((-1.0)*x5726*x5727)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5728.value)))+(x5729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5730=IKsin(j4);
IkReal x5731=IKcos(j4);
IkReal x5732=(sj1*sj2);
IkReal x5733=(gconst125*r20);
IkReal x5734=(gconst124*r01);
IkReal x5735=(gconst125*r00);
IkReal x5736=(gconst125*r10);
IkReal x5737=((1.0)*x5731);
IkReal x5738=((1.0)*cj1*cj2);
IkReal x5739=((1.0)*x5730);
IkReal x5740=(gconst124*x5730);
IkReal x5741=(gconst124*x5731);
evalcond[0]=((((-1.0)*x5733*x5739))+(((-1.0)*r22*x5737))+((r21*x5740)));
evalcond[1]=(((r11*x5740))+cj0+(((-1.0)*r12*x5737))+(((-1.0)*x5736*x5739)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5737))+(((-1.0)*x5735*x5739))+((x5730*x5734)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5733*x5737))+((r21*x5741))+((r22*x5730)));
evalcond[4]=((((-1.0)*x5735*x5737))+(((-1.0)*cj0*x5738))+((x5731*x5734))+((cj0*x5732))+((r02*x5730)));
evalcond[5]=(((r11*x5741))+((r12*x5730))+(((-1.0)*sj0*x5738))+(((-1.0)*x5736*x5737))+((sj0*x5732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5742=((1.0)*sj0);
IkReal x5743=((1.0)*cj0);
CheckValue<IkReal> x5744 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5743))+(((-1.0)*r12*x5742)))),IkReal(((((-1.0)*gconst124*r11*x5742))+((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x5743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5744.valid){
continue;
}
CheckValue<IkReal> x5745=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5744.value)+(((1.5707963267949)*(x5745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5746=IKsin(j4);
IkReal x5747=IKcos(j4);
IkReal x5748=(sj1*sj2);
IkReal x5749=(gconst125*r20);
IkReal x5750=(gconst124*r01);
IkReal x5751=(gconst125*r00);
IkReal x5752=(gconst125*r10);
IkReal x5753=((1.0)*x5747);
IkReal x5754=((1.0)*cj1*cj2);
IkReal x5755=((1.0)*x5746);
IkReal x5756=(gconst124*x5746);
IkReal x5757=(gconst124*x5747);
evalcond[0]=((((-1.0)*x5749*x5755))+((r21*x5756))+(((-1.0)*r22*x5753)));
evalcond[1]=((((-1.0)*x5752*x5755))+cj0+(((-1.0)*r12*x5753))+((r11*x5756)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5751*x5755))+(((-1.0)*r02*x5753))+((x5746*x5750)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5749*x5753))+((r21*x5757))+((r22*x5746))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x5751*x5753))+(((-1.0)*cj0*x5754))+((cj0*x5748))+((x5747*x5750))+((r02*x5746)));
evalcond[5]=((((-1.0)*x5752*x5753))+(((-1.0)*sj0*x5754))+((sj0*x5748))+((r11*x5757))+((r12*x5746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5758=((1.0)*gconst125);
CheckValue<IkReal> x5759 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5758))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5759.valid){
continue;
}
CheckValue<IkReal> x5760=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5758)))),-1);
if(!x5760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5759.value)+(((1.5707963267949)*(x5760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5761=IKsin(j4);
IkReal x5762=IKcos(j4);
IkReal x5763=(sj1*sj2);
IkReal x5764=(gconst125*r20);
IkReal x5765=(gconst124*r01);
IkReal x5766=(gconst125*r00);
IkReal x5767=(gconst125*r10);
IkReal x5768=((1.0)*x5762);
IkReal x5769=((1.0)*cj1*cj2);
IkReal x5770=((1.0)*x5761);
IkReal x5771=(gconst124*x5761);
IkReal x5772=(gconst124*x5762);
evalcond[0]=(((r21*x5771))+(((-1.0)*r22*x5768))+(((-1.0)*x5764*x5770)));
evalcond[1]=((((-1.0)*x5767*x5770))+cj0+(((-1.0)*r12*x5768))+((r11*x5771)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5766*x5770))+(((-1.0)*r02*x5768))+((x5761*x5765)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5761))+((r21*x5772))+(((-1.0)*x5764*x5768)));
evalcond[4]=((((-1.0)*x5766*x5768))+(((-1.0)*cj0*x5769))+((cj0*x5763))+((r02*x5761))+((x5762*x5765)));
evalcond[5]=((((-1.0)*x5767*x5768))+(((-1.0)*sj0*x5769))+((r11*x5772))+((r12*x5761))+((sj0*x5763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5773=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5773;
j4eval[1]=IKsign(x5773);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5774=((1.0)*cj5);
IkReal x5775=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5774)));
j4eval[0]=x5775;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5774))+((r21*sj5))))));
j4eval[2]=IKsign(x5775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5776=cj5*cj5;
IkReal x5777=r11*r11;
IkReal x5778=(cj5*r10);
IkReal x5779=(r11*sj5);
IkReal x5780=(((x5776*x5777))+(((2.0)*x5778*x5779))+(((-1.0)*(r12*r12)))+(((-1.0)*x5776*(r10*r10)))+(((-1.0)*x5777)));
j4eval[0]=x5780;
j4eval[1]=IKsign(x5780);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5778))+x5779))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5781=cj5*cj5;
IkReal x5782=r11*r11;
IkReal x5783=(cj5*r10);
IkReal x5784=(r11*sj5);
CheckValue<IkReal> x5785=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*x5782))+(((-1.0)*x5781*(r10*r10)))+(((2.0)*x5783*x5784))+((x5781*x5782)))),-1);
if(!x5785.valid){
continue;
}
CheckValue<IkReal> x5786 = IKatan2WithCheck(IkReal(((((-1.0)*x5783))+x5784)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5785.value)))+(x5786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5787=IKcos(j4);
IkReal x5788=IKsin(j4);
IkReal x5789=(cj5*r00);
IkReal x5790=(cj5*r10);
IkReal x5791=(r21*sj5);
IkReal x5792=(cj5*r20);
IkReal x5793=((1.0)*x5787);
IkReal x5794=((1.0)*x5788);
IkReal x5795=(sj5*x5788);
IkReal x5796=(sj5*x5787);
evalcond[0]=(((r12*x5788))+((r11*x5796))+(((-1.0)*x5790*x5793)));
evalcond[1]=(((x5788*x5791))+(((-1.0)*x5792*x5794))+(((-1.0)*r22*x5793)));
evalcond[2]=(((r01*x5795))+(((-1.0)*x5789*x5794))+(((-1.0)*r02*x5793)));
evalcond[3]=((1.0)+((r11*x5795))+(((-1.0)*x5790*x5794))+(((-1.0)*r12*x5793)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5792*x5793))+((cj1*sj2))+((r22*x5788))+((x5787*x5791)));
evalcond[5]=(((r01*x5796))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5789*x5793))+((r02*x5788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5797=((1.0)*cj5);
CheckValue<IkReal> x5798 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5797)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5798.valid){
continue;
}
CheckValue<IkReal> x5799=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5797))+(((-1.0)*r00*sj5)))),-1);
if(!x5799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5798.value)+(((1.5707963267949)*(x5799.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5800=IKcos(j4);
IkReal x5801=IKsin(j4);
IkReal x5802=(cj5*r00);
IkReal x5803=(cj5*r10);
IkReal x5804=(r21*sj5);
IkReal x5805=(cj5*r20);
IkReal x5806=((1.0)*x5800);
IkReal x5807=((1.0)*x5801);
IkReal x5808=(sj5*x5801);
IkReal x5809=(sj5*x5800);
evalcond[0]=(((r11*x5809))+(((-1.0)*x5803*x5806))+((r12*x5801)));
evalcond[1]=((((-1.0)*r22*x5806))+(((-1.0)*x5805*x5807))+((x5801*x5804)));
evalcond[2]=(((r01*x5808))+(((-1.0)*x5802*x5807))+(((-1.0)*r02*x5806)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5806))+((r11*x5808))+(((-1.0)*x5803*x5807)));
evalcond[4]=(((x5800*x5804))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5805*x5806))+((r22*x5801)));
evalcond[5]=(((r01*x5809))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5801))+(((-1.0)*x5802*x5806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5810=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5810.valid){
continue;
}
CheckValue<IkReal> x5811 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5810.value)))+(x5811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5812=IKcos(j4);
IkReal x5813=IKsin(j4);
IkReal x5814=(cj5*r00);
IkReal x5815=(cj5*r10);
IkReal x5816=(r21*sj5);
IkReal x5817=(cj5*r20);
IkReal x5818=((1.0)*x5812);
IkReal x5819=((1.0)*x5813);
IkReal x5820=(sj5*x5813);
IkReal x5821=(sj5*x5812);
evalcond[0]=((((-1.0)*x5815*x5818))+((r11*x5821))+((r12*x5813)));
evalcond[1]=(((x5813*x5816))+(((-1.0)*x5817*x5819))+(((-1.0)*r22*x5818)));
evalcond[2]=((((-1.0)*x5814*x5819))+(((-1.0)*r02*x5818))+((r01*x5820)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5818))+(((-1.0)*x5815*x5819))+((r11*x5820)));
evalcond[4]=(((cj2*sj1))+((r22*x5813))+((cj1*sj2))+(((-1.0)*x5817*x5818))+((x5812*x5816)));
evalcond[5]=((((-1.0)*x5814*x5818))+((r02*x5813))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5822=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5822;
j4eval[1]=IKsign(x5822);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5823=((1.0)*cj5);
IkReal x5824=((((-1.0)*r21*x5823))+(((-1.0)*r20*sj5)));
j4eval[0]=x5824;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5823))+((r01*sj5))))));
j4eval[2]=IKsign(x5824);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5825=cj5*cj5;
IkReal x5826=r11*r11;
IkReal x5827=(r11*sj5);
IkReal x5828=(cj5*r10);
IkReal x5829=((r12*r12)+(((-2.0)*x5827*x5828))+(((-1.0)*x5825*x5826))+((x5825*(r10*r10)))+x5826);
j4eval[0]=x5829;
j4eval[1]=IKsign(x5829);
j4eval[2]=((IKabs(r12))+(IKabs((x5827+(((-1.0)*x5828))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5830=cj5*cj5;
IkReal x5831=r11*r11;
IkReal x5832=(cj5*r10);
IkReal x5833=(r11*sj5);
CheckValue<IkReal> x5834 = IKatan2WithCheck(IkReal(((((-1.0)*x5832))+x5833)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5834.valid){
continue;
}
CheckValue<IkReal> x5835=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x5832*x5833))+(((-1.0)*x5830*x5831))+((x5830*(r10*r10)))+x5831)),-1);
if(!x5835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5834.value)+(((1.5707963267949)*(x5835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5836=IKcos(j4);
IkReal x5837=IKsin(j4);
IkReal x5838=(cj5*r00);
IkReal x5839=(cj5*r10);
IkReal x5840=(r21*sj5);
IkReal x5841=(cj5*r20);
IkReal x5842=((1.0)*x5836);
IkReal x5843=((1.0)*x5837);
IkReal x5844=(sj5*x5837);
IkReal x5845=(sj5*x5836);
evalcond[0]=(((r11*x5845))+((r12*x5837))+(((-1.0)*x5839*x5842)));
evalcond[1]=(((x5837*x5840))+(((-1.0)*x5841*x5843))+(((-1.0)*r22*x5842)));
evalcond[2]=((((-1.0)*r02*x5842))+((r01*x5844))+(((-1.0)*x5838*x5843)));
evalcond[3]=((-1.0)+((r11*x5844))+(((-1.0)*x5839*x5843))+(((-1.0)*r12*x5842)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5841*x5842))+((x5836*x5840))+((r22*x5837)));
evalcond[5]=(((r02*x5837))+(((-1.0)*sj1*sj2))+((r01*x5845))+(((-1.0)*x5838*x5842))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5846=((1.0)*cj5);
CheckValue<IkReal> x5847 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5847.valid){
continue;
}
CheckValue<IkReal> x5848=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5846))+(((-1.0)*r20*sj5)))),-1);
if(!x5848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5847.value)+(((1.5707963267949)*(x5848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5849=IKcos(j4);
IkReal x5850=IKsin(j4);
IkReal x5851=(cj5*r00);
IkReal x5852=(cj5*r10);
IkReal x5853=(r21*sj5);
IkReal x5854=(cj5*r20);
IkReal x5855=((1.0)*x5849);
IkReal x5856=((1.0)*x5850);
IkReal x5857=(sj5*x5850);
IkReal x5858=(sj5*x5849);
evalcond[0]=(((r11*x5858))+((r12*x5850))+(((-1.0)*x5852*x5855)));
evalcond[1]=((((-1.0)*x5854*x5856))+((x5850*x5853))+(((-1.0)*r22*x5855)));
evalcond[2]=(((r01*x5857))+(((-1.0)*x5851*x5856))+(((-1.0)*r02*x5855)));
evalcond[3]=((-1.0)+((r11*x5857))+(((-1.0)*r12*x5855))+(((-1.0)*x5852*x5856)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5850))+(((-1.0)*x5854*x5855))+((x5849*x5853)));
evalcond[5]=(((r01*x5858))+(((-1.0)*sj1*sj2))+((r02*x5850))+(((-1.0)*x5851*x5855))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5859 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5859.valid){
continue;
}
CheckValue<IkReal> x5860=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5859.value)+(((1.5707963267949)*(x5860.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5861=IKcos(j4);
IkReal x5862=IKsin(j4);
IkReal x5863=(cj5*r00);
IkReal x5864=(cj5*r10);
IkReal x5865=(r21*sj5);
IkReal x5866=(cj5*r20);
IkReal x5867=((1.0)*x5861);
IkReal x5868=((1.0)*x5862);
IkReal x5869=(sj5*x5862);
IkReal x5870=(sj5*x5861);
evalcond[0]=(((r11*x5870))+((r12*x5862))+(((-1.0)*x5864*x5867)));
evalcond[1]=((((-1.0)*r22*x5867))+(((-1.0)*x5866*x5868))+((x5862*x5865)));
evalcond[2]=((((-1.0)*x5863*x5868))+(((-1.0)*r02*x5867))+((r01*x5869)));
evalcond[3]=((-1.0)+((r11*x5869))+(((-1.0)*x5864*x5868))+(((-1.0)*r12*x5867)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5866*x5867))+((r22*x5862))+((x5861*x5865))+((cj1*sj2)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5863*x5867))+((r02*x5862))+((cj1*cj2))+((r01*x5870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5871=((-1.0)*r00);
IkReal x5873 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5873)==0){
continue;
}
IkReal x5872=pow(x5873,-0.5);
CheckValue<IkReal> x5874 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5871),IKFAST_ATAN2_MAGTHRESH);
if(!x5874.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5874.value));
IkReal gconst127=(r01*x5872);
IkReal gconst128=(x5871*x5872);
CheckValue<IkReal> x5875 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5875.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5875.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5876=((-1.0)*r00);
IkReal x5877=x5872;
CheckValue<IkReal> x5879 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5876),IKFAST_ATAN2_MAGTHRESH);
if(!x5879.valid){
continue;
}
IkReal x5878=((-1.0)*(x5879.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5878;
IkReal gconst126=x5878;
IkReal gconst127=(r01*x5877);
IkReal gconst128=(x5876*x5877);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5880=((1.0)*sj0);
IkReal x5881=((1.0)*gconst127);
CheckValue<IkReal> x5882 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5880))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5881))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5882.valid){
continue;
}
CheckValue<IkReal> x5883=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5881)))),-1);
if(!x5883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5882.value)+(((1.5707963267949)*(x5883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5884=IKsin(j4);
IkReal x5885=IKcos(j4);
IkReal x5886=(gconst127*r01);
IkReal x5887=(sj1*sj2);
IkReal x5888=(gconst128*r10);
IkReal x5889=(gconst128*r00);
IkReal x5890=(gconst128*r20);
IkReal x5891=((1.0)*x5885);
IkReal x5892=((1.0)*cj1*cj2);
IkReal x5893=((1.0)*x5884);
IkReal x5894=(gconst127*x5885);
IkReal x5895=(gconst127*x5884);
evalcond[0]=(((r21*x5895))+(((-1.0)*r22*x5891))+(((-1.0)*x5890*x5893)));
evalcond[1]=((((-1.0)*r12*x5891))+cj0+(((-1.0)*x5888*x5893))+((r11*x5895)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5889*x5893))+((x5884*x5886))+(((-1.0)*r02*x5891)));
evalcond[3]=(((cj2*sj1))+((r21*x5894))+((cj1*sj2))+(((-1.0)*x5890*x5891))+((r22*x5884)));
evalcond[4]=((((-1.0)*x5889*x5891))+(((-1.0)*cj0*x5892))+((cj0*x5887))+((r02*x5884))+((x5885*x5886)));
evalcond[5]=(((r12*x5884))+(((-1.0)*sj0*x5892))+(((-1.0)*x5888*x5891))+((r11*x5894))+((sj0*x5887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5896=((1.0)*gconst128);
CheckValue<IkReal> x5897 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5896))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5897.valid){
continue;
}
CheckValue<IkReal> x5898=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5896))+(((-1.0)*gconst127*r10)))),-1);
if(!x5898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5897.value)+(((1.5707963267949)*(x5898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5899=IKsin(j4);
IkReal x5900=IKcos(j4);
IkReal x5901=(gconst127*r01);
IkReal x5902=(sj1*sj2);
IkReal x5903=(gconst128*r10);
IkReal x5904=(gconst128*r00);
IkReal x5905=(gconst128*r20);
IkReal x5906=((1.0)*x5900);
IkReal x5907=((1.0)*cj1*cj2);
IkReal x5908=((1.0)*x5899);
IkReal x5909=(gconst127*x5900);
IkReal x5910=(gconst127*x5899);
evalcond[0]=((((-1.0)*r22*x5906))+(((-1.0)*x5905*x5908))+((r21*x5910)));
evalcond[1]=((((-1.0)*r12*x5906))+cj0+(((-1.0)*x5903*x5908))+((r11*x5910)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5904*x5908))+(((-1.0)*r02*x5906))+((x5899*x5901)));
evalcond[3]=(((r22*x5899))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5905*x5906))+((r21*x5909)));
evalcond[4]=((((-1.0)*cj0*x5907))+(((-1.0)*x5904*x5906))+((r02*x5899))+((cj0*x5902))+((x5900*x5901)));
evalcond[5]=(((sj0*x5902))+(((-1.0)*x5903*x5906))+(((-1.0)*sj0*x5907))+((r12*x5899))+((r11*x5909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5911=((-1.0)*r01);
IkReal x5913 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5913)==0){
continue;
}
IkReal x5912=pow(x5913,-0.5);
CheckValue<IkReal> x5914 = IKatan2WithCheck(IkReal(x5911),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5914.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5914.value))));
IkReal gconst130=(x5911*x5912);
IkReal gconst131=((1.0)*r00*x5912);
CheckValue<IkReal> x5915 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5915.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5915.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5916=((-1.0)*r01);
CheckValue<IkReal> x5919 = IKatan2WithCheck(IkReal(x5916),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5919.valid){
continue;
}
IkReal x5917=((1.0)*(x5919.value));
IkReal x5918=x5912;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5917)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5917)));
IkReal gconst130=(x5916*x5918);
IkReal gconst131=((1.0)*r00*x5918);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5920=((-1.0)*r01);
CheckValue<IkReal> x5923 = IKatan2WithCheck(IkReal(x5920),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5923.valid){
continue;
}
IkReal x5921=((1.0)*(x5923.value));
IkReal x5922=x5912;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5921)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5921)));
IkReal gconst130=(x5920*x5922);
IkReal gconst131=((1.0)*r00*x5922);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5924=((-1.0)*r01);
CheckValue<IkReal> x5927 = IKatan2WithCheck(IkReal(x5924),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5927.valid){
continue;
}
IkReal x5925=((1.0)*(x5927.value));
IkReal x5926=x5912;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5925)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5925)));
IkReal gconst130=(x5924*x5926);
IkReal gconst131=((1.0)*r00*x5926);
IkReal x5928=r02*r02;
IkReal x5929=(r12*sj0);
IkReal x5930=((1.0)*cj0);
IkReal x5931=x5912;
j4eval[0]=((IKabs((((r02*x5929*x5931))+((cj0*x5928*x5931))+(((-1.0)*x5930*x5931)))))+(IKabs(((((-1.0)*x5929))+(((-1.0)*r02*x5930))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5932=((1.0)*sj0);
IkReal x5933=((1.0)*gconst130);
CheckValue<IkReal> x5934 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5932)))),IkReal(((((-1.0)*cj0*r01*x5933))+(((-1.0)*gconst130*r11*x5932))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5934.valid){
continue;
}
CheckValue<IkReal> x5935=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x5933)))),-1);
if(!x5935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5934.value)+(((1.5707963267949)*(x5935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5936=IKsin(j4);
IkReal x5937=IKcos(j4);
IkReal x5938=(gconst131*r10);
IkReal x5939=(sj1*sj2);
IkReal x5940=(gconst131*r20);
IkReal x5941=(gconst131*r00);
IkReal x5942=((1.0)*x5937);
IkReal x5943=((1.0)*cj1*cj2);
IkReal x5944=(gconst130*x5936);
IkReal x5945=((1.0)*x5936);
IkReal x5946=(gconst130*x5937);
evalcond[0]=((((-1.0)*r22*x5942))+((r21*x5944))+(((-1.0)*x5940*x5945)));
evalcond[1]=(cj0+(((-1.0)*r12*x5942))+(((-1.0)*x5938*x5945))+((r11*x5944)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5944))+(((-1.0)*x5941*x5945))+(((-1.0)*r02*x5942)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5936))+((r21*x5946))+(((-1.0)*x5940*x5942)));
evalcond[4]=(((r01*x5946))+(((-1.0)*cj0*x5943))+(((-1.0)*x5941*x5942))+((cj0*x5939))+((r02*x5936)));
evalcond[5]=((((-1.0)*sj0*x5943))+(((-1.0)*x5938*x5942))+((r12*x5936))+((sj0*x5939))+((r11*x5946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5947=((1.0)*gconst131);
CheckValue<IkReal> x5948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5947))+(((-1.0)*gconst130*r10)))),-1);
if(!x5948.valid){
continue;
}
CheckValue<IkReal> x5949 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x5947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5948.value)))+(x5949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5950=IKsin(j4);
IkReal x5951=IKcos(j4);
IkReal x5952=(gconst131*r10);
IkReal x5953=(sj1*sj2);
IkReal x5954=(gconst131*r20);
IkReal x5955=(gconst131*r00);
IkReal x5956=((1.0)*x5951);
IkReal x5957=((1.0)*cj1*cj2);
IkReal x5958=(gconst130*x5950);
IkReal x5959=((1.0)*x5950);
IkReal x5960=(gconst130*x5951);
evalcond[0]=(((r21*x5958))+(((-1.0)*r22*x5956))+(((-1.0)*x5954*x5959)));
evalcond[1]=(cj0+((r11*x5958))+(((-1.0)*x5952*x5959))+(((-1.0)*r12*x5956)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5956))+(((-1.0)*x5955*x5959))+((r01*x5958)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5960))+(((-1.0)*x5954*x5956))+((r22*x5950)));
evalcond[4]=(((r01*x5960))+((r02*x5950))+((cj0*x5953))+(((-1.0)*cj0*x5957))+(((-1.0)*x5955*x5956)));
evalcond[5]=(((sj0*x5953))+((r12*x5950))+(((-1.0)*x5952*x5956))+((r11*x5960))+(((-1.0)*sj0*x5957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5961=((1.0)*gconst131);
CheckValue<IkReal> x5962 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5962.valid){
continue;
}
CheckValue<IkReal> x5963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5961))+(((-1.0)*gconst130*r00)))),-1);
if(!x5963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5962.value)+(((1.5707963267949)*(x5963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5964=IKsin(j4);
IkReal x5965=IKcos(j4);
IkReal x5966=(gconst131*r10);
IkReal x5967=(sj1*sj2);
IkReal x5968=(gconst131*r20);
IkReal x5969=(gconst131*r00);
IkReal x5970=((1.0)*x5965);
IkReal x5971=((1.0)*cj1*cj2);
IkReal x5972=(gconst130*x5964);
IkReal x5973=((1.0)*x5964);
IkReal x5974=(gconst130*x5965);
evalcond[0]=((((-1.0)*r22*x5970))+((r21*x5972))+(((-1.0)*x5968*x5973)));
evalcond[1]=(cj0+(((-1.0)*r12*x5970))+((r11*x5972))+(((-1.0)*x5966*x5973)));
evalcond[2]=((((-1.0)*r02*x5970))+(((-1.0)*sj0))+((r01*x5972))+(((-1.0)*x5969*x5973)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5964))+((r21*x5974))+(((-1.0)*x5968*x5970)));
evalcond[4]=(((r02*x5964))+((cj0*x5967))+((r01*x5974))+(((-1.0)*cj0*x5971))+(((-1.0)*x5969*x5970)));
evalcond[5]=((((-1.0)*sj0*x5971))+((r11*x5974))+(((-1.0)*x5966*x5970))+((r12*x5964))+((sj0*x5967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5975=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5975;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5976=((1.0)*cj5);
IkReal x5977=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5976)));
j4eval[0]=x5977;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5976))))));
j4eval[2]=IKsign(x5977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5978=cj5*cj5;
IkReal x5979=r01*r01;
IkReal x5980=(cj5*r00);
IkReal x5981=(r01*sj5);
IkReal x5982=((((-1.0)*x5978*x5979))+((x5978*(r00*r00)))+(r02*r02)+(((-2.0)*x5980*x5981))+x5979);
j4eval[0]=x5982;
j4eval[1]=IKsign(x5982);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5980))+x5981))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5983=cj5*cj5;
IkReal x5984=r01*r01;
IkReal x5985=(r01*sj5);
IkReal x5986=(cj5*r00);
CheckValue<IkReal> x5987=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5983*x5984))+(((-2.0)*x5985*x5986))+((x5983*(r00*r00)))+(r02*r02)+x5984)),-1);
if(!x5987.valid){
continue;
}
CheckValue<IkReal> x5988 = IKatan2WithCheck(IkReal(((((-1.0)*x5986))+x5985)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5987.value)))+(x5988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5989=IKcos(j4);
IkReal x5990=IKsin(j4);
IkReal x5991=(cj5*r00);
IkReal x5992=(cj5*r10);
IkReal x5993=(r21*sj5);
IkReal x5994=(cj5*r20);
IkReal x5995=((1.0)*x5989);
IkReal x5996=((1.0)*x5990);
IkReal x5997=(sj5*x5990);
IkReal x5998=(sj5*x5989);
evalcond[0]=(((r02*x5990))+(((-1.0)*x5991*x5995))+((r01*x5998)));
evalcond[1]=(((x5990*x5993))+(((-1.0)*x5994*x5996))+(((-1.0)*r22*x5995)));
evalcond[2]=((((-1.0)*x5992*x5996))+(((-1.0)*r12*x5995))+((r11*x5997)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5995))+(((-1.0)*x5991*x5996))+((r01*x5997)));
evalcond[4]=(((cj2*sj1))+((x5989*x5993))+((cj1*sj2))+(((-1.0)*x5994*x5995))+((r22*x5990)));
evalcond[5]=(((r12*x5990))+(((-1.0)*x5992*x5995))+((r11*x5998))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5999=((1.0)*cj5);
CheckValue<IkReal> x6000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5999))+(((-1.0)*r10*sj5)))),-1);
if(!x6000.valid){
continue;
}
CheckValue<IkReal> x6001 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5999))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6000.value)))+(x6001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6002=IKcos(j4);
IkReal x6003=IKsin(j4);
IkReal x6004=(cj5*r00);
IkReal x6005=(cj5*r10);
IkReal x6006=(r21*sj5);
IkReal x6007=(cj5*r20);
IkReal x6008=((1.0)*x6002);
IkReal x6009=((1.0)*x6003);
IkReal x6010=(sj5*x6003);
IkReal x6011=(sj5*x6002);
evalcond[0]=(((r01*x6011))+((r02*x6003))+(((-1.0)*x6004*x6008)));
evalcond[1]=((((-1.0)*x6007*x6009))+(((-1.0)*r22*x6008))+((x6003*x6006)));
evalcond[2]=(((r11*x6010))+(((-1.0)*r12*x6008))+(((-1.0)*x6005*x6009)));
evalcond[3]=((-1.0)+((r01*x6010))+(((-1.0)*x6004*x6009))+(((-1.0)*r02*x6008)));
evalcond[4]=(((cj2*sj1))+((r22*x6003))+((cj1*sj2))+(((-1.0)*x6007*x6008))+((x6002*x6006)));
evalcond[5]=(((r12*x6003))+((r11*x6011))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6005*x6008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6012=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6012.valid){
continue;
}
CheckValue<IkReal> x6013 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6012.value)))+(x6013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6014=IKcos(j4);
IkReal x6015=IKsin(j4);
IkReal x6016=(cj5*r00);
IkReal x6017=(cj5*r10);
IkReal x6018=(r21*sj5);
IkReal x6019=(cj5*r20);
IkReal x6020=((1.0)*x6014);
IkReal x6021=((1.0)*x6015);
IkReal x6022=(sj5*x6015);
IkReal x6023=(sj5*x6014);
evalcond[0]=(((r01*x6023))+((r02*x6015))+(((-1.0)*x6016*x6020)));
evalcond[1]=((((-1.0)*r22*x6020))+(((-1.0)*x6019*x6021))+((x6015*x6018)));
evalcond[2]=((((-1.0)*x6017*x6021))+((r11*x6022))+(((-1.0)*r12*x6020)));
evalcond[3]=((-1.0)+((r01*x6022))+(((-1.0)*r02*x6020))+(((-1.0)*x6016*x6021)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6019*x6020))+((r22*x6015))+((x6014*x6018)));
evalcond[5]=(((r12*x6015))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6017*x6020))+((r11*x6023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6024=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6024;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6025=((1.0)*cj5);
IkReal x6026=((((-1.0)*r21*x6025))+(((-1.0)*r20*sj5)));
j4eval[0]=x6026;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6025))+((r11*sj5))))));
j4eval[2]=IKsign(x6026);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6027=(r01*sj5);
IkReal x6028=(cj1*sj2);
IkReal x6029=(cj2*sj1);
IkReal x6030=((1.0)*r02);
IkReal x6031=((1.0)*cj5*r00);
IkReal x6032=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6032;
j4eval[1]=((IKabs(((((-1.0)*x6029*x6030))+(((-1.0)*x6028*x6030)))))+(IKabs(((((-1.0)*x6029*x6031))+((x6027*x6029))+((x6027*x6028))+(((-1.0)*x6028*x6031))))));
j4eval[2]=IKsign(x6032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6033=(r01*sj5);
IkReal x6034=(cj1*sj2);
IkReal x6035=(cj2*sj1);
IkReal x6036=((1.0)*r02);
IkReal x6037=((1.0)*cj5*r00);
CheckValue<IkReal> x6038 = IKatan2WithCheck(IkReal(((((-1.0)*x6035*x6037))+((x6033*x6035))+((x6033*x6034))+(((-1.0)*x6034*x6037)))),IkReal(((((-1.0)*x6035*x6036))+(((-1.0)*x6034*x6036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6038.valid){
continue;
}
CheckValue<IkReal> x6039=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6038.value)+(((1.5707963267949)*(x6039.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6040=IKcos(j4);
IkReal x6041=IKsin(j4);
IkReal x6042=(cj5*r00);
IkReal x6043=(cj5*r10);
IkReal x6044=(r21*sj5);
IkReal x6045=(cj5*r20);
IkReal x6046=((1.0)*x6040);
IkReal x6047=((1.0)*x6041);
IkReal x6048=(sj5*x6041);
IkReal x6049=(sj5*x6040);
evalcond[0]=((((-1.0)*x6042*x6046))+((r02*x6041))+((r01*x6049)));
evalcond[1]=(((x6041*x6044))+(((-1.0)*r22*x6046))+(((-1.0)*x6045*x6047)));
evalcond[2]=(((r11*x6048))+(((-1.0)*x6043*x6047))+(((-1.0)*r12*x6046)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6046))+(((-1.0)*x6042*x6047))+((r01*x6048)));
evalcond[4]=(((x6040*x6044))+((cj2*sj1))+((cj1*sj2))+((r22*x6041))+(((-1.0)*x6045*x6046)));
evalcond[5]=(((r11*x6049))+(((-1.0)*sj1*sj2))+(((-1.0)*x6043*x6046))+((cj1*cj2))+((r12*x6041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6050=((1.0)*cj5);
CheckValue<IkReal> x6051 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6050))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6051.valid){
continue;
}
CheckValue<IkReal> x6052=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6050))+(((-1.0)*r20*sj5)))),-1);
if(!x6052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6051.value)+(((1.5707963267949)*(x6052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6053=IKcos(j4);
IkReal x6054=IKsin(j4);
IkReal x6055=(cj5*r00);
IkReal x6056=(cj5*r10);
IkReal x6057=(r21*sj5);
IkReal x6058=(cj5*r20);
IkReal x6059=((1.0)*x6053);
IkReal x6060=((1.0)*x6054);
IkReal x6061=(sj5*x6054);
IkReal x6062=(sj5*x6053);
evalcond[0]=(((r01*x6062))+(((-1.0)*x6055*x6059))+((r02*x6054)));
evalcond[1]=((((-1.0)*r22*x6059))+(((-1.0)*x6058*x6060))+((x6054*x6057)));
evalcond[2]=((((-1.0)*r12*x6059))+((r11*x6061))+(((-1.0)*x6056*x6060)));
evalcond[3]=((1.0)+(((-1.0)*x6055*x6060))+((r01*x6061))+(((-1.0)*r02*x6059)));
evalcond[4]=(((cj2*sj1))+((r22*x6054))+(((-1.0)*x6058*x6059))+((cj1*sj2))+((x6053*x6057)));
evalcond[5]=(((r12*x6054))+(((-1.0)*sj1*sj2))+(((-1.0)*x6056*x6059))+((r11*x6062))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6063 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6063.valid){
continue;
}
CheckValue<IkReal> x6064=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6063.value)+(((1.5707963267949)*(x6064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6065=IKcos(j4);
IkReal x6066=IKsin(j4);
IkReal x6067=(cj5*r00);
IkReal x6068=(cj5*r10);
IkReal x6069=(r21*sj5);
IkReal x6070=(cj5*r20);
IkReal x6071=((1.0)*x6065);
IkReal x6072=((1.0)*x6066);
IkReal x6073=(sj5*x6066);
IkReal x6074=(sj5*x6065);
evalcond[0]=(((r01*x6074))+(((-1.0)*x6067*x6071))+((r02*x6066)));
evalcond[1]=(((x6066*x6069))+(((-1.0)*r22*x6071))+(((-1.0)*x6070*x6072)));
evalcond[2]=(((r11*x6073))+(((-1.0)*r12*x6071))+(((-1.0)*x6068*x6072)));
evalcond[3]=((1.0)+((r01*x6073))+(((-1.0)*x6067*x6072))+(((-1.0)*r02*x6071)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6066))+((x6065*x6069))+(((-1.0)*x6070*x6071)));
evalcond[5]=(((r11*x6074))+(((-1.0)*sj1*sj2))+(((-1.0)*x6068*x6071))+((r12*x6066))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6075=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6075);
rxp1_1=(px*r21);
rxp1_2=(r11*x6075);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6076=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6076);
rxp1_1=(px*r21);
rxp1_2=(r11*x6076);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6077=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6077);
rxp1_1=(px*r21);
rxp1_2=(r11*x6077);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6080=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6080.valid){
continue;
}
IkReal x6078=x6080.value;
IkReal x6079=(sj0*x6078);
cj4array[0]=((((-1.0)*sj1*sj2*x6079))+((cj1*cj2*x6079)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6081=IKsin(j4);
IkReal x6082=IKcos(j4);
IkReal x6083=(r21*sj5);
IkReal x6084=((1.0)*cj5*r20);
evalcond[0]=(r02*x6081);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6082)));
evalcond[2]=(((x6081*x6083))+(((-1.0)*x6081*x6084)));
evalcond[3]=((((-1.0)*cj5*r10*x6081))+((r11*sj5*x6081)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6082*x6084))+((x6082*x6083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6087=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6087.valid){
continue;
}
IkReal x6085=x6087.value;
IkReal x6086=((1.0)*x6085);
cj4array[0]=((((-1.0)*cj1*sj2*x6086))+(((-1.0)*cj2*sj1*x6086)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6088=IKsin(j4);
IkReal x6089=IKcos(j4);
IkReal x6090=((1.0)*sj0);
IkReal x6091=((1.0)*cj5);
IkReal x6092=(sj5*x6088);
evalcond[0]=(r02*x6088);
evalcond[1]=((((-1.0)*x6090))+(((-1.0)*r02*x6089)));
evalcond[2]=((((-1.0)*r20*x6088*x6091))+((r21*x6092)));
evalcond[3]=((((-1.0)*r10*x6088*x6091))+((r11*x6092)));
evalcond[4]=((((-1.0)*cj1*cj2*x6090))+((sj0*sj1*sj2))+((r11*sj5*x6089))+(((-1.0)*r10*x6089*x6091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6093=IKPowWithIntegerCheck(r02,-1);
if(!x6093.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6093.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6094=IKsin(j4);
IkReal x6095=IKcos(j4);
IkReal x6096=(r21*sj5);
IkReal x6097=((1.0)*cj5);
IkReal x6098=(r11*sj5);
evalcond[0]=(r02*x6094);
evalcond[1]=(((x6094*x6096))+(((-1.0)*r20*x6094*x6097)));
evalcond[2]=((((-1.0)*r10*x6094*x6097))+((x6094*x6098)));
evalcond[3]=(((x6095*x6096))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6095*x6097)));
evalcond[4]=(((x6095*x6098))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r10*x6095*x6097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6099=((1.0)*sj0);
IkReal x6100=((1.0)*cj0);
CheckValue<IkReal> x6101 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6100))+(((-1.0)*r12*x6099)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6100))+(((-1.0)*r11*sj5*x6099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6101.valid){
continue;
}
CheckValue<IkReal> x6102=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6101.value)+(((1.5707963267949)*(x6102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6103=IKsin(j4);
IkReal x6104=IKcos(j4);
IkReal x6105=(cj5*r00);
IkReal x6106=(cj5*r10);
IkReal x6107=(r21*sj5);
IkReal x6108=(sj1*sj2);
IkReal x6109=(cj5*r20);
IkReal x6110=((1.0)*x6104);
IkReal x6111=((1.0)*cj1*cj2);
IkReal x6112=((1.0)*x6103);
IkReal x6113=(sj5*x6103);
IkReal x6114=(sj5*x6104);
evalcond[0]=(((x6103*x6107))+(((-1.0)*r22*x6110))+(((-1.0)*x6109*x6112)));
evalcond[1]=(cj0+(((-1.0)*r12*x6110))+(((-1.0)*x6106*x6112))+((r11*x6113)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6105*x6112))+(((-1.0)*r02*x6110))+((r01*x6113)));
evalcond[3]=(((x6104*x6107))+((cj2*sj1))+((r22*x6103))+(((-1.0)*x6109*x6110))+((cj1*sj2)));
evalcond[4]=(((cj0*x6108))+(((-1.0)*cj0*x6111))+(((-1.0)*x6105*x6110))+((r01*x6114))+((r02*x6103)));
evalcond[5]=(((sj0*x6108))+(((-1.0)*x6106*x6110))+(((-1.0)*sj0*x6111))+((r11*x6114))+((r12*x6103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6115=((1.0)*cj5);
CheckValue<IkReal> x6116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6115)))),-1);
if(!x6116.valid){
continue;
}
CheckValue<IkReal> x6117 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6116.value)))+(x6117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6118=IKsin(j4);
IkReal x6119=IKcos(j4);
IkReal x6120=(cj5*r00);
IkReal x6121=(cj5*r10);
IkReal x6122=(r21*sj5);
IkReal x6123=(sj1*sj2);
IkReal x6124=(cj5*r20);
IkReal x6125=((1.0)*x6119);
IkReal x6126=((1.0)*cj1*cj2);
IkReal x6127=((1.0)*x6118);
IkReal x6128=(sj5*x6118);
IkReal x6129=(sj5*x6119);
evalcond[0]=(((x6118*x6122))+(((-1.0)*x6124*x6127))+(((-1.0)*r22*x6125)));
evalcond[1]=(cj0+(((-1.0)*x6121*x6127))+(((-1.0)*r12*x6125))+((r11*x6128)));
evalcond[2]=(((r01*x6128))+(((-1.0)*sj0))+(((-1.0)*r02*x6125))+(((-1.0)*x6120*x6127)));
evalcond[3]=(((cj2*sj1))+((x6119*x6122))+(((-1.0)*x6124*x6125))+((cj1*sj2))+((r22*x6118)));
evalcond[4]=(((r01*x6129))+((r02*x6118))+((cj0*x6123))+(((-1.0)*cj0*x6126))+(((-1.0)*x6120*x6125)));
evalcond[5]=((((-1.0)*sj0*x6126))+((sj0*x6123))+(((-1.0)*x6121*x6125))+((r12*x6118))+((r11*x6129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6130=((1.0)*cj5);
CheckValue<IkReal> x6131 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6130)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6131.valid){
continue;
}
CheckValue<IkReal> x6132=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6130)))),-1);
if(!x6132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6131.value)+(((1.5707963267949)*(x6132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6133=IKsin(j4);
IkReal x6134=IKcos(j4);
IkReal x6135=(cj5*r00);
IkReal x6136=(cj5*r10);
IkReal x6137=(r21*sj5);
IkReal x6138=(sj1*sj2);
IkReal x6139=(cj5*r20);
IkReal x6140=((1.0)*x6134);
IkReal x6141=((1.0)*cj1*cj2);
IkReal x6142=((1.0)*x6133);
IkReal x6143=(sj5*x6133);
IkReal x6144=(sj5*x6134);
evalcond[0]=((((-1.0)*x6139*x6142))+((x6133*x6137))+(((-1.0)*r22*x6140)));
evalcond[1]=(cj0+(((-1.0)*x6136*x6142))+((r11*x6143))+(((-1.0)*r12*x6140)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6140))+((r01*x6143))+(((-1.0)*x6135*x6142)));
evalcond[3]=((((-1.0)*x6139*x6140))+((cj2*sj1))+((r22*x6133))+((cj1*sj2))+((x6134*x6137)));
evalcond[4]=(((cj0*x6138))+((r01*x6144))+((r02*x6133))+(((-1.0)*x6135*x6140))+(((-1.0)*cj0*x6141)));
evalcond[5]=((((-1.0)*x6136*x6140))+(((-1.0)*sj0*x6141))+((r11*x6144))+((r12*x6133))+((sj0*x6138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6145=r21*r21;
IkReal x6146=cj5*cj5;
IkReal x6147=(cj2*sj1);
IkReal x6148=(cj1*sj2);
IkReal x6149=(r21*sj5);
IkReal x6150=((1.0)*cj5*r20);
CheckValue<IkReal> x6151 = IKatan2WithCheck(IkReal((((r22*x6147))+((r22*x6148)))),IkReal(((((-1.0)*x6147*x6150))+((x6148*x6149))+((x6147*x6149))+(((-1.0)*x6148*x6150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6151.valid){
continue;
}
CheckValue<IkReal> x6152=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*r20*x6149))+(((-1.0)*x6146*(r20*r20)))+((x6145*x6146))+(((-1.0)*x6145))+(((-1.0)*(r22*r22))))),-1);
if(!x6152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6151.value)+(((1.5707963267949)*(x6152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6153=IKsin(j4);
IkReal x6154=IKcos(j4);
IkReal x6155=(r21*sj5);
IkReal x6156=(cj5*r20);
IkReal x6157=((1.0)*x6154);
evalcond[0]=(((x6153*x6155))+(((-1.0)*x6153*x6156))+(((-1.0)*r22*x6157)));
evalcond[1]=(((r22*x6153))+((cj2*sj1))+((x6154*x6155))+((cj1*sj2))+(((-1.0)*x6156*x6157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6158=(cj5*sj4);
IkReal x6159=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x6158))+(((-1.0)*cj4*r02))+((r01*x6159)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x6159))+((r10*x6158))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x6158))+(((-1.0)*cj4*r02))+((r01*x6159))))+IKsqr(((((-1.0)*r11*x6159))+((r10*x6158))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x6158))+(((-1.0)*cj4*r02))+((r01*x6159))), ((((-1.0)*r11*x6159))+((r10*x6158))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6160=IKcos(j0);
IkReal x6161=IKsin(j0);
IkReal x6162=(cj5*r01);
IkReal x6163=(r11*sj5);
IkReal x6164=((0.1157)*sj5);
IkReal x6165=((1.0)*cj2);
IkReal x6166=((0.5723)*sj2);
IkReal x6167=(cj5*r11);
IkReal x6168=((1.0)*cj4);
IkReal x6169=(r01*sj5);
IkReal x6170=((0.5723)*cj2);
IkReal x6171=((1.0)*cj1*sj2);
IkReal x6172=(cj5*x6168);
IkReal x6173=(sj1*x6160);
IkReal x6174=(cj1*x6161);
IkReal x6175=((1.0)*cj5*sj4);
IkReal x6176=(cj1*x6160);
IkReal x6177=(sj1*x6161);
evalcond[0]=(x6160+(((-1.0)*r12*x6168))+((sj4*x6163))+(((-1.0)*r10*x6175)));
evalcond[1]=((((-1.0)*x6161))+(((-1.0)*r02*x6168))+((sj4*x6169))+(((-1.0)*r00*x6175)));
evalcond[2]=(((r00*sj5))+x6162+(((-1.0)*x6165*x6173))+(((-1.0)*x6160*x6171)));
evalcond[3]=(((r10*sj5))+x6167+(((-1.0)*x6161*x6171))+(((-1.0)*x6165*x6177)));
evalcond[4]=(((sj2*x6173))+((r02*sj4))+(((-1.0)*r00*x6172))+((cj4*x6169))+(((-1.0)*x6165*x6176)));
evalcond[5]=(((sj2*x6177))+((r12*sj4))+((cj4*x6163))+(((-1.0)*x6165*x6174))+(((-1.0)*r10*x6172)));
evalcond[6]=((((-0.16394)*x6161))+(((-1.0)*x6166*x6173))+(((-1.0)*px))+(((0.612)*x6176))+((x6170*x6176))+(((-1.0)*r00*x6164))+(((-0.1157)*x6162)));
evalcond[7]=((((-1.0)*x6166*x6177))+(((-1.0)*py))+(((0.16394)*x6160))+(((0.612)*x6174))+((x6170*x6174))+(((-0.1157)*x6167))+(((-1.0)*r10*x6164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6178=((1.0)*cj5);
IkReal x6179=((1.0)*sj5);
CheckValue<IkReal> x6180 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6178))+(((-1.0)*r10*x6179)))),IkReal(((((-1.0)*r00*x6179))+(((-1.0)*r01*x6178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6180.valid){
continue;
}
CheckValue<IkReal> x6181=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6181.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6180.value)+(((1.5707963267949)*(x6181.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6182=IKcos(j0);
IkReal x6183=IKsin(j0);
IkReal x6184=(cj5*r01);
IkReal x6185=((0.1157)*sj5);
IkReal x6186=((1.0)*sj1);
IkReal x6187=(cj5*r11);
IkReal x6188=((1.0)*cj1*sj2);
IkReal x6189=((0.5723)*sj1*sj2);
IkReal x6190=(cj2*x6182);
IkReal x6191=(cj1*x6183);
evalcond[0]=((((-1.0)*x6186*x6190))+((r00*sj5))+(((-1.0)*x6182*x6188))+x6184);
evalcond[1]=((((-1.0)*cj2*x6183*x6186))+((r10*sj5))+x6187+(((-1.0)*x6183*x6188)));
evalcond[2]=((((-1.0)*x6182*x6189))+(((-0.1157)*x6184))+(((-1.0)*r00*x6185))+(((0.612)*cj1*x6182))+(((-1.0)*px))+(((-0.16394)*x6183))+(((0.5723)*cj1*x6190)));
evalcond[3]=((((0.5723)*cj2*x6191))+(((-0.1157)*x6187))+(((0.16394)*x6182))+(((-1.0)*py))+(((-1.0)*x6183*x6189))+(((-1.0)*r10*x6185))+(((0.612)*x6191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6192=((1.0)*cj5);
IkReal x6193=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6192)));
j4eval[0]=x6193;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6192)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6194=((1.0)*cj5);
IkReal x6195=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6194)));
j4eval[0]=x6195;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6194))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6195);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6196=((1.0)*sj0);
IkReal x6197=((1.0)*cj0);
IkReal x6198=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6198;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6197))+(((-1.0)*r11*sj5*x6196)))))+(IKabs(((((-1.0)*r12*x6196))+(((-1.0)*r02*x6197))))));
j4eval[2]=IKsign(x6198);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6199=((-1.0)*r20);
IkReal x6201 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6201)==0){
continue;
}
IkReal x6200=pow(x6201,-0.5);
CheckValue<IkReal> x6202 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6199),IKFAST_ATAN2_MAGTHRESH);
if(!x6202.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6202.value));
IkReal gconst115=(r21*x6200);
IkReal gconst116=(x6199*x6200);
CheckValue<IkReal> x6203 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6203.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6203.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6204=((-1.0)*r20);
IkReal x6205=x6200;
CheckValue<IkReal> x6207 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6204),IKFAST_ATAN2_MAGTHRESH);
if(!x6207.valid){
continue;
}
IkReal x6206=((-1.0)*(x6207.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6206;
IkReal gconst114=x6206;
IkReal gconst115=(r21*x6205);
IkReal gconst116=(x6204*x6205);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6208=((-1.0)*r20);
IkReal x6209=x6200;
CheckValue<IkReal> x6211 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6208),IKFAST_ATAN2_MAGTHRESH);
if(!x6211.valid){
continue;
}
IkReal x6210=((-1.0)*(x6211.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6210;
IkReal gconst114=x6210;
IkReal gconst115=(r21*x6209);
IkReal gconst116=(x6208*x6209);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6212=((-1.0)*r20);
IkReal x6213=x6200;
CheckValue<IkReal> x6215 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6212),IKFAST_ATAN2_MAGTHRESH);
if(!x6215.valid){
continue;
}
IkReal x6214=((-1.0)*(x6215.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6214;
IkReal gconst114=x6214;
IkReal gconst115=(r21*x6213);
IkReal gconst116=(x6212*x6213);
IkReal x6216=((1.0)*(r22*r22));
CheckValue<IkReal> x6220=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6216))),-1);
if(!x6220.valid){
continue;
}
IkReal x6217=x6220.value;
IkReal x6218=((1.0)*x6217);
IkReal x6219=((((-1.0)*x6218*(r20*r20*r20*r20)))+(((-1.0)*x6218*(r21*r21*r21*r21)))+(((-1.0)*x6216))+(((-2.0)*x6217*(r20*r20)*(r21*r21))));
j4eval[0]=x6219;
j4eval[1]=IKsign(x6219);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6221=(cj2*sj1);
IkReal x6222=(gconst115*r21);
IkReal x6223=(cj1*sj2);
IkReal x6224=((1.0)*gconst116*r20);
CheckValue<IkReal> x6225=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x6224))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x6222))+(((-1.0)*(x6222*x6222))))),-1);
if(!x6225.valid){
continue;
}
CheckValue<IkReal> x6226 = IKatan2WithCheck(IkReal((((r22*x6223))+((r22*x6221)))),IkReal((((x6222*x6223))+((x6221*x6222))+(((-1.0)*x6223*x6224))+(((-1.0)*x6221*x6224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6225.value)))+(x6226.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6227=IKsin(j4);
IkReal x6228=IKcos(j4);
IkReal x6229=(sj1*sj2);
IkReal x6230=((1.0)*x6228);
IkReal x6231=((1.0)*cj1*cj2);
IkReal x6232=(gconst115*x6227);
IkReal x6233=(gconst115*x6228);
IkReal x6234=((1.0)*gconst116*x6227);
evalcond[0]=(((r21*x6232))+(((-1.0)*r20*x6234))+(((-1.0)*r22*x6230)));
evalcond[1]=((((-1.0)*r12*x6230))+(((-1.0)*r10*x6234))+cj0+((r11*x6232)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6234))+((r01*x6232))+(((-1.0)*r02*x6230)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6233))+((r22*x6227))+(((-1.0)*gconst116*r20*x6230)));
evalcond[4]=(((r02*x6227))+(((-1.0)*cj0*x6231))+((r01*x6233))+((cj0*x6229))+(((-1.0)*gconst116*r00*x6230)));
evalcond[5]=((((-1.0)*gconst116*r10*x6230))+(((-1.0)*sj0*x6231))+((r12*x6227))+((sj0*x6229))+((r11*x6233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6235=((1.0)*gconst116);
CheckValue<IkReal> x6236 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x6235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6236.valid){
continue;
}
CheckValue<IkReal> x6237=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6235))+(((-1.0)*gconst115*r10)))),-1);
if(!x6237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6236.value)+(((1.5707963267949)*(x6237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6238=IKsin(j4);
IkReal x6239=IKcos(j4);
IkReal x6240=(sj1*sj2);
IkReal x6241=((1.0)*x6239);
IkReal x6242=((1.0)*cj1*cj2);
IkReal x6243=(gconst115*x6238);
IkReal x6244=(gconst115*x6239);
IkReal x6245=((1.0)*gconst116*x6238);
evalcond[0]=(((r21*x6243))+(((-1.0)*r20*x6245))+(((-1.0)*r22*x6241)));
evalcond[1]=(cj0+((r11*x6243))+(((-1.0)*r10*x6245))+(((-1.0)*r12*x6241)));
evalcond[2]=((((-1.0)*r02*x6241))+(((-1.0)*sj0))+(((-1.0)*r00*x6245))+((r01*x6243)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6241))+((cj1*sj2))+((r22*x6238))+((r21*x6244)));
evalcond[4]=(((r02*x6238))+(((-1.0)*cj0*x6242))+((cj0*x6240))+(((-1.0)*gconst116*r00*x6241))+((r01*x6244)));
evalcond[5]=(((r12*x6238))+((r11*x6244))+(((-1.0)*sj0*x6242))+(((-1.0)*gconst116*r10*x6241))+((sj0*x6240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6246=((1.0)*gconst116);
CheckValue<IkReal> x6247=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6246))+(((-1.0)*gconst115*r00)))),-1);
if(!x6247.valid){
continue;
}
CheckValue<IkReal> x6248 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6247.value)))+(x6248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6249=IKsin(j4);
IkReal x6250=IKcos(j4);
IkReal x6251=(sj1*sj2);
IkReal x6252=((1.0)*x6250);
IkReal x6253=((1.0)*cj1*cj2);
IkReal x6254=(gconst115*x6249);
IkReal x6255=(gconst115*x6250);
IkReal x6256=((1.0)*gconst116*x6249);
evalcond[0]=(((r21*x6254))+(((-1.0)*r22*x6252))+(((-1.0)*r20*x6256)));
evalcond[1]=(cj0+(((-1.0)*r12*x6252))+(((-1.0)*r10*x6256))+((r11*x6254)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6254))+(((-1.0)*r02*x6252))+(((-1.0)*r00*x6256)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6255))+(((-1.0)*gconst116*r20*x6252))+((r22*x6249)));
evalcond[4]=(((r01*x6255))+((r02*x6249))+(((-1.0)*gconst116*r00*x6252))+(((-1.0)*cj0*x6253))+((cj0*x6251)));
evalcond[5]=(((sj0*x6251))+((r12*x6249))+(((-1.0)*sj0*x6253))+((r11*x6255))+(((-1.0)*gconst116*r10*x6252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6257=((-1.0)*r21);
IkReal x6259 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6259)==0){
continue;
}
IkReal x6258=pow(x6259,-0.5);
CheckValue<IkReal> x6260 = IKatan2WithCheck(IkReal(x6257),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6260.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6260.value))));
IkReal gconst118=(x6257*x6258);
IkReal gconst119=((1.0)*r20*x6258);
CheckValue<IkReal> x6261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6261.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6261.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6262=((-1.0)*r21);
CheckValue<IkReal> x6265 = IKatan2WithCheck(IkReal(x6262),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6265.valid){
continue;
}
IkReal x6263=((1.0)*(x6265.value));
IkReal x6264=x6258;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6263)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6263)));
IkReal gconst118=(x6262*x6264);
IkReal gconst119=((1.0)*r20*x6264);
IkReal x6266=r22*r22;
IkReal x6267=((1.0)*x6266);
CheckValue<IkReal> x6271=IKPowWithIntegerCheck(((-1.0)+x6266),-1);
if(!x6271.valid){
continue;
}
IkReal x6268=x6271.value;
if((((1.0)+(((-1.0)*x6267)))) < -0.00001)
continue;
IkReal x6269=IKsqrt(((1.0)+(((-1.0)*x6267))));
IkReal x6270=(cj0*x6268*x6269);
j4eval[0]=((IKabs(((((-1.0)*x6267*x6270))+x6270)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6272=((-1.0)*r21);
CheckValue<IkReal> x6275 = IKatan2WithCheck(IkReal(x6272),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6275.valid){
continue;
}
IkReal x6273=((1.0)*(x6275.value));
IkReal x6274=x6258;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6273)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6273)));
IkReal gconst118=(x6272*x6274);
IkReal gconst119=((1.0)*r20*x6274);
IkReal x6276=r22*r22;
IkReal x6277=((1.0)*x6276);
CheckValue<IkReal> x6281=IKPowWithIntegerCheck(((-1.0)+x6276),-1);
if(!x6281.valid){
continue;
}
IkReal x6278=x6281.value;
if((((1.0)+(((-1.0)*x6277)))) < -0.00001)
continue;
IkReal x6279=IKsqrt(((1.0)+(((-1.0)*x6277))));
IkReal x6280=(sj0*x6278*x6279);
j4eval[0]=((IKabs((x6280+(((-1.0)*x6277*x6280)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6282=((-1.0)*r21);
CheckValue<IkReal> x6285 = IKatan2WithCheck(IkReal(x6282),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6285.valid){
continue;
}
IkReal x6283=((1.0)*(x6285.value));
IkReal x6284=x6258;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6283)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6283)));
IkReal gconst118=(x6282*x6284);
IkReal gconst119=((1.0)*r20*x6284);
IkReal x6286=r22*r22;
IkReal x6287=(r12*sj0);
IkReal x6288=(cj0*r02);
CheckValue<IkReal> x6292=IKPowWithIntegerCheck(((-1.0)+x6286),-1);
if(!x6292.valid){
continue;
}
IkReal x6289=x6292.value;
if((((1.0)+(((-1.0)*x6286)))) < -0.00001)
continue;
IkReal x6290=IKsqrt(((1.0)+(((-1.0)*x6286))));
IkReal x6291=(r22*x6289*x6290);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6288))+(((-1.0)*x6287)))))+(IKabs((((x6288*x6291))+((x6287*x6291))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6293=((1.0)*sj0);
IkReal x6294=((1.0)*gconst118);
CheckValue<IkReal> x6295 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6293)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6293))+((cj0*gconst119*r00))+(((-1.0)*cj0*r01*x6294)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6295.valid){
continue;
}
CheckValue<IkReal> x6296=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6294)))),-1);
if(!x6296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6295.value)+(((1.5707963267949)*(x6296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6297=IKsin(j4);
IkReal x6298=IKcos(j4);
IkReal x6299=(gconst118*r01);
IkReal x6300=(sj1*sj2);
IkReal x6301=(gconst119*r20);
IkReal x6302=(gconst119*r10);
IkReal x6303=(gconst119*r00);
IkReal x6304=(gconst118*r21);
IkReal x6305=(gconst118*r11);
IkReal x6306=((1.0)*x6298);
IkReal x6307=((1.0)*cj1*cj2);
IkReal x6308=((1.0)*x6297);
evalcond[0]=(((x6297*x6304))+(((-1.0)*r22*x6306))+(((-1.0)*x6301*x6308)));
evalcond[1]=((((-1.0)*x6302*x6308))+cj0+(((-1.0)*r12*x6306))+((x6297*x6305)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6306))+(((-1.0)*x6303*x6308))+((x6297*x6299)));
evalcond[3]=(((cj2*sj1))+((r22*x6297))+((cj1*sj2))+((x6298*x6304))+(((-1.0)*x6301*x6306)));
evalcond[4]=(((x6298*x6299))+((cj0*x6300))+(((-1.0)*x6303*x6306))+((r02*x6297))+(((-1.0)*cj0*x6307)));
evalcond[5]=((((-1.0)*x6302*x6306))+(((-1.0)*sj0*x6307))+((r12*x6297))+((x6298*x6305))+((sj0*x6300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6309=((1.0)*gconst119);
CheckValue<IkReal> x6310=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6309))+(((-1.0)*gconst118*r10)))),-1);
if(!x6310.valid){
continue;
}
CheckValue<IkReal> x6311 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x6309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6310.value)))+(x6311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6312=IKsin(j4);
IkReal x6313=IKcos(j4);
IkReal x6314=(gconst118*r01);
IkReal x6315=(sj1*sj2);
IkReal x6316=(gconst119*r20);
IkReal x6317=(gconst119*r10);
IkReal x6318=(gconst119*r00);
IkReal x6319=(gconst118*r21);
IkReal x6320=(gconst118*r11);
IkReal x6321=((1.0)*x6313);
IkReal x6322=((1.0)*cj1*cj2);
IkReal x6323=((1.0)*x6312);
evalcond[0]=(((x6312*x6319))+(((-1.0)*x6316*x6323))+(((-1.0)*r22*x6321)));
evalcond[1]=(cj0+(((-1.0)*x6317*x6323))+((x6312*x6320))+(((-1.0)*r12*x6321)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6318*x6323))+((x6312*x6314))+(((-1.0)*r02*x6321)));
evalcond[3]=(((cj2*sj1))+((x6313*x6319))+((cj1*sj2))+((r22*x6312))+(((-1.0)*x6316*x6321)));
evalcond[4]=(((x6313*x6314))+(((-1.0)*x6318*x6321))+(((-1.0)*cj0*x6322))+((r02*x6312))+((cj0*x6315)));
evalcond[5]=((((-1.0)*sj0*x6322))+((x6313*x6320))+(((-1.0)*x6317*x6321))+((r12*x6312))+((sj0*x6315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6324=((1.0)*gconst119);
CheckValue<IkReal> x6325 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6325.valid){
continue;
}
CheckValue<IkReal> x6326=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6324))+(((-1.0)*gconst118*r00)))),-1);
if(!x6326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6325.value)+(((1.5707963267949)*(x6326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6327=IKsin(j4);
IkReal x6328=IKcos(j4);
IkReal x6329=(gconst118*r01);
IkReal x6330=(sj1*sj2);
IkReal x6331=(gconst119*r20);
IkReal x6332=(gconst119*r10);
IkReal x6333=(gconst119*r00);
IkReal x6334=(gconst118*r21);
IkReal x6335=(gconst118*r11);
IkReal x6336=((1.0)*x6328);
IkReal x6337=((1.0)*cj1*cj2);
IkReal x6338=((1.0)*x6327);
evalcond[0]=(((x6327*x6334))+(((-1.0)*x6331*x6338))+(((-1.0)*r22*x6336)));
evalcond[1]=((((-1.0)*r12*x6336))+cj0+((x6327*x6335))+(((-1.0)*x6332*x6338)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6333*x6338))+((x6327*x6329))+(((-1.0)*r02*x6336)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6331*x6336))+((x6328*x6334))+((r22*x6327)));
evalcond[4]=(((r02*x6327))+(((-1.0)*x6333*x6336))+(((-1.0)*cj0*x6337))+((x6328*x6329))+((cj0*x6330)));
evalcond[5]=(((sj0*x6330))+((r12*x6327))+((x6328*x6335))+(((-1.0)*sj0*x6337))+(((-1.0)*x6332*x6336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6339=((-1.0)*r10);
IkReal x6341 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6341)==0){
continue;
}
IkReal x6340=pow(x6341,-0.5);
CheckValue<IkReal> x6342 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6339),IKFAST_ATAN2_MAGTHRESH);
if(!x6342.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6342.value));
IkReal gconst121=(r11*x6340);
IkReal gconst122=(x6339*x6340);
CheckValue<IkReal> x6343 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6343.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6343.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6344=((-1.0)*r10);
IkReal x6345=x6340;
CheckValue<IkReal> x6347 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6344),IKFAST_ATAN2_MAGTHRESH);
if(!x6347.valid){
continue;
}
IkReal x6346=((-1.0)*(x6347.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6346;
IkReal gconst120=x6346;
IkReal gconst121=(r11*x6345);
IkReal gconst122=(x6344*x6345);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6348=((1.0)*sj0);
IkReal x6349=((1.0)*gconst121);
CheckValue<IkReal> x6350 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6348)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x6348))+(((-1.0)*cj0*r01*x6349))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6350.valid){
continue;
}
CheckValue<IkReal> x6351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6349))+(((-1.0)*gconst122*r21)))),-1);
if(!x6351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6350.value)+(((1.5707963267949)*(x6351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6352=IKsin(j4);
IkReal x6353=IKcos(j4);
IkReal x6354=(gconst121*r11);
IkReal x6355=(sj1*sj2);
IkReal x6356=(gconst122*r00);
IkReal x6357=(gconst122*r10);
IkReal x6358=(gconst122*r20);
IkReal x6359=((1.0)*x6353);
IkReal x6360=((1.0)*cj1*cj2);
IkReal x6361=((1.0)*x6352);
IkReal x6362=(gconst121*x6352);
IkReal x6363=(gconst121*x6353);
evalcond[0]=((((-1.0)*r22*x6359))+(((-1.0)*x6358*x6361))+((r21*x6362)));
evalcond[1]=(cj0+(((-1.0)*r12*x6359))+(((-1.0)*x6357*x6361))+((x6352*x6354)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6362))+(((-1.0)*r02*x6359))+(((-1.0)*x6356*x6361)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6352))+(((-1.0)*x6358*x6359))+((r21*x6363)));
evalcond[4]=(((r01*x6363))+(((-1.0)*x6356*x6359))+((r02*x6352))+(((-1.0)*cj0*x6360))+((cj0*x6355)));
evalcond[5]=(((x6353*x6354))+(((-1.0)*sj0*x6360))+(((-1.0)*x6357*x6359))+((r12*x6352))+((sj0*x6355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6364=((1.0)*gconst122);
CheckValue<IkReal> x6365 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6364))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6365.valid){
continue;
}
CheckValue<IkReal> x6366=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6364)))),-1);
if(!x6366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6365.value)+(((1.5707963267949)*(x6366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6367=IKsin(j4);
IkReal x6368=IKcos(j4);
IkReal x6369=(gconst121*r11);
IkReal x6370=(sj1*sj2);
IkReal x6371=(gconst122*r00);
IkReal x6372=(gconst122*r10);
IkReal x6373=(gconst122*r20);
IkReal x6374=((1.0)*x6368);
IkReal x6375=((1.0)*cj1*cj2);
IkReal x6376=((1.0)*x6367);
IkReal x6377=(gconst121*x6367);
IkReal x6378=(gconst121*x6368);
evalcond[0]=(((r21*x6377))+(((-1.0)*x6373*x6376))+(((-1.0)*r22*x6374)));
evalcond[1]=((((-1.0)*x6372*x6376))+cj0+((x6367*x6369))+(((-1.0)*r12*x6374)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6374))+((r01*x6377))+(((-1.0)*x6371*x6376)));
evalcond[3]=(((r21*x6378))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6373*x6374))+((r22*x6367)));
evalcond[4]=(((r01*x6378))+(((-1.0)*x6371*x6374))+((cj0*x6370))+((r02*x6367))+(((-1.0)*cj0*x6375)));
evalcond[5]=((((-1.0)*x6372*x6374))+(((-1.0)*sj0*x6375))+((r12*x6367))+((sj0*x6370))+((x6368*x6369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6379=((-1.0)*r11);
IkReal x6381 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6381)==0){
continue;
}
IkReal x6380=pow(x6381,-0.5);
CheckValue<IkReal> x6382 = IKatan2WithCheck(IkReal(x6379),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6382.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6382.value))));
IkReal gconst124=(x6379*x6380);
IkReal gconst125=((1.0)*r10*x6380);
CheckValue<IkReal> x6383 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6383.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6383.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6384=((-1.0)*r11);
CheckValue<IkReal> x6387 = IKatan2WithCheck(IkReal(x6384),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6387.valid){
continue;
}
IkReal x6385=((1.0)*(x6387.value));
IkReal x6386=x6380;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6385)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6385)));
IkReal gconst124=(x6384*x6386);
IkReal gconst125=((1.0)*r10*x6386);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6388=((-1.0)*r11);
CheckValue<IkReal> x6391 = IKatan2WithCheck(IkReal(x6388),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6391.valid){
continue;
}
IkReal x6389=((1.0)*(x6391.value));
IkReal x6390=x6380;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6389)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6389)));
IkReal gconst124=(x6388*x6390);
IkReal gconst125=((1.0)*r10*x6390);
IkReal x6392=r12*r12;
IkReal x6393=((1.0)*sj0);
IkReal x6394=(cj0*r02);
IkReal x6395=x6380;
j4eval[0]=((IKabs(((((-1.0)*x6394))+(((-1.0)*r12*x6393)))))+(IKabs((((sj0*x6392*x6395))+((r12*x6394*x6395))+(((-1.0)*x6393*x6395))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6396=((-1.0)*r11);
CheckValue<IkReal> x6399 = IKatan2WithCheck(IkReal(x6396),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6399.valid){
continue;
}
IkReal x6397=((1.0)*(x6399.value));
IkReal x6398=x6380;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6397)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6397)));
IkReal gconst124=(x6396*x6398);
IkReal gconst125=((1.0)*r10*x6398);
IkReal x6400=r12*r12;
IkReal x6401=((1.0)+(((-1.0)*x6400)));
IkReal x6402=(cj2*r22*sj1);
IkReal x6403=(cj1*r22*sj2);
CheckValue<IkReal> x6410=IKPowWithIntegerCheck(x6401,-1);
if(!x6410.valid){
continue;
}
IkReal x6404=x6410.value;
CheckValue<IkReal> x6411=IKPowWithIntegerCheck(((-1.0)+x6400),-1);
if(!x6411.valid){
continue;
}
IkReal x6405=x6411.value;
IkReal x6406=((1.0)*x6404);
if((x6401) < -0.00001)
continue;
IkReal x6407=IKsqrt(x6401);
IkReal x6408=((1.0)*r12*x6405*x6407);
IkReal x6409=((((-1.0)*x6406*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x6406*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x6404)));
j4eval[0]=x6409;
j4eval[1]=IKsign(x6409);
j4eval[2]=((IKabs(((((-1.0)*x6403*x6408))+(((-1.0)*x6402*x6408)))))+(IKabs((x6402+x6403))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6412=(gconst124*r21);
IkReal x6413=(cj1*sj2);
IkReal x6414=(cj2*sj1);
IkReal x6415=(gconst125*r20);
CheckValue<IkReal> x6416 = IKatan2WithCheck(IkReal((((r22*x6414))+((r22*x6413)))),IkReal(((((-1.0)*x6413*x6415))+(((-1.0)*x6414*x6415))+((x6412*x6414))+((x6412*x6413)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6416.valid){
continue;
}
CheckValue<IkReal> x6417=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6412*x6412)))+(((-1.0)*(x6415*x6415)))+(((-1.0)*(r22*r22)))+(((2.0)*x6412*x6415)))),-1);
if(!x6417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6416.value)+(((1.5707963267949)*(x6417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6418=IKsin(j4);
IkReal x6419=IKcos(j4);
IkReal x6420=(sj1*sj2);
IkReal x6421=(gconst125*r20);
IkReal x6422=(gconst124*r01);
IkReal x6423=(gconst125*r00);
IkReal x6424=(gconst125*r10);
IkReal x6425=((1.0)*x6419);
IkReal x6426=((1.0)*cj1*cj2);
IkReal x6427=((1.0)*x6418);
IkReal x6428=(gconst124*x6418);
IkReal x6429=(gconst124*x6419);
evalcond[0]=(((r21*x6428))+(((-1.0)*x6421*x6427))+(((-1.0)*r22*x6425)));
evalcond[1]=(cj0+(((-1.0)*x6424*x6427))+((r11*x6428))+(((-1.0)*r12*x6425)));
evalcond[2]=((((-1.0)*sj0))+((x6418*x6422))+(((-1.0)*r02*x6425))+(((-1.0)*x6423*x6427)));
evalcond[3]=(((r21*x6429))+((cj2*sj1))+(((-1.0)*x6421*x6425))+((cj1*sj2))+((r22*x6418)));
evalcond[4]=(((r02*x6418))+(((-1.0)*cj0*x6426))+((x6419*x6422))+((cj0*x6420))+(((-1.0)*x6423*x6425)));
evalcond[5]=((((-1.0)*x6424*x6425))+((r11*x6429))+(((-1.0)*sj0*x6426))+((r12*x6418))+((sj0*x6420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6430=((1.0)*sj0);
IkReal x6431=((1.0)*cj0);
CheckValue<IkReal> x6432=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6432.valid){
continue;
}
CheckValue<IkReal> x6433 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6431))+(((-1.0)*r12*x6430)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x6431))+(((-1.0)*gconst124*r11*x6430))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6432.value)))+(x6433.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6434=IKsin(j4);
IkReal x6435=IKcos(j4);
IkReal x6436=(sj1*sj2);
IkReal x6437=(gconst125*r20);
IkReal x6438=(gconst124*r01);
IkReal x6439=(gconst125*r00);
IkReal x6440=(gconst125*r10);
IkReal x6441=((1.0)*x6435);
IkReal x6442=((1.0)*cj1*cj2);
IkReal x6443=((1.0)*x6434);
IkReal x6444=(gconst124*x6434);
IkReal x6445=(gconst124*x6435);
evalcond[0]=((((-1.0)*x6437*x6443))+((r21*x6444))+(((-1.0)*r22*x6441)));
evalcond[1]=(((r11*x6444))+cj0+(((-1.0)*r12*x6441))+(((-1.0)*x6440*x6443)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6439*x6443))+((x6434*x6438))+(((-1.0)*r02*x6441)));
evalcond[3]=(((r22*x6434))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6437*x6441))+((r21*x6445)));
evalcond[4]=(((x6435*x6438))+((cj0*x6436))+(((-1.0)*x6439*x6441))+((r02*x6434))+(((-1.0)*cj0*x6442)));
evalcond[5]=((((-1.0)*sj0*x6442))+((r11*x6445))+((r12*x6434))+((sj0*x6436))+(((-1.0)*x6440*x6441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6446=((1.0)*gconst125);
CheckValue<IkReal> x6447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6446))+(((-1.0)*gconst124*r00)))),-1);
if(!x6447.valid){
continue;
}
CheckValue<IkReal> x6448 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6446))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6447.value)))+(x6448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6449=IKsin(j4);
IkReal x6450=IKcos(j4);
IkReal x6451=(sj1*sj2);
IkReal x6452=(gconst125*r20);
IkReal x6453=(gconst124*r01);
IkReal x6454=(gconst125*r00);
IkReal x6455=(gconst125*r10);
IkReal x6456=((1.0)*x6450);
IkReal x6457=((1.0)*cj1*cj2);
IkReal x6458=((1.0)*x6449);
IkReal x6459=(gconst124*x6449);
IkReal x6460=(gconst124*x6450);
evalcond[0]=((((-1.0)*x6452*x6458))+((r21*x6459))+(((-1.0)*r22*x6456)));
evalcond[1]=(cj0+((r11*x6459))+(((-1.0)*r12*x6456))+(((-1.0)*x6455*x6458)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6456))+((x6449*x6453))+(((-1.0)*x6454*x6458)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6452*x6456))+((r21*x6460))+((cj1*sj2))+((r22*x6449)));
evalcond[4]=(((cj0*x6451))+((x6450*x6453))+(((-1.0)*cj0*x6457))+(((-1.0)*x6454*x6456))+((r02*x6449)));
evalcond[5]=(((r12*x6449))+(((-1.0)*sj0*x6457))+((sj0*x6451))+(((-1.0)*x6455*x6456))+((r11*x6460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6461=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6461;
j4eval[1]=IKsign(x6461);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6462=((1.0)*cj5);
IkReal x6463=((((-1.0)*r01*x6462))+(((-1.0)*r00*sj5)));
j4eval[0]=x6463;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6462))))));
j4eval[2]=IKsign(x6463);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6464=cj5*cj5;
IkReal x6465=r11*r11;
IkReal x6466=(cj5*r10);
IkReal x6467=(r11*sj5);
IkReal x6468=(((x6464*x6465))+(((-1.0)*x6464*(r10*r10)))+(((2.0)*x6466*x6467))+(((-1.0)*(r12*r12)))+(((-1.0)*x6465)));
j4eval[0]=x6468;
j4eval[1]=IKsign(x6468);
j4eval[2]=((IKabs(r12))+(IKabs((x6467+(((-1.0)*x6466))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6469=cj5*cj5;
IkReal x6470=r11*r11;
IkReal x6471=(cj5*r10);
IkReal x6472=(r11*sj5);
CheckValue<IkReal> x6473=IKPowWithIntegerCheck(IKsign(((((2.0)*x6471*x6472))+(((-1.0)*(r12*r12)))+(((-1.0)*x6469*(r10*r10)))+(((-1.0)*x6470))+((x6469*x6470)))),-1);
if(!x6473.valid){
continue;
}
CheckValue<IkReal> x6474 = IKatan2WithCheck(IkReal((x6472+(((-1.0)*x6471)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6473.value)))+(x6474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6475=IKcos(j4);
IkReal x6476=IKsin(j4);
IkReal x6477=(cj5*r00);
IkReal x6478=(cj5*r10);
IkReal x6479=(r21*sj5);
IkReal x6480=(cj5*r20);
IkReal x6481=((1.0)*x6475);
IkReal x6482=((1.0)*x6476);
IkReal x6483=(sj5*x6476);
IkReal x6484=(sj5*x6475);
evalcond[0]=((((-1.0)*x6478*x6481))+((r11*x6484))+((r12*x6476)));
evalcond[1]=(((x6476*x6479))+(((-1.0)*r22*x6481))+(((-1.0)*x6480*x6482)));
evalcond[2]=(((r01*x6483))+(((-1.0)*r02*x6481))+(((-1.0)*x6477*x6482)));
evalcond[3]=((1.0)+(((-1.0)*x6478*x6482))+((r11*x6483))+(((-1.0)*r12*x6481)));
evalcond[4]=(((r22*x6476))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6480*x6481))+((x6475*x6479)));
evalcond[5]=(((r01*x6484))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6476))+(((-1.0)*x6477*x6481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6485=((1.0)*cj5);
CheckValue<IkReal> x6486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6485))+(((-1.0)*r00*sj5)))),-1);
if(!x6486.valid){
continue;
}
CheckValue<IkReal> x6487 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6486.value)))+(x6487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6488=IKcos(j4);
IkReal x6489=IKsin(j4);
IkReal x6490=(cj5*r00);
IkReal x6491=(cj5*r10);
IkReal x6492=(r21*sj5);
IkReal x6493=(cj5*r20);
IkReal x6494=((1.0)*x6488);
IkReal x6495=((1.0)*x6489);
IkReal x6496=(sj5*x6489);
IkReal x6497=(sj5*x6488);
evalcond[0]=(((r11*x6497))+((r12*x6489))+(((-1.0)*x6491*x6494)));
evalcond[1]=((((-1.0)*r22*x6494))+((x6489*x6492))+(((-1.0)*x6493*x6495)));
evalcond[2]=(((r01*x6496))+(((-1.0)*r02*x6494))+(((-1.0)*x6490*x6495)));
evalcond[3]=((1.0)+((r11*x6496))+(((-1.0)*r12*x6494))+(((-1.0)*x6491*x6495)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6493*x6494))+((r22*x6489))+((x6488*x6492)));
evalcond[5]=(((r01*x6497))+((r02*x6489))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6490*x6494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6498=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6498.valid){
continue;
}
CheckValue<IkReal> x6499 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6498.value)))+(x6499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6500=IKcos(j4);
IkReal x6501=IKsin(j4);
IkReal x6502=(cj5*r00);
IkReal x6503=(cj5*r10);
IkReal x6504=(r21*sj5);
IkReal x6505=(cj5*r20);
IkReal x6506=((1.0)*x6500);
IkReal x6507=((1.0)*x6501);
IkReal x6508=(sj5*x6501);
IkReal x6509=(sj5*x6500);
evalcond[0]=(((r12*x6501))+(((-1.0)*x6503*x6506))+((r11*x6509)));
evalcond[1]=((((-1.0)*r22*x6506))+((x6501*x6504))+(((-1.0)*x6505*x6507)));
evalcond[2]=((((-1.0)*r02*x6506))+(((-1.0)*x6502*x6507))+((r01*x6508)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6506))+(((-1.0)*x6503*x6507))+((r11*x6508)));
evalcond[4]=(((x6500*x6504))+((cj2*sj1))+((cj1*sj2))+((r22*x6501))+(((-1.0)*x6505*x6506)));
evalcond[5]=(((r02*x6501))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6502*x6506))+((r01*x6509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6510=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6510;
j4eval[1]=IKsign(x6510);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6511=((1.0)*cj5);
IkReal x6512=((((-1.0)*r21*x6511))+(((-1.0)*r20*sj5)));
j4eval[0]=x6512;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x6511)))))+(IKabs(r02)));
j4eval[2]=IKsign(x6512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6513=cj5*cj5;
IkReal x6514=r11*r11;
IkReal x6515=(r11*sj5);
IkReal x6516=(cj5*r10);
IkReal x6517=((((-1.0)*x6513*x6514))+(r12*r12)+(((-2.0)*x6515*x6516))+x6514+((x6513*(r10*r10))));
j4eval[0]=x6517;
j4eval[1]=IKsign(x6517);
j4eval[2]=((IKabs(r12))+(IKabs((x6515+(((-1.0)*x6516))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6518=cj5*cj5;
IkReal x6519=r11*r11;
IkReal x6520=(cj5*r10);
IkReal x6521=(r11*sj5);
CheckValue<IkReal> x6522 = IKatan2WithCheck(IkReal((x6521+(((-1.0)*x6520)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6522.valid){
continue;
}
CheckValue<IkReal> x6523=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x6518*(r10*r10)))+(((-1.0)*x6518*x6519))+x6519+(((-2.0)*x6520*x6521)))),-1);
if(!x6523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6522.value)+(((1.5707963267949)*(x6523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6524=IKcos(j4);
IkReal x6525=IKsin(j4);
IkReal x6526=(cj5*r00);
IkReal x6527=(cj5*r10);
IkReal x6528=(r21*sj5);
IkReal x6529=(cj5*r20);
IkReal x6530=((1.0)*x6524);
IkReal x6531=((1.0)*x6525);
IkReal x6532=(sj5*x6525);
IkReal x6533=(sj5*x6524);
evalcond[0]=(((r12*x6525))+((r11*x6533))+(((-1.0)*x6527*x6530)));
evalcond[1]=((((-1.0)*x6529*x6531))+((x6525*x6528))+(((-1.0)*r22*x6530)));
evalcond[2]=((((-1.0)*r02*x6530))+(((-1.0)*x6526*x6531))+((r01*x6532)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6530))+((r11*x6532))+(((-1.0)*x6527*x6531)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6524*x6528))+(((-1.0)*x6529*x6530))+((r22*x6525)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6526*x6530))+((r02*x6525))+((r01*x6533))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6534=((1.0)*cj5);
CheckValue<IkReal> x6535=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6534))+(((-1.0)*r20*sj5)))),-1);
if(!x6535.valid){
continue;
}
CheckValue<IkReal> x6536 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6535.value)))+(x6536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6537=IKcos(j4);
IkReal x6538=IKsin(j4);
IkReal x6539=(cj5*r00);
IkReal x6540=(cj5*r10);
IkReal x6541=(r21*sj5);
IkReal x6542=(cj5*r20);
IkReal x6543=((1.0)*x6537);
IkReal x6544=((1.0)*x6538);
IkReal x6545=(sj5*x6538);
IkReal x6546=(sj5*x6537);
evalcond[0]=((((-1.0)*x6540*x6543))+((r11*x6546))+((r12*x6538)));
evalcond[1]=(((x6538*x6541))+(((-1.0)*r22*x6543))+(((-1.0)*x6542*x6544)));
evalcond[2]=((((-1.0)*x6539*x6544))+(((-1.0)*r02*x6543))+((r01*x6545)));
evalcond[3]=((-1.0)+(((-1.0)*x6540*x6544))+(((-1.0)*r12*x6543))+((r11*x6545)));
evalcond[4]=(((cj2*sj1))+((x6537*x6541))+((cj1*sj2))+(((-1.0)*x6542*x6543))+((r22*x6538)));
evalcond[5]=(((r02*x6538))+(((-1.0)*sj1*sj2))+(((-1.0)*x6539*x6543))+((cj1*cj2))+((r01*x6546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6547 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6547.valid){
continue;
}
CheckValue<IkReal> x6548=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6547.value)+(((1.5707963267949)*(x6548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6549=IKcos(j4);
IkReal x6550=IKsin(j4);
IkReal x6551=(cj5*r00);
IkReal x6552=(cj5*r10);
IkReal x6553=(r21*sj5);
IkReal x6554=(cj5*r20);
IkReal x6555=((1.0)*x6549);
IkReal x6556=((1.0)*x6550);
IkReal x6557=(sj5*x6550);
IkReal x6558=(sj5*x6549);
evalcond[0]=((((-1.0)*x6552*x6555))+((r11*x6558))+((r12*x6550)));
evalcond[1]=((((-1.0)*r22*x6555))+((x6550*x6553))+(((-1.0)*x6554*x6556)));
evalcond[2]=((((-1.0)*x6551*x6556))+(((-1.0)*r02*x6555))+((r01*x6557)));
evalcond[3]=((-1.0)+(((-1.0)*x6552*x6556))+(((-1.0)*r12*x6555))+((r11*x6557)));
evalcond[4]=(((x6549*x6553))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6554*x6555))+((r22*x6550)));
evalcond[5]=((((-1.0)*x6551*x6555))+(((-1.0)*sj1*sj2))+((r02*x6550))+((cj1*cj2))+((r01*x6558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6559=((-1.0)*r00);
IkReal x6561 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6561)==0){
continue;
}
IkReal x6560=pow(x6561,-0.5);
CheckValue<IkReal> x6562 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6559),IKFAST_ATAN2_MAGTHRESH);
if(!x6562.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6562.value));
IkReal gconst127=(r01*x6560);
IkReal gconst128=(x6559*x6560);
CheckValue<IkReal> x6563 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6563.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6563.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6564=((-1.0)*r00);
IkReal x6565=x6560;
CheckValue<IkReal> x6567 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6564),IKFAST_ATAN2_MAGTHRESH);
if(!x6567.valid){
continue;
}
IkReal x6566=((-1.0)*(x6567.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6566;
IkReal gconst126=x6566;
IkReal gconst127=(r01*x6565);
IkReal gconst128=(x6564*x6565);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6568=((1.0)*sj0);
IkReal x6569=((1.0)*gconst127);
CheckValue<IkReal> x6570=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6569)))),-1);
if(!x6570.valid){
continue;
}
CheckValue<IkReal> x6571 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6568)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x6569))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x6568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6570.value)))+(x6571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6572=IKsin(j4);
IkReal x6573=IKcos(j4);
IkReal x6574=(gconst127*r01);
IkReal x6575=(sj1*sj2);
IkReal x6576=(gconst128*r10);
IkReal x6577=(gconst128*r00);
IkReal x6578=(gconst128*r20);
IkReal x6579=((1.0)*x6573);
IkReal x6580=((1.0)*cj1*cj2);
IkReal x6581=((1.0)*x6572);
IkReal x6582=(gconst127*x6573);
IkReal x6583=(gconst127*x6572);
evalcond[0]=(((r21*x6583))+(((-1.0)*r22*x6579))+(((-1.0)*x6578*x6581)));
evalcond[1]=((((-1.0)*x6576*x6581))+((r11*x6583))+cj0+(((-1.0)*r12*x6579)));
evalcond[2]=((((-1.0)*sj0))+((x6572*x6574))+(((-1.0)*x6577*x6581))+(((-1.0)*r02*x6579)));
evalcond[3]=(((r22*x6572))+((cj2*sj1))+((r21*x6582))+((cj1*sj2))+(((-1.0)*x6578*x6579)));
evalcond[4]=(((cj0*x6575))+(((-1.0)*x6577*x6579))+(((-1.0)*cj0*x6580))+((x6573*x6574))+((r02*x6572)));
evalcond[5]=((((-1.0)*x6576*x6579))+((r11*x6582))+((r12*x6572))+((sj0*x6575))+(((-1.0)*sj0*x6580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6584=((1.0)*gconst128);
CheckValue<IkReal> x6585 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6584))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6585.valid){
continue;
}
CheckValue<IkReal> x6586=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6584))+(((-1.0)*gconst127*r10)))),-1);
if(!x6586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6585.value)+(((1.5707963267949)*(x6586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6587=IKsin(j4);
IkReal x6588=IKcos(j4);
IkReal x6589=(gconst127*r01);
IkReal x6590=(sj1*sj2);
IkReal x6591=(gconst128*r10);
IkReal x6592=(gconst128*r00);
IkReal x6593=(gconst128*r20);
IkReal x6594=((1.0)*x6588);
IkReal x6595=((1.0)*cj1*cj2);
IkReal x6596=((1.0)*x6587);
IkReal x6597=(gconst127*x6588);
IkReal x6598=(gconst127*x6587);
evalcond[0]=(((r21*x6598))+(((-1.0)*x6593*x6596))+(((-1.0)*r22*x6594)));
evalcond[1]=(((r11*x6598))+cj0+(((-1.0)*r12*x6594))+(((-1.0)*x6591*x6596)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6594))+(((-1.0)*x6592*x6596))+((x6587*x6589)));
evalcond[3]=(((cj2*sj1))+((r22*x6587))+((r21*x6597))+((cj1*sj2))+(((-1.0)*x6593*x6594)));
evalcond[4]=(((r02*x6587))+((x6588*x6589))+((cj0*x6590))+(((-1.0)*cj0*x6595))+(((-1.0)*x6592*x6594)));
evalcond[5]=(((r11*x6597))+((sj0*x6590))+(((-1.0)*x6591*x6594))+(((-1.0)*sj0*x6595))+((r12*x6587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6599=((-1.0)*r01);
IkReal x6601 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6601)==0){
continue;
}
IkReal x6600=pow(x6601,-0.5);
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal(x6599),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6602.value))));
IkReal gconst130=(x6599*x6600);
IkReal gconst131=((1.0)*r00*x6600);
CheckValue<IkReal> x6603 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6603.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6603.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6604=((-1.0)*r01);
CheckValue<IkReal> x6607 = IKatan2WithCheck(IkReal(x6604),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6607.valid){
continue;
}
IkReal x6605=((1.0)*(x6607.value));
IkReal x6606=x6600;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6605)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6605)));
IkReal gconst130=(x6604*x6606);
IkReal gconst131=((1.0)*r00*x6606);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6608=((-1.0)*r01);
CheckValue<IkReal> x6611 = IKatan2WithCheck(IkReal(x6608),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6611.valid){
continue;
}
IkReal x6609=((1.0)*(x6611.value));
IkReal x6610=x6600;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6609)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6609)));
IkReal gconst130=(x6608*x6610);
IkReal gconst131=((1.0)*r00*x6610);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6612=((-1.0)*r01);
CheckValue<IkReal> x6615 = IKatan2WithCheck(IkReal(x6612),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6615.valid){
continue;
}
IkReal x6613=((1.0)*(x6615.value));
IkReal x6614=x6600;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6613)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6613)));
IkReal gconst130=(x6612*x6614);
IkReal gconst131=((1.0)*r00*x6614);
IkReal x6616=r02*r02;
IkReal x6617=(r12*sj0);
IkReal x6618=((1.0)*cj0);
IkReal x6619=x6600;
j4eval[0]=((IKabs(((((-1.0)*x6617))+(((-1.0)*r02*x6618)))))+(IKabs((((cj0*x6616*x6619))+(((-1.0)*x6618*x6619))+((r02*x6617*x6619))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6620=((1.0)*sj0);
IkReal x6621=((1.0)*gconst130);
CheckValue<IkReal> x6622=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x6621)))),-1);
if(!x6622.valid){
continue;
}
CheckValue<IkReal> x6623 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6620))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst130*r11*x6620))+((gconst131*r10*sj0))+((cj0*gconst131*r00))+(((-1.0)*cj0*r01*x6621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6622.value)))+(x6623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6624=IKsin(j4);
IkReal x6625=IKcos(j4);
IkReal x6626=(gconst131*r10);
IkReal x6627=(sj1*sj2);
IkReal x6628=(gconst131*r20);
IkReal x6629=(gconst131*r00);
IkReal x6630=((1.0)*x6625);
IkReal x6631=((1.0)*cj1*cj2);
IkReal x6632=(gconst130*x6624);
IkReal x6633=((1.0)*x6624);
IkReal x6634=(gconst130*x6625);
evalcond[0]=((((-1.0)*x6628*x6633))+(((-1.0)*r22*x6630))+((r21*x6632)));
evalcond[1]=(cj0+((r11*x6632))+(((-1.0)*x6626*x6633))+(((-1.0)*r12*x6630)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6632))+(((-1.0)*x6629*x6633))+(((-1.0)*r02*x6630)));
evalcond[3]=((((-1.0)*x6628*x6630))+((cj2*sj1))+((r21*x6634))+((cj1*sj2))+((r22*x6624)));
evalcond[4]=(((r02*x6624))+((r01*x6634))+((cj0*x6627))+(((-1.0)*cj0*x6631))+(((-1.0)*x6629*x6630)));
evalcond[5]=(((r12*x6624))+((r11*x6634))+((sj0*x6627))+(((-1.0)*sj0*x6631))+(((-1.0)*x6626*x6630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6635=((1.0)*gconst131);
CheckValue<IkReal> x6636 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6636.valid){
continue;
}
CheckValue<IkReal> x6637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6635))+(((-1.0)*gconst130*r10)))),-1);
if(!x6637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6636.value)+(((1.5707963267949)*(x6637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6638=IKsin(j4);
IkReal x6639=IKcos(j4);
IkReal x6640=(gconst131*r10);
IkReal x6641=(sj1*sj2);
IkReal x6642=(gconst131*r20);
IkReal x6643=(gconst131*r00);
IkReal x6644=((1.0)*x6639);
IkReal x6645=((1.0)*cj1*cj2);
IkReal x6646=(gconst130*x6638);
IkReal x6647=((1.0)*x6638);
IkReal x6648=(gconst130*x6639);
evalcond[0]=((((-1.0)*r22*x6644))+((r21*x6646))+(((-1.0)*x6642*x6647)));
evalcond[1]=(cj0+(((-1.0)*x6640*x6647))+((r11*x6646))+(((-1.0)*r12*x6644)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6646))+(((-1.0)*x6643*x6647))+(((-1.0)*r02*x6644)));
evalcond[3]=(((cj2*sj1))+((r21*x6648))+((cj1*sj2))+(((-1.0)*x6642*x6644))+((r22*x6638)));
evalcond[4]=(((r01*x6648))+(((-1.0)*x6643*x6644))+(((-1.0)*cj0*x6645))+((cj0*x6641))+((r02*x6638)));
evalcond[5]=((((-1.0)*x6640*x6644))+((r11*x6648))+((r12*x6638))+(((-1.0)*sj0*x6645))+((sj0*x6641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6649=((1.0)*gconst131);
CheckValue<IkReal> x6650 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6650.valid){
continue;
}
CheckValue<IkReal> x6651=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x6649)))),-1);
if(!x6651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6650.value)+(((1.5707963267949)*(x6651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6652=IKsin(j4);
IkReal x6653=IKcos(j4);
IkReal x6654=(gconst131*r10);
IkReal x6655=(sj1*sj2);
IkReal x6656=(gconst131*r20);
IkReal x6657=(gconst131*r00);
IkReal x6658=((1.0)*x6653);
IkReal x6659=((1.0)*cj1*cj2);
IkReal x6660=(gconst130*x6652);
IkReal x6661=((1.0)*x6652);
IkReal x6662=(gconst130*x6653);
evalcond[0]=((((-1.0)*r22*x6658))+((r21*x6660))+(((-1.0)*x6656*x6661)));
evalcond[1]=(cj0+(((-1.0)*r12*x6658))+((r11*x6660))+(((-1.0)*x6654*x6661)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6657*x6661))+((r01*x6660))+(((-1.0)*r02*x6658)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6662))+(((-1.0)*x6656*x6658))+((r22*x6652)));
evalcond[4]=((((-1.0)*x6657*x6658))+((r02*x6652))+((r01*x6662))+(((-1.0)*cj0*x6659))+((cj0*x6655)));
evalcond[5]=(((r12*x6652))+(((-1.0)*sj0*x6659))+((r11*x6662))+((sj0*x6655))+(((-1.0)*x6654*x6658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6663=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6663;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6663);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6664=((1.0)*cj5);
IkReal x6665=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6664)));
j4eval[0]=x6665;
j4eval[1]=((IKabs(((((-1.0)*r20*x6664))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6665);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6666=cj5*cj5;
IkReal x6667=r01*r01;
IkReal x6668=(cj5*r00);
IkReal x6669=(r01*sj5);
IkReal x6670=(x6667+((x6666*(r00*r00)))+(((-1.0)*x6666*x6667))+(r02*r02)+(((-2.0)*x6668*x6669)));
j4eval[0]=x6670;
j4eval[1]=IKsign(x6670);
j4eval[2]=((IKabs(r02))+(IKabs((x6669+(((-1.0)*x6668))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6671=cj5*cj5;
IkReal x6672=r01*r01;
IkReal x6673=(r01*sj5);
IkReal x6674=(cj5*r00);
CheckValue<IkReal> x6675 = IKatan2WithCheck(IkReal((x6673+(((-1.0)*x6674)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6675.valid){
continue;
}
CheckValue<IkReal> x6676=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6673*x6674))+x6672+(((-1.0)*x6671*x6672))+((x6671*(r00*r00)))+(r02*r02))),-1);
if(!x6676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6675.value)+(((1.5707963267949)*(x6676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6677=IKcos(j4);
IkReal x6678=IKsin(j4);
IkReal x6679=(cj5*r00);
IkReal x6680=(cj5*r10);
IkReal x6681=(r21*sj5);
IkReal x6682=(cj5*r20);
IkReal x6683=((1.0)*x6677);
IkReal x6684=((1.0)*x6678);
IkReal x6685=(sj5*x6678);
IkReal x6686=(sj5*x6677);
evalcond[0]=(((r02*x6678))+(((-1.0)*x6679*x6683))+((r01*x6686)));
evalcond[1]=(((x6678*x6681))+(((-1.0)*x6682*x6684))+(((-1.0)*r22*x6683)));
evalcond[2]=((((-1.0)*x6680*x6684))+((r11*x6685))+(((-1.0)*r12*x6683)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6683))+(((-1.0)*x6679*x6684))+((r01*x6685)));
evalcond[4]=(((cj2*sj1))+((x6677*x6681))+((cj1*sj2))+((r22*x6678))+(((-1.0)*x6682*x6683)));
evalcond[5]=((((-1.0)*x6680*x6683))+((r11*x6686))+((r12*x6678))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6687=((1.0)*cj5);
CheckValue<IkReal> x6688=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6687)))),-1);
if(!x6688.valid){
continue;
}
CheckValue<IkReal> x6689 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6687))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6688.value)))+(x6689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6690=IKcos(j4);
IkReal x6691=IKsin(j4);
IkReal x6692=(cj5*r00);
IkReal x6693=(cj5*r10);
IkReal x6694=(r21*sj5);
IkReal x6695=(cj5*r20);
IkReal x6696=((1.0)*x6690);
IkReal x6697=((1.0)*x6691);
IkReal x6698=(sj5*x6691);
IkReal x6699=(sj5*x6690);
evalcond[0]=((((-1.0)*x6692*x6696))+((r01*x6699))+((r02*x6691)));
evalcond[1]=(((x6691*x6694))+(((-1.0)*r22*x6696))+(((-1.0)*x6695*x6697)));
evalcond[2]=(((r11*x6698))+(((-1.0)*x6693*x6697))+(((-1.0)*r12*x6696)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6696))+(((-1.0)*x6692*x6697))+((r01*x6698)));
evalcond[4]=(((cj2*sj1))+((r22*x6691))+((cj1*sj2))+((x6690*x6694))+(((-1.0)*x6695*x6696)));
evalcond[5]=(((r11*x6699))+((r12*x6691))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6693*x6696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6700=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6700.valid){
continue;
}
CheckValue<IkReal> x6701 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6700.value)))+(x6701.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6702=IKcos(j4);
IkReal x6703=IKsin(j4);
IkReal x6704=(cj5*r00);
IkReal x6705=(cj5*r10);
IkReal x6706=(r21*sj5);
IkReal x6707=(cj5*r20);
IkReal x6708=((1.0)*x6702);
IkReal x6709=((1.0)*x6703);
IkReal x6710=(sj5*x6703);
IkReal x6711=(sj5*x6702);
evalcond[0]=(((r01*x6711))+(((-1.0)*x6704*x6708))+((r02*x6703)));
evalcond[1]=((((-1.0)*r22*x6708))+((x6703*x6706))+(((-1.0)*x6707*x6709)));
evalcond[2]=((((-1.0)*x6705*x6709))+((r11*x6710))+(((-1.0)*r12*x6708)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6708))+((r01*x6710))+(((-1.0)*x6704*x6709)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6702*x6706))+((r22*x6703))+(((-1.0)*x6707*x6708)));
evalcond[5]=((((-1.0)*x6705*x6708))+((r11*x6711))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6712=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6712;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6713=((1.0)*cj5);
IkReal x6714=((((-1.0)*r21*x6713))+(((-1.0)*r20*sj5)));
j4eval[0]=x6714;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6713))))));
j4eval[2]=IKsign(x6714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6715=(r01*sj5);
IkReal x6716=(cj1*sj2);
IkReal x6717=(cj2*sj1);
IkReal x6718=((1.0)*r02);
IkReal x6719=((1.0)*cj5*r00);
IkReal x6720=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6720;
j4eval[1]=((IKabs(((((-1.0)*x6717*x6718))+(((-1.0)*x6716*x6718)))))+(IKabs((((x6715*x6717))+((x6715*x6716))+(((-1.0)*x6717*x6719))+(((-1.0)*x6716*x6719))))));
j4eval[2]=IKsign(x6720);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6721=(r01*sj5);
IkReal x6722=(cj1*sj2);
IkReal x6723=(cj2*sj1);
IkReal x6724=((1.0)*r02);
IkReal x6725=((1.0)*cj5*r00);
CheckValue<IkReal> x6726 = IKatan2WithCheck(IkReal(((((-1.0)*x6723*x6725))+(((-1.0)*x6722*x6725))+((x6721*x6723))+((x6721*x6722)))),IkReal(((((-1.0)*x6723*x6724))+(((-1.0)*x6722*x6724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6726.valid){
continue;
}
CheckValue<IkReal> x6727=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6726.value)+(((1.5707963267949)*(x6727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6728=IKcos(j4);
IkReal x6729=IKsin(j4);
IkReal x6730=(cj5*r00);
IkReal x6731=(cj5*r10);
IkReal x6732=(r21*sj5);
IkReal x6733=(cj5*r20);
IkReal x6734=((1.0)*x6728);
IkReal x6735=((1.0)*x6729);
IkReal x6736=(sj5*x6729);
IkReal x6737=(sj5*x6728);
evalcond[0]=((((-1.0)*x6730*x6734))+((r02*x6729))+((r01*x6737)));
evalcond[1]=((((-1.0)*r22*x6734))+((x6729*x6732))+(((-1.0)*x6733*x6735)));
evalcond[2]=((((-1.0)*r12*x6734))+((r11*x6736))+(((-1.0)*x6731*x6735)));
evalcond[3]=((1.0)+(((-1.0)*x6730*x6735))+(((-1.0)*r02*x6734))+((r01*x6736)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6733*x6734))+((r22*x6729))+((x6728*x6732)));
evalcond[5]=(((r12*x6729))+(((-1.0)*sj1*sj2))+((r11*x6737))+((cj1*cj2))+(((-1.0)*x6731*x6734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6738=((1.0)*cj5);
CheckValue<IkReal> x6739=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6738))+(((-1.0)*r20*sj5)))),-1);
if(!x6739.valid){
continue;
}
CheckValue<IkReal> x6740 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6738))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6739.value)))+(x6740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6741=IKcos(j4);
IkReal x6742=IKsin(j4);
IkReal x6743=(cj5*r00);
IkReal x6744=(cj5*r10);
IkReal x6745=(r21*sj5);
IkReal x6746=(cj5*r20);
IkReal x6747=((1.0)*x6741);
IkReal x6748=((1.0)*x6742);
IkReal x6749=(sj5*x6742);
IkReal x6750=(sj5*x6741);
evalcond[0]=(((r02*x6742))+((r01*x6750))+(((-1.0)*x6743*x6747)));
evalcond[1]=((((-1.0)*r22*x6747))+((x6742*x6745))+(((-1.0)*x6746*x6748)));
evalcond[2]=((((-1.0)*x6744*x6748))+(((-1.0)*r12*x6747))+((r11*x6749)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6747))+(((-1.0)*x6743*x6748))+((r01*x6749)));
evalcond[4]=(((cj2*sj1))+((x6741*x6745))+((cj1*sj2))+(((-1.0)*x6746*x6747))+((r22*x6742)));
evalcond[5]=((((-1.0)*x6744*x6747))+(((-1.0)*sj1*sj2))+((r11*x6750))+((r12*x6742))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6751 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6751.valid){
continue;
}
CheckValue<IkReal> x6752=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6751.value)+(((1.5707963267949)*(x6752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6753=IKcos(j4);
IkReal x6754=IKsin(j4);
IkReal x6755=(cj5*r00);
IkReal x6756=(cj5*r10);
IkReal x6757=(r21*sj5);
IkReal x6758=(cj5*r20);
IkReal x6759=((1.0)*x6753);
IkReal x6760=((1.0)*x6754);
IkReal x6761=(sj5*x6754);
IkReal x6762=(sj5*x6753);
evalcond[0]=((((-1.0)*x6755*x6759))+((r01*x6762))+((r02*x6754)));
evalcond[1]=((((-1.0)*x6758*x6760))+((x6754*x6757))+(((-1.0)*r22*x6759)));
evalcond[2]=(((r11*x6761))+(((-1.0)*x6756*x6760))+(((-1.0)*r12*x6759)));
evalcond[3]=((1.0)+(((-1.0)*x6755*x6760))+((r01*x6761))+(((-1.0)*r02*x6759)));
evalcond[4]=(((cj2*sj1))+((r22*x6754))+(((-1.0)*x6758*x6759))+((cj1*sj2))+((x6753*x6757)));
evalcond[5]=(((r12*x6754))+(((-1.0)*sj1*sj2))+((r11*x6762))+(((-1.0)*x6756*x6759))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6763=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6763);
rxp1_1=(px*r21);
rxp1_2=(r11*x6763);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6764=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6764);
rxp1_1=(px*r21);
rxp1_2=(r11*x6764);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6765=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6765);
rxp1_1=(px*r21);
rxp1_2=(r11*x6765);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6768=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6768.valid){
continue;
}
IkReal x6766=x6768.value;
IkReal x6767=(sj0*x6766);
cj4array[0]=((((-1.0)*sj1*sj2*x6767))+((cj1*cj2*x6767)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6769=IKsin(j4);
IkReal x6770=IKcos(j4);
IkReal x6771=(r21*sj5);
IkReal x6772=((1.0)*cj5*r20);
evalcond[0]=(r02*x6769);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6770)));
evalcond[2]=((((-1.0)*x6769*x6772))+((x6769*x6771)));
evalcond[3]=((((-1.0)*cj5*r10*x6769))+((r11*sj5*x6769)));
evalcond[4]=(((x6770*x6771))+((cj2*sj1))+(((-1.0)*x6770*x6772))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6775=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6775.valid){
continue;
}
IkReal x6773=x6775.value;
IkReal x6774=((1.0)*x6773);
cj4array[0]=((((-1.0)*cj1*sj2*x6774))+(((-1.0)*cj2*sj1*x6774)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6776=IKsin(j4);
IkReal x6777=IKcos(j4);
IkReal x6778=((1.0)*sj0);
IkReal x6779=((1.0)*cj5);
IkReal x6780=(sj5*x6776);
evalcond[0]=(r02*x6776);
evalcond[1]=((((-1.0)*x6778))+(((-1.0)*r02*x6777)));
evalcond[2]=(((r21*x6780))+(((-1.0)*r20*x6776*x6779)));
evalcond[3]=(((r11*x6780))+(((-1.0)*r10*x6776*x6779)));
evalcond[4]=((((-1.0)*r10*x6777*x6779))+((r11*sj5*x6777))+(((-1.0)*cj1*cj2*x6778))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6781=IKPowWithIntegerCheck(r02,-1);
if(!x6781.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6781.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6782=IKsin(j4);
IkReal x6783=IKcos(j4);
IkReal x6784=(r21*sj5);
IkReal x6785=((1.0)*cj5);
IkReal x6786=(r11*sj5);
evalcond[0]=(r02*x6782);
evalcond[1]=((((-1.0)*r20*x6782*x6785))+((x6782*x6784)));
evalcond[2]=((((-1.0)*r10*x6782*x6785))+((x6782*x6786)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6783*x6785))+((x6783*x6784)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x6783*x6786))+(((-1.0)*r10*x6783*x6785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6787=((1.0)*sj0);
IkReal x6788=((1.0)*cj0);
CheckValue<IkReal> x6789 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6787))+(((-1.0)*r02*x6788)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6788))+(((-1.0)*r11*sj5*x6787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6789.valid){
continue;
}
CheckValue<IkReal> x6790=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6789.value)+(((1.5707963267949)*(x6790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6791=IKsin(j4);
IkReal x6792=IKcos(j4);
IkReal x6793=(cj5*r00);
IkReal x6794=(cj5*r10);
IkReal x6795=(r21*sj5);
IkReal x6796=(sj1*sj2);
IkReal x6797=(cj5*r20);
IkReal x6798=((1.0)*x6792);
IkReal x6799=((1.0)*cj1*cj2);
IkReal x6800=((1.0)*x6791);
IkReal x6801=(sj5*x6791);
IkReal x6802=(sj5*x6792);
evalcond[0]=((((-1.0)*r22*x6798))+(((-1.0)*x6797*x6800))+((x6791*x6795)));
evalcond[1]=(cj0+((r11*x6801))+(((-1.0)*x6794*x6800))+(((-1.0)*r12*x6798)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6793*x6800))+((r01*x6801))+(((-1.0)*r02*x6798)));
evalcond[3]=(((cj2*sj1))+((r22*x6791))+((x6792*x6795))+((cj1*sj2))+(((-1.0)*x6797*x6798)));
evalcond[4]=(((r02*x6791))+(((-1.0)*x6793*x6798))+((r01*x6802))+((cj0*x6796))+(((-1.0)*cj0*x6799)));
evalcond[5]=(((sj0*x6796))+((r11*x6802))+((r12*x6791))+(((-1.0)*sj0*x6799))+(((-1.0)*x6794*x6798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6803=((1.0)*cj5);
CheckValue<IkReal> x6804=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6803)))),-1);
if(!x6804.valid){
continue;
}
CheckValue<IkReal> x6805 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6803))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6804.value)))+(x6805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6806=IKsin(j4);
IkReal x6807=IKcos(j4);
IkReal x6808=(cj5*r00);
IkReal x6809=(cj5*r10);
IkReal x6810=(r21*sj5);
IkReal x6811=(sj1*sj2);
IkReal x6812=(cj5*r20);
IkReal x6813=((1.0)*x6807);
IkReal x6814=((1.0)*cj1*cj2);
IkReal x6815=((1.0)*x6806);
IkReal x6816=(sj5*x6806);
IkReal x6817=(sj5*x6807);
evalcond[0]=(((x6806*x6810))+(((-1.0)*x6812*x6815))+(((-1.0)*r22*x6813)));
evalcond[1]=(((r11*x6816))+cj0+(((-1.0)*x6809*x6815))+(((-1.0)*r12*x6813)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6808*x6815))+(((-1.0)*r02*x6813))+((r01*x6816)));
evalcond[3]=(((cj2*sj1))+((x6807*x6810))+((r22*x6806))+((cj1*sj2))+(((-1.0)*x6812*x6813)));
evalcond[4]=((((-1.0)*x6808*x6813))+((cj0*x6811))+((r01*x6817))+((r02*x6806))+(((-1.0)*cj0*x6814)));
evalcond[5]=(((r11*x6817))+(((-1.0)*x6809*x6813))+((r12*x6806))+((sj0*x6811))+(((-1.0)*sj0*x6814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6818=((1.0)*cj5);
CheckValue<IkReal> x6819 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6819.valid){
continue;
}
CheckValue<IkReal> x6820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6818)))),-1);
if(!x6820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6819.value)+(((1.5707963267949)*(x6820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6821=IKsin(j4);
IkReal x6822=IKcos(j4);
IkReal x6823=(cj5*r00);
IkReal x6824=(cj5*r10);
IkReal x6825=(r21*sj5);
IkReal x6826=(sj1*sj2);
IkReal x6827=(cj5*r20);
IkReal x6828=((1.0)*x6822);
IkReal x6829=((1.0)*cj1*cj2);
IkReal x6830=((1.0)*x6821);
IkReal x6831=(sj5*x6821);
IkReal x6832=(sj5*x6822);
evalcond[0]=((((-1.0)*r22*x6828))+(((-1.0)*x6827*x6830))+((x6821*x6825)));
evalcond[1]=(cj0+(((-1.0)*x6824*x6830))+(((-1.0)*r12*x6828))+((r11*x6831)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6828))+((r01*x6831))+(((-1.0)*x6823*x6830)));
evalcond[3]=(((cj2*sj1))+((r22*x6821))+((cj1*sj2))+(((-1.0)*x6827*x6828))+((x6822*x6825)));
evalcond[4]=(((r02*x6821))+(((-1.0)*x6823*x6828))+((r01*x6832))+(((-1.0)*cj0*x6829))+((cj0*x6826)));
evalcond[5]=((((-1.0)*sj0*x6829))+((sj0*x6826))+((r11*x6832))+(((-1.0)*x6824*x6828))+((r12*x6821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6833=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6833;
j0eval[1]=IKsign(x6833);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6834=cj5*cj5;
IkReal x6835=r21*r21;
IkReal x6836=(cj2*sj1);
IkReal x6837=(cj1*sj2);
IkReal x6838=(r21*sj5);
IkReal x6839=((1.0)*cj5*r20);
IkReal x6840=((((-2.0)*cj5*r20*x6838))+((x6834*(r20*r20)))+(r22*r22)+x6835+(((-1.0)*x6834*x6835)));
j4eval[0]=x6840;
j4eval[1]=IKsign(x6840);
j4eval[2]=((IKabs((((r22*x6837))+((r22*x6836)))))+(IKabs((((x6837*x6838))+((x6836*x6838))+(((-1.0)*x6837*x6839))+(((-1.0)*x6836*x6839))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6841=cj1*cj1;
IkReal x6842=(cj2*sj2);
IkReal x6843=(cj2*sj1);
IkReal x6844=(cj1*sj1);
j0eval[0]=((((-2.0)*x6841*x6842))+(((-2.0)*cj1*cj2*x6843))+(((-1.06936921195177)*sj2*x6841))+(((-1.06936921195177)*cj1*x6843))+x6842+x6844);
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6843)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.11468804378898)*px))+(((0.828504637423993)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.11468804378898)*py))+(((0.828504637423993)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.11468804378898)*px))+(((0.828504637423993)*py))))+IKsqr(((((0.11468804378898)*py))+(((0.828504637423993)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.11468804378898)*px))+(((0.828504637423993)*py))), ((((0.11468804378898)*py))+(((0.828504637423993)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6845=IKcos(j0);
IkReal x6846=IKsin(j0);
evalcond[0]=((((1.1843)*x6845))+(((-1.0)*px))+(((-0.16394)*x6846)));
evalcond[1]=((((1.1843)*x6846))+(((0.16394)*x6845))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6847=((1.0)*cj5);
IkReal x6848=((((-1.0)*r01*x6847))+(((-1.0)*r00*sj5)));
j4eval[0]=x6848;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6847))))));
j4eval[2]=IKsign(x6848);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6849=((1.0)*cj5);
IkReal x6850=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6849)));
j4eval[0]=x6850;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6849))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6851=cj5*cj5;
IkReal x6852=((1.0)*sj5);
IkReal x6853=(cj5*r20);
IkReal x6854=(r11*r21);
IkReal x6855=((((-1.0)*r11*x6852*x6853))+((r12*r22))+(((-1.0)*cj5*r10*r21*x6852))+x6854+(((-1.0)*x6851*x6854))+((r10*r20*x6851)));
j4eval[0]=x6855;
j4eval[1]=IKsign(x6855);
j4eval[2]=((IKabs((((cj0*x6853))+(((-1.0)*cj0*r21*x6852)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6856=cj5*cj5;
IkReal x6857=((1.0)*sj5);
IkReal x6858=(cj5*r20);
IkReal x6859=(r11*r21);
CheckValue<IkReal> x6860 = IKatan2WithCheck(IkReal((((cj0*x6858))+(((-1.0)*cj0*r21*x6857)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6860.valid){
continue;
}
CheckValue<IkReal> x6861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6857*x6858))+(((-1.0)*x6856*x6859))+((r12*r22))+(((-1.0)*cj5*r10*r21*x6857))+x6859+((r10*r20*x6856)))),-1);
if(!x6861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6860.value)+(((1.5707963267949)*(x6861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6862=IKsin(j4);
IkReal x6863=IKcos(j4);
IkReal x6864=((1.0)*sj0);
IkReal x6865=(cj5*r00);
IkReal x6866=(r11*sj5);
IkReal x6867=(cj5*r10);
IkReal x6868=(r21*sj5);
IkReal x6869=(cj5*r20);
IkReal x6870=(r01*sj5);
IkReal x6871=((1.0)*x6863);
IkReal x6872=((1.0)*x6862);
evalcond[0]=((((-1.0)*x6869*x6872))+(((-1.0)*r22*x6871))+((x6862*x6868)));
evalcond[1]=((((-1.0)*x6868*x6871))+(((-1.0)*r22*x6872))+((x6863*x6869)));
evalcond[2]=(cj0+(((-1.0)*r12*x6871))+((x6862*x6866))+(((-1.0)*x6867*x6872)));
evalcond[3]=((((-1.0)*x6865*x6872))+(((-1.0)*x6864))+((x6862*x6870))+(((-1.0)*r02*x6871)));
evalcond[4]=((((-1.0)*x6870*x6871))+(((-1.0)*r02*x6872))+((x6863*x6865))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6864))+(((-1.0)*r12*x6872))+((x6863*x6867))+(((-1.0)*x6866*x6871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6873=((1.0)*cj5);
CheckValue<IkReal> x6874=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6873)))),-1);
if(!x6874.valid){
continue;
}
CheckValue<IkReal> x6875 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6873))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6874.value)))+(x6875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6876=IKsin(j4);
IkReal x6877=IKcos(j4);
IkReal x6878=((1.0)*sj0);
IkReal x6879=(cj5*r00);
IkReal x6880=(r11*sj5);
IkReal x6881=(cj5*r10);
IkReal x6882=(r21*sj5);
IkReal x6883=(cj5*r20);
IkReal x6884=(r01*sj5);
IkReal x6885=((1.0)*x6877);
IkReal x6886=((1.0)*x6876);
evalcond[0]=(((x6876*x6882))+(((-1.0)*x6883*x6886))+(((-1.0)*r22*x6885)));
evalcond[1]=(((x6877*x6883))+(((-1.0)*x6882*x6885))+(((-1.0)*r22*x6886)));
evalcond[2]=((((-1.0)*x6881*x6886))+cj0+((x6876*x6880))+(((-1.0)*r12*x6885)));
evalcond[3]=(((x6876*x6884))+(((-1.0)*x6878))+(((-1.0)*r02*x6885))+(((-1.0)*x6879*x6886)));
evalcond[4]=((((-1.0)*x6884*x6885))+(((-1.0)*r02*x6886))+((x6877*x6879))+(((-1.0)*cj0)));
evalcond[5]=(((x6877*x6881))+(((-1.0)*x6878))+(((-1.0)*x6880*x6885))+(((-1.0)*r12*x6886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6887=((1.0)*cj5);
CheckValue<IkReal> x6888 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6888.valid){
continue;
}
CheckValue<IkReal> x6889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6887)))),-1);
if(!x6889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6888.value)+(((1.5707963267949)*(x6889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6890=IKsin(j4);
IkReal x6891=IKcos(j4);
IkReal x6892=((1.0)*sj0);
IkReal x6893=(cj5*r00);
IkReal x6894=(r11*sj5);
IkReal x6895=(cj5*r10);
IkReal x6896=(r21*sj5);
IkReal x6897=(cj5*r20);
IkReal x6898=(r01*sj5);
IkReal x6899=((1.0)*x6891);
IkReal x6900=((1.0)*x6890);
evalcond[0]=((((-1.0)*x6897*x6900))+((x6890*x6896))+(((-1.0)*r22*x6899)));
evalcond[1]=((((-1.0)*x6896*x6899))+((x6891*x6897))+(((-1.0)*r22*x6900)));
evalcond[2]=(cj0+(((-1.0)*r12*x6899))+(((-1.0)*x6895*x6900))+((x6890*x6894)));
evalcond[3]=((((-1.0)*x6893*x6900))+(((-1.0)*x6892))+(((-1.0)*r02*x6899))+((x6890*x6898)));
evalcond[4]=((((-1.0)*r02*x6900))+((x6891*x6893))+(((-1.0)*x6898*x6899))+(((-1.0)*cj0)));
evalcond[5]=(((x6891*x6895))+(((-1.0)*x6894*x6899))+(((-1.0)*r12*x6900))+(((-1.0)*x6892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.3953122064836)*py))+(((-5.76190133831036)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.3953122064836)*px))+(((5.76190133831036)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.3953122064836)*py))+(((-5.76190133831036)*px))))+IKsqr(((((1.3953122064836)*px))+(((5.76190133831036)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.3953122064836)*py))+(((-5.76190133831036)*px))), ((((1.3953122064836)*px))+(((5.76190133831036)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6901=IKsin(j0);
IkReal x6902=IKcos(j0);
evalcond[0]=((((0.0397)*x6902))+(((-1.0)*px))+(((-0.16394)*x6901)));
evalcond[1]=((((0.0397)*x6901))+(((0.16394)*x6902))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6903=((1.0)*cj5);
IkReal x6904=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6903)));
j4eval[0]=x6904;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6903)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6905=cj5*cj5;
IkReal x6906=((1.0)*r21);
IkReal x6907=(cj5*sj5);
IkReal x6908=((1.0)*r20);
IkReal x6909=((((-1.0)*r01*x6907*x6908))+((r01*r21))+(((-1.0)*r01*x6905*x6906))+((r00*r20*x6905))+(((-1.0)*r00*x6906*x6907))+((r02*r22)));
j4eval[0]=x6909;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6908)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6910=cj5*cj5;
IkReal x6911=(r21*sj5);
IkReal x6912=(r11*r21);
IkReal x6913=((1.0)*cj5*r20);
IkReal x6914=((((-1.0)*r11*sj5*x6913))+(((-1.0)*x6910*x6912))+((r12*r22))+((r10*r20*x6910))+x6912+(((-1.0)*cj5*r10*x6911)));
j4eval[0]=x6914;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6913))+((sj0*x6911))))));
j4eval[2]=IKsign(x6914);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6915=cj5*cj5;
IkReal x6916=(r21*sj5);
IkReal x6917=(r11*r21);
IkReal x6918=((1.0)*cj5*r20);
CheckValue<IkReal> x6919 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6918))+((sj0*x6916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6919.valid){
continue;
}
CheckValue<IkReal> x6920=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x6918))+((r12*r22))+((r10*r20*x6915))+x6917+(((-1.0)*x6915*x6917))+(((-1.0)*cj5*r10*x6916)))),-1);
if(!x6920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6919.value)+(((1.5707963267949)*(x6920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6921=IKsin(j4);
IkReal x6922=IKcos(j4);
IkReal x6923=(r11*sj5);
IkReal x6924=(cj5*r00);
IkReal x6925=(cj5*r10);
IkReal x6926=(r21*sj5);
IkReal x6927=(cj5*r20);
IkReal x6928=(r01*sj5);
IkReal x6929=((1.0)*x6922);
IkReal x6930=((1.0)*x6921);
evalcond[0]=(((x6921*x6926))+(((-1.0)*r22*x6929))+(((-1.0)*x6927*x6930)));
evalcond[1]=(((x6922*x6927))+(((-1.0)*r22*x6930))+(((-1.0)*x6926*x6929)));
evalcond[2]=(((x6921*x6923))+cj0+(((-1.0)*x6925*x6930))+(((-1.0)*r12*x6929)));
evalcond[3]=(cj0+((x6922*x6924))+(((-1.0)*r02*x6930))+(((-1.0)*x6928*x6929)));
evalcond[4]=(sj0+((x6922*x6925))+(((-1.0)*r12*x6930))+(((-1.0)*x6923*x6929)));
evalcond[5]=(((x6921*x6928))+(((-1.0)*sj0))+(((-1.0)*x6924*x6930))+(((-1.0)*r02*x6929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6931=cj5*cj5;
IkReal x6932=((1.0)*r21);
IkReal x6933=(cj5*sj5);
IkReal x6934=((1.0)*r20);
CheckValue<IkReal> x6935=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x6933*x6934))+(((-1.0)*r01*x6931*x6932))+((r00*r20*x6931))+((r02*r22))+(((-1.0)*r00*x6932*x6933)))),-1);
if(!x6935.valid){
continue;
}
CheckValue<IkReal> x6936 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6934)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6935.value)))+(x6936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6937=IKsin(j4);
IkReal x6938=IKcos(j4);
IkReal x6939=(r11*sj5);
IkReal x6940=(cj5*r00);
IkReal x6941=(cj5*r10);
IkReal x6942=(r21*sj5);
IkReal x6943=(cj5*r20);
IkReal x6944=(r01*sj5);
IkReal x6945=((1.0)*x6938);
IkReal x6946=((1.0)*x6937);
evalcond[0]=((((-1.0)*x6943*x6946))+(((-1.0)*r22*x6945))+((x6937*x6942)));
evalcond[1]=(((x6938*x6943))+(((-1.0)*x6942*x6945))+(((-1.0)*r22*x6946)));
evalcond[2]=(cj0+(((-1.0)*r12*x6945))+(((-1.0)*x6941*x6946))+((x6937*x6939)));
evalcond[3]=(cj0+((x6938*x6940))+(((-1.0)*r02*x6946))+(((-1.0)*x6944*x6945)));
evalcond[4]=(sj0+(((-1.0)*r12*x6946))+((x6938*x6941))+(((-1.0)*x6939*x6945)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6945))+((x6937*x6944))+(((-1.0)*x6940*x6946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6947=((1.0)*cj5);
CheckValue<IkReal> x6948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6947)))),-1);
if(!x6948.valid){
continue;
}
CheckValue<IkReal> x6949 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6948.value)))+(x6949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6950=IKsin(j4);
IkReal x6951=IKcos(j4);
IkReal x6952=(r11*sj5);
IkReal x6953=(cj5*r00);
IkReal x6954=(cj5*r10);
IkReal x6955=(r21*sj5);
IkReal x6956=(cj5*r20);
IkReal x6957=(r01*sj5);
IkReal x6958=((1.0)*x6951);
IkReal x6959=((1.0)*x6950);
evalcond[0]=((((-1.0)*x6956*x6959))+((x6950*x6955))+(((-1.0)*r22*x6958)));
evalcond[1]=((((-1.0)*x6955*x6958))+((x6951*x6956))+(((-1.0)*r22*x6959)));
evalcond[2]=(cj0+(((-1.0)*r12*x6958))+((x6950*x6952))+(((-1.0)*x6954*x6959)));
evalcond[3]=(cj0+((x6951*x6953))+(((-1.0)*r02*x6959))+(((-1.0)*x6957*x6958)));
evalcond[4]=(sj0+(((-1.0)*r12*x6959))+(((-1.0)*x6952*x6958))+((x6951*x6954)));
evalcond[5]=((((-1.0)*sj0))+((x6950*x6957))+(((-1.0)*r02*x6958))+(((-1.0)*x6953*x6959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6960=((1.0)*sj5);
IkReal x6961=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x6960))+(((-1.0)*r11*x6961)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6961))+(((-1.0)*r00*x6960)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x6960))+(((-1.0)*r11*x6961))))+IKsqr(((((-1.0)*r01*x6961))+(((-1.0)*r00*x6960))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x6960))+(((-1.0)*r11*x6961))), ((((-1.0)*r01*x6961))+(((-1.0)*r00*x6960))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6962=IKsin(j0);
IkReal x6963=IKcos(j0);
IkReal x6964=(cj5*r01);
IkReal x6965=(cj5*r11);
IkReal x6966=((0.1157)*sj5);
IkReal x6967=((1.0)*sj5);
evalcond[0]=((((-1.0)*x6964))+(((-1.0)*x6963))+(((-1.0)*r00*x6967)));
evalcond[1]=((((-1.0)*x6962))+(((-1.0)*x6965))+(((-1.0)*r10*x6967)));
evalcond[2]=((((-0.1157)*x6964))+(((-1.0)*px))+(((-0.16394)*x6962))+(((-1.0)*r00*x6966)));
evalcond[3]=((((-1.0)*r10*x6966))+(((-0.1157)*x6965))+(((-1.0)*py))+(((0.16394)*x6963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6968=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6968;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6969=((1.0)*cj5);
IkReal x6970=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6969)));
j4eval[0]=x6970;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6969))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6971=cj5*cj5;
IkReal x6972=r21*r21;
IkReal x6973=(r21*sj5);
IkReal x6974=(cj5*r20);
IkReal x6975=((r22*r22)+((x6971*(r20*r20)))+(((-1.0)*x6971*x6972))+(((-2.0)*x6973*x6974))+x6972);
j4eval[0]=x6975;
j4eval[1]=IKsign(x6975);
j4eval[2]=((IKabs(((((-1.0)*x6974))+x6973)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6976=cj5*cj5;
IkReal x6977=r21*r21;
IkReal x6978=(r21*sj5);
IkReal x6979=(cj5*r20);
CheckValue<IkReal> x6980=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x6978*x6979))+x6977+(((-1.0)*x6976*x6977))+((x6976*(r20*r20))))),-1);
if(!x6980.valid){
continue;
}
CheckValue<IkReal> x6981 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x6979))+x6978)),IKFAST_ATAN2_MAGTHRESH);
if(!x6981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6980.value)))+(x6981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6982=IKsin(j4);
IkReal x6983=IKcos(j4);
IkReal x6984=(r11*sj5);
IkReal x6985=(r21*sj5);
IkReal x6986=(cj5*r00);
IkReal x6987=(cj5*r20);
IkReal x6988=(r01*sj5);
IkReal x6989=(cj5*r10);
IkReal x6990=((1.0)*x6983);
IkReal x6991=((1.0)*x6982);
evalcond[0]=(((x6982*x6985))+(((-1.0)*r22*x6990))+(((-1.0)*x6987*x6991)));
evalcond[1]=(((x6983*x6986))+(((-1.0)*r02*x6991))+(((-1.0)*x6988*x6990)));
evalcond[2]=((((-1.0)*r12*x6991))+(((-1.0)*x6984*x6990))+((x6983*x6989)));
evalcond[3]=((((-1.0)*r12*x6990))+cj0+((x6982*x6984))+(((-1.0)*x6989*x6991)));
evalcond[4]=((1.0)+((x6983*x6987))+(((-1.0)*x6985*x6990))+(((-1.0)*r22*x6991)));
evalcond[5]=((((-1.0)*sj0))+((x6982*x6988))+(((-1.0)*x6986*x6991))+(((-1.0)*r02*x6990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6992=((1.0)*cj5);
CheckValue<IkReal> x6993 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6993.valid){
continue;
}
CheckValue<IkReal> x6994=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6992)))),-1);
if(!x6994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6993.value)+(((1.5707963267949)*(x6994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6995=IKsin(j4);
IkReal x6996=IKcos(j4);
IkReal x6997=(r11*sj5);
IkReal x6998=(r21*sj5);
IkReal x6999=(cj5*r00);
IkReal x7000=(cj5*r20);
IkReal x7001=(r01*sj5);
IkReal x7002=(cj5*r10);
IkReal x7003=((1.0)*x6996);
IkReal x7004=((1.0)*x6995);
evalcond[0]=((((-1.0)*r22*x7003))+(((-1.0)*x7000*x7004))+((x6995*x6998)));
evalcond[1]=((((-1.0)*r02*x7004))+(((-1.0)*x7001*x7003))+((x6996*x6999)));
evalcond[2]=((((-1.0)*r12*x7004))+((x6996*x7002))+(((-1.0)*x6997*x7003)));
evalcond[3]=((((-1.0)*r12*x7003))+cj0+(((-1.0)*x7002*x7004))+((x6995*x6997)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7004))+((x6996*x7000))+(((-1.0)*x6998*x7003)));
evalcond[5]=((((-1.0)*r02*x7003))+(((-1.0)*sj0))+((x6995*x7001))+(((-1.0)*x6999*x7004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7005 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7005.valid){
continue;
}
CheckValue<IkReal> x7006=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7005.value)+(((1.5707963267949)*(x7006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7007=IKsin(j4);
IkReal x7008=IKcos(j4);
IkReal x7009=(r11*sj5);
IkReal x7010=(r21*sj5);
IkReal x7011=(cj5*r00);
IkReal x7012=(cj5*r20);
IkReal x7013=(r01*sj5);
IkReal x7014=(cj5*r10);
IkReal x7015=((1.0)*x7008);
IkReal x7016=((1.0)*x7007);
evalcond[0]=((((-1.0)*r22*x7015))+(((-1.0)*x7012*x7016))+((x7007*x7010)));
evalcond[1]=(((x7008*x7011))+(((-1.0)*x7013*x7015))+(((-1.0)*r02*x7016)));
evalcond[2]=((((-1.0)*x7009*x7015))+((x7008*x7014))+(((-1.0)*r12*x7016)));
evalcond[3]=(cj0+((x7007*x7009))+(((-1.0)*r12*x7015))+(((-1.0)*x7014*x7016)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7016))+(((-1.0)*x7010*x7015))+((x7008*x7012)));
evalcond[5]=((((-1.0)*x7011*x7016))+(((-1.0)*sj0))+((x7007*x7013))+(((-1.0)*r02*x7015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482552106799)*py))+(((-0.462579933468263)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482552106799)*px))+(((0.462579933468263)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482552106799)*py))+(((-0.462579933468263)*px))))+IKsqr(((((-1.61482552106799)*px))+(((0.462579933468263)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482552106799)*py))+(((-0.462579933468263)*px))), ((((-1.61482552106799)*px))+(((0.462579933468263)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7017=IKcos(j0);
IkReal x7018=IKsin(j0);
evalcond[0]=((((-0.16394)*x7018))+(((-1.0)*px))+(((-0.5723)*x7017)));
evalcond[1]=((((0.16394)*x7017))+(((-1.0)*py))+(((-0.5723)*x7018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7019=((1.0)*cj5);
IkReal x7020=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7019)));
j4eval[0]=x7020;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7019)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7020);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7021=cj5*cj5;
IkReal x7022=((1.0)*r21);
IkReal x7023=(cj5*sj5);
IkReal x7024=((1.0)*r20);
IkReal x7025=((((-1.0)*r01*x7021*x7022))+(((-1.0)*r01*x7023*x7024))+((r01*r21))+((r00*r20*x7021))+((r02*r22))+(((-1.0)*r00*x7022*x7023)));
j4eval[0]=x7025;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x7024))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7026=cj5*cj5;
IkReal x7027=(r21*sj5);
IkReal x7028=(r11*r21);
IkReal x7029=((1.0)*cj5*r20);
IkReal x7030=(x7028+((r10*r20*x7026))+((r12*r22))+(((-1.0)*x7026*x7028))+(((-1.0)*r11*sj5*x7029))+(((-1.0)*cj5*r10*x7027)));
j4eval[0]=x7030;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7027))+(((-1.0)*sj0*x7029))))));
j4eval[2]=IKsign(x7030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7031=cj5*cj5;
IkReal x7032=(r21*sj5);
IkReal x7033=(r11*r21);
IkReal x7034=((1.0)*cj5*r20);
CheckValue<IkReal> x7035=IKPowWithIntegerCheck(IKsign((x7033+(((-1.0)*r11*sj5*x7034))+(((-1.0)*x7031*x7033))+((r12*r22))+((r10*r20*x7031))+(((-1.0)*cj5*r10*x7032)))),-1);
if(!x7035.valid){
continue;
}
CheckValue<IkReal> x7036 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7032))+(((-1.0)*sj0*x7034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7035.value)))+(x7036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7037=IKsin(j4);
IkReal x7038=IKcos(j4);
IkReal x7039=(r11*sj5);
IkReal x7040=(cj5*r00);
IkReal x7041=(cj5*r10);
IkReal x7042=(r21*sj5);
IkReal x7043=(cj5*r20);
IkReal x7044=(r01*sj5);
IkReal x7045=((1.0)*x7038);
IkReal x7046=((1.0)*x7037);
evalcond[0]=((((-1.0)*r22*x7045))+(((-1.0)*x7043*x7046))+((x7037*x7042)));
evalcond[1]=((((-1.0)*r22*x7046))+(((-1.0)*x7042*x7045))+((x7038*x7043)));
evalcond[2]=(cj0+(((-1.0)*r12*x7045))+((x7037*x7039))+(((-1.0)*x7041*x7046)));
evalcond[3]=(cj0+(((-1.0)*r02*x7046))+(((-1.0)*x7044*x7045))+((x7038*x7040)));
evalcond[4]=(sj0+(((-1.0)*r12*x7046))+(((-1.0)*x7039*x7045))+((x7038*x7041)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7045))+(((-1.0)*x7040*x7046))+((x7037*x7044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7047=cj5*cj5;
IkReal x7048=((1.0)*r21);
IkReal x7049=(cj5*sj5);
IkReal x7050=((1.0)*r20);
CheckValue<IkReal> x7051=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7047*x7048))+(((-1.0)*r01*x7049*x7050))+((r01*r21))+(((-1.0)*r00*x7048*x7049))+((r00*r20*x7047))+((r02*r22)))),-1);
if(!x7051.valid){
continue;
}
CheckValue<IkReal> x7052 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7051.value)))+(x7052.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7053=IKsin(j4);
IkReal x7054=IKcos(j4);
IkReal x7055=(r11*sj5);
IkReal x7056=(cj5*r00);
IkReal x7057=(cj5*r10);
IkReal x7058=(r21*sj5);
IkReal x7059=(cj5*r20);
IkReal x7060=(r01*sj5);
IkReal x7061=((1.0)*x7054);
IkReal x7062=((1.0)*x7053);
evalcond[0]=((((-1.0)*x7059*x7062))+(((-1.0)*r22*x7061))+((x7053*x7058)));
evalcond[1]=((((-1.0)*x7058*x7061))+((x7054*x7059))+(((-1.0)*r22*x7062)));
evalcond[2]=(cj0+(((-1.0)*r12*x7061))+((x7053*x7055))+(((-1.0)*x7057*x7062)));
evalcond[3]=(cj0+(((-1.0)*r02*x7062))+(((-1.0)*x7060*x7061))+((x7054*x7056)));
evalcond[4]=(sj0+(((-1.0)*r12*x7062))+(((-1.0)*x7055*x7061))+((x7054*x7057)));
evalcond[5]=((((-1.0)*x7056*x7062))+(((-1.0)*sj0))+((x7053*x7060))+(((-1.0)*r02*x7061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7063=((1.0)*cj5);
CheckValue<IkReal> x7064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7063))+(((-1.0)*r00*sj5)))),-1);
if(!x7064.valid){
continue;
}
CheckValue<IkReal> x7065 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7063)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7064.value)))+(x7065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7066=IKsin(j4);
IkReal x7067=IKcos(j4);
IkReal x7068=(r11*sj5);
IkReal x7069=(cj5*r00);
IkReal x7070=(cj5*r10);
IkReal x7071=(r21*sj5);
IkReal x7072=(cj5*r20);
IkReal x7073=(r01*sj5);
IkReal x7074=((1.0)*x7067);
IkReal x7075=((1.0)*x7066);
evalcond[0]=((((-1.0)*x7072*x7075))+((x7066*x7071))+(((-1.0)*r22*x7074)));
evalcond[1]=(((x7067*x7072))+(((-1.0)*x7071*x7074))+(((-1.0)*r22*x7075)));
evalcond[2]=(cj0+(((-1.0)*x7070*x7075))+(((-1.0)*r12*x7074))+((x7066*x7068)));
evalcond[3]=(((x7067*x7069))+cj0+(((-1.0)*r02*x7075))+(((-1.0)*x7073*x7074)));
evalcond[4]=(sj0+((x7067*x7070))+(((-1.0)*x7068*x7074))+(((-1.0)*r12*x7075)));
evalcond[5]=((((-1.0)*x7069*x7075))+(((-1.0)*sj0))+(((-1.0)*r02*x7074))+((x7066*x7073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7076=IKsin(j0);
IkReal x7077=IKcos(j0);
IkReal x7078=(cj5*r01);
IkReal x7079=(cj5*r11);
IkReal x7080=((0.1157)*sj5);
IkReal x7081=((1.0)*sj5);
evalcond[0]=(x7077+(((-1.0)*r00*x7081))+(((-1.0)*x7078)));
evalcond[1]=(x7076+(((-1.0)*r10*x7081))+(((-1.0)*x7079)));
evalcond[2]=((((-0.1157)*x7078))+(((-1.0)*r00*x7080))+(((-1.0)*px))+(((-0.16394)*x7076)));
evalcond[3]=((((-0.1157)*x7079))+(((0.16394)*x7077))+(((-1.0)*r10*x7080))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7082=((1.0)*sj5);
IkReal x7083=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7082)));
j4eval[0]=x7083;
j4eval[1]=IKsign(x7083);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7082))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7084=((1.0)*cj5);
IkReal x7085=((((-1.0)*r01*x7084))+(((-1.0)*r00*sj5)));
j4eval[0]=x7085;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7084))))));
j4eval[2]=IKsign(x7085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7086=r21*r21;
IkReal x7087=cj5*cj5;
IkReal x7088=(r21*sj5);
IkReal x7089=(cj5*r20);
IkReal x7090=((((-1.0)*x7086))+(((-1.0)*(r22*r22)))+(((2.0)*x7088*x7089))+((x7086*x7087))+(((-1.0)*x7087*(r20*r20))));
j4eval[0]=x7090;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*x7089))+x7088))));
j4eval[2]=IKsign(x7090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7091=r21*r21;
IkReal x7092=cj5*cj5;
IkReal x7093=(r21*sj5);
IkReal x7094=(cj5*r20);
CheckValue<IkReal> x7095=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7091))+(((-1.0)*(r22*r22)))+(((2.0)*x7093*x7094))+((x7091*x7092))+(((-1.0)*x7092*(r20*r20))))),-1);
if(!x7095.valid){
continue;
}
CheckValue<IkReal> x7096 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7094))+x7093)),IKFAST_ATAN2_MAGTHRESH);
if(!x7096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7095.value)))+(x7096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7097=IKsin(j4);
IkReal x7098=IKcos(j4);
IkReal x7099=(r11*sj5);
IkReal x7100=(r21*sj5);
IkReal x7101=(cj5*r00);
IkReal x7102=(cj5*r20);
IkReal x7103=(r01*sj5);
IkReal x7104=(cj5*r10);
IkReal x7105=((1.0)*x7098);
IkReal x7106=((1.0)*x7097);
evalcond[0]=((((-1.0)*x7102*x7106))+((x7097*x7100))+(((-1.0)*r22*x7105)));
evalcond[1]=((((-1.0)*x7103*x7105))+(((-1.0)*r02*x7106))+((x7098*x7101)));
evalcond[2]=((((-1.0)*r12*x7106))+(((-1.0)*x7099*x7105))+((x7098*x7104)));
evalcond[3]=(((x7097*x7099))+cj0+(((-1.0)*r12*x7105))+(((-1.0)*x7104*x7106)));
evalcond[4]=((-1.0)+(((-1.0)*x7100*x7105))+(((-1.0)*r22*x7106))+((x7098*x7102)));
evalcond[5]=((((-1.0)*sj0))+((x7097*x7103))+(((-1.0)*x7101*x7106))+(((-1.0)*r02*x7105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7107=((1.0)*cj5);
CheckValue<IkReal> x7108 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7108.valid){
continue;
}
CheckValue<IkReal> x7109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7107)))),-1);
if(!x7109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7108.value)+(((1.5707963267949)*(x7109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7110=IKsin(j4);
IkReal x7111=IKcos(j4);
IkReal x7112=(r11*sj5);
IkReal x7113=(r21*sj5);
IkReal x7114=(cj5*r00);
IkReal x7115=(cj5*r20);
IkReal x7116=(r01*sj5);
IkReal x7117=(cj5*r10);
IkReal x7118=((1.0)*x7111);
IkReal x7119=((1.0)*x7110);
evalcond[0]=((((-1.0)*x7115*x7119))+((x7110*x7113))+(((-1.0)*r22*x7118)));
evalcond[1]=((((-1.0)*x7116*x7118))+((x7111*x7114))+(((-1.0)*r02*x7119)));
evalcond[2]=((((-1.0)*r12*x7119))+((x7111*x7117))+(((-1.0)*x7112*x7118)));
evalcond[3]=((((-1.0)*x7117*x7119))+cj0+((x7110*x7112))+(((-1.0)*r12*x7118)));
evalcond[4]=((-1.0)+((x7111*x7115))+(((-1.0)*r22*x7119))+(((-1.0)*x7113*x7118)));
evalcond[5]=((((-1.0)*sj0))+((x7110*x7116))+(((-1.0)*r02*x7118))+(((-1.0)*x7114*x7119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7120=((1.0)*sj5);
CheckValue<IkReal> x7121 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7120))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7121.valid){
continue;
}
CheckValue<IkReal> x7122=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7120)))),-1);
if(!x7122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7121.value)+(((1.5707963267949)*(x7122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7123=IKsin(j4);
IkReal x7124=IKcos(j4);
IkReal x7125=(r11*sj5);
IkReal x7126=(r21*sj5);
IkReal x7127=(cj5*r00);
IkReal x7128=(cj5*r20);
IkReal x7129=(r01*sj5);
IkReal x7130=(cj5*r10);
IkReal x7131=((1.0)*x7124);
IkReal x7132=((1.0)*x7123);
evalcond[0]=(((x7123*x7126))+(((-1.0)*r22*x7131))+(((-1.0)*x7128*x7132)));
evalcond[1]=(((x7124*x7127))+(((-1.0)*x7129*x7131))+(((-1.0)*r02*x7132)));
evalcond[2]=(((x7124*x7130))+(((-1.0)*r12*x7132))+(((-1.0)*x7125*x7131)));
evalcond[3]=((((-1.0)*x7130*x7132))+(((-1.0)*r12*x7131))+cj0+((x7123*x7125)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7132))+((x7124*x7128))+(((-1.0)*x7126*x7131)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7127*x7132))+((x7123*x7129))+(((-1.0)*r02*x7131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482552106799)*py))+(((-0.462579933468263)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482552106799)*px))+(((0.462579933468263)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482552106799)*py))+(((-0.462579933468263)*px))))+IKsqr(((((1.61482552106799)*px))+(((0.462579933468263)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482552106799)*py))+(((-0.462579933468263)*px))), ((((1.61482552106799)*px))+(((0.462579933468263)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7133=IKsin(j0);
IkReal x7134=IKcos(j0);
evalcond[0]=((((0.5723)*x7134))+(((-0.16394)*x7133))+(((-1.0)*px)));
evalcond[1]=((((0.5723)*x7133))+(((-1.0)*py))+(((0.16394)*x7134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7135=((1.0)*cj5);
IkReal x7136=((((-1.0)*r01*x7135))+(((-1.0)*r00*sj5)));
j4eval[0]=x7136;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7135)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7136);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7137=((1.0)*cj5);
IkReal x7138=((((-1.0)*r11*x7137))+(((-1.0)*r10*sj5)));
j4eval[0]=x7138;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7137)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7139=cj5*cj5;
IkReal x7140=((1.0)*sj5);
IkReal x7141=(cj5*r20);
IkReal x7142=(r11*r21);
IkReal x7143=(x7142+(((-1.0)*r11*x7140*x7141))+(((-1.0)*x7139*x7142))+((r12*r22))+((r10*r20*x7139))+(((-1.0)*cj5*r10*r21*x7140)));
j4eval[0]=x7143;
j4eval[1]=IKsign(x7143);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7140))+((cj0*x7141))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7144=cj5*cj5;
IkReal x7145=((1.0)*sj5);
IkReal x7146=(cj5*r20);
IkReal x7147=(r11*r21);
CheckValue<IkReal> x7148=IKPowWithIntegerCheck(IKsign((x7147+((r10*r20*x7144))+(((-1.0)*x7144*x7147))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7145))+(((-1.0)*r11*x7145*x7146)))),-1);
if(!x7148.valid){
continue;
}
CheckValue<IkReal> x7149 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7145))+((cj0*x7146)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7148.value)))+(x7149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7150=IKsin(j4);
IkReal x7151=IKcos(j4);
IkReal x7152=((1.0)*sj0);
IkReal x7153=(cj5*r00);
IkReal x7154=(r11*sj5);
IkReal x7155=(cj5*r10);
IkReal x7156=(r21*sj5);
IkReal x7157=(cj5*r20);
IkReal x7158=(r01*sj5);
IkReal x7159=((1.0)*x7151);
IkReal x7160=((1.0)*x7150);
evalcond[0]=((((-1.0)*x7157*x7160))+(((-1.0)*r22*x7159))+((x7150*x7156)));
evalcond[1]=((((-1.0)*r22*x7160))+(((-1.0)*x7156*x7159))+((x7151*x7157)));
evalcond[2]=((((-1.0)*r12*x7159))+(((-1.0)*x7155*x7160))+cj0+((x7150*x7154)));
evalcond[3]=(((x7150*x7158))+(((-1.0)*x7152))+(((-1.0)*r02*x7159))+(((-1.0)*x7153*x7160)));
evalcond[4]=((((-1.0)*r02*x7160))+(((-1.0)*x7158*x7159))+((x7151*x7153))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7154*x7159))+(((-1.0)*x7152))+(((-1.0)*r12*x7160))+((x7151*x7155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7161=((1.0)*cj5);
CheckValue<IkReal> x7162 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7162.valid){
continue;
}
CheckValue<IkReal> x7163=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7161)))),-1);
if(!x7163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7162.value)+(((1.5707963267949)*(x7163.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7164=IKsin(j4);
IkReal x7165=IKcos(j4);
IkReal x7166=((1.0)*sj0);
IkReal x7167=(cj5*r00);
IkReal x7168=(r11*sj5);
IkReal x7169=(cj5*r10);
IkReal x7170=(r21*sj5);
IkReal x7171=(cj5*r20);
IkReal x7172=(r01*sj5);
IkReal x7173=((1.0)*x7165);
IkReal x7174=((1.0)*x7164);
evalcond[0]=((((-1.0)*x7171*x7174))+(((-1.0)*r22*x7173))+((x7164*x7170)));
evalcond[1]=((((-1.0)*x7170*x7173))+(((-1.0)*r22*x7174))+((x7165*x7171)));
evalcond[2]=((((-1.0)*x7169*x7174))+cj0+((x7164*x7168))+(((-1.0)*r12*x7173)));
evalcond[3]=((((-1.0)*r02*x7173))+(((-1.0)*x7166))+(((-1.0)*x7167*x7174))+((x7164*x7172)));
evalcond[4]=((((-1.0)*r02*x7174))+((x7165*x7167))+(((-1.0)*x7172*x7173))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7168*x7173))+((x7165*x7169))+(((-1.0)*x7166))+(((-1.0)*r12*x7174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7175=((1.0)*cj5);
CheckValue<IkReal> x7176 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7175))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7176.valid){
continue;
}
CheckValue<IkReal> x7177=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7175)))),-1);
if(!x7177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7176.value)+(((1.5707963267949)*(x7177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7178=IKsin(j4);
IkReal x7179=IKcos(j4);
IkReal x7180=((1.0)*sj0);
IkReal x7181=(cj5*r00);
IkReal x7182=(r11*sj5);
IkReal x7183=(cj5*r10);
IkReal x7184=(r21*sj5);
IkReal x7185=(cj5*r20);
IkReal x7186=(r01*sj5);
IkReal x7187=((1.0)*x7179);
IkReal x7188=((1.0)*x7178);
evalcond[0]=(((x7178*x7184))+(((-1.0)*x7185*x7188))+(((-1.0)*r22*x7187)));
evalcond[1]=(((x7179*x7185))+(((-1.0)*x7184*x7187))+(((-1.0)*r22*x7188)));
evalcond[2]=(cj0+((x7178*x7182))+(((-1.0)*x7183*x7188))+(((-1.0)*r12*x7187)));
evalcond[3]=(((x7178*x7186))+(((-1.0)*x7180))+(((-1.0)*x7181*x7188))+(((-1.0)*r02*x7187)));
evalcond[4]=(((x7179*x7181))+(((-1.0)*x7186*x7187))+(((-1.0)*r02*x7188))+(((-1.0)*cj0)));
evalcond[5]=(((x7179*x7183))+(((-1.0)*x7180))+(((-1.0)*x7182*x7187))+(((-1.0)*r12*x7188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.11468804378898)*px))+(((-0.828504637423993)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.828504637423993)*px))+(((0.11468804378898)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.11468804378898)*px))+(((-0.828504637423993)*py))))+IKsqr(((((-0.828504637423993)*px))+(((0.11468804378898)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.11468804378898)*px))+(((-0.828504637423993)*py))), ((((-0.828504637423993)*px))+(((0.11468804378898)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7189=IKcos(j0);
IkReal x7190=IKsin(j0);
evalcond[0]=((((-0.16394)*x7190))+(((-1.0)*px))+(((-1.1843)*x7189)));
evalcond[1]=((((-1.0)*py))+(((0.16394)*x7189))+(((-1.1843)*x7190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7191=((1.0)*cj5);
IkReal x7192=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7191)));
j4eval[0]=x7192;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7191)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7192);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7193=cj5*cj5;
IkReal x7194=((1.0)*r21);
IkReal x7195=(cj5*sj5);
IkReal x7196=((1.0)*r20);
IkReal x7197=((((-1.0)*r01*x7193*x7194))+(((-1.0)*r01*x7195*x7196))+((r01*r21))+((r00*r20*x7193))+((r02*r22))+(((-1.0)*r00*x7194*x7195)));
j4eval[0]=x7197;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7196)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7197);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7198=cj5*cj5;
IkReal x7199=(r21*sj5);
IkReal x7200=(r11*r21);
IkReal x7201=((1.0)*cj5*r20);
IkReal x7202=(x7200+((r12*r22))+((r10*r20*x7198))+(((-1.0)*cj5*r10*x7199))+(((-1.0)*x7198*x7200))+(((-1.0)*r11*sj5*x7201)));
j4eval[0]=x7202;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7199))+(((-1.0)*sj0*x7201))))));
j4eval[2]=IKsign(x7202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7203=cj5*cj5;
IkReal x7204=(r21*sj5);
IkReal x7205=(r11*r21);
IkReal x7206=((1.0)*cj5*r20);
CheckValue<IkReal> x7207=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x7204))+x7205+((r10*r20*x7203))+((r12*r22))+(((-1.0)*x7203*x7205))+(((-1.0)*r11*sj5*x7206)))),-1);
if(!x7207.valid){
continue;
}
CheckValue<IkReal> x7208 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7206))+((sj0*x7204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7207.value)))+(x7208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7209=IKsin(j4);
IkReal x7210=IKcos(j4);
IkReal x7211=(r11*sj5);
IkReal x7212=(cj5*r00);
IkReal x7213=(cj5*r10);
IkReal x7214=(r21*sj5);
IkReal x7215=(cj5*r20);
IkReal x7216=(r01*sj5);
IkReal x7217=((1.0)*x7210);
IkReal x7218=((1.0)*x7209);
evalcond[0]=((((-1.0)*x7215*x7218))+((x7209*x7214))+(((-1.0)*r22*x7217)));
evalcond[1]=(((x7210*x7215))+(((-1.0)*x7214*x7217))+(((-1.0)*r22*x7218)));
evalcond[2]=((((-1.0)*x7213*x7218))+cj0+((x7209*x7211))+(((-1.0)*r12*x7217)));
evalcond[3]=(cj0+((x7210*x7212))+(((-1.0)*r02*x7218))+(((-1.0)*x7216*x7217)));
evalcond[4]=(sj0+((x7210*x7213))+(((-1.0)*r12*x7218))+(((-1.0)*x7211*x7217)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7212*x7218))+((x7209*x7216))+(((-1.0)*r02*x7217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7219=cj5*cj5;
IkReal x7220=((1.0)*r21);
IkReal x7221=(cj5*sj5);
IkReal x7222=((1.0)*r20);
CheckValue<IkReal> x7223=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7220*x7221))+((r01*r21))+((r00*r20*x7219))+(((-1.0)*r01*x7219*x7220))+((r02*r22))+(((-1.0)*r01*x7221*x7222)))),-1);
if(!x7223.valid){
continue;
}
CheckValue<IkReal> x7224 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7222)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7223.value)))+(x7224.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7225=IKsin(j4);
IkReal x7226=IKcos(j4);
IkReal x7227=(r11*sj5);
IkReal x7228=(cj5*r00);
IkReal x7229=(cj5*r10);
IkReal x7230=(r21*sj5);
IkReal x7231=(cj5*r20);
IkReal x7232=(r01*sj5);
IkReal x7233=((1.0)*x7226);
IkReal x7234=((1.0)*x7225);
evalcond[0]=((((-1.0)*x7231*x7234))+((x7225*x7230))+(((-1.0)*r22*x7233)));
evalcond[1]=((((-1.0)*x7230*x7233))+(((-1.0)*r22*x7234))+((x7226*x7231)));
evalcond[2]=(cj0+(((-1.0)*x7229*x7234))+(((-1.0)*r12*x7233))+((x7225*x7227)));
evalcond[3]=(cj0+(((-1.0)*x7232*x7233))+(((-1.0)*r02*x7234))+((x7226*x7228)));
evalcond[4]=(sj0+(((-1.0)*x7227*x7233))+((x7226*x7229))+(((-1.0)*r12*x7234)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7228*x7234))+((x7225*x7232))+(((-1.0)*r02*x7233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7235=((1.0)*cj5);
CheckValue<IkReal> x7236 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7236.valid){
continue;
}
CheckValue<IkReal> x7237=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7235)))),-1);
if(!x7237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7236.value)+(((1.5707963267949)*(x7237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7238=IKsin(j4);
IkReal x7239=IKcos(j4);
IkReal x7240=(r11*sj5);
IkReal x7241=(cj5*r00);
IkReal x7242=(cj5*r10);
IkReal x7243=(r21*sj5);
IkReal x7244=(cj5*r20);
IkReal x7245=(r01*sj5);
IkReal x7246=((1.0)*x7239);
IkReal x7247=((1.0)*x7238);
evalcond[0]=((((-1.0)*x7244*x7247))+((x7238*x7243))+(((-1.0)*r22*x7246)));
evalcond[1]=((((-1.0)*r22*x7247))+((x7239*x7244))+(((-1.0)*x7243*x7246)));
evalcond[2]=((((-1.0)*r12*x7246))+cj0+((x7238*x7240))+(((-1.0)*x7242*x7247)));
evalcond[3]=((((-1.0)*x7245*x7246))+cj0+(((-1.0)*r02*x7247))+((x7239*x7241)));
evalcond[4]=(sj0+(((-1.0)*r12*x7247))+((x7239*x7242))+(((-1.0)*x7240*x7246)));
evalcond[5]=((((-1.0)*sj0))+((x7238*x7245))+(((-1.0)*r02*x7246))+(((-1.0)*x7241*x7247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.3953122064836)*py))+(((-5.76190133831036)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.3953122064836)*px))+(((5.76190133831036)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.3953122064836)*py))+(((-5.76190133831036)*px))))+IKsqr(((((-1.3953122064836)*px))+(((5.76190133831036)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.3953122064836)*py))+(((-5.76190133831036)*px))), ((((-1.3953122064836)*px))+(((5.76190133831036)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7248=IKcos(j0);
IkReal x7249=IKsin(j0);
evalcond[0]=((((-0.0397)*x7248))+(((-1.0)*px))+(((-0.16394)*x7249)));
evalcond[1]=((((0.16394)*x7248))+(((-0.0397)*x7249))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7250=((1.0)*cj5);
IkReal x7251=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7250)));
j4eval[0]=x7251;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7250)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7251);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7252=((1.0)*cj5);
IkReal x7253=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7252)));
j4eval[0]=x7253;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7252))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7254=cj5*cj5;
IkReal x7255=((1.0)*sj5);
IkReal x7256=(cj5*r20);
IkReal x7257=(r11*r21);
IkReal x7258=(x7257+(((-1.0)*x7254*x7257))+(((-1.0)*r11*x7255*x7256))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7255))+((r10*r20*x7254)));
j4eval[0]=x7258;
j4eval[1]=IKsign(x7258);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7255))+((cj0*x7256))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7259=cj5*cj5;
IkReal x7260=((1.0)*sj5);
IkReal x7261=(cj5*r20);
IkReal x7262=(r11*r21);
CheckValue<IkReal> x7263 = IKatan2WithCheck(IkReal((((cj0*x7261))+(((-1.0)*cj0*r21*x7260)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7263.valid){
continue;
}
CheckValue<IkReal> x7264=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x7260))+x7262+((r12*r22))+((r10*r20*x7259))+(((-1.0)*r11*x7260*x7261))+(((-1.0)*x7259*x7262)))),-1);
if(!x7264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7263.value)+(((1.5707963267949)*(x7264.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7265=IKsin(j4);
IkReal x7266=IKcos(j4);
IkReal x7267=((1.0)*sj0);
IkReal x7268=(cj5*r00);
IkReal x7269=(r11*sj5);
IkReal x7270=(cj5*r10);
IkReal x7271=(r21*sj5);
IkReal x7272=(cj5*r20);
IkReal x7273=(r01*sj5);
IkReal x7274=((1.0)*x7266);
IkReal x7275=((1.0)*x7265);
evalcond[0]=(((x7265*x7271))+(((-1.0)*r22*x7274))+(((-1.0)*x7272*x7275)));
evalcond[1]=((((-1.0)*r22*x7275))+(((-1.0)*x7271*x7274))+((x7266*x7272)));
evalcond[2]=(cj0+(((-1.0)*r12*x7274))+((x7265*x7269))+(((-1.0)*x7270*x7275)));
evalcond[3]=(((x7265*x7273))+(((-1.0)*x7267))+(((-1.0)*r02*x7274))+(((-1.0)*x7268*x7275)));
evalcond[4]=((((-1.0)*x7273*x7274))+(((-1.0)*r02*x7275))+((x7266*x7268))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7275))+(((-1.0)*x7267))+(((-1.0)*x7269*x7274))+((x7266*x7270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7276=((1.0)*cj5);
CheckValue<IkReal> x7277=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7276))+(((-1.0)*r10*sj5)))),-1);
if(!x7277.valid){
continue;
}
CheckValue<IkReal> x7278 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7276))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7277.value)))+(x7278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7279=IKsin(j4);
IkReal x7280=IKcos(j4);
IkReal x7281=((1.0)*sj0);
IkReal x7282=(cj5*r00);
IkReal x7283=(r11*sj5);
IkReal x7284=(cj5*r10);
IkReal x7285=(r21*sj5);
IkReal x7286=(cj5*r20);
IkReal x7287=(r01*sj5);
IkReal x7288=((1.0)*x7280);
IkReal x7289=((1.0)*x7279);
evalcond[0]=((((-1.0)*x7286*x7289))+((x7279*x7285))+(((-1.0)*r22*x7288)));
evalcond[1]=(((x7280*x7286))+(((-1.0)*x7285*x7288))+(((-1.0)*r22*x7289)));
evalcond[2]=((((-1.0)*x7284*x7289))+cj0+(((-1.0)*r12*x7288))+((x7279*x7283)));
evalcond[3]=((((-1.0)*x7282*x7289))+(((-1.0)*x7281))+((x7279*x7287))+(((-1.0)*r02*x7288)));
evalcond[4]=(((x7280*x7282))+(((-1.0)*x7287*x7288))+(((-1.0)*r02*x7289))+(((-1.0)*cj0)));
evalcond[5]=(((x7280*x7284))+(((-1.0)*x7281))+(((-1.0)*r12*x7289))+(((-1.0)*x7283*x7288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7290=((1.0)*cj5);
CheckValue<IkReal> x7291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7290))+(((-1.0)*r00*sj5)))),-1);
if(!x7291.valid){
continue;
}
CheckValue<IkReal> x7292 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7291.value)))+(x7292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7293=IKsin(j4);
IkReal x7294=IKcos(j4);
IkReal x7295=((1.0)*sj0);
IkReal x7296=(cj5*r00);
IkReal x7297=(r11*sj5);
IkReal x7298=(cj5*r10);
IkReal x7299=(r21*sj5);
IkReal x7300=(cj5*r20);
IkReal x7301=(r01*sj5);
IkReal x7302=((1.0)*x7294);
IkReal x7303=((1.0)*x7293);
evalcond[0]=(((x7293*x7299))+(((-1.0)*x7300*x7303))+(((-1.0)*r22*x7302)));
evalcond[1]=(((x7294*x7300))+(((-1.0)*x7299*x7302))+(((-1.0)*r22*x7303)));
evalcond[2]=(cj0+((x7293*x7297))+(((-1.0)*r12*x7302))+(((-1.0)*x7298*x7303)));
evalcond[3]=((((-1.0)*r02*x7302))+((x7293*x7301))+(((-1.0)*x7295))+(((-1.0)*x7296*x7303)));
evalcond[4]=((((-1.0)*r02*x7303))+(((-1.0)*x7301*x7302))+(((-1.0)*cj0))+((x7294*x7296)));
evalcond[5]=((((-1.0)*x7297*x7302))+(((-1.0)*x7295))+(((-1.0)*r12*x7303))+((x7294*x7298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7304=IKsin(j0);
IkReal x7305=IKcos(j0);
IkReal x7306=(cj5*r01);
IkReal x7307=(cj5*r11);
IkReal x7308=((0.1157)*sj5);
IkReal x7309=((1.0)*sj5);
evalcond[0]=(x7305+(((-1.0)*x7306))+(((-1.0)*r00*x7309)));
evalcond[1]=(x7304+(((-1.0)*x7307))+(((-1.0)*r10*x7309)));
evalcond[2]=((((-1.0)*px))+(((-0.16394)*x7304))+(((-1.0)*r00*x7308))+(((-0.1157)*x7306)));
evalcond[3]=((((0.16394)*x7305))+(((-1.0)*py))+(((-1.0)*r10*x7308))+(((-0.1157)*x7307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7310=((1.0)*sj5);
IkReal x7311=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7310)));
j4eval[0]=x7311;
j4eval[1]=IKsign(x7311);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7310))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7312=((1.0)*cj5);
IkReal x7313=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7312)));
j4eval[0]=x7313;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7312)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7313);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7314=r21*r21;
IkReal x7315=cj5*cj5;
IkReal x7316=(r21*sj5);
IkReal x7317=(cj5*r20);
IkReal x7318=((((-1.0)*x7315*(r20*r20)))+(((-1.0)*x7314))+(((-1.0)*(r22*r22)))+((x7314*x7315))+(((2.0)*x7316*x7317)));
j4eval[0]=x7318;
j4eval[1]=((IKabs(r22))+(IKabs((x7316+(((-1.0)*x7317))))));
j4eval[2]=IKsign(x7318);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7319=r21*r21;
IkReal x7320=cj5*cj5;
IkReal x7321=(r21*sj5);
IkReal x7322=(cj5*r20);
CheckValue<IkReal> x7323=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7319))+(((2.0)*x7321*x7322))+(((-1.0)*(r22*r22)))+(((-1.0)*x7320*(r20*r20)))+((x7319*x7320)))),-1);
if(!x7323.valid){
continue;
}
CheckValue<IkReal> x7324 = IKatan2WithCheck(IkReal(r22),IkReal((x7321+(((-1.0)*x7322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7323.value)))+(x7324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7325=IKsin(j4);
IkReal x7326=IKcos(j4);
IkReal x7327=(r11*sj5);
IkReal x7328=(r21*sj5);
IkReal x7329=(cj5*r00);
IkReal x7330=(cj5*r20);
IkReal x7331=(r01*sj5);
IkReal x7332=(cj5*r10);
IkReal x7333=((1.0)*x7326);
IkReal x7334=((1.0)*x7325);
evalcond[0]=(((x7325*x7328))+(((-1.0)*r22*x7333))+(((-1.0)*x7330*x7334)));
evalcond[1]=((((-1.0)*r02*x7334))+((x7326*x7329))+(((-1.0)*x7331*x7333)));
evalcond[2]=((((-1.0)*x7327*x7333))+(((-1.0)*r12*x7334))+((x7326*x7332)));
evalcond[3]=(cj0+(((-1.0)*r12*x7333))+((x7325*x7327))+(((-1.0)*x7332*x7334)));
evalcond[4]=((-1.0)+(((-1.0)*x7328*x7333))+((x7326*x7330))+(((-1.0)*r22*x7334)));
evalcond[5]=((((-1.0)*r02*x7333))+(((-1.0)*sj0))+((x7325*x7331))+(((-1.0)*x7329*x7334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7335=((1.0)*cj5);
CheckValue<IkReal> x7336=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7335)))),-1);
if(!x7336.valid){
continue;
}
CheckValue<IkReal> x7337 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7336.value)))+(x7337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7338=IKsin(j4);
IkReal x7339=IKcos(j4);
IkReal x7340=(r11*sj5);
IkReal x7341=(r21*sj5);
IkReal x7342=(cj5*r00);
IkReal x7343=(cj5*r20);
IkReal x7344=(r01*sj5);
IkReal x7345=(cj5*r10);
IkReal x7346=((1.0)*x7339);
IkReal x7347=((1.0)*x7338);
evalcond[0]=((((-1.0)*r22*x7346))+(((-1.0)*x7343*x7347))+((x7338*x7341)));
evalcond[1]=(((x7339*x7342))+(((-1.0)*x7344*x7346))+(((-1.0)*r02*x7347)));
evalcond[2]=(((x7339*x7345))+(((-1.0)*r12*x7347))+(((-1.0)*x7340*x7346)));
evalcond[3]=(cj0+(((-1.0)*r12*x7346))+(((-1.0)*x7345*x7347))+((x7338*x7340)));
evalcond[4]=((-1.0)+((x7339*x7343))+(((-1.0)*r22*x7347))+(((-1.0)*x7341*x7346)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7342*x7347))+(((-1.0)*r02*x7346))+((x7338*x7344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7348=((1.0)*sj5);
CheckValue<IkReal> x7349=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7348)))),-1);
if(!x7349.valid){
continue;
}
CheckValue<IkReal> x7350 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7348))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7349.value)))+(x7350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7351=IKsin(j4);
IkReal x7352=IKcos(j4);
IkReal x7353=(r11*sj5);
IkReal x7354=(r21*sj5);
IkReal x7355=(cj5*r00);
IkReal x7356=(cj5*r20);
IkReal x7357=(r01*sj5);
IkReal x7358=(cj5*r10);
IkReal x7359=((1.0)*x7352);
IkReal x7360=((1.0)*x7351);
evalcond[0]=((((-1.0)*r22*x7359))+(((-1.0)*x7356*x7360))+((x7351*x7354)));
evalcond[1]=(((x7352*x7355))+(((-1.0)*x7357*x7359))+(((-1.0)*r02*x7360)));
evalcond[2]=(((x7352*x7358))+(((-1.0)*r12*x7360))+(((-1.0)*x7353*x7359)));
evalcond[3]=(cj0+(((-1.0)*r12*x7359))+((x7351*x7353))+(((-1.0)*x7358*x7360)));
evalcond[4]=((-1.0)+((x7352*x7356))+(((-1.0)*r22*x7360))+(((-1.0)*x7354*x7359)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7359))+((x7351*x7357))+(((-1.0)*x7355*x7360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482552106799)*py))+(((-0.462579933468263)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482552106799)*px))+(((0.462579933468263)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482552106799)*py))+(((-0.462579933468263)*px))))+IKsqr(((((1.61482552106799)*px))+(((0.462579933468263)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482552106799)*py))+(((-0.462579933468263)*px))), ((((1.61482552106799)*px))+(((0.462579933468263)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7361=IKsin(j0);
IkReal x7362=IKcos(j0);
evalcond[0]=((((-0.16394)*x7361))+(((-1.0)*px))+(((0.5723)*x7362)));
evalcond[1]=((((0.16394)*x7362))+(((-1.0)*py))+(((0.5723)*x7361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7363=((1.0)*cj5);
IkReal x7364=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7363)));
j4eval[0]=x7364;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x7363))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x7364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7365=((1.0)*cj5);
IkReal x7366=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7365)));
j4eval[0]=x7366;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7365))))));
j4eval[2]=IKsign(x7366);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7367=cj5*cj5;
IkReal x7368=((1.0)*sj5);
IkReal x7369=(cj5*r20);
IkReal x7370=(r11*r21);
IkReal x7371=(x7370+(((-1.0)*r11*x7368*x7369))+((r12*r22))+((r10*r20*x7367))+(((-1.0)*x7367*x7370))+(((-1.0)*cj5*r10*r21*x7368)));
j4eval[0]=x7371;
j4eval[1]=IKsign(x7371);
j4eval[2]=((IKabs((((cj0*x7369))+(((-1.0)*cj0*r21*x7368)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7372=cj5*cj5;
IkReal x7373=((1.0)*sj5);
IkReal x7374=(cj5*r20);
IkReal x7375=(r11*r21);
CheckValue<IkReal> x7376 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7373))+((cj0*x7374)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7376.valid){
continue;
}
CheckValue<IkReal> x7377=IKPowWithIntegerCheck(IKsign((x7375+((r10*r20*x7372))+(((-1.0)*cj5*r10*r21*x7373))+((r12*r22))+(((-1.0)*x7372*x7375))+(((-1.0)*r11*x7373*x7374)))),-1);
if(!x7377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7376.value)+(((1.5707963267949)*(x7377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7378=IKsin(j4);
IkReal x7379=IKcos(j4);
IkReal x7380=((1.0)*sj0);
IkReal x7381=(cj5*r00);
IkReal x7382=(r11*sj5);
IkReal x7383=(cj5*r10);
IkReal x7384=(r21*sj5);
IkReal x7385=(cj5*r20);
IkReal x7386=(r01*sj5);
IkReal x7387=((1.0)*x7379);
IkReal x7388=((1.0)*x7378);
evalcond[0]=((((-1.0)*r22*x7387))+((x7378*x7384))+(((-1.0)*x7385*x7388)));
evalcond[1]=((((-1.0)*r22*x7388))+((x7379*x7385))+(((-1.0)*x7384*x7387)));
evalcond[2]=(cj0+((x7378*x7382))+(((-1.0)*x7383*x7388))+(((-1.0)*r12*x7387)));
evalcond[3]=((((-1.0)*r02*x7387))+(((-1.0)*x7381*x7388))+((x7378*x7386))+(((-1.0)*x7380)));
evalcond[4]=((((-1.0)*x7386*x7387))+(((-1.0)*r02*x7388))+((x7379*x7381))+(((-1.0)*cj0)));
evalcond[5]=(((x7379*x7383))+(((-1.0)*x7380))+(((-1.0)*r12*x7388))+(((-1.0)*x7382*x7387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7389=((1.0)*cj5);
CheckValue<IkReal> x7390 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7389))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7390.valid){
continue;
}
CheckValue<IkReal> x7391=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7389)))),-1);
if(!x7391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7390.value)+(((1.5707963267949)*(x7391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7392=IKsin(j4);
IkReal x7393=IKcos(j4);
IkReal x7394=((1.0)*sj0);
IkReal x7395=(cj5*r00);
IkReal x7396=(r11*sj5);
IkReal x7397=(cj5*r10);
IkReal x7398=(r21*sj5);
IkReal x7399=(cj5*r20);
IkReal x7400=(r01*sj5);
IkReal x7401=((1.0)*x7393);
IkReal x7402=((1.0)*x7392);
evalcond[0]=((((-1.0)*x7399*x7402))+(((-1.0)*r22*x7401))+((x7392*x7398)));
evalcond[1]=((((-1.0)*x7398*x7401))+(((-1.0)*r22*x7402))+((x7393*x7399)));
evalcond[2]=((((-1.0)*r12*x7401))+cj0+(((-1.0)*x7397*x7402))+((x7392*x7396)));
evalcond[3]=(((x7392*x7400))+(((-1.0)*x7395*x7402))+(((-1.0)*x7394))+(((-1.0)*r02*x7401)));
evalcond[4]=(((x7393*x7395))+(((-1.0)*x7400*x7401))+(((-1.0)*r02*x7402))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7402))+(((-1.0)*x7396*x7401))+((x7393*x7397))+(((-1.0)*x7394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7403=((1.0)*cj5);
CheckValue<IkReal> x7404=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7403))+(((-1.0)*r00*sj5)))),-1);
if(!x7404.valid){
continue;
}
CheckValue<IkReal> x7405 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7404.value)))+(x7405.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7406=IKsin(j4);
IkReal x7407=IKcos(j4);
IkReal x7408=((1.0)*sj0);
IkReal x7409=(cj5*r00);
IkReal x7410=(r11*sj5);
IkReal x7411=(cj5*r10);
IkReal x7412=(r21*sj5);
IkReal x7413=(cj5*r20);
IkReal x7414=(r01*sj5);
IkReal x7415=((1.0)*x7407);
IkReal x7416=((1.0)*x7406);
evalcond[0]=(((x7406*x7412))+(((-1.0)*r22*x7415))+(((-1.0)*x7413*x7416)));
evalcond[1]=(((x7407*x7413))+(((-1.0)*r22*x7416))+(((-1.0)*x7412*x7415)));
evalcond[2]=((((-1.0)*r12*x7415))+cj0+((x7406*x7410))+(((-1.0)*x7411*x7416)));
evalcond[3]=(((x7406*x7414))+(((-1.0)*x7408))+(((-1.0)*x7409*x7416))+(((-1.0)*r02*x7415)));
evalcond[4]=((((-1.0)*x7414*x7415))+((x7407*x7409))+(((-1.0)*cj0))+(((-1.0)*r02*x7416)));
evalcond[5]=((((-1.0)*r12*x7416))+(((-1.0)*x7408))+((x7407*x7411))+(((-1.0)*x7410*x7415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7417=((1.0)*sj5);
IkReal x7418=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7418))+(((-1.0)*r10*x7417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7417))+(((-1.0)*r01*x7418)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7418))+(((-1.0)*r10*x7417))))+IKsqr(((((-1.0)*r00*x7417))+(((-1.0)*r01*x7418))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7418))+(((-1.0)*r10*x7417))), ((((-1.0)*r00*x7417))+(((-1.0)*r01*x7418))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7419=IKsin(j0);
IkReal x7420=IKcos(j0);
IkReal x7421=(cj5*r01);
IkReal x7422=(cj5*r11);
IkReal x7423=((0.1157)*sj5);
IkReal x7424=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7421))+(((-1.0)*x7420))+(((-1.0)*r00*x7424)));
evalcond[1]=((((-1.0)*x7422))+(((-1.0)*r10*x7424))+(((-1.0)*x7419)));
evalcond[2]=((((-1.0)*r00*x7423))+(((-1.0)*px))+(((-0.1157)*x7421))+(((-0.16394)*x7419)));
evalcond[3]=((((-1.0)*r10*x7423))+(((-1.0)*py))+(((-0.1157)*x7422))+(((0.16394)*x7420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7425=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7425;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7425);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7426=((1.0)*cj5);
IkReal x7427=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7426)));
j4eval[0]=x7427;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7426))))));
j4eval[2]=IKsign(x7427);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7428=cj5*cj5;
IkReal x7429=r21*r21;
IkReal x7430=(r21*sj5);
IkReal x7431=(cj5*r20);
IkReal x7432=((((-2.0)*x7430*x7431))+((x7428*(r20*r20)))+(r22*r22)+(((-1.0)*x7428*x7429))+x7429);
j4eval[0]=x7432;
j4eval[1]=IKsign(x7432);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7431))+x7430))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7433=cj5*cj5;
IkReal x7434=r21*r21;
IkReal x7435=(r21*sj5);
IkReal x7436=(cj5*r20);
CheckValue<IkReal> x7437 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7436))+x7435)),IKFAST_ATAN2_MAGTHRESH);
if(!x7437.valid){
continue;
}
CheckValue<IkReal> x7438=IKPowWithIntegerCheck(IKsign((((x7433*(r20*r20)))+(r22*r22)+(((-1.0)*x7433*x7434))+(((-2.0)*x7435*x7436))+x7434)),-1);
if(!x7438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7437.value)+(((1.5707963267949)*(x7438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7439=IKsin(j4);
IkReal x7440=IKcos(j4);
IkReal x7441=(r11*sj5);
IkReal x7442=(r21*sj5);
IkReal x7443=(cj5*r00);
IkReal x7444=(cj5*r20);
IkReal x7445=(r01*sj5);
IkReal x7446=(cj5*r10);
IkReal x7447=((1.0)*x7440);
IkReal x7448=((1.0)*x7439);
evalcond[0]=(((x7439*x7442))+(((-1.0)*x7444*x7448))+(((-1.0)*r22*x7447)));
evalcond[1]=((((-1.0)*r02*x7448))+((x7440*x7443))+(((-1.0)*x7445*x7447)));
evalcond[2]=(((x7440*x7446))+(((-1.0)*x7441*x7447))+(((-1.0)*r12*x7448)));
evalcond[3]=(cj0+(((-1.0)*x7446*x7448))+((x7439*x7441))+(((-1.0)*r12*x7447)));
evalcond[4]=((1.0)+(((-1.0)*x7442*x7447))+((x7440*x7444))+(((-1.0)*r22*x7448)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7447))+((x7439*x7445))+(((-1.0)*x7443*x7448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7449=((1.0)*cj5);
CheckValue<IkReal> x7450 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7450.valid){
continue;
}
CheckValue<IkReal> x7451=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7449))+(((-1.0)*r00*sj5)))),-1);
if(!x7451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7450.value)+(((1.5707963267949)*(x7451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7452=IKsin(j4);
IkReal x7453=IKcos(j4);
IkReal x7454=(r11*sj5);
IkReal x7455=(r21*sj5);
IkReal x7456=(cj5*r00);
IkReal x7457=(cj5*r20);
IkReal x7458=(r01*sj5);
IkReal x7459=(cj5*r10);
IkReal x7460=((1.0)*x7453);
IkReal x7461=((1.0)*x7452);
evalcond[0]=((((-1.0)*r22*x7460))+((x7452*x7455))+(((-1.0)*x7457*x7461)));
evalcond[1]=((((-1.0)*r02*x7461))+(((-1.0)*x7458*x7460))+((x7453*x7456)));
evalcond[2]=((((-1.0)*x7454*x7460))+(((-1.0)*r12*x7461))+((x7453*x7459)));
evalcond[3]=(cj0+(((-1.0)*r12*x7460))+(((-1.0)*x7459*x7461))+((x7452*x7454)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7461))+(((-1.0)*x7455*x7460))+((x7453*x7457)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7460))+(((-1.0)*x7456*x7461))+((x7452*x7458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7462 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7462.valid){
continue;
}
CheckValue<IkReal> x7463=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7462.value)+(((1.5707963267949)*(x7463.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7464=IKsin(j4);
IkReal x7465=IKcos(j4);
IkReal x7466=(r11*sj5);
IkReal x7467=(r21*sj5);
IkReal x7468=(cj5*r00);
IkReal x7469=(cj5*r20);
IkReal x7470=(r01*sj5);
IkReal x7471=(cj5*r10);
IkReal x7472=((1.0)*x7465);
IkReal x7473=((1.0)*x7464);
evalcond[0]=(((x7464*x7467))+(((-1.0)*r22*x7472))+(((-1.0)*x7469*x7473)));
evalcond[1]=((((-1.0)*r02*x7473))+((x7465*x7468))+(((-1.0)*x7470*x7472)));
evalcond[2]=((((-1.0)*x7466*x7472))+((x7465*x7471))+(((-1.0)*r12*x7473)));
evalcond[3]=(cj0+((x7464*x7466))+(((-1.0)*x7471*x7473))+(((-1.0)*r12*x7472)));
evalcond[4]=((1.0)+(((-1.0)*x7467*x7472))+(((-1.0)*r22*x7473))+((x7465*x7469)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7472))+((x7464*x7470))+(((-1.0)*x7468*x7473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482552106799)*py))+(((-0.462579933468263)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482552106799)*px))+(((0.462579933468263)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482552106799)*py))+(((-0.462579933468263)*px))))+IKsqr(((((-1.61482552106799)*px))+(((0.462579933468263)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482552106799)*py))+(((-0.462579933468263)*px))), ((((-1.61482552106799)*px))+(((0.462579933468263)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7474=IKcos(j0);
IkReal x7475=IKsin(j0);
evalcond[0]=((((-0.5723)*x7474))+(((-1.0)*px))+(((-0.16394)*x7475)));
evalcond[1]=((((0.16394)*x7474))+(((-0.5723)*x7475))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7476=((1.0)*cj5);
IkReal x7477=((((-1.0)*r01*x7476))+(((-1.0)*r00*sj5)));
j4eval[0]=x7477;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7476)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7477);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7478=cj5*cj5;
IkReal x7479=((1.0)*r21);
IkReal x7480=(cj5*sj5);
IkReal x7481=((1.0)*r20);
IkReal x7482=((((-1.0)*r00*x7479*x7480))+(((-1.0)*r01*x7478*x7479))+((r01*r21))+((r00*r20*x7478))+(((-1.0)*r01*x7480*x7481))+((r02*r22)));
j4eval[0]=x7482;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7481)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7482);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7483=cj5*cj5;
IkReal x7484=(r21*sj5);
IkReal x7485=(r11*r21);
IkReal x7486=((1.0)*cj5*r20);
IkReal x7487=(((r10*r20*x7483))+(((-1.0)*cj5*r10*x7484))+(((-1.0)*x7483*x7485))+((r12*r22))+x7485+(((-1.0)*r11*sj5*x7486)));
j4eval[0]=x7487;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7486))+((sj0*x7484))))));
j4eval[2]=IKsign(x7487);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7488=cj5*cj5;
IkReal x7489=(r21*sj5);
IkReal x7490=(r11*r21);
IkReal x7491=((1.0)*cj5*r20);
CheckValue<IkReal> x7492 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7491))+((sj0*x7489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7492.valid){
continue;
}
CheckValue<IkReal> x7493=IKPowWithIntegerCheck(IKsign((((r10*r20*x7488))+(((-1.0)*cj5*r10*x7489))+((r12*r22))+(((-1.0)*x7488*x7490))+x7490+(((-1.0)*r11*sj5*x7491)))),-1);
if(!x7493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7492.value)+(((1.5707963267949)*(x7493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7494=IKsin(j4);
IkReal x7495=IKcos(j4);
IkReal x7496=(r11*sj5);
IkReal x7497=(cj5*r00);
IkReal x7498=(cj5*r10);
IkReal x7499=(r21*sj5);
IkReal x7500=(cj5*r20);
IkReal x7501=(r01*sj5);
IkReal x7502=((1.0)*x7495);
IkReal x7503=((1.0)*x7494);
evalcond[0]=((((-1.0)*r22*x7502))+(((-1.0)*x7500*x7503))+((x7494*x7499)));
evalcond[1]=((((-1.0)*r22*x7503))+(((-1.0)*x7499*x7502))+((x7495*x7500)));
evalcond[2]=(cj0+(((-1.0)*x7498*x7503))+((x7494*x7496))+(((-1.0)*r12*x7502)));
evalcond[3]=((((-1.0)*x7501*x7502))+cj0+(((-1.0)*r02*x7503))+((x7495*x7497)));
evalcond[4]=(sj0+(((-1.0)*x7496*x7502))+((x7495*x7498))+(((-1.0)*r12*x7503)));
evalcond[5]=((((-1.0)*x7497*x7503))+(((-1.0)*sj0))+(((-1.0)*r02*x7502))+((x7494*x7501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7504=cj5*cj5;
IkReal x7505=((1.0)*r21);
IkReal x7506=(cj5*sj5);
IkReal x7507=((1.0)*r20);
CheckValue<IkReal> x7508 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x7507))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7508.valid){
continue;
}
CheckValue<IkReal> x7509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7506*x7507))+((r01*r21))+((r00*r20*x7504))+(((-1.0)*r00*x7505*x7506))+((r02*r22))+(((-1.0)*r01*x7504*x7505)))),-1);
if(!x7509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7508.value)+(((1.5707963267949)*(x7509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7510=IKsin(j4);
IkReal x7511=IKcos(j4);
IkReal x7512=(r11*sj5);
IkReal x7513=(cj5*r00);
IkReal x7514=(cj5*r10);
IkReal x7515=(r21*sj5);
IkReal x7516=(cj5*r20);
IkReal x7517=(r01*sj5);
IkReal x7518=((1.0)*x7511);
IkReal x7519=((1.0)*x7510);
evalcond[0]=((((-1.0)*x7516*x7519))+((x7510*x7515))+(((-1.0)*r22*x7518)));
evalcond[1]=((((-1.0)*x7515*x7518))+((x7511*x7516))+(((-1.0)*r22*x7519)));
evalcond[2]=(cj0+((x7510*x7512))+(((-1.0)*r12*x7518))+(((-1.0)*x7514*x7519)));
evalcond[3]=(cj0+(((-1.0)*r02*x7519))+(((-1.0)*x7517*x7518))+((x7511*x7513)));
evalcond[4]=(sj0+(((-1.0)*x7512*x7518))+((x7511*x7514))+(((-1.0)*r12*x7519)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7518))+((x7510*x7517))+(((-1.0)*x7513*x7519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7520=((1.0)*cj5);
CheckValue<IkReal> x7521=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7520))+(((-1.0)*r00*sj5)))),-1);
if(!x7521.valid){
continue;
}
CheckValue<IkReal> x7522 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7521.value)))+(x7522.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7523=IKsin(j4);
IkReal x7524=IKcos(j4);
IkReal x7525=(r11*sj5);
IkReal x7526=(cj5*r00);
IkReal x7527=(cj5*r10);
IkReal x7528=(r21*sj5);
IkReal x7529=(cj5*r20);
IkReal x7530=(r01*sj5);
IkReal x7531=((1.0)*x7524);
IkReal x7532=((1.0)*x7523);
evalcond[0]=((((-1.0)*x7529*x7532))+(((-1.0)*r22*x7531))+((x7523*x7528)));
evalcond[1]=(((x7524*x7529))+(((-1.0)*r22*x7532))+(((-1.0)*x7528*x7531)));
evalcond[2]=((((-1.0)*x7527*x7532))+cj0+(((-1.0)*r12*x7531))+((x7523*x7525)));
evalcond[3]=(cj0+((x7524*x7526))+(((-1.0)*x7530*x7531))+(((-1.0)*r02*x7532)));
evalcond[4]=(sj0+(((-1.0)*r12*x7532))+((x7524*x7527))+(((-1.0)*x7525*x7531)));
evalcond[5]=((((-1.0)*x7526*x7532))+(((-1.0)*sj0))+((x7523*x7530))+(((-1.0)*r02*x7531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7533=cj1*cj1;
IkReal x7534=(cj5*r01);
IkReal x7535=(cj1*sj2);
IkReal x7536=(cj1*sj1);
IkReal x7537=(r00*sj5);
IkReal x7538=(cj2*sj1);
IkReal x7539=((50000.0)*py);
IkReal x7540=((5785.0)*cj5*r11);
IkReal x7541=((5785.0)*r10*sj5);
IkReal x7542=(sj2*x7533);
CheckValue<IkReal> x7543=IKPowWithIntegerCheck(((((-57230.0)*x7536*(cj2*cj2)))+(((28615.0)*x7536))+(((28615.0)*cj2*sj2))+(((-30600.0)*x7542))+(((-30600.0)*cj2*x7536))+(((-57230.0)*cj2*x7542))),-1);
if(!x7543.valid){
continue;
}
CheckValue<IkReal> x7544=IKPowWithIntegerCheck(((((-1.0)*x7535))+(((-1.0)*x7538))),-1);
if(!x7544.valid){
continue;
}
if( IKabs(((x7543.value)*(((((-1.0)*x7535*x7541))+(((-1.0)*x7535*x7540))+(((-1.0)*x7538*x7540))+(((-1.0)*x7538*x7541))+(((-1.0)*x7538*x7539))+(((-1.0)*x7535*x7539))+(((-8197.0)*x7537))+(((-8197.0)*x7534)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7544.value)*((x7534+x7537)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7543.value)*(((((-1.0)*x7535*x7541))+(((-1.0)*x7535*x7540))+(((-1.0)*x7538*x7540))+(((-1.0)*x7538*x7541))+(((-1.0)*x7538*x7539))+(((-1.0)*x7535*x7539))+(((-8197.0)*x7537))+(((-8197.0)*x7534))))))+IKsqr(((x7544.value)*((x7534+x7537))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7543.value)*(((((-1.0)*x7535*x7541))+(((-1.0)*x7535*x7540))+(((-1.0)*x7538*x7540))+(((-1.0)*x7538*x7541))+(((-1.0)*x7538*x7539))+(((-1.0)*x7535*x7539))+(((-8197.0)*x7537))+(((-8197.0)*x7534))))), ((x7544.value)*((x7534+x7537))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7545=IKcos(j0);
IkReal x7546=IKsin(j0);
IkReal x7547=(cj5*r01);
IkReal x7548=((1.0)*sj5);
IkReal x7549=(cj5*r11);
IkReal x7550=((0.1157)*sj5);
IkReal x7551=((1.0)*sj1);
IkReal x7552=((1.0)*cj1*sj2);
IkReal x7553=((0.5723)*sj1*sj2);
IkReal x7554=(cj2*x7545);
IkReal x7555=(cj1*x7546);
evalcond[0]=((((-1.0)*x7551*x7554))+(((-1.0)*x7547))+(((-1.0)*r00*x7548))+(((-1.0)*x7545*x7552)));
evalcond[1]=((((-1.0)*r10*x7548))+(((-1.0)*x7549))+(((-1.0)*x7546*x7552))+(((-1.0)*cj2*x7546*x7551)));
evalcond[2]=((((-0.1157)*x7547))+(((0.612)*cj1*x7545))+(((-1.0)*px))+(((-1.0)*r00*x7550))+(((-0.16394)*x7546))+(((-1.0)*x7545*x7553))+(((0.5723)*cj1*x7554)));
evalcond[3]=((((-0.1157)*x7549))+(((0.612)*x7555))+(((-1.0)*r10*x7550))+(((0.16394)*x7545))+(((-1.0)*py))+(((-1.0)*x7546*x7553))+(((0.5723)*cj2*x7555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7556=((1.0)*cj5);
IkReal x7557=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7556)));
j4eval[0]=x7557;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7556))))));
j4eval[2]=IKsign(x7557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7558=((1.0)*cj5);
IkReal x7559=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7558)));
j4eval[0]=x7559;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7558))))));
j4eval[2]=IKsign(x7559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7560=((1.0)*sj0);
IkReal x7561=((1.0)*cj0);
IkReal x7562=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7562;
j4eval[1]=((IKabs(((((-1.0)*r02*x7561))+(((-1.0)*r12*x7560)))))+(IKabs(((((-1.0)*r01*sj5*x7561))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x7560))))));
j4eval[2]=IKsign(x7562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7563=((-1.0)*r20);
IkReal x7565 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7565)==0){
continue;
}
IkReal x7564=pow(x7565,-0.5);
CheckValue<IkReal> x7566 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7563),IKFAST_ATAN2_MAGTHRESH);
if(!x7566.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7566.value));
IkReal gconst133=(r21*x7564);
IkReal gconst134=(x7563*x7564);
CheckValue<IkReal> x7567 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7567.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7567.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7568=((-1.0)*r20);
IkReal x7569=x7564;
CheckValue<IkReal> x7571 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7568),IKFAST_ATAN2_MAGTHRESH);
if(!x7571.valid){
continue;
}
IkReal x7570=((-1.0)*(x7571.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7570;
IkReal gconst132=x7570;
IkReal gconst133=(r21*x7569);
IkReal gconst134=(x7568*x7569);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7572=((-1.0)*r20);
IkReal x7573=x7564;
CheckValue<IkReal> x7575 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7572),IKFAST_ATAN2_MAGTHRESH);
if(!x7575.valid){
continue;
}
IkReal x7574=((-1.0)*(x7575.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7574;
IkReal gconst132=x7574;
IkReal gconst133=(r21*x7573);
IkReal gconst134=(x7572*x7573);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7576=((-1.0)*r20);
IkReal x7577=x7564;
CheckValue<IkReal> x7579 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7576),IKFAST_ATAN2_MAGTHRESH);
if(!x7579.valid){
continue;
}
IkReal x7578=((-1.0)*(x7579.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7578;
IkReal gconst132=x7578;
IkReal gconst133=(r21*x7577);
IkReal gconst134=(x7576*x7577);
IkReal x7580=r22*r22;
CheckValue<IkReal> x7583=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7580))),-1);
if(!x7583.valid){
continue;
}
IkReal x7581=x7583.value;
IkReal x7582=(((x7581*(r20*r20*r20*r20)))+((x7581*(r21*r21*r21*r21)))+(((2.0)*x7581*(r20*r20)*(r21*r21)))+x7580);
j4eval[0]=x7582;
j4eval[1]=IKsign(x7582);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7584=(gconst133*r21);
IkReal x7585=(cj1*sj2);
IkReal x7586=(gconst134*r20);
IkReal x7587=(cj2*sj1);
CheckValue<IkReal> x7588=IKPowWithIntegerCheck(IKsign(((x7584*x7584)+(r22*r22)+(x7586*x7586)+(((-2.0)*x7584*x7586)))),-1);
if(!x7588.valid){
continue;
}
CheckValue<IkReal> x7589 = IKatan2WithCheck(IkReal((((r22*x7585))+((r22*x7587)))),IkReal((((x7584*x7585))+((x7584*x7587))+(((-1.0)*x7585*x7586))+(((-1.0)*x7586*x7587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7588.value)))+(x7589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7590=IKsin(j4);
IkReal x7591=IKcos(j4);
IkReal x7592=(sj1*sj2);
IkReal x7593=(gconst133*r11);
IkReal x7594=(gconst133*r21);
IkReal x7595=(gconst133*r01);
IkReal x7596=((1.0)*x7591);
IkReal x7597=(gconst134*x7591);
IkReal x7598=((1.0)*x7590);
IkReal x7599=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7598))+(((-1.0)*r22*x7596))+((x7590*x7594)));
evalcond[1]=(cj0+(((-1.0)*r12*x7596))+(((-1.0)*gconst134*r10*x7598))+((x7590*x7593)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7598))+(((-1.0)*r02*x7596))+((x7590*x7595)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7597))+(((-1.0)*r22*x7598))+(((-1.0)*x7594*x7596)));
evalcond[4]=((((-1.0)*x7595*x7596))+(((-1.0)*r02*x7598))+((cj0*x7592))+((r00*x7597))+(((-1.0)*cj0*x7599)));
evalcond[5]=((((-1.0)*r12*x7598))+((r10*x7597))+((sj0*x7592))+(((-1.0)*sj0*x7599))+(((-1.0)*x7593*x7596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7600=((1.0)*gconst134);
CheckValue<IkReal> x7601 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst133*r21*sj0))+(((-1.0)*r20*sj0*x7600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7601.valid){
continue;
}
CheckValue<IkReal> x7602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7600))+(((-1.0)*gconst133*r10)))),-1);
if(!x7602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7601.value)+(((1.5707963267949)*(x7602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7603=IKsin(j4);
IkReal x7604=IKcos(j4);
IkReal x7605=(sj1*sj2);
IkReal x7606=(gconst133*r11);
IkReal x7607=(gconst133*r21);
IkReal x7608=(gconst133*r01);
IkReal x7609=((1.0)*x7604);
IkReal x7610=(gconst134*x7604);
IkReal x7611=((1.0)*x7603);
IkReal x7612=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7609))+(((-1.0)*gconst134*r20*x7611))+((x7603*x7607)));
evalcond[1]=(cj0+((x7603*x7606))+(((-1.0)*r12*x7609))+(((-1.0)*gconst134*r10*x7611)));
evalcond[2]=((((-1.0)*sj0))+((x7603*x7608))+(((-1.0)*gconst134*r00*x7611))+(((-1.0)*r02*x7609)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7607*x7609))+((r20*x7610))+(((-1.0)*r22*x7611))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x7608*x7609))+((r00*x7610))+(((-1.0)*r02*x7611))+((cj0*x7605))+(((-1.0)*cj0*x7612)));
evalcond[5]=((((-1.0)*r12*x7611))+(((-1.0)*x7606*x7609))+((r10*x7610))+(((-1.0)*sj0*x7612))+((sj0*x7605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7613=((1.0)*gconst134);
CheckValue<IkReal> x7614 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7613))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7614.valid){
continue;
}
CheckValue<IkReal> x7615=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7613)))),-1);
if(!x7615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7614.value)+(((1.5707963267949)*(x7615.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7616=IKsin(j4);
IkReal x7617=IKcos(j4);
IkReal x7618=(sj1*sj2);
IkReal x7619=(gconst133*r11);
IkReal x7620=(gconst133*r21);
IkReal x7621=(gconst133*r01);
IkReal x7622=((1.0)*x7617);
IkReal x7623=(gconst134*x7617);
IkReal x7624=((1.0)*x7616);
IkReal x7625=((1.0)*cj1*cj2);
evalcond[0]=(((x7616*x7620))+(((-1.0)*gconst134*r20*x7624))+(((-1.0)*r22*x7622)));
evalcond[1]=(cj0+((x7616*x7619))+(((-1.0)*gconst134*r10*x7624))+(((-1.0)*r12*x7622)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7624))+((x7616*x7621))+(((-1.0)*r02*x7622)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7620*x7622))+((r20*x7623))+(((-1.0)*r22*x7624)));
evalcond[4]=((((-1.0)*x7621*x7622))+(((-1.0)*cj0*x7625))+((r00*x7623))+((cj0*x7618))+(((-1.0)*r02*x7624)));
evalcond[5]=((((-1.0)*r12*x7624))+(((-1.0)*sj0*x7625))+((sj0*x7618))+((r10*x7623))+(((-1.0)*x7619*x7622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7626=((-1.0)*r21);
IkReal x7628 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7628)==0){
continue;
}
IkReal x7627=pow(x7628,-0.5);
CheckValue<IkReal> x7629 = IKatan2WithCheck(IkReal(x7626),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7629.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7629.value))));
IkReal gconst136=(x7626*x7627);
IkReal gconst137=((1.0)*r20*x7627);
CheckValue<IkReal> x7630 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7630.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7630.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7631=((-1.0)*r21);
CheckValue<IkReal> x7634 = IKatan2WithCheck(IkReal(x7631),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7634.valid){
continue;
}
IkReal x7632=((1.0)*(x7634.value));
IkReal x7633=x7627;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7632)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7632)));
IkReal gconst136=(x7631*x7633);
IkReal gconst137=((1.0)*r20*x7633);
IkReal x7635=r22*r22;
IkReal x7636=((1.0)*x7635);
CheckValue<IkReal> x7640=IKPowWithIntegerCheck(((-1.0)+x7635),-1);
if(!x7640.valid){
continue;
}
IkReal x7637=x7640.value;
if((((1.0)+(((-1.0)*x7636)))) < -0.00001)
continue;
IkReal x7638=IKsqrt(((1.0)+(((-1.0)*x7636))));
IkReal x7639=(cj0*x7637*x7638);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x7636*x7639))+x7639))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7641=((-1.0)*r21);
CheckValue<IkReal> x7644 = IKatan2WithCheck(IkReal(x7641),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7644.valid){
continue;
}
IkReal x7642=((1.0)*(x7644.value));
IkReal x7643=x7627;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7642)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7642)));
IkReal gconst136=(x7641*x7643);
IkReal gconst137=((1.0)*r20*x7643);
IkReal x7645=r22*r22;
IkReal x7646=((1.0)*x7645);
CheckValue<IkReal> x7650=IKPowWithIntegerCheck(((-1.0)+x7645),-1);
if(!x7650.valid){
continue;
}
IkReal x7647=x7650.value;
if((((1.0)+(((-1.0)*x7646)))) < -0.00001)
continue;
IkReal x7648=IKsqrt(((1.0)+(((-1.0)*x7646))));
IkReal x7649=(sj0*x7647*x7648);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7646*x7649))+x7649))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7651=((-1.0)*r21);
CheckValue<IkReal> x7654 = IKatan2WithCheck(IkReal(x7651),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7654.valid){
continue;
}
IkReal x7652=((1.0)*(x7654.value));
IkReal x7653=x7627;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7652)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7652)));
IkReal gconst136=(x7651*x7653);
IkReal gconst137=((1.0)*r20*x7653);
IkReal x7655=r22*r22;
IkReal x7656=(r12*sj0);
IkReal x7657=(cj0*r02);
CheckValue<IkReal> x7661=IKPowWithIntegerCheck(((-1.0)+x7655),-1);
if(!x7661.valid){
continue;
}
IkReal x7658=x7661.value;
if((((1.0)+(((-1.0)*x7655)))) < -0.00001)
continue;
IkReal x7659=IKsqrt(((1.0)+(((-1.0)*x7655))));
IkReal x7660=(r22*x7658*x7659);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7656))+(((-1.0)*x7657)))))+(IKabs((((x7656*x7660))+((x7657*x7660))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7662=((1.0)*sj0);
IkReal x7663=((1.0)*cj0);
CheckValue<IkReal> x7664=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7664.valid){
continue;
}
CheckValue<IkReal> x7665 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7662))+(((-1.0)*r02*x7663)))),IkReal(((((-1.0)*gconst136*r11*x7662))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x7663))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7664.value)))+(x7665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7666=IKsin(j4);
IkReal x7667=IKcos(j4);
IkReal x7668=(gconst136*r01);
IkReal x7669=(gconst137*r10);
IkReal x7670=(sj1*sj2);
IkReal x7671=(gconst137*r20);
IkReal x7672=(gconst136*r11);
IkReal x7673=(gconst136*r21);
IkReal x7674=(gconst137*r00);
IkReal x7675=((1.0)*x7667);
IkReal x7676=((1.0)*cj1*cj2);
IkReal x7677=((1.0)*x7666);
evalcond[0]=((((-1.0)*x7671*x7677))+(((-1.0)*r22*x7675))+((x7666*x7673)));
evalcond[1]=(cj0+(((-1.0)*r12*x7675))+(((-1.0)*x7669*x7677))+((x7666*x7672)));
evalcond[2]=(((x7666*x7668))+(((-1.0)*sj0))+(((-1.0)*x7674*x7677))+(((-1.0)*r02*x7675)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7667*x7671))+(((-1.0)*x7673*x7675))+(((-1.0)*r22*x7677)));
evalcond[4]=((((-1.0)*r02*x7677))+((x7667*x7674))+(((-1.0)*cj0*x7676))+((cj0*x7670))+(((-1.0)*x7668*x7675)));
evalcond[5]=(((sj0*x7670))+(((-1.0)*sj0*x7676))+((x7667*x7669))+(((-1.0)*r12*x7677))+(((-1.0)*x7672*x7675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7678=((1.0)*gconst137);
CheckValue<IkReal> x7679=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7678)))),-1);
if(!x7679.valid){
continue;
}
CheckValue<IkReal> x7680 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x7678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7679.value)))+(x7680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7681=IKsin(j4);
IkReal x7682=IKcos(j4);
IkReal x7683=(gconst136*r01);
IkReal x7684=(gconst137*r10);
IkReal x7685=(sj1*sj2);
IkReal x7686=(gconst137*r20);
IkReal x7687=(gconst136*r11);
IkReal x7688=(gconst136*r21);
IkReal x7689=(gconst137*r00);
IkReal x7690=((1.0)*x7682);
IkReal x7691=((1.0)*cj1*cj2);
IkReal x7692=((1.0)*x7681);
evalcond[0]=(((x7681*x7688))+(((-1.0)*r22*x7690))+(((-1.0)*x7686*x7692)));
evalcond[1]=(((x7681*x7687))+cj0+(((-1.0)*r12*x7690))+(((-1.0)*x7684*x7692)));
evalcond[2]=((((-1.0)*r02*x7690))+(((-1.0)*sj0))+((x7681*x7683))+(((-1.0)*x7689*x7692)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7692))+(((-1.0)*x7688*x7690))+((x7682*x7686)));
evalcond[4]=((((-1.0)*r02*x7692))+(((-1.0)*cj0*x7691))+((cj0*x7685))+(((-1.0)*x7683*x7690))+((x7682*x7689)));
evalcond[5]=((((-1.0)*x7687*x7690))+((sj0*x7685))+(((-1.0)*r12*x7692))+(((-1.0)*sj0*x7691))+((x7682*x7684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7693=((1.0)*gconst137);
CheckValue<IkReal> x7694=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7693))+(((-1.0)*gconst136*r00)))),-1);
if(!x7694.valid){
continue;
}
CheckValue<IkReal> x7695 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x7693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7694.value)))+(x7695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7696=IKsin(j4);
IkReal x7697=IKcos(j4);
IkReal x7698=(gconst136*r01);
IkReal x7699=(gconst137*r10);
IkReal x7700=(sj1*sj2);
IkReal x7701=(gconst137*r20);
IkReal x7702=(gconst136*r11);
IkReal x7703=(gconst136*r21);
IkReal x7704=(gconst137*r00);
IkReal x7705=((1.0)*x7697);
IkReal x7706=((1.0)*cj1*cj2);
IkReal x7707=((1.0)*x7696);
evalcond[0]=((((-1.0)*r22*x7705))+((x7696*x7703))+(((-1.0)*x7701*x7707)));
evalcond[1]=(cj0+((x7696*x7702))+(((-1.0)*r12*x7705))+(((-1.0)*x7699*x7707)));
evalcond[2]=((((-1.0)*sj0))+((x7696*x7698))+(((-1.0)*x7704*x7707))+(((-1.0)*r02*x7705)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7707))+((cj1*sj2))+(((-1.0)*x7703*x7705))+((x7697*x7701)));
evalcond[4]=((((-1.0)*x7698*x7705))+((cj0*x7700))+(((-1.0)*r02*x7707))+((x7697*x7704))+(((-1.0)*cj0*x7706)));
evalcond[5]=(((sj0*x7700))+(((-1.0)*r12*x7707))+(((-1.0)*x7702*x7705))+((x7697*x7699))+(((-1.0)*sj0*x7706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7708=((-1.0)*r10);
IkReal x7710 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7710)==0){
continue;
}
IkReal x7709=pow(x7710,-0.5);
CheckValue<IkReal> x7711 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7708),IKFAST_ATAN2_MAGTHRESH);
if(!x7711.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7711.value));
IkReal gconst139=(r11*x7709);
IkReal gconst140=(x7708*x7709);
CheckValue<IkReal> x7712 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7712.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7712.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7713=((-1.0)*r10);
IkReal x7714=x7709;
CheckValue<IkReal> x7716 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7713),IKFAST_ATAN2_MAGTHRESH);
if(!x7716.valid){
continue;
}
IkReal x7715=((-1.0)*(x7716.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7715;
IkReal gconst138=x7715;
IkReal gconst139=(r11*x7714);
IkReal gconst140=(x7713*x7714);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7717=((1.0)*sj0);
IkReal x7718=((1.0)*gconst139);
CheckValue<IkReal> x7719=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7718)))),-1);
if(!x7719.valid){
continue;
}
CheckValue<IkReal> x7720 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7717))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7717))+(((-1.0)*cj0*r01*x7718))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7719.value)))+(x7720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7721=IKsin(j4);
IkReal x7722=IKcos(j4);
IkReal x7723=(gconst140*r00);
IkReal x7724=(sj1*sj2);
IkReal x7725=(gconst139*r11);
IkReal x7726=(gconst139*r01);
IkReal x7727=(gconst139*r21);
IkReal x7728=((1.0)*x7722);
IkReal x7729=((1.0)*x7721);
IkReal x7730=((1.0)*cj1*cj2);
IkReal x7731=(gconst140*x7722);
evalcond[0]=((((-1.0)*gconst140*r20*x7729))+((x7721*x7727))+(((-1.0)*r22*x7728)));
evalcond[1]=(cj0+((x7721*x7725))+(((-1.0)*gconst140*r10*x7729))+(((-1.0)*r12*x7728)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7728))+((x7721*x7726))+(((-1.0)*x7723*x7729)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7727*x7728))+((r20*x7731))+(((-1.0)*r22*x7729)));
evalcond[4]=((((-1.0)*cj0*x7730))+(((-1.0)*x7726*x7728))+(((-1.0)*r02*x7729))+((x7722*x7723))+((cj0*x7724)));
evalcond[5]=(((sj0*x7724))+(((-1.0)*x7725*x7728))+((r10*x7731))+(((-1.0)*sj0*x7730))+(((-1.0)*r12*x7729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7732=((1.0)*gconst140);
CheckValue<IkReal> x7733 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7733.valid){
continue;
}
CheckValue<IkReal> x7734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7732))+(((-1.0)*gconst139*r00)))),-1);
if(!x7734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7733.value)+(((1.5707963267949)*(x7734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7735=IKsin(j4);
IkReal x7736=IKcos(j4);
IkReal x7737=(gconst140*r00);
IkReal x7738=(sj1*sj2);
IkReal x7739=(gconst139*r11);
IkReal x7740=(gconst139*r01);
IkReal x7741=(gconst139*r21);
IkReal x7742=((1.0)*x7736);
IkReal x7743=((1.0)*x7735);
IkReal x7744=((1.0)*cj1*cj2);
IkReal x7745=(gconst140*x7736);
evalcond[0]=((((-1.0)*r22*x7742))+((x7735*x7741))+(((-1.0)*gconst140*r20*x7743)));
evalcond[1]=(cj0+(((-1.0)*r12*x7742))+((x7735*x7739))+(((-1.0)*gconst140*r10*x7743)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7742))+(((-1.0)*x7737*x7743))+((x7735*x7740)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7743))+(((-1.0)*x7741*x7742))+((cj1*sj2))+((r20*x7745)));
evalcond[4]=((((-1.0)*r02*x7743))+(((-1.0)*x7740*x7742))+((cj0*x7738))+(((-1.0)*cj0*x7744))+((x7736*x7737)));
evalcond[5]=(((r10*x7745))+(((-1.0)*x7739*x7742))+(((-1.0)*r12*x7743))+((sj0*x7738))+(((-1.0)*sj0*x7744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7746=((-1.0)*r11);
IkReal x7748 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7748)==0){
continue;
}
IkReal x7747=pow(x7748,-0.5);
CheckValue<IkReal> x7749 = IKatan2WithCheck(IkReal(x7746),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7749.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7749.value))));
IkReal gconst142=(x7746*x7747);
IkReal gconst143=((1.0)*r10*x7747);
CheckValue<IkReal> x7750 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7750.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7750.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7751=((-1.0)*r11);
CheckValue<IkReal> x7754 = IKatan2WithCheck(IkReal(x7751),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7754.valid){
continue;
}
IkReal x7752=((1.0)*(x7754.value));
IkReal x7753=x7747;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7752)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7752)));
IkReal gconst142=(x7751*x7753);
IkReal gconst143=((1.0)*r10*x7753);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7755=((-1.0)*r11);
CheckValue<IkReal> x7758 = IKatan2WithCheck(IkReal(x7755),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7758.valid){
continue;
}
IkReal x7756=((1.0)*(x7758.value));
IkReal x7757=x7747;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7756)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7756)));
IkReal gconst142=(x7755*x7757);
IkReal gconst143=((1.0)*r10*x7757);
IkReal x7759=r12*r12;
IkReal x7760=((1.0)*sj0);
IkReal x7761=(cj0*r02);
IkReal x7762=x7747;
j4eval[0]=((IKabs(((((-1.0)*x7761))+(((-1.0)*r12*x7760)))))+(IKabs(((((-1.0)*x7760*x7762))+((r12*x7761*x7762))+((sj0*x7759*x7762))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7763=((-1.0)*r11);
CheckValue<IkReal> x7766 = IKatan2WithCheck(IkReal(x7763),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7766.valid){
continue;
}
IkReal x7764=((1.0)*(x7766.value));
IkReal x7765=x7747;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7764)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7764)));
IkReal gconst142=(x7763*x7765);
IkReal gconst143=((1.0)*r10*x7765);
IkReal x7767=r12*r12;
IkReal x7768=(cj1*r22*sj2);
IkReal x7769=(cj2*r22*sj1);
CheckValue<IkReal> x7773=IKPowWithIntegerCheck(((-1.0)+x7767),-1);
if(!x7773.valid){
continue;
}
IkReal x7770=x7773.value;
if((((1.0)+(((-1.0)*x7767)))) < -0.00001)
continue;
IkReal x7771=IKsqrt(((1.0)+(((-1.0)*x7767))));
IkReal x7772=((1.0)*r12*x7770*x7771);
j4eval[0]=((IKabs(((((-1.0)*x7769*x7772))+(((-1.0)*x7768*x7772)))))+(IKabs((x7768+x7769))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7774=(gconst142*r21);
IkReal x7775=(cj1*sj2);
IkReal x7776=(cj2*sj1);
IkReal x7777=(gconst143*r20);
CheckValue<IkReal> x7778=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7774*x7774)+(x7777*x7777)+(((-2.0)*x7774*x7777)))),-1);
if(!x7778.valid){
continue;
}
CheckValue<IkReal> x7779 = IKatan2WithCheck(IkReal((((r22*x7776))+((r22*x7775)))),IkReal(((((-1.0)*x7775*x7777))+(((-1.0)*x7776*x7777))+((x7774*x7775))+((x7774*x7776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7778.value)))+(x7779.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7780=IKsin(j4);
IkReal x7781=IKcos(j4);
IkReal x7782=(sj1*sj2);
IkReal x7783=(gconst143*r20);
IkReal x7784=((1.0)*x7781);
IkReal x7785=((1.0)*cj1*cj2);
IkReal x7786=((1.0)*x7780);
IkReal x7787=(gconst142*x7780);
IkReal x7788=(gconst143*x7781);
evalcond[0]=((((-1.0)*x7783*x7786))+((r21*x7787))+(((-1.0)*r22*x7784)));
evalcond[1]=((((-1.0)*gconst143*r10*x7786))+cj0+((r11*x7787))+(((-1.0)*r12*x7784)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7787))+(((-1.0)*r02*x7784))+(((-1.0)*gconst143*r00*x7786)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x7784))+((x7781*x7783))+((cj1*sj2))+(((-1.0)*r22*x7786)));
evalcond[4]=((((-1.0)*gconst142*r01*x7784))+((r00*x7788))+(((-1.0)*r02*x7786))+(((-1.0)*cj0*x7785))+((cj0*x7782)));
evalcond[5]=(((sj0*x7782))+(((-1.0)*gconst142*r11*x7784))+((r10*x7788))+(((-1.0)*sj0*x7785))+(((-1.0)*r12*x7786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7789=((1.0)*sj0);
IkReal x7790=((1.0)*gconst142);
CheckValue<IkReal> x7791 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7789)))),IkReal(((((-1.0)*gconst142*r11*x7789))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7790))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7791.valid){
continue;
}
CheckValue<IkReal> x7792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7790))+(((-1.0)*gconst143*r21)))),-1);
if(!x7792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7791.value)+(((1.5707963267949)*(x7792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7793=IKsin(j4);
IkReal x7794=IKcos(j4);
IkReal x7795=(sj1*sj2);
IkReal x7796=(gconst143*r20);
IkReal x7797=((1.0)*x7794);
IkReal x7798=((1.0)*cj1*cj2);
IkReal x7799=((1.0)*x7793);
IkReal x7800=(gconst142*x7793);
IkReal x7801=(gconst143*x7794);
evalcond[0]=((((-1.0)*r22*x7797))+((r21*x7800))+(((-1.0)*x7796*x7799)));
evalcond[1]=((((-1.0)*gconst143*r10*x7799))+cj0+((r11*x7800))+(((-1.0)*r12*x7797)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7800))+(((-1.0)*gconst143*r00*x7799))+(((-1.0)*r02*x7797)));
evalcond[3]=((((-1.0)*r22*x7799))+((cj2*sj1))+((cj1*sj2))+((x7794*x7796))+(((-1.0)*gconst142*r21*x7797)));
evalcond[4]=((((-1.0)*cj0*x7798))+(((-1.0)*gconst142*r01*x7797))+((r00*x7801))+((cj0*x7795))+(((-1.0)*r02*x7799)));
evalcond[5]=((((-1.0)*gconst142*r11*x7797))+(((-1.0)*r12*x7799))+(((-1.0)*sj0*x7798))+((sj0*x7795))+((r10*x7801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7802=((1.0)*gconst143);
CheckValue<IkReal> x7803 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7802))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7803.valid){
continue;
}
CheckValue<IkReal> x7804=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7802)))),-1);
if(!x7804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7803.value)+(((1.5707963267949)*(x7804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7805=IKsin(j4);
IkReal x7806=IKcos(j4);
IkReal x7807=(sj1*sj2);
IkReal x7808=(gconst143*r20);
IkReal x7809=((1.0)*x7806);
IkReal x7810=((1.0)*cj1*cj2);
IkReal x7811=((1.0)*x7805);
IkReal x7812=(gconst142*x7805);
IkReal x7813=(gconst143*x7806);
evalcond[0]=((((-1.0)*r22*x7809))+((r21*x7812))+(((-1.0)*x7808*x7811)));
evalcond[1]=(cj0+((r11*x7812))+(((-1.0)*r12*x7809))+(((-1.0)*gconst143*r10*x7811)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7809))+((r01*x7812))+(((-1.0)*gconst143*r00*x7811)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7811))+((x7806*x7808))+(((-1.0)*gconst142*r21*x7809)));
evalcond[4]=((((-1.0)*gconst142*r01*x7809))+((cj0*x7807))+(((-1.0)*r02*x7811))+((r00*x7813))+(((-1.0)*cj0*x7810)));
evalcond[5]=(((r10*x7813))+((sj0*x7807))+(((-1.0)*r12*x7811))+(((-1.0)*gconst142*r11*x7809))+(((-1.0)*sj0*x7810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7814=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7814;
j4eval[1]=IKsign(x7814);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7815=((1.0)*cj5);
IkReal x7816=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7815)));
j4eval[0]=x7816;
j4eval[1]=((IKabs(((((-1.0)*r20*x7815))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7817=cj5*cj5;
IkReal x7818=r11*r11;
IkReal x7819=(r11*sj5);
IkReal x7820=(cj5*r10);
IkReal x7821=((r12*r12)+(((-2.0)*x7819*x7820))+x7818+(((-1.0)*x7817*x7818))+((x7817*(r10*r10))));
j4eval[0]=x7821;
j4eval[1]=IKsign(x7821);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7819))+x7820))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7822=cj5*cj5;
IkReal x7823=r11*r11;
IkReal x7824=(cj5*r10);
IkReal x7825=(r11*sj5);
CheckValue<IkReal> x7826=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x7822*(r10*r10)))+x7823+(((-2.0)*x7824*x7825))+(((-1.0)*x7822*x7823)))),-1);
if(!x7826.valid){
continue;
}
CheckValue<IkReal> x7827 = IKatan2WithCheck(IkReal(((((-1.0)*x7825))+x7824)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7826.value)))+(x7827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7828=IKsin(j4);
IkReal x7829=IKcos(j4);
IkReal x7830=(cj5*r10);
IkReal x7831=(r01*sj5);
IkReal x7832=(cj5*r00);
IkReal x7833=(cj5*r20);
IkReal x7834=((1.0)*x7829);
IkReal x7835=((1.0)*x7828);
IkReal x7836=(sj5*x7828);
evalcond[0]=(((r21*x7836))+(((-1.0)*r22*x7834))+(((-1.0)*x7833*x7835)));
evalcond[1]=((((-1.0)*x7832*x7835))+(((-1.0)*r02*x7834))+((x7828*x7831)));
evalcond[2]=((((-1.0)*r11*sj5*x7834))+(((-1.0)*r12*x7835))+((x7829*x7830)));
evalcond[3]=((1.0)+(((-1.0)*x7830*x7835))+(((-1.0)*r12*x7834))+((r11*x7836)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7835))+((cj1*sj2))+(((-1.0)*r21*sj5*x7834))+((x7829*x7833)));
evalcond[5]=((((-1.0)*x7831*x7834))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7835))+((x7829*x7832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7837=((1.0)*cj5);
CheckValue<IkReal> x7838=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7837)))),-1);
if(!x7838.valid){
continue;
}
CheckValue<IkReal> x7839 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7838.value)))+(x7839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7840=IKsin(j4);
IkReal x7841=IKcos(j4);
IkReal x7842=(cj5*r10);
IkReal x7843=(r01*sj5);
IkReal x7844=(cj5*r00);
IkReal x7845=(cj5*r20);
IkReal x7846=((1.0)*x7841);
IkReal x7847=((1.0)*x7840);
IkReal x7848=(sj5*x7840);
evalcond[0]=(((r21*x7848))+(((-1.0)*r22*x7846))+(((-1.0)*x7845*x7847)));
evalcond[1]=((((-1.0)*x7844*x7847))+(((-1.0)*r02*x7846))+((x7840*x7843)));
evalcond[2]=((((-1.0)*r11*sj5*x7846))+(((-1.0)*r12*x7847))+((x7841*x7842)));
evalcond[3]=((1.0)+(((-1.0)*x7842*x7847))+(((-1.0)*r12*x7846))+((r11*x7848)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7847))+((cj1*sj2))+(((-1.0)*r21*sj5*x7846))+((x7841*x7845)));
evalcond[5]=((((-1.0)*x7843*x7846))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7847))+((x7841*x7844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7849=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7849.valid){
continue;
}
CheckValue<IkReal> x7850 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7849.value)))+(x7850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7851=IKsin(j4);
IkReal x7852=IKcos(j4);
IkReal x7853=(cj5*r10);
IkReal x7854=(r01*sj5);
IkReal x7855=(cj5*r00);
IkReal x7856=(cj5*r20);
IkReal x7857=((1.0)*x7852);
IkReal x7858=((1.0)*x7851);
IkReal x7859=(sj5*x7851);
evalcond[0]=((((-1.0)*x7856*x7858))+((r21*x7859))+(((-1.0)*r22*x7857)));
evalcond[1]=((((-1.0)*x7855*x7858))+(((-1.0)*r02*x7857))+((x7851*x7854)));
evalcond[2]=(((x7852*x7853))+(((-1.0)*r11*sj5*x7857))+(((-1.0)*r12*x7858)));
evalcond[3]=((1.0)+((r11*x7859))+(((-1.0)*x7853*x7858))+(((-1.0)*r12*x7857)));
evalcond[4]=(((cj2*sj1))+((x7852*x7856))+((cj1*sj2))+(((-1.0)*r21*sj5*x7857))+(((-1.0)*r22*x7858)));
evalcond[5]=(((x7852*x7855))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7854*x7857))+(((-1.0)*r02*x7858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7860=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7860;
j4eval[1]=IKsign(x7860);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7861=((1.0)*cj5);
IkReal x7862=((((-1.0)*r21*x7861))+(((-1.0)*r20*sj5)));
j4eval[0]=x7862;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7861))))));
j4eval[2]=IKsign(x7862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7863=cj5*cj5;
IkReal x7864=r11*r11;
IkReal x7865=(cj5*r10);
IkReal x7866=(r11*sj5);
IkReal x7867=((((-1.0)*x7863*(r10*r10)))+(((2.0)*x7865*x7866))+(((-1.0)*x7864))+(((-1.0)*(r12*r12)))+((x7863*x7864)));
j4eval[0]=x7867;
j4eval[1]=((IKabs((x7865+(((-1.0)*x7866)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7867);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7868=cj5*cj5;
IkReal x7869=r11*r11;
IkReal x7870=(cj5*r10);
IkReal x7871=(r11*sj5);
CheckValue<IkReal> x7872 = IKatan2WithCheck(IkReal(((((-1.0)*x7871))+x7870)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7872.valid){
continue;
}
CheckValue<IkReal> x7873=IKPowWithIntegerCheck(IKsign(((((2.0)*x7870*x7871))+(((-1.0)*x7869))+(((-1.0)*(r12*r12)))+((x7868*x7869))+(((-1.0)*x7868*(r10*r10))))),-1);
if(!x7873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7872.value)+(((1.5707963267949)*(x7873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7874=IKsin(j4);
IkReal x7875=IKcos(j4);
IkReal x7876=(cj5*r10);
IkReal x7877=(r01*sj5);
IkReal x7878=(cj5*r00);
IkReal x7879=(cj5*r20);
IkReal x7880=((1.0)*x7875);
IkReal x7881=((1.0)*x7874);
IkReal x7882=(sj5*x7874);
evalcond[0]=((((-1.0)*r22*x7880))+((r21*x7882))+(((-1.0)*x7879*x7881)));
evalcond[1]=(((x7874*x7877))+(((-1.0)*x7878*x7881))+(((-1.0)*r02*x7880)));
evalcond[2]=(((x7875*x7876))+(((-1.0)*r11*sj5*x7880))+(((-1.0)*r12*x7881)));
evalcond[3]=((-1.0)+(((-1.0)*x7876*x7881))+((r11*x7882))+(((-1.0)*r12*x7880)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7881))+((x7875*x7879))+((cj1*sj2))+(((-1.0)*r21*sj5*x7880)));
evalcond[5]=(((x7875*x7878))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7881))+(((-1.0)*x7877*x7880))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7883=((1.0)*cj5);
CheckValue<IkReal> x7884 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7884.valid){
continue;
}
CheckValue<IkReal> x7885=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7883))+(((-1.0)*r20*sj5)))),-1);
if(!x7885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7884.value)+(((1.5707963267949)*(x7885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7886=IKsin(j4);
IkReal x7887=IKcos(j4);
IkReal x7888=(cj5*r10);
IkReal x7889=(r01*sj5);
IkReal x7890=(cj5*r00);
IkReal x7891=(cj5*r20);
IkReal x7892=((1.0)*x7887);
IkReal x7893=((1.0)*x7886);
IkReal x7894=(sj5*x7886);
evalcond[0]=(((r21*x7894))+(((-1.0)*x7891*x7893))+(((-1.0)*r22*x7892)));
evalcond[1]=(((x7886*x7889))+(((-1.0)*x7890*x7893))+(((-1.0)*r02*x7892)));
evalcond[2]=((((-1.0)*r11*sj5*x7892))+(((-1.0)*r12*x7893))+((x7887*x7888)));
evalcond[3]=((-1.0)+(((-1.0)*x7888*x7893))+(((-1.0)*r12*x7892))+((r11*x7894)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7892))+(((-1.0)*r22*x7893))+((x7887*x7891)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x7889*x7892))+((cj1*cj2))+((x7887*x7890))+(((-1.0)*r02*x7893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7895 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7895.valid){
continue;
}
CheckValue<IkReal> x7896=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7895.value)+(((1.5707963267949)*(x7896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7897=IKsin(j4);
IkReal x7898=IKcos(j4);
IkReal x7899=(cj5*r10);
IkReal x7900=(r01*sj5);
IkReal x7901=(cj5*r00);
IkReal x7902=(cj5*r20);
IkReal x7903=((1.0)*x7898);
IkReal x7904=((1.0)*x7897);
IkReal x7905=(sj5*x7897);
evalcond[0]=(((r21*x7905))+(((-1.0)*r22*x7903))+(((-1.0)*x7902*x7904)));
evalcond[1]=(((x7897*x7900))+(((-1.0)*x7901*x7904))+(((-1.0)*r02*x7903)));
evalcond[2]=((((-1.0)*r12*x7904))+(((-1.0)*r11*sj5*x7903))+((x7898*x7899)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7903))+(((-1.0)*x7899*x7904))+((r11*x7905)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7898*x7902))+(((-1.0)*r22*x7904))+(((-1.0)*r21*sj5*x7903)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x7898*x7901))+((cj1*cj2))+(((-1.0)*x7900*x7903))+(((-1.0)*r02*x7904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7906=((-1.0)*r00);
IkReal x7908 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7908)==0){
continue;
}
IkReal x7907=pow(x7908,-0.5);
CheckValue<IkReal> x7909 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7906),IKFAST_ATAN2_MAGTHRESH);
if(!x7909.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7909.value));
IkReal gconst145=(r01*x7907);
IkReal gconst146=(x7906*x7907);
CheckValue<IkReal> x7910 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7910.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7910.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7911=((-1.0)*r00);
IkReal x7912=x7907;
CheckValue<IkReal> x7914 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7911),IKFAST_ATAN2_MAGTHRESH);
if(!x7914.valid){
continue;
}
IkReal x7913=((-1.0)*(x7914.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7913;
IkReal gconst144=x7913;
IkReal gconst145=(r01*x7912);
IkReal gconst146=(x7911*x7912);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7915=((1.0)*sj0);
IkReal x7916=((1.0)*gconst145);
CheckValue<IkReal> x7917=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7916))+(((-1.0)*gconst146*r21)))),-1);
if(!x7917.valid){
continue;
}
CheckValue<IkReal> x7918 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7915)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x7915))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x7916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7917.value)))+(x7918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7919=IKsin(j4);
IkReal x7920=IKcos(j4);
IkReal x7921=(gconst146*r10);
IkReal x7922=(sj1*sj2);
IkReal x7923=(gconst146*r20);
IkReal x7924=(gconst146*r00);
IkReal x7925=((1.0)*x7920);
IkReal x7926=((1.0)*x7919);
IkReal x7927=(gconst145*x7919);
IkReal x7928=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7925))+(((-1.0)*x7923*x7926))+((r21*x7927)));
evalcond[1]=((((-1.0)*x7921*x7926))+cj0+(((-1.0)*r12*x7925))+((r11*x7927)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7925))+(((-1.0)*x7924*x7926))+((r01*x7927)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7926))+((x7920*x7923))+(((-1.0)*gconst145*r21*x7925)));
evalcond[4]=((((-1.0)*cj0*x7928))+(((-1.0)*r02*x7926))+((x7920*x7924))+(((-1.0)*gconst145*r01*x7925))+((cj0*x7922)));
evalcond[5]=((((-1.0)*gconst145*r11*x7925))+(((-1.0)*sj0*x7928))+((x7920*x7921))+(((-1.0)*r12*x7926))+((sj0*x7922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7929=((1.0)*gconst146);
CheckValue<IkReal> x7930=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7929))+(((-1.0)*gconst145*r10)))),-1);
if(!x7930.valid){
continue;
}
CheckValue<IkReal> x7931 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7929))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7930.value)))+(x7931.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7932=IKsin(j4);
IkReal x7933=IKcos(j4);
IkReal x7934=(gconst146*r10);
IkReal x7935=(sj1*sj2);
IkReal x7936=(gconst146*r20);
IkReal x7937=(gconst146*r00);
IkReal x7938=((1.0)*x7933);
IkReal x7939=((1.0)*x7932);
IkReal x7940=(gconst145*x7932);
IkReal x7941=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x7940))+(((-1.0)*r22*x7938))+(((-1.0)*x7936*x7939)));
evalcond[1]=((((-1.0)*x7934*x7939))+cj0+(((-1.0)*r12*x7938))+((r11*x7940)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7937*x7939))+(((-1.0)*r02*x7938))+((r01*x7940)));
evalcond[3]=(((cj2*sj1))+((x7933*x7936))+(((-1.0)*r22*x7939))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7938)));
evalcond[4]=(((x7933*x7937))+((cj0*x7935))+(((-1.0)*gconst145*r01*x7938))+(((-1.0)*cj0*x7941))+(((-1.0)*r02*x7939)));
evalcond[5]=(((sj0*x7935))+((x7933*x7934))+(((-1.0)*r12*x7939))+(((-1.0)*sj0*x7941))+(((-1.0)*gconst145*r11*x7938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7942=((-1.0)*r01);
IkReal x7944 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7944)==0){
continue;
}
IkReal x7943=pow(x7944,-0.5);
CheckValue<IkReal> x7945 = IKatan2WithCheck(IkReal(x7942),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7945.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7945.value))));
IkReal gconst148=(x7942*x7943);
IkReal gconst149=((1.0)*r00*x7943);
CheckValue<IkReal> x7946 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7946.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7946.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7947=((-1.0)*r01);
CheckValue<IkReal> x7950 = IKatan2WithCheck(IkReal(x7947),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7950.valid){
continue;
}
IkReal x7948=((1.0)*(x7950.value));
IkReal x7949=x7943;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7948)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7948)));
IkReal gconst148=(x7947*x7949);
IkReal gconst149=((1.0)*r00*x7949);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7951=((-1.0)*r01);
CheckValue<IkReal> x7954 = IKatan2WithCheck(IkReal(x7951),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7954.valid){
continue;
}
IkReal x7952=((1.0)*(x7954.value));
IkReal x7953=x7943;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7952)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7952)));
IkReal gconst148=(x7951*x7953);
IkReal gconst149=((1.0)*r00*x7953);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7955=((-1.0)*r01);
CheckValue<IkReal> x7958 = IKatan2WithCheck(IkReal(x7955),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7958.valid){
continue;
}
IkReal x7956=((1.0)*(x7958.value));
IkReal x7957=x7943;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7956)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7956)));
IkReal gconst148=(x7955*x7957);
IkReal gconst149=((1.0)*r00*x7957);
IkReal x7959=r02*r02;
IkReal x7960=(r12*sj0);
IkReal x7961=((1.0)*cj0);
IkReal x7962=x7943;
j4eval[0]=((IKabs((((r02*x7960*x7962))+((cj0*x7959*x7962))+(((-1.0)*x7961*x7962)))))+(IKabs(((((-1.0)*x7960))+(((-1.0)*r02*x7961))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7963=((1.0)*sj0);
IkReal x7964=((1.0)*gconst148);
CheckValue<IkReal> x7965=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x7964)))),-1);
if(!x7965.valid){
continue;
}
CheckValue<IkReal> x7966 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7963)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x7964))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7963)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7965.value)))+(x7966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7967=IKsin(j4);
IkReal x7968=IKcos(j4);
IkReal x7969=(gconst148*r11);
IkReal x7970=(sj1*sj2);
IkReal x7971=((1.0)*x7968);
IkReal x7972=(gconst149*x7968);
IkReal x7973=(gconst148*x7967);
IkReal x7974=((1.0)*cj1*cj2);
IkReal x7975=((1.0)*x7967);
evalcond[0]=((((-1.0)*r22*x7971))+(((-1.0)*gconst149*r20*x7975))+((r21*x7973)));
evalcond[1]=(cj0+((x7967*x7969))+(((-1.0)*r12*x7971))+(((-1.0)*gconst149*r10*x7975)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7973))+(((-1.0)*r02*x7971))+(((-1.0)*gconst149*r00*x7975)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7975))+((cj1*sj2))+((r20*x7972))+(((-1.0)*gconst148*r21*x7971)));
evalcond[4]=((((-1.0)*gconst148*r01*x7971))+((r00*x7972))+((cj0*x7970))+(((-1.0)*cj0*x7974))+(((-1.0)*r02*x7975)));
evalcond[5]=((((-1.0)*sj0*x7974))+(((-1.0)*r12*x7975))+(((-1.0)*x7969*x7971))+((sj0*x7970))+((r10*x7972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7976=((1.0)*gconst149);
CheckValue<IkReal> x7977 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7976))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7977.valid){
continue;
}
CheckValue<IkReal> x7978=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7976))+(((-1.0)*gconst148*r10)))),-1);
if(!x7978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7977.value)+(((1.5707963267949)*(x7978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7979=IKsin(j4);
IkReal x7980=IKcos(j4);
IkReal x7981=(gconst148*r11);
IkReal x7982=(sj1*sj2);
IkReal x7983=((1.0)*x7980);
IkReal x7984=(gconst149*x7980);
IkReal x7985=(gconst148*x7979);
IkReal x7986=((1.0)*cj1*cj2);
IkReal x7987=((1.0)*x7979);
evalcond[0]=((((-1.0)*r22*x7983))+(((-1.0)*gconst149*r20*x7987))+((r21*x7985)));
evalcond[1]=((((-1.0)*r12*x7983))+cj0+(((-1.0)*gconst149*r10*x7987))+((x7979*x7981)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7985))+(((-1.0)*gconst149*r00*x7987))+(((-1.0)*r02*x7983)));
evalcond[3]=((((-1.0)*r22*x7987))+((cj2*sj1))+((r20*x7984))+((cj1*sj2))+(((-1.0)*gconst148*r21*x7983)));
evalcond[4]=((((-1.0)*gconst148*r01*x7983))+((r00*x7984))+((cj0*x7982))+(((-1.0)*cj0*x7986))+(((-1.0)*r02*x7987)));
evalcond[5]=((((-1.0)*r12*x7987))+(((-1.0)*x7981*x7983))+((sj0*x7982))+(((-1.0)*sj0*x7986))+((r10*x7984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7988=((1.0)*gconst149);
CheckValue<IkReal> x7989 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7988))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7989.valid){
continue;
}
CheckValue<IkReal> x7990=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7988))+(((-1.0)*gconst148*r00)))),-1);
if(!x7990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7989.value)+(((1.5707963267949)*(x7990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7991=IKsin(j4);
IkReal x7992=IKcos(j4);
IkReal x7993=(gconst148*r11);
IkReal x7994=(sj1*sj2);
IkReal x7995=((1.0)*x7992);
IkReal x7996=(gconst149*x7992);
IkReal x7997=(gconst148*x7991);
IkReal x7998=((1.0)*cj1*cj2);
IkReal x7999=((1.0)*x7991);
evalcond[0]=((((-1.0)*gconst149*r20*x7999))+((r21*x7997))+(((-1.0)*r22*x7995)));
evalcond[1]=((((-1.0)*r12*x7995))+cj0+(((-1.0)*gconst149*r10*x7999))+((x7991*x7993)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7997))+(((-1.0)*r02*x7995))+(((-1.0)*gconst149*r00*x7999)));
evalcond[3]=(((r20*x7996))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x7995))+(((-1.0)*r22*x7999)));
evalcond[4]=((((-1.0)*gconst148*r01*x7995))+((r00*x7996))+((cj0*x7994))+(((-1.0)*cj0*x7998))+(((-1.0)*r02*x7999)));
evalcond[5]=(((r10*x7996))+(((-1.0)*r12*x7999))+((sj0*x7994))+(((-1.0)*sj0*x7998))+(((-1.0)*x7993*x7995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8000=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8000;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8000);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8001=((1.0)*cj5);
IkReal x8002=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8001)));
j4eval[0]=x8002;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8001))))));
j4eval[2]=IKsign(x8002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8003=cj5*cj5;
IkReal x8004=r01*r01;
IkReal x8005=(r01*sj5);
IkReal x8006=(cj5*r00);
IkReal x8007=((((-1.0)*(r02*r02)))+(((-1.0)*x8003*(r00*r00)))+(((-1.0)*x8004))+(((2.0)*x8005*x8006))+((x8003*x8004)));
j4eval[0]=x8007;
j4eval[1]=IKsign(x8007);
j4eval[2]=((IKabs(((((-1.0)*x8005))+x8006)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8008=cj5*cj5;
IkReal x8009=r01*r01;
IkReal x8010=(r01*sj5);
IkReal x8011=(cj5*r00);
CheckValue<IkReal> x8012=IKPowWithIntegerCheck(IKsign((((x8008*x8009))+(((2.0)*x8010*x8011))+(((-1.0)*(r02*r02)))+(((-1.0)*x8008*(r00*r00)))+(((-1.0)*x8009)))),-1);
if(!x8012.valid){
continue;
}
CheckValue<IkReal> x8013 = IKatan2WithCheck(IkReal(((((-1.0)*x8010))+x8011)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8012.value)))+(x8013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8014=IKsin(j4);
IkReal x8015=IKcos(j4);
IkReal x8016=(cj5*r10);
IkReal x8017=(r01*sj5);
IkReal x8018=(cj5*r00);
IkReal x8019=(cj5*r20);
IkReal x8020=((1.0)*x8015);
IkReal x8021=((1.0)*x8014);
IkReal x8022=(sj5*x8014);
evalcond[0]=((((-1.0)*x8019*x8021))+((r21*x8022))+(((-1.0)*r22*x8020)));
evalcond[1]=((((-1.0)*r12*x8020))+(((-1.0)*x8016*x8021))+((r11*x8022)));
evalcond[2]=((((-1.0)*r02*x8021))+(((-1.0)*x8017*x8020))+((x8015*x8018)));
evalcond[3]=((-1.0)+((x8014*x8017))+(((-1.0)*r02*x8020))+(((-1.0)*x8018*x8021)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8020))+(((-1.0)*r22*x8021))+((x8015*x8019)));
evalcond[5]=((((-1.0)*r12*x8021))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8020))+((x8015*x8016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8023=((1.0)*cj5);
CheckValue<IkReal> x8024 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8024.valid){
continue;
}
CheckValue<IkReal> x8025=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8023))+(((-1.0)*r10*sj5)))),-1);
if(!x8025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8024.value)+(((1.5707963267949)*(x8025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8026=IKsin(j4);
IkReal x8027=IKcos(j4);
IkReal x8028=(cj5*r10);
IkReal x8029=(r01*sj5);
IkReal x8030=(cj5*r00);
IkReal x8031=(cj5*r20);
IkReal x8032=((1.0)*x8027);
IkReal x8033=((1.0)*x8026);
IkReal x8034=(sj5*x8026);
evalcond[0]=(((r21*x8034))+(((-1.0)*r22*x8032))+(((-1.0)*x8031*x8033)));
evalcond[1]=((((-1.0)*x8028*x8033))+(((-1.0)*r12*x8032))+((r11*x8034)));
evalcond[2]=(((x8027*x8030))+(((-1.0)*r02*x8033))+(((-1.0)*x8029*x8032)));
evalcond[3]=((-1.0)+((x8026*x8029))+(((-1.0)*r02*x8032))+(((-1.0)*x8030*x8033)));
evalcond[4]=(((cj2*sj1))+((x8027*x8031))+((cj1*sj2))+(((-1.0)*r21*sj5*x8032))+(((-1.0)*r22*x8033)));
evalcond[5]=(((x8027*x8028))+(((-1.0)*r12*x8033))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8035=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8035.valid){
continue;
}
CheckValue<IkReal> x8036 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8035.value)))+(x8036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8037=IKsin(j4);
IkReal x8038=IKcos(j4);
IkReal x8039=(cj5*r10);
IkReal x8040=(r01*sj5);
IkReal x8041=(cj5*r00);
IkReal x8042=(cj5*r20);
IkReal x8043=((1.0)*x8038);
IkReal x8044=((1.0)*x8037);
IkReal x8045=(sj5*x8037);
evalcond[0]=((((-1.0)*x8042*x8044))+((r21*x8045))+(((-1.0)*r22*x8043)));
evalcond[1]=(((r11*x8045))+(((-1.0)*x8039*x8044))+(((-1.0)*r12*x8043)));
evalcond[2]=((((-1.0)*x8040*x8043))+(((-1.0)*r02*x8044))+((x8038*x8041)));
evalcond[3]=((-1.0)+((x8037*x8040))+(((-1.0)*x8041*x8044))+(((-1.0)*r02*x8043)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8043))+((x8038*x8042))+(((-1.0)*r22*x8044)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8043))+((x8038*x8039))+(((-1.0)*r12*x8044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8046=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8046;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8047=((1.0)*cj5);
IkReal x8048=((((-1.0)*r21*x8047))+(((-1.0)*r20*sj5)));
j4eval[0]=x8048;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x8047))+((r11*sj5))))));
j4eval[2]=IKsign(x8048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8049=cj5*cj5;
IkReal x8050=r01*r01;
IkReal x8051=(cj5*r00);
IkReal x8052=(r01*sj5);
IkReal x8053=((((-1.0)*x8049*x8050))+((x8049*(r00*r00)))+x8050+(r02*r02)+(((-2.0)*x8051*x8052)));
j4eval[0]=x8053;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8052))+x8051))));
j4eval[2]=IKsign(x8053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8054=cj5*cj5;
IkReal x8055=r01*r01;
IkReal x8056=(r01*sj5);
IkReal x8057=(cj5*r00);
CheckValue<IkReal> x8058=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8054*x8055))+((x8054*(r00*r00)))+(((-2.0)*x8056*x8057))+x8055+(r02*r02))),-1);
if(!x8058.valid){
continue;
}
CheckValue<IkReal> x8059 = IKatan2WithCheck(IkReal(((((-1.0)*x8056))+x8057)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8058.value)))+(x8059.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8060=IKsin(j4);
IkReal x8061=IKcos(j4);
IkReal x8062=(cj5*r10);
IkReal x8063=(r01*sj5);
IkReal x8064=(cj5*r00);
IkReal x8065=(cj5*r20);
IkReal x8066=((1.0)*x8061);
IkReal x8067=((1.0)*x8060);
IkReal x8068=(sj5*x8060);
evalcond[0]=(((r21*x8068))+(((-1.0)*r22*x8066))+(((-1.0)*x8065*x8067)));
evalcond[1]=((((-1.0)*r12*x8066))+(((-1.0)*x8062*x8067))+((r11*x8068)));
evalcond[2]=(((x8061*x8064))+(((-1.0)*x8063*x8066))+(((-1.0)*r02*x8067)));
evalcond[3]=((1.0)+(((-1.0)*x8064*x8067))+((x8060*x8063))+(((-1.0)*r02*x8066)));
evalcond[4]=(((cj2*sj1))+((x8061*x8065))+((cj1*sj2))+(((-1.0)*r21*sj5*x8066))+(((-1.0)*r22*x8067)));
evalcond[5]=(((x8061*x8062))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8067))+(((-1.0)*r11*sj5*x8066))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8069=((1.0)*cj5);
CheckValue<IkReal> x8070 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8069))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8070.valid){
continue;
}
CheckValue<IkReal> x8071=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8069))+(((-1.0)*r20*sj5)))),-1);
if(!x8071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8070.value)+(((1.5707963267949)*(x8071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8072=IKsin(j4);
IkReal x8073=IKcos(j4);
IkReal x8074=(cj5*r10);
IkReal x8075=(r01*sj5);
IkReal x8076=(cj5*r00);
IkReal x8077=(cj5*r20);
IkReal x8078=((1.0)*x8073);
IkReal x8079=((1.0)*x8072);
IkReal x8080=(sj5*x8072);
evalcond[0]=(((r21*x8080))+(((-1.0)*x8077*x8079))+(((-1.0)*r22*x8078)));
evalcond[1]=((((-1.0)*x8074*x8079))+((r11*x8080))+(((-1.0)*r12*x8078)));
evalcond[2]=((((-1.0)*r02*x8079))+(((-1.0)*x8075*x8078))+((x8073*x8076)));
evalcond[3]=((1.0)+((x8072*x8075))+(((-1.0)*r02*x8078))+(((-1.0)*x8076*x8079)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8078))+(((-1.0)*r22*x8079))+((x8073*x8077)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8078))+((cj1*cj2))+(((-1.0)*r12*x8079))+((x8073*x8074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8081 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8081.valid){
continue;
}
CheckValue<IkReal> x8082=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8081.value)+(((1.5707963267949)*(x8082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8083=IKsin(j4);
IkReal x8084=IKcos(j4);
IkReal x8085=(cj5*r10);
IkReal x8086=(r01*sj5);
IkReal x8087=(cj5*r00);
IkReal x8088=(cj5*r20);
IkReal x8089=((1.0)*x8084);
IkReal x8090=((1.0)*x8083);
IkReal x8091=(sj5*x8083);
evalcond[0]=((((-1.0)*x8088*x8090))+(((-1.0)*r22*x8089))+((r21*x8091)));
evalcond[1]=((((-1.0)*x8085*x8090))+((r11*x8091))+(((-1.0)*r12*x8089)));
evalcond[2]=((((-1.0)*r02*x8090))+(((-1.0)*x8086*x8089))+((x8084*x8087)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8089))+(((-1.0)*x8087*x8090))+((x8083*x8086)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8089))+((cj1*sj2))+((x8084*x8088))+(((-1.0)*r22*x8090)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8089))+((x8084*x8085))+(((-1.0)*r12*x8090))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8092=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8092);
rxp1_1=(px*r21);
rxp1_2=(r11*x8092);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8093=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8093);
rxp1_1=(px*r21);
rxp1_2=(r11*x8093);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8094=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8094);
rxp1_1=(px*r21);
rxp1_2=(r11*x8094);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8097=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8097.valid){
continue;
}
IkReal x8095=x8097.value;
IkReal x8096=(sj0*x8095);
cj4array[0]=((((-1.0)*sj1*sj2*x8096))+((cj1*cj2*x8096)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8098=IKsin(j4);
IkReal x8099=IKcos(j4);
IkReal x8100=(r21*sj5);
IkReal x8101=(cj5*r20);
IkReal x8102=((1.0)*x8098);
IkReal x8103=((1.0)*x8099);
evalcond[0]=((-1.0)*r02*x8098);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8103)));
evalcond[2]=((((-1.0)*x8101*x8102))+((x8098*x8100)));
evalcond[3]=((((-1.0)*cj5*r10*x8102))+((r11*sj5*x8098)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8100*x8103))+((x8099*x8101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8106=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8106.valid){
continue;
}
IkReal x8104=x8106.value;
IkReal x8105=((1.0)*x8104);
cj4array[0]=((((-1.0)*cj2*sj1*x8105))+(((-1.0)*cj1*sj2*x8105)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8107=IKsin(j4);
IkReal x8108=IKcos(j4);
IkReal x8109=(r11*sj5);
IkReal x8110=((1.0)*sj0);
IkReal x8111=((1.0)*x8108);
IkReal x8112=((1.0)*cj5*x8107);
evalcond[0]=((-1.0)*r02*x8107);
evalcond[1]=((((-1.0)*x8110))+(((-1.0)*r02*x8111)));
evalcond[2]=((((-1.0)*r20*x8112))+((r21*sj5*x8107)));
evalcond[3]=(((x8107*x8109))+(((-1.0)*r10*x8112)));
evalcond[4]=((((-1.0)*x8109*x8111))+((cj5*r10*x8108))+(((-1.0)*cj1*cj2*x8110))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8113=IKPowWithIntegerCheck(r02,-1);
if(!x8113.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8113.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8114=IKsin(j4);
IkReal x8115=IKcos(j4);
IkReal x8116=(cj5*x8115);
IkReal x8117=(sj5*x8114);
IkReal x8118=((1.0)*sj5*x8115);
IkReal x8119=((1.0)*cj5*x8114);
evalcond[0]=((-1.0)*r02*x8114);
evalcond[1]=((((-1.0)*r20*x8119))+((r21*x8117)));
evalcond[2]=(((r11*x8117))+(((-1.0)*r10*x8119)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x8118))+((cj1*sj2))+((r20*x8116)));
evalcond[4]=((((-1.0)*r11*x8118))+(((-1.0)*cj1*cj2*sj0))+((r10*x8116))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8120=((1.0)*sj0);
IkReal x8121=((1.0)*cj0);
CheckValue<IkReal> x8122=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8122.valid){
continue;
}
CheckValue<IkReal> x8123 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8120))+(((-1.0)*r02*x8121)))),IkReal(((((-1.0)*r11*sj5*x8120))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8122.value)))+(x8123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8124=IKsin(j4);
IkReal x8125=IKcos(j4);
IkReal x8126=(cj5*r10);
IkReal x8127=(sj1*sj2);
IkReal x8128=(r01*sj5);
IkReal x8129=(cj5*r00);
IkReal x8130=(cj5*r20);
IkReal x8131=((1.0)*x8125);
IkReal x8132=((1.0)*cj1*cj2);
IkReal x8133=((1.0)*x8124);
IkReal x8134=(sj5*x8124);
evalcond[0]=((((-1.0)*r22*x8131))+(((-1.0)*x8130*x8133))+((r21*x8134)));
evalcond[1]=(((r11*x8134))+cj0+(((-1.0)*r12*x8131))+(((-1.0)*x8126*x8133)));
evalcond[2]=((((-1.0)*r02*x8131))+(((-1.0)*sj0))+((x8124*x8128))+(((-1.0)*x8129*x8133)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8133))+(((-1.0)*r21*sj5*x8131))+((cj1*sj2))+((x8125*x8130)));
evalcond[4]=((((-1.0)*r02*x8133))+((cj0*x8127))+((x8125*x8129))+(((-1.0)*x8128*x8131))+(((-1.0)*cj0*x8132)));
evalcond[5]=((((-1.0)*r12*x8133))+((x8125*x8126))+(((-1.0)*r11*sj5*x8131))+(((-1.0)*sj0*x8132))+((sj0*x8127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8135=((1.0)*cj5);
CheckValue<IkReal> x8136=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8135)))),-1);
if(!x8136.valid){
continue;
}
CheckValue<IkReal> x8137 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8136.value)))+(x8137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8138=IKsin(j4);
IkReal x8139=IKcos(j4);
IkReal x8140=(cj5*r10);
IkReal x8141=(sj1*sj2);
IkReal x8142=(r01*sj5);
IkReal x8143=(cj5*r00);
IkReal x8144=(cj5*r20);
IkReal x8145=((1.0)*x8139);
IkReal x8146=((1.0)*cj1*cj2);
IkReal x8147=((1.0)*x8138);
IkReal x8148=(sj5*x8138);
evalcond[0]=((((-1.0)*x8144*x8147))+(((-1.0)*r22*x8145))+((r21*x8148)));
evalcond[1]=(cj0+(((-1.0)*x8140*x8147))+((r11*x8148))+(((-1.0)*r12*x8145)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8143*x8147))+(((-1.0)*r02*x8145))+((x8138*x8142)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8147))+(((-1.0)*r21*sj5*x8145))+((x8139*x8144)));
evalcond[4]=((((-1.0)*cj0*x8146))+((cj0*x8141))+(((-1.0)*r02*x8147))+((x8139*x8143))+(((-1.0)*x8142*x8145)));
evalcond[5]=((((-1.0)*r11*sj5*x8145))+((sj0*x8141))+(((-1.0)*sj0*x8146))+(((-1.0)*r12*x8147))+((x8139*x8140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8149=((1.0)*cj5);
CheckValue<IkReal> x8150 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8150.valid){
continue;
}
CheckValue<IkReal> x8151=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8149))+(((-1.0)*r00*sj5)))),-1);
if(!x8151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8150.value)+(((1.5707963267949)*(x8151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8152=IKsin(j4);
IkReal x8153=IKcos(j4);
IkReal x8154=(cj5*r10);
IkReal x8155=(sj1*sj2);
IkReal x8156=(r01*sj5);
IkReal x8157=(cj5*r00);
IkReal x8158=(cj5*r20);
IkReal x8159=((1.0)*x8153);
IkReal x8160=((1.0)*cj1*cj2);
IkReal x8161=((1.0)*x8152);
IkReal x8162=(sj5*x8152);
evalcond[0]=(((r21*x8162))+(((-1.0)*x8158*x8161))+(((-1.0)*r22*x8159)));
evalcond[1]=(((r11*x8162))+(((-1.0)*x8154*x8161))+cj0+(((-1.0)*r12*x8159)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8157*x8161))+((x8152*x8156))+(((-1.0)*r02*x8159)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8153*x8158))+(((-1.0)*r21*sj5*x8159))+(((-1.0)*r22*x8161)));
evalcond[4]=((((-1.0)*x8156*x8159))+(((-1.0)*r02*x8161))+((cj0*x8155))+((x8153*x8157))+(((-1.0)*cj0*x8160)));
evalcond[5]=(((sj0*x8155))+((x8153*x8154))+(((-1.0)*r11*sj5*x8159))+(((-1.0)*r12*x8161))+(((-1.0)*sj0*x8160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8163=cj5*cj5;
IkReal x8164=r21*r21;
IkReal x8165=(cj2*sj1);
IkReal x8166=(cj1*sj2);
IkReal x8167=(r21*sj5);
IkReal x8168=((1.0)*cj5*r20);
CheckValue<IkReal> x8169 = IKatan2WithCheck(IkReal((((r22*x8166))+((r22*x8165)))),IkReal(((((-1.0)*x8165*x8168))+(((-1.0)*x8166*x8168))+((x8165*x8167))+((x8166*x8167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8169.valid){
continue;
}
CheckValue<IkReal> x8170=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*cj5*r20*x8167))+(((-1.0)*x8163*x8164))+((x8163*(r20*r20)))+x8164)),-1);
if(!x8170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8169.value)+(((1.5707963267949)*(x8170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8171=IKsin(j4);
IkReal x8172=IKcos(j4);
IkReal x8173=(r21*sj5);
IkReal x8174=(cj5*r20);
IkReal x8175=((1.0)*x8172);
IkReal x8176=((1.0)*x8171);
evalcond[0]=((((-1.0)*r22*x8175))+(((-1.0)*x8174*x8176))+((x8171*x8173)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8176))+((x8172*x8174))+(((-1.0)*x8173*x8175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8177=(cj5*sj4);
IkReal x8178=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x8177))+((r01*x8178)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x8178))+((r10*x8177))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x8177))+((r01*x8178))))+IKsqr(((((-1.0)*r11*x8178))+((r10*x8177))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x8177))+((r01*x8178))), ((((-1.0)*r11*x8178))+((r10*x8177))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8179=IKcos(j0);
IkReal x8180=IKsin(j0);
IkReal x8181=(cj4*cj5);
IkReal x8182=(cj5*r01);
IkReal x8183=(r11*sj5);
IkReal x8184=((1.0)*sj5);
IkReal x8185=((1.0)*cj5);
IkReal x8186=((0.1157)*sj5);
IkReal x8187=((1.0)*sj4);
IkReal x8188=((1.0)*cj2);
IkReal x8189=((0.5723)*sj2);
IkReal x8190=((1.0)*cj4);
IkReal x8191=((0.5723)*cj2);
IkReal x8192=((1.0)*cj1*sj2);
IkReal x8193=(sj1*x8179);
IkReal x8194=(cj1*x8179);
IkReal x8195=(sj1*x8180);
IkReal x8196=(cj1*x8180);
evalcond[0]=((((-1.0)*r12*x8190))+((sj4*x8183))+x8179+(((-1.0)*r10*sj4*x8185)));
evalcond[1]=((((-1.0)*r02*x8190))+(((-1.0)*x8180))+(((-1.0)*r00*sj4*x8185))+((r01*sj4*sj5)));
evalcond[2]=((((-1.0)*x8179*x8192))+(((-1.0)*r00*x8184))+(((-1.0)*x8188*x8193))+(((-1.0)*x8182)));
evalcond[3]=((((-1.0)*x8188*x8195))+(((-1.0)*r10*x8184))+(((-1.0)*r11*x8185))+(((-1.0)*x8180*x8192)));
evalcond[4]=((((-1.0)*r02*x8187))+((r00*x8181))+((sj2*x8193))+(((-1.0)*x8188*x8194))+(((-1.0)*cj4*r01*x8184)));
evalcond[5]=(((r10*x8181))+((sj2*x8195))+(((-1.0)*x8188*x8196))+(((-1.0)*x8183*x8190))+(((-1.0)*r12*x8187)));
evalcond[6]=((((0.612)*x8194))+(((-1.0)*r00*x8186))+(((-0.1157)*x8182))+(((-1.0)*px))+((x8191*x8194))+(((-1.0)*x8189*x8193))+(((-0.16394)*x8180)));
evalcond[7]=((((0.612)*x8196))+(((0.16394)*x8179))+(((-1.0)*r10*x8186))+(((-1.0)*py))+((x8191*x8196))+(((-0.1157)*cj5*r11))+(((-1.0)*x8189*x8195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8197 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8197.valid){
continue;
}
CheckValue<IkReal> x8198=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8198.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8197.value)+(((1.5707963267949)*(x8198.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8199=IKcos(j0);
IkReal x8200=IKsin(j0);
IkReal x8201=(cj5*r01);
IkReal x8202=((1.0)*sj5);
IkReal x8203=(cj5*r11);
IkReal x8204=((0.1157)*sj5);
IkReal x8205=((1.0)*sj1);
IkReal x8206=((1.0)*cj1*sj2);
IkReal x8207=((0.5723)*sj1*sj2);
IkReal x8208=(cj2*x8199);
IkReal x8209=(cj1*x8200);
evalcond[0]=((((-1.0)*x8205*x8208))+(((-1.0)*r00*x8202))+(((-1.0)*x8201))+(((-1.0)*x8199*x8206)));
evalcond[1]=((((-1.0)*r10*x8202))+(((-1.0)*x8200*x8206))+(((-1.0)*cj2*x8200*x8205))+(((-1.0)*x8203)));
evalcond[2]=((((-1.0)*r00*x8204))+(((0.5723)*cj1*x8208))+(((0.612)*cj1*x8199))+(((-1.0)*px))+(((-0.16394)*x8200))+(((-0.1157)*x8201))+(((-1.0)*x8199*x8207)));
evalcond[3]=((((-1.0)*r10*x8204))+(((-1.0)*x8200*x8207))+(((0.5723)*cj2*x8209))+(((-1.0)*py))+(((0.16394)*x8199))+(((0.612)*x8209))+(((-0.1157)*x8203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8210=((1.0)*cj5);
IkReal x8211=((((-1.0)*r01*x8210))+(((-1.0)*r00*sj5)));
j4eval[0]=x8211;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8210))))));
j4eval[2]=IKsign(x8211);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8212=((1.0)*cj5);
IkReal x8213=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8212)));
j4eval[0]=x8213;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8212))))));
j4eval[2]=IKsign(x8213);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8214=((1.0)*sj0);
IkReal x8215=((1.0)*cj0);
IkReal x8216=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8216;
j4eval[1]=((IKabs(((((-1.0)*r02*x8215))+(((-1.0)*r12*x8214)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8215))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8214))))));
j4eval[2]=IKsign(x8216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8217=((-1.0)*r20);
IkReal x8219 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8219)==0){
continue;
}
IkReal x8218=pow(x8219,-0.5);
CheckValue<IkReal> x8220 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8217),IKFAST_ATAN2_MAGTHRESH);
if(!x8220.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8220.value));
IkReal gconst133=(r21*x8218);
IkReal gconst134=(x8217*x8218);
CheckValue<IkReal> x8221 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8221.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8221.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8222=((-1.0)*r20);
IkReal x8223=x8218;
CheckValue<IkReal> x8225 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8222),IKFAST_ATAN2_MAGTHRESH);
if(!x8225.valid){
continue;
}
IkReal x8224=((-1.0)*(x8225.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8224;
IkReal gconst132=x8224;
IkReal gconst133=(r21*x8223);
IkReal gconst134=(x8222*x8223);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8226=((-1.0)*r20);
IkReal x8227=x8218;
CheckValue<IkReal> x8229 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8226),IKFAST_ATAN2_MAGTHRESH);
if(!x8229.valid){
continue;
}
IkReal x8228=((-1.0)*(x8229.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8228;
IkReal gconst132=x8228;
IkReal gconst133=(r21*x8227);
IkReal gconst134=(x8226*x8227);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8230=((-1.0)*r20);
IkReal x8231=x8218;
CheckValue<IkReal> x8233 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8230),IKFAST_ATAN2_MAGTHRESH);
if(!x8233.valid){
continue;
}
IkReal x8232=((-1.0)*(x8233.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8232;
IkReal gconst132=x8232;
IkReal gconst133=(r21*x8231);
IkReal gconst134=(x8230*x8231);
IkReal x8234=r22*r22;
CheckValue<IkReal> x8237=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8234))),-1);
if(!x8237.valid){
continue;
}
IkReal x8235=x8237.value;
IkReal x8236=((((2.0)*x8235*(r20*r20)*(r21*r21)))+((x8235*(r21*r21*r21*r21)))+((x8235*(r20*r20*r20*r20)))+x8234);
j4eval[0]=x8236;
j4eval[1]=IKsign(x8236);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8238=(gconst133*r21);
IkReal x8239=(cj1*sj2);
IkReal x8240=(gconst134*r20);
IkReal x8241=(cj2*sj1);
CheckValue<IkReal> x8242 = IKatan2WithCheck(IkReal((((r22*x8239))+((r22*x8241)))),IkReal((((x8238*x8239))+((x8238*x8241))+(((-1.0)*x8239*x8240))+(((-1.0)*x8240*x8241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8242.valid){
continue;
}
CheckValue<IkReal> x8243=IKPowWithIntegerCheck(IKsign(((x8238*x8238)+(r22*r22)+(x8240*x8240)+(((-2.0)*x8238*x8240)))),-1);
if(!x8243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8242.value)+(((1.5707963267949)*(x8243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8244=IKsin(j4);
IkReal x8245=IKcos(j4);
IkReal x8246=(sj1*sj2);
IkReal x8247=(gconst133*r11);
IkReal x8248=(gconst133*r21);
IkReal x8249=(gconst133*r01);
IkReal x8250=((1.0)*x8245);
IkReal x8251=(gconst134*x8245);
IkReal x8252=((1.0)*x8244);
IkReal x8253=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8250))+(((-1.0)*gconst134*r20*x8252))+((x8244*x8248)));
evalcond[1]=(cj0+(((-1.0)*r12*x8250))+(((-1.0)*gconst134*r10*x8252))+((x8244*x8247)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8252))+((x8244*x8249))+(((-1.0)*r02*x8250)));
evalcond[3]=((((-1.0)*x8248*x8250))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8252))+((r20*x8251)));
evalcond[4]=(((r00*x8251))+(((-1.0)*x8249*x8250))+((cj0*x8246))+(((-1.0)*cj0*x8253))+(((-1.0)*r02*x8252)));
evalcond[5]=(((r10*x8251))+(((-1.0)*r12*x8252))+(((-1.0)*sj0*x8253))+(((-1.0)*x8247*x8250))+((sj0*x8246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8254=((1.0)*gconst134);
CheckValue<IkReal> x8255 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8254))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8255.valid){
continue;
}
CheckValue<IkReal> x8256=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8254)))),-1);
if(!x8256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8255.value)+(((1.5707963267949)*(x8256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8257=IKsin(j4);
IkReal x8258=IKcos(j4);
IkReal x8259=(sj1*sj2);
IkReal x8260=(gconst133*r11);
IkReal x8261=(gconst133*r21);
IkReal x8262=(gconst133*r01);
IkReal x8263=((1.0)*x8258);
IkReal x8264=(gconst134*x8258);
IkReal x8265=((1.0)*x8257);
IkReal x8266=((1.0)*cj1*cj2);
evalcond[0]=(((x8257*x8261))+(((-1.0)*r22*x8263))+(((-1.0)*gconst134*r20*x8265)));
evalcond[1]=((((-1.0)*r12*x8263))+cj0+((x8257*x8260))+(((-1.0)*gconst134*r10*x8265)));
evalcond[2]=((((-1.0)*sj0))+((x8257*x8262))+(((-1.0)*gconst134*r00*x8265))+(((-1.0)*r02*x8263)));
evalcond[3]=(((cj2*sj1))+((r20*x8264))+(((-1.0)*x8261*x8263))+((cj1*sj2))+(((-1.0)*r22*x8265)));
evalcond[4]=((((-1.0)*cj0*x8266))+(((-1.0)*x8262*x8263))+(((-1.0)*r02*x8265))+((cj0*x8259))+((r00*x8264)));
evalcond[5]=((((-1.0)*r12*x8265))+(((-1.0)*x8260*x8263))+(((-1.0)*sj0*x8266))+((sj0*x8259))+((r10*x8264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8267=((1.0)*gconst134);
CheckValue<IkReal> x8268=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8267)))),-1);
if(!x8268.valid){
continue;
}
CheckValue<IkReal> x8269 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*r20*x8267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8268.value)))+(x8269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8270=IKsin(j4);
IkReal x8271=IKcos(j4);
IkReal x8272=(sj1*sj2);
IkReal x8273=(gconst133*r11);
IkReal x8274=(gconst133*r21);
IkReal x8275=(gconst133*r01);
IkReal x8276=((1.0)*x8271);
IkReal x8277=(gconst134*x8271);
IkReal x8278=((1.0)*x8270);
IkReal x8279=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8276))+(((-1.0)*gconst134*r20*x8278))+((x8270*x8274)));
evalcond[1]=((((-1.0)*gconst134*r10*x8278))+cj0+(((-1.0)*r12*x8276))+((x8270*x8273)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8278))+(((-1.0)*r02*x8276))+((x8270*x8275)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8274*x8276))+((r20*x8277))+((cj1*sj2))+(((-1.0)*r22*x8278)));
evalcond[4]=((((-1.0)*x8275*x8276))+(((-1.0)*cj0*x8279))+((cj0*x8272))+(((-1.0)*r02*x8278))+((r00*x8277)));
evalcond[5]=((((-1.0)*x8273*x8276))+(((-1.0)*sj0*x8279))+(((-1.0)*r12*x8278))+((sj0*x8272))+((r10*x8277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8280=((-1.0)*r21);
IkReal x8282 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8282)==0){
continue;
}
IkReal x8281=pow(x8282,-0.5);
CheckValue<IkReal> x8283 = IKatan2WithCheck(IkReal(x8280),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8283.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8283.value))));
IkReal gconst136=(x8280*x8281);
IkReal gconst137=((1.0)*r20*x8281);
CheckValue<IkReal> x8284 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8284.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8284.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8285=((-1.0)*r21);
CheckValue<IkReal> x8288 = IKatan2WithCheck(IkReal(x8285),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8288.valid){
continue;
}
IkReal x8286=((1.0)*(x8288.value));
IkReal x8287=x8281;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8286)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8286)));
IkReal gconst136=(x8285*x8287);
IkReal gconst137=((1.0)*r20*x8287);
IkReal x8289=r22*r22;
IkReal x8290=((1.0)*x8289);
CheckValue<IkReal> x8294=IKPowWithIntegerCheck(((-1.0)+x8289),-1);
if(!x8294.valid){
continue;
}
IkReal x8291=x8294.value;
if((((1.0)+(((-1.0)*x8290)))) < -0.00001)
continue;
IkReal x8292=IKsqrt(((1.0)+(((-1.0)*x8290))));
IkReal x8293=(cj0*x8291*x8292);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x8290*x8293))+x8293))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8295=((-1.0)*r21);
CheckValue<IkReal> x8298 = IKatan2WithCheck(IkReal(x8295),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8298.valid){
continue;
}
IkReal x8296=((1.0)*(x8298.value));
IkReal x8297=x8281;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8296)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8296)));
IkReal gconst136=(x8295*x8297);
IkReal gconst137=((1.0)*r20*x8297);
IkReal x8299=r22*r22;
IkReal x8300=((1.0)*x8299);
CheckValue<IkReal> x8304=IKPowWithIntegerCheck(((-1.0)+x8299),-1);
if(!x8304.valid){
continue;
}
IkReal x8301=x8304.value;
if((((1.0)+(((-1.0)*x8300)))) < -0.00001)
continue;
IkReal x8302=IKsqrt(((1.0)+(((-1.0)*x8300))));
IkReal x8303=(sj0*x8301*x8302);
j4eval[0]=((IKabs((x8303+(((-1.0)*x8300*x8303)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8305=((-1.0)*r21);
CheckValue<IkReal> x8308 = IKatan2WithCheck(IkReal(x8305),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8308.valid){
continue;
}
IkReal x8306=((1.0)*(x8308.value));
IkReal x8307=x8281;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8306)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8306)));
IkReal gconst136=(x8305*x8307);
IkReal gconst137=((1.0)*r20*x8307);
IkReal x8309=r22*r22;
IkReal x8310=(r12*sj0);
IkReal x8311=(cj0*r02);
CheckValue<IkReal> x8315=IKPowWithIntegerCheck(((-1.0)+x8309),-1);
if(!x8315.valid){
continue;
}
IkReal x8312=x8315.value;
if((((1.0)+(((-1.0)*x8309)))) < -0.00001)
continue;
IkReal x8313=IKsqrt(((1.0)+(((-1.0)*x8309))));
IkReal x8314=(r22*x8312*x8313);
j4eval[0]=0;
j4eval[1]=((IKabs((((x8311*x8314))+((x8310*x8314)))))+(IKabs(((((-1.0)*x8310))+(((-1.0)*x8311))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8316=((1.0)*sj0);
IkReal x8317=((1.0)*cj0);
CheckValue<IkReal> x8318=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8318.valid){
continue;
}
CheckValue<IkReal> x8319 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8317))+(((-1.0)*r12*x8316)))),IkReal(((((-1.0)*gconst136*r11*x8316))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x8317))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8318.value)))+(x8319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8320=IKsin(j4);
IkReal x8321=IKcos(j4);
IkReal x8322=(gconst136*r01);
IkReal x8323=(gconst137*r10);
IkReal x8324=(sj1*sj2);
IkReal x8325=(gconst137*r20);
IkReal x8326=(gconst136*r11);
IkReal x8327=(gconst136*r21);
IkReal x8328=(gconst137*r00);
IkReal x8329=((1.0)*x8321);
IkReal x8330=((1.0)*cj1*cj2);
IkReal x8331=((1.0)*x8320);
evalcond[0]=((((-1.0)*r22*x8329))+((x8320*x8327))+(((-1.0)*x8325*x8331)));
evalcond[1]=(cj0+(((-1.0)*x8323*x8331))+(((-1.0)*r12*x8329))+((x8320*x8326)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8328*x8331))+((x8320*x8322))+(((-1.0)*r02*x8329)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8331))+((x8321*x8325))+((cj1*sj2))+(((-1.0)*x8327*x8329)));
evalcond[4]=(((cj0*x8324))+((x8321*x8328))+(((-1.0)*x8322*x8329))+(((-1.0)*r02*x8331))+(((-1.0)*cj0*x8330)));
evalcond[5]=((((-1.0)*r12*x8331))+((x8321*x8323))+((sj0*x8324))+(((-1.0)*sj0*x8330))+(((-1.0)*x8326*x8329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8332=((1.0)*gconst137);
CheckValue<IkReal> x8333=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8332))+(((-1.0)*gconst136*r10)))),-1);
if(!x8333.valid){
continue;
}
CheckValue<IkReal> x8334 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x8332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8333.value)))+(x8334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8335=IKsin(j4);
IkReal x8336=IKcos(j4);
IkReal x8337=(gconst136*r01);
IkReal x8338=(gconst137*r10);
IkReal x8339=(sj1*sj2);
IkReal x8340=(gconst137*r20);
IkReal x8341=(gconst136*r11);
IkReal x8342=(gconst136*r21);
IkReal x8343=(gconst137*r00);
IkReal x8344=((1.0)*x8336);
IkReal x8345=((1.0)*cj1*cj2);
IkReal x8346=((1.0)*x8335);
evalcond[0]=((((-1.0)*x8340*x8346))+(((-1.0)*r22*x8344))+((x8335*x8342)));
evalcond[1]=((((-1.0)*x8338*x8346))+cj0+((x8335*x8341))+(((-1.0)*r12*x8344)));
evalcond[2]=(((x8335*x8337))+(((-1.0)*sj0))+(((-1.0)*r02*x8344))+(((-1.0)*x8343*x8346)));
evalcond[3]=(((x8336*x8340))+((cj2*sj1))+(((-1.0)*x8342*x8344))+((cj1*sj2))+(((-1.0)*r22*x8346)));
evalcond[4]=(((x8336*x8343))+(((-1.0)*r02*x8346))+(((-1.0)*cj0*x8345))+((cj0*x8339))+(((-1.0)*x8337*x8344)));
evalcond[5]=((((-1.0)*x8341*x8344))+((x8336*x8338))+(((-1.0)*r12*x8346))+((sj0*x8339))+(((-1.0)*sj0*x8345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8347=((1.0)*gconst137);
CheckValue<IkReal> x8348=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8347)))),-1);
if(!x8348.valid){
continue;
}
CheckValue<IkReal> x8349 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x8347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8348.value)))+(x8349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8350=IKsin(j4);
IkReal x8351=IKcos(j4);
IkReal x8352=(gconst136*r01);
IkReal x8353=(gconst137*r10);
IkReal x8354=(sj1*sj2);
IkReal x8355=(gconst137*r20);
IkReal x8356=(gconst136*r11);
IkReal x8357=(gconst136*r21);
IkReal x8358=(gconst137*r00);
IkReal x8359=((1.0)*x8351);
IkReal x8360=((1.0)*cj1*cj2);
IkReal x8361=((1.0)*x8350);
evalcond[0]=(((x8350*x8357))+(((-1.0)*r22*x8359))+(((-1.0)*x8355*x8361)));
evalcond[1]=(((x8350*x8356))+cj0+(((-1.0)*r12*x8359))+(((-1.0)*x8353*x8361)));
evalcond[2]=(((x8350*x8352))+(((-1.0)*sj0))+(((-1.0)*r02*x8359))+(((-1.0)*x8358*x8361)));
evalcond[3]=(((cj2*sj1))+((x8351*x8355))+(((-1.0)*x8357*x8359))+((cj1*sj2))+(((-1.0)*r22*x8361)));
evalcond[4]=(((x8351*x8358))+((cj0*x8354))+(((-1.0)*x8352*x8359))+(((-1.0)*r02*x8361))+(((-1.0)*cj0*x8360)));
evalcond[5]=(((x8351*x8353))+(((-1.0)*r12*x8361))+((sj0*x8354))+(((-1.0)*sj0*x8360))+(((-1.0)*x8356*x8359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8362=((-1.0)*r10);
IkReal x8364 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8364)==0){
continue;
}
IkReal x8363=pow(x8364,-0.5);
CheckValue<IkReal> x8365 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8362),IKFAST_ATAN2_MAGTHRESH);
if(!x8365.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8365.value));
IkReal gconst139=(r11*x8363);
IkReal gconst140=(x8362*x8363);
CheckValue<IkReal> x8366 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8366.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8366.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8367=((-1.0)*r10);
IkReal x8368=x8363;
CheckValue<IkReal> x8370 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8367),IKFAST_ATAN2_MAGTHRESH);
if(!x8370.valid){
continue;
}
IkReal x8369=((-1.0)*(x8370.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8369;
IkReal gconst138=x8369;
IkReal gconst139=(r11*x8368);
IkReal gconst140=(x8367*x8368);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8371=((1.0)*sj0);
IkReal x8372=((1.0)*gconst139);
CheckValue<IkReal> x8373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8372))+(((-1.0)*gconst140*r21)))),-1);
if(!x8373.valid){
continue;
}
CheckValue<IkReal> x8374 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8371))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst139*r11*x8371))+(((-1.0)*cj0*r01*x8372))+((gconst140*r10*sj0))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8373.value)))+(x8374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8375=IKsin(j4);
IkReal x8376=IKcos(j4);
IkReal x8377=(gconst140*r00);
IkReal x8378=(sj1*sj2);
IkReal x8379=(gconst139*r11);
IkReal x8380=(gconst139*r01);
IkReal x8381=(gconst139*r21);
IkReal x8382=((1.0)*x8376);
IkReal x8383=((1.0)*x8375);
IkReal x8384=((1.0)*cj1*cj2);
IkReal x8385=(gconst140*x8376);
evalcond[0]=((((-1.0)*gconst140*r20*x8383))+((x8375*x8381))+(((-1.0)*r22*x8382)));
evalcond[1]=((((-1.0)*gconst140*r10*x8383))+cj0+(((-1.0)*r12*x8382))+((x8375*x8379)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8382))+(((-1.0)*x8377*x8383))+((x8375*x8380)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8381*x8382))+((cj1*sj2))+(((-1.0)*r22*x8383))+((r20*x8385)));
evalcond[4]=((((-1.0)*r02*x8383))+((cj0*x8378))+((x8376*x8377))+(((-1.0)*x8380*x8382))+(((-1.0)*cj0*x8384)));
evalcond[5]=((((-1.0)*sj0*x8384))+(((-1.0)*x8379*x8382))+((sj0*x8378))+((r10*x8385))+(((-1.0)*r12*x8383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8386=((1.0)*gconst140);
CheckValue<IkReal> x8387=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8386)))),-1);
if(!x8387.valid){
continue;
}
CheckValue<IkReal> x8388 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8387.value)))+(x8388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8389=IKsin(j4);
IkReal x8390=IKcos(j4);
IkReal x8391=(gconst140*r00);
IkReal x8392=(sj1*sj2);
IkReal x8393=(gconst139*r11);
IkReal x8394=(gconst139*r01);
IkReal x8395=(gconst139*r21);
IkReal x8396=((1.0)*x8390);
IkReal x8397=((1.0)*x8389);
IkReal x8398=((1.0)*cj1*cj2);
IkReal x8399=(gconst140*x8390);
evalcond[0]=((((-1.0)*gconst140*r20*x8397))+((x8389*x8395))+(((-1.0)*r22*x8396)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8397))+((x8389*x8393))+(((-1.0)*r12*x8396)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8396))+((x8389*x8394))+(((-1.0)*x8391*x8397)));
evalcond[3]=(((r20*x8399))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8395*x8396))+(((-1.0)*r22*x8397)));
evalcond[4]=((((-1.0)*r02*x8397))+((x8390*x8391))+(((-1.0)*cj0*x8398))+(((-1.0)*x8394*x8396))+((cj0*x8392)));
evalcond[5]=((((-1.0)*x8393*x8396))+(((-1.0)*sj0*x8398))+((sj0*x8392))+((r10*x8399))+(((-1.0)*r12*x8397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8400=((-1.0)*r11);
IkReal x8402 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8402)==0){
continue;
}
IkReal x8401=pow(x8402,-0.5);
CheckValue<IkReal> x8403 = IKatan2WithCheck(IkReal(x8400),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8403.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8403.value))));
IkReal gconst142=(x8400*x8401);
IkReal gconst143=((1.0)*r10*x8401);
CheckValue<IkReal> x8404 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8404.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8404.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8405=((-1.0)*r11);
CheckValue<IkReal> x8408 = IKatan2WithCheck(IkReal(x8405),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8408.valid){
continue;
}
IkReal x8406=((1.0)*(x8408.value));
IkReal x8407=x8401;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8406)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8406)));
IkReal gconst142=(x8405*x8407);
IkReal gconst143=((1.0)*r10*x8407);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8409=((-1.0)*r11);
CheckValue<IkReal> x8412 = IKatan2WithCheck(IkReal(x8409),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8412.valid){
continue;
}
IkReal x8410=((1.0)*(x8412.value));
IkReal x8411=x8401;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8410)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8410)));
IkReal gconst142=(x8409*x8411);
IkReal gconst143=((1.0)*r10*x8411);
IkReal x8413=r12*r12;
IkReal x8414=((1.0)*sj0);
IkReal x8415=(cj0*r02);
IkReal x8416=x8401;
j4eval[0]=((IKabs(((((-1.0)*x8414*x8416))+((r12*x8415*x8416))+((sj0*x8413*x8416)))))+(IKabs(((((-1.0)*r12*x8414))+(((-1.0)*x8415))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8417=((-1.0)*r11);
CheckValue<IkReal> x8420 = IKatan2WithCheck(IkReal(x8417),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8420.valid){
continue;
}
IkReal x8418=((1.0)*(x8420.value));
IkReal x8419=x8401;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8418)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8418)));
IkReal gconst142=(x8417*x8419);
IkReal gconst143=((1.0)*r10*x8419);
IkReal x8421=r12*r12;
IkReal x8422=(cj1*r22*sj2);
IkReal x8423=(cj2*r22*sj1);
CheckValue<IkReal> x8427=IKPowWithIntegerCheck(((-1.0)+x8421),-1);
if(!x8427.valid){
continue;
}
IkReal x8424=x8427.value;
if((((1.0)+(((-1.0)*x8421)))) < -0.00001)
continue;
IkReal x8425=IKsqrt(((1.0)+(((-1.0)*x8421))));
IkReal x8426=((1.0)*r12*x8424*x8425);
j4eval[0]=((IKabs(((((-1.0)*x8423*x8426))+(((-1.0)*x8422*x8426)))))+(IKabs((x8422+x8423))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8428=(gconst142*r21);
IkReal x8429=(cj1*sj2);
IkReal x8430=(cj2*sj1);
IkReal x8431=(gconst143*r20);
CheckValue<IkReal> x8432=IKPowWithIntegerCheck(IKsign(((x8431*x8431)+(r22*r22)+(x8428*x8428)+(((-2.0)*x8428*x8431)))),-1);
if(!x8432.valid){
continue;
}
CheckValue<IkReal> x8433 = IKatan2WithCheck(IkReal((((r22*x8430))+((r22*x8429)))),IkReal(((((-1.0)*x8430*x8431))+(((-1.0)*x8429*x8431))+((x8428*x8430))+((x8428*x8429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8432.value)))+(x8433.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8434=IKsin(j4);
IkReal x8435=IKcos(j4);
IkReal x8436=(sj1*sj2);
IkReal x8437=(gconst143*r20);
IkReal x8438=((1.0)*x8435);
IkReal x8439=((1.0)*cj1*cj2);
IkReal x8440=((1.0)*x8434);
IkReal x8441=(gconst142*x8434);
IkReal x8442=(gconst143*x8435);
evalcond[0]=(((r21*x8441))+(((-1.0)*x8437*x8440))+(((-1.0)*r22*x8438)));
evalcond[1]=(((r11*x8441))+cj0+(((-1.0)*r12*x8438))+(((-1.0)*gconst143*r10*x8440)));
evalcond[2]=((((-1.0)*gconst143*r00*x8440))+(((-1.0)*sj0))+(((-1.0)*r02*x8438))+((r01*x8441)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8438))+((cj1*sj2))+(((-1.0)*r22*x8440))+((x8435*x8437)));
evalcond[4]=((((-1.0)*gconst142*r01*x8438))+((r00*x8442))+(((-1.0)*cj0*x8439))+(((-1.0)*r02*x8440))+((cj0*x8436)));
evalcond[5]=((((-1.0)*sj0*x8439))+(((-1.0)*r12*x8440))+((sj0*x8436))+((r10*x8442))+(((-1.0)*gconst142*r11*x8438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8443=((1.0)*sj0);
IkReal x8444=((1.0)*gconst142);
CheckValue<IkReal> x8445 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8443))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst142*r11*x8443))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8444))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8445.valid){
continue;
}
CheckValue<IkReal> x8446=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8444))+(((-1.0)*gconst143*r21)))),-1);
if(!x8446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8445.value)+(((1.5707963267949)*(x8446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8447=IKsin(j4);
IkReal x8448=IKcos(j4);
IkReal x8449=(sj1*sj2);
IkReal x8450=(gconst143*r20);
IkReal x8451=((1.0)*x8448);
IkReal x8452=((1.0)*cj1*cj2);
IkReal x8453=((1.0)*x8447);
IkReal x8454=(gconst142*x8447);
IkReal x8455=(gconst143*x8448);
evalcond[0]=(((r21*x8454))+(((-1.0)*x8450*x8453))+(((-1.0)*r22*x8451)));
evalcond[1]=(((r11*x8454))+cj0+(((-1.0)*gconst143*r10*x8453))+(((-1.0)*r12*x8451)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8453))+(((-1.0)*r02*x8451))+((r01*x8454)));
evalcond[3]=(((cj2*sj1))+((x8448*x8450))+((cj1*sj2))+(((-1.0)*r22*x8453))+(((-1.0)*gconst142*r21*x8451)));
evalcond[4]=((((-1.0)*gconst142*r01*x8451))+(((-1.0)*cj0*x8452))+(((-1.0)*r02*x8453))+((r00*x8455))+((cj0*x8449)));
evalcond[5]=((((-1.0)*gconst142*r11*x8451))+(((-1.0)*sj0*x8452))+(((-1.0)*r12*x8453))+((sj0*x8449))+((r10*x8455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8456=((1.0)*gconst143);
CheckValue<IkReal> x8457=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8456))+(((-1.0)*gconst142*r00)))),-1);
if(!x8457.valid){
continue;
}
CheckValue<IkReal> x8458 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r21))+(((-1.0)*cj0*r20*x8456)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8457.value)))+(x8458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8459=IKsin(j4);
IkReal x8460=IKcos(j4);
IkReal x8461=(sj1*sj2);
IkReal x8462=(gconst143*r20);
IkReal x8463=((1.0)*x8460);
IkReal x8464=((1.0)*cj1*cj2);
IkReal x8465=((1.0)*x8459);
IkReal x8466=(gconst142*x8459);
IkReal x8467=(gconst143*x8460);
evalcond[0]=(((r21*x8466))+(((-1.0)*r22*x8463))+(((-1.0)*x8462*x8465)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8465))+((r11*x8466))+(((-1.0)*r12*x8463)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8466))+(((-1.0)*r02*x8463))+(((-1.0)*gconst143*r00*x8465)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8460*x8462))+(((-1.0)*r22*x8465))+(((-1.0)*gconst142*r21*x8463)));
evalcond[4]=((((-1.0)*r02*x8465))+((r00*x8467))+(((-1.0)*gconst142*r01*x8463))+((cj0*x8461))+(((-1.0)*cj0*x8464)));
evalcond[5]=((((-1.0)*sj0*x8464))+((r10*x8467))+(((-1.0)*r12*x8465))+(((-1.0)*gconst142*r11*x8463))+((sj0*x8461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8468=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8468;
j4eval[1]=IKsign(x8468);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8469=((1.0)*cj5);
IkReal x8470=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8469)));
j4eval[0]=x8470;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8469)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8470);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8471=cj5*cj5;
IkReal x8472=r11*r11;
IkReal x8473=(r11*sj5);
IkReal x8474=(cj5*r10);
IkReal x8475=((r12*r12)+x8472+(((-1.0)*x8471*x8472))+(((-2.0)*x8473*x8474))+((x8471*(r10*r10))));
j4eval[0]=x8475;
j4eval[1]=IKsign(x8475);
j4eval[2]=((IKabs(r12))+(IKabs((x8474+(((-1.0)*x8473))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8476=cj5*cj5;
IkReal x8477=r11*r11;
IkReal x8478=(cj5*r10);
IkReal x8479=(r11*sj5);
CheckValue<IkReal> x8480 = IKatan2WithCheck(IkReal((x8478+(((-1.0)*x8479)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8480.valid){
continue;
}
CheckValue<IkReal> x8481=IKPowWithIntegerCheck(IKsign((((x8476*(r10*r10)))+(r12*r12)+x8477+(((-2.0)*x8478*x8479))+(((-1.0)*x8476*x8477)))),-1);
if(!x8481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8480.value)+(((1.5707963267949)*(x8481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8482=IKsin(j4);
IkReal x8483=IKcos(j4);
IkReal x8484=(cj5*r10);
IkReal x8485=(r01*sj5);
IkReal x8486=(cj5*r00);
IkReal x8487=(cj5*r20);
IkReal x8488=((1.0)*x8483);
IkReal x8489=((1.0)*x8482);
IkReal x8490=(sj5*x8482);
evalcond[0]=((((-1.0)*x8487*x8489))+(((-1.0)*r22*x8488))+((r21*x8490)));
evalcond[1]=((((-1.0)*r02*x8488))+((x8482*x8485))+(((-1.0)*x8486*x8489)));
evalcond[2]=((((-1.0)*r11*sj5*x8488))+((x8483*x8484))+(((-1.0)*r12*x8489)));
evalcond[3]=((1.0)+(((-1.0)*x8484*x8489))+(((-1.0)*r12*x8488))+((r11*x8490)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8483*x8487))+(((-1.0)*r22*x8489))+(((-1.0)*r21*sj5*x8488)));
evalcond[5]=((((-1.0)*r02*x8489))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8483*x8486))+(((-1.0)*x8485*x8488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8491=((1.0)*cj5);
CheckValue<IkReal> x8492 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8491))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8492.valid){
continue;
}
CheckValue<IkReal> x8493=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8491)))),-1);
if(!x8493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8492.value)+(((1.5707963267949)*(x8493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8494=IKsin(j4);
IkReal x8495=IKcos(j4);
IkReal x8496=(cj5*r10);
IkReal x8497=(r01*sj5);
IkReal x8498=(cj5*r00);
IkReal x8499=(cj5*r20);
IkReal x8500=((1.0)*x8495);
IkReal x8501=((1.0)*x8494);
IkReal x8502=(sj5*x8494);
evalcond[0]=(((r21*x8502))+(((-1.0)*x8499*x8501))+(((-1.0)*r22*x8500)));
evalcond[1]=((((-1.0)*x8498*x8501))+((x8494*x8497))+(((-1.0)*r02*x8500)));
evalcond[2]=(((x8495*x8496))+(((-1.0)*r12*x8501))+(((-1.0)*r11*sj5*x8500)));
evalcond[3]=((1.0)+((r11*x8502))+(((-1.0)*r12*x8500))+(((-1.0)*x8496*x8501)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8501))+((x8495*x8499))+(((-1.0)*r21*sj5*x8500)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8497*x8500))+((x8495*x8498))+(((-1.0)*r02*x8501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8503=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8503.valid){
continue;
}
CheckValue<IkReal> x8504 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8503.value)))+(x8504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8505=IKsin(j4);
IkReal x8506=IKcos(j4);
IkReal x8507=(cj5*r10);
IkReal x8508=(r01*sj5);
IkReal x8509=(cj5*r00);
IkReal x8510=(cj5*r20);
IkReal x8511=((1.0)*x8506);
IkReal x8512=((1.0)*x8505);
IkReal x8513=(sj5*x8505);
evalcond[0]=(((r21*x8513))+(((-1.0)*r22*x8511))+(((-1.0)*x8510*x8512)));
evalcond[1]=((((-1.0)*x8509*x8512))+((x8505*x8508))+(((-1.0)*r02*x8511)));
evalcond[2]=(((x8506*x8507))+(((-1.0)*r12*x8512))+(((-1.0)*r11*sj5*x8511)));
evalcond[3]=((1.0)+((r11*x8513))+(((-1.0)*r12*x8511))+(((-1.0)*x8507*x8512)));
evalcond[4]=(((cj2*sj1))+((x8506*x8510))+((cj1*sj2))+(((-1.0)*r22*x8512))+(((-1.0)*r21*sj5*x8511)));
evalcond[5]=(((x8506*x8509))+(((-1.0)*x8508*x8511))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8514=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8514;
j4eval[1]=IKsign(x8514);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8515=((1.0)*cj5);
IkReal x8516=((((-1.0)*r21*x8515))+(((-1.0)*r20*sj5)));
j4eval[0]=x8516;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8515))))));
j4eval[2]=IKsign(x8516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8517=cj5*cj5;
IkReal x8518=r11*r11;
IkReal x8519=(cj5*r10);
IkReal x8520=(r11*sj5);
IkReal x8521=((((-1.0)*x8517*(r10*r10)))+(((2.0)*x8519*x8520))+((x8517*x8518))+(((-1.0)*x8518))+(((-1.0)*(r12*r12))));
j4eval[0]=x8521;
j4eval[1]=((IKabs(r12))+(IKabs((x8519+(((-1.0)*x8520))))));
j4eval[2]=IKsign(x8521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8522=cj5*cj5;
IkReal x8523=r11*r11;
IkReal x8524=(cj5*r10);
IkReal x8525=(r11*sj5);
CheckValue<IkReal> x8526=IKPowWithIntegerCheck(IKsign((((x8522*x8523))+(((2.0)*x8524*x8525))+(((-1.0)*x8523))+(((-1.0)*(r12*r12)))+(((-1.0)*x8522*(r10*r10))))),-1);
if(!x8526.valid){
continue;
}
CheckValue<IkReal> x8527 = IKatan2WithCheck(IkReal((x8524+(((-1.0)*x8525)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8526.value)))+(x8527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8528=IKsin(j4);
IkReal x8529=IKcos(j4);
IkReal x8530=(cj5*r10);
IkReal x8531=(r01*sj5);
IkReal x8532=(cj5*r00);
IkReal x8533=(cj5*r20);
IkReal x8534=((1.0)*x8529);
IkReal x8535=((1.0)*x8528);
IkReal x8536=(sj5*x8528);
evalcond[0]=((((-1.0)*x8533*x8535))+(((-1.0)*r22*x8534))+((r21*x8536)));
evalcond[1]=((((-1.0)*r02*x8534))+(((-1.0)*x8532*x8535))+((x8528*x8531)));
evalcond[2]=((((-1.0)*r11*sj5*x8534))+(((-1.0)*r12*x8535))+((x8529*x8530)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8534))+(((-1.0)*x8530*x8535))+((r11*x8536)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8535))+((cj1*sj2))+((x8529*x8533))+(((-1.0)*r21*sj5*x8534)));
evalcond[5]=((((-1.0)*r02*x8535))+(((-1.0)*x8531*x8534))+(((-1.0)*sj1*sj2))+((x8529*x8532))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8537=((1.0)*cj5);
CheckValue<IkReal> x8538=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8537))+(((-1.0)*r20*sj5)))),-1);
if(!x8538.valid){
continue;
}
CheckValue<IkReal> x8539 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8537))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8538.value)))+(x8539.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8540=IKsin(j4);
IkReal x8541=IKcos(j4);
IkReal x8542=(cj5*r10);
IkReal x8543=(r01*sj5);
IkReal x8544=(cj5*r00);
IkReal x8545=(cj5*r20);
IkReal x8546=((1.0)*x8541);
IkReal x8547=((1.0)*x8540);
IkReal x8548=(sj5*x8540);
evalcond[0]=((((-1.0)*r22*x8546))+((r21*x8548))+(((-1.0)*x8545*x8547)));
evalcond[1]=((((-1.0)*r02*x8546))+((x8540*x8543))+(((-1.0)*x8544*x8547)));
evalcond[2]=((((-1.0)*r11*sj5*x8546))+(((-1.0)*r12*x8547))+((x8541*x8542)));
evalcond[3]=((-1.0)+(((-1.0)*x8542*x8547))+(((-1.0)*r12*x8546))+((r11*x8548)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8547))+((x8541*x8545))+(((-1.0)*r21*sj5*x8546)));
evalcond[5]=((((-1.0)*r02*x8547))+(((-1.0)*x8543*x8546))+(((-1.0)*sj1*sj2))+((x8541*x8544))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8549 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8549.valid){
continue;
}
CheckValue<IkReal> x8550=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8549.value)+(((1.5707963267949)*(x8550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8551=IKsin(j4);
IkReal x8552=IKcos(j4);
IkReal x8553=(cj5*r10);
IkReal x8554=(r01*sj5);
IkReal x8555=(cj5*r00);
IkReal x8556=(cj5*r20);
IkReal x8557=((1.0)*x8552);
IkReal x8558=((1.0)*x8551);
IkReal x8559=(sj5*x8551);
evalcond[0]=(((r21*x8559))+(((-1.0)*r22*x8557))+(((-1.0)*x8556*x8558)));
evalcond[1]=(((x8551*x8554))+(((-1.0)*x8555*x8558))+(((-1.0)*r02*x8557)));
evalcond[2]=((((-1.0)*r12*x8558))+(((-1.0)*r11*sj5*x8557))+((x8552*x8553)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8557))+((r11*x8559))+(((-1.0)*x8553*x8558)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8558))+(((-1.0)*r21*sj5*x8557))+((cj1*sj2))+((x8552*x8556)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8554*x8557))+((cj1*cj2))+(((-1.0)*r02*x8558))+((x8552*x8555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8560=((-1.0)*r00);
IkReal x8562 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8562)==0){
continue;
}
IkReal x8561=pow(x8562,-0.5);
CheckValue<IkReal> x8563 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8560),IKFAST_ATAN2_MAGTHRESH);
if(!x8563.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8563.value));
IkReal gconst145=(r01*x8561);
IkReal gconst146=(x8560*x8561);
CheckValue<IkReal> x8564 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8564.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8564.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8565=((-1.0)*r00);
IkReal x8566=x8561;
CheckValue<IkReal> x8568 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8565),IKFAST_ATAN2_MAGTHRESH);
if(!x8568.valid){
continue;
}
IkReal x8567=((-1.0)*(x8568.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8567;
IkReal gconst144=x8567;
IkReal gconst145=(r01*x8566);
IkReal gconst146=(x8565*x8566);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8569=((1.0)*sj0);
IkReal x8570=((1.0)*gconst145);
CheckValue<IkReal> x8571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8570))+(((-1.0)*gconst146*r21)))),-1);
if(!x8571.valid){
continue;
}
CheckValue<IkReal> x8572 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8569))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8569))+(((-1.0)*cj0*r01*x8570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8571.value)))+(x8572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8573=IKsin(j4);
IkReal x8574=IKcos(j4);
IkReal x8575=(gconst146*r10);
IkReal x8576=(sj1*sj2);
IkReal x8577=(gconst146*r20);
IkReal x8578=(gconst146*r00);
IkReal x8579=((1.0)*x8574);
IkReal x8580=((1.0)*x8573);
IkReal x8581=(gconst145*x8573);
IkReal x8582=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8577*x8580))+((r21*x8581))+(((-1.0)*r22*x8579)));
evalcond[1]=(cj0+((r11*x8581))+(((-1.0)*r12*x8579))+(((-1.0)*x8575*x8580)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8579))+((r01*x8581))+(((-1.0)*x8578*x8580)));
evalcond[3]=((((-1.0)*gconst145*r21*x8579))+((cj2*sj1))+(((-1.0)*r22*x8580))+((cj1*sj2))+((x8574*x8577)));
evalcond[4]=((((-1.0)*gconst145*r01*x8579))+(((-1.0)*r02*x8580))+(((-1.0)*cj0*x8582))+((cj0*x8576))+((x8574*x8578)));
evalcond[5]=(((sj0*x8576))+(((-1.0)*r12*x8580))+((x8574*x8575))+(((-1.0)*sj0*x8582))+(((-1.0)*gconst145*r11*x8579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8583=((1.0)*gconst146);
CheckValue<IkReal> x8584 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8583))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8584.valid){
continue;
}
CheckValue<IkReal> x8585=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x8583)))),-1);
if(!x8585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8584.value)+(((1.5707963267949)*(x8585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8586=IKsin(j4);
IkReal x8587=IKcos(j4);
IkReal x8588=(gconst146*r10);
IkReal x8589=(sj1*sj2);
IkReal x8590=(gconst146*r20);
IkReal x8591=(gconst146*r00);
IkReal x8592=((1.0)*x8587);
IkReal x8593=((1.0)*x8586);
IkReal x8594=(gconst145*x8586);
IkReal x8595=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8592))+(((-1.0)*x8590*x8593))+((r21*x8594)));
evalcond[1]=(cj0+(((-1.0)*r12*x8592))+(((-1.0)*x8588*x8593))+((r11*x8594)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8592))+((r01*x8594))+(((-1.0)*x8591*x8593)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8593))+(((-1.0)*gconst145*r21*x8592))+((x8587*x8590))+((cj1*sj2)));
evalcond[4]=((((-1.0)*gconst145*r01*x8592))+(((-1.0)*r02*x8593))+(((-1.0)*cj0*x8595))+((x8587*x8591))+((cj0*x8589)));
evalcond[5]=((((-1.0)*sj0*x8595))+(((-1.0)*r12*x8593))+(((-1.0)*gconst145*r11*x8592))+((sj0*x8589))+((x8587*x8588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8596=((-1.0)*r01);
IkReal x8598 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8598)==0){
continue;
}
IkReal x8597=pow(x8598,-0.5);
CheckValue<IkReal> x8599 = IKatan2WithCheck(IkReal(x8596),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8599.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8599.value))));
IkReal gconst148=(x8596*x8597);
IkReal gconst149=((1.0)*r00*x8597);
CheckValue<IkReal> x8600 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8600.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8600.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8601=((-1.0)*r01);
CheckValue<IkReal> x8604 = IKatan2WithCheck(IkReal(x8601),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8604.valid){
continue;
}
IkReal x8602=((1.0)*(x8604.value));
IkReal x8603=x8597;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8602)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8602)));
IkReal gconst148=(x8601*x8603);
IkReal gconst149=((1.0)*r00*x8603);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8605=((-1.0)*r01);
CheckValue<IkReal> x8608 = IKatan2WithCheck(IkReal(x8605),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8608.valid){
continue;
}
IkReal x8606=((1.0)*(x8608.value));
IkReal x8607=x8597;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8606)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8606)));
IkReal gconst148=(x8605*x8607);
IkReal gconst149=((1.0)*r00*x8607);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8609=((-1.0)*r01);
CheckValue<IkReal> x8612 = IKatan2WithCheck(IkReal(x8609),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8612.valid){
continue;
}
IkReal x8610=((1.0)*(x8612.value));
IkReal x8611=x8597;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8610)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8610)));
IkReal gconst148=(x8609*x8611);
IkReal gconst149=((1.0)*r00*x8611);
IkReal x8613=r02*r02;
IkReal x8614=(r12*sj0);
IkReal x8615=((1.0)*cj0);
IkReal x8616=x8597;
j4eval[0]=((IKabs(((((-1.0)*r02*x8615))+(((-1.0)*x8614)))))+(IKabs((((r02*x8614*x8616))+(((-1.0)*x8615*x8616))+((cj0*x8613*x8616))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8617=((1.0)*sj0);
IkReal x8618=((1.0)*gconst148);
CheckValue<IkReal> x8619 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8617))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x8618))+((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8619.valid){
continue;
}
CheckValue<IkReal> x8620=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8618)))),-1);
if(!x8620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8619.value)+(((1.5707963267949)*(x8620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8621=IKsin(j4);
IkReal x8622=IKcos(j4);
IkReal x8623=(gconst148*r11);
IkReal x8624=(sj1*sj2);
IkReal x8625=((1.0)*x8622);
IkReal x8626=(gconst149*x8622);
IkReal x8627=(gconst148*x8621);
IkReal x8628=((1.0)*cj1*cj2);
IkReal x8629=((1.0)*x8621);
evalcond[0]=(((r21*x8627))+(((-1.0)*gconst149*r20*x8629))+(((-1.0)*r22*x8625)));
evalcond[1]=((((-1.0)*r12*x8625))+cj0+((x8621*x8623))+(((-1.0)*gconst149*r10*x8629)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8629))+((r01*x8627))+(((-1.0)*r02*x8625)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8625))+((r20*x8626))+(((-1.0)*r22*x8629)));
evalcond[4]=(((cj0*x8624))+((r00*x8626))+(((-1.0)*cj0*x8628))+(((-1.0)*gconst148*r01*x8625))+(((-1.0)*r02*x8629)));
evalcond[5]=((((-1.0)*r12*x8629))+((sj0*x8624))+(((-1.0)*x8623*x8625))+(((-1.0)*sj0*x8628))+((r10*x8626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8630=((1.0)*gconst149);
CheckValue<IkReal> x8631=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8630))+(((-1.0)*gconst148*r10)))),-1);
if(!x8631.valid){
continue;
}
CheckValue<IkReal> x8632 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8630))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8631.value)))+(x8632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8633=IKsin(j4);
IkReal x8634=IKcos(j4);
IkReal x8635=(gconst148*r11);
IkReal x8636=(sj1*sj2);
IkReal x8637=((1.0)*x8634);
IkReal x8638=(gconst149*x8634);
IkReal x8639=(gconst148*x8633);
IkReal x8640=((1.0)*cj1*cj2);
IkReal x8641=((1.0)*x8633);
evalcond[0]=((((-1.0)*gconst149*r20*x8641))+((r21*x8639))+(((-1.0)*r22*x8637)));
evalcond[1]=(cj0+(((-1.0)*r12*x8637))+((x8633*x8635))+(((-1.0)*gconst149*r10*x8641)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8641))+((r01*x8639))+(((-1.0)*r02*x8637)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8641))+(((-1.0)*gconst148*r21*x8637))+((r20*x8638)));
evalcond[4]=((((-1.0)*gconst148*r01*x8637))+((cj0*x8636))+(((-1.0)*cj0*x8640))+(((-1.0)*r02*x8641))+((r00*x8638)));
evalcond[5]=(((sj0*x8636))+(((-1.0)*sj0*x8640))+(((-1.0)*r12*x8641))+(((-1.0)*x8635*x8637))+((r10*x8638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8642=((1.0)*gconst149);
CheckValue<IkReal> x8643=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8642))+(((-1.0)*gconst148*r00)))),-1);
if(!x8643.valid){
continue;
}
CheckValue<IkReal> x8644 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8643.value)))+(x8644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8645=IKsin(j4);
IkReal x8646=IKcos(j4);
IkReal x8647=(gconst148*r11);
IkReal x8648=(sj1*sj2);
IkReal x8649=((1.0)*x8646);
IkReal x8650=(gconst149*x8646);
IkReal x8651=(gconst148*x8645);
IkReal x8652=((1.0)*cj1*cj2);
IkReal x8653=((1.0)*x8645);
evalcond[0]=(((r21*x8651))+(((-1.0)*r22*x8649))+(((-1.0)*gconst149*r20*x8653)));
evalcond[1]=((((-1.0)*gconst149*r10*x8653))+cj0+(((-1.0)*r12*x8649))+((x8645*x8647)));
evalcond[2]=(((r01*x8651))+(((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8653))+(((-1.0)*r02*x8649)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8653))+((r20*x8650))+(((-1.0)*gconst148*r21*x8649)));
evalcond[4]=(((r00*x8650))+((cj0*x8648))+(((-1.0)*cj0*x8652))+(((-1.0)*gconst148*r01*x8649))+(((-1.0)*r02*x8653)));
evalcond[5]=((((-1.0)*r12*x8653))+((r10*x8650))+(((-1.0)*sj0*x8652))+(((-1.0)*x8647*x8649))+((sj0*x8648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8654=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8654;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8654);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8655=((1.0)*cj5);
IkReal x8656=((((-1.0)*r11*x8655))+(((-1.0)*r10*sj5)));
j4eval[0]=x8656;
j4eval[1]=((IKabs(((((-1.0)*r20*x8655))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8656);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8657=cj5*cj5;
IkReal x8658=r01*r01;
IkReal x8659=(r01*sj5);
IkReal x8660=(cj5*r00);
IkReal x8661=((((-1.0)*(r02*r02)))+(((-1.0)*x8658))+((x8657*x8658))+(((-1.0)*x8657*(r00*r00)))+(((2.0)*x8659*x8660)));
j4eval[0]=x8661;
j4eval[1]=IKsign(x8661);
j4eval[2]=((IKabs(r02))+(IKabs((x8660+(((-1.0)*x8659))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8662=cj5*cj5;
IkReal x8663=r01*r01;
IkReal x8664=(r01*sj5);
IkReal x8665=(cj5*r00);
CheckValue<IkReal> x8666=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x8664*x8665))+((x8662*x8663))+(((-1.0)*x8663))+(((-1.0)*x8662*(r00*r00))))),-1);
if(!x8666.valid){
continue;
}
CheckValue<IkReal> x8667 = IKatan2WithCheck(IkReal((x8665+(((-1.0)*x8664)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8666.value)))+(x8667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8668=IKsin(j4);
IkReal x8669=IKcos(j4);
IkReal x8670=(cj5*r10);
IkReal x8671=(r01*sj5);
IkReal x8672=(cj5*r00);
IkReal x8673=(cj5*r20);
IkReal x8674=((1.0)*x8669);
IkReal x8675=((1.0)*x8668);
IkReal x8676=(sj5*x8668);
evalcond[0]=((((-1.0)*r22*x8674))+((r21*x8676))+(((-1.0)*x8673*x8675)));
evalcond[1]=((((-1.0)*r12*x8674))+((r11*x8676))+(((-1.0)*x8670*x8675)));
evalcond[2]=(((x8669*x8672))+(((-1.0)*r02*x8675))+(((-1.0)*x8671*x8674)));
evalcond[3]=((-1.0)+(((-1.0)*x8672*x8675))+(((-1.0)*r02*x8674))+((x8668*x8671)));
evalcond[4]=(((cj2*sj1))+((x8669*x8673))+(((-1.0)*r22*x8675))+((cj1*sj2))+(((-1.0)*r21*sj5*x8674)));
evalcond[5]=(((x8669*x8670))+(((-1.0)*r12*x8675))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8677=((1.0)*cj5);
CheckValue<IkReal> x8678=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8677)))),-1);
if(!x8678.valid){
continue;
}
CheckValue<IkReal> x8679 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8678.value)))+(x8679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8680=IKsin(j4);
IkReal x8681=IKcos(j4);
IkReal x8682=(cj5*r10);
IkReal x8683=(r01*sj5);
IkReal x8684=(cj5*r00);
IkReal x8685=(cj5*r20);
IkReal x8686=((1.0)*x8681);
IkReal x8687=((1.0)*x8680);
IkReal x8688=(sj5*x8680);
evalcond[0]=((((-1.0)*r22*x8686))+(((-1.0)*x8685*x8687))+((r21*x8688)));
evalcond[1]=((((-1.0)*x8682*x8687))+(((-1.0)*r12*x8686))+((r11*x8688)));
evalcond[2]=((((-1.0)*x8683*x8686))+((x8681*x8684))+(((-1.0)*r02*x8687)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8686))+((x8680*x8683))+(((-1.0)*x8684*x8687)));
evalcond[4]=(((cj2*sj1))+((x8681*x8685))+((cj1*sj2))+(((-1.0)*r22*x8687))+(((-1.0)*r21*sj5*x8686)));
evalcond[5]=(((x8681*x8682))+(((-1.0)*r12*x8687))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8689=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8689.valid){
continue;
}
CheckValue<IkReal> x8690 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8689.value)))+(x8690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8691=IKsin(j4);
IkReal x8692=IKcos(j4);
IkReal x8693=(cj5*r10);
IkReal x8694=(r01*sj5);
IkReal x8695=(cj5*r00);
IkReal x8696=(cj5*r20);
IkReal x8697=((1.0)*x8692);
IkReal x8698=((1.0)*x8691);
IkReal x8699=(sj5*x8691);
evalcond[0]=(((r21*x8699))+(((-1.0)*x8696*x8698))+(((-1.0)*r22*x8697)));
evalcond[1]=((((-1.0)*r12*x8697))+(((-1.0)*x8693*x8698))+((r11*x8699)));
evalcond[2]=((((-1.0)*r02*x8698))+((x8692*x8695))+(((-1.0)*x8694*x8697)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8697))+(((-1.0)*x8695*x8698))+((x8691*x8694)));
evalcond[4]=((((-1.0)*r21*sj5*x8697))+((cj2*sj1))+((cj1*sj2))+((x8692*x8696))+(((-1.0)*r22*x8698)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8698))+(((-1.0)*r11*sj5*x8697))+((x8692*x8693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8700=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8700;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8701=((1.0)*cj5);
IkReal x8702=((((-1.0)*r21*x8701))+(((-1.0)*r20*sj5)));
j4eval[0]=x8702;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x8701)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8703=cj5*cj5;
IkReal x8704=r01*r01;
IkReal x8705=(cj5*r00);
IkReal x8706=(r01*sj5);
IkReal x8707=((((-2.0)*x8705*x8706))+x8704+(((-1.0)*x8703*x8704))+((x8703*(r00*r00)))+(r02*r02));
j4eval[0]=x8707;
j4eval[1]=((IKabs(r02))+(IKabs((x8705+(((-1.0)*x8706))))));
j4eval[2]=IKsign(x8707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8708=cj5*cj5;
IkReal x8709=r01*r01;
IkReal x8710=(r01*sj5);
IkReal x8711=(cj5*r00);
CheckValue<IkReal> x8712=IKPowWithIntegerCheck(IKsign((x8709+(((-2.0)*x8710*x8711))+(r02*r02)+((x8708*(r00*r00)))+(((-1.0)*x8708*x8709)))),-1);
if(!x8712.valid){
continue;
}
CheckValue<IkReal> x8713 = IKatan2WithCheck(IkReal((x8711+(((-1.0)*x8710)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8712.value)))+(x8713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8714=IKsin(j4);
IkReal x8715=IKcos(j4);
IkReal x8716=(cj5*r10);
IkReal x8717=(r01*sj5);
IkReal x8718=(cj5*r00);
IkReal x8719=(cj5*r20);
IkReal x8720=((1.0)*x8715);
IkReal x8721=((1.0)*x8714);
IkReal x8722=(sj5*x8714);
evalcond[0]=(((r21*x8722))+(((-1.0)*x8719*x8721))+(((-1.0)*r22*x8720)));
evalcond[1]=(((r11*x8722))+(((-1.0)*r12*x8720))+(((-1.0)*x8716*x8721)));
evalcond[2]=(((x8715*x8718))+(((-1.0)*r02*x8721))+(((-1.0)*x8717*x8720)));
evalcond[3]=((1.0)+((x8714*x8717))+(((-1.0)*r02*x8720))+(((-1.0)*x8718*x8721)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8715*x8719))+(((-1.0)*r21*sj5*x8720))+(((-1.0)*r22*x8721)));
evalcond[5]=((((-1.0)*r11*sj5*x8720))+(((-1.0)*sj1*sj2))+((x8715*x8716))+((cj1*cj2))+(((-1.0)*r12*x8721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8723=((1.0)*cj5);
CheckValue<IkReal> x8724=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8723))+(((-1.0)*r20*sj5)))),-1);
if(!x8724.valid){
continue;
}
CheckValue<IkReal> x8725 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8724.value)))+(x8725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8726=IKsin(j4);
IkReal x8727=IKcos(j4);
IkReal x8728=(cj5*r10);
IkReal x8729=(r01*sj5);
IkReal x8730=(cj5*r00);
IkReal x8731=(cj5*r20);
IkReal x8732=((1.0)*x8727);
IkReal x8733=((1.0)*x8726);
IkReal x8734=(sj5*x8726);
evalcond[0]=(((r21*x8734))+(((-1.0)*x8731*x8733))+(((-1.0)*r22*x8732)));
evalcond[1]=(((r11*x8734))+(((-1.0)*x8728*x8733))+(((-1.0)*r12*x8732)));
evalcond[2]=((((-1.0)*x8729*x8732))+((x8727*x8730))+(((-1.0)*r02*x8733)));
evalcond[3]=((1.0)+((x8726*x8729))+(((-1.0)*r02*x8732))+(((-1.0)*x8730*x8733)));
evalcond[4]=(((cj2*sj1))+((x8727*x8731))+((cj1*sj2))+(((-1.0)*r21*sj5*x8732))+(((-1.0)*r22*x8733)));
evalcond[5]=((((-1.0)*r11*sj5*x8732))+((x8727*x8728))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x8733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8735 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8735.valid){
continue;
}
CheckValue<IkReal> x8736=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8735.value)+(((1.5707963267949)*(x8736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8737=IKsin(j4);
IkReal x8738=IKcos(j4);
IkReal x8739=(cj5*r10);
IkReal x8740=(r01*sj5);
IkReal x8741=(cj5*r00);
IkReal x8742=(cj5*r20);
IkReal x8743=((1.0)*x8738);
IkReal x8744=((1.0)*x8737);
IkReal x8745=(sj5*x8737);
evalcond[0]=((((-1.0)*x8742*x8744))+(((-1.0)*r22*x8743))+((r21*x8745)));
evalcond[1]=((((-1.0)*r12*x8743))+(((-1.0)*x8739*x8744))+((r11*x8745)));
evalcond[2]=((((-1.0)*x8740*x8743))+((x8738*x8741))+(((-1.0)*r02*x8744)));
evalcond[3]=((1.0)+(((-1.0)*x8741*x8744))+((x8737*x8740))+(((-1.0)*r02*x8743)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8743))+((cj1*sj2))+(((-1.0)*r22*x8744))+((x8738*x8742)));
evalcond[5]=((((-1.0)*r12*x8744))+(((-1.0)*sj1*sj2))+((x8738*x8739))+(((-1.0)*r11*sj5*x8743))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8746=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8746);
rxp1_1=(px*r21);
rxp1_2=(r11*x8746);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8747=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8747);
rxp1_1=(px*r21);
rxp1_2=(r11*x8747);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8748=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8748);
rxp1_1=(px*r21);
rxp1_2=(r11*x8748);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8751=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8751.valid){
continue;
}
IkReal x8749=x8751.value;
IkReal x8750=(sj0*x8749);
cj4array[0]=(((cj1*cj2*x8750))+(((-1.0)*sj1*sj2*x8750)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8752=IKsin(j4);
IkReal x8753=IKcos(j4);
IkReal x8754=(r21*sj5);
IkReal x8755=(cj5*r20);
IkReal x8756=((1.0)*x8752);
IkReal x8757=((1.0)*x8753);
evalcond[0]=((-1.0)*r02*x8752);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8757)));
evalcond[2]=((((-1.0)*x8755*x8756))+((x8752*x8754)));
evalcond[3]=((((-1.0)*cj5*r10*x8756))+((r11*sj5*x8752)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8754*x8757))+((cj1*sj2))+((x8753*x8755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8760=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8760.valid){
continue;
}
IkReal x8758=x8760.value;
IkReal x8759=((1.0)*x8758);
cj4array[0]=((((-1.0)*cj2*sj1*x8759))+(((-1.0)*cj1*sj2*x8759)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8761=IKsin(j4);
IkReal x8762=IKcos(j4);
IkReal x8763=(r11*sj5);
IkReal x8764=((1.0)*sj0);
IkReal x8765=((1.0)*x8762);
IkReal x8766=((1.0)*cj5*x8761);
evalcond[0]=((-1.0)*r02*x8761);
evalcond[1]=((((-1.0)*r02*x8765))+(((-1.0)*x8764)));
evalcond[2]=((((-1.0)*r20*x8766))+((r21*sj5*x8761)));
evalcond[3]=(((x8761*x8763))+(((-1.0)*r10*x8766)));
evalcond[4]=(((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x8764))+(((-1.0)*x8763*x8765))+((cj5*r10*x8762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8767=IKPowWithIntegerCheck(r02,-1);
if(!x8767.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8767.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8768=IKsin(j4);
IkReal x8769=IKcos(j4);
IkReal x8770=(cj5*x8769);
IkReal x8771=(sj5*x8768);
IkReal x8772=((1.0)*sj5*x8769);
IkReal x8773=((1.0)*cj5*x8768);
evalcond[0]=((-1.0)*r02*x8768);
evalcond[1]=((((-1.0)*r20*x8773))+((r21*x8771)));
evalcond[2]=((((-1.0)*r10*x8773))+((r11*x8771)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x8772))+((cj1*sj2))+((r20*x8770)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((r10*x8770))+((sj0*sj1*sj2))+(((-1.0)*r11*x8772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8774=((1.0)*sj0);
IkReal x8775=((1.0)*cj0);
CheckValue<IkReal> x8776 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8775))+(((-1.0)*r12*x8774)))),IkReal(((((-1.0)*r11*sj5*x8774))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8776.valid){
continue;
}
CheckValue<IkReal> x8777=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8776.value)+(((1.5707963267949)*(x8777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8778=IKsin(j4);
IkReal x8779=IKcos(j4);
IkReal x8780=(cj5*r10);
IkReal x8781=(sj1*sj2);
IkReal x8782=(r01*sj5);
IkReal x8783=(cj5*r00);
IkReal x8784=(cj5*r20);
IkReal x8785=((1.0)*x8779);
IkReal x8786=((1.0)*cj1*cj2);
IkReal x8787=((1.0)*x8778);
IkReal x8788=(sj5*x8778);
evalcond[0]=(((r21*x8788))+(((-1.0)*x8784*x8787))+(((-1.0)*r22*x8785)));
evalcond[1]=(((r11*x8788))+cj0+(((-1.0)*x8780*x8787))+(((-1.0)*r12*x8785)));
evalcond[2]=((((-1.0)*sj0))+((x8778*x8782))+(((-1.0)*x8783*x8787))+(((-1.0)*r02*x8785)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8779*x8784))+(((-1.0)*r22*x8787))+(((-1.0)*r21*sj5*x8785)));
evalcond[4]=((((-1.0)*cj0*x8786))+((cj0*x8781))+(((-1.0)*r02*x8787))+((x8779*x8783))+(((-1.0)*x8782*x8785)));
evalcond[5]=(((x8779*x8780))+(((-1.0)*sj0*x8786))+(((-1.0)*r12*x8787))+((sj0*x8781))+(((-1.0)*r11*sj5*x8785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8789=((1.0)*cj5);
CheckValue<IkReal> x8790=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8789)))),-1);
if(!x8790.valid){
continue;
}
CheckValue<IkReal> x8791 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8790.value)))+(x8791.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8792=IKsin(j4);
IkReal x8793=IKcos(j4);
IkReal x8794=(cj5*r10);
IkReal x8795=(sj1*sj2);
IkReal x8796=(r01*sj5);
IkReal x8797=(cj5*r00);
IkReal x8798=(cj5*r20);
IkReal x8799=((1.0)*x8793);
IkReal x8800=((1.0)*cj1*cj2);
IkReal x8801=((1.0)*x8792);
IkReal x8802=(sj5*x8792);
evalcond[0]=(((r21*x8802))+(((-1.0)*x8798*x8801))+(((-1.0)*r22*x8799)));
evalcond[1]=((((-1.0)*r12*x8799))+cj0+((r11*x8802))+(((-1.0)*x8794*x8801)));
evalcond[2]=((((-1.0)*sj0))+((x8792*x8796))+(((-1.0)*x8797*x8801))+(((-1.0)*r02*x8799)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8801))+((cj1*sj2))+((x8793*x8798))+(((-1.0)*r21*sj5*x8799)));
evalcond[4]=((((-1.0)*x8796*x8799))+((cj0*x8795))+(((-1.0)*r02*x8801))+((x8793*x8797))+(((-1.0)*cj0*x8800)));
evalcond[5]=((((-1.0)*r12*x8801))+(((-1.0)*r11*sj5*x8799))+(((-1.0)*sj0*x8800))+((x8793*x8794))+((sj0*x8795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8803=((1.0)*cj5);
CheckValue<IkReal> x8804=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8803)))),-1);
if(!x8804.valid){
continue;
}
CheckValue<IkReal> x8805 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8803))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8804.value)))+(x8805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8806=IKsin(j4);
IkReal x8807=IKcos(j4);
IkReal x8808=(cj5*r10);
IkReal x8809=(sj1*sj2);
IkReal x8810=(r01*sj5);
IkReal x8811=(cj5*r00);
IkReal x8812=(cj5*r20);
IkReal x8813=((1.0)*x8807);
IkReal x8814=((1.0)*cj1*cj2);
IkReal x8815=((1.0)*x8806);
IkReal x8816=(sj5*x8806);
evalcond[0]=(((r21*x8816))+(((-1.0)*r22*x8813))+(((-1.0)*x8812*x8815)));
evalcond[1]=((((-1.0)*r12*x8813))+cj0+((r11*x8816))+(((-1.0)*x8808*x8815)));
evalcond[2]=((((-1.0)*sj0))+((x8806*x8810))+(((-1.0)*r02*x8813))+(((-1.0)*x8811*x8815)));
evalcond[3]=((((-1.0)*r22*x8815))+((x8807*x8812))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8813)));
evalcond[4]=(((x8807*x8811))+((cj0*x8809))+(((-1.0)*r02*x8815))+(((-1.0)*x8810*x8813))+(((-1.0)*cj0*x8814)));
evalcond[5]=((((-1.0)*r12*x8815))+(((-1.0)*sj0*x8814))+((sj0*x8809))+(((-1.0)*r11*sj5*x8813))+((x8807*x8808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8817=cj1*cj1;
IkReal x8818=cj2*cj2;
IkReal x8819=(cj1*cj2);
IkReal x8820=(sj1*sj2);
IkReal x8821=((1430750000.0)*py);
IkReal x8822=(r00*sj5);
IkReal x8823=((177021000.0)*cj1);
IkReal x8824=(r10*sj5);
IkReal x8825=(cj5*r11);
IkReal x8826=((1530000000.0)*cj1);
IkReal x8827=(cj5*r01);
IkReal x8828=((1430750000.0)*px);
IkReal x8829=((165537775.0)*x8827);
CheckValue<IkReal> x8830 = IKatan2WithCheck(IkReal((((x8823*x8825))+((x8823*x8824))+(((165537775.0)*x8819*x8825))+(((165537775.0)*x8819*x8824))+((x8819*x8821))+(((-47419645.0)*x8827))+(((-47419645.0)*x8822))+(((-409850000.0)*px))+(((-1.0)*x8820*x8821))+((py*x8826))+(((-165537775.0)*x8820*x8824))+(((-165537775.0)*x8820*x8825)))),IkReal((((x8823*x8827))+(((165537775.0)*x8819*x8822))+((x8819*x8828))+((x8819*x8829))+(((47419645.0)*x8824))+(((47419645.0)*x8825))+((x8822*x8823))+(((-1.0)*x8820*x8829))+(((-1.0)*x8820*x8828))+(((409850000.0)*py))+(((-165537775.0)*x8820*x8822))+((px*x8826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8830.valid){
continue;
}
CheckValue<IkReal> x8831=IKPowWithIntegerCheck(IKsign(((886009034.0)+(((1637636450.0)*x8817*x8818))+(((117541775.0)*x8817))+(((-818818225.0)*x8818))+(((-1637636450.0)*x8819*x8820))+(((1751238000.0)*cj2*x8817))+(((-1751238000.0)*cj1*x8820)))),-1);
if(!x8831.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8830.value)+(((1.5707963267949)*(x8831.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8832=IKcos(j0);
IkReal x8833=IKsin(j0);
IkReal x8834=((0.1157)*cj5);
IkReal x8835=((0.1157)*sj5);
IkReal x8836=((0.612)*cj1);
IkReal x8837=((0.5723)*cj1*cj2);
IkReal x8838=((0.5723)*sj1*sj2);
evalcond[0]=((((-1.0)*x8832*x8838))+((x8832*x8836))+((x8832*x8837))+(((-1.0)*px))+(((-1.0)*r00*x8835))+(((-1.0)*r01*x8834))+(((-0.16394)*x8833)));
evalcond[1]=((((-1.0)*x8833*x8838))+(((-1.0)*r10*x8835))+(((0.16394)*x8832))+((x8833*x8837))+((x8833*x8836))+(((-1.0)*py))+(((-1.0)*r11*x8834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8839=((1.0)*cj5);
IkReal x8840=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8839)));
j4eval[0]=x8840;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8839)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8840);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8841=((1.0)*cj5);
IkReal x8842=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8841)));
j4eval[0]=x8842;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8841))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8843=((1.0)*sj0);
IkReal x8844=((1.0)*cj0);
IkReal x8845=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8845;
j4eval[1]=((IKabs(((((-1.0)*r02*x8844))+(((-1.0)*r12*x8843)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8844))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8843))))));
j4eval[2]=IKsign(x8845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8846=((-1.0)*r20);
IkReal x8848 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8848)==0){
continue;
}
IkReal x8847=pow(x8848,-0.5);
CheckValue<IkReal> x8849 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8846),IKFAST_ATAN2_MAGTHRESH);
if(!x8849.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8849.value));
IkReal gconst1=(r21*x8847);
IkReal gconst2=(x8846*x8847);
CheckValue<IkReal> x8850 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8850.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8850.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8851=((-1.0)*r20);
IkReal x8852=x8847;
CheckValue<IkReal> x8854 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8851),IKFAST_ATAN2_MAGTHRESH);
if(!x8854.valid){
continue;
}
IkReal x8853=((-1.0)*(x8854.value));
sj5=gconst1;
cj5=gconst2;
j5=x8853;
IkReal gconst0=x8853;
IkReal gconst1=(r21*x8852);
IkReal gconst2=(x8851*x8852);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8855=((-1.0)*r20);
IkReal x8856=x8847;
CheckValue<IkReal> x8858 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8855),IKFAST_ATAN2_MAGTHRESH);
if(!x8858.valid){
continue;
}
IkReal x8857=((-1.0)*(x8858.value));
sj5=gconst1;
cj5=gconst2;
j5=x8857;
IkReal gconst0=x8857;
IkReal gconst1=(r21*x8856);
IkReal gconst2=(x8855*x8856);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8859=((-1.0)*r20);
IkReal x8860=x8847;
CheckValue<IkReal> x8862 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8859),IKFAST_ATAN2_MAGTHRESH);
if(!x8862.valid){
continue;
}
IkReal x8861=((-1.0)*(x8862.value));
sj5=gconst1;
cj5=gconst2;
j5=x8861;
IkReal gconst0=x8861;
IkReal gconst1=(r21*x8860);
IkReal gconst2=(x8859*x8860);
IkReal x8863=r22*r22;
CheckValue<IkReal> x8867=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8863))),-1);
if(!x8867.valid){
continue;
}
IkReal x8864=x8867.value;
IkReal x8865=(sj3*x8864);
IkReal x8866=((((2.0)*x8865*(r20*r20)*(r21*r21)))+((sj3*x8863))+((x8865*(r20*r20*r20*r20)))+((x8865*(r21*r21*r21*r21))));
j4eval[0]=x8866;
j4eval[1]=IKsign(x8866);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8868=((-1.0)*r20);
IkReal x8869=x8847;
CheckValue<IkReal> x8871 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8868),IKFAST_ATAN2_MAGTHRESH);
if(!x8871.valid){
continue;
}
IkReal x8870=((-1.0)*(x8871.value));
sj5=gconst1;
cj5=gconst2;
j5=x8870;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8870;
IkReal gconst1=(r21*x8869);
IkReal gconst2=(x8868*x8869);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8872=((-1.0)*r20);
IkReal x8873=x8847;
CheckValue<IkReal> x8875 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8872),IKFAST_ATAN2_MAGTHRESH);
if(!x8875.valid){
continue;
}
IkReal x8874=((-1.0)*(x8875.value));
sj5=gconst1;
cj5=gconst2;
j5=x8874;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8874;
IkReal gconst1=(r21*x8873);
IkReal gconst2=(x8872*x8873);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8876=((-1.0)*r20);
IkReal x8877=x8847;
CheckValue<IkReal> x8879 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8876),IKFAST_ATAN2_MAGTHRESH);
if(!x8879.valid){
continue;
}
IkReal x8878=((-1.0)*(x8879.value));
sj5=gconst1;
cj5=gconst2;
j5=x8878;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8878;
IkReal gconst1=(r21*x8877);
IkReal gconst2=(x8876*x8877);
IkReal x8880=((1.0)*(r22*r22));
CheckValue<IkReal> x8884=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8880))),-1);
if(!x8884.valid){
continue;
}
IkReal x8881=x8884.value;
IkReal x8882=((1.0)*x8881);
IkReal x8883=((((-1.0)*x8882*(r21*r21*r21*r21)))+(((-1.0)*x8880))+(((-1.0)*x8882*(r20*r20*r20*r20)))+(((-2.0)*x8881*(r20*r20)*(r21*r21))));
j4eval[0]=x8883;
j4eval[1]=IKsign(x8883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8885=((-1.0)*r20);
IkReal x8886=x8847;
CheckValue<IkReal> x8888 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8885),IKFAST_ATAN2_MAGTHRESH);
if(!x8888.valid){
continue;
}
IkReal x8887=((-1.0)*(x8888.value));
sj5=gconst1;
cj5=gconst2;
j5=x8887;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8887;
IkReal gconst1=(r21*x8886);
IkReal gconst2=(x8885*x8886);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8889=((-1.0)*r20);
IkReal x8890=x8847;
CheckValue<IkReal> x8892 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8889),IKFAST_ATAN2_MAGTHRESH);
if(!x8892.valid){
continue;
}
IkReal x8891=((-1.0)*(x8892.value));
sj5=gconst1;
cj5=gconst2;
j5=x8891;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8891;
IkReal gconst1=(r21*x8890);
IkReal gconst2=(x8889*x8890);
IkReal x8893=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8897=IKPowWithIntegerCheck(x8893,-1);
if(!x8897.valid){
continue;
}
IkReal x8894=x8897.value;
IkReal x8895=((1.0)*x8894);
IkReal x8896=((((-1.0)*x8895*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x8894))+(((-1.0)*(r12*r12)))+(((-1.0)*x8895*(r10*r10)*(r20*r20))));
j4eval[0]=x8896;
j4eval[1]=r12;
j4eval[2]=x8893;
j4eval[3]=IKsign(x8896);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8898=((-1.0)*r20);
IkReal x8899=x8847;
CheckValue<IkReal> x8901 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8898),IKFAST_ATAN2_MAGTHRESH);
if(!x8901.valid){
continue;
}
IkReal x8900=((-1.0)*(x8901.value));
sj5=gconst1;
cj5=gconst2;
j5=x8900;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8900;
IkReal gconst1=(r21*x8899);
IkReal gconst2=(x8898*x8899);
IkReal x8902=r22*r22;
IkReal x8903=(cj1*r12*sj2);
IkReal x8904=(cj2*r12*sj1);
CheckValue<IkReal> x8908=IKPowWithIntegerCheck(((-1.0)+x8902),-1);
if(!x8908.valid){
continue;
}
IkReal x8905=x8908.value;
if((((1.0)+(((-1.0)*x8902)))) < -0.00001)
continue;
IkReal x8906=IKsqrt(((1.0)+(((-1.0)*x8902))));
IkReal x8907=(r22*x8905*x8906);
j4eval[0]=((IKabs((((x8903*x8907))+((x8904*x8907)))))+(IKabs(((((-1.0)*x8903))+(((-1.0)*x8904))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8909=(cj1*sj2);
IkReal x8910=(cj2*sj1);
IkReal x8911=((1.0)*r12);
IkReal x8912=(gconst1*r11);
IkReal x8913=((1.0)*gconst2*r10);
CheckValue<IkReal> x8914=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8914.valid){
continue;
}
CheckValue<IkReal> x8915 = IKatan2WithCheck(IkReal(((((-1.0)*x8909*x8913))+((x8910*x8912))+(((-1.0)*x8910*x8913))+((x8909*x8912)))),IkReal(((((-1.0)*x8909*x8911))+(((-1.0)*x8910*x8911)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8914.value)))+(x8915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8916=IKcos(j4);
IkReal x8917=IKsin(j4);
IkReal x8918=((1.0)*x8916);
IkReal x8919=(gconst1*x8916);
IkReal x8920=(gconst1*x8917);
IkReal x8921=((1.0)*gconst2*x8917);
evalcond[0]=((((-1.0)*gconst2*r10*x8918))+((r11*x8919))+((r12*x8917)));
evalcond[1]=((((-1.0)*r20*x8921))+((r21*x8920))+(((-1.0)*r22*x8918)));
evalcond[2]=((((-1.0)*r02*x8918))+(((-1.0)*r00*x8921))+((r01*x8920)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8918))+((r11*x8920))+(((-1.0)*r10*x8921)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x8918))+((r22*x8917))+((cj1*sj2))+((r21*x8919)));
evalcond[5]=(((r01*x8919))+((r02*x8917))+(((-1.0)*gconst2*r00*x8918))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8922=(gconst2*r10);
IkReal x8923=(gconst1*r11);
CheckValue<IkReal> x8924=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x8922*x8922)))+(((2.0)*x8922*x8923))+(((-1.0)*(x8923*x8923))))),-1);
if(!x8924.valid){
continue;
}
CheckValue<IkReal> x8925 = IKatan2WithCheck(IkReal((x8923+(((-1.0)*x8922)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8924.value)))+(x8925.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8926=IKcos(j4);
IkReal x8927=IKsin(j4);
IkReal x8928=((1.0)*x8926);
IkReal x8929=(gconst1*x8926);
IkReal x8930=(gconst1*x8927);
IkReal x8931=((1.0)*gconst2*x8927);
evalcond[0]=((((-1.0)*gconst2*r10*x8928))+((r12*x8927))+((r11*x8929)));
evalcond[1]=((((-1.0)*r22*x8928))+(((-1.0)*r20*x8931))+((r21*x8930)));
evalcond[2]=((((-1.0)*r02*x8928))+(((-1.0)*r00*x8931))+((r01*x8930)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8931))+(((-1.0)*r12*x8928))+((r11*x8930)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x8928))+((cj1*sj2))+((r22*x8927))+((r21*x8929)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x8927))+(((-1.0)*gconst2*r00*x8928))+((r01*x8929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8932=((1.0)*gconst2);
CheckValue<IkReal> x8933 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8932))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8933.valid){
continue;
}
CheckValue<IkReal> x8934=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8932)))),-1);
if(!x8934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8933.value)+(((1.5707963267949)*(x8934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8935=IKcos(j4);
IkReal x8936=IKsin(j4);
IkReal x8937=((1.0)*x8935);
IkReal x8938=(gconst1*x8935);
IkReal x8939=(gconst1*x8936);
IkReal x8940=((1.0)*gconst2*x8936);
evalcond[0]=(((r12*x8936))+(((-1.0)*gconst2*r10*x8937))+((r11*x8938)));
evalcond[1]=((((-1.0)*r22*x8937))+(((-1.0)*r20*x8940))+((r21*x8939)));
evalcond[2]=((((-1.0)*r00*x8940))+((r01*x8939))+(((-1.0)*r02*x8937)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8937))+(((-1.0)*r10*x8940))+((r11*x8939)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8937))+((r21*x8938))+((r22*x8936)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8937))+((r01*x8938))+((r02*x8936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8941=((-1.0)*r20);
IkReal x8942=x8847;
CheckValue<IkReal> x8944 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8941),IKFAST_ATAN2_MAGTHRESH);
if(!x8944.valid){
continue;
}
IkReal x8943=((-1.0)*(x8944.value));
sj5=gconst1;
cj5=gconst2;
j5=x8943;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8943;
IkReal gconst1=(r21*x8942);
IkReal gconst2=(x8941*x8942);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8945=((-1.0)*r20);
IkReal x8946=x8847;
CheckValue<IkReal> x8948 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8945),IKFAST_ATAN2_MAGTHRESH);
if(!x8948.valid){
continue;
}
IkReal x8947=((-1.0)*(x8948.value));
sj5=gconst1;
cj5=gconst2;
j5=x8947;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8947;
IkReal gconst1=(r21*x8946);
IkReal gconst2=(x8945*x8946);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8949=((-1.0)*r20);
IkReal x8950=x8847;
CheckValue<IkReal> x8952 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8949),IKFAST_ATAN2_MAGTHRESH);
if(!x8952.valid){
continue;
}
IkReal x8951=((-1.0)*(x8952.value));
sj5=gconst1;
cj5=gconst2;
j5=x8951;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8951;
IkReal gconst1=(r21*x8950);
IkReal gconst2=(x8949*x8950);
IkReal x8953=r22*r22;
IkReal x8954=(cj1*r12*sj2);
IkReal x8955=(cj2*r12*sj1);
CheckValue<IkReal> x8959=IKPowWithIntegerCheck(((-1.0)+x8953),-1);
if(!x8959.valid){
continue;
}
IkReal x8956=x8959.value;
if((((1.0)+(((-1.0)*x8953)))) < -0.00001)
continue;
IkReal x8957=IKsqrt(((1.0)+(((-1.0)*x8953))));
IkReal x8958=(r22*x8956*x8957);
j4eval[0]=((IKabs((((x8954*x8958))+((x8955*x8958)))))+(IKabs(((((-1.0)*x8955))+(((-1.0)*x8954))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8960=(cj1*sj2);
IkReal x8961=(cj2*sj1);
IkReal x8962=((1.0)*r12);
IkReal x8963=(gconst1*r11);
IkReal x8964=((1.0)*gconst2*r10);
CheckValue<IkReal> x8965=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8965.valid){
continue;
}
CheckValue<IkReal> x8966 = IKatan2WithCheck(IkReal((((x8961*x8963))+((x8960*x8963))+(((-1.0)*x8961*x8964))+(((-1.0)*x8960*x8964)))),IkReal(((((-1.0)*x8961*x8962))+(((-1.0)*x8960*x8962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8965.value)))+(x8966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8967=IKcos(j4);
IkReal x8968=IKsin(j4);
IkReal x8969=((1.0)*x8967);
IkReal x8970=(gconst1*x8967);
IkReal x8971=(gconst1*x8968);
IkReal x8972=((1.0)*gconst2*x8968);
evalcond[0]=(((r11*x8970))+(((-1.0)*gconst2*r10*x8969))+((r12*x8968)));
evalcond[1]=(((r21*x8971))+(((-1.0)*r22*x8969))+(((-1.0)*r20*x8972)));
evalcond[2]=(((r01*x8971))+(((-1.0)*r02*x8969))+(((-1.0)*r00*x8972)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x8972))+(((-1.0)*r12*x8969))+((r11*x8971)));
evalcond[4]=(((r21*x8970))+((cj2*sj1))+((r22*x8968))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8969)));
evalcond[5]=(((r02*x8968))+(((-1.0)*sj1*sj2))+((r01*x8970))+((cj1*cj2))+(((-1.0)*gconst2*r00*x8969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8973=(gconst1*r11);
IkReal x8974=(gconst2*r10);
CheckValue<IkReal> x8975 = IKatan2WithCheck(IkReal((x8973+(((-1.0)*x8974)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8975.valid){
continue;
}
CheckValue<IkReal> x8976=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8973*x8973)+(x8974*x8974)+(((-2.0)*x8973*x8974)))),-1);
if(!x8976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8975.value)+(((1.5707963267949)*(x8976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8977=IKcos(j4);
IkReal x8978=IKsin(j4);
IkReal x8979=((1.0)*x8977);
IkReal x8980=(gconst1*x8977);
IkReal x8981=(gconst1*x8978);
IkReal x8982=((1.0)*gconst2*x8978);
evalcond[0]=(((r12*x8978))+((r11*x8980))+(((-1.0)*gconst2*r10*x8979)));
evalcond[1]=((((-1.0)*r22*x8979))+(((-1.0)*r20*x8982))+((r21*x8981)));
evalcond[2]=(((r01*x8981))+(((-1.0)*r02*x8979))+(((-1.0)*r00*x8982)));
evalcond[3]=((-1.0)+((r11*x8981))+(((-1.0)*r12*x8979))+(((-1.0)*r10*x8982)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x8979))+((cj1*sj2))+((r21*x8980))+((r22*x8978)));
evalcond[5]=(((r01*x8980))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8979))+((cj1*cj2))+((r02*x8978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8983 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8983.valid){
continue;
}
CheckValue<IkReal> x8984=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8983.value)+(((1.5707963267949)*(x8984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8985=IKcos(j4);
IkReal x8986=IKsin(j4);
IkReal x8987=((1.0)*x8985);
IkReal x8988=(gconst1*x8985);
IkReal x8989=(gconst1*x8986);
IkReal x8990=((1.0)*gconst2*x8986);
evalcond[0]=((((-1.0)*gconst2*r10*x8987))+((r11*x8988))+((r12*x8986)));
evalcond[1]=(((r21*x8989))+(((-1.0)*r22*x8987))+(((-1.0)*r20*x8990)));
evalcond[2]=(((r01*x8989))+(((-1.0)*r02*x8987))+(((-1.0)*r00*x8990)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x8990))+(((-1.0)*r12*x8987))+((r11*x8989)));
evalcond[4]=((((-1.0)*gconst2*r20*x8987))+((cj2*sj1))+((r22*x8986))+((cj1*sj2))+((r21*x8988)));
evalcond[5]=(((r01*x8988))+((r02*x8986))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8987))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8991=((-1.0)*r20);
IkReal x8992=x8847;
CheckValue<IkReal> x8994 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8991),IKFAST_ATAN2_MAGTHRESH);
if(!x8994.valid){
continue;
}
IkReal x8993=((-1.0)*(x8994.value));
sj5=gconst1;
cj5=gconst2;
j5=x8993;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8993;
IkReal gconst1=(r21*x8992);
IkReal gconst2=(x8991*x8992);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8995=((-1.0)*r20);
IkReal x8996=x8847;
CheckValue<IkReal> x8998 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8995),IKFAST_ATAN2_MAGTHRESH);
if(!x8998.valid){
continue;
}
IkReal x8997=((-1.0)*(x8998.value));
sj5=gconst1;
cj5=gconst2;
j5=x8997;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8997;
IkReal gconst1=(r21*x8996);
IkReal gconst2=(x8995*x8996);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8999=((-1.0)*r20);
IkReal x9000=x8847;
CheckValue<IkReal> x9002 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8999),IKFAST_ATAN2_MAGTHRESH);
if(!x9002.valid){
continue;
}
IkReal x9001=((-1.0)*(x9002.value));
sj5=gconst1;
cj5=gconst2;
j5=x9001;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9001;
IkReal gconst1=(r21*x9000);
IkReal gconst2=(x8999*x9000);
IkReal x9003=r22*r22;
IkReal x9004=((1.0)*r02);
IkReal x9005=(cj1*sj2);
IkReal x9006=(cj2*sj1);
CheckValue<IkReal> x9010=IKPowWithIntegerCheck(((-1.0)+x9003),-1);
if(!x9010.valid){
continue;
}
IkReal x9007=x9010.value;
if((((1.0)+(((-1.0)*x9003)))) < -0.00001)
continue;
IkReal x9008=IKsqrt(((1.0)+(((-1.0)*x9003))));
IkReal x9009=(r02*r22*x9007*x9008);
j4eval[0]=((IKabs((((x9006*x9009))+((x9005*x9009)))))+(IKabs(((((-1.0)*x9004*x9005))+(((-1.0)*x9004*x9006))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9011=(cj1*sj2);
IkReal x9012=(gconst1*r01);
IkReal x9013=((1.0)*r02);
IkReal x9014=(cj2*sj1);
IkReal x9015=((1.0)*gconst2*r00);
CheckValue<IkReal> x9016 = IKatan2WithCheck(IkReal(((((-1.0)*x9011*x9015))+(((-1.0)*x9014*x9015))+((x9012*x9014))+((x9011*x9012)))),IkReal(((((-1.0)*x9011*x9013))+(((-1.0)*x9013*x9014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9016.valid){
continue;
}
CheckValue<IkReal> x9017=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9016.value)+(((1.5707963267949)*(x9017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9018=IKcos(j4);
IkReal x9019=IKsin(j4);
IkReal x9020=((1.0)*x9018);
IkReal x9021=(gconst1*x9018);
IkReal x9022=(gconst1*x9019);
IkReal x9023=((1.0)*gconst2*x9019);
evalcond[0]=((((-1.0)*gconst2*r00*x9020))+((r01*x9021))+((r02*x9019)));
evalcond[1]=(((r21*x9022))+(((-1.0)*r20*x9023))+(((-1.0)*r22*x9020)));
evalcond[2]=((((-1.0)*r12*x9020))+((r11*x9022))+(((-1.0)*r10*x9023)));
evalcond[3]=((-1.0)+((r01*x9022))+(((-1.0)*r02*x9020))+(((-1.0)*r00*x9023)));
evalcond[4]=((((-1.0)*gconst2*r20*x9020))+((cj2*sj1))+((cj1*sj2))+((r21*x9021))+((r22*x9019)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9020))+((r12*x9019))+((r11*x9021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9024=(gconst1*r01);
IkReal x9025=(gconst2*r00);
CheckValue<IkReal> x9026=IKPowWithIntegerCheck(IKsign(((x9025*x9025)+(((-2.0)*x9024*x9025))+(x9024*x9024)+(r02*r02))),-1);
if(!x9026.valid){
continue;
}
CheckValue<IkReal> x9027 = IKatan2WithCheck(IkReal((x9024+(((-1.0)*x9025)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9026.value)))+(x9027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9028=IKcos(j4);
IkReal x9029=IKsin(j4);
IkReal x9030=((1.0)*x9028);
IkReal x9031=(gconst1*x9028);
IkReal x9032=(gconst1*x9029);
IkReal x9033=((1.0)*gconst2*x9029);
evalcond[0]=(((r01*x9031))+((r02*x9029))+(((-1.0)*gconst2*r00*x9030)));
evalcond[1]=(((r21*x9032))+(((-1.0)*r20*x9033))+(((-1.0)*r22*x9030)));
evalcond[2]=((((-1.0)*r10*x9033))+(((-1.0)*r12*x9030))+((r11*x9032)));
evalcond[3]=((-1.0)+((r01*x9032))+(((-1.0)*r00*x9033))+(((-1.0)*r02*x9030)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9030))+((cj1*sj2))+((r22*x9029))+((r21*x9031)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9030))+((r11*x9031))+((r12*x9029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9034=((1.0)*gconst2);
CheckValue<IkReal> x9035=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9034))+(((-1.0)*gconst1*r10)))),-1);
if(!x9035.valid){
continue;
}
CheckValue<IkReal> x9036 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9034))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9035.value)))+(x9036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9037=IKcos(j4);
IkReal x9038=IKsin(j4);
IkReal x9039=((1.0)*x9037);
IkReal x9040=(gconst1*x9037);
IkReal x9041=(gconst1*x9038);
IkReal x9042=((1.0)*gconst2*x9038);
evalcond[0]=(((r01*x9040))+((r02*x9038))+(((-1.0)*gconst2*r00*x9039)));
evalcond[1]=((((-1.0)*r22*x9039))+(((-1.0)*r20*x9042))+((r21*x9041)));
evalcond[2]=((((-1.0)*r12*x9039))+(((-1.0)*r10*x9042))+((r11*x9041)));
evalcond[3]=((-1.0)+((r01*x9041))+(((-1.0)*r00*x9042))+(((-1.0)*r02*x9039)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9039))+((cj1*sj2))+((r22*x9038))+((r21*x9040)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9039))+((r11*x9040))+((r12*x9038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9043=((-1.0)*r20);
IkReal x9044=x8847;
CheckValue<IkReal> x9046 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9043),IKFAST_ATAN2_MAGTHRESH);
if(!x9046.valid){
continue;
}
IkReal x9045=((-1.0)*(x9046.value));
sj5=gconst1;
cj5=gconst2;
j5=x9045;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9045;
IkReal gconst1=(r21*x9044);
IkReal gconst2=(x9043*x9044);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9047=((-1.0)*r20);
IkReal x9048=x8847;
CheckValue<IkReal> x9050 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9047),IKFAST_ATAN2_MAGTHRESH);
if(!x9050.valid){
continue;
}
IkReal x9049=((-1.0)*(x9050.value));
sj5=gconst1;
cj5=gconst2;
j5=x9049;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9049;
IkReal gconst1=(r21*x9048);
IkReal gconst2=(x9047*x9048);
IkReal x9051=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9055=IKPowWithIntegerCheck(x9051,-1);
if(!x9055.valid){
continue;
}
IkReal x9052=x9055.value;
IkReal x9053=((1.0)*x9052);
IkReal x9054=((((-1.0)*x9053*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9052))+(((-1.0)*x9053*(r01*r01)*(r21*r21))));
j4eval[0]=x9054;
j4eval[1]=IKsign(x9054);
j4eval[2]=r02;
j4eval[3]=x9051;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9056=((-1.0)*r20);
IkReal x9057=x8847;
CheckValue<IkReal> x9059 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9056),IKFAST_ATAN2_MAGTHRESH);
if(!x9059.valid){
continue;
}
IkReal x9058=((-1.0)*(x9059.value));
sj5=gconst1;
cj5=gconst2;
j5=x9058;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9058;
IkReal gconst1=(r21*x9057);
IkReal gconst2=(x9056*x9057);
IkReal x9060=r22*r22;
IkReal x9061=((1.0)*r02);
IkReal x9062=(cj1*sj2);
IkReal x9063=(cj2*sj1);
CheckValue<IkReal> x9067=IKPowWithIntegerCheck(((-1.0)+x9060),-1);
if(!x9067.valid){
continue;
}
IkReal x9064=x9067.value;
if((((1.0)+(((-1.0)*x9060)))) < -0.00001)
continue;
IkReal x9065=IKsqrt(((1.0)+(((-1.0)*x9060))));
IkReal x9066=(r02*r22*x9064*x9065);
j4eval[0]=((IKabs((((x9063*x9066))+((x9062*x9066)))))+(IKabs(((((-1.0)*x9061*x9063))+(((-1.0)*x9061*x9062))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9068=(cj1*sj2);
IkReal x9069=(gconst1*r01);
IkReal x9070=((1.0)*r02);
IkReal x9071=(cj2*sj1);
IkReal x9072=((1.0)*gconst2*r00);
CheckValue<IkReal> x9073 = IKatan2WithCheck(IkReal(((((-1.0)*x9071*x9072))+((x9069*x9071))+(((-1.0)*x9068*x9072))+((x9068*x9069)))),IkReal(((((-1.0)*x9068*x9070))+(((-1.0)*x9070*x9071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9073.valid){
continue;
}
CheckValue<IkReal> x9074=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9073.value)+(((1.5707963267949)*(x9074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9075=IKcos(j4);
IkReal x9076=IKsin(j4);
IkReal x9077=((1.0)*x9075);
IkReal x9078=(gconst1*x9075);
IkReal x9079=(gconst1*x9076);
IkReal x9080=((1.0)*gconst2*x9076);
evalcond[0]=((((-1.0)*gconst2*r00*x9077))+((r01*x9078))+((r02*x9076)));
evalcond[1]=(((r21*x9079))+(((-1.0)*r22*x9077))+(((-1.0)*r20*x9080)));
evalcond[2]=((((-1.0)*r12*x9077))+((r11*x9079))+(((-1.0)*r10*x9080)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9077))+(((-1.0)*r00*x9080))+((r01*x9079)));
evalcond[4]=(((cj2*sj1))+((r21*x9078))+((cj1*sj2))+((r22*x9076))+(((-1.0)*gconst2*r20*x9077)));
evalcond[5]=((((-1.0)*gconst2*r10*x9077))+(((-1.0)*sj1*sj2))+((r11*x9078))+((r12*x9076))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9081=(gconst1*r01);
IkReal x9082=(gconst2*r00);
CheckValue<IkReal> x9083 = IKatan2WithCheck(IkReal((x9081+(((-1.0)*x9082)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9083.valid){
continue;
}
CheckValue<IkReal> x9084=IKPowWithIntegerCheck(IKsign(((((2.0)*x9081*x9082))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9081*x9081)))+(((-1.0)*(x9082*x9082))))),-1);
if(!x9084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9083.value)+(((1.5707963267949)*(x9084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9085=IKcos(j4);
IkReal x9086=IKsin(j4);
IkReal x9087=((1.0)*x9085);
IkReal x9088=(gconst1*x9085);
IkReal x9089=(gconst1*x9086);
IkReal x9090=((1.0)*gconst2*x9086);
evalcond[0]=((((-1.0)*gconst2*r00*x9087))+((r01*x9088))+((r02*x9086)));
evalcond[1]=((((-1.0)*r20*x9090))+((r21*x9089))+(((-1.0)*r22*x9087)));
evalcond[2]=(((r11*x9089))+(((-1.0)*r10*x9090))+(((-1.0)*r12*x9087)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9090))+((r01*x9089))+(((-1.0)*r02*x9087)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9087))+((cj1*sj2))+((r21*x9088))+((r22*x9086)));
evalcond[5]=(((r11*x9088))+((r12*x9086))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9087))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9091 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9091.valid){
continue;
}
CheckValue<IkReal> x9092=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9091.value)+(((1.5707963267949)*(x9092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9093=IKcos(j4);
IkReal x9094=IKsin(j4);
IkReal x9095=((1.0)*x9093);
IkReal x9096=(gconst1*x9093);
IkReal x9097=(gconst1*x9094);
IkReal x9098=((1.0)*gconst2*x9094);
evalcond[0]=((((-1.0)*gconst2*r00*x9095))+((r01*x9096))+((r02*x9094)));
evalcond[1]=((((-1.0)*r20*x9098))+((r21*x9097))+(((-1.0)*r22*x9095)));
evalcond[2]=(((r11*x9097))+(((-1.0)*r10*x9098))+(((-1.0)*r12*x9095)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9098))+((r01*x9097))+(((-1.0)*r02*x9095)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9095))+((cj1*sj2))+((r21*x9096))+((r22*x9094)));
evalcond[5]=(((r11*x9096))+(((-1.0)*sj1*sj2))+((r12*x9094))+(((-1.0)*gconst2*r10*x9095))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9099=((-1.0)*r20);
IkReal x9100=((-1.0)*px);
CheckValue<IkReal> x9102 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9099),IKFAST_ATAN2_MAGTHRESH);
if(!x9102.valid){
continue;
}
IkReal x9101=((-1.0)*(x9102.value));
sj5=gconst1;
cj5=gconst2;
j5=x9101;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9100);
rxp1_1=(px*r21);
rxp1_2=(r11*x9100);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9101;
IkReal gconst1=r21;
IkReal gconst2=x9099;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9103=((-1.0)*r20);
IkReal x9104=((-1.0)*px);
CheckValue<IkReal> x9106 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9103),IKFAST_ATAN2_MAGTHRESH);
if(!x9106.valid){
continue;
}
IkReal x9105=((-1.0)*(x9106.value));
sj5=gconst1;
cj5=gconst2;
j5=x9105;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9104);
rxp1_1=(px*r21);
rxp1_2=(r11*x9104);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9105;
IkReal gconst1=r21;
IkReal gconst2=x9103;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9107=((-1.0)*r20);
IkReal x9108=((-1.0)*px);
CheckValue<IkReal> x9110 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9107),IKFAST_ATAN2_MAGTHRESH);
if(!x9110.valid){
continue;
}
IkReal x9109=((-1.0)*(x9110.value));
sj5=gconst1;
cj5=gconst2;
j5=x9109;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9108);
rxp1_1=(px*r21);
rxp1_2=(r11*x9108);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9109;
IkReal gconst1=r21;
IkReal gconst2=x9107;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9113=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9113.valid){
continue;
}
IkReal x9111=x9113.value;
IkReal x9112=(sj0*x9111);
cj4array[0]=((((-1.0)*sj1*sj2*x9112))+((cj1*cj2*x9112)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9114=IKsin(j4);
IkReal x9115=IKcos(j4);
IkReal x9116=((1.0)*gconst2);
IkReal x9117=(gconst1*r21);
evalcond[0]=(r02*x9114);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9115)));
evalcond[2]=(((x9114*x9117))+(((-1.0)*r20*x9114*x9116)));
evalcond[3]=(((gconst1*r11*x9114))+(((-1.0)*r10*x9114*x9116)));
evalcond[4]=(((cj2*sj1))+((x9115*x9117))+((cj1*sj2))+(((-1.0)*r20*x9115*x9116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9120=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9120.valid){
continue;
}
IkReal x9118=x9120.value;
IkReal x9119=((1.0)*x9118);
cj4array[0]=((((-1.0)*cj1*sj2*x9119))+(((-1.0)*cj2*sj1*x9119)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9121=IKsin(j4);
IkReal x9122=IKcos(j4);
IkReal x9123=((1.0)*sj0);
IkReal x9124=(gconst1*x9121);
IkReal x9125=((1.0)*x9122);
IkReal x9126=((1.0)*gconst2*x9121);
evalcond[0]=(r02*x9121);
evalcond[1]=((((-1.0)*r02*x9125))+(((-1.0)*x9123)));
evalcond[2]=((((-1.0)*r20*x9126))+((r21*x9124)));
evalcond[3]=((((-1.0)*r10*x9126))+((r11*x9124)));
evalcond[4]=(((gconst1*r11*x9122))+(((-1.0)*cj1*cj2*x9123))+(((-1.0)*gconst2*r10*x9125))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9127=IKPowWithIntegerCheck(r02,-1);
if(!x9127.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9127.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9128=IKsin(j4);
IkReal x9129=IKcos(j4);
IkReal x9130=(gconst1*r21);
IkReal x9131=(gconst1*r11);
IkReal x9132=((1.0)*gconst2*r10);
IkReal x9133=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9128);
evalcond[1]=(((x9128*x9130))+(((-1.0)*x9128*x9133)));
evalcond[2]=(((x9128*x9131))+(((-1.0)*x9128*x9132)));
evalcond[3]=(((cj2*sj1))+((x9129*x9130))+((cj1*sj2))+(((-1.0)*x9129*x9133)));
evalcond[4]=(((x9129*x9131))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9129*x9132))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9134=(cj2*sj1);
IkReal x9135=(cj1*sj2);
IkReal x9136=(gconst1*r21);
IkReal x9137=((1.0)*gconst2*r20);
CheckValue<IkReal> x9138 = IKatan2WithCheck(IkReal((((r22*x9135))+((r22*x9134)))),IkReal((((x9134*x9136))+(((-1.0)*x9135*x9137))+(((-1.0)*x9134*x9137))+((x9135*x9136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9138.valid){
continue;
}
CheckValue<IkReal> x9139=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst2*r20*x9136))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9136*x9136)))+(((-1.0)*gconst2*r20*x9137)))),-1);
if(!x9139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9138.value)+(((1.5707963267949)*(x9139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9140=IKsin(j4);
IkReal x9141=IKcos(j4);
IkReal x9142=(sj1*sj2);
IkReal x9143=(gconst2*r10);
IkReal x9144=(gconst2*r00);
IkReal x9145=(gconst2*r20);
IkReal x9146=((1.0)*x9141);
IkReal x9147=(gconst1*x9141);
IkReal x9148=((1.0)*cj1*cj2);
IkReal x9149=(gconst1*x9140);
IkReal x9150=((1.0)*x9140);
evalcond[0]=((((-1.0)*x9145*x9150))+((r21*x9149))+(((-1.0)*r22*x9146)));
evalcond[1]=(cj0+(((-1.0)*x9143*x9150))+(((-1.0)*r12*x9146))+((r11*x9149)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9149))+(((-1.0)*r02*x9146))+(((-1.0)*x9144*x9150)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9147))+((r22*x9140))+(((-1.0)*x9145*x9146)));
evalcond[4]=((((-1.0)*cj0*x9148))+((r01*x9147))+((cj0*x9142))+(((-1.0)*x9144*x9146))+((r02*x9140)));
evalcond[5]=(((sj0*x9142))+(((-1.0)*x9143*x9146))+((r12*x9140))+(((-1.0)*sj0*x9148))+((r11*x9147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9151=((1.0)*gconst2);
CheckValue<IkReal> x9152 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9151))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9152.valid){
continue;
}
CheckValue<IkReal> x9153=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9151))+(((-1.0)*gconst1*r10)))),-1);
if(!x9153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9152.value)+(((1.5707963267949)*(x9153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9154=IKsin(j4);
IkReal x9155=IKcos(j4);
IkReal x9156=(sj1*sj2);
IkReal x9157=(gconst2*r10);
IkReal x9158=(gconst2*r00);
IkReal x9159=(gconst2*r20);
IkReal x9160=((1.0)*x9155);
IkReal x9161=(gconst1*x9155);
IkReal x9162=((1.0)*cj1*cj2);
IkReal x9163=(gconst1*x9154);
IkReal x9164=((1.0)*x9154);
evalcond[0]=((((-1.0)*x9159*x9164))+(((-1.0)*r22*x9160))+((r21*x9163)));
evalcond[1]=((((-1.0)*x9157*x9164))+cj0+(((-1.0)*r12*x9160))+((r11*x9163)));
evalcond[2]=(((r01*x9163))+(((-1.0)*sj0))+(((-1.0)*r02*x9160))+(((-1.0)*x9158*x9164)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9159*x9160))+((r22*x9154))+((cj1*sj2))+((r21*x9161)));
evalcond[4]=(((r01*x9161))+((cj0*x9156))+((r02*x9154))+(((-1.0)*cj0*x9162))+(((-1.0)*x9158*x9160)));
evalcond[5]=((((-1.0)*x9157*x9160))+((sj0*x9156))+(((-1.0)*sj0*x9162))+((r11*x9161))+((r12*x9154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9165=((1.0)*gconst2);
CheckValue<IkReal> x9166=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9165)))),-1);
if(!x9166.valid){
continue;
}
CheckValue<IkReal> x9167 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9165))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9166.value)))+(x9167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9168=IKsin(j4);
IkReal x9169=IKcos(j4);
IkReal x9170=(sj1*sj2);
IkReal x9171=(gconst2*r10);
IkReal x9172=(gconst2*r00);
IkReal x9173=(gconst2*r20);
IkReal x9174=((1.0)*x9169);
IkReal x9175=(gconst1*x9169);
IkReal x9176=((1.0)*cj1*cj2);
IkReal x9177=(gconst1*x9168);
IkReal x9178=((1.0)*x9168);
evalcond[0]=((((-1.0)*x9173*x9178))+((r21*x9177))+(((-1.0)*r22*x9174)));
evalcond[1]=(cj0+(((-1.0)*x9171*x9178))+(((-1.0)*r12*x9174))+((r11*x9177)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9177))+(((-1.0)*x9172*x9178))+(((-1.0)*r02*x9174)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x9168))+(((-1.0)*x9173*x9174))+((r21*x9175)));
evalcond[4]=((((-1.0)*cj0*x9176))+((r02*x9168))+((r01*x9175))+((cj0*x9170))+(((-1.0)*x9172*x9174)));
evalcond[5]=(((sj0*x9170))+(((-1.0)*x9171*x9174))+((r12*x9168))+((r11*x9175))+(((-1.0)*sj0*x9176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9179=((-1.0)*r20);
IkReal x9180=x8847;
CheckValue<IkReal> x9182 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9179),IKFAST_ATAN2_MAGTHRESH);
if(!x9182.valid){
continue;
}
IkReal x9181=((-1.0)*(x9182.value));
sj5=gconst1;
cj5=gconst2;
j5=x9181;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9181;
IkReal gconst1=(r21*x9180);
IkReal gconst2=(x9179*x9180);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9183=((-1.0)*r20);
IkReal x9184=x8847;
CheckValue<IkReal> x9186 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9183),IKFAST_ATAN2_MAGTHRESH);
if(!x9186.valid){
continue;
}
IkReal x9185=((-1.0)*(x9186.value));
sj5=gconst1;
cj5=gconst2;
j5=x9185;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9185;
IkReal gconst1=(r21*x9184);
IkReal gconst2=(x9183*x9184);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9187=((-1.0)*r20);
IkReal x9188=x8847;
CheckValue<IkReal> x9190 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9187),IKFAST_ATAN2_MAGTHRESH);
if(!x9190.valid){
continue;
}
IkReal x9189=((-1.0)*(x9190.value));
sj5=gconst1;
cj5=gconst2;
j5=x9189;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9189;
IkReal gconst1=(r21*x9188);
IkReal gconst2=(x9187*x9188);
IkReal x9191=r22*r22;
CheckValue<IkReal> x9194=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9191))),-1);
if(!x9194.valid){
continue;
}
IkReal x9192=x9194.value;
IkReal x9193=(((x9192*(r20*r20*r20*r20)))+((x9192*(r21*r21*r21*r21)))+x9191+(((2.0)*x9192*(r20*r20)*(r21*r21))));
j4eval[0]=x9193;
j4eval[1]=IKsign(x9193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9195=((-1.0)*r20);
IkReal x9196=x8847;
CheckValue<IkReal> x9198 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9195),IKFAST_ATAN2_MAGTHRESH);
if(!x9198.valid){
continue;
}
IkReal x9197=((-1.0)*(x9198.value));
sj5=gconst1;
cj5=gconst2;
j5=x9197;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9197;
IkReal gconst1=(r21*x9196);
IkReal gconst2=(x9195*x9196);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9199=((-1.0)*r20);
IkReal x9200=x8847;
CheckValue<IkReal> x9202 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9199),IKFAST_ATAN2_MAGTHRESH);
if(!x9202.valid){
continue;
}
IkReal x9201=((-1.0)*(x9202.value));
sj5=gconst1;
cj5=gconst2;
j5=x9201;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9201;
IkReal gconst1=(r21*x9200);
IkReal gconst2=(x9199*x9200);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9203=((-1.0)*r20);
IkReal x9204=x8847;
CheckValue<IkReal> x9206 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9203),IKFAST_ATAN2_MAGTHRESH);
if(!x9206.valid){
continue;
}
IkReal x9205=((-1.0)*(x9206.value));
sj5=gconst1;
cj5=gconst2;
j5=x9205;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9205;
IkReal gconst1=(r21*x9204);
IkReal gconst2=(x9203*x9204);
IkReal x9207=r22*r22;
IkReal x9208=(cj1*r12*sj2);
IkReal x9209=(cj2*r12*sj1);
CheckValue<IkReal> x9213=IKPowWithIntegerCheck(((-1.0)+x9207),-1);
if(!x9213.valid){
continue;
}
IkReal x9210=x9213.value;
if((((1.0)+(((-1.0)*x9207)))) < -0.00001)
continue;
IkReal x9211=IKsqrt(((1.0)+(((-1.0)*x9207))));
IkReal x9212=((1.0)*r22*x9210*x9211);
j4eval[0]=((IKabs((x9209+x9208)))+(IKabs(((((-1.0)*x9208*x9212))+(((-1.0)*x9209*x9212))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9214=((1.0)*gconst1);
IkReal x9215=(cj2*sj1);
IkReal x9216=(gconst2*r10);
IkReal x9217=(cj1*sj2);
CheckValue<IkReal> x9218 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9214*x9215))+(((-1.0)*r11*x9214*x9217))+((x9215*x9216))+((x9216*x9217)))),IkReal((((r12*x9217))+((r12*x9215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9218.valid){
continue;
}
CheckValue<IkReal> x9219=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9214))+(((-1.0)*gconst2*r01)))),-1);
if(!x9219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9218.value)+(((1.5707963267949)*(x9219.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9220=IKsin(j4);
IkReal x9221=IKcos(j4);
IkReal x9222=((1.0)*x9221);
IkReal x9223=(gconst2*x9221);
IkReal x9224=(gconst1*x9220);
IkReal x9225=((1.0)*x9220);
evalcond[0]=((((-1.0)*gconst2*r20*x9225))+((r21*x9224))+(((-1.0)*r22*x9222)));
evalcond[1]=(((r01*x9224))+(((-1.0)*gconst2*r00*x9225))+(((-1.0)*r02*x9222)));
evalcond[2]=((((-1.0)*r12*x9225))+(((-1.0)*gconst1*r11*x9222))+((r10*x9223)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9225))+((r11*x9224))+(((-1.0)*r12*x9222)));
evalcond[4]=(((cj2*sj1))+((r20*x9223))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9222))+(((-1.0)*r22*x9225)));
evalcond[5]=(((r00*x9223))+(((-1.0)*r02*x9225))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9226=(gconst1*r11);
IkReal x9227=(gconst2*r10);
CheckValue<IkReal> x9228=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9226*x9227))+(x9227*x9227)+(x9226*x9226))),-1);
if(!x9228.valid){
continue;
}
CheckValue<IkReal> x9229 = IKatan2WithCheck(IkReal((x9227+(((-1.0)*x9226)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9228.value)))+(x9229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9230=IKsin(j4);
IkReal x9231=IKcos(j4);
IkReal x9232=((1.0)*x9231);
IkReal x9233=(gconst2*x9231);
IkReal x9234=(gconst1*x9230);
IkReal x9235=((1.0)*x9230);
evalcond[0]=(((r21*x9234))+(((-1.0)*gconst2*r20*x9235))+(((-1.0)*r22*x9232)));
evalcond[1]=((((-1.0)*gconst2*r00*x9235))+((r01*x9234))+(((-1.0)*r02*x9232)));
evalcond[2]=((((-1.0)*r12*x9235))+((r10*x9233))+(((-1.0)*gconst1*r11*x9232)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9232))+(((-1.0)*gconst2*r10*x9235))+((r11*x9234)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9232))+((r20*x9233))+(((-1.0)*r22*x9235)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9232))+((r00*x9233))+(((-1.0)*r02*x9235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9236=((1.0)*gconst2);
CheckValue<IkReal> x9237 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9236))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9237.valid){
continue;
}
CheckValue<IkReal> x9238=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9236)))),-1);
if(!x9238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9237.value)+(((1.5707963267949)*(x9238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9239=IKsin(j4);
IkReal x9240=IKcos(j4);
IkReal x9241=((1.0)*x9240);
IkReal x9242=(gconst2*x9240);
IkReal x9243=(gconst1*x9239);
IkReal x9244=((1.0)*x9239);
evalcond[0]=((((-1.0)*r22*x9241))+((r21*x9243))+(((-1.0)*gconst2*r20*x9244)));
evalcond[1]=(((r01*x9243))+(((-1.0)*r02*x9241))+(((-1.0)*gconst2*r00*x9244)));
evalcond[2]=((((-1.0)*gconst1*r11*x9241))+(((-1.0)*r12*x9244))+((r10*x9242)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9244))+(((-1.0)*r12*x9241))+((r11*x9243)));
evalcond[4]=((((-1.0)*r22*x9244))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9241))+((r20*x9242)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9241))+((r00*x9242))+(((-1.0)*r02*x9244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9245=((-1.0)*r20);
IkReal x9246=x8847;
CheckValue<IkReal> x9248 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9245),IKFAST_ATAN2_MAGTHRESH);
if(!x9248.valid){
continue;
}
IkReal x9247=((-1.0)*(x9248.value));
sj5=gconst1;
cj5=gconst2;
j5=x9247;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9247;
IkReal gconst1=(r21*x9246);
IkReal gconst2=(x9245*x9246);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9249=((-1.0)*r20);
IkReal x9250=x8847;
CheckValue<IkReal> x9252 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9249),IKFAST_ATAN2_MAGTHRESH);
if(!x9252.valid){
continue;
}
IkReal x9251=((-1.0)*(x9252.value));
sj5=gconst1;
cj5=gconst2;
j5=x9251;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9251;
IkReal gconst1=(r21*x9250);
IkReal gconst2=(x9249*x9250);
IkReal x9253=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9257=IKPowWithIntegerCheck(x9253,-1);
if(!x9257.valid){
continue;
}
IkReal x9254=x9257.value;
IkReal x9255=((1.0)*x9254);
IkReal x9256=((((-2.0)*r10*r11*r20*r21*x9254))+(((-1.0)*(r12*r12)))+(((-1.0)*x9255*(r11*r11)*(r21*r21)))+(((-1.0)*x9255*(r10*r10)*(r20*r20))));
j4eval[0]=x9256;
j4eval[1]=r12;
j4eval[2]=x9253;
j4eval[3]=IKsign(x9256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9258=((-1.0)*r20);
IkReal x9259=x8847;
CheckValue<IkReal> x9261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9258),IKFAST_ATAN2_MAGTHRESH);
if(!x9261.valid){
continue;
}
IkReal x9260=((-1.0)*(x9261.value));
sj5=gconst1;
cj5=gconst2;
j5=x9260;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9260;
IkReal gconst1=(r21*x9259);
IkReal gconst2=(x9258*x9259);
IkReal x9262=r22*r22;
IkReal x9263=(cj1*r12*sj2);
IkReal x9264=(cj2*r12*sj1);
CheckValue<IkReal> x9268=IKPowWithIntegerCheck(((-1.0)+x9262),-1);
if(!x9268.valid){
continue;
}
IkReal x9265=x9268.value;
if((((1.0)+(((-1.0)*x9262)))) < -0.00001)
continue;
IkReal x9266=IKsqrt(((1.0)+(((-1.0)*x9262))));
IkReal x9267=((1.0)*r22*x9265*x9266);
j4eval[0]=((IKabs(((((-1.0)*x9263*x9267))+(((-1.0)*x9264*x9267)))))+(IKabs((x9263+x9264))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9269=((1.0)*gconst1);
IkReal x9270=(cj2*sj1);
IkReal x9271=(gconst2*r10);
IkReal x9272=(cj1*sj2);
CheckValue<IkReal> x9273=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9269))+(((-1.0)*gconst2*r01)))),-1);
if(!x9273.valid){
continue;
}
CheckValue<IkReal> x9274 = IKatan2WithCheck(IkReal((((x9271*x9272))+((x9270*x9271))+(((-1.0)*r11*x9269*x9272))+(((-1.0)*r11*x9269*x9270)))),IkReal((((r12*x9270))+((r12*x9272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9273.value)))+(x9274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9275=IKsin(j4);
IkReal x9276=IKcos(j4);
IkReal x9277=((1.0)*x9276);
IkReal x9278=(gconst2*x9276);
IkReal x9279=(gconst1*x9275);
IkReal x9280=((1.0)*x9275);
evalcond[0]=((((-1.0)*gconst2*r20*x9280))+(((-1.0)*r22*x9277))+((r21*x9279)));
evalcond[1]=((((-1.0)*gconst2*r00*x9280))+((r01*x9279))+(((-1.0)*r02*x9277)));
evalcond[2]=((((-1.0)*r12*x9280))+(((-1.0)*gconst1*r11*x9277))+((r10*x9278)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9280))+((r11*x9279))+(((-1.0)*r12*x9277)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9277))+((cj1*sj2))+((r20*x9278))+(((-1.0)*r22*x9280)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9280))+(((-1.0)*gconst1*r01*x9277))+((r00*x9278))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9281=(gconst1*r11);
IkReal x9282=(gconst2*r10);
CheckValue<IkReal> x9283 = IKatan2WithCheck(IkReal((x9282+(((-1.0)*x9281)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9283.valid){
continue;
}
CheckValue<IkReal> x9284=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9282*x9282)))+(((-1.0)*(x9281*x9281)))+(((-1.0)*(r12*r12)))+(((2.0)*x9281*x9282)))),-1);
if(!x9284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9283.value)+(((1.5707963267949)*(x9284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9285=IKsin(j4);
IkReal x9286=IKcos(j4);
IkReal x9287=((1.0)*x9286);
IkReal x9288=(gconst2*x9286);
IkReal x9289=(gconst1*x9285);
IkReal x9290=((1.0)*x9285);
evalcond[0]=((((-1.0)*gconst2*r20*x9290))+(((-1.0)*r22*x9287))+((r21*x9289)));
evalcond[1]=((((-1.0)*gconst2*r00*x9290))+((r01*x9289))+(((-1.0)*r02*x9287)));
evalcond[2]=((((-1.0)*gconst1*r11*x9287))+((r10*x9288))+(((-1.0)*r12*x9290)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9287))+((r11*x9289))+(((-1.0)*gconst2*r10*x9290)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9287))+((cj1*sj2))+((r20*x9288))+(((-1.0)*r22*x9290)));
evalcond[5]=((((-1.0)*gconst1*r01*x9287))+(((-1.0)*sj1*sj2))+((r00*x9288))+(((-1.0)*r02*x9290))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9291 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9291.valid){
continue;
}
CheckValue<IkReal> x9292=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9291.value)+(((1.5707963267949)*(x9292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9293=IKsin(j4);
IkReal x9294=IKcos(j4);
IkReal x9295=((1.0)*x9294);
IkReal x9296=(gconst2*x9294);
IkReal x9297=(gconst1*x9293);
IkReal x9298=((1.0)*x9293);
evalcond[0]=((((-1.0)*gconst2*r20*x9298))+(((-1.0)*r22*x9295))+((r21*x9297)));
evalcond[1]=((((-1.0)*gconst2*r00*x9298))+((r01*x9297))+(((-1.0)*r02*x9295)));
evalcond[2]=((((-1.0)*gconst1*r11*x9295))+((r10*x9296))+(((-1.0)*r12*x9298)));
evalcond[3]=((-1.0)+((r11*x9297))+(((-1.0)*gconst2*r10*x9298))+(((-1.0)*r12*x9295)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9295))+((cj1*sj2))+(((-1.0)*r22*x9298))+((r20*x9296)));
evalcond[5]=(((r00*x9296))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9295))+(((-1.0)*r02*x9298))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9299=((-1.0)*r20);
IkReal x9300=x8847;
CheckValue<IkReal> x9302 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9299),IKFAST_ATAN2_MAGTHRESH);
if(!x9302.valid){
continue;
}
IkReal x9301=((-1.0)*(x9302.value));
sj5=gconst1;
cj5=gconst2;
j5=x9301;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9301;
IkReal gconst1=(r21*x9300);
IkReal gconst2=(x9299*x9300);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9303=((-1.0)*r20);
IkReal x9304=x8847;
CheckValue<IkReal> x9306 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9303),IKFAST_ATAN2_MAGTHRESH);
if(!x9306.valid){
continue;
}
IkReal x9305=((-1.0)*(x9306.value));
sj5=gconst1;
cj5=gconst2;
j5=x9305;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9305;
IkReal gconst1=(r21*x9304);
IkReal gconst2=(x9303*x9304);
IkReal x9307=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9311=IKPowWithIntegerCheck(x9307,-1);
if(!x9311.valid){
continue;
}
IkReal x9308=x9311.value;
IkReal x9309=((1.0)*x9308);
IkReal x9310=((((-2.0)*r00*r01*r20*r21*x9308))+(((-1.0)*(r02*r02)))+(((-1.0)*x9309*(r01*r01)*(r21*r21)))+(((-1.0)*x9309*(r00*r00)*(r20*r20))));
j4eval[0]=x9310;
j4eval[1]=IKsign(x9310);
j4eval[2]=r02;
j4eval[3]=x9307;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9312=((-1.0)*r20);
IkReal x9313=x8847;
CheckValue<IkReal> x9315 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9312),IKFAST_ATAN2_MAGTHRESH);
if(!x9315.valid){
continue;
}
IkReal x9314=((-1.0)*(x9315.value));
sj5=gconst1;
cj5=gconst2;
j5=x9314;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9314;
IkReal gconst1=(r21*x9313);
IkReal gconst2=(x9312*x9313);
IkReal x9316=r22*r22;
IkReal x9317=(cj1*r02*sj2);
IkReal x9318=(cj2*r02*sj1);
CheckValue<IkReal> x9322=IKPowWithIntegerCheck(((-1.0)+x9316),-1);
if(!x9322.valid){
continue;
}
IkReal x9319=x9322.value;
if((((1.0)+(((-1.0)*x9316)))) < -0.00001)
continue;
IkReal x9320=IKsqrt(((1.0)+(((-1.0)*x9316))));
IkReal x9321=((1.0)*r22*x9319*x9320);
j4eval[0]=((IKabs(((((-1.0)*x9318*x9321))+(((-1.0)*x9317*x9321)))))+(IKabs((x9318+x9317))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9323=(cj2*sj1);
IkReal x9324=(cj1*sj2);
IkReal x9325=(gconst2*r00);
IkReal x9326=((1.0)*gconst1*r01);
CheckValue<IkReal> x9327 = IKatan2WithCheck(IkReal((((x9324*x9325))+(((-1.0)*x9324*x9326))+(((-1.0)*x9323*x9326))+((x9323*x9325)))),IkReal((((r02*x9324))+((r02*x9323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9327.valid){
continue;
}
CheckValue<IkReal> x9328=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9327.value)+(((1.5707963267949)*(x9328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9329=IKsin(j4);
IkReal x9330=IKcos(j4);
IkReal x9331=(gconst1*r11);
IkReal x9332=(gconst1*r21);
IkReal x9333=(gconst1*r01);
IkReal x9334=((1.0)*x9330);
IkReal x9335=(gconst2*x9330);
IkReal x9336=((1.0)*x9329);
evalcond[0]=(((x9329*x9332))+(((-1.0)*r22*x9334))+(((-1.0)*gconst2*r20*x9336)));
evalcond[1]=((((-1.0)*gconst2*r10*x9336))+((x9329*x9331))+(((-1.0)*r12*x9334)));
evalcond[2]=((((-1.0)*r02*x9336))+((r00*x9335))+(((-1.0)*x9333*x9334)));
evalcond[3]=((-1.0)+((x9329*x9333))+(((-1.0)*r02*x9334))+(((-1.0)*gconst2*r00*x9336)));
evalcond[4]=(((cj2*sj1))+((r20*x9335))+(((-1.0)*r22*x9336))+((cj1*sj2))+(((-1.0)*x9332*x9334)));
evalcond[5]=((((-1.0)*r12*x9336))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x9335))+(((-1.0)*x9331*x9334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9337=(gconst2*r00);
IkReal x9338=(gconst1*r01);
CheckValue<IkReal> x9339 = IKatan2WithCheck(IkReal((x9337+(((-1.0)*x9338)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9339.valid){
continue;
}
CheckValue<IkReal> x9340=IKPowWithIntegerCheck(IKsign(((((2.0)*x9337*x9338))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9338*x9338)))+(((-1.0)*(x9337*x9337))))),-1);
if(!x9340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9339.value)+(((1.5707963267949)*(x9340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9341=IKsin(j4);
IkReal x9342=IKcos(j4);
IkReal x9343=(gconst1*r11);
IkReal x9344=(gconst1*r21);
IkReal x9345=(gconst1*r01);
IkReal x9346=((1.0)*x9342);
IkReal x9347=(gconst2*x9342);
IkReal x9348=((1.0)*x9341);
evalcond[0]=((((-1.0)*r22*x9346))+(((-1.0)*gconst2*r20*x9348))+((x9341*x9344)));
evalcond[1]=(((x9341*x9343))+(((-1.0)*r12*x9346))+(((-1.0)*gconst2*r10*x9348)));
evalcond[2]=(((r00*x9347))+(((-1.0)*r02*x9348))+(((-1.0)*x9345*x9346)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9346))+((x9341*x9345))+(((-1.0)*gconst2*r00*x9348)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9344*x9346))+(((-1.0)*r22*x9348))+((cj1*sj2))+((r20*x9347)));
evalcond[5]=((((-1.0)*x9343*x9346))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x9347))+(((-1.0)*r12*x9348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9349=((1.0)*gconst2);
CheckValue<IkReal> x9350=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9349)))),-1);
if(!x9350.valid){
continue;
}
CheckValue<IkReal> x9351 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9349))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9350.value)))+(x9351.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9352=IKsin(j4);
IkReal x9353=IKcos(j4);
IkReal x9354=(gconst1*r11);
IkReal x9355=(gconst1*r21);
IkReal x9356=(gconst1*r01);
IkReal x9357=((1.0)*x9353);
IkReal x9358=(gconst2*x9353);
IkReal x9359=((1.0)*x9352);
evalcond[0]=((((-1.0)*r22*x9357))+((x9352*x9355))+(((-1.0)*gconst2*r20*x9359)));
evalcond[1]=(((x9352*x9354))+(((-1.0)*r12*x9357))+(((-1.0)*gconst2*r10*x9359)));
evalcond[2]=((((-1.0)*r02*x9359))+((r00*x9358))+(((-1.0)*x9356*x9357)));
evalcond[3]=((-1.0)+((x9352*x9356))+(((-1.0)*r02*x9357))+(((-1.0)*gconst2*r00*x9359)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9359))+((cj1*sj2))+((r20*x9358))+(((-1.0)*x9355*x9357)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9359))+((r10*x9358))+(((-1.0)*x9354*x9357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9360=((-1.0)*r20);
IkReal x9361=x8847;
CheckValue<IkReal> x9363 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9360),IKFAST_ATAN2_MAGTHRESH);
if(!x9363.valid){
continue;
}
IkReal x9362=((-1.0)*(x9363.value));
sj5=gconst1;
cj5=gconst2;
j5=x9362;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9362;
IkReal gconst1=(r21*x9361);
IkReal gconst2=(x9360*x9361);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9364=((-1.0)*r20);
IkReal x9365=x8847;
CheckValue<IkReal> x9367 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9364),IKFAST_ATAN2_MAGTHRESH);
if(!x9367.valid){
continue;
}
IkReal x9366=((-1.0)*(x9367.value));
sj5=gconst1;
cj5=gconst2;
j5=x9366;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9366;
IkReal gconst1=(r21*x9365);
IkReal gconst2=(x9364*x9365);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9368=((-1.0)*r20);
IkReal x9369=x8847;
CheckValue<IkReal> x9371 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9368),IKFAST_ATAN2_MAGTHRESH);
if(!x9371.valid){
continue;
}
IkReal x9370=((-1.0)*(x9371.value));
sj5=gconst1;
cj5=gconst2;
j5=x9370;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9370;
IkReal gconst1=(r21*x9369);
IkReal gconst2=(x9368*x9369);
IkReal x9372=r22*r22;
IkReal x9373=(cj1*r02*sj2);
IkReal x9374=(cj2*r02*sj1);
CheckValue<IkReal> x9378=IKPowWithIntegerCheck(((-1.0)+x9372),-1);
if(!x9378.valid){
continue;
}
IkReal x9375=x9378.value;
if((((1.0)+(((-1.0)*x9372)))) < -0.00001)
continue;
IkReal x9376=IKsqrt(((1.0)+(((-1.0)*x9372))));
IkReal x9377=((1.0)*r22*x9375*x9376);
j4eval[0]=((IKabs(((((-1.0)*x9373*x9377))+(((-1.0)*x9374*x9377)))))+(IKabs((x9373+x9374))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9379=(cj2*sj1);
IkReal x9380=(cj1*sj2);
IkReal x9381=(gconst2*r00);
IkReal x9382=((1.0)*gconst1*r01);
CheckValue<IkReal> x9383=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9383.valid){
continue;
}
CheckValue<IkReal> x9384 = IKatan2WithCheck(IkReal(((((-1.0)*x9380*x9382))+(((-1.0)*x9379*x9382))+((x9380*x9381))+((x9379*x9381)))),IkReal((((r02*x9380))+((r02*x9379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9383.value)))+(x9384.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9385=IKsin(j4);
IkReal x9386=IKcos(j4);
IkReal x9387=(gconst1*r11);
IkReal x9388=(gconst1*r21);
IkReal x9389=(gconst1*r01);
IkReal x9390=((1.0)*x9386);
IkReal x9391=(gconst2*x9386);
IkReal x9392=((1.0)*x9385);
evalcond[0]=((((-1.0)*gconst2*r20*x9392))+(((-1.0)*r22*x9390))+((x9385*x9388)));
evalcond[1]=((((-1.0)*r12*x9390))+(((-1.0)*gconst2*r10*x9392))+((x9385*x9387)));
evalcond[2]=((((-1.0)*x9389*x9390))+(((-1.0)*r02*x9392))+((r00*x9391)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9392))+((x9385*x9389))+(((-1.0)*r02*x9390)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9388*x9390))+((r20*x9391))+((cj1*sj2))+(((-1.0)*r22*x9392)));
evalcond[5]=((((-1.0)*x9387*x9390))+(((-1.0)*r12*x9392))+((r10*x9391))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9393=(gconst1*r01);
IkReal x9394=(gconst2*r00);
CheckValue<IkReal> x9395=IKPowWithIntegerCheck(IKsign(((x9393*x9393)+(((-2.0)*x9393*x9394))+(x9394*x9394)+(r02*r02))),-1);
if(!x9395.valid){
continue;
}
CheckValue<IkReal> x9396 = IKatan2WithCheck(IkReal((x9394+(((-1.0)*x9393)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9395.value)))+(x9396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9397=IKsin(j4);
IkReal x9398=IKcos(j4);
IkReal x9399=(gconst1*r11);
IkReal x9400=(gconst1*r21);
IkReal x9401=(gconst1*r01);
IkReal x9402=((1.0)*x9398);
IkReal x9403=(gconst2*x9398);
IkReal x9404=((1.0)*x9397);
evalcond[0]=((((-1.0)*r22*x9402))+((x9397*x9400))+(((-1.0)*gconst2*r20*x9404)));
evalcond[1]=((((-1.0)*gconst2*r10*x9404))+(((-1.0)*r12*x9402))+((x9397*x9399)));
evalcond[2]=((((-1.0)*r02*x9404))+(((-1.0)*x9401*x9402))+((r00*x9403)));
evalcond[3]=((1.0)+((x9397*x9401))+(((-1.0)*r02*x9402))+(((-1.0)*gconst2*r00*x9404)));
evalcond[4]=((((-1.0)*r22*x9404))+((cj2*sj1))+((cj1*sj2))+((r20*x9403))+(((-1.0)*x9400*x9402)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x9404))+((r10*x9403))+((cj1*cj2))+(((-1.0)*x9399*x9402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9405 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9405.valid){
continue;
}
CheckValue<IkReal> x9406=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9405.value)+(((1.5707963267949)*(x9406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9407=IKsin(j4);
IkReal x9408=IKcos(j4);
IkReal x9409=(gconst1*r11);
IkReal x9410=(gconst1*r21);
IkReal x9411=(gconst1*r01);
IkReal x9412=((1.0)*x9408);
IkReal x9413=(gconst2*x9408);
IkReal x9414=((1.0)*x9407);
evalcond[0]=((((-1.0)*gconst2*r20*x9414))+(((-1.0)*r22*x9412))+((x9407*x9410)));
evalcond[1]=((((-1.0)*r12*x9412))+((x9407*x9409))+(((-1.0)*gconst2*r10*x9414)));
evalcond[2]=((((-1.0)*r02*x9414))+((r00*x9413))+(((-1.0)*x9411*x9412)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9412))+(((-1.0)*gconst2*r00*x9414))+((x9407*x9411)));
evalcond[4]=(((r20*x9413))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9414))+(((-1.0)*x9410*x9412)));
evalcond[5]=((((-1.0)*r12*x9414))+((r10*x9413))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x9409*x9412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9415=((-1.0)*r20);
IkReal x9416=((-1.0)*px);
CheckValue<IkReal> x9418 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9415),IKFAST_ATAN2_MAGTHRESH);
if(!x9418.valid){
continue;
}
IkReal x9417=((-1.0)*(x9418.value));
sj5=gconst1;
cj5=gconst2;
j5=x9417;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9416);
rxp1_1=(px*r21);
rxp1_2=(r11*x9416);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9417;
IkReal gconst1=r21;
IkReal gconst2=x9415;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9419=((-1.0)*r20);
IkReal x9420=((-1.0)*px);
CheckValue<IkReal> x9422 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9419),IKFAST_ATAN2_MAGTHRESH);
if(!x9422.valid){
continue;
}
IkReal x9421=((-1.0)*(x9422.value));
sj5=gconst1;
cj5=gconst2;
j5=x9421;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9420);
rxp1_1=(px*r21);
rxp1_2=(r11*x9420);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9421;
IkReal gconst1=r21;
IkReal gconst2=x9419;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9423=((-1.0)*r20);
IkReal x9424=((-1.0)*px);
CheckValue<IkReal> x9426 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9423),IKFAST_ATAN2_MAGTHRESH);
if(!x9426.valid){
continue;
}
IkReal x9425=((-1.0)*(x9426.value));
sj5=gconst1;
cj5=gconst2;
j5=x9425;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9424);
rxp1_1=(px*r21);
rxp1_2=(r11*x9424);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9425;
IkReal gconst1=r21;
IkReal gconst2=x9423;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9429=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9429.valid){
continue;
}
IkReal x9427=x9429.value;
IkReal x9428=(sj0*x9427);
cj4array[0]=((((-1.0)*sj1*sj2*x9428))+((cj1*cj2*x9428)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9430=IKsin(j4);
IkReal x9431=IKcos(j4);
IkReal x9432=(gconst1*x9430);
IkReal x9433=((1.0)*x9431);
IkReal x9434=((1.0)*gconst2*x9430);
evalcond[0]=((-1.0)*r02*x9430);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9433)));
evalcond[2]=((((-1.0)*r20*x9434))+((r21*x9432)));
evalcond[3]=(((r11*x9432))+(((-1.0)*r10*x9434)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9433))+((gconst2*r20*x9431))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9437=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9437.valid){
continue;
}
IkReal x9435=x9437.value;
IkReal x9436=((1.0)*x9435);
cj4array[0]=((((-1.0)*cj1*sj2*x9436))+(((-1.0)*cj2*sj1*x9436)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9438=IKsin(j4);
IkReal x9439=IKcos(j4);
IkReal x9440=(gconst2*r10);
IkReal x9441=((1.0)*sj0);
IkReal x9442=(gconst1*r11);
IkReal x9443=((1.0)*x9438);
IkReal x9444=((1.0)*x9439);
evalcond[0]=((-1.0)*r02*x9438);
evalcond[1]=((((-1.0)*x9441))+(((-1.0)*r02*x9444)));
evalcond[2]=((((-1.0)*gconst2*r20*x9443))+((gconst1*r21*x9438)));
evalcond[3]=((((-1.0)*x9440*x9443))+((x9438*x9442)));
evalcond[4]=(((x9439*x9440))+(((-1.0)*x9442*x9444))+(((-1.0)*cj1*cj2*x9441))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9445=IKPowWithIntegerCheck(r02,-1);
if(!x9445.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9445.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9446=IKsin(j4);
IkReal x9447=IKcos(j4);
IkReal x9448=(gconst2*r10);
IkReal x9449=(gconst1*r11);
IkReal x9450=(gconst1*r21);
IkReal x9451=(gconst2*r20);
IkReal x9452=((1.0)*x9446);
IkReal x9453=((1.0)*x9447);
evalcond[0]=((-1.0)*r02*x9446);
evalcond[1]=(((x9446*x9450))+(((-1.0)*x9451*x9452)));
evalcond[2]=(((x9446*x9449))+(((-1.0)*x9448*x9452)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9450*x9453))+((cj1*sj2))+((x9447*x9451)));
evalcond[4]=(((x9447*x9448))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*x9449*x9453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9454=(cj2*sj1);
IkReal x9455=(cj1*sj2);
IkReal x9456=(gconst1*r21);
IkReal x9457=((1.0)*gconst2*r20);
CheckValue<IkReal> x9458 = IKatan2WithCheck(IkReal((((r22*x9454))+((r22*x9455)))),IkReal((((x9455*x9456))+(((-1.0)*x9454*x9457))+(((-1.0)*x9455*x9457))+((x9454*x9456)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9458.valid){
continue;
}
CheckValue<IkReal> x9459=IKPowWithIntegerCheck(IKsign(((x9456*x9456)+(r22*r22)+(((-2.0)*gconst2*r20*x9456))+(((gconst2*gconst2)*(r20*r20))))),-1);
if(!x9459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9458.value)+(((1.5707963267949)*(x9459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9460=IKsin(j4);
IkReal x9461=IKcos(j4);
IkReal x9462=(gconst1*r11);
IkReal x9463=(sj1*sj2);
IkReal x9464=(gconst1*r21);
IkReal x9465=(gconst1*r01);
IkReal x9466=((1.0)*x9461);
IkReal x9467=(gconst2*x9461);
IkReal x9468=((1.0)*cj1*cj2);
IkReal x9469=((1.0)*x9460);
evalcond[0]=((((-1.0)*gconst2*r20*x9469))+((x9460*x9464))+(((-1.0)*r22*x9466)));
evalcond[1]=(cj0+((x9460*x9462))+(((-1.0)*r12*x9466))+(((-1.0)*gconst2*r10*x9469)));
evalcond[2]=((((-1.0)*sj0))+((x9460*x9465))+(((-1.0)*gconst2*r00*x9469))+(((-1.0)*r02*x9466)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9469))+((r20*x9467))+(((-1.0)*x9464*x9466)));
evalcond[4]=(((r00*x9467))+(((-1.0)*cj0*x9468))+((cj0*x9463))+(((-1.0)*x9465*x9466))+(((-1.0)*r02*x9469)));
evalcond[5]=(((r10*x9467))+(((-1.0)*sj0*x9468))+((sj0*x9463))+(((-1.0)*x9462*x9466))+(((-1.0)*r12*x9469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9470=((1.0)*gconst2);
CheckValue<IkReal> x9471=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9470)))),-1);
if(!x9471.valid){
continue;
}
CheckValue<IkReal> x9472 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9470))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9471.value)))+(x9472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9473=IKsin(j4);
IkReal x9474=IKcos(j4);
IkReal x9475=(gconst1*r11);
IkReal x9476=(sj1*sj2);
IkReal x9477=(gconst1*r21);
IkReal x9478=(gconst1*r01);
IkReal x9479=((1.0)*x9474);
IkReal x9480=(gconst2*x9474);
IkReal x9481=((1.0)*cj1*cj2);
IkReal x9482=((1.0)*x9473);
evalcond[0]=((((-1.0)*r22*x9479))+(((-1.0)*gconst2*r20*x9482))+((x9473*x9477)));
evalcond[1]=(cj0+(((-1.0)*r12*x9479))+((x9473*x9475))+(((-1.0)*gconst2*r10*x9482)));
evalcond[2]=((((-1.0)*r02*x9479))+(((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9482))+((x9473*x9478)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9477*x9479))+((cj1*sj2))+((r20*x9480))+(((-1.0)*r22*x9482)));
evalcond[4]=((((-1.0)*x9478*x9479))+(((-1.0)*cj0*x9481))+((r00*x9480))+(((-1.0)*r02*x9482))+((cj0*x9476)));
evalcond[5]=((((-1.0)*sj0*x9481))+((sj0*x9476))+(((-1.0)*x9475*x9479))+((r10*x9480))+(((-1.0)*r12*x9482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9483=((1.0)*gconst2);
CheckValue<IkReal> x9484=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9483)))),-1);
if(!x9484.valid){
continue;
}
CheckValue<IkReal> x9485 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9483))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9484.value)))+(x9485.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9486=IKsin(j4);
IkReal x9487=IKcos(j4);
IkReal x9488=(gconst1*r11);
IkReal x9489=(sj1*sj2);
IkReal x9490=(gconst1*r21);
IkReal x9491=(gconst1*r01);
IkReal x9492=((1.0)*x9487);
IkReal x9493=(gconst2*x9487);
IkReal x9494=((1.0)*cj1*cj2);
IkReal x9495=((1.0)*x9486);
evalcond[0]=((((-1.0)*gconst2*r20*x9495))+(((-1.0)*r22*x9492))+((x9486*x9490)));
evalcond[1]=(cj0+((x9486*x9488))+(((-1.0)*gconst2*r10*x9495))+(((-1.0)*r12*x9492)));
evalcond[2]=((((-1.0)*r02*x9492))+(((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9495))+((x9486*x9491)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9495))+((cj1*sj2))+(((-1.0)*x9490*x9492))+((r20*x9493)));
evalcond[4]=((((-1.0)*r02*x9495))+(((-1.0)*x9491*x9492))+((cj0*x9489))+((r00*x9493))+(((-1.0)*cj0*x9494)));
evalcond[5]=(((sj0*x9489))+((r10*x9493))+(((-1.0)*x9488*x9492))+(((-1.0)*r12*x9495))+(((-1.0)*sj0*x9494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9496=((-1.0)*r20);
IkReal x9497=x8847;
CheckValue<IkReal> x9499 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9496),IKFAST_ATAN2_MAGTHRESH);
if(!x9499.valid){
continue;
}
IkReal x9498=((-1.0)*(x9499.value));
sj5=gconst1;
cj5=gconst2;
j5=x9498;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9498;
IkReal gconst1=(r21*x9497);
IkReal gconst2=(x9496*x9497);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9500=((-1.0)*r20);
IkReal x9501=x8847;
CheckValue<IkReal> x9503 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9500),IKFAST_ATAN2_MAGTHRESH);
if(!x9503.valid){
continue;
}
IkReal x9502=((-1.0)*(x9503.value));
sj5=gconst1;
cj5=gconst2;
j5=x9502;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9502;
IkReal gconst1=(r21*x9501);
IkReal gconst2=(x9500*x9501);
CheckValue<IkReal> x9511=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9511.valid){
continue;
}
IkReal x9504=x9511.value;
IkReal x9505=(sj3*x9504);
IkReal x9506=(r11*x9505);
IkReal x9507=(r00*x9505);
IkReal x9508=(r01*x9505);
IkReal x9509=(r10*x9505);
IkReal x9510=(r20*r21*x9505);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9506))+((r01*x9506*(r21*r21)))+((r10*r20*r21*x9508))+((r10*x9507*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9512=gconst2*gconst2;
IkReal x9513=gconst1*gconst1;
IkReal x9514=((1.0)*cj3);
IkReal x9515=((1.0)*sj3);
IkReal x9516=(r11*sj3);
IkReal x9517=(r10*sj3);
IkReal x9518=(gconst1*gconst2*r00);
IkReal x9519=(gconst1*gconst2*r01);
IkReal x9520=(r00*x9512);
IkReal x9521=(r01*x9513);
CheckValue<IkReal> x9522 = IKatan2WithCheck(IkReal((((gconst2*r02*x9516))+((gconst1*r02*x9517)))),IkReal((((x9517*x9521))+(((-1.0)*r10*x9515*x9518))+(((-1.0)*r11*x9515*x9520))+((x9516*x9519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9522.valid){
continue;
}
CheckValue<IkReal> x9523=IKPowWithIntegerCheck(IKsign((((cj3*r10*x9519))+(((-1.0)*r11*x9514*x9521))+((cj3*r11*x9518))+(((-1.0)*r10*x9514*x9520))+(((-1.0)*r02*r12*x9514)))),-1);
if(!x9523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9522.value)+(((1.5707963267949)*(x9523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9524=IKsin(j4);
IkReal x9525=IKcos(j4);
IkReal x9526=(sj1*sj2);
IkReal x9527=(gconst1*sj3);
IkReal x9528=(cj3*gconst1);
IkReal x9529=(cj3*gconst2);
IkReal x9530=((1.0)*cj2);
IkReal x9531=(cj1*sj2);
IkReal x9532=(gconst2*sj3);
IkReal x9533=(cj1*x9530);
IkReal x9534=((1.0)*x9525);
IkReal x9535=((1.0)*x9524);
IkReal x9536=(gconst1*x9524);
IkReal x9537=(cj3*x9524);
IkReal x9538=(x9525*x9532);
evalcond[0]=((((-1.0)*r22*x9534))+(((-1.0)*gconst2*r20*x9535))+((r21*x9536)));
evalcond[1]=((((-1.0)*gconst2*r00*x9535))+(((-1.0)*r02*x9534))+((r01*x9536)));
evalcond[2]=((1.0)+((r11*x9536))+(((-1.0)*gconst2*r10*x9535))+(((-1.0)*r12*x9534)));
evalcond[3]=(((r11*x9532))+((r10*x9527))+((r11*x9525*x9528))+((r12*x9537))+(((-1.0)*r10*x9529*x9534)));
evalcond[4]=((((-1.0)*r11*x9527*x9534))+((r10*x9528))+((r10*x9538))+(((-1.0)*r12*sj3*x9535))+((r11*x9529)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9529*x9534))+((r20*x9527))+((r22*x9537))+((r21*x9525*x9528))+x9531+((r21*x9532)));
evalcond[6]=(((r01*x9525*x9528))+((r02*x9537))+((r00*x9527))+((r01*x9532))+(((-1.0)*x9533))+x9526+(((-1.0)*r00*x9529*x9534)));
evalcond[7]=(((r20*x9538))+((r20*x9528))+(((-1.0)*x9533))+x9526+((r21*x9529))+(((-1.0)*r22*sj3*x9535))+(((-1.0)*r21*x9527*x9534)));
evalcond[8]=((((-1.0)*r01*x9527*x9534))+((r01*x9529))+((r00*x9528))+(((-1.0)*x9531))+((r00*x9538))+(((-1.0)*r02*sj3*x9535))+(((-1.0)*sj1*x9530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9539=gconst2*gconst2;
IkReal x9540=gconst1*gconst1;
IkReal x9541=(gconst2*r11);
IkReal x9542=(cj3*r02);
IkReal x9543=(gconst1*r01);
IkReal x9544=(cj3*r10);
IkReal x9545=(r10*sj3);
IkReal x9546=((1.0)*gconst1*r00);
IkReal x9547=(r01*x9540);
IkReal x9548=(r00*x9539);
CheckValue<IkReal> x9549=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj3*x9541*x9546))+((r02*r12*sj3))+((r11*sj3*x9547))+(((-1.0)*gconst2*x9543*x9545))+((x9545*x9548)))),-1);
if(!x9549.valid){
continue;
}
CheckValue<IkReal> x9550 = IKatan2WithCheck(IkReal((((gconst1*r10*x9542))+((x9541*x9542)))),IkReal(((((-1.0)*gconst2*x9544*x9546))+((x9544*x9547))+(((-1.0)*cj3*r11*x9548))+((cj3*x9541*x9543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9549.value)))+(x9550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9551=IKsin(j4);
IkReal x9552=IKcos(j4);
IkReal x9553=(sj1*sj2);
IkReal x9554=(gconst1*sj3);
IkReal x9555=(cj3*gconst1);
IkReal x9556=(cj3*gconst2);
IkReal x9557=((1.0)*cj2);
IkReal x9558=(cj1*sj2);
IkReal x9559=(gconst2*sj3);
IkReal x9560=(cj1*x9557);
IkReal x9561=((1.0)*x9552);
IkReal x9562=((1.0)*x9551);
IkReal x9563=(gconst1*x9551);
IkReal x9564=(cj3*x9551);
IkReal x9565=(x9552*x9559);
evalcond[0]=(((r21*x9563))+(((-1.0)*gconst2*r20*x9562))+(((-1.0)*r22*x9561)));
evalcond[1]=((((-1.0)*gconst2*r00*x9562))+((r01*x9563))+(((-1.0)*r02*x9561)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9562))+((r11*x9563))+(((-1.0)*r12*x9561)));
evalcond[3]=(((r11*x9559))+((r12*x9564))+((r10*x9554))+((r11*x9552*x9555))+(((-1.0)*r10*x9556*x9561)));
evalcond[4]=(((r11*x9556))+(((-1.0)*r11*x9554*x9561))+((r10*x9555))+(((-1.0)*r12*sj3*x9562))+((r10*x9565)));
evalcond[5]=((((-1.0)*r20*x9556*x9561))+((cj2*sj1))+((r20*x9554))+((r22*x9564))+x9558+((r21*x9559))+((r21*x9552*x9555)));
evalcond[6]=((((-1.0)*r00*x9556*x9561))+(((-1.0)*x9560))+((r01*x9552*x9555))+x9553+((r00*x9554))+((r01*x9559))+((r02*x9564)));
evalcond[7]=((((-1.0)*r22*sj3*x9562))+((r20*x9555))+(((-1.0)*x9560))+x9553+(((-1.0)*r21*x9554*x9561))+((r21*x9556))+((r20*x9565)));
evalcond[8]=((((-1.0)*r02*sj3*x9562))+((r00*x9565))+(((-1.0)*r01*x9554*x9561))+((r00*x9555))+((r01*x9556))+(((-1.0)*x9558))+(((-1.0)*sj1*x9557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9566=((1.0)*gconst2);
CheckValue<IkReal> x9567=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9566)))),-1);
if(!x9567.valid){
continue;
}
CheckValue<IkReal> x9568 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9566))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9567.value)))+(x9568.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9569=IKsin(j4);
IkReal x9570=IKcos(j4);
IkReal x9571=(sj1*sj2);
IkReal x9572=(gconst1*sj3);
IkReal x9573=(cj3*gconst1);
IkReal x9574=(cj3*gconst2);
IkReal x9575=((1.0)*cj2);
IkReal x9576=(cj1*sj2);
IkReal x9577=(gconst2*sj3);
IkReal x9578=(cj1*x9575);
IkReal x9579=((1.0)*x9570);
IkReal x9580=((1.0)*x9569);
IkReal x9581=(gconst1*x9569);
IkReal x9582=(cj3*x9569);
IkReal x9583=(x9570*x9577);
evalcond[0]=((((-1.0)*r22*x9579))+((r21*x9581))+(((-1.0)*gconst2*r20*x9580)));
evalcond[1]=((((-1.0)*r02*x9579))+((r01*x9581))+(((-1.0)*gconst2*r00*x9580)));
evalcond[2]=((1.0)+((r11*x9581))+(((-1.0)*r12*x9579))+(((-1.0)*gconst2*r10*x9580)));
evalcond[3]=(((r11*x9577))+(((-1.0)*r10*x9574*x9579))+((r12*x9582))+((r11*x9570*x9573))+((r10*x9572)));
evalcond[4]=((((-1.0)*r12*sj3*x9580))+((r10*x9583))+((r11*x9574))+(((-1.0)*r11*x9572*x9579))+((r10*x9573)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9574*x9579))+((r21*x9577))+((r21*x9570*x9573))+((r22*x9582))+x9576+((r20*x9572)));
evalcond[6]=((((-1.0)*r00*x9574*x9579))+((r01*x9570*x9573))+((r00*x9572))+(((-1.0)*x9578))+((r01*x9577))+x9571+((r02*x9582)));
evalcond[7]=((((-1.0)*r21*x9572*x9579))+((r20*x9583))+((r21*x9574))+(((-1.0)*x9578))+(((-1.0)*r22*sj3*x9580))+x9571+((r20*x9573)));
evalcond[8]=(((r00*x9583))+(((-1.0)*x9576))+((r00*x9573))+(((-1.0)*r02*sj3*x9580))+((r01*x9574))+(((-1.0)*r01*x9572*x9579))+(((-1.0)*sj1*x9575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9584=((-1.0)*r20);
IkReal x9585=x8847;
CheckValue<IkReal> x9587 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9584),IKFAST_ATAN2_MAGTHRESH);
if(!x9587.valid){
continue;
}
IkReal x9586=((-1.0)*(x9587.value));
sj5=gconst1;
cj5=gconst2;
j5=x9586;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9586;
IkReal gconst1=(r21*x9585);
IkReal gconst2=(x9584*x9585);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9588=((-1.0)*r20);
IkReal x9589=x8847;
CheckValue<IkReal> x9591 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9588),IKFAST_ATAN2_MAGTHRESH);
if(!x9591.valid){
continue;
}
IkReal x9590=((-1.0)*(x9591.value));
sj5=gconst1;
cj5=gconst2;
j5=x9590;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9590;
IkReal gconst1=(r21*x9589);
IkReal gconst2=(x9588*x9589);
CheckValue<IkReal> x9599=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9599.valid){
continue;
}
IkReal x9592=x9599.value;
IkReal x9593=(sj3*x9592);
IkReal x9594=(r11*x9593);
IkReal x9595=(r00*x9593);
IkReal x9596=(r01*x9593);
IkReal x9597=(r10*x9593);
IkReal x9598=(r20*r21*x9593);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9596))+((r01*x9594*(r21*r21)))+((r10*x9595*(r20*r20)))+((r00*r20*r21*x9594))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9600=gconst2*gconst2;
IkReal x9601=gconst1*gconst1;
IkReal x9602=((1.0)*cj3);
IkReal x9603=((1.0)*sj3);
IkReal x9604=(r11*sj3);
IkReal x9605=(r10*sj3);
IkReal x9606=(gconst1*gconst2*r00);
IkReal x9607=(gconst1*gconst2*r01);
IkReal x9608=(r00*x9600);
IkReal x9609=(r01*x9601);
CheckValue<IkReal> x9610=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9602*x9609))+(((-1.0)*r02*r12*x9602))+((cj3*r11*x9606))+(((-1.0)*r10*x9602*x9608))+((cj3*r10*x9607)))),-1);
if(!x9610.valid){
continue;
}
CheckValue<IkReal> x9611 = IKatan2WithCheck(IkReal((((gconst1*r02*x9605))+((gconst2*r02*x9604)))),IkReal((((x9604*x9607))+(((-1.0)*r11*x9603*x9608))+((x9605*x9609))+(((-1.0)*r10*x9603*x9606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9610.value)))+(x9611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9612=IKsin(j4);
IkReal x9613=IKcos(j4);
IkReal x9614=(cj2*sj1);
IkReal x9615=(cj1*sj2);
IkReal x9616=(gconst1*sj3);
IkReal x9617=(cj3*gconst1);
IkReal x9618=(sj1*sj2);
IkReal x9619=(cj3*gconst2);
IkReal x9620=(cj1*cj2);
IkReal x9621=(gconst2*sj3);
IkReal x9622=((1.0)*x9613);
IkReal x9623=((1.0)*x9612);
IkReal x9624=(gconst1*x9612);
IkReal x9625=(cj3*x9612);
IkReal x9626=(x9614+x9615);
IkReal x9627=(x9613*x9621);
evalcond[0]=((((-1.0)*r22*x9622))+((r21*x9624))+(((-1.0)*gconst2*r20*x9623)));
evalcond[1]=(((r01*x9624))+(((-1.0)*gconst2*r00*x9623))+(((-1.0)*r02*x9622)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x9622))+((r11*x9624))+(((-1.0)*gconst2*r10*x9623)));
evalcond[3]=(((r10*x9616))+((r11*x9613*x9617))+((r12*x9625))+((r11*x9621))+(((-1.0)*r10*x9619*x9622)));
evalcond[4]=((((-1.0)*r11*x9616*x9622))+((r10*x9627))+((r10*x9617))+(((-1.0)*r12*sj3*x9623))+((r11*x9619)));
evalcond[5]=((((-1.0)*r20*x9619*x9622))+((r20*x9616))+((r21*x9621))+((r22*x9625))+x9626+((r21*x9613*x9617)));
evalcond[6]=(((r01*x9621))+((r00*x9616))+(((-1.0)*r00*x9619*x9622))+(((-1.0)*x9618))+((r02*x9625))+x9620+((r01*x9613*x9617)));
evalcond[7]=(((r00*x9627))+((r00*x9617))+((r01*x9619))+(((-1.0)*r02*sj3*x9623))+(((-1.0)*r01*x9616*x9622))+x9626);
evalcond[8]=(((r20*x9617))+((r20*x9627))+(((-1.0)*r22*sj3*x9623))+(((-1.0)*x9620))+((r21*x9619))+(((-1.0)*r21*x9616*x9622))+x9618);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9628=gconst2*gconst2;
IkReal x9629=gconst1*gconst1;
IkReal x9630=(gconst2*r11);
IkReal x9631=(cj3*r02);
IkReal x9632=(gconst1*r01);
IkReal x9633=(cj3*r10);
IkReal x9634=(r10*sj3);
IkReal x9635=((1.0)*gconst1*r00);
IkReal x9636=(r01*x9629);
IkReal x9637=(r00*x9628);
CheckValue<IkReal> x9638 = IKatan2WithCheck(IkReal((((gconst1*r10*x9631))+((x9630*x9631)))),IkReal((((cj3*x9630*x9632))+(((-1.0)*gconst2*x9633*x9635))+(((-1.0)*cj3*r11*x9637))+((x9633*x9636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9638.valid){
continue;
}
CheckValue<IkReal> x9639=IKPowWithIntegerCheck(IKsign((((x9634*x9637))+((r02*r12*sj3))+(((-1.0)*gconst2*x9632*x9634))+(((-1.0)*sj3*x9630*x9635))+((r11*sj3*x9636)))),-1);
if(!x9639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9638.value)+(((1.5707963267949)*(x9639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9640=IKsin(j4);
IkReal x9641=IKcos(j4);
IkReal x9642=(cj2*sj1);
IkReal x9643=(cj1*sj2);
IkReal x9644=(gconst1*sj3);
IkReal x9645=(cj3*gconst1);
IkReal x9646=(sj1*sj2);
IkReal x9647=(cj3*gconst2);
IkReal x9648=(cj1*cj2);
IkReal x9649=(gconst2*sj3);
IkReal x9650=((1.0)*x9641);
IkReal x9651=((1.0)*x9640);
IkReal x9652=(gconst1*x9640);
IkReal x9653=(cj3*x9640);
IkReal x9654=(x9643+x9642);
IkReal x9655=(x9641*x9649);
evalcond[0]=((((-1.0)*gconst2*r20*x9651))+((r21*x9652))+(((-1.0)*r22*x9650)));
evalcond[1]=(((r01*x9652))+(((-1.0)*gconst2*r00*x9651))+(((-1.0)*r02*x9650)));
evalcond[2]=((-1.0)+((r11*x9652))+(((-1.0)*r12*x9650))+(((-1.0)*gconst2*r10*x9651)));
evalcond[3]=(((r11*x9649))+((r12*x9653))+((r10*x9644))+((r11*x9641*x9645))+(((-1.0)*r10*x9647*x9650)));
evalcond[4]=(((r11*x9647))+(((-1.0)*r11*x9644*x9650))+((r10*x9645))+((r10*x9655))+(((-1.0)*r12*sj3*x9651)));
evalcond[5]=((((-1.0)*r20*x9647*x9650))+((r21*x9641*x9645))+x9654+((r20*x9644))+((r22*x9653))+((r21*x9649)));
evalcond[6]=(((r01*x9641*x9645))+((r00*x9644))+((r01*x9649))+x9648+((r02*x9653))+(((-1.0)*r00*x9647*x9650))+(((-1.0)*x9646)));
evalcond[7]=((((-1.0)*r02*sj3*x9651))+((r00*x9655))+((r00*x9645))+((r01*x9647))+x9654+(((-1.0)*r01*x9644*x9650)));
evalcond[8]=(((r20*x9655))+x9646+((r20*x9645))+(((-1.0)*r22*sj3*x9651))+(((-1.0)*x9648))+((r21*x9647))+(((-1.0)*r21*x9644*x9650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9656 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9656.valid){
continue;
}
CheckValue<IkReal> x9657=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9656.value)+(((1.5707963267949)*(x9657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9658=IKsin(j4);
IkReal x9659=IKcos(j4);
IkReal x9660=(cj2*sj1);
IkReal x9661=(cj1*sj2);
IkReal x9662=(gconst1*sj3);
IkReal x9663=(cj3*gconst1);
IkReal x9664=(sj1*sj2);
IkReal x9665=(cj3*gconst2);
IkReal x9666=(cj1*cj2);
IkReal x9667=(gconst2*sj3);
IkReal x9668=((1.0)*x9659);
IkReal x9669=((1.0)*x9658);
IkReal x9670=(gconst1*x9658);
IkReal x9671=(cj3*x9658);
IkReal x9672=(x9661+x9660);
IkReal x9673=(x9659*x9667);
evalcond[0]=(((r21*x9670))+(((-1.0)*gconst2*r20*x9669))+(((-1.0)*r22*x9668)));
evalcond[1]=(((r01*x9670))+(((-1.0)*gconst2*r00*x9669))+(((-1.0)*r02*x9668)));
evalcond[2]=((-1.0)+((r11*x9670))+(((-1.0)*r12*x9668))+(((-1.0)*gconst2*r10*x9669)));
evalcond[3]=(((r12*x9671))+((r11*x9667))+(((-1.0)*r10*x9665*x9668))+((r10*x9662))+((r11*x9659*x9663)));
evalcond[4]=(((r11*x9665))+(((-1.0)*r11*x9662*x9668))+((r10*x9673))+((r10*x9663))+(((-1.0)*r12*sj3*x9669)));
evalcond[5]=(((r21*x9667))+((r20*x9662))+(((-1.0)*r20*x9665*x9668))+x9672+((r22*x9671))+((r21*x9659*x9663)));
evalcond[6]=(((r00*x9662))+(((-1.0)*r00*x9665*x9668))+x9666+((r01*x9667))+(((-1.0)*x9664))+((r01*x9659*x9663))+((r02*x9671)));
evalcond[7]=((((-1.0)*r01*x9662*x9668))+(((-1.0)*r02*sj3*x9669))+((r00*x9673))+((r00*x9663))+x9672+((r01*x9665)));
evalcond[8]=(((r21*x9665))+((r20*x9663))+((r20*x9673))+x9664+(((-1.0)*x9666))+(((-1.0)*r21*x9662*x9668))+(((-1.0)*r22*sj3*x9669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9674=((-1.0)*r20);
IkReal x9675=x8847;
CheckValue<IkReal> x9677 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9674),IKFAST_ATAN2_MAGTHRESH);
if(!x9677.valid){
continue;
}
IkReal x9676=((-1.0)*(x9677.value));
sj5=gconst1;
cj5=gconst2;
j5=x9676;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9676;
IkReal gconst1=(r21*x9675);
IkReal gconst2=(x9674*x9675);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9678=((-1.0)*r20);
IkReal x9679=x8847;
CheckValue<IkReal> x9681 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9678),IKFAST_ATAN2_MAGTHRESH);
if(!x9681.valid){
continue;
}
IkReal x9680=((-1.0)*(x9681.value));
sj5=gconst1;
cj5=gconst2;
j5=x9680;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9680;
IkReal gconst1=(r21*x9679);
IkReal gconst2=(x9678*x9679);
CheckValue<IkReal> x9689=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9689.valid){
continue;
}
IkReal x9682=x9689.value;
IkReal x9683=(sj3*x9682);
IkReal x9684=(r11*x9683);
IkReal x9685=(r00*x9683);
IkReal x9686=(r01*x9683);
IkReal x9687=(r10*x9683);
IkReal x9688=(r20*r21*x9683);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9684))+((r10*x9685*(r20*r20)))+((r01*x9684*(r21*r21)))+((r10*r20*r21*x9686))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9690=gconst1*gconst1;
IkReal x9691=gconst2*gconst2;
IkReal x9692=((1.0)*cj3);
IkReal x9693=(gconst2*r10);
IkReal x9694=(r01*sj3);
IkReal x9695=(gconst1*r00*sj3);
IkReal x9696=(gconst1*gconst2*r11);
IkReal x9697=(r10*x9691);
IkReal x9698=(r11*x9690);
CheckValue<IkReal> x9699 = IKatan2WithCheck(IkReal((((gconst2*r12*x9694))+((r12*x9695)))),IkReal(((((-1.0)*x9694*x9697))+((x9694*x9696))+((r00*sj3*x9698))+(((-1.0)*x9693*x9695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9699.valid){
continue;
}
CheckValue<IkReal> x9700=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9696))+((cj3*gconst1*r01*x9693))+(((-1.0)*r01*x9692*x9698))+(((-1.0)*r00*x9692*x9697))+(((-1.0)*r02*r12*x9692)))),-1);
if(!x9700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9699.value)+(((1.5707963267949)*(x9700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9701=IKsin(j4);
IkReal x9702=IKcos(j4);
IkReal x9703=(sj1*sj2);
IkReal x9704=(gconst1*sj3);
IkReal x9705=(cj3*gconst1);
IkReal x9706=(cj3*gconst2);
IkReal x9707=((1.0)*cj2);
IkReal x9708=(cj1*sj2);
IkReal x9709=(gconst2*sj3);
IkReal x9710=(cj1*x9707);
IkReal x9711=((1.0)*x9702);
IkReal x9712=((1.0)*x9701);
IkReal x9713=(gconst1*x9701);
IkReal x9714=(cj3*x9701);
IkReal x9715=(x9702*x9709);
evalcond[0]=((((-1.0)*gconst2*r20*x9712))+((r21*x9713))+(((-1.0)*r22*x9711)));
evalcond[1]=(((r11*x9713))+(((-1.0)*gconst2*r10*x9712))+(((-1.0)*r12*x9711)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9711))+(((-1.0)*gconst2*r00*x9712))+((r01*x9713)));
evalcond[3]=(((r02*x9714))+((r01*x9709))+((r00*x9704))+(((-1.0)*r00*x9706*x9711))+((r01*x9702*x9705)));
evalcond[4]=((((-1.0)*r02*sj3*x9712))+((r01*x9706))+((r00*x9705))+((r00*x9715))+(((-1.0)*r01*x9704*x9711)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9706*x9711))+((r22*x9714))+((r20*x9704))+((r21*x9709))+x9708+((r21*x9702*x9705)));
evalcond[6]=(((r10*x9704))+((r12*x9714))+(((-1.0)*r10*x9706*x9711))+((r11*x9702*x9705))+((r11*x9709))+x9703+(((-1.0)*x9710)));
evalcond[7]=((((-1.0)*r21*x9704*x9711))+((r20*x9705))+(((-1.0)*r22*sj3*x9712))+((r21*x9706))+x9703+((r20*x9715))+(((-1.0)*x9710)));
evalcond[8]=(((r10*x9705))+(((-1.0)*r12*sj3*x9712))+(((-1.0)*sj1*x9707))+(((-1.0)*x9708))+((r11*x9706))+(((-1.0)*r11*x9704*x9711))+((r10*x9715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9716=gconst2*gconst2;
IkReal x9717=gconst1*gconst1;
IkReal x9718=(gconst1*r00);
IkReal x9719=(r11*sj3);
IkReal x9720=((1.0)*gconst2);
IkReal x9721=(cj3*r12);
IkReal x9722=(cj3*r11);
IkReal x9723=(gconst2*r01);
IkReal x9724=(cj3*r10);
IkReal x9725=(r10*sj3);
CheckValue<IkReal> x9726=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9720*x9725))+(((-1.0)*x9718*x9719*x9720))+((r01*x9717*x9719))+((r00*x9716*x9725)))),-1);
if(!x9726.valid){
continue;
}
CheckValue<IkReal> x9727 = IKatan2WithCheck(IkReal((((x9718*x9721))+((x9721*x9723)))),IkReal((((gconst1*x9722*x9723))+(((-1.0)*x9718*x9720*x9724))+((r00*x9717*x9722))+(((-1.0)*r01*x9716*x9724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9726.value)))+(x9727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9728=IKsin(j4);
IkReal x9729=IKcos(j4);
IkReal x9730=(sj1*sj2);
IkReal x9731=(gconst1*sj3);
IkReal x9732=(cj3*gconst1);
IkReal x9733=(cj3*gconst2);
IkReal x9734=((1.0)*cj2);
IkReal x9735=(cj1*sj2);
IkReal x9736=(gconst2*sj3);
IkReal x9737=(cj1*x9734);
IkReal x9738=((1.0)*x9729);
IkReal x9739=((1.0)*x9728);
IkReal x9740=(gconst1*x9728);
IkReal x9741=(cj3*x9728);
IkReal x9742=(x9729*x9736);
evalcond[0]=(((r21*x9740))+(((-1.0)*r22*x9738))+(((-1.0)*gconst2*r20*x9739)));
evalcond[1]=(((r11*x9740))+(((-1.0)*r12*x9738))+(((-1.0)*gconst2*r10*x9739)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9738))+(((-1.0)*gconst2*r00*x9739))+((r01*x9740)));
evalcond[3]=(((r01*x9729*x9732))+((r02*x9741))+((r01*x9736))+(((-1.0)*r00*x9733*x9738))+((r00*x9731)));
evalcond[4]=((((-1.0)*r01*x9731*x9738))+(((-1.0)*r02*sj3*x9739))+((r00*x9742))+((r01*x9733))+((r00*x9732)));
evalcond[5]=(((cj2*sj1))+((r22*x9741))+(((-1.0)*r20*x9733*x9738))+((r20*x9731))+x9735+((r21*x9736))+((r21*x9729*x9732)));
evalcond[6]=(((r11*x9736))+((r11*x9729*x9732))+x9730+(((-1.0)*r10*x9733*x9738))+(((-1.0)*x9737))+((r12*x9741))+((r10*x9731)));
evalcond[7]=((((-1.0)*r21*x9731*x9738))+((r20*x9732))+x9730+(((-1.0)*r22*sj3*x9739))+(((-1.0)*x9737))+((r20*x9742))+((r21*x9733)));
evalcond[8]=(((r11*x9733))+(((-1.0)*r12*sj3*x9739))+((r10*x9742))+(((-1.0)*sj1*x9734))+(((-1.0)*r11*x9731*x9738))+((r10*x9732))+(((-1.0)*x9735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9743=((1.0)*gconst2);
CheckValue<IkReal> x9744 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9744.valid){
continue;
}
CheckValue<IkReal> x9745=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9743)))),-1);
if(!x9745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9744.value)+(((1.5707963267949)*(x9745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9746=IKsin(j4);
IkReal x9747=IKcos(j4);
IkReal x9748=(sj1*sj2);
IkReal x9749=(gconst1*sj3);
IkReal x9750=(cj3*gconst1);
IkReal x9751=(cj3*gconst2);
IkReal x9752=((1.0)*cj2);
IkReal x9753=(cj1*sj2);
IkReal x9754=(gconst2*sj3);
IkReal x9755=(cj1*x9752);
IkReal x9756=((1.0)*x9747);
IkReal x9757=((1.0)*x9746);
IkReal x9758=(gconst1*x9746);
IkReal x9759=(cj3*x9746);
IkReal x9760=(x9747*x9754);
evalcond[0]=(((r21*x9758))+(((-1.0)*r22*x9756))+(((-1.0)*gconst2*r20*x9757)));
evalcond[1]=(((r11*x9758))+(((-1.0)*gconst2*r10*x9757))+(((-1.0)*r12*x9756)));
evalcond[2]=((-1.0)+((r01*x9758))+(((-1.0)*r02*x9756))+(((-1.0)*gconst2*r00*x9757)));
evalcond[3]=(((r01*x9754))+(((-1.0)*r00*x9751*x9756))+((r02*x9759))+((r00*x9749))+((r01*x9747*x9750)));
evalcond[4]=(((r01*x9751))+((r00*x9750))+((r00*x9760))+(((-1.0)*r01*x9749*x9756))+(((-1.0)*r02*sj3*x9757)));
evalcond[5]=(((cj2*sj1))+((r22*x9759))+((r21*x9754))+x9753+((r20*x9749))+(((-1.0)*r20*x9751*x9756))+((r21*x9747*x9750)));
evalcond[6]=(((r11*x9754))+((r11*x9747*x9750))+((r10*x9749))+x9748+(((-1.0)*r10*x9751*x9756))+((r12*x9759))+(((-1.0)*x9755)));
evalcond[7]=((((-1.0)*r21*x9749*x9756))+((r21*x9751))+x9748+(((-1.0)*r22*sj3*x9757))+((r20*x9760))+((r20*x9750))+(((-1.0)*x9755)));
evalcond[8]=(((r10*x9750))+((r11*x9751))+(((-1.0)*x9753))+((r10*x9760))+(((-1.0)*r12*sj3*x9757))+(((-1.0)*r11*x9749*x9756))+(((-1.0)*sj1*x9752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9761=((-1.0)*r20);
IkReal x9762=x8847;
CheckValue<IkReal> x9764 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9761),IKFAST_ATAN2_MAGTHRESH);
if(!x9764.valid){
continue;
}
IkReal x9763=((-1.0)*(x9764.value));
sj5=gconst1;
cj5=gconst2;
j5=x9763;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9763;
IkReal gconst1=(r21*x9762);
IkReal gconst2=(x9761*x9762);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9765=((-1.0)*r20);
IkReal x9766=x8847;
CheckValue<IkReal> x9768 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9765),IKFAST_ATAN2_MAGTHRESH);
if(!x9768.valid){
continue;
}
IkReal x9767=((-1.0)*(x9768.value));
sj5=gconst1;
cj5=gconst2;
j5=x9767;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9767;
IkReal gconst1=(r21*x9766);
IkReal gconst2=(x9765*x9766);
CheckValue<IkReal> x9776=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9776.valid){
continue;
}
IkReal x9769=x9776.value;
IkReal x9770=(sj3*x9769);
IkReal x9771=(r11*x9770);
IkReal x9772=(r00*x9770);
IkReal x9773=(r01*x9770);
IkReal x9774=(r10*x9770);
IkReal x9775=(r20*r21*x9770);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9771*(r21*r21)))+((r10*x9772*(r20*r20)))+((r00*r20*r21*x9771))+((r10*r20*r21*x9773))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9777=gconst1*gconst1;
IkReal x9778=gconst2*gconst2;
IkReal x9779=((1.0)*cj3);
IkReal x9780=(gconst2*r10);
IkReal x9781=(r01*sj3);
IkReal x9782=(gconst1*r00*sj3);
IkReal x9783=(gconst1*gconst2*r11);
IkReal x9784=(r10*x9778);
IkReal x9785=(r11*x9777);
CheckValue<IkReal> x9786 = IKatan2WithCheck(IkReal((((gconst2*r12*x9781))+((r12*x9782)))),IkReal(((((-1.0)*x9780*x9782))+((r00*sj3*x9785))+((x9781*x9783))+(((-1.0)*x9781*x9784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9786.valid){
continue;
}
CheckValue<IkReal> x9787=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9783))+(((-1.0)*r00*x9779*x9784))+(((-1.0)*r02*r12*x9779))+(((-1.0)*r01*x9779*x9785))+((cj3*gconst1*r01*x9780)))),-1);
if(!x9787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9786.value)+(((1.5707963267949)*(x9787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9788=IKsin(j4);
IkReal x9789=IKcos(j4);
IkReal x9790=(cj2*sj1);
IkReal x9791=(cj1*sj2);
IkReal x9792=(gconst1*sj3);
IkReal x9793=(cj3*gconst1);
IkReal x9794=(sj1*sj2);
IkReal x9795=(cj3*gconst2);
IkReal x9796=(cj1*cj2);
IkReal x9797=(gconst2*sj3);
IkReal x9798=((1.0)*x9789);
IkReal x9799=((1.0)*x9788);
IkReal x9800=(gconst1*x9788);
IkReal x9801=(cj3*x9788);
IkReal x9802=(x9791+x9790);
IkReal x9803=(x9789*x9797);
evalcond[0]=(((r21*x9800))+(((-1.0)*gconst2*r20*x9799))+(((-1.0)*r22*x9798)));
evalcond[1]=((((-1.0)*gconst2*r10*x9799))+((r11*x9800))+(((-1.0)*r12*x9798)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9798))+(((-1.0)*gconst2*r00*x9799))+((r01*x9800)));
evalcond[3]=((((-1.0)*r00*x9795*x9798))+((r00*x9792))+((r02*x9801))+((r01*x9797))+((r01*x9789*x9793)));
evalcond[4]=(((r00*x9803))+(((-1.0)*r02*sj3*x9799))+((r00*x9793))+((r01*x9795))+(((-1.0)*r01*x9792*x9798)));
evalcond[5]=((((-1.0)*r20*x9795*x9798))+((r21*x9789*x9793))+((r20*x9792))+((r22*x9801))+((r21*x9797))+x9802);
evalcond[6]=(((r12*x9801))+((r11*x9797))+((r10*x9792))+(((-1.0)*x9794))+(((-1.0)*r10*x9795*x9798))+x9796+((r11*x9789*x9793)));
evalcond[7]=(((r10*x9803))+((r11*x9795))+((r10*x9793))+(((-1.0)*r12*sj3*x9799))+(((-1.0)*r11*x9792*x9798))+x9802);
evalcond[8]=((((-1.0)*r21*x9792*x9798))+((r20*x9793))+(((-1.0)*x9796))+x9794+((r21*x9795))+(((-1.0)*r22*sj3*x9799))+((r20*x9803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9804=gconst2*gconst2;
IkReal x9805=gconst1*gconst1;
IkReal x9806=(gconst1*r00);
IkReal x9807=(r11*sj3);
IkReal x9808=((1.0)*gconst2);
IkReal x9809=(cj3*r12);
IkReal x9810=(cj3*r11);
IkReal x9811=(gconst2*r01);
IkReal x9812=(cj3*r10);
IkReal x9813=(r10*sj3);
CheckValue<IkReal> x9814 = IKatan2WithCheck(IkReal((((x9809*x9811))+((x9806*x9809)))),IkReal((((gconst1*x9810*x9811))+(((-1.0)*r01*x9804*x9812))+(((-1.0)*x9806*x9808*x9812))+((r00*x9805*x9810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9814.valid){
continue;
}
CheckValue<IkReal> x9815=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*x9805*x9807))+(((-1.0)*gconst1*r01*x9808*x9813))+(((-1.0)*x9806*x9807*x9808))+((r00*x9804*x9813)))),-1);
if(!x9815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9814.value)+(((1.5707963267949)*(x9815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9816=IKsin(j4);
IkReal x9817=IKcos(j4);
IkReal x9818=(cj2*sj1);
IkReal x9819=(cj1*sj2);
IkReal x9820=(gconst1*sj3);
IkReal x9821=(cj3*gconst1);
IkReal x9822=(sj1*sj2);
IkReal x9823=(cj3*gconst2);
IkReal x9824=(cj1*cj2);
IkReal x9825=(gconst2*sj3);
IkReal x9826=((1.0)*x9817);
IkReal x9827=((1.0)*x9816);
IkReal x9828=(gconst1*x9816);
IkReal x9829=(cj3*x9816);
IkReal x9830=(x9818+x9819);
IkReal x9831=(x9817*x9825);
evalcond[0]=((((-1.0)*gconst2*r20*x9827))+((r21*x9828))+(((-1.0)*r22*x9826)));
evalcond[1]=(((r11*x9828))+(((-1.0)*r12*x9826))+(((-1.0)*gconst2*r10*x9827)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9827))+(((-1.0)*r02*x9826))+((r01*x9828)));
evalcond[3]=((((-1.0)*r00*x9823*x9826))+((r01*x9817*x9821))+((r00*x9820))+((r01*x9825))+((r02*x9829)));
evalcond[4]=(((r00*x9831))+((r00*x9821))+((r01*x9823))+(((-1.0)*r02*sj3*x9827))+(((-1.0)*r01*x9820*x9826)));
evalcond[5]=(((r20*x9820))+((r22*x9829))+((r21*x9825))+(((-1.0)*r20*x9823*x9826))+((r21*x9817*x9821))+x9830);
evalcond[6]=(((r11*x9825))+(((-1.0)*r10*x9823*x9826))+((r12*x9829))+((r11*x9817*x9821))+x9824+(((-1.0)*x9822))+((r10*x9820)));
evalcond[7]=(((r10*x9831))+((r11*x9823))+(((-1.0)*r11*x9820*x9826))+(((-1.0)*r12*sj3*x9827))+x9830+((r10*x9821)));
evalcond[8]=(((r20*x9821))+(((-1.0)*r22*sj3*x9827))+((r21*x9823))+(((-1.0)*r21*x9820*x9826))+((r20*x9831))+x9822+(((-1.0)*x9824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9832 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9832.valid){
continue;
}
CheckValue<IkReal> x9833=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9832.value)+(((1.5707963267949)*(x9833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9834=IKsin(j4);
IkReal x9835=IKcos(j4);
IkReal x9836=(cj2*sj1);
IkReal x9837=(cj1*sj2);
IkReal x9838=(gconst1*sj3);
IkReal x9839=(cj3*gconst1);
IkReal x9840=(sj1*sj2);
IkReal x9841=(cj3*gconst2);
IkReal x9842=(cj1*cj2);
IkReal x9843=(gconst2*sj3);
IkReal x9844=((1.0)*x9835);
IkReal x9845=((1.0)*x9834);
IkReal x9846=(gconst1*x9834);
IkReal x9847=(cj3*x9834);
IkReal x9848=(x9836+x9837);
IkReal x9849=(x9835*x9843);
evalcond[0]=((((-1.0)*gconst2*r20*x9845))+(((-1.0)*r22*x9844))+((r21*x9846)));
evalcond[1]=(((r11*x9846))+(((-1.0)*r12*x9844))+(((-1.0)*gconst2*r10*x9845)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9845))+(((-1.0)*r02*x9844))+((r01*x9846)));
evalcond[3]=(((r00*x9838))+((r02*x9847))+((r01*x9835*x9839))+(((-1.0)*r00*x9841*x9844))+((r01*x9843)));
evalcond[4]=((((-1.0)*r01*x9838*x9844))+((r00*x9839))+(((-1.0)*r02*sj3*x9845))+((r01*x9841))+((r00*x9849)));
evalcond[5]=(((r21*x9835*x9839))+(((-1.0)*r20*x9841*x9844))+((r20*x9838))+x9848+((r22*x9847))+((r21*x9843)));
evalcond[6]=(((r11*x9843))+((r10*x9838))+(((-1.0)*x9840))+((r11*x9835*x9839))+((r12*x9847))+x9842+(((-1.0)*r10*x9841*x9844)));
evalcond[7]=(((r11*x9841))+(((-1.0)*r12*sj3*x9845))+((r10*x9849))+((r10*x9839))+(((-1.0)*r11*x9838*x9844))+x9848);
evalcond[8]=((((-1.0)*x9842))+((r20*x9849))+(((-1.0)*r22*sj3*x9845))+(((-1.0)*r21*x9838*x9844))+((r20*x9839))+x9840+((r21*x9841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9850=((-1.0)*r20);
IkReal x9851=((-1.0)*px);
CheckValue<IkReal> x9853 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9850),IKFAST_ATAN2_MAGTHRESH);
if(!x9853.valid){
continue;
}
IkReal x9852=((-1.0)*(x9853.value));
sj5=gconst1;
cj5=gconst2;
j5=x9852;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9851);
rxp1_1=(px*r21);
rxp1_2=(r11*x9851);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9852;
IkReal gconst1=r21;
IkReal gconst2=x9850;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9854=((-1.0)*r20);
IkReal x9855=((-1.0)*px);
CheckValue<IkReal> x9857 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9854),IKFAST_ATAN2_MAGTHRESH);
if(!x9857.valid){
continue;
}
IkReal x9856=((-1.0)*(x9857.value));
sj5=gconst1;
cj5=gconst2;
j5=x9856;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9855);
rxp1_1=(px*r21);
rxp1_2=(r11*x9855);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9856;
IkReal gconst1=r21;
IkReal gconst2=x9854;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9858=((-1.0)*r20);
IkReal x9859=((-1.0)*px);
CheckValue<IkReal> x9861 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9858),IKFAST_ATAN2_MAGTHRESH);
if(!x9861.valid){
continue;
}
IkReal x9860=((-1.0)*(x9861.value));
sj5=gconst1;
cj5=gconst2;
j5=x9860;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9859);
rxp1_1=(px*r21);
rxp1_2=(r11*x9859);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9860;
IkReal gconst1=r21;
IkReal gconst2=x9858;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9862=((-1.0)*r20);
IkReal x9863=((-1.0)*px);
CheckValue<IkReal> x9865 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9862),IKFAST_ATAN2_MAGTHRESH);
if(!x9865.valid){
continue;
}
IkReal x9864=((-1.0)*(x9865.value));
sj5=gconst1;
cj5=gconst2;
j5=x9864;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9863);
rxp1_1=(px*r21);
rxp1_2=(r11*x9863);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9864;
IkReal gconst1=r21;
IkReal gconst2=x9862;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9866=((-1.0)*r20);
IkReal x9867=((-1.0)*px);
CheckValue<IkReal> x9869 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9866),IKFAST_ATAN2_MAGTHRESH);
if(!x9869.valid){
continue;
}
IkReal x9868=((-1.0)*(x9869.value));
sj5=gconst1;
cj5=gconst2;
j5=x9868;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9867);
rxp1_1=(px*r21);
rxp1_2=(r11*x9867);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9868;
IkReal gconst1=r21;
IkReal gconst2=x9866;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9870=((-1.0)*r20);
IkReal x9871=((-1.0)*px);
CheckValue<IkReal> x9873 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9870),IKFAST_ATAN2_MAGTHRESH);
if(!x9873.valid){
continue;
}
IkReal x9872=((-1.0)*(x9873.value));
sj5=gconst1;
cj5=gconst2;
j5=x9872;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9871);
rxp1_1=(px*r21);
rxp1_2=(r11*x9871);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9872;
IkReal gconst1=r21;
IkReal gconst2=x9870;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9876=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9876.valid){
continue;
}
IkReal x9874=x9876.value;
IkReal x9875=(sj0*x9874);
cj4array[0]=(((cj2*sj1*x9875))+((cj1*sj2*x9875)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9877=IKsin(j4);
IkReal x9878=IKcos(j4);
IkReal x9879=(gconst1*x9877);
IkReal x9880=((1.0)*x9878);
IkReal x9881=((1.0)*gconst2*x9877);
evalcond[0]=((-1.0)*r02*x9877);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9880)));
evalcond[2]=(((r21*x9879))+(((-1.0)*r20*x9881)));
evalcond[3]=((((-1.0)*r10*x9881))+((r11*x9879)));
evalcond[4]=(((gconst2*r20*x9878))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x9880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9883=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9883.valid){
continue;
}
IkReal x9882=x9883.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9882))+((cj1*cj2*x9882)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9884=IKsin(j4);
IkReal x9885=IKcos(j4);
IkReal x9886=(gconst2*r10);
IkReal x9887=((1.0)*sj0);
IkReal x9888=((1.0)*x9884);
IkReal x9889=(gconst1*x9884);
IkReal x9890=((1.0)*x9885);
evalcond[0]=((-1.0)*r02*x9884);
evalcond[1]=((((-1.0)*x9887))+(((-1.0)*r02*x9890)));
evalcond[2]=(((r21*x9889))+(((-1.0)*gconst2*r20*x9888)));
evalcond[3]=(((r11*x9889))+(((-1.0)*x9886*x9888)));
evalcond[4]=((((-1.0)*cj1*sj2*x9887))+(((-1.0)*gconst1*r11*x9890))+(((-1.0)*cj2*sj1*x9887))+((x9885*x9886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9891=IKPowWithIntegerCheck(r02,-1);
if(!x9891.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9891.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9892=IKsin(j4);
IkReal x9893=IKcos(j4);
IkReal x9894=(gconst2*r10);
IkReal x9895=((1.0)*sj0);
IkReal x9896=(gconst1*r11);
IkReal x9897=(gconst1*r21);
IkReal x9898=(gconst2*r20);
IkReal x9899=((1.0)*x9892);
IkReal x9900=((1.0)*x9893);
evalcond[0]=((-1.0)*r02*x9892);
evalcond[1]=((((-1.0)*x9898*x9899))+((x9892*x9897)));
evalcond[2]=((((-1.0)*x9894*x9899))+((x9892*x9896)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x9893*x9898))+(((-1.0)*x9897*x9900)));
evalcond[4]=((((-1.0)*cj2*sj1*x9895))+(((-1.0)*cj1*sj2*x9895))+(((-1.0)*x9896*x9900))+((x9893*x9894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9901=((-1.0)*r20);
IkReal x9902=((-1.0)*px);
CheckValue<IkReal> x9904 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9901),IKFAST_ATAN2_MAGTHRESH);
if(!x9904.valid){
continue;
}
IkReal x9903=((-1.0)*(x9904.value));
sj5=gconst1;
cj5=gconst2;
j5=x9903;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9902);
rxp1_1=(px*r21);
rxp1_2=(r11*x9902);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9903;
IkReal gconst1=r21;
IkReal gconst2=x9901;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9905=((-1.0)*r20);
IkReal x9906=((-1.0)*px);
CheckValue<IkReal> x9908 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9905),IKFAST_ATAN2_MAGTHRESH);
if(!x9908.valid){
continue;
}
IkReal x9907=((-1.0)*(x9908.value));
sj5=gconst1;
cj5=gconst2;
j5=x9907;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9906);
rxp1_1=(px*r21);
rxp1_2=(r11*x9906);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9907;
IkReal gconst1=r21;
IkReal gconst2=x9905;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9909=((-1.0)*r20);
IkReal x9910=((-1.0)*px);
CheckValue<IkReal> x9912 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9909),IKFAST_ATAN2_MAGTHRESH);
if(!x9912.valid){
continue;
}
IkReal x9911=((-1.0)*(x9912.value));
sj5=gconst1;
cj5=gconst2;
j5=x9911;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9910);
rxp1_1=(px*r21);
rxp1_2=(r11*x9910);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9911;
IkReal gconst1=r21;
IkReal gconst2=x9909;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9915=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9915.valid){
continue;
}
IkReal x9913=x9915.value;
IkReal x9914=(sj0*x9913);
cj4array[0]=(((cj1*sj2*x9914))+((cj2*sj1*x9914)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9916=IKsin(j4);
IkReal x9917=IKcos(j4);
IkReal x9918=((1.0)*gconst2);
IkReal x9919=(gconst1*r21);
evalcond[0]=(r02*x9916);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9917)));
evalcond[2]=(((x9916*x9919))+(((-1.0)*r20*x9916*x9918)));
evalcond[3]=((((-1.0)*r10*x9916*x9918))+((gconst1*r11*x9916)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x9917*x9918))+((x9917*x9919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9921=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9921.valid){
continue;
}
IkReal x9920=x9921.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9920))+((cj1*cj2*x9920)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9922=IKsin(j4);
IkReal x9923=IKcos(j4);
IkReal x9924=((1.0)*sj0);
IkReal x9925=(gconst1*x9922);
IkReal x9926=((1.0)*x9923);
IkReal x9927=((1.0)*gconst2*x9922);
evalcond[0]=(r02*x9922);
evalcond[1]=((((-1.0)*r02*x9926))+(((-1.0)*x9924)));
evalcond[2]=((((-1.0)*r20*x9927))+((r21*x9925)));
evalcond[3]=((((-1.0)*r10*x9927))+((r11*x9925)));
evalcond[4]=((((-1.0)*gconst2*r10*x9926))+(((-1.0)*cj2*sj1*x9924))+(((-1.0)*cj1*sj2*x9924))+((gconst1*r11*x9923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9928=IKPowWithIntegerCheck(r02,-1);
if(!x9928.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9928.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9929=IKsin(j4);
IkReal x9930=IKcos(j4);
IkReal x9931=(gconst1*r21);
IkReal x9932=((1.0)*sj0);
IkReal x9933=(gconst1*r11);
IkReal x9934=((1.0)*gconst2*r10);
IkReal x9935=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9929);
evalcond[1]=(((x9929*x9931))+(((-1.0)*x9929*x9935)));
evalcond[2]=(((x9929*x9933))+(((-1.0)*x9929*x9934)));
evalcond[3]=((((-1.0)*x9930*x9935))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9930*x9931)));
evalcond[4]=((((-1.0)*cj2*sj1*x9932))+(((-1.0)*cj1*sj2*x9932))+(((-1.0)*x9930*x9934))+((x9930*x9933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9937=IKPowWithIntegerCheck(r02,-1);
if(!x9937.valid){
continue;
}
IkReal x9936=x9937.value;
CheckValue<IkReal> x9938=IKPowWithIntegerCheck(cj3,-1);
if(!x9938.valid){
continue;
}
if( IKabs((x9936*(x9938.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9936)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9936*(x9938.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x9936))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9936*(x9938.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x9936));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9939=IKsin(j4);
IkReal x9940=IKcos(j4);
IkReal x9941=(gconst2*r10);
IkReal x9942=(gconst1*r11);
IkReal x9943=(sj1*sj2);
IkReal x9944=(gconst2*r20);
IkReal x9945=(cj2*sj1);
IkReal x9946=((1.0)*sj0);
IkReal x9947=(gconst1*r20);
IkReal x9948=(gconst2*r11);
IkReal x9949=(gconst1*r21);
IkReal x9950=((1.0)*cj0);
IkReal x9951=(gconst1*r10);
IkReal x9952=(cj1*sj2);
IkReal x9953=(gconst2*r21);
IkReal x9954=(sj3*x9940);
IkReal x9955=((1.0)*cj1*cj2);
IkReal x9956=(cj3*x9940);
IkReal x9957=(r02*x9939);
IkReal x9958=((1.0)*x9939);
evalcond[0]=((((-1.0)*r02*x9940))+(((-1.0)*x9946)));
evalcond[1]=((((-1.0)*x9944*x9958))+((x9939*x9949)));
evalcond[2]=(cj0+(((-1.0)*x9941*x9958))+((x9939*x9942)));
evalcond[3]=(((cj0*x9943))+((cj3*x9957))+(((-1.0)*cj1*cj2*x9950)));
evalcond[4]=((((-1.0)*x9945*x9950))+(((-1.0)*x9950*x9952))+(((-1.0)*sj3*x9957)));
evalcond[5]=(((sj3*x9953))+((sj3*x9947))+(((-1.0)*x9944*x9956))+((x9949*x9956))+x9945+x9952);
evalcond[6]=(((cj3*x9953))+(((-1.0)*x9949*x9954))+((cj3*x9947))+(((-1.0)*x9955))+((x9944*x9954))+x9943);
evalcond[7]=((((-1.0)*x9941*x9956))+((sj3*x9951))+(((-1.0)*cj1*cj2*x9946))+((sj3*x9948))+((sj0*x9943))+((x9942*x9956)));
evalcond[8]=((((-1.0)*x9946*x9952))+(((-1.0)*x9942*x9954))+((cj3*x9951))+(((-1.0)*x9945*x9946))+((cj3*x9948))+((x9941*x9954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9959=((1.0)*sj3);
IkReal x9960=((1.0)*gconst2);
CheckValue<IkReal> x9961=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x9960))),-1);
if(!x9961.valid){
continue;
}
CheckValue<IkReal> x9962=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9960))),-1);
if(!x9962.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9961.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9962.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9959))+(((-1.0)*gconst2*r21*x9959)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9961.value)))+IKsqr(((x9962.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9959))+(((-1.0)*gconst2*r21*x9959))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9961.value)), ((x9962.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9959))+(((-1.0)*gconst2*r21*x9959))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9963=IKsin(j4);
IkReal x9964=IKcos(j4);
IkReal x9965=(gconst2*r10);
IkReal x9966=(gconst1*r11);
IkReal x9967=(sj1*sj2);
IkReal x9968=(gconst2*r20);
IkReal x9969=(cj2*sj1);
IkReal x9970=((1.0)*sj0);
IkReal x9971=(gconst1*r20);
IkReal x9972=(gconst2*r11);
IkReal x9973=(gconst1*r21);
IkReal x9974=((1.0)*cj0);
IkReal x9975=(gconst1*r10);
IkReal x9976=(cj1*sj2);
IkReal x9977=(gconst2*r21);
IkReal x9978=(sj3*x9964);
IkReal x9979=((1.0)*cj1*cj2);
IkReal x9980=(cj3*x9964);
IkReal x9981=(r02*x9963);
IkReal x9982=((1.0)*x9963);
evalcond[0]=((((-1.0)*r02*x9964))+(((-1.0)*x9970)));
evalcond[1]=((((-1.0)*x9968*x9982))+((x9963*x9973)));
evalcond[2]=(cj0+((x9963*x9966))+(((-1.0)*x9965*x9982)));
evalcond[3]=(((cj3*x9981))+(((-1.0)*cj1*cj2*x9974))+((cj0*x9967)));
evalcond[4]=((((-1.0)*x9969*x9974))+(((-1.0)*sj3*x9981))+(((-1.0)*x9974*x9976)));
evalcond[5]=((((-1.0)*x9968*x9980))+((sj3*x9971))+((sj3*x9977))+((x9973*x9980))+x9976+x9969);
evalcond[6]=((((-1.0)*x9973*x9978))+((cj3*x9977))+((cj3*x9971))+x9967+(((-1.0)*x9979))+((x9968*x9978)));
evalcond[7]=(((sj0*x9967))+((sj3*x9972))+((sj3*x9975))+(((-1.0)*cj1*cj2*x9970))+((x9966*x9980))+(((-1.0)*x9965*x9980)));
evalcond[8]=((((-1.0)*x9969*x9970))+((cj3*x9975))+((cj3*x9972))+(((-1.0)*x9970*x9976))+(((-1.0)*x9966*x9978))+((x9965*x9978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9983=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9983.valid){
continue;
}
CheckValue<IkReal> x9984=IKPowWithIntegerCheck(r02,-1);
if(!x9984.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9983.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x9984.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9983.value)))+IKsqr(((-1.0)*sj0*(x9984.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9983.value)), ((-1.0)*sj0*(x9984.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9985=IKsin(j4);
IkReal x9986=IKcos(j4);
IkReal x9987=(gconst2*r10);
IkReal x9988=(gconst1*r11);
IkReal x9989=(sj1*sj2);
IkReal x9990=(gconst2*r20);
IkReal x9991=(cj2*sj1);
IkReal x9992=((1.0)*sj0);
IkReal x9993=(gconst1*r20);
IkReal x9994=(gconst2*r11);
IkReal x9995=(gconst1*r21);
IkReal x9996=((1.0)*cj0);
IkReal x9997=(gconst1*r10);
IkReal x9998=(cj1*sj2);
IkReal x9999=(gconst2*r21);
IkReal x10000=(sj3*x9986);
IkReal x10001=((1.0)*cj1*cj2);
IkReal x10002=(cj3*x9986);
IkReal x10003=(r02*x9985);
IkReal x10004=((1.0)*x9985);
evalcond[0]=((((-1.0)*r02*x9986))+(((-1.0)*x9992)));
evalcond[1]=((((-1.0)*x10004*x9990))+((x9985*x9995)));
evalcond[2]=((((-1.0)*x10004*x9987))+cj0+((x9985*x9988)));
evalcond[3]=(((cj0*x9989))+((cj3*x10003))+(((-1.0)*cj1*cj2*x9996)));
evalcond[4]=((((-1.0)*x9991*x9996))+(((-1.0)*x9996*x9998))+(((-1.0)*sj3*x10003)));
evalcond[5]=(((x10002*x9995))+((sj3*x9999))+((sj3*x9993))+x9998+x9991+(((-1.0)*x10002*x9990)));
evalcond[6]=(((cj3*x9993))+((cj3*x9999))+((x10000*x9990))+(((-1.0)*x10000*x9995))+x9989+(((-1.0)*x10001)));
evalcond[7]=(((x10002*x9988))+((sj0*x9989))+((sj3*x9994))+((sj3*x9997))+(((-1.0)*cj1*cj2*x9992))+(((-1.0)*x10002*x9987)));
evalcond[8]=(((cj3*x9994))+((cj3*x9997))+(((-1.0)*x9991*x9992))+(((-1.0)*x9992*x9998))+((x10000*x9987))+(((-1.0)*x10000*x9988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10005=gconst1*gconst1;
IkReal x10006=r21*r21;
IkReal x10007=gconst2*gconst2;
IkReal x10008=r20*r20;
IkReal x10009=(gconst2*r20);
IkReal x10010=(cj1*cj2);
IkReal x10011=(sj1*sj2);
IkReal x10012=(gconst1*r21);
IkReal x10013=(cj3*gconst2);
IkReal x10014=(cj3*r20);
CheckValue<IkReal> x10015=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x10009*x10012))+((sj3*x10005*x10006))+((sj3*x10007*x10008)))),-1);
if(!x10015.valid){
continue;
}
CheckValue<IkReal> x10016 = IKatan2WithCheck(IkReal((((r22*x10011))+((gconst1*r22*x10014))+((r21*r22*x10013))+(((-1.0)*r22*x10010)))),IkReal((((x10009*x10010))+(((-1.0)*x10010*x10012))+((x10011*x10012))+((r21*x10005*x10014))+((gconst1*x10006*x10013))+(((-1.0)*x10009*x10011))+(((-1.0)*gconst1*x10008*x10013))+(((-1.0)*r21*x10007*x10014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10015.value)))+(x10016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10017=IKsin(j4);
IkReal x10018=IKcos(j4);
IkReal x10019=(cj3*gconst1);
IkReal x10020=(gconst1*r01);
IkReal x10021=(gconst1*r11);
IkReal x10022=(sj1*sj2);
IkReal x10023=(cj3*gconst2);
IkReal x10024=(gconst1*sj3);
IkReal x10025=(gconst2*sj3);
IkReal x10026=((1.0)*sj0);
IkReal x10027=(cj1*sj2);
IkReal x10028=((1.0)*x10018);
IkReal x10029=((1.0)*x10017);
IkReal x10030=((1.0)*cj1*cj2);
IkReal x10031=(cj3*x10017);
IkReal x10032=((1.0)*cj2*sj1);
IkReal x10033=(x10018*x10025);
evalcond[0]=((((-1.0)*gconst2*r20*x10029))+(((-1.0)*r22*x10028))+((gconst1*r21*x10017)));
evalcond[1]=((((-1.0)*r12*x10028))+(((-1.0)*gconst2*r10*x10029))+cj0+((x10017*x10021)));
evalcond[2]=((((-1.0)*r02*x10028))+((x10017*x10020))+(((-1.0)*gconst2*r00*x10029))+(((-1.0)*x10026)));
evalcond[3]=(((cj2*sj1))+((r21*x10025))+((r20*x10024))+x10027+((r22*x10031))+((r21*x10018*x10019))+(((-1.0)*r20*x10023*x10028)));
evalcond[4]=(((r21*x10023))+(((-1.0)*r22*sj3*x10029))+((r20*x10033))+x10022+(((-1.0)*x10030))+(((-1.0)*r21*x10024*x10028))+((r20*x10019)));
evalcond[5]=(((cj0*x10022))+((r01*x10018*x10019))+(((-1.0)*cj0*x10030))+((r01*x10025))+((r00*x10024))+(((-1.0)*r00*x10023*x10028))+((r02*x10031)));
evalcond[6]=(((sj0*x10022))+((r10*x10024))+((r11*x10025))+(((-1.0)*cj1*cj2*x10026))+(((-1.0)*r10*x10023*x10028))+((r11*x10018*x10019))+((r12*x10031)));
evalcond[7]=((((-1.0)*cj0*x10032))+(((-1.0)*sj3*x10020*x10028))+(((-1.0)*r02*sj3*x10029))+((r01*x10023))+((r00*x10033))+((r00*x10019))+(((-1.0)*cj0*x10027)));
evalcond[8]=(((r10*x10033))+((r10*x10019))+(((-1.0)*sj3*x10021*x10028))+(((-1.0)*cj2*sj1*x10026))+(((-1.0)*r12*sj3*x10029))+((r11*x10023))+(((-1.0)*x10026*x10027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10034=((1.0)*gconst2);
CheckValue<IkReal> x10035 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst1*r21*sj0))+(((-1.0)*r20*sj0*x10034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10035.valid){
continue;
}
CheckValue<IkReal> x10036=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10034)))),-1);
if(!x10036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10035.value)+(((1.5707963267949)*(x10036.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10037=IKsin(j4);
IkReal x10038=IKcos(j4);
IkReal x10039=(cj3*gconst1);
IkReal x10040=(gconst1*r01);
IkReal x10041=(gconst1*r11);
IkReal x10042=(sj1*sj2);
IkReal x10043=(cj3*gconst2);
IkReal x10044=(gconst1*sj3);
IkReal x10045=(gconst2*sj3);
IkReal x10046=((1.0)*sj0);
IkReal x10047=(cj1*sj2);
IkReal x10048=((1.0)*x10038);
IkReal x10049=((1.0)*x10037);
IkReal x10050=((1.0)*cj1*cj2);
IkReal x10051=(cj3*x10037);
IkReal x10052=((1.0)*cj2*sj1);
IkReal x10053=(x10038*x10045);
evalcond[0]=(((gconst1*r21*x10037))+(((-1.0)*r22*x10048))+(((-1.0)*gconst2*r20*x10049)));
evalcond[1]=((((-1.0)*gconst2*r10*x10049))+(((-1.0)*r12*x10048))+cj0+((x10037*x10041)));
evalcond[2]=((((-1.0)*r02*x10048))+((x10037*x10040))+(((-1.0)*gconst2*r00*x10049))+(((-1.0)*x10046)));
evalcond[3]=(((cj2*sj1))+((r21*x10038*x10039))+((r21*x10045))+x10047+((r22*x10051))+(((-1.0)*r20*x10043*x10048))+((r20*x10044)));
evalcond[4]=(((r20*x10053))+((r21*x10043))+(((-1.0)*x10050))+(((-1.0)*r22*sj3*x10049))+((r20*x10039))+x10042+(((-1.0)*r21*x10044*x10048)));
evalcond[5]=(((r01*x10038*x10039))+(((-1.0)*cj0*x10050))+((r00*x10044))+((r02*x10051))+((r01*x10045))+(((-1.0)*r00*x10043*x10048))+((cj0*x10042)));
evalcond[6]=(((sj0*x10042))+((r10*x10044))+((r11*x10038*x10039))+(((-1.0)*r10*x10043*x10048))+(((-1.0)*cj1*cj2*x10046))+((r11*x10045))+((r12*x10051)));
evalcond[7]=((((-1.0)*cj0*x10052))+(((-1.0)*r02*sj3*x10049))+((r00*x10053))+((r01*x10043))+((r00*x10039))+(((-1.0)*cj0*x10047))+(((-1.0)*sj3*x10040*x10048)));
evalcond[8]=(((r10*x10053))+((r10*x10039))+(((-1.0)*cj2*sj1*x10046))+(((-1.0)*r12*sj3*x10049))+(((-1.0)*sj3*x10041*x10048))+((r11*x10043))+(((-1.0)*x10046*x10047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10054=((1.0)*gconst2);
CheckValue<IkReal> x10055 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10055.valid){
continue;
}
CheckValue<IkReal> x10056=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10054)))),-1);
if(!x10056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10055.value)+(((1.5707963267949)*(x10056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10057=IKsin(j4);
IkReal x10058=IKcos(j4);
IkReal x10059=(cj3*gconst1);
IkReal x10060=(gconst1*r01);
IkReal x10061=(gconst1*r11);
IkReal x10062=(sj1*sj2);
IkReal x10063=(cj3*gconst2);
IkReal x10064=(gconst1*sj3);
IkReal x10065=(gconst2*sj3);
IkReal x10066=((1.0)*sj0);
IkReal x10067=(cj1*sj2);
IkReal x10068=((1.0)*x10058);
IkReal x10069=((1.0)*x10057);
IkReal x10070=((1.0)*cj1*cj2);
IkReal x10071=(cj3*x10057);
IkReal x10072=((1.0)*cj2*sj1);
IkReal x10073=(x10058*x10065);
evalcond[0]=(((gconst1*r21*x10057))+(((-1.0)*r22*x10068))+(((-1.0)*gconst2*r20*x10069)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10069))+((x10057*x10061))+(((-1.0)*r12*x10068)));
evalcond[2]=((((-1.0)*x10066))+(((-1.0)*gconst2*r00*x10069))+((x10057*x10060))+(((-1.0)*r02*x10068)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x10063*x10068))+((r21*x10058*x10059))+((r20*x10064))+x10067+((r22*x10071))+((r21*x10065)));
evalcond[4]=((((-1.0)*r22*sj3*x10069))+((r20*x10059))+((r20*x10073))+(((-1.0)*x10070))+(((-1.0)*r21*x10064*x10068))+x10062+((r21*x10063)));
evalcond[5]=((((-1.0)*cj0*x10070))+((r00*x10064))+(((-1.0)*r00*x10063*x10068))+((r01*x10058*x10059))+((r01*x10065))+((r02*x10071))+((cj0*x10062)));
evalcond[6]=(((r10*x10064))+((r12*x10071))+((r11*x10058*x10059))+(((-1.0)*cj1*cj2*x10066))+((sj0*x10062))+(((-1.0)*r10*x10063*x10068))+((r11*x10065)));
evalcond[7]=((((-1.0)*cj0*x10072))+((r00*x10073))+((r00*x10059))+((r01*x10063))+(((-1.0)*cj0*x10067))+(((-1.0)*sj3*x10060*x10068))+(((-1.0)*r02*sj3*x10069)));
evalcond[8]=(((r10*x10073))+(((-1.0)*x10066*x10067))+(((-1.0)*sj3*x10061*x10068))+((r10*x10059))+(((-1.0)*r12*sj3*x10069))+(((-1.0)*cj2*sj1*x10066))+((r11*x10063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10074=((-1.0)*r21);
IkReal x10076 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10076)==0){
continue;
}
IkReal x10075=pow(x10076,-0.5);
CheckValue<IkReal> x10077 = IKatan2WithCheck(IkReal(x10074),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10077.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10077.value))));
IkReal gconst4=(x10074*x10075);
IkReal gconst5=((1.0)*r20*x10075);
CheckValue<IkReal> x10078 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10078.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10078.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10079=((-1.0)*r21);
CheckValue<IkReal> x10082 = IKatan2WithCheck(IkReal(x10079),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10082.valid){
continue;
}
IkReal x10080=((1.0)*(x10082.value));
IkReal x10081=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10080)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10080)));
IkReal gconst4=(x10079*x10081);
IkReal gconst5=((1.0)*r20*x10081);
IkReal x10083=r22*r22;
IkReal x10084=((1.0)*x10083);
CheckValue<IkReal> x10088=IKPowWithIntegerCheck(((-1.0)+x10083),-1);
if(!x10088.valid){
continue;
}
IkReal x10085=x10088.value;
if((((1.0)+(((-1.0)*x10084)))) < -0.00001)
continue;
IkReal x10086=IKsqrt(((1.0)+(((-1.0)*x10084))));
IkReal x10087=(cj0*x10085*x10086);
j4eval[0]=((IKabs(((((-1.0)*x10084*x10087))+x10087)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10089=((-1.0)*r21);
CheckValue<IkReal> x10092 = IKatan2WithCheck(IkReal(x10089),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10092.valid){
continue;
}
IkReal x10090=((1.0)*(x10092.value));
IkReal x10091=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10090)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10090)));
IkReal gconst4=(x10089*x10091);
IkReal gconst5=((1.0)*r20*x10091);
IkReal x10093=r22*r22;
IkReal x10094=((1.0)*x10093);
CheckValue<IkReal> x10098=IKPowWithIntegerCheck(((-1.0)+x10093),-1);
if(!x10098.valid){
continue;
}
IkReal x10095=x10098.value;
if((((1.0)+(((-1.0)*x10094)))) < -0.00001)
continue;
IkReal x10096=IKsqrt(((1.0)+(((-1.0)*x10094))));
IkReal x10097=(sj0*x10095*x10096);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10097+(((-1.0)*x10094*x10097))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10099=((-1.0)*r21);
CheckValue<IkReal> x10102 = IKatan2WithCheck(IkReal(x10099),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10102.valid){
continue;
}
IkReal x10100=((1.0)*(x10102.value));
IkReal x10101=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10100)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10100)));
IkReal gconst4=(x10099*x10101);
IkReal gconst5=((1.0)*r20*x10101);
IkReal x10103=r22*r22;
IkReal x10104=(r12*sj0);
IkReal x10105=(cj0*r02);
CheckValue<IkReal> x10109=IKPowWithIntegerCheck(((-1.0)+x10103),-1);
if(!x10109.valid){
continue;
}
IkReal x10106=x10109.value;
if((((1.0)+(((-1.0)*x10103)))) < -0.00001)
continue;
IkReal x10107=IKsqrt(((1.0)+(((-1.0)*x10103))));
IkReal x10108=(r22*x10106*x10107);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x10105))+(((-1.0)*x10104)))))+(IKabs((((x10104*x10108))+((x10105*x10108))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10110=((-1.0)*r21);
CheckValue<IkReal> x10113 = IKatan2WithCheck(IkReal(x10110),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10113.valid){
continue;
}
IkReal x10111=((1.0)*(x10113.value));
IkReal x10112=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10111)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10111)));
IkReal gconst4=(x10110*x10112);
IkReal gconst5=((1.0)*r20*x10112);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10114=((-1.0)*r21);
CheckValue<IkReal> x10117 = IKatan2WithCheck(IkReal(x10114),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10117.valid){
continue;
}
IkReal x10115=((1.0)*(x10117.value));
IkReal x10116=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10115)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10115)));
IkReal gconst4=(x10114*x10116);
IkReal gconst5=((1.0)*r20*x10116);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10118=((-1.0)*r21);
CheckValue<IkReal> x10121 = IKatan2WithCheck(IkReal(x10118),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10121.valid){
continue;
}
IkReal x10119=((1.0)*(x10121.value));
IkReal x10120=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10119)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10119)));
IkReal gconst4=(x10118*x10120);
IkReal gconst5=((1.0)*r20*x10120);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10122=((-1.0)*r21);
CheckValue<IkReal> x10125 = IKatan2WithCheck(IkReal(x10122),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10125.valid){
continue;
}
IkReal x10123=((1.0)*(x10125.value));
IkReal x10124=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10123)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10123)));
IkReal gconst4=(x10122*x10124);
IkReal gconst5=((1.0)*r20*x10124);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10126=((-1.0)*r21);
CheckValue<IkReal> x10129 = IKatan2WithCheck(IkReal(x10126),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10129.valid){
continue;
}
IkReal x10127=((1.0)*(x10129.value));
IkReal x10128=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10127)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10127)));
IkReal gconst4=(x10126*x10128);
IkReal gconst5=((1.0)*r20*x10128);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10130=((-1.0)*r21);
CheckValue<IkReal> x10133 = IKatan2WithCheck(IkReal(x10130),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10133.valid){
continue;
}
IkReal x10131=((1.0)*(x10133.value));
IkReal x10132=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10131)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10131)));
IkReal gconst4=(x10130*x10132);
IkReal gconst5=((1.0)*r20*x10132);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10134=(gconst5*r10);
IkReal x10135=(gconst4*r11);
CheckValue<IkReal> x10136 = IKatan2WithCheck(IkReal((x10134+(((-1.0)*x10135)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10136.valid){
continue;
}
CheckValue<IkReal> x10137=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10134*x10135))+(x10135*x10135)+(x10134*x10134))),-1);
if(!x10137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10136.value)+(((1.5707963267949)*(x10137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10138=IKsin(j4);
IkReal x10139=IKcos(j4);
IkReal x10140=(gconst4*r11);
IkReal x10141=((1.0)*cj1);
IkReal x10142=(gconst5*r10);
IkReal x10143=(gconst4*r01);
IkReal x10144=(gconst5*r00);
IkReal x10145=(gconst4*r21);
IkReal x10146=(gconst5*r20);
IkReal x10147=((1.0)*x10139);
IkReal x10148=((1.0)*x10138);
evalcond[0]=(((x10138*x10145))+(((-1.0)*x10146*x10148))+(((-1.0)*r22*x10147)));
evalcond[1]=(((x10138*x10143))+(((-1.0)*r02*x10147))+(((-1.0)*x10144*x10148)));
evalcond[2]=((((-1.0)*r12*x10148))+((x10139*x10142))+(((-1.0)*x10140*x10147)));
evalcond[3]=((1.0)+((x10138*x10140))+(((-1.0)*x10142*x10148))+(((-1.0)*r12*x10147)));
evalcond[4]=((((-1.0)*cj2*x10141))+((sj1*sj2))+(((-1.0)*x10145*x10147))+((x10139*x10146))+(((-1.0)*r22*x10148)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10143*x10147))+(((-1.0)*r02*x10148))+(((-1.0)*sj2*x10141))+((x10139*x10144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10149=((1.0)*gconst5);
CheckValue<IkReal> x10150 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10149))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10150.valid){
continue;
}
CheckValue<IkReal> x10151=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10149)))),-1);
if(!x10151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10150.value)+(((1.5707963267949)*(x10151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10152=IKsin(j4);
IkReal x10153=IKcos(j4);
IkReal x10154=(gconst4*r11);
IkReal x10155=((1.0)*cj1);
IkReal x10156=(gconst5*r10);
IkReal x10157=(gconst4*r01);
IkReal x10158=(gconst5*r00);
IkReal x10159=(gconst4*r21);
IkReal x10160=(gconst5*r20);
IkReal x10161=((1.0)*x10153);
IkReal x10162=((1.0)*x10152);
evalcond[0]=((((-1.0)*r22*x10161))+(((-1.0)*x10160*x10162))+((x10152*x10159)));
evalcond[1]=((((-1.0)*x10158*x10162))+((x10152*x10157))+(((-1.0)*r02*x10161)));
evalcond[2]=(((x10153*x10156))+(((-1.0)*r12*x10162))+(((-1.0)*x10154*x10161)));
evalcond[3]=((1.0)+(((-1.0)*x10156*x10162))+(((-1.0)*r12*x10161))+((x10152*x10154)));
evalcond[4]=((((-1.0)*cj2*x10155))+(((-1.0)*r22*x10162))+((sj1*sj2))+((x10153*x10160))+(((-1.0)*x10159*x10161)));
evalcond[5]=(((x10153*x10158))+(((-1.0)*cj2*sj1))+(((-1.0)*x10157*x10161))+(((-1.0)*sj2*x10155))+(((-1.0)*r02*x10162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10163 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10163.valid){
continue;
}
CheckValue<IkReal> x10164=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10163.value)+(((1.5707963267949)*(x10164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10165=IKsin(j4);
IkReal x10166=IKcos(j4);
IkReal x10167=(gconst4*r11);
IkReal x10168=((1.0)*cj1);
IkReal x10169=(gconst5*r10);
IkReal x10170=(gconst4*r01);
IkReal x10171=(gconst5*r00);
IkReal x10172=(gconst4*r21);
IkReal x10173=(gconst5*r20);
IkReal x10174=((1.0)*x10166);
IkReal x10175=((1.0)*x10165);
evalcond[0]=((((-1.0)*r22*x10174))+((x10165*x10172))+(((-1.0)*x10173*x10175)));
evalcond[1]=(((x10165*x10170))+(((-1.0)*x10171*x10175))+(((-1.0)*r02*x10174)));
evalcond[2]=(((x10166*x10169))+(((-1.0)*r12*x10175))+(((-1.0)*x10167*x10174)));
evalcond[3]=((1.0)+(((-1.0)*x10169*x10175))+((x10165*x10167))+(((-1.0)*r12*x10174)));
evalcond[4]=((((-1.0)*r22*x10175))+(((-1.0)*x10172*x10174))+((x10166*x10173))+((sj1*sj2))+(((-1.0)*cj2*x10168)));
evalcond[5]=((((-1.0)*sj2*x10168))+((x10166*x10171))+(((-1.0)*cj2*sj1))+(((-1.0)*x10170*x10174))+(((-1.0)*r02*x10175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10176=((-1.0)*r21);
CheckValue<IkReal> x10179 = IKatan2WithCheck(IkReal(x10176),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10179.valid){
continue;
}
IkReal x10177=((1.0)*(x10179.value));
IkReal x10178=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10177)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10177)));
IkReal gconst4=(x10176*x10178);
IkReal gconst5=((1.0)*r20*x10178);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10180=((-1.0)*r21);
CheckValue<IkReal> x10183 = IKatan2WithCheck(IkReal(x10180),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10183.valid){
continue;
}
IkReal x10181=((1.0)*(x10183.value));
IkReal x10182=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10181)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10181)));
IkReal gconst4=(x10180*x10182);
IkReal gconst5=((1.0)*r20*x10182);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10184=((-1.0)*r21);
CheckValue<IkReal> x10187 = IKatan2WithCheck(IkReal(x10184),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10187.valid){
continue;
}
IkReal x10185=((1.0)*(x10187.value));
IkReal x10186=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10185)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10185)));
IkReal gconst4=(x10184*x10186);
IkReal gconst5=((1.0)*r20*x10186);
IkReal x10188=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10192=IKPowWithIntegerCheck(x10188,-1);
if(!x10192.valid){
continue;
}
IkReal x10189=x10192.value;
IkReal x10190=((1.0)*x10189);
IkReal x10191=((((-1.0)*x10190*(r10*r10)*(r20*r20)))+(((-1.0)*x10190*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10189)));
j4eval[0]=x10191;
j4eval[1]=r12;
j4eval[2]=x10188;
j4eval[3]=IKsign(x10191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10193=(gconst5*r10);
IkReal x10194=(gconst4*r11);
CheckValue<IkReal> x10195=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10193*x10193)))+(((2.0)*x10193*x10194))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10194*x10194))))),-1);
if(!x10195.valid){
continue;
}
CheckValue<IkReal> x10196 = IKatan2WithCheck(IkReal((x10194+(((-1.0)*x10193)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10195.value)))+(x10196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10197=IKcos(j4);
IkReal x10198=IKsin(j4);
IkReal x10199=(gconst4*r11);
IkReal x10200=(gconst5*r10);
IkReal x10201=((1.0)*cj1);
IkReal x10202=(gconst5*r00);
IkReal x10203=(gconst5*r20);
IkReal x10204=((1.0)*x10197);
IkReal x10205=(gconst4*x10197);
IkReal x10206=((1.0)*x10198);
IkReal x10207=(gconst4*x10198);
evalcond[0]=((((-1.0)*x10200*x10204))+((x10197*x10199))+((r12*x10198)));
evalcond[1]=((((-1.0)*r22*x10204))+((r21*x10207))+(((-1.0)*x10203*x10206)));
evalcond[2]=((((-1.0)*r02*x10204))+((r01*x10207))+(((-1.0)*x10202*x10206)));
evalcond[3]=((1.0)+(((-1.0)*x10200*x10206))+((x10198*x10199))+(((-1.0)*r12*x10204)));
evalcond[4]=(((r21*x10205))+((r22*x10198))+(((-1.0)*cj2*x10201))+((sj1*sj2))+(((-1.0)*x10203*x10204)));
evalcond[5]=(((r02*x10198))+(((-1.0)*cj2*sj1))+((r01*x10205))+(((-1.0)*sj2*x10201))+(((-1.0)*x10202*x10204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10208=((1.0)*gconst5);
CheckValue<IkReal> x10209=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10208)))),-1);
if(!x10209.valid){
continue;
}
CheckValue<IkReal> x10210 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10208))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10209.value)))+(x10210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10211=IKcos(j4);
IkReal x10212=IKsin(j4);
IkReal x10213=(gconst4*r11);
IkReal x10214=(gconst5*r10);
IkReal x10215=((1.0)*cj1);
IkReal x10216=(gconst5*r00);
IkReal x10217=(gconst5*r20);
IkReal x10218=((1.0)*x10211);
IkReal x10219=(gconst4*x10211);
IkReal x10220=((1.0)*x10212);
IkReal x10221=(gconst4*x10212);
evalcond[0]=(((r12*x10212))+(((-1.0)*x10214*x10218))+((x10211*x10213)));
evalcond[1]=((((-1.0)*r22*x10218))+(((-1.0)*x10217*x10220))+((r21*x10221)));
evalcond[2]=((((-1.0)*x10216*x10220))+(((-1.0)*r02*x10218))+((r01*x10221)));
evalcond[3]=((1.0)+(((-1.0)*x10214*x10220))+(((-1.0)*r12*x10218))+((x10212*x10213)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x10215))+(((-1.0)*x10217*x10218))+((r21*x10219))+((r22*x10212)));
evalcond[5]=((((-1.0)*sj2*x10215))+((r01*x10219))+(((-1.0)*cj2*sj1))+(((-1.0)*x10216*x10218))+((r02*x10212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10222 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10222.valid){
continue;
}
CheckValue<IkReal> x10223=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10222.value)+(((1.5707963267949)*(x10223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10224=IKcos(j4);
IkReal x10225=IKsin(j4);
IkReal x10226=(gconst4*r11);
IkReal x10227=(gconst5*r10);
IkReal x10228=((1.0)*cj1);
IkReal x10229=(gconst5*r00);
IkReal x10230=(gconst5*r20);
IkReal x10231=((1.0)*x10224);
IkReal x10232=(gconst4*x10224);
IkReal x10233=((1.0)*x10225);
IkReal x10234=(gconst4*x10225);
evalcond[0]=(((r12*x10225))+(((-1.0)*x10227*x10231))+((x10224*x10226)));
evalcond[1]=((((-1.0)*x10230*x10233))+((r21*x10234))+(((-1.0)*r22*x10231)));
evalcond[2]=(((r01*x10234))+(((-1.0)*x10229*x10233))+(((-1.0)*r02*x10231)));
evalcond[3]=((1.0)+(((-1.0)*x10227*x10233))+((x10225*x10226))+(((-1.0)*r12*x10231)));
evalcond[4]=((((-1.0)*x10230*x10231))+((r22*x10225))+(((-1.0)*cj2*x10228))+((sj1*sj2))+((r21*x10232)));
evalcond[5]=(((r02*x10225))+(((-1.0)*cj2*sj1))+((r01*x10232))+(((-1.0)*sj2*x10228))+(((-1.0)*x10229*x10231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10235=((-1.0)*r21);
CheckValue<IkReal> x10238 = IKatan2WithCheck(IkReal(x10235),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10238.valid){
continue;
}
IkReal x10236=((1.0)*(x10238.value));
IkReal x10237=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10236)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10236)));
IkReal gconst4=(x10235*x10237);
IkReal gconst5=((1.0)*r20*x10237);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10239=((-1.0)*r21);
CheckValue<IkReal> x10242 = IKatan2WithCheck(IkReal(x10239),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10242.valid){
continue;
}
IkReal x10240=((1.0)*(x10242.value));
IkReal x10241=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10240)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10240)));
IkReal gconst4=(x10239*x10241);
IkReal gconst5=((1.0)*r20*x10241);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10243=((-1.0)*r21);
CheckValue<IkReal> x10246 = IKatan2WithCheck(IkReal(x10243),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10246.valid){
continue;
}
IkReal x10244=((1.0)*(x10246.value));
IkReal x10245=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10244)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10244)));
IkReal gconst4=(x10243*x10245);
IkReal gconst5=((1.0)*r20*x10245);
IkReal x10247=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10251=IKPowWithIntegerCheck(x10247,-1);
if(!x10251.valid){
continue;
}
IkReal x10248=x10251.value;
IkReal x10249=((1.0)*x10248);
IkReal x10250=((((-2.0)*r10*r11*r20*r21*x10248))+(((-1.0)*(r12*r12)))+(((-1.0)*x10249*(r10*r10)*(r20*r20)))+(((-1.0)*x10249*(r11*r11)*(r21*r21))));
j4eval[0]=x10250;
j4eval[1]=r12;
j4eval[2]=x10247;
j4eval[3]=IKsign(x10250);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10252=(gconst5*r10);
IkReal x10253=(gconst4*r11);
CheckValue<IkReal> x10254=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x10253*x10253)))+(((2.0)*x10252*x10253))+(((-1.0)*(x10252*x10252))))),-1);
if(!x10254.valid){
continue;
}
CheckValue<IkReal> x10255 = IKatan2WithCheck(IkReal((x10253+(((-1.0)*x10252)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10254.value)))+(x10255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10256=IKcos(j4);
IkReal x10257=IKsin(j4);
IkReal x10258=(gconst4*r11);
IkReal x10259=(gconst5*r10);
IkReal x10260=(gconst5*r00);
IkReal x10261=(gconst5*r20);
IkReal x10262=((1.0)*x10256);
IkReal x10263=(gconst4*x10256);
IkReal x10264=((1.0)*x10257);
IkReal x10265=(gconst4*x10257);
evalcond[0]=(((r12*x10257))+((x10256*x10258))+(((-1.0)*x10259*x10262)));
evalcond[1]=((((-1.0)*r22*x10262))+(((-1.0)*x10261*x10264))+((r21*x10265)));
evalcond[2]=((((-1.0)*x10260*x10264))+((r01*x10265))+(((-1.0)*r02*x10262)));
evalcond[3]=((1.0)+((x10257*x10258))+(((-1.0)*r12*x10262))+(((-1.0)*x10259*x10264)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10261*x10262))+((r22*x10257))+((cj1*sj2))+((r21*x10263)));
evalcond[5]=((((-1.0)*x10260*x10262))+((r02*x10257))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x10263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10266=((1.0)*gconst5);
CheckValue<IkReal> x10267=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10266)))),-1);
if(!x10267.valid){
continue;
}
CheckValue<IkReal> x10268 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10266))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10267.value)))+(x10268.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10269=IKcos(j4);
IkReal x10270=IKsin(j4);
IkReal x10271=(gconst4*r11);
IkReal x10272=(gconst5*r10);
IkReal x10273=(gconst5*r00);
IkReal x10274=(gconst5*r20);
IkReal x10275=((1.0)*x10269);
IkReal x10276=(gconst4*x10269);
IkReal x10277=((1.0)*x10270);
IkReal x10278=(gconst4*x10270);
evalcond[0]=(((r12*x10270))+(((-1.0)*x10272*x10275))+((x10269*x10271)));
evalcond[1]=((((-1.0)*x10274*x10277))+(((-1.0)*r22*x10275))+((r21*x10278)));
evalcond[2]=(((r01*x10278))+(((-1.0)*x10273*x10277))+(((-1.0)*r02*x10275)));
evalcond[3]=((1.0)+((x10270*x10271))+(((-1.0)*x10272*x10277))+(((-1.0)*r12*x10275)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10274*x10275))+((cj1*sj2))+((r21*x10276))+((r22*x10270)));
evalcond[5]=(((r01*x10276))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10273*x10275))+((r02*x10270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10279 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10279.valid){
continue;
}
CheckValue<IkReal> x10280=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10279.value)+(((1.5707963267949)*(x10280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10281=IKcos(j4);
IkReal x10282=IKsin(j4);
IkReal x10283=(gconst4*r11);
IkReal x10284=(gconst5*r10);
IkReal x10285=(gconst5*r00);
IkReal x10286=(gconst5*r20);
IkReal x10287=((1.0)*x10281);
IkReal x10288=(gconst4*x10281);
IkReal x10289=((1.0)*x10282);
IkReal x10290=(gconst4*x10282);
evalcond[0]=(((r12*x10282))+(((-1.0)*x10284*x10287))+((x10281*x10283)));
evalcond[1]=((((-1.0)*r22*x10287))+((r21*x10290))+(((-1.0)*x10286*x10289)));
evalcond[2]=((((-1.0)*r02*x10287))+(((-1.0)*x10285*x10289))+((r01*x10290)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10287))+(((-1.0)*x10284*x10289))+((x10282*x10283)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10282))+((r21*x10288))+(((-1.0)*x10286*x10287)));
evalcond[5]=(((r01*x10288))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10282))+(((-1.0)*x10285*x10287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10291=((-1.0)*r21);
CheckValue<IkReal> x10294 = IKatan2WithCheck(IkReal(x10291),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10294.valid){
continue;
}
IkReal x10292=((1.0)*(x10294.value));
IkReal x10293=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10292)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10292)));
IkReal gconst4=(x10291*x10293);
IkReal gconst5=((1.0)*r20*x10293);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10295=((-1.0)*r21);
CheckValue<IkReal> x10298 = IKatan2WithCheck(IkReal(x10295),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10298.valid){
continue;
}
IkReal x10296=((1.0)*(x10298.value));
IkReal x10297=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10296)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10296)));
IkReal gconst4=(x10295*x10297);
IkReal gconst5=((1.0)*r20*x10297);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10299=((-1.0)*r21);
CheckValue<IkReal> x10302 = IKatan2WithCheck(IkReal(x10299),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10302.valid){
continue;
}
IkReal x10300=((1.0)*(x10302.value));
IkReal x10301=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10300)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10300)));
IkReal gconst4=(x10299*x10301);
IkReal gconst5=((1.0)*r20*x10301);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10303=(gconst5*r10);
IkReal x10304=(gconst4*r11);
CheckValue<IkReal> x10305 = IKatan2WithCheck(IkReal(((((-1.0)*x10304))+x10303)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10305.valid){
continue;
}
CheckValue<IkReal> x10306=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10303*x10303)+(((-2.0)*x10303*x10304))+(x10304*x10304))),-1);
if(!x10306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10305.value)+(((1.5707963267949)*(x10306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10307=IKsin(j4);
IkReal x10308=IKcos(j4);
IkReal x10309=(gconst4*r11);
IkReal x10310=(gconst5*r10);
IkReal x10311=(gconst4*r01);
IkReal x10312=(gconst5*r00);
IkReal x10313=(gconst4*r21);
IkReal x10314=(gconst5*r20);
IkReal x10315=((1.0)*x10308);
IkReal x10316=((1.0)*x10307);
evalcond[0]=((((-1.0)*x10314*x10316))+(((-1.0)*r22*x10315))+((x10307*x10313)));
evalcond[1]=((((-1.0)*x10312*x10316))+(((-1.0)*r02*x10315))+((x10307*x10311)));
evalcond[2]=((((-1.0)*r12*x10316))+(((-1.0)*x10309*x10315))+((x10308*x10310)));
evalcond[3]=((1.0)+(((-1.0)*x10310*x10316))+((x10307*x10309))+(((-1.0)*r12*x10315)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10313*x10315))+((cj1*sj2))+(((-1.0)*r22*x10316))+((x10308*x10314)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10316))+(((-1.0)*x10311*x10315))+((x10308*x10312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10317=((1.0)*gconst5);
CheckValue<IkReal> x10318 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10317))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10318.valid){
continue;
}
CheckValue<IkReal> x10319=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10317)))),-1);
if(!x10319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10318.value)+(((1.5707963267949)*(x10319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10320=IKsin(j4);
IkReal x10321=IKcos(j4);
IkReal x10322=(gconst4*r11);
IkReal x10323=(gconst5*r10);
IkReal x10324=(gconst4*r01);
IkReal x10325=(gconst5*r00);
IkReal x10326=(gconst4*r21);
IkReal x10327=(gconst5*r20);
IkReal x10328=((1.0)*x10321);
IkReal x10329=((1.0)*x10320);
evalcond[0]=(((x10320*x10326))+(((-1.0)*r22*x10328))+(((-1.0)*x10327*x10329)));
evalcond[1]=((((-1.0)*r02*x10328))+((x10320*x10324))+(((-1.0)*x10325*x10329)));
evalcond[2]=((((-1.0)*r12*x10329))+((x10321*x10323))+(((-1.0)*x10322*x10328)));
evalcond[3]=((1.0)+((x10320*x10322))+(((-1.0)*r12*x10328))+(((-1.0)*x10323*x10329)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10321*x10327))+(((-1.0)*r22*x10329))+(((-1.0)*x10326*x10328)));
evalcond[5]=((((-1.0)*r02*x10329))+(((-1.0)*x10324*x10328))+((x10321*x10325))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10330 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10330.valid){
continue;
}
CheckValue<IkReal> x10331=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10330.value)+(((1.5707963267949)*(x10331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10332=IKsin(j4);
IkReal x10333=IKcos(j4);
IkReal x10334=(gconst4*r11);
IkReal x10335=(gconst5*r10);
IkReal x10336=(gconst4*r01);
IkReal x10337=(gconst5*r00);
IkReal x10338=(gconst4*r21);
IkReal x10339=(gconst5*r20);
IkReal x10340=((1.0)*x10333);
IkReal x10341=((1.0)*x10332);
evalcond[0]=((((-1.0)*x10339*x10341))+(((-1.0)*r22*x10340))+((x10332*x10338)));
evalcond[1]=((((-1.0)*x10337*x10341))+(((-1.0)*r02*x10340))+((x10332*x10336)));
evalcond[2]=((((-1.0)*r12*x10341))+(((-1.0)*x10334*x10340))+((x10333*x10335)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10340))+(((-1.0)*x10335*x10341))+((x10332*x10334)));
evalcond[4]=((((-1.0)*x10338*x10340))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10341))+((x10333*x10339)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10341))+(((-1.0)*x10336*x10340))+((x10333*x10337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10342=gconst4*gconst4;
IkReal x10343=gconst5*gconst5;
IkReal x10344=(r10*r21);
IkReal x10345=((1.0)*cj3);
IkReal x10346=(r11*r21);
IkReal x10347=(r11*r20);
IkReal x10348=(r22*sj3);
IkReal x10349=(gconst4*r10);
IkReal x10350=((1.0)*sj3);
IkReal x10351=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10352=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10342*x10345*x10346))+(((-1.0)*r10*r20*x10343*x10345))+(((-1.0)*r12*r22*x10345))+((x10347*x10351))+((x10344*x10351)))),-1);
if(!x10352.valid){
continue;
}
CheckValue<IkReal> x10353 = IKatan2WithCheck(IkReal((((gconst5*r11*x10348))+((x10348*x10349)))),IkReal((((sj3*x10342*x10344))+(((-1.0)*gconst5*r20*x10349*x10350))+(((-1.0)*x10343*x10347*x10350))+((gconst4*gconst5*sj3*x10346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10352.value)))+(x10353.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10354=IKsin(j4);
IkReal x10355=IKcos(j4);
IkReal x10356=(sj1*sj2);
IkReal x10357=(gconst5*sj3);
IkReal x10358=(cj3*gconst5);
IkReal x10359=(gconst4*r11);
IkReal x10360=((1.0)*cj1);
IkReal x10361=(gconst4*r01);
IkReal x10362=(cj2*sj1);
IkReal x10363=(gconst4*r21);
IkReal x10364=(gconst4*sj3);
IkReal x10365=(cj3*gconst4);
IkReal x10366=(cj2*x10360);
IkReal x10367=((1.0)*x10355);
IkReal x10368=((1.0)*x10354);
IkReal x10369=(cj3*x10354);
IkReal x10370=(cj3*x10355);
evalcond[0]=(((x10354*x10363))+(((-1.0)*gconst5*r20*x10368))+(((-1.0)*r22*x10367)));
evalcond[1]=(((x10354*x10361))+(((-1.0)*r02*x10367))+(((-1.0)*gconst5*r00*x10368)));
evalcond[2]=((1.0)+((x10354*x10359))+(((-1.0)*gconst5*r10*x10368))+(((-1.0)*r12*x10367)));
evalcond[3]=(((r10*x10364))+((x10359*x10370))+((r11*x10357))+(((-1.0)*r10*x10358*x10367))+((r12*x10369)));
evalcond[4]=((((-1.0)*r12*sj3*x10368))+((r10*x10355*x10357))+(((-1.0)*sj3*x10359*x10367))+((r10*x10365))+((r11*x10358)));
evalcond[5]=(((r21*x10357))+((r22*x10369))+((x10363*x10370))+((cj1*sj2))+(((-1.0)*r20*x10358*x10367))+x10362+((r20*x10364)));
evalcond[6]=(((r00*x10364))+(((-1.0)*r00*x10358*x10367))+((r01*x10357))+((r02*x10369))+x10356+(((-1.0)*x10366))+((x10361*x10370)));
evalcond[7]=(((r21*x10358))+(((-1.0)*r22*sj3*x10368))+((r20*x10355*x10357))+(((-1.0)*sj3*x10363*x10367))+x10356+((r20*x10365))+(((-1.0)*x10366)));
evalcond[8]=(((r00*x10365))+(((-1.0)*r02*sj3*x10368))+((r01*x10358))+((r00*x10355*x10357))+(((-1.0)*x10362))+(((-1.0)*sj3*x10361*x10367))+(((-1.0)*sj2*x10360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10371=((1.0)*gconst5);
CheckValue<IkReal> x10372=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10371)))),-1);
if(!x10372.valid){
continue;
}
CheckValue<IkReal> x10373 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10371)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10372.value)))+(x10373.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10374=IKsin(j4);
IkReal x10375=IKcos(j4);
IkReal x10376=(sj1*sj2);
IkReal x10377=(gconst5*sj3);
IkReal x10378=(cj3*gconst5);
IkReal x10379=(gconst4*r11);
IkReal x10380=((1.0)*cj1);
IkReal x10381=(gconst4*r01);
IkReal x10382=(cj2*sj1);
IkReal x10383=(gconst4*r21);
IkReal x10384=(gconst4*sj3);
IkReal x10385=(cj3*gconst4);
IkReal x10386=(cj2*x10380);
IkReal x10387=((1.0)*x10375);
IkReal x10388=((1.0)*x10374);
IkReal x10389=(cj3*x10374);
IkReal x10390=(cj3*x10375);
evalcond[0]=((((-1.0)*gconst5*r20*x10388))+(((-1.0)*r22*x10387))+((x10374*x10383)));
evalcond[1]=((((-1.0)*r02*x10387))+((x10374*x10381))+(((-1.0)*gconst5*r00*x10388)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10388))+(((-1.0)*r12*x10387))+((x10374*x10379)));
evalcond[3]=(((r12*x10389))+(((-1.0)*r10*x10378*x10387))+((x10379*x10390))+((r10*x10384))+((r11*x10377)));
evalcond[4]=((((-1.0)*sj3*x10379*x10387))+((r10*x10385))+(((-1.0)*r12*sj3*x10388))+((r11*x10378))+((r10*x10375*x10377)));
evalcond[5]=(((cj1*sj2))+((r22*x10389))+x10382+((x10383*x10390))+(((-1.0)*r20*x10378*x10387))+((r20*x10384))+((r21*x10377)));
evalcond[6]=(((r01*x10377))+(((-1.0)*x10386))+((x10381*x10390))+((r02*x10389))+x10376+(((-1.0)*r00*x10378*x10387))+((r00*x10384)));
evalcond[7]=(((r20*x10375*x10377))+(((-1.0)*x10386))+(((-1.0)*r22*sj3*x10388))+(((-1.0)*sj3*x10383*x10387))+x10376+((r20*x10385))+((r21*x10378)));
evalcond[8]=(((r01*x10378))+((r00*x10375*x10377))+(((-1.0)*x10382))+(((-1.0)*r02*sj3*x10388))+(((-1.0)*sj2*x10380))+(((-1.0)*sj3*x10381*x10387))+((r00*x10385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10391 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10391.valid){
continue;
}
CheckValue<IkReal> x10392=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10391.value)+(((1.5707963267949)*(x10392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10393=IKsin(j4);
IkReal x10394=IKcos(j4);
IkReal x10395=(sj1*sj2);
IkReal x10396=(gconst5*sj3);
IkReal x10397=(cj3*gconst5);
IkReal x10398=(gconst4*r11);
IkReal x10399=((1.0)*cj1);
IkReal x10400=(gconst4*r01);
IkReal x10401=(cj2*sj1);
IkReal x10402=(gconst4*r21);
IkReal x10403=(gconst4*sj3);
IkReal x10404=(cj3*gconst4);
IkReal x10405=(cj2*x10399);
IkReal x10406=((1.0)*x10394);
IkReal x10407=((1.0)*x10393);
IkReal x10408=(cj3*x10393);
IkReal x10409=(cj3*x10394);
evalcond[0]=((((-1.0)*gconst5*r20*x10407))+(((-1.0)*r22*x10406))+((x10393*x10402)));
evalcond[1]=(((x10393*x10400))+(((-1.0)*r02*x10406))+(((-1.0)*gconst5*r00*x10407)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10407))+((x10393*x10398))+(((-1.0)*r12*x10406)));
evalcond[3]=((((-1.0)*r10*x10397*x10406))+((r11*x10396))+((x10398*x10409))+((r12*x10408))+((r10*x10403)));
evalcond[4]=(((r11*x10397))+((r10*x10394*x10396))+(((-1.0)*r12*sj3*x10407))+((r10*x10404))+(((-1.0)*sj3*x10398*x10406)));
evalcond[5]=(((r22*x10408))+((r21*x10396))+((cj1*sj2))+((r20*x10403))+x10401+((x10402*x10409))+(((-1.0)*r20*x10397*x10406)));
evalcond[6]=(((r01*x10396))+((x10400*x10409))+((r00*x10403))+((r02*x10408))+(((-1.0)*x10405))+x10395+(((-1.0)*r00*x10397*x10406)));
evalcond[7]=((((-1.0)*r22*sj3*x10407))+((r21*x10397))+(((-1.0)*x10405))+x10395+(((-1.0)*sj3*x10402*x10406))+((r20*x10404))+((r20*x10394*x10396)));
evalcond[8]=(((r01*x10397))+((r00*x10404))+((r00*x10394*x10396))+(((-1.0)*sj2*x10399))+(((-1.0)*sj3*x10400*x10406))+(((-1.0)*x10401))+(((-1.0)*r02*sj3*x10407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10410=((-1.0)*r21);
CheckValue<IkReal> x10413 = IKatan2WithCheck(IkReal(x10410),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10413.valid){
continue;
}
IkReal x10411=((1.0)*(x10413.value));
IkReal x10412=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10411)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10411)));
IkReal gconst4=(x10410*x10412);
IkReal gconst5=((1.0)*r20*x10412);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10414=((-1.0)*r21);
CheckValue<IkReal> x10417 = IKatan2WithCheck(IkReal(x10414),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10417.valid){
continue;
}
IkReal x10415=((1.0)*(x10417.value));
IkReal x10416=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10415)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10415)));
IkReal gconst4=(x10414*x10416);
IkReal gconst5=((1.0)*r20*x10416);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10418=((-1.0)*r21);
CheckValue<IkReal> x10421 = IKatan2WithCheck(IkReal(x10418),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10421.valid){
continue;
}
IkReal x10419=((1.0)*(x10421.value));
IkReal x10420=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10419)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10419)));
IkReal gconst4=(x10418*x10420);
IkReal gconst5=((1.0)*r20*x10420);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10422=((-1.0)*r21);
CheckValue<IkReal> x10425 = IKatan2WithCheck(IkReal(x10422),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10425.valid){
continue;
}
IkReal x10423=((1.0)*(x10425.value));
IkReal x10424=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10423)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10423)));
IkReal gconst4=(x10422*x10424);
IkReal gconst5=((1.0)*r20*x10424);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10426=((-1.0)*r21);
CheckValue<IkReal> x10429 = IKatan2WithCheck(IkReal(x10426),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10429.valid){
continue;
}
IkReal x10427=((1.0)*(x10429.value));
IkReal x10428=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10427)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10427)));
IkReal gconst4=(x10426*x10428);
IkReal gconst5=((1.0)*r20*x10428);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10430=((-1.0)*r21);
CheckValue<IkReal> x10433 = IKatan2WithCheck(IkReal(x10430),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10433.valid){
continue;
}
IkReal x10431=((1.0)*(x10433.value));
IkReal x10432=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10431)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10431)));
IkReal gconst4=(x10430*x10432);
IkReal gconst5=((1.0)*r20*x10432);
IkReal x10434=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10438=IKPowWithIntegerCheck(x10434,-1);
if(!x10438.valid){
continue;
}
IkReal x10435=x10438.value;
IkReal x10436=((1.0)*x10435);
IkReal x10437=((((-1.0)*x10436*(r11*r11)*(r21*r21)))+(((-1.0)*x10436*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10435))+(((-1.0)*(r12*r12))));
j4eval[0]=x10437;
j4eval[1]=r12;
j4eval[2]=x10434;
j4eval[3]=IKsign(x10437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10439=(gconst5*r10);
IkReal x10440=(gconst4*r11);
CheckValue<IkReal> x10441 = IKatan2WithCheck(IkReal(((((-1.0)*x10440))+x10439)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10441.valid){
continue;
}
CheckValue<IkReal> x10442=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10440*x10440)))+(((-1.0)*(x10439*x10439)))+(((-1.0)*(r12*r12)))+(((2.0)*x10439*x10440)))),-1);
if(!x10442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10441.value)+(((1.5707963267949)*(x10442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10443=IKsin(j4);
IkReal x10444=IKcos(j4);
IkReal x10445=(gconst4*r11);
IkReal x10446=(gconst5*r10);
IkReal x10447=(gconst4*r01);
IkReal x10448=(gconst5*r00);
IkReal x10449=(gconst4*r21);
IkReal x10450=(gconst5*r20);
IkReal x10451=((1.0)*x10444);
IkReal x10452=((1.0)*x10443);
evalcond[0]=(((x10443*x10449))+(((-1.0)*r22*x10451))+(((-1.0)*x10450*x10452)));
evalcond[1]=(((x10443*x10447))+(((-1.0)*r02*x10451))+(((-1.0)*x10448*x10452)));
evalcond[2]=((((-1.0)*x10445*x10451))+((x10444*x10446))+(((-1.0)*r12*x10452)));
evalcond[3]=((-1.0)+((x10443*x10445))+(((-1.0)*r12*x10451))+(((-1.0)*x10446*x10452)));
evalcond[4]=((((-1.0)*x10447*x10451))+((cj2*sj1))+((cj1*sj2))+((x10444*x10448))+(((-1.0)*r02*x10452)));
evalcond[5]=((((-1.0)*x10449*x10451))+(((-1.0)*r22*x10452))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10444*x10450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10453=((1.0)*gconst5);
CheckValue<IkReal> x10454=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10453))+(((-1.0)*gconst4*r20)))),-1);
if(!x10454.valid){
continue;
}
CheckValue<IkReal> x10455 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10454.value)))+(x10455.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10456=IKsin(j4);
IkReal x10457=IKcos(j4);
IkReal x10458=(gconst4*r11);
IkReal x10459=(gconst5*r10);
IkReal x10460=(gconst4*r01);
IkReal x10461=(gconst5*r00);
IkReal x10462=(gconst4*r21);
IkReal x10463=(gconst5*r20);
IkReal x10464=((1.0)*x10457);
IkReal x10465=((1.0)*x10456);
evalcond[0]=((((-1.0)*r22*x10464))+(((-1.0)*x10463*x10465))+((x10456*x10462)));
evalcond[1]=((((-1.0)*x10461*x10465))+(((-1.0)*r02*x10464))+((x10456*x10460)));
evalcond[2]=((((-1.0)*x10458*x10464))+((x10457*x10459))+(((-1.0)*r12*x10465)));
evalcond[3]=((-1.0)+(((-1.0)*x10459*x10465))+((x10456*x10458))+(((-1.0)*r12*x10464)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10465))+((cj1*sj2))+(((-1.0)*x10460*x10464))+((x10457*x10461)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10465))+(((-1.0)*x10462*x10464))+((x10457*x10463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10466=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10466.valid){
continue;
}
CheckValue<IkReal> x10467 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10466.value)))+(x10467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10468=IKsin(j4);
IkReal x10469=IKcos(j4);
IkReal x10470=(gconst4*r11);
IkReal x10471=(gconst5*r10);
IkReal x10472=(gconst4*r01);
IkReal x10473=(gconst5*r00);
IkReal x10474=(gconst4*r21);
IkReal x10475=(gconst5*r20);
IkReal x10476=((1.0)*x10469);
IkReal x10477=((1.0)*x10468);
evalcond[0]=((((-1.0)*r22*x10476))+(((-1.0)*x10475*x10477))+((x10468*x10474)));
evalcond[1]=((((-1.0)*r02*x10476))+(((-1.0)*x10473*x10477))+((x10468*x10472)));
evalcond[2]=((((-1.0)*x10470*x10476))+(((-1.0)*r12*x10477))+((x10469*x10471)));
evalcond[3]=((-1.0)+((x10468*x10470))+(((-1.0)*x10471*x10477))+(((-1.0)*r12*x10476)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10477))+((cj1*sj2))+(((-1.0)*x10472*x10476))+((x10469*x10473)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10477))+(((-1.0)*x10474*x10476))+((x10469*x10475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10478=((-1.0)*r21);
CheckValue<IkReal> x10481 = IKatan2WithCheck(IkReal(x10478),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10481.valid){
continue;
}
IkReal x10479=((1.0)*(x10481.value));
IkReal x10480=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10479)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10479)));
IkReal gconst4=(x10478*x10480);
IkReal gconst5=((1.0)*r20*x10480);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10482=((-1.0)*r21);
CheckValue<IkReal> x10485 = IKatan2WithCheck(IkReal(x10482),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10485.valid){
continue;
}
IkReal x10483=((1.0)*(x10485.value));
IkReal x10484=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10483)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10483)));
IkReal gconst4=(x10482*x10484);
IkReal gconst5=((1.0)*r20*x10484);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10486=((-1.0)*r21);
CheckValue<IkReal> x10489 = IKatan2WithCheck(IkReal(x10486),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10489.valid){
continue;
}
IkReal x10487=((1.0)*(x10489.value));
IkReal x10488=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10487)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10487)));
IkReal gconst4=(x10486*x10488);
IkReal gconst5=((1.0)*r20*x10488);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10490=(gconst5*r10);
IkReal x10491=(gconst4*r11);
CheckValue<IkReal> x10492=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10490*x10491))+(x10491*x10491)+(x10490*x10490))),-1);
if(!x10492.valid){
continue;
}
CheckValue<IkReal> x10493 = IKatan2WithCheck(IkReal(((((-1.0)*x10490))+x10491)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10492.value)))+(x10493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10494=IKcos(j4);
IkReal x10495=IKsin(j4);
IkReal x10496=(gconst4*r11);
IkReal x10497=(gconst5*r10);
IkReal x10498=(gconst5*r00);
IkReal x10499=(gconst5*r20);
IkReal x10500=((1.0)*x10494);
IkReal x10501=(gconst4*x10494);
IkReal x10502=((1.0)*x10495);
IkReal x10503=(gconst4*x10495);
evalcond[0]=(((r12*x10495))+(((-1.0)*x10497*x10500))+((x10494*x10496)));
evalcond[1]=((((-1.0)*r22*x10500))+((r21*x10503))+(((-1.0)*x10499*x10502)));
evalcond[2]=((((-1.0)*x10498*x10502))+((r01*x10503))+(((-1.0)*r02*x10500)));
evalcond[3]=((-1.0)+(((-1.0)*x10497*x10502))+(((-1.0)*r12*x10500))+((x10495*x10496)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10498*x10500))+((r01*x10501))+((cj1*sj2))+((r02*x10495)));
evalcond[5]=(((r22*x10495))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10501))+(((-1.0)*x10499*x10500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10504=((1.0)*gconst5);
CheckValue<IkReal> x10505 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10504))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10505.valid){
continue;
}
CheckValue<IkReal> x10506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10504))+(((-1.0)*gconst4*r20)))),-1);
if(!x10506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10505.value)+(((1.5707963267949)*(x10506.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10507=IKcos(j4);
IkReal x10508=IKsin(j4);
IkReal x10509=(gconst4*r11);
IkReal x10510=(gconst5*r10);
IkReal x10511=(gconst5*r00);
IkReal x10512=(gconst5*r20);
IkReal x10513=((1.0)*x10507);
IkReal x10514=(gconst4*x10507);
IkReal x10515=((1.0)*x10508);
IkReal x10516=(gconst4*x10508);
evalcond[0]=((((-1.0)*x10510*x10513))+((x10507*x10509))+((r12*x10508)));
evalcond[1]=((((-1.0)*r22*x10513))+(((-1.0)*x10512*x10515))+((r21*x10516)));
evalcond[2]=((((-1.0)*x10511*x10515))+(((-1.0)*r02*x10513))+((r01*x10516)));
evalcond[3]=((-1.0)+((x10508*x10509))+(((-1.0)*x10510*x10515))+(((-1.0)*r12*x10513)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10511*x10513))+((cj1*sj2))+((r01*x10514))+((r02*x10508)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10512*x10513))+((r22*x10508))+((r21*x10514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10517=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10517.valid){
continue;
}
CheckValue<IkReal> x10518 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10517.value)))+(x10518.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10519=IKcos(j4);
IkReal x10520=IKsin(j4);
IkReal x10521=(gconst4*r11);
IkReal x10522=(gconst5*r10);
IkReal x10523=(gconst5*r00);
IkReal x10524=(gconst5*r20);
IkReal x10525=((1.0)*x10519);
IkReal x10526=(gconst4*x10519);
IkReal x10527=((1.0)*x10520);
IkReal x10528=(gconst4*x10520);
evalcond[0]=(((x10519*x10521))+((r12*x10520))+(((-1.0)*x10522*x10525)));
evalcond[1]=((((-1.0)*r22*x10525))+((r21*x10528))+(((-1.0)*x10524*x10527)));
evalcond[2]=((((-1.0)*x10523*x10527))+(((-1.0)*r02*x10525))+((r01*x10528)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10525))+((x10520*x10521))+(((-1.0)*x10522*x10527)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10523*x10525))+((r02*x10520))+((cj1*sj2))+((r01*x10526)));
evalcond[5]=(((r22*x10520))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10526))+(((-1.0)*x10524*x10525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10529=((-1.0)*r21);
CheckValue<IkReal> x10532 = IKatan2WithCheck(IkReal(x10529),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10532.valid){
continue;
}
IkReal x10530=((1.0)*(x10532.value));
IkReal x10531=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10530)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10530)));
IkReal gconst4=(x10529*x10531);
IkReal gconst5=((1.0)*r20*x10531);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10533=((-1.0)*r21);
CheckValue<IkReal> x10536 = IKatan2WithCheck(IkReal(x10533),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10536.valid){
continue;
}
IkReal x10534=((1.0)*(x10536.value));
IkReal x10535=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10534)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10534)));
IkReal gconst4=(x10533*x10535);
IkReal gconst5=((1.0)*r20*x10535);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10537=((-1.0)*r21);
CheckValue<IkReal> x10540 = IKatan2WithCheck(IkReal(x10537),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10540.valid){
continue;
}
IkReal x10538=((1.0)*(x10540.value));
IkReal x10539=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10538)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10538)));
IkReal gconst4=(x10537*x10539);
IkReal gconst5=((1.0)*r20*x10539);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10541=(gconst5*r10);
IkReal x10542=(gconst4*r11);
CheckValue<IkReal> x10543 = IKatan2WithCheck(IkReal(((((-1.0)*x10541))+x10542)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10543.valid){
continue;
}
CheckValue<IkReal> x10544=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10541*x10541)+(x10542*x10542)+(((-2.0)*x10541*x10542)))),-1);
if(!x10544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10543.value)+(((1.5707963267949)*(x10544.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10545=IKcos(j4);
IkReal x10546=IKsin(j4);
IkReal x10547=(gconst5*r10);
IkReal x10548=(gconst5*r00);
IkReal x10549=(gconst5*r20);
IkReal x10550=((1.0)*x10545);
IkReal x10551=(gconst4*x10546);
IkReal x10552=(gconst4*x10545);
IkReal x10553=((1.0)*x10546);
evalcond[0]=((((-1.0)*x10547*x10550))+((r12*x10546))+((r11*x10552)));
evalcond[1]=(((r21*x10551))+(((-1.0)*r22*x10550))+(((-1.0)*x10549*x10553)));
evalcond[2]=((((-1.0)*r02*x10550))+((r01*x10551))+(((-1.0)*x10548*x10553)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10550))+(((-1.0)*x10547*x10553))+((r11*x10551)));
evalcond[4]=(((cj2*sj1))+((r22*x10546))+((cj1*sj2))+((r21*x10552))+(((-1.0)*x10549*x10550)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x10546))+((cj1*cj2))+((r01*x10552))+(((-1.0)*x10548*x10550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10554=((1.0)*gconst5);
CheckValue<IkReal> x10555=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10554))+(((-1.0)*gconst4*r20)))),-1);
if(!x10555.valid){
continue;
}
CheckValue<IkReal> x10556 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10555.value)))+(x10556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10557=IKcos(j4);
IkReal x10558=IKsin(j4);
IkReal x10559=(gconst5*r10);
IkReal x10560=(gconst5*r00);
IkReal x10561=(gconst5*r20);
IkReal x10562=((1.0)*x10557);
IkReal x10563=(gconst4*x10558);
IkReal x10564=(gconst4*x10557);
IkReal x10565=((1.0)*x10558);
evalcond[0]=((((-1.0)*x10559*x10562))+((r12*x10558))+((r11*x10564)));
evalcond[1]=((((-1.0)*x10561*x10565))+(((-1.0)*r22*x10562))+((r21*x10563)));
evalcond[2]=(((r01*x10563))+(((-1.0)*x10560*x10565))+(((-1.0)*r02*x10562)));
evalcond[3]=((-1.0)+(((-1.0)*x10559*x10565))+(((-1.0)*r12*x10562))+((r11*x10563)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10561*x10562))+((r22*x10558))+((cj1*sj2))+((r21*x10564)));
evalcond[5]=(((r01*x10564))+((r02*x10558))+(((-1.0)*x10560*x10562))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10566=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10566.valid){
continue;
}
CheckValue<IkReal> x10567 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10566.value)))+(x10567.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10568=IKcos(j4);
IkReal x10569=IKsin(j4);
IkReal x10570=(gconst5*r10);
IkReal x10571=(gconst5*r00);
IkReal x10572=(gconst5*r20);
IkReal x10573=((1.0)*x10568);
IkReal x10574=(gconst4*x10569);
IkReal x10575=(gconst4*x10568);
IkReal x10576=((1.0)*x10569);
evalcond[0]=(((r11*x10575))+((r12*x10569))+(((-1.0)*x10570*x10573)));
evalcond[1]=((((-1.0)*r22*x10573))+((r21*x10574))+(((-1.0)*x10572*x10576)));
evalcond[2]=((((-1.0)*x10571*x10576))+((r01*x10574))+(((-1.0)*r02*x10573)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10573))+((r11*x10574))+(((-1.0)*x10570*x10576)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10575))+((r22*x10569))+(((-1.0)*x10572*x10573)));
evalcond[5]=((((-1.0)*x10571*x10573))+((r01*x10575))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x10569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10577=((-1.0)*r21);
CheckValue<IkReal> x10580 = IKatan2WithCheck(IkReal(x10577),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10580.valid){
continue;
}
IkReal x10578=((1.0)*(x10580.value));
IkReal x10579=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10578)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10578)));
IkReal gconst4=(x10577*x10579);
IkReal gconst5=((1.0)*r20*x10579);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10581=((-1.0)*r21);
CheckValue<IkReal> x10584 = IKatan2WithCheck(IkReal(x10581),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10584.valid){
continue;
}
IkReal x10582=((1.0)*(x10584.value));
IkReal x10583=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10582)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10582)));
IkReal gconst4=(x10581*x10583);
IkReal gconst5=((1.0)*r20*x10583);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10585=((-1.0)*r21);
CheckValue<IkReal> x10588 = IKatan2WithCheck(IkReal(x10585),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10588.valid){
continue;
}
IkReal x10586=((1.0)*(x10588.value));
IkReal x10587=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10586)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10586)));
IkReal gconst4=(x10585*x10587);
IkReal gconst5=((1.0)*r20*x10587);
IkReal x10589=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10593=IKPowWithIntegerCheck(x10589,-1);
if(!x10593.valid){
continue;
}
IkReal x10590=x10593.value;
IkReal x10591=((1.0)*x10590);
IkReal x10592=((((-1.0)*x10591*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10590))+(((-1.0)*x10591*(r11*r11)*(r21*r21))));
j4eval[0]=x10592;
j4eval[1]=r12;
j4eval[2]=x10589;
j4eval[3]=IKsign(x10592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10594=(gconst5*r10);
IkReal x10595=(gconst4*r11);
CheckValue<IkReal> x10596 = IKatan2WithCheck(IkReal(((((-1.0)*x10595))+x10594)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10596.valid){
continue;
}
CheckValue<IkReal> x10597=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10594*x10594)))+(((2.0)*x10594*x10595))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10595*x10595))))),-1);
if(!x10597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10596.value)+(((1.5707963267949)*(x10597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10598=IKsin(j4);
IkReal x10599=IKcos(j4);
IkReal x10600=(gconst4*r11);
IkReal x10601=(gconst5*r10);
IkReal x10602=(gconst5*r00);
IkReal x10603=(gconst5*r20);
IkReal x10604=((1.0)*x10599);
IkReal x10605=(gconst4*x10598);
IkReal x10606=((1.0)*x10598);
evalcond[0]=(((r21*x10605))+(((-1.0)*r22*x10604))+(((-1.0)*x10603*x10606)));
evalcond[1]=(((r01*x10605))+(((-1.0)*r02*x10604))+(((-1.0)*x10602*x10606)));
evalcond[2]=((((-1.0)*x10600*x10604))+(((-1.0)*r12*x10606))+((x10599*x10601)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10604))+((x10598*x10600))+(((-1.0)*x10601*x10606)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10604))+((x10599*x10603))+(((-1.0)*r22*x10606)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10599*x10602))+((cj1*cj2))+(((-1.0)*r02*x10606))+(((-1.0)*gconst4*r01*x10604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10607=((1.0)*gconst5);
CheckValue<IkReal> x10608 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10608.valid){
continue;
}
CheckValue<IkReal> x10609=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10607))+(((-1.0)*gconst4*r20)))),-1);
if(!x10609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10608.value)+(((1.5707963267949)*(x10609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10610=IKsin(j4);
IkReal x10611=IKcos(j4);
IkReal x10612=(gconst4*r11);
IkReal x10613=(gconst5*r10);
IkReal x10614=(gconst5*r00);
IkReal x10615=(gconst5*r20);
IkReal x10616=((1.0)*x10611);
IkReal x10617=(gconst4*x10610);
IkReal x10618=((1.0)*x10610);
evalcond[0]=((((-1.0)*x10615*x10618))+(((-1.0)*r22*x10616))+((r21*x10617)));
evalcond[1]=((((-1.0)*x10614*x10618))+(((-1.0)*r02*x10616))+((r01*x10617)));
evalcond[2]=(((x10611*x10613))+(((-1.0)*r12*x10618))+(((-1.0)*x10612*x10616)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10616))+((x10610*x10612))+(((-1.0)*x10613*x10618)));
evalcond[4]=(((cj2*sj1))+((x10611*x10615))+((cj1*sj2))+(((-1.0)*r22*x10618))+(((-1.0)*gconst4*r21*x10616)));
evalcond[5]=(((x10611*x10614))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x10618))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10619=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10619.valid){
continue;
}
CheckValue<IkReal> x10620 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10619.value)))+(x10620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10621=IKsin(j4);
IkReal x10622=IKcos(j4);
IkReal x10623=(gconst4*r11);
IkReal x10624=(gconst5*r10);
IkReal x10625=(gconst5*r00);
IkReal x10626=(gconst5*r20);
IkReal x10627=((1.0)*x10622);
IkReal x10628=(gconst4*x10621);
IkReal x10629=((1.0)*x10621);
evalcond[0]=(((r21*x10628))+(((-1.0)*x10626*x10629))+(((-1.0)*r22*x10627)));
evalcond[1]=((((-1.0)*r02*x10627))+(((-1.0)*x10625*x10629))+((r01*x10628)));
evalcond[2]=(((x10622*x10624))+(((-1.0)*x10623*x10627))+(((-1.0)*r12*x10629)));
evalcond[3]=((-1.0)+(((-1.0)*x10624*x10629))+(((-1.0)*r12*x10627))+((x10621*x10623)));
evalcond[4]=(((x10622*x10626))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10629))+(((-1.0)*gconst4*r21*x10627)));
evalcond[5]=(((x10622*x10625))+(((-1.0)*r02*x10629))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10627))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10630=((-1.0)*r21);
IkReal x10631=((-1.0)*px);
CheckValue<IkReal> x10633 = IKatan2WithCheck(IkReal(x10630),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10633.valid){
continue;
}
IkReal x10632=((1.0)*(x10633.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10632)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10631);
rxp1_1=(px*r21);
rxp1_2=(r11*x10631);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10632)));
IkReal gconst4=x10630;
IkReal gconst5=((1.0)*r20);
IkReal x10634=((1.0)*cj3);
IkReal x10635=(r10*r20);
IkReal x10636=(r11*r21);
j4eval[0]=((((-1.0)*x10636))+(((-1.0)*x10635)));
j4eval[1]=((((-1.0)*x10634*x10636))+(((-1.0)*x10634*x10635)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10637=((-1.0)*r21);
IkReal x10638=((-1.0)*px);
CheckValue<IkReal> x10640 = IKatan2WithCheck(IkReal(x10637),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10640.valid){
continue;
}
IkReal x10639=((1.0)*(x10640.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10639)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10638);
rxp1_1=(px*r21);
rxp1_2=(r11*x10638);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10639)));
IkReal gconst4=x10637;
IkReal gconst5=((1.0)*r20);
IkReal x10641=((1.0)*r11*r21);
IkReal x10642=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10642))+(((-1.0)*x10641)));
j4eval[1]=(((sj3*x10641))+((sj3*x10642)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10643=((-1.0)*r21);
IkReal x10644=((-1.0)*px);
CheckValue<IkReal> x10646 = IKatan2WithCheck(IkReal(x10643),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10646.valid){
continue;
}
IkReal x10645=((1.0)*(x10646.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10645)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10644);
rxp1_1=(px*r21);
rxp1_2=(r11*x10644);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10645)));
IkReal gconst4=x10643;
IkReal gconst5=((1.0)*r20);
IkReal x10647=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r21*x10647))+(((-1.0)*r10*r20*x10647)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10648=((1.0)*r10);
CheckValue<IkReal> x10649=IKPowWithIntegerCheck(cj3,-1);
if(!x10649.valid){
continue;
}
CheckValue<IkReal> x10650=IKPowWithIntegerCheck(r02,-1);
if(!x10650.valid){
continue;
}
CheckValue<IkReal> x10651=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst5*x10648))+((cj3*gconst4*r11))),-1);
if(!x10651.valid){
continue;
}
if( IKabs(((x10649.value)*(x10650.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10651.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10648)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10649.value)*(x10650.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10651.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10648))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10649.value)*(x10650.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10651.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10648))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10652=IKsin(j4);
IkReal x10653=IKcos(j4);
IkReal x10654=(cj2*sj1);
IkReal x10655=(cj1*sj2);
IkReal x10656=(gconst5*sj3);
IkReal x10657=(gconst4*r11);
IkReal x10658=(sj1*sj2);
IkReal x10659=((1.0)*gconst5);
IkReal x10660=(cj1*cj2);
IkReal x10661=(gconst4*r21);
IkReal x10662=(cj3*gconst4);
IkReal x10663=(gconst4*sj3);
IkReal x10664=(cj3*gconst5);
IkReal x10665=(r20*x10653);
IkReal x10666=(r10*x10653);
IkReal x10667=(cj3*x10653);
IkReal x10668=(r02*x10652);
IkReal x10669=(x10655+x10654);
IkReal x10670=((1.0)*sj3*x10653);
evalcond[0]=((-1.0)*r02*x10653);
evalcond[1]=((((-1.0)*r20*x10652*x10659))+((x10652*x10661)));
evalcond[2]=((((-1.0)*x10658))+((cj3*x10668))+x10660);
evalcond[3]=((((-1.0)*sj3*x10668))+x10669);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10652*x10659))+((x10652*x10657)));
evalcond[5]=(((r10*x10663))+((x10657*x10667))+((r11*x10656))+(((-1.0)*cj3*x10659*x10666)));
evalcond[6]=(((r10*x10662))+(((-1.0)*x10657*x10670))+((x10656*x10666))+((r11*x10664)));
evalcond[7]=(((x10661*x10667))+((r20*x10663))+((r21*x10656))+x10669+(((-1.0)*cj3*x10659*x10665)));
evalcond[8]=((((-1.0)*x10661*x10670))+((r20*x10662))+(((-1.0)*x10660))+x10658+((x10656*x10665))+((r21*x10664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10671=((1.0)*gconst5);
IkReal x10672=(gconst4*r11);
CheckValue<IkReal> x10673=IKPowWithIntegerCheck(((((-1.0)*r10*x10671))+x10672),-1);
if(!x10673.valid){
continue;
}
CheckValue<IkReal> x10674=IKPowWithIntegerCheck(((((-1.0)*sj3*x10672))+((gconst5*r10*sj3))),-1);
if(!x10674.valid){
continue;
}
if( IKabs(x10673.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10674.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10671)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10673.value)+IKsqr(((x10674.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10671))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10673.value, ((x10674.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10671))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10675=IKsin(j4);
IkReal x10676=IKcos(j4);
IkReal x10677=(cj2*sj1);
IkReal x10678=(cj1*sj2);
IkReal x10679=(gconst5*sj3);
IkReal x10680=(gconst4*r11);
IkReal x10681=(sj1*sj2);
IkReal x10682=((1.0)*gconst5);
IkReal x10683=(cj1*cj2);
IkReal x10684=(gconst4*r21);
IkReal x10685=(cj3*gconst4);
IkReal x10686=(gconst4*sj3);
IkReal x10687=(cj3*gconst5);
IkReal x10688=(r20*x10676);
IkReal x10689=(r10*x10676);
IkReal x10690=(cj3*x10676);
IkReal x10691=(r02*x10675);
IkReal x10692=(x10678+x10677);
IkReal x10693=((1.0)*sj3*x10676);
evalcond[0]=((-1.0)*r02*x10676);
evalcond[1]=((((-1.0)*r20*x10675*x10682))+((x10675*x10684)));
evalcond[2]=(((cj3*x10691))+(((-1.0)*x10681))+x10683);
evalcond[3]=((((-1.0)*sj3*x10691))+x10692);
evalcond[4]=((-1.0)+((x10675*x10680))+(((-1.0)*r10*x10675*x10682)));
evalcond[5]=(((r11*x10679))+((x10680*x10690))+(((-1.0)*cj3*x10682*x10689))+((r10*x10686)));
evalcond[6]=((((-1.0)*x10680*x10693))+((r11*x10687))+((r10*x10685))+((x10679*x10689)));
evalcond[7]=(((x10684*x10690))+((r20*x10686))+(((-1.0)*cj3*x10682*x10688))+((r21*x10679))+x10692);
evalcond[8]=(((r20*x10685))+((x10679*x10688))+(((-1.0)*x10684*x10693))+(((-1.0)*x10683))+((r21*x10687))+x10681);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10694=((1.0)*sj3);
IkReal x10695=(gconst4*r11);
IkReal x10696=((1.0)*gconst5*r10);
CheckValue<IkReal> x10697=IKPowWithIntegerCheck(((((-1.0)*x10696))+x10695),-1);
if(!x10697.valid){
continue;
}
CheckValue<IkReal> x10698=IKPowWithIntegerCheck((((cj3*x10695))+(((-1.0)*cj3*x10696))),-1);
if(!x10698.valid){
continue;
}
if( IKabs(x10697.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10698.value)*(((((-1.0)*gconst5*r11*x10694))+(((-1.0)*gconst4*r10*x10694)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10697.value)+IKsqr(((x10698.value)*(((((-1.0)*gconst5*r11*x10694))+(((-1.0)*gconst4*r10*x10694))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10697.value, ((x10698.value)*(((((-1.0)*gconst5*r11*x10694))+(((-1.0)*gconst4*r10*x10694))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10699=IKsin(j4);
IkReal x10700=IKcos(j4);
IkReal x10701=(cj2*sj1);
IkReal x10702=(cj1*sj2);
IkReal x10703=(gconst5*sj3);
IkReal x10704=(gconst4*r11);
IkReal x10705=(sj1*sj2);
IkReal x10706=((1.0)*gconst5);
IkReal x10707=(cj1*cj2);
IkReal x10708=(gconst4*r21);
IkReal x10709=(cj3*gconst4);
IkReal x10710=(gconst4*sj3);
IkReal x10711=(cj3*gconst5);
IkReal x10712=(r20*x10700);
IkReal x10713=(r10*x10700);
IkReal x10714=(cj3*x10700);
IkReal x10715=(r02*x10699);
IkReal x10716=(x10701+x10702);
IkReal x10717=((1.0)*sj3*x10700);
evalcond[0]=((-1.0)*r02*x10700);
evalcond[1]=((((-1.0)*r20*x10699*x10706))+((x10699*x10708)));
evalcond[2]=(((cj3*x10715))+(((-1.0)*x10705))+x10707);
evalcond[3]=((((-1.0)*sj3*x10715))+x10716);
evalcond[4]=((-1.0)+((x10699*x10704))+(((-1.0)*r10*x10699*x10706)));
evalcond[5]=(((r11*x10703))+(((-1.0)*cj3*x10706*x10713))+((r10*x10710))+((x10704*x10714)));
evalcond[6]=(((r11*x10711))+((x10703*x10713))+((r10*x10709))+(((-1.0)*x10704*x10717)));
evalcond[7]=((((-1.0)*cj3*x10706*x10712))+((r20*x10710))+((x10708*x10714))+((r21*x10703))+x10716);
evalcond[8]=(((x10703*x10712))+(((-1.0)*x10708*x10717))+(((-1.0)*x10707))+((r21*x10711))+x10705+((r20*x10709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10718=gconst4*gconst4;
IkReal x10719=gconst5*gconst5;
IkReal x10720=(r10*r21);
IkReal x10721=((1.0)*cj3);
IkReal x10722=(r11*r21);
IkReal x10723=(r11*r20);
IkReal x10724=(r22*sj3);
IkReal x10725=(gconst4*r10);
IkReal x10726=((1.0)*sj3);
IkReal x10727=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10721))+((x10723*x10727))+((x10720*x10727))+(((-1.0)*r10*r20*x10719*x10721))+(((-1.0)*x10718*x10721*x10722)))),-1);
if(!x10728.valid){
continue;
}
CheckValue<IkReal> x10729 = IKatan2WithCheck(IkReal((((x10724*x10725))+((gconst5*r11*x10724)))),IkReal(((((-1.0)*x10719*x10723*x10726))+((gconst4*gconst5*sj3*x10722))+(((-1.0)*gconst5*r20*x10725*x10726))+((sj3*x10718*x10720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10728.value)))+(x10729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10730=IKsin(j4);
IkReal x10731=IKcos(j4);
IkReal x10732=(cj2*sj1);
IkReal x10733=(cj1*sj2);
IkReal x10734=(gconst5*sj3);
IkReal x10735=(gconst4*r11);
IkReal x10736=(sj1*sj2);
IkReal x10737=(gconst5*r10);
IkReal x10738=(cj1*cj2);
IkReal x10739=(gconst4*r01);
IkReal x10740=(gconst4*r21);
IkReal x10741=(gconst5*r00);
IkReal x10742=(gconst4*sj3);
IkReal x10743=(cj3*gconst5);
IkReal x10744=(cj3*gconst4);
IkReal x10745=((1.0)*x10731);
IkReal x10746=((1.0)*x10730);
IkReal x10747=(cj3*x10730);
IkReal x10748=(cj3*x10731);
IkReal x10749=(x10732+x10733);
evalcond[0]=(((x10730*x10740))+(((-1.0)*gconst5*r20*x10746))+(((-1.0)*r22*x10745)));
evalcond[1]=((((-1.0)*x10741*x10746))+((x10730*x10739))+(((-1.0)*r02*x10745)));
evalcond[2]=((-1.0)+((x10730*x10735))+(((-1.0)*x10737*x10746))+(((-1.0)*r12*x10745)));
evalcond[3]=(((r10*x10742))+((x10735*x10748))+(((-1.0)*cj3*x10737*x10745))+((r12*x10747))+((r11*x10734)));
evalcond[4]=(((r10*x10744))+((r10*x10731*x10734))+((r11*x10743))+(((-1.0)*sj3*x10735*x10745))+(((-1.0)*r12*sj3*x10746)));
evalcond[5]=((((-1.0)*r20*x10743*x10745))+((r22*x10747))+((r21*x10734))+((r20*x10742))+x10749+((x10740*x10748)));
evalcond[6]=((((-1.0)*cj3*x10741*x10745))+((r02*x10747))+(((-1.0)*x10736))+((x10739*x10748))+x10738+((r01*x10734))+((r00*x10742)));
evalcond[7]=(((r00*x10731*x10734))+(((-1.0)*r02*sj3*x10746))+(((-1.0)*sj3*x10739*x10745))+x10749+((r01*x10743))+((r00*x10744)));
evalcond[8]=(((r20*x10731*x10734))+(((-1.0)*sj3*x10740*x10745))+((r20*x10744))+(((-1.0)*x10738))+(((-1.0)*r22*sj3*x10746))+x10736+((r21*x10743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10750=((1.0)*gconst5);
CheckValue<IkReal> x10751 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10750))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10751.valid){
continue;
}
CheckValue<IkReal> x10752=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10750))+(((-1.0)*gconst4*r20)))),-1);
if(!x10752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10751.value)+(((1.5707963267949)*(x10752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10753=IKsin(j4);
IkReal x10754=IKcos(j4);
IkReal x10755=(cj2*sj1);
IkReal x10756=(cj1*sj2);
IkReal x10757=(gconst5*sj3);
IkReal x10758=(gconst4*r11);
IkReal x10759=(sj1*sj2);
IkReal x10760=(gconst5*r10);
IkReal x10761=(cj1*cj2);
IkReal x10762=(gconst4*r01);
IkReal x10763=(gconst4*r21);
IkReal x10764=(gconst5*r00);
IkReal x10765=(gconst4*sj3);
IkReal x10766=(cj3*gconst5);
IkReal x10767=(cj3*gconst4);
IkReal x10768=((1.0)*x10754);
IkReal x10769=((1.0)*x10753);
IkReal x10770=(cj3*x10753);
IkReal x10771=(cj3*x10754);
IkReal x10772=(x10756+x10755);
evalcond[0]=((((-1.0)*gconst5*r20*x10769))+(((-1.0)*r22*x10768))+((x10753*x10763)));
evalcond[1]=((((-1.0)*x10764*x10769))+(((-1.0)*r02*x10768))+((x10753*x10762)));
evalcond[2]=((-1.0)+((x10753*x10758))+(((-1.0)*r12*x10768))+(((-1.0)*x10760*x10769)));
evalcond[3]=(((r12*x10770))+(((-1.0)*cj3*x10760*x10768))+((r11*x10757))+((x10758*x10771))+((r10*x10765)));
evalcond[4]=(((r10*x10754*x10757))+((r11*x10766))+(((-1.0)*sj3*x10758*x10768))+(((-1.0)*r12*sj3*x10769))+((r10*x10767)));
evalcond[5]=(((r20*x10765))+((r22*x10770))+((x10763*x10771))+(((-1.0)*r20*x10766*x10768))+x10772+((r21*x10757)));
evalcond[6]=((((-1.0)*cj3*x10764*x10768))+((r00*x10765))+((x10762*x10771))+x10761+((r02*x10770))+((r01*x10757))+(((-1.0)*x10759)));
evalcond[7]=(((r01*x10766))+(((-1.0)*r02*sj3*x10769))+((r00*x10754*x10757))+((r00*x10767))+(((-1.0)*sj3*x10762*x10768))+x10772);
evalcond[8]=(((r20*x10754*x10757))+(((-1.0)*x10761))+((r20*x10767))+(((-1.0)*sj3*x10763*x10768))+((r21*x10766))+(((-1.0)*r22*sj3*x10769))+x10759);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10773=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10773.valid){
continue;
}
CheckValue<IkReal> x10774 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10773.value)))+(x10774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10775=IKsin(j4);
IkReal x10776=IKcos(j4);
IkReal x10777=(cj2*sj1);
IkReal x10778=(cj1*sj2);
IkReal x10779=(gconst5*sj3);
IkReal x10780=(gconst4*r11);
IkReal x10781=(sj1*sj2);
IkReal x10782=(gconst5*r10);
IkReal x10783=(cj1*cj2);
IkReal x10784=(gconst4*r01);
IkReal x10785=(gconst4*r21);
IkReal x10786=(gconst5*r00);
IkReal x10787=(gconst4*sj3);
IkReal x10788=(cj3*gconst5);
IkReal x10789=(cj3*gconst4);
IkReal x10790=((1.0)*x10776);
IkReal x10791=((1.0)*x10775);
IkReal x10792=(cj3*x10775);
IkReal x10793=(cj3*x10776);
IkReal x10794=(x10777+x10778);
evalcond[0]=(((x10775*x10785))+(((-1.0)*gconst5*r20*x10791))+(((-1.0)*r22*x10790)));
evalcond[1]=((((-1.0)*r02*x10790))+((x10775*x10784))+(((-1.0)*x10786*x10791)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10790))+((x10775*x10780))+(((-1.0)*x10782*x10791)));
evalcond[3]=(((r11*x10779))+(((-1.0)*cj3*x10782*x10790))+((r12*x10792))+((x10780*x10793))+((r10*x10787)));
evalcond[4]=(((r11*x10788))+(((-1.0)*sj3*x10780*x10790))+((r10*x10776*x10779))+(((-1.0)*r12*sj3*x10791))+((r10*x10789)));
evalcond[5]=(((r20*x10787))+((x10785*x10793))+((r21*x10779))+x10794+(((-1.0)*r20*x10788*x10790))+((r22*x10792)));
evalcond[6]=(((r02*x10792))+((x10784*x10793))+(((-1.0)*x10781))+((r01*x10779))+((r00*x10787))+x10783+(((-1.0)*cj3*x10786*x10790)));
evalcond[7]=(((r00*x10776*x10779))+(((-1.0)*r02*sj3*x10791))+(((-1.0)*sj3*x10784*x10790))+((r01*x10788))+((r00*x10789))+x10794);
evalcond[8]=(((r21*x10788))+((r20*x10776*x10779))+((r20*x10789))+(((-1.0)*r22*sj3*x10791))+(((-1.0)*x10783))+(((-1.0)*sj3*x10785*x10790))+x10781);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10795=((-1.0)*r21);
CheckValue<IkReal> x10798 = IKatan2WithCheck(IkReal(x10795),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10798.valid){
continue;
}
IkReal x10796=((1.0)*(x10798.value));
IkReal x10797=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10796)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10796)));
IkReal gconst4=(x10795*x10797);
IkReal gconst5=((1.0)*r20*x10797);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10799=((-1.0)*r21);
CheckValue<IkReal> x10802 = IKatan2WithCheck(IkReal(x10799),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10802.valid){
continue;
}
IkReal x10800=((1.0)*(x10802.value));
IkReal x10801=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10800)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10800)));
IkReal gconst4=(x10799*x10801);
IkReal gconst5=((1.0)*r20*x10801);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10803=((-1.0)*r21);
CheckValue<IkReal> x10806 = IKatan2WithCheck(IkReal(x10803),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10806.valid){
continue;
}
IkReal x10804=((1.0)*(x10806.value));
IkReal x10805=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10804)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10804)));
IkReal gconst4=(x10803*x10805);
IkReal gconst5=((1.0)*r20*x10805);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10807=((-1.0)*r21);
CheckValue<IkReal> x10810 = IKatan2WithCheck(IkReal(x10807),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10810.valid){
continue;
}
IkReal x10808=((1.0)*(x10810.value));
IkReal x10809=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10808)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10808)));
IkReal gconst4=(x10807*x10809);
IkReal gconst5=((1.0)*r20*x10809);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10811=((-1.0)*r21);
CheckValue<IkReal> x10814 = IKatan2WithCheck(IkReal(x10811),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10814.valid){
continue;
}
IkReal x10812=((1.0)*(x10814.value));
IkReal x10813=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10812)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10812)));
IkReal gconst4=(x10811*x10813);
IkReal gconst5=((1.0)*r20*x10813);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10815=((-1.0)*r21);
CheckValue<IkReal> x10818 = IKatan2WithCheck(IkReal(x10815),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10818.valid){
continue;
}
IkReal x10816=((1.0)*(x10818.value));
IkReal x10817=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10816)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10816)));
IkReal gconst4=(x10815*x10817);
IkReal gconst5=((1.0)*r20*x10817);
IkReal x10819=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10823=IKPowWithIntegerCheck(x10819,-1);
if(!x10823.valid){
continue;
}
IkReal x10820=x10823.value;
IkReal x10821=((1.0)*x10820);
IkReal x10822=((((-1.0)*x10821*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10820))+(((-1.0)*(r02*r02)))+(((-1.0)*x10821*(r00*r00)*(r20*r20))));
j4eval[0]=x10822;
j4eval[1]=r02;
j4eval[2]=x10819;
j4eval[3]=IKsign(x10822);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10824=(gconst5*r00);
IkReal x10825=(gconst4*r01);
CheckValue<IkReal> x10826 = IKatan2WithCheck(IkReal(((((-1.0)*x10825))+x10824)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10826.valid){
continue;
}
CheckValue<IkReal> x10827=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10824*x10825))+(((-1.0)*(x10824*x10824)))+(((-1.0)*(x10825*x10825))))),-1);
if(!x10827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10826.value)+(((1.5707963267949)*(x10827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10828=IKsin(j4);
IkReal x10829=IKcos(j4);
IkReal x10830=(gconst4*r11);
IkReal x10831=((1.0)*cj1);
IkReal x10832=(gconst5*r10);
IkReal x10833=(gconst4*r01);
IkReal x10834=(gconst5*r00);
IkReal x10835=(gconst4*r21);
IkReal x10836=(gconst5*r20);
IkReal x10837=((1.0)*x10829);
IkReal x10838=((1.0)*x10828);
evalcond[0]=((((-1.0)*x10836*x10838))+((x10828*x10835))+(((-1.0)*r22*x10837)));
evalcond[1]=((((-1.0)*r12*x10837))+(((-1.0)*x10832*x10838))+((x10828*x10830)));
evalcond[2]=((((-1.0)*x10833*x10837))+((x10829*x10834))+(((-1.0)*r02*x10838)));
evalcond[3]=((-1.0)+(((-1.0)*x10834*x10838))+((x10828*x10833))+(((-1.0)*r02*x10837)));
evalcond[4]=((((-1.0)*x10835*x10837))+((sj1*sj2))+((x10829*x10836))+(((-1.0)*cj2*x10831))+(((-1.0)*r22*x10838)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r12*x10838))+(((-1.0)*x10830*x10837))+(((-1.0)*sj2*x10831))+((x10829*x10832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10839=((1.0)*gconst5);
CheckValue<IkReal> x10840 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10839))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10840.valid){
continue;
}
CheckValue<IkReal> x10841=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10839))+(((-1.0)*gconst4*r10)))),-1);
if(!x10841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10840.value)+(((1.5707963267949)*(x10841.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10842=IKsin(j4);
IkReal x10843=IKcos(j4);
IkReal x10844=(gconst4*r11);
IkReal x10845=((1.0)*cj1);
IkReal x10846=(gconst5*r10);
IkReal x10847=(gconst4*r01);
IkReal x10848=(gconst5*r00);
IkReal x10849=(gconst4*r21);
IkReal x10850=(gconst5*r20);
IkReal x10851=((1.0)*x10843);
IkReal x10852=((1.0)*x10842);
evalcond[0]=(((x10842*x10849))+(((-1.0)*x10850*x10852))+(((-1.0)*r22*x10851)));
evalcond[1]=((((-1.0)*r12*x10851))+((x10842*x10844))+(((-1.0)*x10846*x10852)));
evalcond[2]=(((x10843*x10848))+(((-1.0)*r02*x10852))+(((-1.0)*x10847*x10851)));
evalcond[3]=((-1.0)+(((-1.0)*x10848*x10852))+((x10842*x10847))+(((-1.0)*r02*x10851)));
evalcond[4]=(((x10843*x10850))+(((-1.0)*x10849*x10851))+(((-1.0)*cj2*x10845))+((sj1*sj2))+(((-1.0)*r22*x10852)));
evalcond[5]=((((-1.0)*r12*x10852))+(((-1.0)*sj2*x10845))+(((-1.0)*cj2*sj1))+((x10843*x10846))+(((-1.0)*x10844*x10851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10853 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10853.valid){
continue;
}
CheckValue<IkReal> x10854=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10853.value)+(((1.5707963267949)*(x10854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10855=IKsin(j4);
IkReal x10856=IKcos(j4);
IkReal x10857=(gconst4*r11);
IkReal x10858=((1.0)*cj1);
IkReal x10859=(gconst5*r10);
IkReal x10860=(gconst4*r01);
IkReal x10861=(gconst5*r00);
IkReal x10862=(gconst4*r21);
IkReal x10863=(gconst5*r20);
IkReal x10864=((1.0)*x10856);
IkReal x10865=((1.0)*x10855);
evalcond[0]=((((-1.0)*r22*x10864))+(((-1.0)*x10863*x10865))+((x10855*x10862)));
evalcond[1]=((((-1.0)*r12*x10864))+(((-1.0)*x10859*x10865))+((x10855*x10857)));
evalcond[2]=(((x10856*x10861))+(((-1.0)*x10860*x10864))+(((-1.0)*r02*x10865)));
evalcond[3]=((-1.0)+((x10855*x10860))+(((-1.0)*x10861*x10865))+(((-1.0)*r02*x10864)));
evalcond[4]=((((-1.0)*r22*x10865))+((x10856*x10863))+(((-1.0)*x10862*x10864))+((sj1*sj2))+(((-1.0)*cj2*x10858)));
evalcond[5]=((((-1.0)*r12*x10865))+((x10856*x10859))+(((-1.0)*cj2*sj1))+(((-1.0)*x10857*x10864))+(((-1.0)*sj2*x10858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10866=((-1.0)*r21);
CheckValue<IkReal> x10869 = IKatan2WithCheck(IkReal(x10866),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10869.valid){
continue;
}
IkReal x10867=((1.0)*(x10869.value));
IkReal x10868=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10867)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10867)));
IkReal gconst4=(x10866*x10868);
IkReal gconst5=((1.0)*r20*x10868);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10870=((-1.0)*r21);
CheckValue<IkReal> x10873 = IKatan2WithCheck(IkReal(x10870),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10873.valid){
continue;
}
IkReal x10871=((1.0)*(x10873.value));
IkReal x10872=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10871)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10871)));
IkReal gconst4=(x10870*x10872);
IkReal gconst5=((1.0)*r20*x10872);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10874=((-1.0)*r21);
CheckValue<IkReal> x10877 = IKatan2WithCheck(IkReal(x10874),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10877.valid){
continue;
}
IkReal x10875=((1.0)*(x10877.value));
IkReal x10876=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10875)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10875)));
IkReal gconst4=(x10874*x10876);
IkReal gconst5=((1.0)*r20*x10876);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10878=(gconst4*r01);
IkReal x10879=(gconst5*r00);
CheckValue<IkReal> x10880 = IKatan2WithCheck(IkReal(((((-1.0)*x10879))+x10878)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10880.valid){
continue;
}
CheckValue<IkReal> x10881=IKPowWithIntegerCheck(IKsign(((x10879*x10879)+(x10878*x10878)+(((-2.0)*x10878*x10879))+(r02*r02))),-1);
if(!x10881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10880.value)+(((1.5707963267949)*(x10881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10882=IKcos(j4);
IkReal x10883=IKsin(j4);
IkReal x10884=(gconst4*r11);
IkReal x10885=(gconst5*r10);
IkReal x10886=((1.0)*cj1);
IkReal x10887=(gconst5*r00);
IkReal x10888=(gconst5*r20);
IkReal x10889=((1.0)*x10882);
IkReal x10890=(gconst4*x10882);
IkReal x10891=((1.0)*x10883);
IkReal x10892=(gconst4*x10883);
evalcond[0]=(((r01*x10890))+(((-1.0)*x10887*x10889))+((r02*x10883)));
evalcond[1]=((((-1.0)*x10888*x10891))+((r21*x10892))+(((-1.0)*r22*x10889)));
evalcond[2]=(((x10883*x10884))+(((-1.0)*x10885*x10891))+(((-1.0)*r12*x10889)));
evalcond[3]=((-1.0)+((r01*x10892))+(((-1.0)*r02*x10889))+(((-1.0)*x10887*x10891)));
evalcond[4]=((((-1.0)*x10888*x10889))+((sj1*sj2))+((r22*x10883))+((r21*x10890))+(((-1.0)*cj2*x10886)));
evalcond[5]=(((x10882*x10884))+(((-1.0)*sj2*x10886))+(((-1.0)*cj2*sj1))+((r12*x10883))+(((-1.0)*x10885*x10889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10893=((1.0)*gconst5);
CheckValue<IkReal> x10894=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10893))+(((-1.0)*gconst4*r10)))),-1);
if(!x10894.valid){
continue;
}
CheckValue<IkReal> x10895 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10894.value)))+(x10895.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10896=IKcos(j4);
IkReal x10897=IKsin(j4);
IkReal x10898=(gconst4*r11);
IkReal x10899=(gconst5*r10);
IkReal x10900=((1.0)*cj1);
IkReal x10901=(gconst5*r00);
IkReal x10902=(gconst5*r20);
IkReal x10903=((1.0)*x10896);
IkReal x10904=(gconst4*x10896);
IkReal x10905=((1.0)*x10897);
IkReal x10906=(gconst4*x10897);
evalcond[0]=((((-1.0)*x10901*x10903))+((r01*x10904))+((r02*x10897)));
evalcond[1]=((((-1.0)*r22*x10903))+(((-1.0)*x10902*x10905))+((r21*x10906)));
evalcond[2]=((((-1.0)*x10899*x10905))+(((-1.0)*r12*x10903))+((x10897*x10898)));
evalcond[3]=((-1.0)+(((-1.0)*x10901*x10905))+((r01*x10906))+(((-1.0)*r02*x10903)));
evalcond[4]=(((sj1*sj2))+((r22*x10897))+(((-1.0)*x10902*x10903))+(((-1.0)*cj2*x10900))+((r21*x10904)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r12*x10897))+(((-1.0)*sj2*x10900))+(((-1.0)*x10899*x10903))+((x10896*x10898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10907 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10907.valid){
continue;
}
CheckValue<IkReal> x10908=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10907.value)+(((1.5707963267949)*(x10908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10909=IKcos(j4);
IkReal x10910=IKsin(j4);
IkReal x10911=(gconst4*r11);
IkReal x10912=(gconst5*r10);
IkReal x10913=((1.0)*cj1);
IkReal x10914=(gconst5*r00);
IkReal x10915=(gconst5*r20);
IkReal x10916=((1.0)*x10909);
IkReal x10917=(gconst4*x10909);
IkReal x10918=((1.0)*x10910);
IkReal x10919=(gconst4*x10910);
evalcond[0]=((((-1.0)*x10914*x10916))+((r02*x10910))+((r01*x10917)));
evalcond[1]=((((-1.0)*r22*x10916))+((r21*x10919))+(((-1.0)*x10915*x10918)));
evalcond[2]=(((x10910*x10911))+(((-1.0)*r12*x10916))+(((-1.0)*x10912*x10918)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10916))+(((-1.0)*x10914*x10918))+((r01*x10919)));
evalcond[4]=(((sj1*sj2))+((r21*x10917))+((r22*x10910))+(((-1.0)*cj2*x10913))+(((-1.0)*x10915*x10916)));
evalcond[5]=((((-1.0)*sj2*x10913))+((x10909*x10911))+(((-1.0)*cj2*sj1))+(((-1.0)*x10912*x10916))+((r12*x10910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10920=((-1.0)*r21);
CheckValue<IkReal> x10923 = IKatan2WithCheck(IkReal(x10920),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10923.valid){
continue;
}
IkReal x10921=((1.0)*(x10923.value));
IkReal x10922=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10921)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10921)));
IkReal gconst4=(x10920*x10922);
IkReal gconst5=((1.0)*r20*x10922);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10924=((-1.0)*r21);
CheckValue<IkReal> x10927 = IKatan2WithCheck(IkReal(x10924),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10927.valid){
continue;
}
IkReal x10925=((1.0)*(x10927.value));
IkReal x10926=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10925)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10925)));
IkReal gconst4=(x10924*x10926);
IkReal gconst5=((1.0)*r20*x10926);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10928=((-1.0)*r21);
CheckValue<IkReal> x10931 = IKatan2WithCheck(IkReal(x10928),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10931.valid){
continue;
}
IkReal x10929=((1.0)*(x10931.value));
IkReal x10930=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10929)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10929)));
IkReal gconst4=(x10928*x10930);
IkReal gconst5=((1.0)*r20*x10930);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10932=(gconst4*r01);
IkReal x10933=(gconst5*r00);
CheckValue<IkReal> x10934 = IKatan2WithCheck(IkReal(((((-1.0)*x10933))+x10932)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10934.valid){
continue;
}
CheckValue<IkReal> x10935=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10932*x10933))+(x10932*x10932)+(x10933*x10933)+(r02*r02))),-1);
if(!x10935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10934.value)+(((1.5707963267949)*(x10935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10936=IKcos(j4);
IkReal x10937=IKsin(j4);
IkReal x10938=(gconst4*r11);
IkReal x10939=(gconst5*r10);
IkReal x10940=(gconst5*r00);
IkReal x10941=(gconst5*r20);
IkReal x10942=((1.0)*x10936);
IkReal x10943=(gconst4*x10936);
IkReal x10944=((1.0)*x10937);
IkReal x10945=(gconst4*x10937);
evalcond[0]=(((r02*x10937))+((r01*x10943))+(((-1.0)*x10940*x10942)));
evalcond[1]=(((r21*x10945))+(((-1.0)*x10941*x10944))+(((-1.0)*r22*x10942)));
evalcond[2]=((((-1.0)*x10939*x10944))+(((-1.0)*r12*x10942))+((x10937*x10938)));
evalcond[3]=((-1.0)+((r01*x10945))+(((-1.0)*r02*x10942))+(((-1.0)*x10940*x10944)));
evalcond[4]=(((cj2*sj1))+((r21*x10943))+(((-1.0)*x10941*x10942))+((cj1*sj2))+((r22*x10937)));
evalcond[5]=((((-1.0)*x10939*x10942))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x10937))+((x10936*x10938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10946=((1.0)*gconst5);
CheckValue<IkReal> x10947 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10947.valid){
continue;
}
CheckValue<IkReal> x10948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10946))+(((-1.0)*gconst4*r10)))),-1);
if(!x10948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10947.value)+(((1.5707963267949)*(x10948.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10949=IKcos(j4);
IkReal x10950=IKsin(j4);
IkReal x10951=(gconst4*r11);
IkReal x10952=(gconst5*r10);
IkReal x10953=(gconst5*r00);
IkReal x10954=(gconst5*r20);
IkReal x10955=((1.0)*x10949);
IkReal x10956=(gconst4*x10949);
IkReal x10957=((1.0)*x10950);
IkReal x10958=(gconst4*x10950);
evalcond[0]=(((r02*x10950))+((r01*x10956))+(((-1.0)*x10953*x10955)));
evalcond[1]=((((-1.0)*r22*x10955))+((r21*x10958))+(((-1.0)*x10954*x10957)));
evalcond[2]=(((x10950*x10951))+(((-1.0)*r12*x10955))+(((-1.0)*x10952*x10957)));
evalcond[3]=((-1.0)+((r01*x10958))+(((-1.0)*x10953*x10957))+(((-1.0)*r02*x10955)));
evalcond[4]=(((cj2*sj1))+((r22*x10950))+((cj1*sj2))+((r21*x10956))+(((-1.0)*x10954*x10955)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10949*x10951))+(((-1.0)*x10952*x10955))+((r12*x10950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10959 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10959.valid){
continue;
}
CheckValue<IkReal> x10960=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10959.value)+(((1.5707963267949)*(x10960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10961=IKcos(j4);
IkReal x10962=IKsin(j4);
IkReal x10963=(gconst4*r11);
IkReal x10964=(gconst5*r10);
IkReal x10965=(gconst5*r00);
IkReal x10966=(gconst5*r20);
IkReal x10967=((1.0)*x10961);
IkReal x10968=(gconst4*x10961);
IkReal x10969=((1.0)*x10962);
IkReal x10970=(gconst4*x10962);
evalcond[0]=(((r02*x10962))+((r01*x10968))+(((-1.0)*x10965*x10967)));
evalcond[1]=((((-1.0)*r22*x10967))+((r21*x10970))+(((-1.0)*x10966*x10969)));
evalcond[2]=(((x10962*x10963))+(((-1.0)*x10964*x10969))+(((-1.0)*r12*x10967)));
evalcond[3]=((-1.0)+((r01*x10970))+(((-1.0)*r02*x10967))+(((-1.0)*x10965*x10969)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10962))+((r21*x10968))+(((-1.0)*x10966*x10967)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10961*x10963))+((r12*x10962))+(((-1.0)*x10964*x10967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10971=((-1.0)*r21);
CheckValue<IkReal> x10974 = IKatan2WithCheck(IkReal(x10971),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10974.valid){
continue;
}
IkReal x10972=((1.0)*(x10974.value));
IkReal x10973=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10972)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10972)));
IkReal gconst4=(x10971*x10973);
IkReal gconst5=((1.0)*r20*x10973);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10975=((-1.0)*r21);
CheckValue<IkReal> x10978 = IKatan2WithCheck(IkReal(x10975),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10978.valid){
continue;
}
IkReal x10976=((1.0)*(x10978.value));
IkReal x10977=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10976)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10976)));
IkReal gconst4=(x10975*x10977);
IkReal gconst5=((1.0)*r20*x10977);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10979=((-1.0)*r21);
CheckValue<IkReal> x10982 = IKatan2WithCheck(IkReal(x10979),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10982.valid){
continue;
}
IkReal x10980=((1.0)*(x10982.value));
IkReal x10981=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10980)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10980)));
IkReal gconst4=(x10979*x10981);
IkReal gconst5=((1.0)*r20*x10981);
IkReal x10983=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10987=IKPowWithIntegerCheck(x10983,-1);
if(!x10987.valid){
continue;
}
IkReal x10984=x10987.value;
IkReal x10985=((1.0)*x10984);
IkReal x10986=((((-1.0)*x10985*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10984))+(((-1.0)*x10985*(r01*r01)*(r21*r21))));
j4eval[0]=x10986;
j4eval[1]=r02;
j4eval[2]=x10983;
j4eval[3]=IKsign(x10986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10988=(gconst5*r00);
IkReal x10989=(gconst4*r01);
CheckValue<IkReal> x10990 = IKatan2WithCheck(IkReal(((((-1.0)*x10989))+x10988)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10990.valid){
continue;
}
CheckValue<IkReal> x10991=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10988*x10988)))+(((2.0)*x10988*x10989))+(((-1.0)*(x10989*x10989))))),-1);
if(!x10991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10990.value)+(((1.5707963267949)*(x10991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10992=IKsin(j4);
IkReal x10993=IKcos(j4);
IkReal x10994=(gconst4*r11);
IkReal x10995=(gconst5*r10);
IkReal x10996=(gconst4*r01);
IkReal x10997=(gconst5*r00);
IkReal x10998=(gconst4*r21);
IkReal x10999=(gconst5*r20);
IkReal x11000=((1.0)*x10993);
IkReal x11001=((1.0)*x10992);
evalcond[0]=((((-1.0)*r22*x11000))+((x10992*x10998))+(((-1.0)*x10999*x11001)));
evalcond[1]=((((-1.0)*x10995*x11001))+((x10992*x10994))+(((-1.0)*r12*x11000)));
evalcond[2]=((((-1.0)*r02*x11001))+((x10993*x10997))+(((-1.0)*x10996*x11000)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11000))+((x10992*x10996))+(((-1.0)*x10997*x11001)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11001))+((cj1*sj2))+((x10993*x10999))+(((-1.0)*x10998*x11000)));
evalcond[5]=((((-1.0)*x10994*x11000))+((x10993*x10995))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11002=((1.0)*gconst5);
CheckValue<IkReal> x11003=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11002))+(((-1.0)*gconst4*r10)))),-1);
if(!x11003.valid){
continue;
}
CheckValue<IkReal> x11004 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11003.value)))+(x11004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11005=IKsin(j4);
IkReal x11006=IKcos(j4);
IkReal x11007=(gconst4*r11);
IkReal x11008=(gconst5*r10);
IkReal x11009=(gconst4*r01);
IkReal x11010=(gconst5*r00);
IkReal x11011=(gconst4*r21);
IkReal x11012=(gconst5*r20);
IkReal x11013=((1.0)*x11006);
IkReal x11014=((1.0)*x11005);
evalcond[0]=((((-1.0)*r22*x11013))+((x11005*x11011))+(((-1.0)*x11012*x11014)));
evalcond[1]=(((x11005*x11007))+(((-1.0)*r12*x11013))+(((-1.0)*x11008*x11014)));
evalcond[2]=((((-1.0)*r02*x11014))+(((-1.0)*x11009*x11013))+((x11006*x11010)));
evalcond[3]=((-1.0)+((x11005*x11009))+(((-1.0)*r02*x11013))+(((-1.0)*x11010*x11014)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11014))+(((-1.0)*x11011*x11013))+((cj1*sj2))+((x11006*x11012)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11007*x11013))+(((-1.0)*r12*x11014))+((x11006*x11008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11015 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11015.valid){
continue;
}
CheckValue<IkReal> x11016=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11015.value)+(((1.5707963267949)*(x11016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11017=IKsin(j4);
IkReal x11018=IKcos(j4);
IkReal x11019=(gconst4*r11);
IkReal x11020=(gconst5*r10);
IkReal x11021=(gconst4*r01);
IkReal x11022=(gconst5*r00);
IkReal x11023=(gconst4*r21);
IkReal x11024=(gconst5*r20);
IkReal x11025=((1.0)*x11018);
IkReal x11026=((1.0)*x11017);
evalcond[0]=(((x11017*x11023))+(((-1.0)*r22*x11025))+(((-1.0)*x11024*x11026)));
evalcond[1]=(((x11017*x11019))+(((-1.0)*r12*x11025))+(((-1.0)*x11020*x11026)));
evalcond[2]=((((-1.0)*r02*x11026))+((x11018*x11022))+(((-1.0)*x11021*x11025)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11025))+((x11017*x11021))+(((-1.0)*x11022*x11026)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11023*x11025))+((x11018*x11024))+(((-1.0)*r22*x11026)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11018*x11020))+(((-1.0)*r12*x11026))+(((-1.0)*x11019*x11025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11027=gconst4*gconst4;
IkReal x11028=gconst5*gconst5;
IkReal x11029=(r01*r20);
IkReal x11030=(gconst4*sj3);
IkReal x11031=(r01*r21);
IkReal x11032=((1.0)*cj3);
IkReal x11033=(r00*r21);
IkReal x11034=(r00*r20);
IkReal x11035=(cj3*gconst4*gconst5);
IkReal x11036=((1.0)*x11028);
CheckValue<IkReal> x11037=IKPowWithIntegerCheck(IKsign((((x11033*x11035))+((x11029*x11035))+(((-1.0)*x11028*x11032*x11034))+(((-1.0)*r02*r22*x11032))+(((-1.0)*x11027*x11031*x11032)))),-1);
if(!x11037.valid){
continue;
}
CheckValue<IkReal> x11038 = IKatan2WithCheck(IkReal((((r00*r22*x11030))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x11027*x11033))+(((-1.0)*gconst5*x11030*x11034))+((gconst5*x11030*x11031))+(((-1.0)*sj3*x11029*x11036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11037.value)))+(x11038.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11039=IKsin(j4);
IkReal x11040=IKcos(j4);
IkReal x11041=(sj1*sj2);
IkReal x11042=(gconst5*sj3);
IkReal x11043=(gconst4*r11);
IkReal x11044=(gconst5*r10);
IkReal x11045=((1.0)*cj1);
IkReal x11046=(gconst4*r01);
IkReal x11047=(cj2*sj1);
IkReal x11048=(gconst5*r00);
IkReal x11049=(gconst4*sj3);
IkReal x11050=(cj3*gconst5);
IkReal x11051=(cj3*gconst4);
IkReal x11052=(gconst4*r21);
IkReal x11053=(cj2*x11045);
IkReal x11054=((1.0)*x11040);
IkReal x11055=((1.0)*x11039);
IkReal x11056=(cj3*x11039);
IkReal x11057=(cj3*x11040);
evalcond[0]=((((-1.0)*gconst5*r20*x11055))+(((-1.0)*r22*x11054))+((x11039*x11052)));
evalcond[1]=((((-1.0)*r12*x11054))+(((-1.0)*x11044*x11055))+((x11039*x11043)));
evalcond[2]=((-1.0)+((x11039*x11046))+(((-1.0)*r02*x11054))+(((-1.0)*x11048*x11055)));
evalcond[3]=(((x11046*x11057))+((r01*x11042))+((r00*x11049))+(((-1.0)*cj3*x11048*x11054))+((r02*x11056)));
evalcond[4]=((((-1.0)*sj3*x11046*x11054))+((r00*x11040*x11042))+((r00*x11051))+((r01*x11050))+(((-1.0)*r02*sj3*x11055)));
evalcond[5]=(((r20*x11049))+((r22*x11056))+((cj1*sj2))+x11047+((r21*x11042))+(((-1.0)*r20*x11050*x11054))+((r21*x11040*x11051)));
evalcond[6]=(((r12*x11056))+((r11*x11042))+((r10*x11049))+((x11043*x11057))+x11041+(((-1.0)*cj3*x11044*x11054))+(((-1.0)*x11053)));
evalcond[7]=(((r20*x11051))+(((-1.0)*r22*sj3*x11055))+((r20*x11040*x11042))+(((-1.0)*r21*x11049*x11054))+x11041+((r21*x11050))+(((-1.0)*x11053)));
evalcond[8]=((((-1.0)*r12*sj3*x11055))+((r10*x11051))+((r10*x11040*x11042))+(((-1.0)*sj2*x11045))+(((-1.0)*x11047))+((r11*x11050))+(((-1.0)*sj3*x11043*x11054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11058=((1.0)*gconst5);
CheckValue<IkReal> x11059 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11058))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11059.valid){
continue;
}
CheckValue<IkReal> x11060=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11058))+(((-1.0)*gconst4*r10)))),-1);
if(!x11060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11059.value)+(((1.5707963267949)*(x11060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11061=IKsin(j4);
IkReal x11062=IKcos(j4);
IkReal x11063=(sj1*sj2);
IkReal x11064=(gconst5*sj3);
IkReal x11065=(gconst4*r11);
IkReal x11066=(gconst5*r10);
IkReal x11067=((1.0)*cj1);
IkReal x11068=(gconst4*r01);
IkReal x11069=(cj2*sj1);
IkReal x11070=(gconst5*r00);
IkReal x11071=(gconst4*sj3);
IkReal x11072=(cj3*gconst5);
IkReal x11073=(cj3*gconst4);
IkReal x11074=(gconst4*r21);
IkReal x11075=(cj2*x11067);
IkReal x11076=((1.0)*x11062);
IkReal x11077=((1.0)*x11061);
IkReal x11078=(cj3*x11061);
IkReal x11079=(cj3*x11062);
evalcond[0]=(((x11061*x11074))+(((-1.0)*gconst5*r20*x11077))+(((-1.0)*r22*x11076)));
evalcond[1]=(((x11061*x11065))+(((-1.0)*x11066*x11077))+(((-1.0)*r12*x11076)));
evalcond[2]=((-1.0)+(((-1.0)*x11070*x11077))+(((-1.0)*r02*x11076))+((x11061*x11068)));
evalcond[3]=(((r02*x11078))+((r01*x11064))+((x11068*x11079))+(((-1.0)*cj3*x11070*x11076))+((r00*x11071)));
evalcond[4]=((((-1.0)*sj3*x11068*x11076))+((r00*x11062*x11064))+((r00*x11073))+(((-1.0)*r02*sj3*x11077))+((r01*x11072)));
evalcond[5]=(((r21*x11062*x11073))+((cj1*sj2))+x11069+((r21*x11064))+((r20*x11071))+(((-1.0)*r20*x11072*x11076))+((r22*x11078)));
evalcond[6]=(((r12*x11078))+x11063+((r10*x11071))+((x11065*x11079))+(((-1.0)*x11075))+((r11*x11064))+(((-1.0)*cj3*x11066*x11076)));
evalcond[7]=(((r21*x11072))+((r20*x11062*x11064))+(((-1.0)*r21*x11071*x11076))+x11063+(((-1.0)*r22*sj3*x11077))+(((-1.0)*x11075))+((r20*x11073)));
evalcond[8]=((((-1.0)*sj3*x11065*x11076))+(((-1.0)*r12*sj3*x11077))+((r11*x11072))+((r10*x11062*x11064))+((r10*x11073))+(((-1.0)*sj2*x11067))+(((-1.0)*x11069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11080 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11080.valid){
continue;
}
CheckValue<IkReal> x11081=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11080.value)+(((1.5707963267949)*(x11081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11082=IKsin(j4);
IkReal x11083=IKcos(j4);
IkReal x11084=(sj1*sj2);
IkReal x11085=(gconst5*sj3);
IkReal x11086=(gconst4*r11);
IkReal x11087=(gconst5*r10);
IkReal x11088=((1.0)*cj1);
IkReal x11089=(gconst4*r01);
IkReal x11090=(cj2*sj1);
IkReal x11091=(gconst5*r00);
IkReal x11092=(gconst4*sj3);
IkReal x11093=(cj3*gconst5);
IkReal x11094=(cj3*gconst4);
IkReal x11095=(gconst4*r21);
IkReal x11096=(cj2*x11088);
IkReal x11097=((1.0)*x11083);
IkReal x11098=((1.0)*x11082);
IkReal x11099=(cj3*x11082);
IkReal x11100=(cj3*x11083);
evalcond[0]=((((-1.0)*r22*x11097))+(((-1.0)*gconst5*r20*x11098))+((x11082*x11095)));
evalcond[1]=((((-1.0)*r12*x11097))+((x11082*x11086))+(((-1.0)*x11087*x11098)));
evalcond[2]=((-1.0)+((x11082*x11089))+(((-1.0)*x11091*x11098))+(((-1.0)*r02*x11097)));
evalcond[3]=(((r02*x11099))+((r01*x11085))+((x11089*x11100))+((r00*x11092))+(((-1.0)*cj3*x11091*x11097)));
evalcond[4]=((((-1.0)*r02*sj3*x11098))+((r00*x11094))+((r01*x11093))+((r00*x11083*x11085))+(((-1.0)*sj3*x11089*x11097)));
evalcond[5]=(((r21*x11085))+((cj1*sj2))+((r20*x11092))+x11090+(((-1.0)*r20*x11093*x11097))+((r22*x11099))+((r21*x11083*x11094)));
evalcond[6]=((((-1.0)*x11096))+((r12*x11099))+x11084+((x11086*x11100))+((r11*x11085))+((r10*x11092))+(((-1.0)*cj3*x11087*x11097)));
evalcond[7]=((((-1.0)*x11096))+((r20*x11094))+(((-1.0)*r21*x11092*x11097))+x11084+(((-1.0)*r22*sj3*x11098))+((r20*x11083*x11085))+((r21*x11093)));
evalcond[8]=((((-1.0)*sj2*x11088))+(((-1.0)*sj3*x11086*x11097))+(((-1.0)*r12*sj3*x11098))+((r10*x11083*x11085))+(((-1.0)*x11090))+((r11*x11093))+((r10*x11094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11101=((-1.0)*r21);
CheckValue<IkReal> x11104 = IKatan2WithCheck(IkReal(x11101),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11104.valid){
continue;
}
IkReal x11102=((1.0)*(x11104.value));
IkReal x11103=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11102)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11102)));
IkReal gconst4=(x11101*x11103);
IkReal gconst5=((1.0)*r20*x11103);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11105=((-1.0)*r21);
CheckValue<IkReal> x11108 = IKatan2WithCheck(IkReal(x11105),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11108.valid){
continue;
}
IkReal x11106=((1.0)*(x11108.value));
IkReal x11107=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11106)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11106)));
IkReal gconst4=(x11105*x11107);
IkReal gconst5=((1.0)*r20*x11107);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11109=((-1.0)*r21);
CheckValue<IkReal> x11112 = IKatan2WithCheck(IkReal(x11109),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11112.valid){
continue;
}
IkReal x11110=((1.0)*(x11112.value));
IkReal x11111=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11110)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11110)));
IkReal gconst4=(x11109*x11111);
IkReal gconst5=((1.0)*r20*x11111);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11113=((-1.0)*r21);
CheckValue<IkReal> x11116 = IKatan2WithCheck(IkReal(x11113),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11116.valid){
continue;
}
IkReal x11114=((1.0)*(x11116.value));
IkReal x11115=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11114)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11114)));
IkReal gconst4=(x11113*x11115);
IkReal gconst5=((1.0)*r20*x11115);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11117=((-1.0)*r21);
CheckValue<IkReal> x11120 = IKatan2WithCheck(IkReal(x11117),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11120.valid){
continue;
}
IkReal x11118=((1.0)*(x11120.value));
IkReal x11119=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11118)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11118)));
IkReal gconst4=(x11117*x11119);
IkReal gconst5=((1.0)*r20*x11119);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11121=((-1.0)*r21);
CheckValue<IkReal> x11124 = IKatan2WithCheck(IkReal(x11121),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11124.valid){
continue;
}
IkReal x11122=((1.0)*(x11124.value));
IkReal x11123=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11122)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11122)));
IkReal gconst4=(x11121*x11123);
IkReal gconst5=((1.0)*r20*x11123);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11125=(gconst5*r00);
IkReal x11126=(gconst4*r01);
CheckValue<IkReal> x11127 = IKatan2WithCheck(IkReal(((((-1.0)*x11126))+x11125)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11127.valid){
continue;
}
CheckValue<IkReal> x11128=IKPowWithIntegerCheck(IKsign(((x11125*x11125)+(((-2.0)*x11125*x11126))+(r02*r02)+(x11126*x11126))),-1);
if(!x11128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11127.value)+(((1.5707963267949)*(x11128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11129=IKsin(j4);
IkReal x11130=IKcos(j4);
IkReal x11131=(gconst4*r11);
IkReal x11132=(gconst5*r10);
IkReal x11133=(gconst4*r01);
IkReal x11134=(gconst5*r00);
IkReal x11135=(gconst4*r21);
IkReal x11136=(gconst5*r20);
IkReal x11137=((1.0)*x11130);
IkReal x11138=((1.0)*x11129);
evalcond[0]=(((x11129*x11135))+(((-1.0)*r22*x11137))+(((-1.0)*x11136*x11138)));
evalcond[1]=((((-1.0)*x11132*x11138))+((x11129*x11131))+(((-1.0)*r12*x11137)));
evalcond[2]=(((x11130*x11134))+(((-1.0)*x11133*x11137))+(((-1.0)*r02*x11138)));
evalcond[3]=((1.0)+(((-1.0)*x11134*x11138))+((x11129*x11133))+(((-1.0)*r02*x11137)));
evalcond[4]=((((-1.0)*x11131*x11137))+((cj2*sj1))+((x11130*x11132))+((cj1*sj2))+(((-1.0)*r12*x11138)));
evalcond[5]=((((-1.0)*x11135*x11137))+((x11130*x11136))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11139=((1.0)*gconst5);
CheckValue<IkReal> x11140=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11139))+(((-1.0)*gconst4*r20)))),-1);
if(!x11140.valid){
continue;
}
CheckValue<IkReal> x11141 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11139))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11140.value)))+(x11141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11142=IKsin(j4);
IkReal x11143=IKcos(j4);
IkReal x11144=(gconst4*r11);
IkReal x11145=(gconst5*r10);
IkReal x11146=(gconst4*r01);
IkReal x11147=(gconst5*r00);
IkReal x11148=(gconst4*r21);
IkReal x11149=(gconst5*r20);
IkReal x11150=((1.0)*x11143);
IkReal x11151=((1.0)*x11142);
evalcond[0]=((((-1.0)*r22*x11150))+(((-1.0)*x11149*x11151))+((x11142*x11148)));
evalcond[1]=(((x11142*x11144))+(((-1.0)*x11145*x11151))+(((-1.0)*r12*x11150)));
evalcond[2]=(((x11143*x11147))+(((-1.0)*r02*x11151))+(((-1.0)*x11146*x11150)));
evalcond[3]=((1.0)+((x11142*x11146))+(((-1.0)*r02*x11150))+(((-1.0)*x11147*x11151)));
evalcond[4]=(((cj2*sj1))+((x11143*x11145))+((cj1*sj2))+(((-1.0)*x11144*x11150))+(((-1.0)*r12*x11151)));
evalcond[5]=(((x11143*x11149))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11148*x11150))+(((-1.0)*r22*x11151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11152=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11152.valid){
continue;
}
CheckValue<IkReal> x11153 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11152.value)))+(x11153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11154=IKsin(j4);
IkReal x11155=IKcos(j4);
IkReal x11156=(gconst4*r11);
IkReal x11157=(gconst5*r10);
IkReal x11158=(gconst4*r01);
IkReal x11159=(gconst5*r00);
IkReal x11160=(gconst4*r21);
IkReal x11161=(gconst5*r20);
IkReal x11162=((1.0)*x11155);
IkReal x11163=((1.0)*x11154);
evalcond[0]=((((-1.0)*x11161*x11163))+(((-1.0)*r22*x11162))+((x11154*x11160)));
evalcond[1]=((((-1.0)*x11157*x11163))+(((-1.0)*r12*x11162))+((x11154*x11156)));
evalcond[2]=((((-1.0)*x11158*x11162))+((x11155*x11159))+(((-1.0)*r02*x11163)));
evalcond[3]=((1.0)+(((-1.0)*x11159*x11163))+((x11154*x11158))+(((-1.0)*r02*x11162)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11156*x11162))+((cj1*sj2))+(((-1.0)*r12*x11163))+((x11155*x11157)));
evalcond[5]=((((-1.0)*r22*x11163))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11160*x11162))+((x11155*x11161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11164=((-1.0)*r21);
CheckValue<IkReal> x11167 = IKatan2WithCheck(IkReal(x11164),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11167.valid){
continue;
}
IkReal x11165=((1.0)*(x11167.value));
IkReal x11166=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11165)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11165)));
IkReal gconst4=(x11164*x11166);
IkReal gconst5=((1.0)*r20*x11166);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11168=((-1.0)*r21);
CheckValue<IkReal> x11171 = IKatan2WithCheck(IkReal(x11168),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11171.valid){
continue;
}
IkReal x11169=((1.0)*(x11171.value));
IkReal x11170=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11169)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11169)));
IkReal gconst4=(x11168*x11170);
IkReal gconst5=((1.0)*r20*x11170);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11172=((-1.0)*r21);
CheckValue<IkReal> x11175 = IKatan2WithCheck(IkReal(x11172),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11175.valid){
continue;
}
IkReal x11173=((1.0)*(x11175.value));
IkReal x11174=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11173)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11173)));
IkReal gconst4=(x11172*x11174);
IkReal gconst5=((1.0)*r20*x11174);
IkReal x11176=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11180=IKPowWithIntegerCheck(x11176,-1);
if(!x11180.valid){
continue;
}
IkReal x11177=x11180.value;
IkReal x11178=((1.0)*x11177);
IkReal x11179=((((-1.0)*x11178*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x11177))+(((-1.0)*(r02*r02)))+(((-1.0)*x11178*(r00*r00)*(r20*r20))));
j4eval[0]=x11179;
j4eval[1]=IKsign(x11179);
j4eval[2]=r02;
j4eval[3]=x11176;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11181=(gconst4*r01);
IkReal x11182=(gconst5*r00);
CheckValue<IkReal> x11183=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11181*x11182))+(((-1.0)*(x11181*x11181)))+(((-1.0)*(x11182*x11182))))),-1);
if(!x11183.valid){
continue;
}
CheckValue<IkReal> x11184 = IKatan2WithCheck(IkReal((x11181+(((-1.0)*x11182)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11183.value)))+(x11184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11185=IKcos(j4);
IkReal x11186=IKsin(j4);
IkReal x11187=(gconst4*r11);
IkReal x11188=(gconst5*r10);
IkReal x11189=(gconst5*r00);
IkReal x11190=(gconst5*r20);
IkReal x11191=((1.0)*x11185);
IkReal x11192=(gconst4*x11185);
IkReal x11193=((1.0)*x11186);
IkReal x11194=(gconst4*x11186);
evalcond[0]=(((r01*x11192))+(((-1.0)*x11189*x11191))+((r02*x11186)));
evalcond[1]=(((r21*x11194))+(((-1.0)*r22*x11191))+(((-1.0)*x11190*x11193)));
evalcond[2]=((((-1.0)*r12*x11191))+((x11186*x11187))+(((-1.0)*x11188*x11193)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11191))+((r01*x11194))+(((-1.0)*x11189*x11193)));
evalcond[4]=(((cj2*sj1))+((r12*x11186))+((cj1*sj2))+((x11185*x11187))+(((-1.0)*x11188*x11191)));
evalcond[5]=(((r21*x11192))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11186))+(((-1.0)*x11190*x11191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11195=((1.0)*gconst5);
CheckValue<IkReal> x11196 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11195)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11196.valid){
continue;
}
CheckValue<IkReal> x11197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11195))+(((-1.0)*gconst4*r20)))),-1);
if(!x11197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11196.value)+(((1.5707963267949)*(x11197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11198=IKcos(j4);
IkReal x11199=IKsin(j4);
IkReal x11200=(gconst4*r11);
IkReal x11201=(gconst5*r10);
IkReal x11202=(gconst5*r00);
IkReal x11203=(gconst5*r20);
IkReal x11204=((1.0)*x11198);
IkReal x11205=(gconst4*x11198);
IkReal x11206=((1.0)*x11199);
IkReal x11207=(gconst4*x11199);
evalcond[0]=(((r02*x11199))+((r01*x11205))+(((-1.0)*x11202*x11204)));
evalcond[1]=((((-1.0)*r22*x11204))+((r21*x11207))+(((-1.0)*x11203*x11206)));
evalcond[2]=((((-1.0)*r12*x11204))+((x11199*x11200))+(((-1.0)*x11201*x11206)));
evalcond[3]=((1.0)+((r01*x11207))+(((-1.0)*r02*x11204))+(((-1.0)*x11202*x11206)));
evalcond[4]=(((cj2*sj1))+((x11198*x11200))+((cj1*sj2))+((r12*x11199))+(((-1.0)*x11201*x11204)));
evalcond[5]=(((r21*x11205))+(((-1.0)*x11203*x11204))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11208=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11208.valid){
continue;
}
CheckValue<IkReal> x11209 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11208.value)))+(x11209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11210=IKcos(j4);
IkReal x11211=IKsin(j4);
IkReal x11212=(gconst4*r11);
IkReal x11213=(gconst5*r10);
IkReal x11214=(gconst5*r00);
IkReal x11215=(gconst5*r20);
IkReal x11216=((1.0)*x11210);
IkReal x11217=(gconst4*x11210);
IkReal x11218=((1.0)*x11211);
IkReal x11219=(gconst4*x11211);
evalcond[0]=(((r02*x11211))+((r01*x11217))+(((-1.0)*x11214*x11216)));
evalcond[1]=(((r21*x11219))+(((-1.0)*x11215*x11218))+(((-1.0)*r22*x11216)));
evalcond[2]=(((x11211*x11212))+(((-1.0)*r12*x11216))+(((-1.0)*x11213*x11218)));
evalcond[3]=((1.0)+((r01*x11219))+(((-1.0)*r02*x11216))+(((-1.0)*x11214*x11218)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11210*x11212))+((r12*x11211))+(((-1.0)*x11213*x11216)));
evalcond[5]=(((r21*x11217))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11215*x11216))+((r22*x11211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11220=((-1.0)*r21);
CheckValue<IkReal> x11223 = IKatan2WithCheck(IkReal(x11220),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11223.valid){
continue;
}
IkReal x11221=((1.0)*(x11223.value));
IkReal x11222=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11221)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11221)));
IkReal gconst4=(x11220*x11222);
IkReal gconst5=((1.0)*r20*x11222);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11224=((-1.0)*r21);
CheckValue<IkReal> x11227 = IKatan2WithCheck(IkReal(x11224),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11227.valid){
continue;
}
IkReal x11225=((1.0)*(x11227.value));
IkReal x11226=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11225)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11225)));
IkReal gconst4=(x11224*x11226);
IkReal gconst5=((1.0)*r20*x11226);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11228=((-1.0)*r21);
CheckValue<IkReal> x11231 = IKatan2WithCheck(IkReal(x11228),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11231.valid){
continue;
}
IkReal x11229=((1.0)*(x11231.value));
IkReal x11230=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11229)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11229)));
IkReal gconst4=(x11228*x11230);
IkReal gconst5=((1.0)*r20*x11230);
IkReal x11232=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11236=IKPowWithIntegerCheck(x11232,-1);
if(!x11236.valid){
continue;
}
IkReal x11233=x11236.value;
IkReal x11234=((1.0)*x11233);
IkReal x11235=((((-2.0)*r00*r01*r20*r21*x11233))+(((-1.0)*(r02*r02)))+(((-1.0)*x11234*(r00*r00)*(r20*r20)))+(((-1.0)*x11234*(r01*r01)*(r21*r21))));
j4eval[0]=x11235;
j4eval[1]=IKsign(x11235);
j4eval[2]=r02;
j4eval[3]=x11232;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11237=(gconst4*r01);
IkReal x11238=(gconst5*r00);
CheckValue<IkReal> x11239 = IKatan2WithCheck(IkReal(((((-1.0)*x11238))+x11237)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11239.valid){
continue;
}
CheckValue<IkReal> x11240=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11237*x11237)))+(((-1.0)*(r02*r02)))+(((2.0)*x11237*x11238))+(((-1.0)*(x11238*x11238))))),-1);
if(!x11240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11239.value)+(((1.5707963267949)*(x11240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11241=IKcos(j4);
IkReal x11242=IKsin(j4);
IkReal x11243=(gconst5*r10);
IkReal x11244=(gconst5*r00);
IkReal x11245=(gconst5*r20);
IkReal x11246=((1.0)*x11241);
IkReal x11247=(gconst4*x11242);
IkReal x11248=(gconst4*x11241);
IkReal x11249=((1.0)*x11242);
evalcond[0]=((((-1.0)*x11244*x11246))+((r02*x11242))+((r01*x11248)));
evalcond[1]=((((-1.0)*x11245*x11249))+((r21*x11247))+(((-1.0)*r22*x11246)));
evalcond[2]=((((-1.0)*x11243*x11249))+((r11*x11247))+(((-1.0)*r12*x11246)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11246))+(((-1.0)*x11244*x11249))+((r01*x11247)));
evalcond[4]=(((cj2*sj1))+((r22*x11242))+(((-1.0)*x11245*x11246))+((cj1*sj2))+((r21*x11248)));
evalcond[5]=((((-1.0)*x11243*x11246))+((r11*x11248))+(((-1.0)*sj1*sj2))+((r12*x11242))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11250=((1.0)*gconst5);
CheckValue<IkReal> x11251=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11250))+(((-1.0)*gconst4*r20)))),-1);
if(!x11251.valid){
continue;
}
CheckValue<IkReal> x11252 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11250)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11251.value)))+(x11252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11253=IKcos(j4);
IkReal x11254=IKsin(j4);
IkReal x11255=(gconst5*r10);
IkReal x11256=(gconst5*r00);
IkReal x11257=(gconst5*r20);
IkReal x11258=((1.0)*x11253);
IkReal x11259=(gconst4*x11254);
IkReal x11260=(gconst4*x11253);
IkReal x11261=((1.0)*x11254);
evalcond[0]=(((r02*x11254))+(((-1.0)*x11256*x11258))+((r01*x11260)));
evalcond[1]=((((-1.0)*x11257*x11261))+((r21*x11259))+(((-1.0)*r22*x11258)));
evalcond[2]=((((-1.0)*x11255*x11261))+((r11*x11259))+(((-1.0)*r12*x11258)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11258))+(((-1.0)*x11256*x11261))+((r01*x11259)));
evalcond[4]=(((r22*x11254))+((cj2*sj1))+((cj1*sj2))+((r21*x11260))+(((-1.0)*x11257*x11258)));
evalcond[5]=(((r11*x11260))+(((-1.0)*sj1*sj2))+((r12*x11254))+((cj1*cj2))+(((-1.0)*x11255*x11258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11262=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11262.valid){
continue;
}
CheckValue<IkReal> x11263 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11262.value)))+(x11263.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11264=IKcos(j4);
IkReal x11265=IKsin(j4);
IkReal x11266=(gconst5*r10);
IkReal x11267=(gconst5*r00);
IkReal x11268=(gconst5*r20);
IkReal x11269=((1.0)*x11264);
IkReal x11270=(gconst4*x11265);
IkReal x11271=(gconst4*x11264);
IkReal x11272=((1.0)*x11265);
evalcond[0]=(((r01*x11271))+((r02*x11265))+(((-1.0)*x11267*x11269)));
evalcond[1]=(((r21*x11270))+(((-1.0)*x11268*x11272))+(((-1.0)*r22*x11269)));
evalcond[2]=((((-1.0)*r12*x11269))+(((-1.0)*x11266*x11272))+((r11*x11270)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11269))+((r01*x11270))+(((-1.0)*x11267*x11272)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11265))+((r21*x11271))+(((-1.0)*x11268*x11269)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11266*x11269))+((r11*x11271))+((r12*x11265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11273=((-1.0)*r21);
CheckValue<IkReal> x11276 = IKatan2WithCheck(IkReal(x11273),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11276.valid){
continue;
}
IkReal x11274=((1.0)*(x11276.value));
IkReal x11275=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11274)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11274)));
IkReal gconst4=(x11273*x11275);
IkReal gconst5=((1.0)*r20*x11275);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11277=((-1.0)*r21);
CheckValue<IkReal> x11280 = IKatan2WithCheck(IkReal(x11277),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11280.valid){
continue;
}
IkReal x11278=((1.0)*(x11280.value));
IkReal x11279=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11278)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11278)));
IkReal gconst4=(x11277*x11279);
IkReal gconst5=((1.0)*r20*x11279);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11281=((-1.0)*r21);
CheckValue<IkReal> x11284 = IKatan2WithCheck(IkReal(x11281),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11284.valid){
continue;
}
IkReal x11282=((1.0)*(x11284.value));
IkReal x11283=x10075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11282)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11282)));
IkReal gconst4=(x11281*x11283);
IkReal gconst5=((1.0)*r20*x11283);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11285=(gconst5*r00);
IkReal x11286=(gconst4*r01);
CheckValue<IkReal> x11287=IKPowWithIntegerCheck(IKsign(((x11285*x11285)+(r02*r02)+(x11286*x11286)+(((-2.0)*x11285*x11286)))),-1);
if(!x11287.valid){
continue;
}
CheckValue<IkReal> x11288 = IKatan2WithCheck(IkReal((x11285+(((-1.0)*x11286)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11287.value)))+(x11288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11289=IKsin(j4);
IkReal x11290=IKcos(j4);
IkReal x11291=(gconst4*r11);
IkReal x11292=(gconst5*r10);
IkReal x11293=(gconst5*r00);
IkReal x11294=(gconst5*r20);
IkReal x11295=((1.0)*x11290);
IkReal x11296=(gconst4*x11289);
IkReal x11297=((1.0)*x11289);
evalcond[0]=((((-1.0)*r22*x11295))+((r21*x11296))+(((-1.0)*x11294*x11297)));
evalcond[1]=(((x11289*x11291))+(((-1.0)*x11292*x11297))+(((-1.0)*r12*x11295)));
evalcond[2]=((((-1.0)*r02*x11297))+((x11290*x11293))+(((-1.0)*gconst4*r01*x11295)));
evalcond[3]=((1.0)+((r01*x11296))+(((-1.0)*r02*x11295))+(((-1.0)*x11293*x11297)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11297))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11295))+((x11290*x11294)));
evalcond[5]=((((-1.0)*x11291*x11295))+(((-1.0)*sj1*sj2))+((x11290*x11292))+((cj1*cj2))+(((-1.0)*r12*x11297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11298=((1.0)*gconst5);
CheckValue<IkReal> x11299 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11298))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11299.valid){
continue;
}
CheckValue<IkReal> x11300=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11298))+(((-1.0)*gconst4*r20)))),-1);
if(!x11300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11299.value)+(((1.5707963267949)*(x11300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11301=IKsin(j4);
IkReal x11302=IKcos(j4);
IkReal x11303=(gconst4*r11);
IkReal x11304=(gconst5*r10);
IkReal x11305=(gconst5*r00);
IkReal x11306=(gconst5*r20);
IkReal x11307=((1.0)*x11302);
IkReal x11308=(gconst4*x11301);
IkReal x11309=((1.0)*x11301);
evalcond[0]=((((-1.0)*x11306*x11309))+(((-1.0)*r22*x11307))+((r21*x11308)));
evalcond[1]=((((-1.0)*x11304*x11309))+((x11301*x11303))+(((-1.0)*r12*x11307)));
evalcond[2]=((((-1.0)*gconst4*r01*x11307))+(((-1.0)*r02*x11309))+((x11302*x11305)));
evalcond[3]=((1.0)+(((-1.0)*x11305*x11309))+((r01*x11308))+(((-1.0)*r02*x11307)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11307))+(((-1.0)*r22*x11309))+((x11302*x11306)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11303*x11307))+((x11302*x11304))+((cj1*cj2))+(((-1.0)*r12*x11309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11310=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11310.valid){
continue;
}
CheckValue<IkReal> x11311 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11310.value)))+(x11311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11312=IKsin(j4);
IkReal x11313=IKcos(j4);
IkReal x11314=(gconst4*r11);
IkReal x11315=(gconst5*r10);
IkReal x11316=(gconst5*r00);
IkReal x11317=(gconst5*r20);
IkReal x11318=((1.0)*x11313);
IkReal x11319=(gconst4*x11312);
IkReal x11320=((1.0)*x11312);
evalcond[0]=((((-1.0)*r22*x11318))+(((-1.0)*x11317*x11320))+((r21*x11319)));
evalcond[1]=((((-1.0)*r12*x11318))+(((-1.0)*x11315*x11320))+((x11312*x11314)));
evalcond[2]=((((-1.0)*r02*x11320))+(((-1.0)*gconst4*r01*x11318))+((x11313*x11316)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11318))+((r01*x11319))+(((-1.0)*x11316*x11320)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11320))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11318))+((x11313*x11317)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x11320))+((cj1*cj2))+(((-1.0)*x11314*x11318))+((x11313*x11315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11321=((-1.0)*r21);
IkReal x11322=((-1.0)*r20);
CheckValue<IkReal> x11324 = IKatan2WithCheck(IkReal(x11321),IkReal(x11322),IKFAST_ATAN2_MAGTHRESH);
if(!x11324.valid){
continue;
}
IkReal x11323=((1.0)*(x11324.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11323)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11322);
rxp0_2=(py*r00);
rxp1_0=(py*x11321);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11323)));
IkReal gconst4=x11321;
IkReal gconst5=((1.0)*r20);
IkReal x11325=((1.0)*r01*r21);
IkReal x11326=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11326))+(((-1.0)*x11325)));
j4eval[1]=((((-1.0)*cj3*x11325))+(((-1.0)*cj3*x11326)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11327=((-1.0)*r21);
IkReal x11328=((-1.0)*r20);
CheckValue<IkReal> x11330 = IKatan2WithCheck(IkReal(x11327),IkReal(x11328),IKFAST_ATAN2_MAGTHRESH);
if(!x11330.valid){
continue;
}
IkReal x11329=((1.0)*(x11330.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11329)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11328);
rxp0_2=(py*r00);
rxp1_0=(py*x11327);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11329)));
IkReal gconst4=x11327;
IkReal gconst5=((1.0)*r20);
IkReal x11331=((1.0)*r01*r21);
IkReal x11332=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11331))+(((-1.0)*x11332)));
j4eval[1]=(((sj3*x11331))+((sj3*x11332)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11333=((-1.0)*r21);
IkReal x11334=((-1.0)*r20);
CheckValue<IkReal> x11336 = IKatan2WithCheck(IkReal(x11333),IkReal(x11334),IKFAST_ATAN2_MAGTHRESH);
if(!x11336.valid){
continue;
}
IkReal x11335=((1.0)*(x11336.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11335)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11334);
rxp0_2=(py*r00);
rxp1_0=(py*x11333);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11335)));
IkReal gconst4=x11333;
IkReal gconst5=((1.0)*r20);
IkReal x11337=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x11337))+(((-1.0)*r00*r20*x11337)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11338=((1.0)*gconst5);
CheckValue<IkReal> x11339=IKPowWithIntegerCheck(cj3,-1);
if(!x11339.valid){
continue;
}
CheckValue<IkReal> x11340=IKPowWithIntegerCheck(r12,-1);
if(!x11340.valid){
continue;
}
CheckValue<IkReal> x11341=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11338))+((cj3*gconst4*r01))),-1);
if(!x11341.valid){
continue;
}
if( IKabs(((x11339.value)*(x11340.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11341.value)*(((((-1.0)*r01*sj3*x11338))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11339.value)*(x11340.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11341.value)*(((((-1.0)*r01*sj3*x11338))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11339.value)*(x11340.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11341.value)*(((((-1.0)*r01*sj3*x11338))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11342=IKsin(j4);
IkReal x11343=IKcos(j4);
IkReal x11344=(cj2*sj1);
IkReal x11345=(cj1*sj2);
IkReal x11346=(sj1*sj2);
IkReal x11347=(gconst5*sj3);
IkReal x11348=(gconst5*r00);
IkReal x11349=(cj3*gconst5);
IkReal x11350=(gconst4*sj3);
IkReal x11351=(cj3*gconst4);
IkReal x11352=(cj1*cj2);
IkReal x11353=((1.0)*x11342);
IkReal x11354=(gconst4*x11342);
IkReal x11355=((1.0)*x11343);
IkReal x11356=(x11344+x11345);
IkReal x11357=(x11343*x11347);
IkReal x11358=(x11343*x11351);
evalcond[0]=((-1.0)*r12*x11343);
evalcond[1]=((((-1.0)*gconst5*r20*x11353))+((r21*x11354)));
evalcond[2]=(x11352+(((-1.0)*x11346))+((cj3*r12*x11342)));
evalcond[3]=(x11356+(((-1.0)*r12*sj3*x11353)));
evalcond[4]=((1.0)+(((-1.0)*x11348*x11353))+((r01*x11354)));
evalcond[5]=((((-1.0)*cj3*x11348*x11355))+((r01*x11358))+((r00*x11350))+((r01*x11347)));
evalcond[6]=(((r00*x11357))+((r00*x11351))+(((-1.0)*r01*x11350*x11355))+((r01*x11349)));
evalcond[7]=(x11356+((r20*x11350))+((r21*x11358))+(((-1.0)*r20*x11349*x11355))+((r21*x11347)));
evalcond[8]=(x11346+((r20*x11357))+((r20*x11351))+(((-1.0)*x11352))+((r21*x11349))+(((-1.0)*r21*x11350*x11355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11359=((1.0)*gconst4);
IkReal x11360=(gconst5*r00);
CheckValue<IkReal> x11361=IKPowWithIntegerCheck(((((-1.0)*x11360))+((gconst4*r01))),-1);
if(!x11361.valid){
continue;
}
CheckValue<IkReal> x11362=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11359))+((sj3*x11360))),-1);
if(!x11362.valid){
continue;
}
if( IKabs(((-1.0)*(x11361.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11362.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11359)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11361.value)))+IKsqr(((x11362.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11359))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11361.value)), ((x11362.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11359))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11363=IKsin(j4);
IkReal x11364=IKcos(j4);
IkReal x11365=(cj2*sj1);
IkReal x11366=(cj1*sj2);
IkReal x11367=(sj1*sj2);
IkReal x11368=(gconst5*sj3);
IkReal x11369=(gconst5*r00);
IkReal x11370=(cj3*gconst5);
IkReal x11371=(gconst4*sj3);
IkReal x11372=(cj3*gconst4);
IkReal x11373=(cj1*cj2);
IkReal x11374=((1.0)*x11363);
IkReal x11375=(gconst4*x11363);
IkReal x11376=((1.0)*x11364);
IkReal x11377=(x11365+x11366);
IkReal x11378=(x11364*x11368);
IkReal x11379=(x11364*x11372);
evalcond[0]=((-1.0)*r12*x11364);
evalcond[1]=(((r21*x11375))+(((-1.0)*gconst5*r20*x11374)));
evalcond[2]=((((-1.0)*x11367))+((cj3*r12*x11363))+x11373);
evalcond[3]=((((-1.0)*r12*sj3*x11374))+x11377);
evalcond[4]=((1.0)+((r01*x11375))+(((-1.0)*x11369*x11374)));
evalcond[5]=(((r00*x11371))+((r01*x11368))+((r01*x11379))+(((-1.0)*cj3*x11369*x11376)));
evalcond[6]=(((r00*x11372))+((r00*x11378))+((r01*x11370))+(((-1.0)*r01*x11371*x11376)));
evalcond[7]=(((r20*x11371))+((r21*x11368))+((r21*x11379))+(((-1.0)*r20*x11370*x11376))+x11377);
evalcond[8]=(((r20*x11372))+((r20*x11378))+(((-1.0)*x11373))+((r21*x11370))+x11367+(((-1.0)*r21*x11371*x11376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11380=((1.0)*gconst5);
IkReal x11381=(gconst4*r01);
CheckValue<IkReal> x11382=IKPowWithIntegerCheck((x11381+(((-1.0)*r00*x11380))),-1);
if(!x11382.valid){
continue;
}
CheckValue<IkReal> x11383=IKPowWithIntegerCheck((((cj3*x11381))+(((-1.0)*cj3*r00*x11380))),-1);
if(!x11383.valid){
continue;
}
if( IKabs(((-1.0)*(x11382.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11383.value)*(((((-1.0)*r01*sj3*x11380))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11382.value)))+IKsqr(((x11383.value)*(((((-1.0)*r01*sj3*x11380))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11382.value)), ((x11383.value)*(((((-1.0)*r01*sj3*x11380))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11384=IKsin(j4);
IkReal x11385=IKcos(j4);
IkReal x11386=(cj2*sj1);
IkReal x11387=(cj1*sj2);
IkReal x11388=(sj1*sj2);
IkReal x11389=(gconst5*sj3);
IkReal x11390=(gconst5*r00);
IkReal x11391=(cj3*gconst5);
IkReal x11392=(gconst4*sj3);
IkReal x11393=(cj3*gconst4);
IkReal x11394=(cj1*cj2);
IkReal x11395=((1.0)*x11384);
IkReal x11396=(gconst4*x11384);
IkReal x11397=((1.0)*x11385);
IkReal x11398=(x11386+x11387);
IkReal x11399=(x11385*x11389);
IkReal x11400=(x11385*x11393);
evalcond[0]=((-1.0)*r12*x11385);
evalcond[1]=((((-1.0)*gconst5*r20*x11395))+((r21*x11396)));
evalcond[2]=(((cj3*r12*x11384))+x11394+(((-1.0)*x11388)));
evalcond[3]=((((-1.0)*r12*sj3*x11395))+x11398);
evalcond[4]=((1.0)+(((-1.0)*x11390*x11395))+((r01*x11396)));
evalcond[5]=((((-1.0)*cj3*x11390*x11397))+((r00*x11392))+((r01*x11389))+((r01*x11400)));
evalcond[6]=(((r00*x11399))+((r00*x11393))+((r01*x11391))+(((-1.0)*r01*x11392*x11397)));
evalcond[7]=(((r21*x11400))+((r20*x11392))+(((-1.0)*r20*x11391*x11397))+x11398+((r21*x11389)));
evalcond[8]=(((r20*x11399))+((r20*x11393))+(((-1.0)*r21*x11392*x11397))+x11388+(((-1.0)*x11394))+((r21*x11391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11401=gconst4*gconst4;
IkReal x11402=gconst5*gconst5;
IkReal x11403=(r01*r20);
IkReal x11404=(gconst4*sj3);
IkReal x11405=(r01*r21);
IkReal x11406=((1.0)*cj3);
IkReal x11407=(r00*r21);
IkReal x11408=(r00*r20);
IkReal x11409=(cj3*gconst4*gconst5);
IkReal x11410=((1.0)*x11402);
CheckValue<IkReal> x11411 = IKatan2WithCheck(IkReal((((r00*r22*x11404))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x11401*x11407))+(((-1.0)*gconst5*x11404*x11408))+((gconst5*x11404*x11405))+(((-1.0)*sj3*x11403*x11410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11411.valid){
continue;
}
CheckValue<IkReal> x11412=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x11406))+((x11407*x11409))+(((-1.0)*x11401*x11405*x11406))+(((-1.0)*x11402*x11406*x11408))+((x11403*x11409)))),-1);
if(!x11412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11411.value)+(((1.5707963267949)*(x11412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11413=IKsin(j4);
IkReal x11414=IKcos(j4);
IkReal x11415=(cj2*sj1);
IkReal x11416=(cj1*sj2);
IkReal x11417=(gconst5*sj3);
IkReal x11418=(gconst4*r11);
IkReal x11419=(sj1*sj2);
IkReal x11420=(gconst5*r10);
IkReal x11421=(cj1*cj2);
IkReal x11422=(gconst4*r01);
IkReal x11423=(gconst5*r00);
IkReal x11424=(gconst4*sj3);
IkReal x11425=(cj3*gconst5);
IkReal x11426=(cj3*gconst4);
IkReal x11427=(gconst4*r21);
IkReal x11428=((1.0)*x11414);
IkReal x11429=((1.0)*x11413);
IkReal x11430=(cj3*x11413);
IkReal x11431=(cj3*x11414);
IkReal x11432=(x11416+x11415);
evalcond[0]=((((-1.0)*gconst5*r20*x11429))+(((-1.0)*r22*x11428))+((x11413*x11427)));
evalcond[1]=((((-1.0)*r12*x11428))+(((-1.0)*x11420*x11429))+((x11413*x11418)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11428))+((x11413*x11422))+(((-1.0)*x11423*x11429)));
evalcond[3]=(((r02*x11430))+((r01*x11417))+(((-1.0)*cj3*x11423*x11428))+((x11422*x11431))+((r00*x11424)));
evalcond[4]=(((r01*x11425))+(((-1.0)*sj3*x11422*x11428))+((r00*x11426))+((r00*x11414*x11417))+(((-1.0)*r02*sj3*x11429)));
evalcond[5]=(((r21*x11414*x11426))+((r20*x11424))+x11432+((r21*x11417))+(((-1.0)*r20*x11425*x11428))+((r22*x11430)));
evalcond[6]=(x11421+((r10*x11424))+(((-1.0)*x11419))+((r11*x11417))+((r12*x11430))+(((-1.0)*cj3*x11420*x11428))+((x11418*x11431)));
evalcond[7]=(((r10*x11414*x11417))+x11432+((r10*x11426))+(((-1.0)*r12*sj3*x11429))+((r11*x11425))+(((-1.0)*sj3*x11418*x11428)));
evalcond[8]=(((r20*x11426))+x11419+((r21*x11425))+(((-1.0)*x11421))+(((-1.0)*r21*x11424*x11428))+(((-1.0)*r22*sj3*x11429))+((r20*x11414*x11417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11433=((1.0)*gconst5);
CheckValue<IkReal> x11434=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11433))+(((-1.0)*gconst4*r20)))),-1);
if(!x11434.valid){
continue;
}
CheckValue<IkReal> x11435 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11433))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11434.value)))+(x11435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11436=IKsin(j4);
IkReal x11437=IKcos(j4);
IkReal x11438=(cj2*sj1);
IkReal x11439=(cj1*sj2);
IkReal x11440=(gconst5*sj3);
IkReal x11441=(gconst4*r11);
IkReal x11442=(sj1*sj2);
IkReal x11443=(gconst5*r10);
IkReal x11444=(cj1*cj2);
IkReal x11445=(gconst4*r01);
IkReal x11446=(gconst5*r00);
IkReal x11447=(gconst4*sj3);
IkReal x11448=(cj3*gconst5);
IkReal x11449=(cj3*gconst4);
IkReal x11450=(gconst4*r21);
IkReal x11451=((1.0)*x11437);
IkReal x11452=((1.0)*x11436);
IkReal x11453=(cj3*x11436);
IkReal x11454=(cj3*x11437);
IkReal x11455=(x11438+x11439);
evalcond[0]=(((x11436*x11450))+(((-1.0)*gconst5*r20*x11452))+(((-1.0)*r22*x11451)));
evalcond[1]=((((-1.0)*r12*x11451))+(((-1.0)*x11443*x11452))+((x11436*x11441)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11451))+(((-1.0)*x11446*x11452))+((x11436*x11445)));
evalcond[3]=(((r00*x11447))+((x11445*x11454))+((r02*x11453))+(((-1.0)*cj3*x11446*x11451))+((r01*x11440)));
evalcond[4]=(((r00*x11449))+((r00*x11437*x11440))+(((-1.0)*r02*sj3*x11452))+(((-1.0)*sj3*x11445*x11451))+((r01*x11448)));
evalcond[5]=(x11455+(((-1.0)*r20*x11448*x11451))+((r21*x11437*x11449))+((r20*x11447))+((r21*x11440))+((r22*x11453)));
evalcond[6]=((((-1.0)*x11442))+x11444+((r11*x11440))+((r10*x11447))+((r12*x11453))+((x11441*x11454))+(((-1.0)*cj3*x11443*x11451)));
evalcond[7]=(x11455+(((-1.0)*r12*sj3*x11452))+((r11*x11448))+((r10*x11449))+(((-1.0)*sj3*x11441*x11451))+((r10*x11437*x11440)));
evalcond[8]=((((-1.0)*x11444))+x11442+(((-1.0)*r21*x11447*x11451))+((r20*x11449))+(((-1.0)*r22*sj3*x11452))+((r21*x11448))+((r20*x11437*x11440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11456=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11456.valid){
continue;
}
CheckValue<IkReal> x11457 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11456.value)))+(x11457.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11458=IKsin(j4);
IkReal x11459=IKcos(j4);
IkReal x11460=(cj2*sj1);
IkReal x11461=(cj1*sj2);
IkReal x11462=(gconst5*sj3);
IkReal x11463=(gconst4*r11);
IkReal x11464=(sj1*sj2);
IkReal x11465=(gconst5*r10);
IkReal x11466=(cj1*cj2);
IkReal x11467=(gconst4*r01);
IkReal x11468=(gconst5*r00);
IkReal x11469=(gconst4*sj3);
IkReal x11470=(cj3*gconst5);
IkReal x11471=(cj3*gconst4);
IkReal x11472=(gconst4*r21);
IkReal x11473=((1.0)*x11459);
IkReal x11474=((1.0)*x11458);
IkReal x11475=(cj3*x11458);
IkReal x11476=(cj3*x11459);
IkReal x11477=(x11461+x11460);
evalcond[0]=(((x11458*x11472))+(((-1.0)*gconst5*r20*x11474))+(((-1.0)*r22*x11473)));
evalcond[1]=((((-1.0)*r12*x11473))+((x11458*x11463))+(((-1.0)*x11465*x11474)));
evalcond[2]=((1.0)+((x11458*x11467))+(((-1.0)*x11468*x11474))+(((-1.0)*r02*x11473)));
evalcond[3]=(((r01*x11462))+((x11467*x11476))+(((-1.0)*cj3*x11468*x11473))+((r02*x11475))+((r00*x11469)));
evalcond[4]=(((r00*x11471))+((r00*x11459*x11462))+(((-1.0)*r02*sj3*x11474))+(((-1.0)*sj3*x11467*x11473))+((r01*x11470)));
evalcond[5]=(x11477+((r22*x11475))+(((-1.0)*r20*x11470*x11473))+((r20*x11469))+((r21*x11459*x11471))+((r21*x11462)));
evalcond[6]=((((-1.0)*cj3*x11465*x11473))+((r12*x11475))+x11466+((r11*x11462))+((r10*x11469))+((x11463*x11476))+(((-1.0)*x11464)));
evalcond[7]=(x11477+((r11*x11470))+((r10*x11459*x11462))+(((-1.0)*sj3*x11463*x11473))+((r10*x11471))+(((-1.0)*r12*sj3*x11474)));
evalcond[8]=(x11464+(((-1.0)*r22*sj3*x11474))+(((-1.0)*r21*x11469*x11473))+((r20*x11471))+((r21*x11470))+((r20*x11459*x11462))+(((-1.0)*x11466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11478=((-1.0)*r21);
IkReal x11479=((-1.0)*px);
CheckValue<IkReal> x11481 = IKatan2WithCheck(IkReal(x11478),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11481.valid){
continue;
}
IkReal x11480=((1.0)*(x11481.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11480)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11479);
rxp1_1=(px*r21);
rxp1_2=(r11*x11479);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11480)));
IkReal gconst4=x11478;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11482=((-1.0)*r21);
IkReal x11483=((-1.0)*px);
CheckValue<IkReal> x11485 = IKatan2WithCheck(IkReal(x11482),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11485.valid){
continue;
}
IkReal x11484=((1.0)*(x11485.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11484)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11483);
rxp1_1=(px*r21);
rxp1_2=(r11*x11483);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11484)));
IkReal gconst4=x11482;
IkReal gconst5=((1.0)*r20);
IkReal x11486=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=(((x11486*(r10*r10)))+(((-1.0)*x11486*(r21*r21)))+(((-1.0)*x11486)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11487=((-1.0)*r21);
IkReal x11488=((-1.0)*px);
CheckValue<IkReal> x11490 = IKatan2WithCheck(IkReal(x11487),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11490.valid){
continue;
}
IkReal x11489=((1.0)*(x11490.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11489)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11488);
rxp1_1=(px*r21);
rxp1_2=(r11*x11488);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11489)));
IkReal gconst4=x11487;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11491=((-1.0)*r21);
IkReal x11492=((-1.0)*px);
CheckValue<IkReal> x11494 = IKatan2WithCheck(IkReal(x11491),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11494.valid){
continue;
}
IkReal x11493=((1.0)*(x11494.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11493)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11492);
rxp1_1=(px*r21);
rxp1_2=(r11*x11492);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11493)));
IkReal gconst4=x11491;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11495=((-1.0)*r21);
IkReal x11496=((-1.0)*px);
CheckValue<IkReal> x11498 = IKatan2WithCheck(IkReal(x11495),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11498.valid){
continue;
}
IkReal x11497=((1.0)*(x11498.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11497)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11496);
rxp1_1=(px*r21);
rxp1_2=(r11*x11496);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11497)));
IkReal gconst4=x11495;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11499=((-1.0)*r21);
IkReal x11500=((-1.0)*px);
CheckValue<IkReal> x11502 = IKatan2WithCheck(IkReal(x11499),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11502.valid){
continue;
}
IkReal x11501=((1.0)*(x11502.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11501)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11500);
rxp1_1=(px*r21);
rxp1_2=(r11*x11500);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11501)));
IkReal gconst4=x11499;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11505=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11505.valid){
continue;
}
IkReal x11503=x11505.value;
IkReal x11504=(sj0*x11503);
cj4array[0]=(((cj2*sj1*x11504))+((cj1*sj2*x11504)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11506=IKsin(j4);
IkReal x11507=IKcos(j4);
IkReal x11508=(gconst5*r20);
IkReal x11509=(gconst4*x11506);
IkReal x11510=((1.0)*x11507);
IkReal x11511=((1.0)*x11506);
evalcond[0]=((-1.0)*r02*x11506);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11510)));
evalcond[2]=(((r21*x11509))+(((-1.0)*x11508*x11511)));
evalcond[3]=(((r11*x11509))+(((-1.0)*gconst5*r10*x11511)));
evalcond[4]=(((x11507*x11508))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11513=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11513.valid){
continue;
}
IkReal x11512=x11513.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11512))+((cj1*cj2*x11512)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11514=IKsin(j4);
IkReal x11515=IKcos(j4);
IkReal x11516=(gconst5*r10);
IkReal x11517=((1.0)*sj0);
IkReal x11518=(gconst4*x11514);
IkReal x11519=((1.0)*x11515);
IkReal x11520=((1.0)*x11514);
evalcond[0]=((-1.0)*r02*x11514);
evalcond[1]=((((-1.0)*x11517))+(((-1.0)*r02*x11519)));
evalcond[2]=((((-1.0)*gconst5*r20*x11520))+((r21*x11518)));
evalcond[3]=((((-1.0)*x11516*x11520))+((r11*x11518)));
evalcond[4]=((((-1.0)*gconst4*r11*x11519))+(((-1.0)*cj2*sj1*x11517))+((x11515*x11516))+(((-1.0)*cj1*sj2*x11517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11521=IKPowWithIntegerCheck(r02,-1);
if(!x11521.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11521.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11522=IKsin(j4);
IkReal x11523=IKcos(j4);
IkReal x11524=((1.0)*sj0);
IkReal x11525=(gconst5*x11523);
IkReal x11526=(gconst4*x11522);
IkReal x11527=((1.0)*gconst4*x11523);
IkReal x11528=((1.0)*gconst5*x11522);
evalcond[0]=((-1.0)*r02*x11522);
evalcond[1]=((((-1.0)*r20*x11528))+((r21*x11526)));
evalcond[2]=(((r11*x11526))+(((-1.0)*r10*x11528)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11525))+(((-1.0)*r21*x11527)));
evalcond[4]=((((-1.0)*cj2*sj1*x11524))+(((-1.0)*cj1*sj2*x11524))+((r10*x11525))+(((-1.0)*r11*x11527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11529=((-1.0)*r21);
IkReal x11530=((-1.0)*px);
CheckValue<IkReal> x11532 = IKatan2WithCheck(IkReal(x11529),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11532.valid){
continue;
}
IkReal x11531=((1.0)*(x11532.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11531)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11530);
rxp1_1=(px*r21);
rxp1_2=(r11*x11530);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11531)));
IkReal gconst4=x11529;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11533=((-1.0)*r21);
IkReal x11534=((-1.0)*px);
CheckValue<IkReal> x11536 = IKatan2WithCheck(IkReal(x11533),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11536.valid){
continue;
}
IkReal x11535=((1.0)*(x11536.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11535)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11534);
rxp1_1=(px*r21);
rxp1_2=(r11*x11534);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11535)));
IkReal gconst4=x11533;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11537=((-1.0)*r21);
IkReal x11538=((-1.0)*px);
CheckValue<IkReal> x11540 = IKatan2WithCheck(IkReal(x11537),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11540.valid){
continue;
}
IkReal x11539=((1.0)*(x11540.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11539)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11538);
rxp1_1=(px*r21);
rxp1_2=(r11*x11538);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11539)));
IkReal gconst4=x11537;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11543=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11543.valid){
continue;
}
IkReal x11541=x11543.value;
IkReal x11542=(sj0*x11541);
cj4array[0]=(((cj1*sj2*x11542))+((cj2*sj1*x11542)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11544=IKsin(j4);
IkReal x11545=IKcos(j4);
IkReal x11546=(gconst5*r20);
IkReal x11547=(gconst4*x11544);
IkReal x11548=((1.0)*x11545);
IkReal x11549=((1.0)*x11544);
evalcond[0]=(r02*x11544);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11548)));
evalcond[2]=((((-1.0)*x11546*x11549))+((r21*x11547)));
evalcond[3]=((((-1.0)*gconst5*r10*x11549))+((r11*x11547)));
evalcond[4]=(((gconst4*r21*x11545))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11546*x11548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11551=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11551.valid){
continue;
}
IkReal x11550=x11551.value;
cj4array[0]=(((cj1*cj2*x11550))+(((-1.0)*sj1*sj2*x11550)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11552=IKsin(j4);
IkReal x11553=IKcos(j4);
IkReal x11554=(gconst4*r11);
IkReal x11555=((1.0)*sj0);
IkReal x11556=(gconst5*r10);
IkReal x11557=((1.0)*x11553);
IkReal x11558=((1.0)*x11552);
evalcond[0]=(r02*x11552);
evalcond[1]=((((-1.0)*x11555))+(((-1.0)*r02*x11557)));
evalcond[2]=((((-1.0)*gconst5*r20*x11558))+((gconst4*r21*x11552)));
evalcond[3]=(((x11552*x11554))+(((-1.0)*x11556*x11558)));
evalcond[4]=((((-1.0)*cj1*sj2*x11555))+((x11553*x11554))+(((-1.0)*x11556*x11557))+(((-1.0)*cj2*sj1*x11555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11559=IKPowWithIntegerCheck(r02,-1);
if(!x11559.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11559.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11560=IKsin(j4);
IkReal x11561=IKcos(j4);
IkReal x11562=(gconst4*r11);
IkReal x11563=((1.0)*cj1);
IkReal x11564=(gconst4*r21);
IkReal x11565=((1.0)*gconst5*x11561);
IkReal x11566=((1.0)*gconst5*x11560);
evalcond[0]=(r02*x11560);
evalcond[1]=(((x11560*x11564))+(((-1.0)*r20*x11566)));
evalcond[2]=(((x11560*x11562))+(((-1.0)*r10*x11566)));
evalcond[3]=(((x11561*x11564))+((sj1*sj2))+(((-1.0)*cj2*x11563))+(((-1.0)*r20*x11565)));
evalcond[4]=(((x11561*x11562))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x11563))+(((-1.0)*r10*x11565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11568=IKPowWithIntegerCheck(r02,-1);
if(!x11568.valid){
continue;
}
IkReal x11567=x11568.value;
CheckValue<IkReal> x11569=IKPowWithIntegerCheck(cj3,-1);
if(!x11569.valid){
continue;
}
if( IKabs((x11567*(x11569.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11567)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11567*(x11569.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11567))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11567*(x11569.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11567));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11570=IKsin(j4);
IkReal x11571=IKcos(j4);
IkReal x11572=(gconst5*sj3);
IkReal x11573=(gconst4*r11);
IkReal x11574=(sj1*sj2);
IkReal x11575=((1.0)*gconst5);
IkReal x11576=(cj2*sj1);
IkReal x11577=((1.0)*sj0);
IkReal x11578=((1.0)*cj0);
IkReal x11579=(gconst4*r21);
IkReal x11580=(cj1*sj2);
IkReal x11581=(cj3*gconst4);
IkReal x11582=(gconst4*sj3);
IkReal x11583=(cj3*gconst5);
IkReal x11584=(r20*x11571);
IkReal x11585=((1.0)*cj1*cj2);
IkReal x11586=(r10*x11571);
IkReal x11587=(cj3*x11571);
IkReal x11588=(r02*x11570);
IkReal x11589=((1.0)*sj3*x11571);
evalcond[0]=((((-1.0)*r02*x11571))+(((-1.0)*x11577)));
evalcond[1]=(((x11570*x11579))+(((-1.0)*r20*x11570*x11575)));
evalcond[2]=((((-1.0)*r10*x11570*x11575))+cj0+((x11570*x11573)));
evalcond[3]=((((-1.0)*cj1*cj2*x11578))+((cj0*x11574))+((cj3*x11588)));
evalcond[4]=((((-1.0)*x11578*x11580))+(((-1.0)*x11576*x11578))+(((-1.0)*sj3*x11588)));
evalcond[5]=(((r20*x11582))+(((-1.0)*cj3*x11575*x11584))+x11580+x11576+((x11579*x11587))+((r21*x11572)));
evalcond[6]=((((-1.0)*x11579*x11589))+((r20*x11581))+((x11572*x11584))+x11574+(((-1.0)*x11585))+((r21*x11583)));
evalcond[7]=((((-1.0)*cj3*x11575*x11586))+((x11573*x11587))+((sj0*x11574))+(((-1.0)*cj1*cj2*x11577))+((r11*x11572))+((r10*x11582)));
evalcond[8]=((((-1.0)*x11577*x11580))+((x11572*x11586))+(((-1.0)*x11573*x11589))+(((-1.0)*x11576*x11577))+((r10*x11581))+((r11*x11583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11590=((1.0)*gconst5);
CheckValue<IkReal> x11591=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11590))),-1);
if(!x11591.valid){
continue;
}
CheckValue<IkReal> x11592=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11590))+((cj3*gconst4*r21))),-1);
if(!x11592.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11591.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11592.value)*(((((-1.0)*r21*sj3*x11590))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11591.value)))+IKsqr(((x11592.value)*(((((-1.0)*r21*sj3*x11590))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11591.value)), ((x11592.value)*(((((-1.0)*r21*sj3*x11590))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11593=IKsin(j4);
IkReal x11594=IKcos(j4);
IkReal x11595=(gconst5*sj3);
IkReal x11596=(gconst4*r11);
IkReal x11597=(sj1*sj2);
IkReal x11598=((1.0)*gconst5);
IkReal x11599=(cj2*sj1);
IkReal x11600=((1.0)*sj0);
IkReal x11601=((1.0)*cj0);
IkReal x11602=(gconst4*r21);
IkReal x11603=(cj1*sj2);
IkReal x11604=(cj3*gconst4);
IkReal x11605=(gconst4*sj3);
IkReal x11606=(cj3*gconst5);
IkReal x11607=(r20*x11594);
IkReal x11608=((1.0)*cj1*cj2);
IkReal x11609=(r10*x11594);
IkReal x11610=(cj3*x11594);
IkReal x11611=(r02*x11593);
IkReal x11612=((1.0)*sj3*x11594);
evalcond[0]=((((-1.0)*r02*x11594))+(((-1.0)*x11600)));
evalcond[1]=((((-1.0)*r20*x11593*x11598))+((x11593*x11602)));
evalcond[2]=(cj0+(((-1.0)*r10*x11593*x11598))+((x11593*x11596)));
evalcond[3]=(((cj3*x11611))+((cj0*x11597))+(((-1.0)*cj1*cj2*x11601)));
evalcond[4]=((((-1.0)*sj3*x11611))+(((-1.0)*x11599*x11601))+(((-1.0)*x11601*x11603)));
evalcond[5]=(x11603+x11599+(((-1.0)*cj3*x11598*x11607))+((r21*x11595))+((x11602*x11610))+((r20*x11605)));
evalcond[6]=((((-1.0)*x11602*x11612))+x11597+((r21*x11606))+(((-1.0)*x11608))+((x11595*x11607))+((r20*x11604)));
evalcond[7]=(((x11596*x11610))+((sj0*x11597))+(((-1.0)*cj3*x11598*x11609))+((r10*x11605))+((r11*x11595))+(((-1.0)*cj1*cj2*x11600)));
evalcond[8]=((((-1.0)*x11599*x11600))+(((-1.0)*x11596*x11612))+((r10*x11604))+((x11595*x11609))+((r11*x11606))+(((-1.0)*x11600*x11603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11613=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11613.valid){
continue;
}
CheckValue<IkReal> x11614=IKPowWithIntegerCheck(r02,-1);
if(!x11614.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11613.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11614.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11613.value)))+IKsqr(((-1.0)*sj0*(x11614.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11613.value)), ((-1.0)*sj0*(x11614.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11615=IKsin(j4);
IkReal x11616=IKcos(j4);
IkReal x11617=(gconst5*sj3);
IkReal x11618=(gconst4*r11);
IkReal x11619=(sj1*sj2);
IkReal x11620=((1.0)*gconst5);
IkReal x11621=(cj2*sj1);
IkReal x11622=((1.0)*sj0);
IkReal x11623=((1.0)*cj0);
IkReal x11624=(gconst4*r21);
IkReal x11625=(cj1*sj2);
IkReal x11626=(cj3*gconst4);
IkReal x11627=(gconst4*sj3);
IkReal x11628=(cj3*gconst5);
IkReal x11629=(r20*x11616);
IkReal x11630=((1.0)*cj1*cj2);
IkReal x11631=(r10*x11616);
IkReal x11632=(cj3*x11616);
IkReal x11633=(r02*x11615);
IkReal x11634=((1.0)*sj3*x11616);
evalcond[0]=((((-1.0)*x11622))+(((-1.0)*r02*x11616)));
evalcond[1]=(((x11615*x11624))+(((-1.0)*r20*x11615*x11620)));
evalcond[2]=(((x11615*x11618))+cj0+(((-1.0)*r10*x11615*x11620)));
evalcond[3]=((((-1.0)*cj1*cj2*x11623))+((cj3*x11633))+((cj0*x11619)));
evalcond[4]=((((-1.0)*sj3*x11633))+(((-1.0)*x11621*x11623))+(((-1.0)*x11623*x11625)));
evalcond[5]=(x11621+x11625+((r21*x11617))+(((-1.0)*cj3*x11620*x11629))+((r20*x11627))+((x11624*x11632)));
evalcond[6]=((((-1.0)*x11630))+((x11617*x11629))+x11619+((r21*x11628))+(((-1.0)*x11624*x11634))+((r20*x11626)));
evalcond[7]=((((-1.0)*cj1*cj2*x11622))+((r11*x11617))+((sj0*x11619))+((x11618*x11632))+(((-1.0)*cj3*x11620*x11631))+((r10*x11627)));
evalcond[8]=(((r11*x11628))+((x11617*x11631))+(((-1.0)*x11621*x11622))+(((-1.0)*x11622*x11625))+(((-1.0)*x11618*x11634))+((r10*x11626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11635=((1.0)*sj0);
IkReal x11636=((1.0)*gconst4);
CheckValue<IkReal> x11637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11636))+(((-1.0)*gconst5*r21)))),-1);
if(!x11637.valid){
continue;
}
CheckValue<IkReal> x11638 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11635)))),IkReal(((((-1.0)*cj0*r01*x11636))+(((-1.0)*gconst4*r11*x11635))+((cj0*gconst5*r00))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11637.value)))+(x11638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11639=IKsin(j4);
IkReal x11640=IKcos(j4);
IkReal x11641=(gconst5*sj3);
IkReal x11642=(cj3*gconst5);
IkReal x11643=(gconst4*r11);
IkReal x11644=(sj1*sj2);
IkReal x11645=(cj2*sj1);
IkReal x11646=((1.0)*sj0);
IkReal x11647=(gconst4*r01);
IkReal x11648=(gconst4*r21);
IkReal x11649=((1.0)*cj0);
IkReal x11650=(cj1*sj2);
IkReal x11651=(gconst4*sj3);
IkReal x11652=(cj3*gconst4);
IkReal x11653=((1.0)*x11640);
IkReal x11654=((1.0)*cj1*cj2);
IkReal x11655=(cj3*x11639);
IkReal x11656=(cj3*x11640);
IkReal x11657=((1.0)*gconst5*x11639);
IkReal x11658=((1.0)*sj3*x11639);
evalcond[0]=((((-1.0)*r22*x11653))+((x11639*x11648))+(((-1.0)*r20*x11657)));
evalcond[1]=((((-1.0)*r12*x11653))+cj0+(((-1.0)*r10*x11657))+((x11639*x11643)));
evalcond[2]=((((-1.0)*r02*x11653))+((x11639*x11647))+(((-1.0)*r00*x11657))+(((-1.0)*x11646)));
evalcond[3]=((((-1.0)*r20*x11642*x11653))+x11645+x11650+((r22*x11655))+((r21*x11641))+((x11648*x11656))+((r20*x11651)));
evalcond[4]=((((-1.0)*x11654))+x11644+((r20*x11640*x11641))+(((-1.0)*r22*x11658))+(((-1.0)*sj3*x11648*x11653))+((r21*x11642))+((r20*x11652)));
evalcond[5]=((((-1.0)*cj1*cj2*x11649))+((r02*x11655))+(((-1.0)*r00*x11642*x11653))+((x11647*x11656))+((cj0*x11644))+((r01*x11641))+((r00*x11651)));
evalcond[6]=(((r11*x11641))+(((-1.0)*cj1*cj2*x11646))+((r12*x11655))+((r10*x11651))+((x11643*x11656))+((sj0*x11644))+(((-1.0)*r10*x11642*x11653)));
evalcond[7]=((((-1.0)*r02*x11658))+(((-1.0)*sj3*x11647*x11653))+((r00*x11640*x11641))+(((-1.0)*x11649*x11650))+((r01*x11642))+(((-1.0)*x11645*x11649))+((r00*x11652)));
evalcond[8]=(((r10*x11640*x11641))+(((-1.0)*x11646*x11650))+((r11*x11642))+(((-1.0)*r12*x11658))+((r10*x11652))+(((-1.0)*sj3*x11643*x11653))+(((-1.0)*x11645*x11646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11659=((1.0)*gconst5);
CheckValue<IkReal> x11660=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r10))+(((-1.0)*r11*x11659)))),-1);
if(!x11660.valid){
continue;
}
CheckValue<IkReal> x11661 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11659))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11660.value)))+(x11661.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11662=IKsin(j4);
IkReal x11663=IKcos(j4);
IkReal x11664=(gconst5*sj3);
IkReal x11665=(cj3*gconst5);
IkReal x11666=(gconst4*r11);
IkReal x11667=(sj1*sj2);
IkReal x11668=(cj2*sj1);
IkReal x11669=((1.0)*sj0);
IkReal x11670=(gconst4*r01);
IkReal x11671=(gconst4*r21);
IkReal x11672=((1.0)*cj0);
IkReal x11673=(cj1*sj2);
IkReal x11674=(gconst4*sj3);
IkReal x11675=(cj3*gconst4);
IkReal x11676=((1.0)*x11663);
IkReal x11677=((1.0)*cj1*cj2);
IkReal x11678=(cj3*x11662);
IkReal x11679=(cj3*x11663);
IkReal x11680=((1.0)*gconst5*x11662);
IkReal x11681=((1.0)*sj3*x11662);
evalcond[0]=((((-1.0)*r20*x11680))+((x11662*x11671))+(((-1.0)*r22*x11676)));
evalcond[1]=(cj0+(((-1.0)*r10*x11680))+((x11662*x11666))+(((-1.0)*r12*x11676)));
evalcond[2]=((((-1.0)*r00*x11680))+(((-1.0)*x11669))+((x11662*x11670))+(((-1.0)*r02*x11676)));
evalcond[3]=(((r21*x11664))+x11668+x11673+(((-1.0)*r20*x11665*x11676))+((r22*x11678))+((x11671*x11679))+((r20*x11674)));
evalcond[4]=(((r21*x11665))+x11667+(((-1.0)*r22*x11681))+((r20*x11675))+(((-1.0)*sj3*x11671*x11676))+((r20*x11663*x11664))+(((-1.0)*x11677)));
evalcond[5]=(((cj0*x11667))+((x11670*x11679))+((r02*x11678))+((r01*x11664))+((r00*x11674))+(((-1.0)*r00*x11665*x11676))+(((-1.0)*cj1*cj2*x11672)));
evalcond[6]=(((r12*x11678))+((x11666*x11679))+(((-1.0)*r10*x11665*x11676))+((r11*x11664))+((r10*x11674))+(((-1.0)*cj1*cj2*x11669))+((sj0*x11667)));
evalcond[7]=((((-1.0)*r02*x11681))+((r00*x11663*x11664))+(((-1.0)*x11668*x11672))+((r01*x11665))+((r00*x11675))+(((-1.0)*x11672*x11673))+(((-1.0)*sj3*x11670*x11676)));
evalcond[8]=((((-1.0)*x11669*x11673))+(((-1.0)*sj3*x11666*x11676))+(((-1.0)*r12*x11681))+((r10*x11663*x11664))+((r11*x11665))+((r10*x11675))+(((-1.0)*x11668*x11669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11682=((1.0)*gconst5);
CheckValue<IkReal> x11683 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11682))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11683.valid){
continue;
}
CheckValue<IkReal> x11684=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11682)))),-1);
if(!x11684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11683.value)+(((1.5707963267949)*(x11684.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11685=IKsin(j4);
IkReal x11686=IKcos(j4);
IkReal x11687=(gconst5*sj3);
IkReal x11688=(cj3*gconst5);
IkReal x11689=(gconst4*r11);
IkReal x11690=(sj1*sj2);
IkReal x11691=(cj2*sj1);
IkReal x11692=((1.0)*sj0);
IkReal x11693=(gconst4*r01);
IkReal x11694=(gconst4*r21);
IkReal x11695=((1.0)*cj0);
IkReal x11696=(cj1*sj2);
IkReal x11697=(gconst4*sj3);
IkReal x11698=(cj3*gconst4);
IkReal x11699=((1.0)*x11686);
IkReal x11700=((1.0)*cj1*cj2);
IkReal x11701=(cj3*x11685);
IkReal x11702=(cj3*x11686);
IkReal x11703=((1.0)*gconst5*x11685);
IkReal x11704=((1.0)*sj3*x11685);
evalcond[0]=((((-1.0)*r22*x11699))+(((-1.0)*r20*x11703))+((x11685*x11694)));
evalcond[1]=(((x11685*x11689))+cj0+(((-1.0)*r12*x11699))+(((-1.0)*r10*x11703)));
evalcond[2]=((((-1.0)*r02*x11699))+((x11685*x11693))+(((-1.0)*x11692))+(((-1.0)*r00*x11703)));
evalcond[3]=((((-1.0)*r20*x11688*x11699))+x11696+x11691+((r22*x11701))+((r20*x11697))+((r21*x11687))+((x11694*x11702)));
evalcond[4]=(x11690+(((-1.0)*r22*x11704))+((r20*x11686*x11687))+((r20*x11698))+((r21*x11688))+(((-1.0)*x11700))+(((-1.0)*sj3*x11694*x11699)));
evalcond[5]=(((cj0*x11690))+(((-1.0)*r00*x11688*x11699))+((x11693*x11702))+((r00*x11697))+((r02*x11701))+(((-1.0)*cj1*cj2*x11695))+((r01*x11687)));
evalcond[6]=(((r11*x11687))+(((-1.0)*r10*x11688*x11699))+((r12*x11701))+((r10*x11697))+((x11689*x11702))+((sj0*x11690))+(((-1.0)*cj1*cj2*x11692)));
evalcond[7]=((((-1.0)*x11691*x11695))+((r00*x11698))+(((-1.0)*x11695*x11696))+((r00*x11686*x11687))+((r01*x11688))+(((-1.0)*r02*x11704))+(((-1.0)*sj3*x11693*x11699)));
evalcond[8]=(((r11*x11688))+(((-1.0)*x11691*x11692))+((r10*x11686*x11687))+(((-1.0)*x11692*x11696))+(((-1.0)*sj3*x11689*x11699))+((r10*x11698))+(((-1.0)*r12*x11704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11705=((-1.0)*r10);
IkReal x11707 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11707)==0){
continue;
}
IkReal x11706=pow(x11707,-0.5);
CheckValue<IkReal> x11708 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11705),IKFAST_ATAN2_MAGTHRESH);
if(!x11708.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11708.value));
IkReal gconst7=(r11*x11706);
IkReal gconst8=(x11705*x11706);
CheckValue<IkReal> x11709 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11709.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11709.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11710=((-1.0)*r10);
IkReal x11711=x11706;
CheckValue<IkReal> x11713 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11710),IKFAST_ATAN2_MAGTHRESH);
if(!x11713.valid){
continue;
}
IkReal x11712=((-1.0)*(x11713.value));
sj5=gconst7;
cj5=gconst8;
j5=x11712;
IkReal gconst6=x11712;
IkReal gconst7=(r11*x11711);
IkReal gconst8=(x11710*x11711);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11714=((1.0)*sj0);
IkReal x11715=((1.0)*gconst7);
CheckValue<IkReal> x11716 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11714))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x11714))+(((-1.0)*cj0*r01*x11715))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11716.valid){
continue;
}
CheckValue<IkReal> x11717=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11715))+(((-1.0)*gconst8*r21)))),-1);
if(!x11717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11716.value)+(((1.5707963267949)*(x11717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11718=IKsin(j4);
IkReal x11719=IKcos(j4);
IkReal x11720=(gconst7*sj3);
IkReal x11721=(cj3*gconst8);
IkReal x11722=(cj3*gconst7);
IkReal x11723=(sj1*sj2);
IkReal x11724=(cj2*sj1);
IkReal x11725=((1.0)*sj0);
IkReal x11726=((1.0)*cj0);
IkReal x11727=(gconst8*sj3);
IkReal x11728=(cj1*sj2);
IkReal x11729=((1.0)*x11719);
IkReal x11730=((1.0)*x11718);
IkReal x11731=((1.0)*cj1*cj2);
IkReal x11732=(cj3*x11718);
IkReal x11733=(gconst7*x11718);
IkReal x11734=(x11719*x11727);
evalcond[0]=((((-1.0)*gconst8*r20*x11730))+(((-1.0)*r22*x11729))+((r21*x11733)));
evalcond[1]=(((r11*x11733))+cj0+(((-1.0)*r12*x11729))+(((-1.0)*gconst8*r10*x11730)));
evalcond[2]=(((r01*x11733))+(((-1.0)*x11725))+(((-1.0)*gconst8*r00*x11730))+(((-1.0)*r02*x11729)));
evalcond[3]=(x11724+x11728+((r20*x11720))+((r21*x11719*x11722))+(((-1.0)*r20*x11721*x11729))+((r21*x11727))+((r22*x11732)));
evalcond[4]=(x11723+(((-1.0)*x11731))+((r20*x11722))+((r20*x11734))+(((-1.0)*r22*sj3*x11730))+(((-1.0)*r21*x11720*x11729))+((r21*x11721)));
evalcond[5]=(((r01*x11719*x11722))+((r00*x11720))+((r01*x11727))+((cj0*x11723))+((r02*x11732))+(((-1.0)*cj1*cj2*x11726))+(((-1.0)*r00*x11721*x11729)));
evalcond[6]=(((sj0*x11723))+(((-1.0)*r10*x11721*x11729))+((r10*x11720))+(((-1.0)*cj1*cj2*x11725))+((r12*x11732))+((r11*x11727))+((r11*x11719*x11722)));
evalcond[7]=(((r00*x11734))+(((-1.0)*r02*sj3*x11730))+((r00*x11722))+((r01*x11721))+(((-1.0)*x11724*x11726))+(((-1.0)*x11726*x11728))+(((-1.0)*r01*x11720*x11729)));
evalcond[8]=((((-1.0)*r11*x11720*x11729))+(((-1.0)*r12*sj3*x11730))+(((-1.0)*x11724*x11725))+((r10*x11734))+((r10*x11722))+((r11*x11721))+(((-1.0)*x11725*x11728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11735=((1.0)*gconst8);
CheckValue<IkReal> x11736=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11735))+(((-1.0)*gconst7*r00)))),-1);
if(!x11736.valid){
continue;
}
CheckValue<IkReal> x11737 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11736.value)))+(x11737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11738=IKsin(j4);
IkReal x11739=IKcos(j4);
IkReal x11740=(gconst7*sj3);
IkReal x11741=(cj3*gconst8);
IkReal x11742=(cj3*gconst7);
IkReal x11743=(sj1*sj2);
IkReal x11744=(cj2*sj1);
IkReal x11745=((1.0)*sj0);
IkReal x11746=((1.0)*cj0);
IkReal x11747=(gconst8*sj3);
IkReal x11748=(cj1*sj2);
IkReal x11749=((1.0)*x11739);
IkReal x11750=((1.0)*x11738);
IkReal x11751=((1.0)*cj1*cj2);
IkReal x11752=(cj3*x11738);
IkReal x11753=(gconst7*x11738);
IkReal x11754=(x11739*x11747);
evalcond[0]=((((-1.0)*gconst8*r20*x11750))+(((-1.0)*r22*x11749))+((r21*x11753)));
evalcond[1]=((((-1.0)*gconst8*r10*x11750))+cj0+((r11*x11753))+(((-1.0)*r12*x11749)));
evalcond[2]=((((-1.0)*gconst8*r00*x11750))+(((-1.0)*x11745))+(((-1.0)*r02*x11749))+((r01*x11753)));
evalcond[3]=(((r21*x11739*x11742))+x11744+x11748+(((-1.0)*r20*x11741*x11749))+((r20*x11740))+((r22*x11752))+((r21*x11747)));
evalcond[4]=(x11743+((r20*x11742))+(((-1.0)*r21*x11740*x11749))+(((-1.0)*x11751))+((r21*x11741))+(((-1.0)*r22*sj3*x11750))+((r20*x11754)));
evalcond[5]=(((r00*x11740))+((r01*x11747))+((cj0*x11743))+((r02*x11752))+(((-1.0)*cj1*cj2*x11746))+((r01*x11739*x11742))+(((-1.0)*r00*x11741*x11749)));
evalcond[6]=(((sj0*x11743))+(((-1.0)*r10*x11741*x11749))+((r12*x11752))+((r10*x11740))+((r11*x11739*x11742))+(((-1.0)*cj1*cj2*x11745))+((r11*x11747)));
evalcond[7]=(((r00*x11742))+((r01*x11741))+(((-1.0)*r01*x11740*x11749))+(((-1.0)*x11746*x11748))+(((-1.0)*x11744*x11746))+(((-1.0)*r02*sj3*x11750))+((r00*x11754)));
evalcond[8]=((((-1.0)*r11*x11740*x11749))+((r10*x11754))+((r10*x11742))+(((-1.0)*x11744*x11745))+(((-1.0)*r12*sj3*x11750))+(((-1.0)*x11745*x11748))+((r11*x11741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11755=((-1.0)*r11);
IkReal x11757 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11757)==0){
continue;
}
IkReal x11756=pow(x11757,-0.5);
CheckValue<IkReal> x11758 = IKatan2WithCheck(IkReal(x11755),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11758.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11758.value))));
IkReal gconst10=(x11755*x11756);
IkReal gconst11=((1.0)*r10*x11756);
CheckValue<IkReal> x11759 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11759.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11759.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11760=((-1.0)*r11);
CheckValue<IkReal> x11763 = IKatan2WithCheck(IkReal(x11760),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11763.valid){
continue;
}
IkReal x11761=((1.0)*(x11763.value));
IkReal x11762=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11761)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11761)));
IkReal gconst10=(x11760*x11762);
IkReal gconst11=((1.0)*r10*x11762);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11764=((-1.0)*r11);
CheckValue<IkReal> x11767 = IKatan2WithCheck(IkReal(x11764),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11767.valid){
continue;
}
IkReal x11765=((1.0)*(x11767.value));
IkReal x11766=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11765)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11765)));
IkReal gconst10=(x11764*x11766);
IkReal gconst11=((1.0)*r10*x11766);
IkReal x11768=r12*r12;
IkReal x11769=((1.0)*sj0);
IkReal x11770=(cj0*r02);
IkReal x11771=x11756;
j4eval[0]=((IKabs((((r12*x11770*x11771))+((sj0*x11768*x11771))+(((-1.0)*x11769*x11771)))))+(IKabs(((((-1.0)*r12*x11769))+(((-1.0)*x11770))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11772=((-1.0)*r11);
CheckValue<IkReal> x11775 = IKatan2WithCheck(IkReal(x11772),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11775.valid){
continue;
}
IkReal x11773=((1.0)*(x11775.value));
IkReal x11774=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11773)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11773)));
IkReal gconst10=(x11772*x11774);
IkReal gconst11=((1.0)*r10*x11774);
IkReal x11776=((1.0)*cj3);
CheckValue<IkReal> x11781=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11781.valid){
continue;
}
IkReal x11777=x11781.value;
IkReal x11778=(cj3*x11777);
IkReal x11779=(x11776*x11777);
IkReal x11780=((((-1.0)*x11776*(r22*r22)))+(((-1.0)*x11779*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x11778))+(((-1.0)*x11779*(r10*r10)*(r20*r20))));
j4eval[0]=x11780;
j4eval[1]=IKsign(x11780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11782=((-1.0)*r11);
CheckValue<IkReal> x11785 = IKatan2WithCheck(IkReal(x11782),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11785.valid){
continue;
}
IkReal x11783=((1.0)*(x11785.value));
IkReal x11784=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11783)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11783)));
IkReal gconst10=(x11782*x11784);
IkReal gconst11=((1.0)*r10*x11784);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11786=((-1.0)*r11);
CheckValue<IkReal> x11789 = IKatan2WithCheck(IkReal(x11786),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11789.valid){
continue;
}
IkReal x11787=((1.0)*(x11789.value));
IkReal x11788=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11787)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11787)));
IkReal gconst10=(x11786*x11788);
IkReal gconst11=((1.0)*r10*x11788);
IkReal x11790=r12*r12;
IkReal x11791=((1.0)*sj0);
IkReal x11792=(cj0*r02);
IkReal x11793=x11756;
j4eval[0]=((IKabs((((sj0*x11790*x11793))+(((-1.0)*x11791*x11793))+((r12*x11792*x11793)))))+(IKabs(((((-1.0)*x11792))+(((-1.0)*r12*x11791))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11794=((-1.0)*r11);
CheckValue<IkReal> x11797 = IKatan2WithCheck(IkReal(x11794),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11797.valid){
continue;
}
IkReal x11795=((1.0)*(x11797.value));
IkReal x11796=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11795)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11795)));
IkReal gconst10=(x11794*x11796);
IkReal gconst11=((1.0)*r10*x11796);
IkReal x11798=r12*r12;
IkReal x11799=(cj1*cj2*r22);
IkReal x11800=(r22*sj1*sj2);
CheckValue<IkReal> x11804=IKPowWithIntegerCheck(((-1.0)+x11798),-1);
if(!x11804.valid){
continue;
}
IkReal x11801=x11804.value;
if((((1.0)+(((-1.0)*x11798)))) < -0.00001)
continue;
IkReal x11802=IKsqrt(((1.0)+(((-1.0)*x11798))));
IkReal x11803=(r12*x11801*x11802);
j4eval[0]=((IKabs(((((-1.0)*x11800*x11803))+((x11799*x11803)))))+(IKabs(((((-1.0)*x11799))+x11800))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11805=((-1.0)*r11);
CheckValue<IkReal> x11808 = IKatan2WithCheck(IkReal(x11805),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11808.valid){
continue;
}
IkReal x11806=((1.0)*(x11808.value));
IkReal x11807=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11806)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11806)));
IkReal gconst10=(x11805*x11807);
IkReal gconst11=((1.0)*r10*x11807);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11809=((-1.0)*r11);
CheckValue<IkReal> x11812 = IKatan2WithCheck(IkReal(x11809),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11812.valid){
continue;
}
IkReal x11810=((1.0)*(x11812.value));
IkReal x11811=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11810)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11810)));
IkReal gconst10=(x11809*x11811);
IkReal gconst11=((1.0)*r10*x11811);
IkReal x11813=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11817=IKPowWithIntegerCheck(x11813,-1);
if(!x11817.valid){
continue;
}
IkReal x11814=x11817.value;
IkReal x11815=((1.0)*x11814);
IkReal x11816=((((-1.0)*x11815*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x11814))+(((-1.0)*x11815*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02))));
j4eval[0]=x11816;
j4eval[1]=IKsign(x11816);
j4eval[2]=r02;
j4eval[3]=x11813;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11818=((-1.0)*r11);
CheckValue<IkReal> x11821 = IKatan2WithCheck(IkReal(x11818),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11821.valid){
continue;
}
IkReal x11819=((1.0)*(x11821.value));
IkReal x11820=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11819)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11819)));
IkReal gconst10=(x11818*x11820);
IkReal gconst11=((1.0)*r10*x11820);
IkReal x11822=r12*r12;
IkReal x11823=(cj1*cj2*r22);
IkReal x11824=(r22*sj1*sj2);
CheckValue<IkReal> x11828=IKPowWithIntegerCheck(((-1.0)+x11822),-1);
if(!x11828.valid){
continue;
}
IkReal x11825=x11828.value;
if((((1.0)+(((-1.0)*x11822)))) < -0.00001)
continue;
IkReal x11826=IKsqrt(((1.0)+(((-1.0)*x11822))));
IkReal x11827=(r12*x11825*x11826);
j4eval[0]=((IKabs(((((-1.0)*x11824*x11827))+((x11823*x11827)))))+(IKabs(((((-1.0)*x11823))+x11824))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11829=(gconst10*r21);
IkReal x11830=(gconst11*r20);
IkReal x11831=(sj1*sj2);
IkReal x11832=(cj1*cj2);
CheckValue<IkReal> x11833 = IKatan2WithCheck(IkReal((((r22*x11831))+(((-1.0)*r22*x11832)))),IkReal((((x11829*x11831))+((x11830*x11832))+(((-1.0)*x11829*x11832))+(((-1.0)*x11830*x11831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11833.valid){
continue;
}
CheckValue<IkReal> x11834=IKPowWithIntegerCheck(IKsign(((x11829*x11829)+(r22*r22)+(((-2.0)*x11829*x11830))+(x11830*x11830))),-1);
if(!x11834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11833.value)+(((1.5707963267949)*(x11834.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11835=IKsin(j4);
IkReal x11836=IKcos(j4);
IkReal x11837=((1.0)*cj2);
IkReal x11838=((1.0)*x11836);
IkReal x11839=(gconst10*x11835);
IkReal x11840=((1.0)*x11835);
IkReal x11841=(gconst11*x11836);
IkReal x11842=(gconst11*x11840);
evalcond[0]=(((r21*x11839))+(((-1.0)*r20*x11842))+(((-1.0)*r22*x11838)));
evalcond[1]=((((-1.0)*r12*x11838))+((r11*x11839))+(((-1.0)*r10*x11842)));
evalcond[2]=((((-1.0)*r02*x11840))+((r00*x11841))+(((-1.0)*gconst10*r01*x11838)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11838))+(((-1.0)*r00*x11842))+((r01*x11839)));
evalcond[4]=((((-1.0)*cj1*x11837))+((r20*x11841))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11838))+(((-1.0)*r22*x11840)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11837))+(((-1.0)*r12*x11840))+((r10*x11841))+(((-1.0)*gconst10*r11*x11838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11843=(gconst11*r00);
IkReal x11844=(gconst10*r01);
CheckValue<IkReal> x11845 = IKatan2WithCheck(IkReal(((((-1.0)*x11844))+x11843)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11845.valid){
continue;
}
CheckValue<IkReal> x11846=IKPowWithIntegerCheck(IKsign(((((2.0)*x11843*x11844))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11844*x11844)))+(((-1.0)*(x11843*x11843))))),-1);
if(!x11846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11845.value)+(((1.5707963267949)*(x11846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11847=IKsin(j4);
IkReal x11848=IKcos(j4);
IkReal x11849=((1.0)*cj2);
IkReal x11850=((1.0)*x11848);
IkReal x11851=(gconst10*x11847);
IkReal x11852=((1.0)*x11847);
IkReal x11853=(gconst11*x11848);
IkReal x11854=(gconst11*x11852);
evalcond[0]=(((r21*x11851))+(((-1.0)*r20*x11854))+(((-1.0)*r22*x11850)));
evalcond[1]=(((r11*x11851))+(((-1.0)*r12*x11850))+(((-1.0)*r10*x11854)));
evalcond[2]=((((-1.0)*r02*x11852))+(((-1.0)*gconst10*r01*x11850))+((r00*x11853)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11850))+((r01*x11851))+(((-1.0)*r00*x11854)));
evalcond[4]=(((r20*x11853))+(((-1.0)*cj1*x11849))+(((-1.0)*gconst10*r21*x11850))+((sj1*sj2))+(((-1.0)*r22*x11852)));
evalcond[5]=((((-1.0)*sj1*x11849))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11850))+(((-1.0)*r12*x11852))+((r10*x11853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11855 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11855.valid){
continue;
}
CheckValue<IkReal> x11856=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11855.value)+(((1.5707963267949)*(x11856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11857=IKsin(j4);
IkReal x11858=IKcos(j4);
IkReal x11859=((1.0)*cj2);
IkReal x11860=((1.0)*x11858);
IkReal x11861=(gconst10*x11857);
IkReal x11862=((1.0)*x11857);
IkReal x11863=(gconst11*x11858);
IkReal x11864=(gconst11*x11862);
evalcond[0]=((((-1.0)*r22*x11860))+(((-1.0)*r20*x11864))+((r21*x11861)));
evalcond[1]=(((r11*x11861))+(((-1.0)*r10*x11864))+(((-1.0)*r12*x11860)));
evalcond[2]=(((r00*x11863))+(((-1.0)*gconst10*r01*x11860))+(((-1.0)*r02*x11862)));
evalcond[3]=((-1.0)+((r01*x11861))+(((-1.0)*r00*x11864))+(((-1.0)*r02*x11860)));
evalcond[4]=((((-1.0)*gconst10*r21*x11860))+(((-1.0)*r22*x11862))+((r20*x11863))+(((-1.0)*cj1*x11859))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x11859))+(((-1.0)*gconst10*r11*x11860))+(((-1.0)*cj1*sj2))+((r10*x11863))+(((-1.0)*r12*x11862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11865=((-1.0)*r11);
CheckValue<IkReal> x11868 = IKatan2WithCheck(IkReal(x11865),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11868.valid){
continue;
}
IkReal x11866=((1.0)*(x11868.value));
IkReal x11867=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11866)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11866)));
IkReal gconst10=(x11865*x11867);
IkReal gconst11=((1.0)*r10*x11867);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11869=((-1.0)*r11);
CheckValue<IkReal> x11872 = IKatan2WithCheck(IkReal(x11869),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11872.valid){
continue;
}
IkReal x11870=((1.0)*(x11872.value));
IkReal x11871=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11870)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11870)));
IkReal gconst10=(x11869*x11871);
IkReal gconst11=((1.0)*r10*x11871);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11873=((-1.0)*r11);
CheckValue<IkReal> x11876 = IKatan2WithCheck(IkReal(x11873),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11876.valid){
continue;
}
IkReal x11874=((1.0)*(x11876.value));
IkReal x11875=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11874)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11874)));
IkReal gconst10=(x11873*x11875);
IkReal gconst11=((1.0)*r10*x11875);
IkReal x11877=r12*r12;
CheckValue<IkReal> x11880=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11877))),-1);
if(!x11880.valid){
continue;
}
IkReal x11878=x11880.value;
IkReal x11879=((1.0)*x11878);
j4eval[0]=IKsign((((x11879*(r10*r10*r10*r10)))+(((2.0)*x11878*(r10*r10)*(r11*r11)))+x11877+((x11879*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11881=(cj2*sj1);
IkReal x11882=(gconst10*r11);
IkReal x11883=(gconst11*r10);
IkReal x11884=(cj1*sj2);
CheckValue<IkReal> x11885 = IKatan2WithCheck(IkReal((((r12*x11881))+((r12*x11884)))),IkReal(((((-1.0)*x11881*x11883))+((x11881*x11882))+((x11882*x11884))+(((-1.0)*x11883*x11884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11885.valid){
continue;
}
CheckValue<IkReal> x11886=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11882*x11882)+(x11883*x11883)+(((-2.0)*x11882*x11883)))),-1);
if(!x11886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11885.value)+(((1.5707963267949)*(x11886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11887=IKsin(j4);
IkReal x11888=IKcos(j4);
IkReal x11889=((1.0)*x11888);
IkReal x11890=(gconst10*x11887);
IkReal x11891=((1.0)*x11887);
IkReal x11892=(gconst11*x11888);
IkReal x11893=(gconst11*x11891);
evalcond[0]=((((-1.0)*r20*x11893))+((r21*x11890))+(((-1.0)*r22*x11889)));
evalcond[1]=((((-1.0)*r10*x11893))+(((-1.0)*r12*x11889))+((r11*x11890)));
evalcond[2]=((((-1.0)*gconst10*r01*x11889))+((r00*x11892))+(((-1.0)*r02*x11891)));
evalcond[3]=((1.0)+((r01*x11890))+(((-1.0)*r00*x11893))+(((-1.0)*r02*x11889)));
evalcond[4]=((((-1.0)*gconst10*r11*x11889))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11891))+((r10*x11892)));
evalcond[5]=((((-1.0)*r22*x11891))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11889))+((r20*x11892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11894=(gconst11*r00);
IkReal x11895=(gconst10*r01);
CheckValue<IkReal> x11896=IKPowWithIntegerCheck(IKsign(((x11894*x11894)+(x11895*x11895)+(((-2.0)*x11894*x11895))+(r02*r02))),-1);
if(!x11896.valid){
continue;
}
CheckValue<IkReal> x11897 = IKatan2WithCheck(IkReal(((((-1.0)*x11895))+x11894)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11896.value)))+(x11897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11898=IKsin(j4);
IkReal x11899=IKcos(j4);
IkReal x11900=((1.0)*x11899);
IkReal x11901=(gconst10*x11898);
IkReal x11902=((1.0)*x11898);
IkReal x11903=(gconst11*x11899);
IkReal x11904=(gconst11*x11902);
evalcond[0]=((((-1.0)*r22*x11900))+(((-1.0)*r20*x11904))+((r21*x11901)));
evalcond[1]=((((-1.0)*r12*x11900))+(((-1.0)*r10*x11904))+((r11*x11901)));
evalcond[2]=((((-1.0)*r02*x11902))+((r00*x11903))+(((-1.0)*gconst10*r01*x11900)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11900))+(((-1.0)*r00*x11904))+((r01*x11901)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11902))+(((-1.0)*gconst10*r11*x11900))+((r10*x11903)));
evalcond[5]=((((-1.0)*r22*x11902))+(((-1.0)*gconst10*r21*x11900))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11905=((1.0)*gconst11);
CheckValue<IkReal> x11906=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11905)))),-1);
if(!x11906.valid){
continue;
}
CheckValue<IkReal> x11907 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11905)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11906.value)))+(x11907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11908=IKsin(j4);
IkReal x11909=IKcos(j4);
IkReal x11910=((1.0)*x11909);
IkReal x11911=(gconst10*x11908);
IkReal x11912=((1.0)*x11908);
IkReal x11913=(gconst11*x11909);
IkReal x11914=(gconst11*x11912);
evalcond[0]=((((-1.0)*r22*x11910))+(((-1.0)*r20*x11914))+((r21*x11911)));
evalcond[1]=(((r11*x11911))+(((-1.0)*r12*x11910))+(((-1.0)*r10*x11914)));
evalcond[2]=(((r00*x11913))+(((-1.0)*gconst10*r01*x11910))+(((-1.0)*r02*x11912)));
evalcond[3]=((1.0)+((r01*x11911))+(((-1.0)*r02*x11910))+(((-1.0)*r00*x11914)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11910))+((r10*x11913))+(((-1.0)*r12*x11912)));
evalcond[5]=((((-1.0)*gconst10*r21*x11910))+(((-1.0)*r22*x11912))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11915=((-1.0)*r11);
IkReal x11916=((-1.0)*r10);
CheckValue<IkReal> x11918 = IKatan2WithCheck(IkReal(x11915),IkReal(x11916),IKFAST_ATAN2_MAGTHRESH);
if(!x11918.valid){
continue;
}
IkReal x11917=((1.0)*(x11918.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11917)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11916);
rxp1_1=(px*r21);
rxp1_2=(px*x11915);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11917)));
IkReal gconst10=x11915;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11919=((-1.0)*r11);
IkReal x11920=((-1.0)*r10);
CheckValue<IkReal> x11922 = IKatan2WithCheck(IkReal(x11919),IkReal(x11920),IKFAST_ATAN2_MAGTHRESH);
if(!x11922.valid){
continue;
}
IkReal x11921=((1.0)*(x11922.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11921)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11920);
rxp1_1=(px*r21);
rxp1_2=(px*x11919);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11921)));
IkReal gconst10=x11919;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11923=((-1.0)*r11);
IkReal x11924=((-1.0)*r10);
CheckValue<IkReal> x11926 = IKatan2WithCheck(IkReal(x11923),IkReal(x11924),IKFAST_ATAN2_MAGTHRESH);
if(!x11926.valid){
continue;
}
IkReal x11925=((1.0)*(x11926.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11925)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11924);
rxp1_1=(px*r21);
rxp1_2=(px*x11923);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11925)));
IkReal gconst10=x11923;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11929=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11929.valid){
continue;
}
IkReal x11927=x11929.value;
IkReal x11928=(sj0*x11927);
cj4array[0]=(((cj1*sj2*x11928))+((cj2*sj1*x11928)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11930=IKsin(j4);
IkReal x11931=IKcos(j4);
IkReal x11932=(gconst10*r21);
IkReal x11933=(gconst11*r20);
IkReal x11934=((1.0)*x11930);
IkReal x11935=((1.0)*x11931);
evalcond[0]=((-1.0)*r02*x11930);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11935)));
evalcond[2]=(((x11930*x11932))+(((-1.0)*x11933*x11934)));
evalcond[3]=((((-1.0)*gconst11*r10*x11934))+((gconst10*r11*x11930)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11931*x11933))+(((-1.0)*x11932*x11935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11937=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11937.valid){
continue;
}
IkReal x11936=x11937.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11936))+((cj1*cj2*x11936)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11938=IKsin(j4);
IkReal x11939=IKcos(j4);
IkReal x11940=((1.0)*sj0);
IkReal x11941=(gconst10*x11938);
IkReal x11942=((1.0)*x11939);
IkReal x11943=((1.0)*gconst11*x11938);
evalcond[0]=((-1.0)*r02*x11938);
evalcond[1]=((((-1.0)*x11940))+(((-1.0)*r02*x11942)));
evalcond[2]=((((-1.0)*r20*x11943))+((r21*x11941)));
evalcond[3]=(((r11*x11941))+(((-1.0)*r10*x11943)));
evalcond[4]=((((-1.0)*cj1*sj2*x11940))+(((-1.0)*gconst10*r11*x11942))+((gconst11*r10*x11939))+(((-1.0)*cj2*sj1*x11940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11944=IKPowWithIntegerCheck(r02,-1);
if(!x11944.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11944.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11945=IKsin(j4);
IkReal x11946=IKcos(j4);
IkReal x11947=(gconst10*r21);
IkReal x11948=((1.0)*sj0);
IkReal x11949=(gconst10*r11);
IkReal x11950=(gconst11*x11946);
IkReal x11951=((1.0)*x11946);
IkReal x11952=((1.0)*gconst11*x11945);
evalcond[0]=((-1.0)*r02*x11945);
evalcond[1]=(((x11945*x11947))+(((-1.0)*r20*x11952)));
evalcond[2]=(((x11945*x11949))+(((-1.0)*r10*x11952)));
evalcond[3]=((((-1.0)*x11947*x11951))+((r20*x11950))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj1*sj2*x11948))+(((-1.0)*x11949*x11951))+((r10*x11950))+(((-1.0)*cj2*sj1*x11948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11953=((1.0)*gconst11);
CheckValue<IkReal> x11954 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11953))+(((-1.0)*r10*sj0*x11953))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11954.valid){
continue;
}
CheckValue<IkReal> x11955=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11954.value)+(((1.5707963267949)*(x11955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11956=IKsin(j4);
IkReal x11957=IKcos(j4);
IkReal x11958=((1.0)*cj2);
IkReal x11959=((1.0)*sj0);
IkReal x11960=(cj1*sj2);
IkReal x11961=(gconst10*x11956);
IkReal x11962=((1.0)*x11957);
IkReal x11963=(gconst11*x11957);
IkReal x11964=((1.0)*x11956);
IkReal x11965=(gconst11*x11964);
evalcond[0]=((((-1.0)*r20*x11965))+((r21*x11961)));
evalcond[1]=((((-1.0)*r10*x11965))+cj0+(((-1.0)*r12*x11962))+((r11*x11961)));
evalcond[2]=((((-1.0)*cj1*x11958))+((sj1*sj2))+((r20*x11963))+(((-1.0)*gconst10*r21*x11962)));
evalcond[3]=(((r01*x11961))+(((-1.0)*x11959))+(((-1.0)*r00*x11965))+(((-1.0)*r02*x11962)));
evalcond[4]=(((r00*x11963))+(((-1.0)*cj0*sj1*x11958))+(((-1.0)*gconst10*r01*x11962))+(((-1.0)*r02*x11964))+(((-1.0)*cj0*x11960)));
evalcond[5]=((((-1.0)*r12*x11964))+(((-1.0)*x11959*x11960))+(((-1.0)*gconst10*r11*x11962))+(((-1.0)*sj0*sj1*x11958))+((r10*x11963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11966=(gconst10*r21);
IkReal x11967=(gconst11*r20);
IkReal x11968=(sj1*sj2);
IkReal x11969=(cj1*cj2);
CheckValue<IkReal> x11970 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11969))+((r22*x11968)))),IkReal(((((-1.0)*x11967*x11968))+(((-1.0)*x11966*x11969))+((x11966*x11968))+((x11967*x11969)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11970.valid){
continue;
}
CheckValue<IkReal> x11971=IKPowWithIntegerCheck(IKsign(((x11967*x11967)+(x11966*x11966)+(r22*r22)+(((-2.0)*x11966*x11967)))),-1);
if(!x11971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11970.value)+(((1.5707963267949)*(x11971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11972=IKsin(j4);
IkReal x11973=IKcos(j4);
IkReal x11974=((1.0)*cj2);
IkReal x11975=((1.0)*sj0);
IkReal x11976=(cj1*sj2);
IkReal x11977=((1.0)*x11973);
IkReal x11978=(gconst10*x11972);
IkReal x11979=((1.0)*x11972);
IkReal x11980=(gconst11*x11973);
IkReal x11981=(gconst11*x11979);
evalcond[0]=((((-1.0)*r22*x11977))+(((-1.0)*r20*x11981))+((r21*x11978)));
evalcond[1]=((((-1.0)*r12*x11977))+cj0+((r11*x11978))+(((-1.0)*r10*x11981)));
evalcond[2]=(((r01*x11978))+(((-1.0)*r00*x11981))+(((-1.0)*x11975))+(((-1.0)*r02*x11977)));
evalcond[3]=((((-1.0)*cj1*x11974))+((sj1*sj2))+((r20*x11980))+(((-1.0)*r22*x11979))+(((-1.0)*gconst10*r21*x11977)));
evalcond[4]=((((-1.0)*cj0*sj1*x11974))+(((-1.0)*gconst10*r01*x11977))+((r00*x11980))+(((-1.0)*r02*x11979))+(((-1.0)*cj0*x11976)));
evalcond[5]=(((r10*x11980))+(((-1.0)*r12*x11979))+(((-1.0)*gconst10*r11*x11977))+(((-1.0)*sj0*sj1*x11974))+(((-1.0)*x11975*x11976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11982=((1.0)*sj0);
IkReal x11983=((1.0)*gconst10);
CheckValue<IkReal> x11984 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11982))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x11982))+(((-1.0)*cj0*r01*x11983))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11984.valid){
continue;
}
CheckValue<IkReal> x11985=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x11983)))),-1);
if(!x11985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11984.value)+(((1.5707963267949)*(x11985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11986=IKsin(j4);
IkReal x11987=IKcos(j4);
IkReal x11988=((1.0)*cj2);
IkReal x11989=((1.0)*sj0);
IkReal x11990=(cj1*sj2);
IkReal x11991=((1.0)*x11987);
IkReal x11992=(gconst10*x11986);
IkReal x11993=((1.0)*x11986);
IkReal x11994=(gconst11*x11987);
IkReal x11995=(gconst11*x11993);
evalcond[0]=(((r21*x11992))+(((-1.0)*r20*x11995))+(((-1.0)*r22*x11991)));
evalcond[1]=(cj0+(((-1.0)*r12*x11991))+(((-1.0)*r10*x11995))+((r11*x11992)));
evalcond[2]=((((-1.0)*r02*x11991))+(((-1.0)*x11989))+((r01*x11992))+(((-1.0)*r00*x11995)));
evalcond[3]=(((r20*x11994))+(((-1.0)*gconst10*r21*x11991))+((sj1*sj2))+(((-1.0)*cj1*x11988))+(((-1.0)*r22*x11993)));
evalcond[4]=((((-1.0)*r02*x11993))+(((-1.0)*cj0*sj1*x11988))+(((-1.0)*cj0*x11990))+((r00*x11994))+(((-1.0)*gconst10*r01*x11991)));
evalcond[5]=((((-1.0)*x11989*x11990))+(((-1.0)*sj0*sj1*x11988))+(((-1.0)*r12*x11993))+(((-1.0)*gconst10*r11*x11991))+((r10*x11994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11996=((1.0)*gconst11);
CheckValue<IkReal> x11997=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11996)))),-1);
if(!x11997.valid){
continue;
}
CheckValue<IkReal> x11998 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x11996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11997.value)))+(x11998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11999=IKsin(j4);
IkReal x12000=IKcos(j4);
IkReal x12001=((1.0)*cj2);
IkReal x12002=((1.0)*sj0);
IkReal x12003=(cj1*sj2);
IkReal x12004=((1.0)*x12000);
IkReal x12005=(gconst10*x11999);
IkReal x12006=((1.0)*x11999);
IkReal x12007=(gconst11*x12000);
IkReal x12008=(gconst11*x12006);
evalcond[0]=(((r21*x12005))+(((-1.0)*r22*x12004))+(((-1.0)*r20*x12008)));
evalcond[1]=((((-1.0)*r10*x12008))+cj0+(((-1.0)*r12*x12004))+((r11*x12005)));
evalcond[2]=((((-1.0)*x12002))+(((-1.0)*r00*x12008))+((r01*x12005))+(((-1.0)*r02*x12004)));
evalcond[3]=(((r20*x12007))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12004))+(((-1.0)*r22*x12006))+(((-1.0)*cj1*x12001)));
evalcond[4]=((((-1.0)*gconst10*r01*x12004))+((r00*x12007))+(((-1.0)*cj0*sj1*x12001))+(((-1.0)*r02*x12006))+(((-1.0)*cj0*x12003)));
evalcond[5]=((((-1.0)*sj0*sj1*x12001))+(((-1.0)*gconst10*r11*x12004))+(((-1.0)*x12002*x12003))+(((-1.0)*r12*x12006))+((r10*x12007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12009=((-1.0)*r11);
CheckValue<IkReal> x12012 = IKatan2WithCheck(IkReal(x12009),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12012.valid){
continue;
}
IkReal x12010=((1.0)*(x12012.value));
IkReal x12011=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12010)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12010)));
IkReal gconst10=(x12009*x12011);
IkReal gconst11=((1.0)*r10*x12011);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12013=((-1.0)*r11);
CheckValue<IkReal> x12016 = IKatan2WithCheck(IkReal(x12013),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12016.valid){
continue;
}
IkReal x12014=((1.0)*(x12016.value));
IkReal x12015=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12014)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12014)));
IkReal gconst10=(x12013*x12015);
IkReal gconst11=((1.0)*r10*x12015);
IkReal x12017=r12*r12;
IkReal x12018=((1.0)*sj0);
IkReal x12019=(cj0*r02);
IkReal x12020=x11756;
j4eval[0]=((IKabs(((((-1.0)*r12*x12018))+(((-1.0)*x12019)))))+(IKabs((((sj0*x12017*x12020))+((r12*x12019*x12020))+(((-1.0)*x12018*x12020))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12021=((-1.0)*r11);
CheckValue<IkReal> x12024 = IKatan2WithCheck(IkReal(x12021),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12024.valid){
continue;
}
IkReal x12022=((1.0)*(x12024.value));
IkReal x12023=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12022)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12022)));
IkReal gconst10=(x12021*x12023);
IkReal gconst11=((1.0)*r10*x12023);
IkReal x12025=r12*r12;
IkReal x12026=((1.0)+(((-1.0)*x12025)));
IkReal x12027=(r22*sj1*sj2);
IkReal x12028=(cj1*cj2*r22);
CheckValue<IkReal> x12035=IKPowWithIntegerCheck(x12026,-1);
if(!x12035.valid){
continue;
}
IkReal x12029=x12035.value;
CheckValue<IkReal> x12036=IKPowWithIntegerCheck(((-1.0)+x12025),-1);
if(!x12036.valid){
continue;
}
IkReal x12030=x12036.value;
IkReal x12031=((1.0)*x12029);
if((x12026) < -0.00001)
continue;
IkReal x12032=IKsqrt(x12026);
IkReal x12033=(r12*x12030*x12032);
IkReal x12034=((((-1.0)*x12031*(r10*r10)*(r20*r20)))+(((-1.0)*x12031*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x12029)));
j4eval[0]=x12034;
j4eval[1]=((IKabs(((((-1.0)*x12028))+x12027)))+(IKabs((((x12028*x12033))+(((-1.0)*x12027*x12033))))));
j4eval[2]=IKsign(x12034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12037=((-1.0)*r11);
CheckValue<IkReal> x12040 = IKatan2WithCheck(IkReal(x12037),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12040.valid){
continue;
}
IkReal x12038=((1.0)*(x12040.value));
IkReal x12039=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12038)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12038)));
IkReal gconst10=(x12037*x12039);
IkReal gconst11=((1.0)*r10*x12039);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12041=((-1.0)*r11);
CheckValue<IkReal> x12044 = IKatan2WithCheck(IkReal(x12041),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12044.valid){
continue;
}
IkReal x12042=((1.0)*(x12044.value));
IkReal x12043=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12042)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12042)));
IkReal gconst10=(x12041*x12043);
IkReal gconst11=((1.0)*r10*x12043);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12045=((-1.0)*r11);
CheckValue<IkReal> x12048 = IKatan2WithCheck(IkReal(x12045),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12048.valid){
continue;
}
IkReal x12046=((1.0)*(x12048.value));
IkReal x12047=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12046)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12046)));
IkReal gconst10=(x12045*x12047);
IkReal gconst11=((1.0)*r10*x12047);
IkReal x12049=(cj1*r02*sj2);
IkReal x12050=(cj2*r02*sj1);
IkReal x12051=x11756;
IkReal x12052=(r12*x12051);
j4eval[0]=((IKabs((((x12050*x12052))+((x12049*x12052)))))+(IKabs((x12050+x12049))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12053=(cj1*sj2);
IkReal x12054=(cj2*sj1);
IkReal x12055=(gconst11*r00);
IkReal x12056=((1.0)*gconst10*r01);
CheckValue<IkReal> x12057=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12057.valid){
continue;
}
CheckValue<IkReal> x12058 = IKatan2WithCheck(IkReal((((x12053*x12055))+(((-1.0)*x12054*x12056))+(((-1.0)*x12053*x12056))+((x12054*x12055)))),IkReal((((r02*x12053))+((r02*x12054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12057.value)))+(x12058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12059=IKcos(j4);
IkReal x12060=IKsin(j4);
IkReal x12061=((1.0)*cj2);
IkReal x12062=((1.0)*x12059);
IkReal x12063=(gconst10*x12059);
IkReal x12064=(gconst10*x12060);
IkReal x12065=((1.0)*gconst11*x12060);
evalcond[0]=(((r01*x12063))+(((-1.0)*gconst11*r00*x12062))+((r02*x12060)));
evalcond[1]=(((r21*x12064))+(((-1.0)*r20*x12065))+(((-1.0)*r22*x12062)));
evalcond[2]=((((-1.0)*r10*x12065))+(((-1.0)*r12*x12062))+((r11*x12064)));
evalcond[3]=((-1.0)+((r01*x12064))+(((-1.0)*r02*x12062))+(((-1.0)*r00*x12065)));
evalcond[4]=(((r21*x12063))+(((-1.0)*gconst11*r20*x12062))+((r22*x12060))+((sj1*sj2))+(((-1.0)*cj1*x12061)));
evalcond[5]=(((r12*x12060))+(((-1.0)*gconst11*r10*x12062))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12061))+((r11*x12063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12066=(gconst10*r01);
IkReal x12067=(gconst11*r00);
CheckValue<IkReal> x12068=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12066*x12067))+(x12067*x12067)+(r02*r02)+(x12066*x12066))),-1);
if(!x12068.valid){
continue;
}
CheckValue<IkReal> x12069 = IKatan2WithCheck(IkReal(((((-1.0)*x12067))+x12066)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12068.value)))+(x12069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12070=IKcos(j4);
IkReal x12071=IKsin(j4);
IkReal x12072=((1.0)*cj2);
IkReal x12073=((1.0)*x12070);
IkReal x12074=(gconst10*x12070);
IkReal x12075=(gconst10*x12071);
IkReal x12076=((1.0)*gconst11*x12071);
evalcond[0]=((((-1.0)*gconst11*r00*x12073))+((r02*x12071))+((r01*x12074)));
evalcond[1]=((((-1.0)*r20*x12076))+(((-1.0)*r22*x12073))+((r21*x12075)));
evalcond[2]=(((r11*x12075))+(((-1.0)*r10*x12076))+(((-1.0)*r12*x12073)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12073))+(((-1.0)*r00*x12076))+((r01*x12075)));
evalcond[4]=((((-1.0)*gconst11*r20*x12073))+((sj1*sj2))+((r22*x12071))+(((-1.0)*cj1*x12072))+((r21*x12074)));
evalcond[5]=(((r11*x12074))+(((-1.0)*gconst11*r10*x12073))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12072))+((r12*x12071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12077 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12077.valid){
continue;
}
CheckValue<IkReal> x12078=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12077.value)+(((1.5707963267949)*(x12078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12079=IKcos(j4);
IkReal x12080=IKsin(j4);
IkReal x12081=((1.0)*cj2);
IkReal x12082=((1.0)*x12079);
IkReal x12083=(gconst10*x12079);
IkReal x12084=(gconst10*x12080);
IkReal x12085=((1.0)*gconst11*x12080);
evalcond[0]=(((r02*x12080))+((r01*x12083))+(((-1.0)*gconst11*r00*x12082)));
evalcond[1]=((((-1.0)*r22*x12082))+((r21*x12084))+(((-1.0)*r20*x12085)));
evalcond[2]=((((-1.0)*r12*x12082))+((r11*x12084))+(((-1.0)*r10*x12085)));
evalcond[3]=((-1.0)+((r01*x12084))+(((-1.0)*r00*x12085))+(((-1.0)*r02*x12082)));
evalcond[4]=(((sj1*sj2))+((r22*x12080))+((r21*x12083))+(((-1.0)*gconst11*r20*x12082))+(((-1.0)*cj1*x12081)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12082))+((r12*x12080))+((r11*x12083))+(((-1.0)*sj1*x12081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12086=((-1.0)*r11);
CheckValue<IkReal> x12089 = IKatan2WithCheck(IkReal(x12086),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12089.valid){
continue;
}
IkReal x12087=((1.0)*(x12089.value));
IkReal x12088=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12087)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12087)));
IkReal gconst10=(x12086*x12088);
IkReal gconst11=((1.0)*r10*x12088);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12090=((-1.0)*r11);
CheckValue<IkReal> x12093 = IKatan2WithCheck(IkReal(x12090),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12093.valid){
continue;
}
IkReal x12091=((1.0)*(x12093.value));
IkReal x12092=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12091)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12091)));
IkReal gconst10=(x12090*x12092);
IkReal gconst11=((1.0)*r10*x12092);
IkReal x12094=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12098=IKPowWithIntegerCheck(x12094,-1);
if(!x12098.valid){
continue;
}
IkReal x12095=x12098.value;
IkReal x12096=((1.0)*x12095);
IkReal x12097=((((-1.0)*(r02*r02)))+(((-1.0)*x12096*(r00*r00)*(r10*r10)))+(((-1.0)*x12096*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x12095)));
j4eval[0]=x12097;
j4eval[1]=r02;
j4eval[2]=x12094;
j4eval[3]=IKsign(x12097);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12099=((-1.0)*r11);
CheckValue<IkReal> x12102 = IKatan2WithCheck(IkReal(x12099),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12102.valid){
continue;
}
IkReal x12100=((1.0)*(x12102.value));
IkReal x12101=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12100)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12100)));
IkReal gconst10=(x12099*x12101);
IkReal gconst11=((1.0)*r10*x12101);
IkReal x12103=r12*r12;
IkReal x12104=((1.0)*r02);
IkReal x12105=(cj1*sj2);
IkReal x12106=(cj2*sj1);
CheckValue<IkReal> x12110=IKPowWithIntegerCheck(((-1.0)+x12103),-1);
if(!x12110.valid){
continue;
}
IkReal x12107=x12110.value;
if((((1.0)+(((-1.0)*x12103)))) < -0.00001)
continue;
IkReal x12108=IKsqrt(((1.0)+(((-1.0)*x12103))));
IkReal x12109=(r12*x12107*x12108);
j4eval[0]=((IKabs(((((-1.0)*x12104*x12106))+(((-1.0)*x12104*x12105)))))+(IKabs(((((-1.0)*x12104*x12106*x12109))+(((-1.0)*x12104*x12105*x12109))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12111=(cj1*sj2);
IkReal x12112=(gconst10*r01);
IkReal x12113=(cj2*sj1);
IkReal x12114=((1.0)*r02);
IkReal x12115=((1.0)*gconst11*r00);
CheckValue<IkReal> x12116=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12116.valid){
continue;
}
CheckValue<IkReal> x12117 = IKatan2WithCheck(IkReal((((x12112*x12113))+(((-1.0)*x12111*x12115))+((x12111*x12112))+(((-1.0)*x12113*x12115)))),IkReal(((((-1.0)*x12111*x12114))+(((-1.0)*x12113*x12114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12116.value)))+(x12117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12118=IKcos(j4);
IkReal x12119=IKsin(j4);
IkReal x12120=((1.0)*x12118);
IkReal x12121=(gconst10*x12118);
IkReal x12122=(gconst10*x12119);
IkReal x12123=((1.0)*gconst11*x12119);
evalcond[0]=(((r02*x12119))+((r01*x12121))+(((-1.0)*gconst11*r00*x12120)));
evalcond[1]=((((-1.0)*r20*x12123))+((r21*x12122))+(((-1.0)*r22*x12120)));
evalcond[2]=((((-1.0)*r12*x12120))+(((-1.0)*r10*x12123))+((r11*x12122)));
evalcond[3]=((1.0)+((r01*x12122))+(((-1.0)*r02*x12120))+(((-1.0)*r00*x12123)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x12119))+(((-1.0)*gconst11*r10*x12120))+((r11*x12121)));
evalcond[5]=(((r21*x12121))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12120))+((r22*x12119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12124=(gconst10*r01);
IkReal x12125=(gconst11*r00);
CheckValue<IkReal> x12126=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x12124*x12124)))+(((-1.0)*(x12125*x12125)))+(((2.0)*x12124*x12125)))),-1);
if(!x12126.valid){
continue;
}
CheckValue<IkReal> x12127 = IKatan2WithCheck(IkReal((x12124+(((-1.0)*x12125)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12126.value)))+(x12127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12128=IKcos(j4);
IkReal x12129=IKsin(j4);
IkReal x12130=((1.0)*x12128);
IkReal x12131=(gconst10*x12128);
IkReal x12132=(gconst10*x12129);
IkReal x12133=((1.0)*gconst11*x12129);
evalcond[0]=((((-1.0)*gconst11*r00*x12130))+((r01*x12131))+((r02*x12129)));
evalcond[1]=((((-1.0)*r20*x12133))+((r21*x12132))+(((-1.0)*r22*x12130)));
evalcond[2]=((((-1.0)*r12*x12130))+(((-1.0)*r10*x12133))+((r11*x12132)));
evalcond[3]=((1.0)+((r01*x12132))+(((-1.0)*r00*x12133))+(((-1.0)*r02*x12130)));
evalcond[4]=(((cj2*sj1))+((r12*x12129))+((cj1*sj2))+(((-1.0)*gconst11*r10*x12130))+((r11*x12131)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12131))+((r22*x12129))+(((-1.0)*gconst11*r20*x12130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12134=((1.0)*gconst11);
CheckValue<IkReal> x12135 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12134)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12135.valid){
continue;
}
CheckValue<IkReal> x12136=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12134))+(((-1.0)*gconst10*r20)))),-1);
if(!x12136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12135.value)+(((1.5707963267949)*(x12136.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12137=IKcos(j4);
IkReal x12138=IKsin(j4);
IkReal x12139=((1.0)*x12137);
IkReal x12140=(gconst10*x12137);
IkReal x12141=(gconst10*x12138);
IkReal x12142=((1.0)*gconst11*x12138);
evalcond[0]=((((-1.0)*gconst11*r00*x12139))+((r01*x12140))+((r02*x12138)));
evalcond[1]=((((-1.0)*r22*x12139))+(((-1.0)*r20*x12142))+((r21*x12141)));
evalcond[2]=(((r11*x12141))+(((-1.0)*r12*x12139))+(((-1.0)*r10*x12142)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12142))+((r01*x12141))+(((-1.0)*r02*x12139)));
evalcond[4]=(((cj2*sj1))+((r12*x12138))+((cj1*sj2))+((r11*x12140))+(((-1.0)*gconst11*r10*x12139)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12138))+((r21*x12140))+(((-1.0)*gconst11*r20*x12139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12143=((-1.0)*r11);
IkReal x12144=((-1.0)*r10);
CheckValue<IkReal> x12146 = IKatan2WithCheck(IkReal(x12143),IkReal(x12144),IKFAST_ATAN2_MAGTHRESH);
if(!x12146.valid){
continue;
}
IkReal x12145=((1.0)*(x12146.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12145)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12144);
rxp1_1=(px*r21);
rxp1_2=(px*x12143);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12145)));
IkReal gconst10=x12143;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12147=((-1.0)*r11);
IkReal x12148=((-1.0)*r10);
CheckValue<IkReal> x12150 = IKatan2WithCheck(IkReal(x12147),IkReal(x12148),IKFAST_ATAN2_MAGTHRESH);
if(!x12150.valid){
continue;
}
IkReal x12149=((1.0)*(x12150.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12149)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12148);
rxp1_1=(px*r21);
rxp1_2=(px*x12147);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12149)));
IkReal gconst10=x12147;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12151=((-1.0)*r11);
IkReal x12152=((-1.0)*r10);
CheckValue<IkReal> x12154 = IKatan2WithCheck(IkReal(x12151),IkReal(x12152),IKFAST_ATAN2_MAGTHRESH);
if(!x12154.valid){
continue;
}
IkReal x12153=((1.0)*(x12154.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12153)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12152);
rxp1_1=(px*r21);
rxp1_2=(px*x12151);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12153)));
IkReal gconst10=x12151;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12157=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12157.valid){
continue;
}
IkReal x12155=x12157.value;
IkReal x12156=(sj0*x12155);
cj4array[0]=(((cj1*sj2*x12156))+((cj2*sj1*x12156)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12158=IKsin(j4);
IkReal x12159=IKcos(j4);
IkReal x12160=(gconst10*r21);
IkReal x12161=((1.0)*x12159);
IkReal x12162=((1.0)*gconst11*x12158);
evalcond[0]=(r02*x12158);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12161)));
evalcond[2]=(((x12158*x12160))+(((-1.0)*r20*x12162)));
evalcond[3]=(((gconst10*r11*x12158))+(((-1.0)*r10*x12162)));
evalcond[4]=(((x12159*x12160))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12164=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12164.valid){
continue;
}
IkReal x12163=x12164.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12163))+((cj1*cj2*x12163)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12165=IKsin(j4);
IkReal x12166=IKcos(j4);
IkReal x12167=((1.0)*sj0);
IkReal x12168=(gconst10*x12165);
IkReal x12169=((1.0)*x12166);
IkReal x12170=((1.0)*gconst11*x12165);
evalcond[0]=(r02*x12165);
evalcond[1]=((((-1.0)*x12167))+(((-1.0)*r02*x12169)));
evalcond[2]=(((r21*x12168))+(((-1.0)*r20*x12170)));
evalcond[3]=((((-1.0)*r10*x12170))+((r11*x12168)));
evalcond[4]=((((-1.0)*gconst11*r10*x12169))+((gconst10*r11*x12166))+(((-1.0)*cj1*sj2*x12167))+(((-1.0)*cj2*sj1*x12167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12171=IKPowWithIntegerCheck(r02,-1);
if(!x12171.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12171.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12172=IKsin(j4);
IkReal x12173=IKcos(j4);
IkReal x12174=(gconst10*r21);
IkReal x12175=((1.0)*cj1);
IkReal x12176=(gconst10*r11);
IkReal x12177=((1.0)*gconst11*x12172);
IkReal x12178=((1.0)*gconst11*x12173);
evalcond[0]=(r02*x12172);
evalcond[1]=((((-1.0)*r20*x12177))+((x12172*x12174)));
evalcond[2]=((((-1.0)*r10*x12177))+((x12172*x12176)));
evalcond[3]=(((x12173*x12174))+((sj1*sj2))+(((-1.0)*r20*x12178))+(((-1.0)*cj2*x12175)));
evalcond[4]=((((-1.0)*sj0*sj2*x12175))+((x12173*x12176))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x12178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12179=((1.0)*gconst11);
CheckValue<IkReal> x12180 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12179))+(((-1.0)*r10*sj0*x12179))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12180.valid){
continue;
}
CheckValue<IkReal> x12181=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12180.value)+(((1.5707963267949)*(x12181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12182=IKsin(j4);
IkReal x12183=IKcos(j4);
IkReal x12184=((1.0)*gconst11);
IkReal x12185=((1.0)*cj2);
IkReal x12186=((1.0)*sj0);
IkReal x12187=(cj1*sj2);
IkReal x12188=(gconst10*x12183);
IkReal x12189=(gconst10*x12182);
IkReal x12190=((1.0)*x12183);
evalcond[0]=(((r21*x12189))+(((-1.0)*r20*x12182*x12184)));
evalcond[1]=(cj0+((r11*x12189))+(((-1.0)*r10*x12182*x12184))+(((-1.0)*r12*x12190)));
evalcond[2]=(((sj1*sj2))+((r21*x12188))+(((-1.0)*r20*x12183*x12184))+(((-1.0)*cj1*x12185)));
evalcond[3]=((((-1.0)*x12186))+(((-1.0)*r00*x12182*x12184))+(((-1.0)*r02*x12190))+((r01*x12189)));
evalcond[4]=((((-1.0)*r00*x12183*x12184))+(((-1.0)*cj0*x12187))+((r02*x12182))+(((-1.0)*cj0*sj1*x12185))+((r01*x12188)));
evalcond[5]=(((r12*x12182))+((r11*x12188))+(((-1.0)*x12186*x12187))+(((-1.0)*sj0*sj1*x12185))+(((-1.0)*r10*x12183*x12184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12191=(gconst10*r21);
IkReal x12192=(gconst11*r20);
IkReal x12193=(sj1*sj2);
IkReal x12194=(cj1*cj2);
CheckValue<IkReal> x12195 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12194))+((r22*x12193)))),IkReal((((x12191*x12193))+(((-1.0)*x12191*x12194))+(((-1.0)*x12192*x12193))+((x12192*x12194)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12195.valid){
continue;
}
CheckValue<IkReal> x12196=IKPowWithIntegerCheck(IKsign(((((2.0)*x12191*x12192))+(((-1.0)*(x12191*x12191)))+(((-1.0)*(x12192*x12192)))+(((-1.0)*(r22*r22))))),-1);
if(!x12196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12195.value)+(((1.5707963267949)*(x12196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12197=IKsin(j4);
IkReal x12198=IKcos(j4);
IkReal x12199=((1.0)*cj2);
IkReal x12200=((1.0)*sj0);
IkReal x12201=(cj1*sj2);
IkReal x12202=((1.0)*x12198);
IkReal x12203=(gconst10*x12198);
IkReal x12204=(gconst10*x12197);
IkReal x12205=((1.0)*gconst11*x12197);
evalcond[0]=((((-1.0)*r22*x12202))+((r21*x12204))+(((-1.0)*r20*x12205)));
evalcond[1]=(cj0+(((-1.0)*r12*x12202))+(((-1.0)*r10*x12205))+((r11*x12204)));
evalcond[2]=((((-1.0)*r02*x12202))+(((-1.0)*r00*x12205))+((r01*x12204))+(((-1.0)*x12200)));
evalcond[3]=(((sj1*sj2))+((r22*x12197))+(((-1.0)*gconst11*r20*x12202))+((r21*x12203))+(((-1.0)*cj1*x12199)));
evalcond[4]=((((-1.0)*gconst11*r00*x12202))+(((-1.0)*cj0*x12201))+((r02*x12197))+((r01*x12203))+(((-1.0)*cj0*sj1*x12199)));
evalcond[5]=(((r12*x12197))+(((-1.0)*gconst11*r10*x12202))+(((-1.0)*x12200*x12201))+(((-1.0)*sj0*sj1*x12199))+((r11*x12203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12206=((1.0)*sj0);
IkReal x12207=((1.0)*gconst10);
CheckValue<IkReal> x12208=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12207)))),-1);
if(!x12208.valid){
continue;
}
CheckValue<IkReal> x12209 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12206))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12207))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x12206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12208.value)))+(x12209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12210=IKsin(j4);
IkReal x12211=IKcos(j4);
IkReal x12212=((1.0)*cj2);
IkReal x12213=((1.0)*sj0);
IkReal x12214=(cj1*sj2);
IkReal x12215=((1.0)*x12211);
IkReal x12216=(gconst10*x12211);
IkReal x12217=(gconst10*x12210);
IkReal x12218=((1.0)*gconst11*x12210);
evalcond[0]=((((-1.0)*r22*x12215))+((r21*x12217))+(((-1.0)*r20*x12218)));
evalcond[1]=(cj0+(((-1.0)*r12*x12215))+(((-1.0)*r10*x12218))+((r11*x12217)));
evalcond[2]=((((-1.0)*x12213))+(((-1.0)*r02*x12215))+(((-1.0)*r00*x12218))+((r01*x12217)));
evalcond[3]=(((r22*x12210))+(((-1.0)*cj1*x12212))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12215))+((r21*x12216)));
evalcond[4]=((((-1.0)*gconst11*r00*x12215))+((r02*x12210))+(((-1.0)*cj0*x12214))+(((-1.0)*cj0*sj1*x12212))+((r01*x12216)));
evalcond[5]=((((-1.0)*gconst11*r10*x12215))+(((-1.0)*sj0*sj1*x12212))+((r12*x12210))+(((-1.0)*x12213*x12214))+((r11*x12216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12219=((1.0)*gconst11);
CheckValue<IkReal> x12220 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12219))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12220.valid){
continue;
}
CheckValue<IkReal> x12221=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12219)))),-1);
if(!x12221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12220.value)+(((1.5707963267949)*(x12221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12222=IKsin(j4);
IkReal x12223=IKcos(j4);
IkReal x12224=((1.0)*cj2);
IkReal x12225=((1.0)*sj0);
IkReal x12226=(cj1*sj2);
IkReal x12227=((1.0)*x12223);
IkReal x12228=(gconst10*x12223);
IkReal x12229=(gconst10*x12222);
IkReal x12230=((1.0)*gconst11*x12222);
evalcond[0]=((((-1.0)*r20*x12230))+(((-1.0)*r22*x12227))+((r21*x12229)));
evalcond[1]=(((r11*x12229))+cj0+(((-1.0)*r12*x12227))+(((-1.0)*r10*x12230)));
evalcond[2]=((((-1.0)*x12225))+(((-1.0)*r00*x12230))+((r01*x12229))+(((-1.0)*r02*x12227)));
evalcond[3]=((((-1.0)*cj1*x12224))+((r22*x12222))+((sj1*sj2))+((r21*x12228))+(((-1.0)*gconst11*r20*x12227)));
evalcond[4]=(((r02*x12222))+((r01*x12228))+(((-1.0)*cj0*sj1*x12224))+(((-1.0)*gconst11*r00*x12227))+(((-1.0)*cj0*x12226)));
evalcond[5]=((((-1.0)*x12225*x12226))+((r11*x12228))+(((-1.0)*sj0*sj1*x12224))+((r12*x12222))+(((-1.0)*gconst11*r10*x12227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12231=((-1.0)*r11);
CheckValue<IkReal> x12234 = IKatan2WithCheck(IkReal(x12231),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12234.valid){
continue;
}
IkReal x12232=((1.0)*(x12234.value));
IkReal x12233=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12232)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12232)));
IkReal gconst10=(x12231*x12233);
IkReal gconst11=((1.0)*r10*x12233);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12235=gconst10*gconst10;
IkReal x12236=gconst11*gconst11;
IkReal x12237=(gconst10*r21);
IkReal x12238=(cj3*r00);
IkReal x12239=(r00*sj3);
IkReal x12240=((1.0)*gconst11);
IkReal x12241=(gconst10*r20);
IkReal x12242=(r01*sj3);
IkReal x12243=(cj3*gconst11*r01);
IkReal x12244=(r21*x12235);
IkReal x12245=(r20*x12236);
CheckValue<IkReal> x12246 = IKatan2WithCheck(IkReal((((gconst10*r22*x12238))+((r22*x12243)))),IkReal((((x12238*x12244))+(((-1.0)*cj3*r01*x12245))+((x12237*x12243))+(((-1.0)*x12238*x12240*x12241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12246.valid){
continue;
}
CheckValue<IkReal> x12247=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12240*x12241*x12242))+(((-1.0)*x12237*x12239*x12240))+((x12242*x12244))+((x12239*x12245))+((r02*r22*sj3)))),-1);
if(!x12247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12246.value)+(((1.5707963267949)*(x12247.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12248=IKsin(j4);
IkReal x12249=IKcos(j4);
IkReal x12250=(sj1*sj2);
IkReal x12251=(gconst10*sj3);
IkReal x12252=(cj3*gconst10);
IkReal x12253=(gconst11*r20);
IkReal x12254=(gconst11*r21);
IkReal x12255=(gconst11*r00);
IkReal x12256=(cj3*gconst11);
IkReal x12257=(gconst11*r10);
IkReal x12258=((1.0)*cj1);
IkReal x12259=(cj2*sj1);
IkReal x12260=(gconst11*sj3);
IkReal x12261=(cj2*x12258);
IkReal x12262=((1.0)*x12249);
IkReal x12263=((1.0)*x12248);
IkReal x12264=(gconst10*x12248);
IkReal x12265=(cj3*x12248);
IkReal x12266=(sj3*x12249);
evalcond[0]=((((-1.0)*x12253*x12263))+((r21*x12264))+(((-1.0)*r22*x12262)));
evalcond[1]=((((-1.0)*r12*x12262))+((r11*x12264))+(((-1.0)*x12257*x12263)));
evalcond[2]=((-1.0)+((r01*x12264))+(((-1.0)*x12255*x12263))+(((-1.0)*r02*x12262)));
evalcond[3]=((((-1.0)*cj3*x12255*x12262))+((r01*x12260))+((r00*x12251))+((r01*x12249*x12252))+((r02*x12265)));
evalcond[4]=(((r01*x12256))+((r00*x12252))+((x12255*x12266))+(((-1.0)*r02*sj3*x12263))+(((-1.0)*r01*x12251*x12262)));
evalcond[5]=(((r21*x12249*x12252))+((cj1*sj2))+x12259+((r20*x12251))+(((-1.0)*cj3*x12253*x12262))+((r22*x12265))+((sj3*x12254)));
evalcond[6]=(((r12*x12265))+((r11*x12260))+((r10*x12251))+x12250+((r11*x12249*x12252))+(((-1.0)*x12261))+(((-1.0)*r10*x12256*x12262)));
evalcond[7]=((((-1.0)*r22*sj3*x12263))+((x12253*x12266))+(((-1.0)*r21*x12251*x12262))+((cj3*x12254))+x12250+((r20*x12252))+(((-1.0)*x12261)));
evalcond[8]=(((r10*x12252))+((x12257*x12266))+((r11*x12256))+(((-1.0)*x12259))+(((-1.0)*r12*sj3*x12263))+(((-1.0)*sj2*x12258))+(((-1.0)*r11*x12251*x12262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12267 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12267.valid){
continue;
}
CheckValue<IkReal> x12268=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12267.value)+(((1.5707963267949)*(x12268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12269=IKsin(j4);
IkReal x12270=IKcos(j4);
IkReal x12271=(sj1*sj2);
IkReal x12272=(gconst10*sj3);
IkReal x12273=(cj3*gconst10);
IkReal x12274=(gconst11*r20);
IkReal x12275=(gconst11*r21);
IkReal x12276=(gconst11*r00);
IkReal x12277=(cj3*gconst11);
IkReal x12278=(gconst11*r10);
IkReal x12279=((1.0)*cj1);
IkReal x12280=(cj2*sj1);
IkReal x12281=(gconst11*sj3);
IkReal x12282=(cj2*x12279);
IkReal x12283=((1.0)*x12270);
IkReal x12284=((1.0)*x12269);
IkReal x12285=(gconst10*x12269);
IkReal x12286=(cj3*x12269);
IkReal x12287=(sj3*x12270);
evalcond[0]=((((-1.0)*r22*x12283))+(((-1.0)*x12274*x12284))+((r21*x12285)));
evalcond[1]=((((-1.0)*r12*x12283))+(((-1.0)*x12278*x12284))+((r11*x12285)));
evalcond[2]=((-1.0)+(((-1.0)*x12276*x12284))+((r01*x12285))+(((-1.0)*r02*x12283)));
evalcond[3]=(((r01*x12270*x12273))+((r02*x12286))+((r01*x12281))+((r00*x12272))+(((-1.0)*cj3*x12276*x12283)));
evalcond[4]=(((x12276*x12287))+(((-1.0)*r02*sj3*x12284))+(((-1.0)*r01*x12272*x12283))+((r00*x12273))+((r01*x12277)));
evalcond[5]=(((r20*x12272))+((r22*x12286))+((cj1*sj2))+x12280+((sj3*x12275))+(((-1.0)*cj3*x12274*x12283))+((r21*x12270*x12273)));
evalcond[6]=((((-1.0)*r10*x12277*x12283))+x12271+((r12*x12286))+((r11*x12281))+((r10*x12272))+((r11*x12270*x12273))+(((-1.0)*x12282)));
evalcond[7]=(((r20*x12273))+((x12274*x12287))+x12271+((cj3*x12275))+(((-1.0)*r21*x12272*x12283))+(((-1.0)*r22*sj3*x12284))+(((-1.0)*x12282)));
evalcond[8]=((((-1.0)*r12*sj3*x12284))+(((-1.0)*sj2*x12279))+(((-1.0)*x12280))+((x12278*x12287))+((r10*x12273))+((r11*x12277))+(((-1.0)*r11*x12272*x12283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12288=((-1.0)*r11);
CheckValue<IkReal> x12291 = IKatan2WithCheck(IkReal(x12288),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12291.valid){
continue;
}
IkReal x12289=((1.0)*(x12291.value));
IkReal x12290=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12289)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12289)));
IkReal gconst10=(x12288*x12290);
IkReal gconst11=((1.0)*r10*x12290);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12292=gconst10*gconst10;
IkReal x12293=gconst11*gconst11;
IkReal x12294=(gconst10*r21);
IkReal x12295=(cj3*r00);
IkReal x12296=(r00*sj3);
IkReal x12297=((1.0)*gconst11);
IkReal x12298=(gconst10*r20);
IkReal x12299=(r01*sj3);
IkReal x12300=(cj3*gconst11*r01);
IkReal x12301=(r21*x12292);
IkReal x12302=(r20*x12293);
CheckValue<IkReal> x12303 = IKatan2WithCheck(IkReal((((gconst10*r22*x12295))+((r22*x12300)))),IkReal(((((-1.0)*cj3*r01*x12302))+((x12295*x12301))+((x12294*x12300))+(((-1.0)*x12295*x12297*x12298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12303.valid){
continue;
}
CheckValue<IkReal> x12304=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12294*x12296*x12297))+((x12299*x12301))+((x12296*x12302))+(((-1.0)*x12297*x12298*x12299))+((r02*r22*sj3)))),-1);
if(!x12304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12303.value)+(((1.5707963267949)*(x12304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12305=IKsin(j4);
IkReal x12306=IKcos(j4);
IkReal x12307=(cj2*sj1);
IkReal x12308=(cj1*sj2);
IkReal x12309=(gconst10*sj3);
IkReal x12310=(cj3*gconst10);
IkReal x12311=(gconst11*r20);
IkReal x12312=(gconst11*r21);
IkReal x12313=(gconst11*r00);
IkReal x12314=(sj1*sj2);
IkReal x12315=(cj3*gconst11);
IkReal x12316=(gconst11*r10);
IkReal x12317=(cj1*cj2);
IkReal x12318=(gconst11*sj3);
IkReal x12319=((1.0)*x12306);
IkReal x12320=((1.0)*x12305);
IkReal x12321=(gconst10*x12305);
IkReal x12322=(cj3*x12305);
IkReal x12323=(sj3*x12306);
IkReal x12324=(x12307+x12308);
evalcond[0]=(((r21*x12321))+(((-1.0)*r22*x12319))+(((-1.0)*x12311*x12320)));
evalcond[1]=((((-1.0)*r12*x12319))+(((-1.0)*x12316*x12320))+((r11*x12321)));
evalcond[2]=((1.0)+(((-1.0)*x12313*x12320))+((r01*x12321))+(((-1.0)*r02*x12319)));
evalcond[3]=((((-1.0)*cj3*x12313*x12319))+((r00*x12309))+((r01*x12318))+((r02*x12322))+((r01*x12306*x12310)));
evalcond[4]=(((x12313*x12323))+(((-1.0)*r01*x12309*x12319))+((r00*x12310))+((r01*x12315))+(((-1.0)*r02*sj3*x12320)));
evalcond[5]=(((sj3*x12312))+x12324+(((-1.0)*cj3*x12311*x12319))+((r20*x12309))+((r22*x12322))+((r21*x12306*x12310)));
evalcond[6]=(((r10*x12309))+((r11*x12318))+x12317+(((-1.0)*x12314))+((r12*x12322))+((r11*x12306*x12310))+(((-1.0)*r10*x12315*x12319)));
evalcond[7]=(((r10*x12310))+((r11*x12315))+(((-1.0)*r11*x12309*x12319))+x12324+((x12316*x12323))+(((-1.0)*r12*sj3*x12320)));
evalcond[8]=(((x12311*x12323))+(((-1.0)*r21*x12309*x12319))+x12314+(((-1.0)*x12317))+(((-1.0)*r22*sj3*x12320))+((r20*x12310))+((cj3*x12312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12325=((1.0)*gconst11);
CheckValue<IkReal> x12326 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12326.valid){
continue;
}
CheckValue<IkReal> x12327=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12325)))),-1);
if(!x12327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12326.value)+(((1.5707963267949)*(x12327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12328=IKsin(j4);
IkReal x12329=IKcos(j4);
IkReal x12330=(cj2*sj1);
IkReal x12331=(cj1*sj2);
IkReal x12332=(gconst10*sj3);
IkReal x12333=(cj3*gconst10);
IkReal x12334=(gconst11*r20);
IkReal x12335=(gconst11*r21);
IkReal x12336=(gconst11*r00);
IkReal x12337=(sj1*sj2);
IkReal x12338=(cj3*gconst11);
IkReal x12339=(gconst11*r10);
IkReal x12340=(cj1*cj2);
IkReal x12341=(gconst11*sj3);
IkReal x12342=((1.0)*x12329);
IkReal x12343=((1.0)*x12328);
IkReal x12344=(gconst10*x12328);
IkReal x12345=(cj3*x12328);
IkReal x12346=(sj3*x12329);
IkReal x12347=(x12330+x12331);
evalcond[0]=(((r21*x12344))+(((-1.0)*x12334*x12343))+(((-1.0)*r22*x12342)));
evalcond[1]=((((-1.0)*x12339*x12343))+(((-1.0)*r12*x12342))+((r11*x12344)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12342))+((r01*x12344))+(((-1.0)*x12336*x12343)));
evalcond[3]=((((-1.0)*cj3*x12336*x12342))+((r00*x12332))+((r01*x12341))+((r02*x12345))+((r01*x12329*x12333)));
evalcond[4]=(((x12336*x12346))+((r01*x12338))+((r00*x12333))+(((-1.0)*r02*sj3*x12343))+(((-1.0)*r01*x12332*x12342)));
evalcond[5]=(((r20*x12332))+x12347+(((-1.0)*cj3*x12334*x12342))+((r22*x12345))+((sj3*x12335))+((r21*x12329*x12333)));
evalcond[6]=(x12340+(((-1.0)*r10*x12338*x12342))+((r11*x12329*x12333))+((r11*x12341))+((r10*x12332))+((r12*x12345))+(((-1.0)*x12337)));
evalcond[7]=(((x12339*x12346))+(((-1.0)*r11*x12332*x12342))+x12347+((r10*x12333))+(((-1.0)*r12*sj3*x12343))+((r11*x12338)));
evalcond[8]=((((-1.0)*r21*x12332*x12342))+((r20*x12333))+x12337+((x12334*x12346))+((cj3*x12335))+(((-1.0)*r22*sj3*x12343))+(((-1.0)*x12340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12348=((-1.0)*r11);
IkReal x12349=((-1.0)*r10);
CheckValue<IkReal> x12351 = IKatan2WithCheck(IkReal(x12348),IkReal(x12349),IKFAST_ATAN2_MAGTHRESH);
if(!x12351.valid){
continue;
}
IkReal x12350=((1.0)*(x12351.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12350)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12349);
rxp1_1=(px*r21);
rxp1_2=(px*x12348);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12350)));
IkReal gconst10=x12348;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12352=((-1.0)*r11);
IkReal x12353=((-1.0)*r10);
CheckValue<IkReal> x12355 = IKatan2WithCheck(IkReal(x12352),IkReal(x12353),IKFAST_ATAN2_MAGTHRESH);
if(!x12355.valid){
continue;
}
IkReal x12354=((1.0)*(x12355.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12354)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12353);
rxp1_1=(px*r21);
rxp1_2=(px*x12352);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12354)));
IkReal gconst10=x12352;
IkReal gconst11=((1.0)*r10);
IkReal x12356=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r10*r20*x12356))+(((-1.0)*r11*r21*x12356)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12357=((-1.0)*r11);
IkReal x12358=((-1.0)*r10);
CheckValue<IkReal> x12360 = IKatan2WithCheck(IkReal(x12357),IkReal(x12358),IKFAST_ATAN2_MAGTHRESH);
if(!x12360.valid){
continue;
}
IkReal x12359=((1.0)*(x12360.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12359)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12358);
rxp1_1=(px*r21);
rxp1_2=(px*x12357);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12359)));
IkReal gconst10=x12357;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12362=IKPowWithIntegerCheck(r02,-1);
if(!x12362.valid){
continue;
}
IkReal x12361=x12362.value;
CheckValue<IkReal> x12363=IKPowWithIntegerCheck(cj3,-1);
if(!x12363.valid){
continue;
}
if( IKabs((x12361*(x12363.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12361)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12361*(x12363.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12361))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12361*(x12363.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12361));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12364=IKsin(j4);
IkReal x12365=IKcos(j4);
IkReal x12366=(cj3*r10);
IkReal x12367=((1.0)*gconst11);
IkReal x12368=(sj1*sj2);
IkReal x12369=(gconst11*sj3);
IkReal x12370=(cj3*r11);
IkReal x12371=(cj2*sj1);
IkReal x12372=(gconst10*r20);
IkReal x12373=(gconst10*sj3);
IkReal x12374=((1.0)*cj0);
IkReal x12375=((1.0)*sj0);
IkReal x12376=(cj1*sj2);
IkReal x12377=(cj3*r21);
IkReal x12378=((1.0)*cj1*cj2);
IkReal x12379=(r20*x12365);
IkReal x12380=(gconst10*x12364);
IkReal x12381=(gconst10*x12365);
IkReal x12382=(r02*x12364);
IkReal x12383=((1.0)*x12365);
evalcond[0]=((((-1.0)*x12375))+(((-1.0)*r02*x12383)));
evalcond[1]=(((r21*x12380))+(((-1.0)*r20*x12364*x12367)));
evalcond[2]=(((r11*x12380))+cj0+(((-1.0)*r10*x12364*x12367)));
evalcond[3]=((((-1.0)*cj1*cj2*x12374))+((cj3*x12382))+((cj0*x12368)));
evalcond[4]=((((-1.0)*x12371*x12374))+(((-1.0)*sj3*x12382))+(((-1.0)*x12374*x12376)));
evalcond[5]=(x12371+x12376+((sj3*x12372))+((r21*x12369))+((x12377*x12381))+(((-1.0)*cj3*x12367*x12379)));
evalcond[6]=((((-1.0)*x12378))+((gconst11*x12377))+(((-1.0)*r21*x12373*x12383))+x12368+((cj3*x12372))+((x12369*x12379)));
evalcond[7]=((((-1.0)*cj1*cj2*x12375))+((r11*x12369))+((x12370*x12381))+((r10*x12373))+(((-1.0)*x12365*x12366*x12367))+((sj0*x12368)));
evalcond[8]=((((-1.0)*x12375*x12376))+(((-1.0)*r11*x12373*x12383))+((gconst11*x12370))+((gconst10*x12366))+((r10*x12365*x12369))+(((-1.0)*x12371*x12375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12384=((1.0)*r20);
IkReal x12385=((1.0)*gconst11);
CheckValue<IkReal> x12386=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12385))),-1);
if(!x12386.valid){
continue;
}
CheckValue<IkReal> x12387=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12384))+((cj3*gconst10*r21))),-1);
if(!x12387.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12386.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12387.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12384))+(((-1.0)*r21*sj3*x12385)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12386.value)))+IKsqr(((x12387.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12384))+(((-1.0)*r21*sj3*x12385))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12386.value)), ((x12387.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12384))+(((-1.0)*r21*sj3*x12385))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12388=IKsin(j4);
IkReal x12389=IKcos(j4);
IkReal x12390=(cj3*r10);
IkReal x12391=((1.0)*gconst11);
IkReal x12392=(sj1*sj2);
IkReal x12393=(gconst11*sj3);
IkReal x12394=(cj3*r11);
IkReal x12395=(cj2*sj1);
IkReal x12396=(gconst10*r20);
IkReal x12397=(gconst10*sj3);
IkReal x12398=((1.0)*cj0);
IkReal x12399=((1.0)*sj0);
IkReal x12400=(cj1*sj2);
IkReal x12401=(cj3*r21);
IkReal x12402=((1.0)*cj1*cj2);
IkReal x12403=(r20*x12389);
IkReal x12404=(gconst10*x12388);
IkReal x12405=(gconst10*x12389);
IkReal x12406=(r02*x12388);
IkReal x12407=((1.0)*x12389);
evalcond[0]=((((-1.0)*x12399))+(((-1.0)*r02*x12407)));
evalcond[1]=(((r21*x12404))+(((-1.0)*r20*x12388*x12391)));
evalcond[2]=(cj0+(((-1.0)*r10*x12388*x12391))+((r11*x12404)));
evalcond[3]=(((cj3*x12406))+((cj0*x12392))+(((-1.0)*cj1*cj2*x12398)));
evalcond[4]=((((-1.0)*x12398*x12400))+(((-1.0)*sj3*x12406))+(((-1.0)*x12395*x12398)));
evalcond[5]=(((x12401*x12405))+(((-1.0)*cj3*x12391*x12403))+x12395+((r21*x12393))+((sj3*x12396))+x12400);
evalcond[6]=((((-1.0)*x12402))+((cj3*x12396))+x12392+((gconst11*x12401))+((x12393*x12403))+(((-1.0)*r21*x12397*x12407)));
evalcond[7]=((((-1.0)*x12389*x12390*x12391))+((r11*x12393))+((x12394*x12405))+((r10*x12397))+((sj0*x12392))+(((-1.0)*cj1*cj2*x12399)));
evalcond[8]=(((gconst11*x12394))+(((-1.0)*x12399*x12400))+((gconst10*x12390))+((r10*x12389*x12393))+(((-1.0)*r11*x12397*x12407))+(((-1.0)*x12395*x12399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12408=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12408.valid){
continue;
}
CheckValue<IkReal> x12409=IKPowWithIntegerCheck(r02,-1);
if(!x12409.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12408.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12409.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12408.value)))+IKsqr(((-1.0)*sj0*(x12409.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12408.value)), ((-1.0)*sj0*(x12409.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12410=IKsin(j4);
IkReal x12411=IKcos(j4);
IkReal x12412=(cj3*r10);
IkReal x12413=((1.0)*gconst11);
IkReal x12414=(sj1*sj2);
IkReal x12415=(gconst11*sj3);
IkReal x12416=(cj3*r11);
IkReal x12417=(cj2*sj1);
IkReal x12418=(gconst10*r20);
IkReal x12419=(gconst10*sj3);
IkReal x12420=((1.0)*cj0);
IkReal x12421=((1.0)*sj0);
IkReal x12422=(cj1*sj2);
IkReal x12423=(cj3*r21);
IkReal x12424=((1.0)*cj1*cj2);
IkReal x12425=(r20*x12411);
IkReal x12426=(gconst10*x12410);
IkReal x12427=(gconst10*x12411);
IkReal x12428=(r02*x12410);
IkReal x12429=((1.0)*x12411);
evalcond[0]=((((-1.0)*x12421))+(((-1.0)*r02*x12429)));
evalcond[1]=((((-1.0)*r20*x12410*x12413))+((r21*x12426)));
evalcond[2]=(cj0+(((-1.0)*r10*x12410*x12413))+((r11*x12426)));
evalcond[3]=(((cj0*x12414))+(((-1.0)*cj1*cj2*x12420))+((cj3*x12428)));
evalcond[4]=((((-1.0)*sj3*x12428))+(((-1.0)*x12420*x12422))+(((-1.0)*x12417*x12420)));
evalcond[5]=(((sj3*x12418))+((r21*x12415))+(((-1.0)*cj3*x12413*x12425))+x12422+x12417+((x12423*x12427)));
evalcond[6]=((((-1.0)*r21*x12419*x12429))+((cj3*x12418))+(((-1.0)*x12424))+((gconst11*x12423))+x12414+((x12415*x12425)));
evalcond[7]=(((r10*x12419))+((r11*x12415))+(((-1.0)*cj1*cj2*x12421))+((x12416*x12427))+(((-1.0)*x12411*x12412*x12413))+((sj0*x12414)));
evalcond[8]=(((r10*x12411*x12415))+((gconst11*x12416))+(((-1.0)*r11*x12419*x12429))+(((-1.0)*x12421*x12422))+(((-1.0)*x12417*x12421))+((gconst10*x12412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12430=((-1.0)*r11);
CheckValue<IkReal> x12433 = IKatan2WithCheck(IkReal(x12430),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12433.valid){
continue;
}
IkReal x12431=((1.0)*(x12433.value));
IkReal x12432=x11756;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12431)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12431)));
IkReal gconst10=(x12430*x12432);
IkReal gconst11=((1.0)*r10*x12432);
IkReal x12434=r12*r12;
IkReal x12435=((1.0)*sj0);
IkReal x12436=(cj0*r02);
IkReal x12437=x11756;
j4eval[0]=((IKabs(((((-1.0)*x12435*x12437))+((sj0*x12434*x12437))+((r12*x12436*x12437)))))+(IKabs(((((-1.0)*r12*x12435))+(((-1.0)*x12436))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12438=((1.0)*r12);
IkReal x12439=(sj1*sj2);
IkReal x12440=((1.0)*r21);
IkReal x12441=(cj3*gconst11);
IkReal x12442=(r11*sj3);
IkReal x12443=(gconst11*r20);
IkReal x12444=((1.0)*sj3);
IkReal x12445=(cj1*cj2);
IkReal x12446=(gconst10*r21*sj3);
IkReal x12447=(cj3*gconst10*r20);
CheckValue<IkReal> x12448=IKPowWithIntegerCheck((((gconst10*x12442*x12443))+(((-1.0)*gconst11*r10*x12443*x12444))+(((-1.0)*x12440*x12442*(gconst10*gconst10)))+((gconst11*r10*x12446))),-1);
if(!x12448.valid){
continue;
}
CheckValue<IkReal> x12449=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12440))+((sj3*x12443))),-1);
if(!x12449.valid){
continue;
}
if( IKabs(((x12448.value)*(((((-1.0)*r21*x12438*x12441))+((cj0*x12446))+(((-1.0)*x12438*x12447))+(((-1.0)*x12438*x12439))+((r12*x12445))+(((-1.0)*cj0*x12443*x12444)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12449.value)*(((((-1.0)*x12440*x12441))+(((-1.0)*x12447))+x12445+(((-1.0)*x12439)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12448.value)*(((((-1.0)*r21*x12438*x12441))+((cj0*x12446))+(((-1.0)*x12438*x12447))+(((-1.0)*x12438*x12439))+((r12*x12445))+(((-1.0)*cj0*x12443*x12444))))))+IKsqr(((x12449.value)*(((((-1.0)*x12440*x12441))+(((-1.0)*x12447))+x12445+(((-1.0)*x12439))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12448.value)*(((((-1.0)*r21*x12438*x12441))+((cj0*x12446))+(((-1.0)*x12438*x12447))+(((-1.0)*x12438*x12439))+((r12*x12445))+(((-1.0)*cj0*x12443*x12444))))), ((x12449.value)*(((((-1.0)*x12440*x12441))+(((-1.0)*x12447))+x12445+(((-1.0)*x12439))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12450=IKsin(j4);
IkReal x12451=IKcos(j4);
IkReal x12452=(cj3*r10);
IkReal x12453=(gconst11*r20);
IkReal x12454=(gconst11*sj3);
IkReal x12455=(sj1*sj2);
IkReal x12456=(cj3*r11);
IkReal x12457=(r10*sj3);
IkReal x12458=(gconst10*r01);
IkReal x12459=(gconst10*sj3);
IkReal x12460=(cj2*sj1);
IkReal x12461=((1.0)*sj0);
IkReal x12462=(cj1*sj2);
IkReal x12463=(gconst10*r21);
IkReal x12464=(cj3*gconst10);
IkReal x12465=(cj3*gconst11);
IkReal x12466=((1.0)*cj0);
IkReal x12467=((1.0)*x12450);
IkReal x12468=((1.0)*cj1*cj2);
IkReal x12469=(gconst11*x12451);
IkReal x12470=(sj3*x12451);
IkReal x12471=(gconst10*x12450);
IkReal x12472=((1.0)*x12451);
IkReal x12473=(cj3*x12451);
IkReal x12474=(cj3*x12450);
evalcond[0]=(((x12450*x12463))+(((-1.0)*x12453*x12467)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12467))+((r11*x12471))+(((-1.0)*r12*x12472)));
evalcond[2]=((((-1.0)*r02*x12472))+((x12450*x12458))+(((-1.0)*x12461))+(((-1.0)*gconst11*r00*x12467)));
evalcond[3]=(((x12463*x12473))+((r20*x12459))+(((-1.0)*cj3*x12453*x12472))+x12462+x12460+((r21*x12454)));
evalcond[4]=(((x12453*x12470))+((r20*x12464))+(((-1.0)*x12468))+x12455+((r21*x12465))+(((-1.0)*r21*x12459*x12472)));
evalcond[5]=((((-1.0)*r00*x12465*x12472))+((cj0*x12455))+((r01*x12454))+((x12458*x12473))+((r00*x12459))+((r02*x12474))+(((-1.0)*cj1*cj2*x12466)));
evalcond[6]=((((-1.0)*x12452*x12469))+((r12*x12474))+((gconst10*x12451*x12456))+((r11*x12454))+((sj0*x12455))+(((-1.0)*cj1*cj2*x12461))+((gconst10*x12457)));
evalcond[7]=((((-1.0)*r02*sj3*x12467))+((r01*x12465))+((r00*x12464))+(((-1.0)*x12460*x12466))+(((-1.0)*x12462*x12466))+(((-1.0)*x12458*x12470))+((r00*x12451*x12454)));
evalcond[8]=((((-1.0)*x12460*x12461))+((r10*x12451*x12454))+(((-1.0)*r12*sj3*x12467))+(((-1.0)*r11*x12459*x12472))+(((-1.0)*x12461*x12462))+((gconst10*x12452))+((gconst11*x12456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12475=((1.0)*sj0);
IkReal x12476=((1.0)*gconst10);
CheckValue<IkReal> x12477=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12476))+(((-1.0)*gconst11*r21)))),-1);
if(!x12477.valid){
continue;
}
CheckValue<IkReal> x12478 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12475)))),IkReal(((((-1.0)*cj0*r01*x12476))+(((-1.0)*gconst10*r11*x12475))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12477.value)))+(x12478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12479=IKsin(j4);
IkReal x12480=IKcos(j4);
IkReal x12481=(cj3*r10);
IkReal x12482=(gconst11*r20);
IkReal x12483=(gconst11*sj3);
IkReal x12484=(sj1*sj2);
IkReal x12485=(cj3*r11);
IkReal x12486=(r10*sj3);
IkReal x12487=(gconst10*r01);
IkReal x12488=(gconst10*sj3);
IkReal x12489=(cj2*sj1);
IkReal x12490=((1.0)*sj0);
IkReal x12491=(cj1*sj2);
IkReal x12492=(gconst10*r21);
IkReal x12493=(cj3*gconst10);
IkReal x12494=(cj3*gconst11);
IkReal x12495=((1.0)*cj0);
IkReal x12496=((1.0)*x12479);
IkReal x12497=((1.0)*cj1*cj2);
IkReal x12498=(gconst11*x12480);
IkReal x12499=(sj3*x12480);
IkReal x12500=(gconst10*x12479);
IkReal x12501=((1.0)*x12480);
IkReal x12502=(cj3*x12480);
IkReal x12503=(cj3*x12479);
evalcond[0]=((((-1.0)*x12482*x12496))+((x12479*x12492)));
evalcond[1]=(((r11*x12500))+cj0+(((-1.0)*r12*x12501))+(((-1.0)*gconst11*r10*x12496)));
evalcond[2]=((((-1.0)*r02*x12501))+(((-1.0)*gconst11*r00*x12496))+((x12479*x12487))+(((-1.0)*x12490)));
evalcond[3]=(((x12492*x12502))+(((-1.0)*cj3*x12482*x12501))+((r20*x12488))+x12489+x12491+((r21*x12483)));
evalcond[4]=(((r20*x12493))+((r21*x12494))+(((-1.0)*r21*x12488*x12501))+(((-1.0)*x12497))+((x12482*x12499))+x12484);
evalcond[5]=((((-1.0)*r00*x12494*x12501))+((cj0*x12484))+((r00*x12488))+((r01*x12483))+(((-1.0)*cj1*cj2*x12495))+((r02*x12503))+((x12487*x12502)));
evalcond[6]=(((gconst10*x12486))+(((-1.0)*x12481*x12498))+((r11*x12483))+((sj0*x12484))+(((-1.0)*cj1*cj2*x12490))+((r12*x12503))+((gconst10*x12480*x12485)));
evalcond[7]=(((r00*x12493))+((r01*x12494))+(((-1.0)*x12487*x12499))+(((-1.0)*x12491*x12495))+(((-1.0)*x12489*x12495))+((r00*x12480*x12483))+(((-1.0)*r02*sj3*x12496)));
evalcond[8]=(((gconst10*x12481))+(((-1.0)*r12*sj3*x12496))+(((-1.0)*x12490*x12491))+((r10*x12480*x12483))+(((-1.0)*x12489*x12490))+((gconst11*x12485))+(((-1.0)*r11*x12488*x12501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12504=gconst10*gconst10;
IkReal x12505=r21*r21;
IkReal x12506=gconst11*gconst11;
IkReal x12507=r20*r20;
IkReal x12508=((1.0)*cj3);
IkReal x12509=(r20*sj3);
IkReal x12510=(gconst10*gconst11);
IkReal x12511=(cj2*sj1);
IkReal x12512=(gconst10*r21);
IkReal x12513=(cj1*sj2);
IkReal x12514=((1.0)*gconst11*r20);
CheckValue<IkReal> x12515 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((gconst10*r22*x12509))+((r22*x12513))+((r22*x12511)))),IkReal((((x12511*x12512))+(((-1.0)*r21*x12506*x12509))+((r21*x12504*x12509))+(((-1.0)*x12513*x12514))+((sj3*x12505*x12510))+((x12512*x12513))+(((-1.0)*sj3*x12507*x12510))+(((-1.0)*x12511*x12514)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12515.valid){
continue;
}
CheckValue<IkReal> x12516=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12506*x12507*x12508))+(((2.0)*cj3*r20*r21*x12510))+(((-1.0)*x12508*(r22*r22)))+(((-1.0)*x12504*x12505*x12508)))),-1);
if(!x12516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12515.value)+(((1.5707963267949)*(x12516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12517=IKsin(j4);
IkReal x12518=IKcos(j4);
IkReal x12519=(cj3*r10);
IkReal x12520=(gconst11*r20);
IkReal x12521=(gconst11*sj3);
IkReal x12522=(sj1*sj2);
IkReal x12523=(gconst11*r00);
IkReal x12524=(cj3*r11);
IkReal x12525=(gconst10*sj3);
IkReal x12526=(cj2*sj1);
IkReal x12527=(cj3*r01);
IkReal x12528=((1.0)*sj0);
IkReal x12529=(cj1*sj2);
IkReal x12530=(cj3*r21);
IkReal x12531=(cj3*gconst10);
IkReal x12532=((1.0)*cj0);
IkReal x12533=((1.0)*x12518);
IkReal x12534=((1.0)*x12517);
IkReal x12535=((1.0)*cj1*cj2);
IkReal x12536=(cj3*x12517);
IkReal x12537=(gconst10*x12517);
IkReal x12538=(gconst10*x12518);
evalcond[0]=((((-1.0)*x12520*x12534))+((r21*x12537))+(((-1.0)*r22*x12533)));
evalcond[1]=(((r11*x12537))+cj0+(((-1.0)*gconst11*r10*x12534))+(((-1.0)*r12*x12533)));
evalcond[2]=((((-1.0)*x12528))+(((-1.0)*r02*x12533))+(((-1.0)*x12523*x12534))+((r01*x12537)));
evalcond[3]=((((-1.0)*cj3*x12520*x12533))+((r21*x12521))+((r20*x12525))+((r22*x12536))+x12526+x12529+((x12530*x12538)));
evalcond[4]=((((-1.0)*r21*x12525*x12533))+((r20*x12531))+(((-1.0)*r22*sj3*x12534))+x12522+(((-1.0)*x12535))+((sj3*x12518*x12520))+((gconst11*x12530)));
evalcond[5]=(((cj0*x12522))+((x12527*x12538))+(((-1.0)*cj3*x12523*x12533))+(((-1.0)*cj1*cj2*x12532))+((r02*x12536))+((r01*x12521))+((r00*x12525)));
evalcond[6]=(((r10*x12525))+((sj0*x12522))+((x12524*x12538))+((r11*x12521))+(((-1.0)*gconst11*x12519*x12533))+((r12*x12536))+(((-1.0)*cj1*cj2*x12528)));
evalcond[7]=(((r00*x12531))+((r00*x12518*x12521))+(((-1.0)*r01*x12525*x12533))+(((-1.0)*x12526*x12532))+((gconst11*x12527))+(((-1.0)*r02*sj3*x12534))+(((-1.0)*x12529*x12532)));
evalcond[8]=((((-1.0)*x12528*x12529))+((gconst11*x12524))+(((-1.0)*r12*sj3*x12534))+(((-1.0)*x12526*x12528))+((gconst10*x12519))+(((-1.0)*r11*x12525*x12533))+((r10*x12518*x12521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12539=((1.0)*sj0);
IkReal x12540=((1.0)*gconst10);
CheckValue<IkReal> x12541 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12539))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12539))+(((-1.0)*cj0*r01*x12540))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12541.valid){
continue;
}
CheckValue<IkReal> x12542=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12540))+(((-1.0)*gconst11*r21)))),-1);
if(!x12542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12541.value)+(((1.5707963267949)*(x12542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12543=IKsin(j4);
IkReal x12544=IKcos(j4);
IkReal x12545=(cj3*r10);
IkReal x12546=(gconst11*r20);
IkReal x12547=(gconst11*sj3);
IkReal x12548=(sj1*sj2);
IkReal x12549=(gconst11*r00);
IkReal x12550=(cj3*r11);
IkReal x12551=(gconst10*sj3);
IkReal x12552=(cj2*sj1);
IkReal x12553=(cj3*r01);
IkReal x12554=((1.0)*sj0);
IkReal x12555=(cj1*sj2);
IkReal x12556=(cj3*r21);
IkReal x12557=(cj3*gconst10);
IkReal x12558=((1.0)*cj0);
IkReal x12559=((1.0)*x12544);
IkReal x12560=((1.0)*x12543);
IkReal x12561=((1.0)*cj1*cj2);
IkReal x12562=(cj3*x12543);
IkReal x12563=(gconst10*x12543);
IkReal x12564=(gconst10*x12544);
evalcond[0]=((((-1.0)*r22*x12559))+((r21*x12563))+(((-1.0)*x12546*x12560)));
evalcond[1]=(((r11*x12563))+(((-1.0)*gconst11*r10*x12560))+(((-1.0)*r12*x12559))+cj0);
evalcond[2]=(((r01*x12563))+(((-1.0)*r02*x12559))+(((-1.0)*x12554))+(((-1.0)*x12549*x12560)));
evalcond[3]=(((r20*x12551))+((x12556*x12564))+(((-1.0)*cj3*x12546*x12559))+((r22*x12562))+x12552+x12555+((r21*x12547)));
evalcond[4]=(((r20*x12557))+(((-1.0)*r22*sj3*x12560))+((sj3*x12544*x12546))+((gconst11*x12556))+x12548+(((-1.0)*x12561))+(((-1.0)*r21*x12551*x12559)));
evalcond[5]=((((-1.0)*cj3*x12549*x12559))+((r01*x12547))+((r00*x12551))+((x12553*x12564))+(((-1.0)*cj1*cj2*x12558))+((cj0*x12548))+((r02*x12562)));
evalcond[6]=(((x12550*x12564))+((r12*x12562))+((r11*x12547))+((r10*x12551))+((sj0*x12548))+(((-1.0)*cj1*cj2*x12554))+(((-1.0)*gconst11*x12545*x12559)));
evalcond[7]=(((r00*x12544*x12547))+(((-1.0)*r01*x12551*x12559))+((r00*x12557))+(((-1.0)*x12555*x12558))+(((-1.0)*r02*sj3*x12560))+((gconst11*x12553))+(((-1.0)*x12552*x12558)));
evalcond[8]=(((gconst10*x12545))+(((-1.0)*x12554*x12555))+((gconst11*x12550))+(((-1.0)*x12552*x12554))+(((-1.0)*r12*sj3*x12560))+(((-1.0)*r11*x12551*x12559))+((r10*x12544*x12547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12565=((1.0)*gconst11);
CheckValue<IkReal> x12566 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12565))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12566.valid){
continue;
}
CheckValue<IkReal> x12567=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12565)))),-1);
if(!x12567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12566.value)+(((1.5707963267949)*(x12567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12568=IKsin(j4);
IkReal x12569=IKcos(j4);
IkReal x12570=(cj3*r10);
IkReal x12571=(gconst11*r20);
IkReal x12572=(gconst11*sj3);
IkReal x12573=(sj1*sj2);
IkReal x12574=(gconst11*r00);
IkReal x12575=(cj3*r11);
IkReal x12576=(gconst10*sj3);
IkReal x12577=(cj2*sj1);
IkReal x12578=(cj3*r01);
IkReal x12579=((1.0)*sj0);
IkReal x12580=(cj1*sj2);
IkReal x12581=(cj3*r21);
IkReal x12582=(cj3*gconst10);
IkReal x12583=((1.0)*cj0);
IkReal x12584=((1.0)*x12569);
IkReal x12585=((1.0)*x12568);
IkReal x12586=((1.0)*cj1*cj2);
IkReal x12587=(cj3*x12568);
IkReal x12588=(gconst10*x12568);
IkReal x12589=(gconst10*x12569);
evalcond[0]=((((-1.0)*x12571*x12585))+(((-1.0)*r22*x12584))+((r21*x12588)));
evalcond[1]=(cj0+(((-1.0)*r12*x12584))+(((-1.0)*gconst11*r10*x12585))+((r11*x12588)));
evalcond[2]=((((-1.0)*x12574*x12585))+((r01*x12588))+(((-1.0)*x12579))+(((-1.0)*r02*x12584)));
evalcond[3]=(((r21*x12572))+((r22*x12587))+(((-1.0)*cj3*x12571*x12584))+((r20*x12576))+x12577+x12580+((x12581*x12589)));
evalcond[4]=(((r20*x12582))+((gconst11*x12581))+((sj3*x12569*x12571))+(((-1.0)*r21*x12576*x12584))+(((-1.0)*r22*sj3*x12585))+x12573+(((-1.0)*x12586)));
evalcond[5]=(((x12578*x12589))+((cj0*x12573))+((r02*x12587))+((r00*x12576))+((r01*x12572))+(((-1.0)*cj1*cj2*x12583))+(((-1.0)*cj3*x12574*x12584)));
evalcond[6]=(((r12*x12587))+((x12575*x12589))+((r11*x12572))+(((-1.0)*gconst11*x12570*x12584))+((r10*x12576))+(((-1.0)*cj1*cj2*x12579))+((sj0*x12573)));
evalcond[7]=((((-1.0)*x12580*x12583))+((r00*x12582))+((gconst11*x12578))+(((-1.0)*r01*x12576*x12584))+((r00*x12569*x12572))+(((-1.0)*r02*sj3*x12585))+(((-1.0)*x12577*x12583)));
evalcond[8]=((((-1.0)*x12579*x12580))+((gconst11*x12575))+(((-1.0)*r12*sj3*x12585))+(((-1.0)*x12577*x12579))+((gconst10*x12570))+((r10*x12569*x12572))+(((-1.0)*r11*x12576*x12584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12590=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12590;
j4eval[1]=IKsign(x12590);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12591=((1.0)*cj5);
IkReal x12592=((((-1.0)*r01*x12591))+(((-1.0)*r00*sj5)));
j4eval[0]=x12592;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12591))))));
j4eval[2]=IKsign(x12592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12593=cj5*cj5;
IkReal x12594=(cj3*r21);
IkReal x12595=(cj5*sj5);
IkReal x12596=((1.0)*cj3);
IkReal x12597=((((-1.0)*r12*r22*x12596))+(((-1.0)*r11*x12594))+(((-1.0)*r10*r20*x12593*x12596))+((cj3*r11*r20*x12595))+((r11*x12593*x12594))+((r10*x12594*x12595)));
j4eval[0]=x12597;
j4eval[1]=IKsign(x12597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12598=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12598;
j4eval[1]=IKsign(x12598);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12599=((1.0)*cj5);
IkReal x12600=((((-1.0)*r01*x12599))+(((-1.0)*r00*sj5)));
j4eval[0]=x12600;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12599))))));
j4eval[2]=IKsign(x12600);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12601=cj5*cj5;
IkReal x12602=r11*r11;
IkReal x12603=(r11*sj5);
IkReal x12604=(cj5*r10);
IkReal x12605=((r12*r12)+((x12601*(r10*r10)))+(((-2.0)*x12603*x12604))+(((-1.0)*x12601*x12602))+x12602);
j4eval[0]=x12605;
j4eval[1]=IKsign(x12605);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12603))+x12604))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12606=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12606);
rxp1_1=(px*r21);
rxp1_2=(r11*x12606);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12607=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12607);
rxp1_1=(px*r21);
rxp1_2=(r11*x12607);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12608=((1.0)*sj1);
CheckValue<IkReal> x12609=IKPowWithIntegerCheck(r02,-1);
if(!x12609.valid){
continue;
}
CheckValue<IkReal> x12610=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12610.valid){
continue;
}
if( IKabs(((x12609.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12608)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12610.value)*(((((-1.0)*sj2*x12608))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12609.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12608))))))+IKsqr(((x12610.value)*(((((-1.0)*sj2*x12608))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12609.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12608))))), ((x12610.value)*(((((-1.0)*sj2*x12608))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12611=IKsin(j4);
IkReal x12612=IKcos(j4);
IkReal x12613=(cj5*r20);
IkReal x12614=((1.0)*cj2);
IkReal x12615=(cj5*r10);
IkReal x12616=((1.0)*x12611);
IkReal x12617=(sj5*x12611);
IkReal x12618=((1.0)*sj5*x12612);
evalcond[0]=((-1.0)*r02*x12612);
evalcond[1]=(((r21*x12617))+(((-1.0)*x12613*x12616)));
evalcond[2]=((((-1.0)*r11*x12618))+((x12612*x12615)));
evalcond[3]=((1.0)+(((-1.0)*x12615*x12616))+((r11*x12617)));
evalcond[4]=((((-1.0)*r02*x12616))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12614)));
evalcond[5]=((((-1.0)*cj1*x12614))+((sj1*sj2))+(((-1.0)*r21*x12618))+((x12612*x12613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12619=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12619.valid){
continue;
}
CheckValue<IkReal> x12620=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12620.valid){
continue;
}
if( IKabs(((-1.0)*(x12619.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12620.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12619.value)))+IKsqr(((x12620.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12619.value)), ((x12620.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12621=IKsin(j4);
IkReal x12622=IKcos(j4);
IkReal x12623=(cj5*r20);
IkReal x12624=((1.0)*cj2);
IkReal x12625=(cj5*r10);
IkReal x12626=((1.0)*x12621);
IkReal x12627=(sj5*x12621);
IkReal x12628=((1.0)*sj5*x12622);
evalcond[0]=((-1.0)*r02*x12622);
evalcond[1]=((((-1.0)*x12623*x12626))+((r21*x12627)));
evalcond[2]=((((-1.0)*r11*x12628))+((x12622*x12625)));
evalcond[3]=((1.0)+(((-1.0)*x12625*x12626))+((r11*x12627)));
evalcond[4]=((((-1.0)*r02*x12626))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12624)));
evalcond[5]=((((-1.0)*r21*x12628))+((sj1*sj2))+((x12622*x12623))+(((-1.0)*cj1*x12624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12629=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12629);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12629);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12630=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12630);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12630);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12631=IKPowWithIntegerCheck(r22,-1);
if(!x12631.valid){
continue;
}
CheckValue<IkReal> x12632=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12632.valid){
continue;
}
if( IKabs(((x12631.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12632.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12631.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12632.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12631.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12632.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12633=IKsin(j4);
IkReal x12634=IKcos(j4);
IkReal x12635=((1.0)*cj2);
IkReal x12636=(cj5*x12634);
IkReal x12637=(sj5*x12633);
IkReal x12638=((1.0)*sj5*x12634);
IkReal x12639=((1.0)*cj5*x12633);
evalcond[0]=((-1.0)*r22*x12634);
evalcond[1]=(((r01*x12637))+(((-1.0)*r00*x12639)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12633))+(((-1.0)*cj1*x12635)));
evalcond[3]=(((r10*x12636))+(((-1.0)*r11*x12638)));
evalcond[4]=((1.0)+((r11*x12637))+(((-1.0)*r10*x12639)));
evalcond[5]=((((-1.0)*sj1*x12635))+(((-1.0)*cj1*sj2))+((r00*x12636))+(((-1.0)*r01*x12638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12640=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12640.valid){
continue;
}
CheckValue<IkReal> x12641=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12641.valid){
continue;
}
if( IKabs(((-1.0)*(x12640.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12641.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12640.value)))+IKsqr(((x12641.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12640.value)), ((x12641.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12642=IKsin(j4);
IkReal x12643=IKcos(j4);
IkReal x12644=((1.0)*cj2);
IkReal x12645=(cj5*x12643);
IkReal x12646=(sj5*x12642);
IkReal x12647=((1.0)*sj5*x12643);
IkReal x12648=((1.0)*cj5*x12642);
evalcond[0]=((-1.0)*r22*x12643);
evalcond[1]=(((r01*x12646))+(((-1.0)*r00*x12648)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12642))+(((-1.0)*cj1*x12644)));
evalcond[3]=(((r10*x12645))+(((-1.0)*r11*x12647)));
evalcond[4]=((1.0)+((r11*x12646))+(((-1.0)*r10*x12648)));
evalcond[5]=((((-1.0)*sj1*x12644))+(((-1.0)*cj1*sj2))+((r00*x12645))+(((-1.0)*r01*x12647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12649=cj5*cj5;
IkReal x12650=r11*r11;
IkReal x12651=(cj5*r10);
IkReal x12652=(r11*sj5);
CheckValue<IkReal> x12653=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x12649*(r10*r10)))+(((-2.0)*x12651*x12652))+x12650+(((-1.0)*x12649*x12650)))),-1);
if(!x12653.valid){
continue;
}
CheckValue<IkReal> x12654 = IKatan2WithCheck(IkReal((x12651+(((-1.0)*x12652)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12653.value)))+(x12654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12655=IKsin(j4);
IkReal x12656=IKcos(j4);
IkReal x12657=(cj5*r10);
IkReal x12658=(r01*sj5);
IkReal x12659=((1.0)*cj2);
IkReal x12660=(cj5*r00);
IkReal x12661=(cj5*r20);
IkReal x12662=((1.0)*x12656);
IkReal x12663=((1.0)*x12655);
IkReal x12664=(sj5*x12655);
evalcond[0]=((((-1.0)*r22*x12662))+(((-1.0)*x12661*x12663))+((r21*x12664)));
evalcond[1]=((((-1.0)*r02*x12662))+(((-1.0)*x12660*x12663))+((x12655*x12658)));
evalcond[2]=(((x12656*x12657))+(((-1.0)*r12*x12663))+(((-1.0)*r11*sj5*x12662)));
evalcond[3]=((1.0)+(((-1.0)*x12657*x12663))+((r11*x12664))+(((-1.0)*r12*x12662)));
evalcond[4]=((((-1.0)*r22*x12663))+(((-1.0)*cj1*x12659))+(((-1.0)*r21*sj5*x12662))+((sj1*sj2))+((x12656*x12661)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12663))+((x12656*x12660))+(((-1.0)*x12658*x12662))+(((-1.0)*sj1*x12659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12665=((1.0)*cj5);
CheckValue<IkReal> x12666 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12666.valid){
continue;
}
CheckValue<IkReal> x12667=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12665))+(((-1.0)*r00*sj5)))),-1);
if(!x12667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12666.value)+(((1.5707963267949)*(x12667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12668=IKsin(j4);
IkReal x12669=IKcos(j4);
IkReal x12670=(cj5*r10);
IkReal x12671=(r01*sj5);
IkReal x12672=((1.0)*cj2);
IkReal x12673=(cj5*r00);
IkReal x12674=(cj5*r20);
IkReal x12675=((1.0)*x12669);
IkReal x12676=((1.0)*x12668);
IkReal x12677=(sj5*x12668);
evalcond[0]=(((r21*x12677))+(((-1.0)*r22*x12675))+(((-1.0)*x12674*x12676)));
evalcond[1]=(((x12668*x12671))+(((-1.0)*r02*x12675))+(((-1.0)*x12673*x12676)));
evalcond[2]=(((x12669*x12670))+(((-1.0)*r12*x12676))+(((-1.0)*r11*sj5*x12675)));
evalcond[3]=((1.0)+(((-1.0)*x12670*x12676))+(((-1.0)*r12*x12675))+((r11*x12677)));
evalcond[4]=((((-1.0)*cj1*x12672))+(((-1.0)*r22*x12676))+((x12669*x12674))+((sj1*sj2))+(((-1.0)*r21*sj5*x12675)));
evalcond[5]=(((x12669*x12673))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12676))+(((-1.0)*x12671*x12675))+(((-1.0)*sj1*x12672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12678=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12678.valid){
continue;
}
CheckValue<IkReal> x12679 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12678.value)))+(x12679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12680=IKsin(j4);
IkReal x12681=IKcos(j4);
IkReal x12682=(cj5*r10);
IkReal x12683=(r01*sj5);
IkReal x12684=((1.0)*cj2);
IkReal x12685=(cj5*r00);
IkReal x12686=(cj5*r20);
IkReal x12687=((1.0)*x12681);
IkReal x12688=((1.0)*x12680);
IkReal x12689=(sj5*x12680);
evalcond[0]=(((r21*x12689))+(((-1.0)*x12686*x12688))+(((-1.0)*r22*x12687)));
evalcond[1]=((((-1.0)*r02*x12687))+(((-1.0)*x12685*x12688))+((x12680*x12683)));
evalcond[2]=((((-1.0)*r12*x12688))+((x12681*x12682))+(((-1.0)*r11*sj5*x12687)));
evalcond[3]=((1.0)+((r11*x12689))+(((-1.0)*r12*x12687))+(((-1.0)*x12682*x12688)));
evalcond[4]=((((-1.0)*r21*sj5*x12687))+(((-1.0)*cj1*x12684))+((sj1*sj2))+((x12681*x12686))+(((-1.0)*r22*x12688)));
evalcond[5]=((((-1.0)*sj1*x12684))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12688))+((x12681*x12685))+(((-1.0)*x12683*x12687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12690=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12690;
j4eval[1]=IKsign(x12690);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12691=((1.0)*cj5);
IkReal x12692=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12691)));
j4eval[0]=x12692;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12691))))));
j4eval[2]=IKsign(x12692);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12693=(sj1*sj2);
IkReal x12694=(cj5*r10);
IkReal x12695=(r11*sj5);
IkReal x12696=(cj1*cj2);
IkReal x12697=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12697;
j4eval[1]=((IKabs((((x12694*x12696))+((x12693*x12695))+(((-1.0)*x12695*x12696))+(((-1.0)*x12693*x12694)))))+(IKabs(((((-1.0)*r12*x12693))+((r12*x12696))))));
j4eval[2]=IKsign(x12697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12698=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12698);
rxp1_1=(px*r21);
rxp1_2=(r11*x12698);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12699=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12699);
rxp1_1=(px*r21);
rxp1_2=(r11*x12699);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12700=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x12700))+((r11*sj5)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12700)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12701=((1.0)*cj5);
CheckValue<IkReal> x12702=IKPowWithIntegerCheck(((((-1.0)*r10*x12701))+((r11*sj5))),-1);
if(!x12702.valid){
continue;
}
CheckValue<IkReal> x12703=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12701))),-1);
if(!x12703.valid){
continue;
}
if( IKabs(((-1.0)*(x12702.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12703.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12702.value)))+IKsqr(((x12703.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12702.value)), ((x12703.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12704=IKsin(j4);
IkReal x12705=IKcos(j4);
IkReal x12706=((1.0)*cj2);
IkReal x12707=(r21*sj5);
IkReal x12708=(r11*sj5);
IkReal x12709=((1.0)*cj5*x12704);
IkReal x12710=((1.0)*cj5*x12705);
evalcond[0]=((-1.0)*r02*x12705);
evalcond[1]=((((-1.0)*r20*x12709))+((x12704*x12707)));
evalcond[2]=(((r02*x12704))+(((-1.0)*sj1*x12706))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*r10*x12710))+((x12705*x12708)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12709))+((x12704*x12708)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x12710))+((x12705*x12707))+(((-1.0)*cj1*x12706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12711=IKPowWithIntegerCheck(r02,-1);
if(!x12711.valid){
continue;
}
CheckValue<IkReal> x12712=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12712.valid){
continue;
}
if( IKabs(((x12711.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12712.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12711.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12712.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12711.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12712.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12713=IKsin(j4);
IkReal x12714=IKcos(j4);
IkReal x12715=((1.0)*cj2);
IkReal x12716=(r21*sj5);
IkReal x12717=(r11*sj5);
IkReal x12718=((1.0)*cj5*x12713);
IkReal x12719=((1.0)*cj5*x12714);
evalcond[0]=((-1.0)*r02*x12714);
evalcond[1]=((((-1.0)*r20*x12718))+((x12713*x12716)));
evalcond[2]=(((r02*x12713))+(((-1.0)*sj1*x12715))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*r10*x12719))+((x12714*x12717)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12718))+((x12713*x12717)));
evalcond[5]=(((sj1*sj2))+((x12714*x12716))+(((-1.0)*r20*x12719))+(((-1.0)*cj1*x12715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12720=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12720;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12720);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12721=((1.0)*cj5);
IkReal x12722=((((-1.0)*r21*x12721))+(((-1.0)*r20*sj5)));
j4eval[0]=x12722;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12721))+((r11*sj5))))));
j4eval[2]=IKsign(x12722);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12723=cj5*cj5;
IkReal x12724=(r11*r21);
IkReal x12725=((1.0)*r20);
IkReal x12726=(cj5*sj5);
IkReal x12727=(((x12723*x12724))+(((-1.0)*x12724))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12723*x12725))+((r11*r20*x12726))+((r10*r21*x12726)));
j4eval[0]=x12727;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12725))))));
j4eval[2]=IKsign(x12727);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12728=cj5*cj5;
IkReal x12729=(r21*sj5);
IkReal x12730=(r11*r21);
IkReal x12731=((1.0)*r20);
CheckValue<IkReal> x12732 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12731))+x12729)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12732.valid){
continue;
}
CheckValue<IkReal> x12733=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12730))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12728*x12731))+((x12728*x12730))+((cj5*r10*x12729))+((cj5*r11*r20*sj5)))),-1);
if(!x12733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12732.value)+(((1.5707963267949)*(x12733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12734=IKcos(j4);
IkReal x12735=IKsin(j4);
IkReal x12736=(cj5*r00);
IkReal x12737=(cj5*r20);
IkReal x12738=(cj5*r10);
IkReal x12739=((1.0)*x12734);
IkReal x12740=((1.0)*x12735);
IkReal x12741=(sj5*x12734);
IkReal x12742=(sj5*x12735);
evalcond[0]=(((r21*x12741))+((r22*x12735))+(((-1.0)*x12737*x12739)));
evalcond[1]=(((r11*x12741))+(((-1.0)*x12738*x12739))+((r12*x12735)));
evalcond[2]=((((-1.0)*r22*x12739))+((r21*x12742))+(((-1.0)*x12737*x12740)));
evalcond[3]=((((-1.0)*r02*x12739))+((r01*x12742))+(((-1.0)*x12736*x12740)));
evalcond[4]=((-1.0)+((r02*x12735))+((r01*x12741))+(((-1.0)*x12736*x12739)));
evalcond[5]=((1.0)+((r11*x12742))+(((-1.0)*x12738*x12740))+(((-1.0)*r12*x12739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12743=((1.0)*cj5);
CheckValue<IkReal> x12744 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12743)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12744.valid){
continue;
}
CheckValue<IkReal> x12745=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12743))+(((-1.0)*r20*sj5)))),-1);
if(!x12745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12744.value)+(((1.5707963267949)*(x12745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12746=IKcos(j4);
IkReal x12747=IKsin(j4);
IkReal x12748=(cj5*r00);
IkReal x12749=(cj5*r20);
IkReal x12750=(cj5*r10);
IkReal x12751=((1.0)*x12746);
IkReal x12752=((1.0)*x12747);
IkReal x12753=(sj5*x12746);
IkReal x12754=(sj5*x12747);
evalcond[0]=(((r22*x12747))+(((-1.0)*x12749*x12751))+((r21*x12753)));
evalcond[1]=(((r11*x12753))+(((-1.0)*x12750*x12751))+((r12*x12747)));
evalcond[2]=((((-1.0)*r22*x12751))+(((-1.0)*x12749*x12752))+((r21*x12754)));
evalcond[3]=((((-1.0)*r02*x12751))+(((-1.0)*x12748*x12752))+((r01*x12754)));
evalcond[4]=((-1.0)+((r02*x12747))+(((-1.0)*x12748*x12751))+((r01*x12753)));
evalcond[5]=((1.0)+((r11*x12754))+(((-1.0)*r12*x12751))+(((-1.0)*x12750*x12752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12755 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12755.valid){
continue;
}
CheckValue<IkReal> x12756=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12755.value)+(((1.5707963267949)*(x12756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12757=IKcos(j4);
IkReal x12758=IKsin(j4);
IkReal x12759=(cj5*r00);
IkReal x12760=(cj5*r20);
IkReal x12761=(cj5*r10);
IkReal x12762=((1.0)*x12757);
IkReal x12763=((1.0)*x12758);
IkReal x12764=(sj5*x12757);
IkReal x12765=(sj5*x12758);
evalcond[0]=(((r21*x12764))+((r22*x12758))+(((-1.0)*x12760*x12762)));
evalcond[1]=(((r11*x12764))+(((-1.0)*x12761*x12762))+((r12*x12758)));
evalcond[2]=(((r21*x12765))+(((-1.0)*r22*x12762))+(((-1.0)*x12760*x12763)));
evalcond[3]=((((-1.0)*x12759*x12763))+(((-1.0)*r02*x12762))+((r01*x12765)));
evalcond[4]=((-1.0)+(((-1.0)*x12759*x12762))+((r02*x12758))+((r01*x12764)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12762))+((r11*x12765))+(((-1.0)*x12761*x12763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12766=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12766;
j4eval[1]=IKsign(x12766);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12767=((1.0)*cj5);
IkReal x12768=((((-1.0)*r11*x12767))+(((-1.0)*r10*sj5)));
j4eval[0]=x12768;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12767))+((r21*sj5))))));
j4eval[2]=IKsign(x12768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12769=cj5*cj5;
IkReal x12770=(r11*r21);
IkReal x12771=((1.0)*r20);
IkReal x12772=(cj5*sj5);
IkReal x12773=(((r11*r20*x12772))+(((-1.0)*r10*x12769*x12771))+(((-1.0)*r12*r22))+((r10*r21*x12772))+(((-1.0)*x12770))+((x12769*x12770)));
j4eval[0]=x12773;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12771))+((r21*sj5))))));
j4eval[2]=IKsign(x12773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12774=cj5*cj5;
IkReal x12775=(r21*sj5);
IkReal x12776=(r11*r21);
IkReal x12777=((1.0)*r20);
CheckValue<IkReal> x12778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((cj5*r10*x12775))+(((-1.0)*x12776))+((x12774*x12776))+(((-1.0)*r10*x12774*x12777))+((cj5*r11*r20*sj5)))),-1);
if(!x12778.valid){
continue;
}
CheckValue<IkReal> x12779 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12777))+x12775)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12778.value)))+(x12779.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12780=IKcos(j4);
IkReal x12781=IKsin(j4);
IkReal x12782=(cj5*r00);
IkReal x12783=(cj5*r20);
IkReal x12784=(cj5*r10);
IkReal x12785=((1.0)*x12780);
IkReal x12786=((1.0)*x12781);
IkReal x12787=(sj5*x12780);
IkReal x12788=(sj5*x12781);
evalcond[0]=((((-1.0)*x12783*x12785))+((r21*x12787))+((r22*x12781)));
evalcond[1]=(((r11*x12787))+(((-1.0)*x12784*x12785))+((r12*x12781)));
evalcond[2]=((((-1.0)*x12783*x12786))+((r21*x12788))+(((-1.0)*r22*x12785)));
evalcond[3]=((((-1.0)*x12782*x12786))+((r01*x12788))+(((-1.0)*r02*x12785)));
evalcond[4]=((1.0)+(((-1.0)*x12782*x12785))+((r01*x12787))+((r02*x12781)));
evalcond[5]=((1.0)+((r11*x12788))+(((-1.0)*x12784*x12786))+(((-1.0)*r12*x12785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12789=((1.0)*cj5);
CheckValue<IkReal> x12790=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12789)))),-1);
if(!x12790.valid){
continue;
}
CheckValue<IkReal> x12791 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12789)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12790.value)))+(x12791.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12792=IKcos(j4);
IkReal x12793=IKsin(j4);
IkReal x12794=(cj5*r00);
IkReal x12795=(cj5*r20);
IkReal x12796=(cj5*r10);
IkReal x12797=((1.0)*x12792);
IkReal x12798=((1.0)*x12793);
IkReal x12799=(sj5*x12792);
IkReal x12800=(sj5*x12793);
evalcond[0]=(((r21*x12799))+((r22*x12793))+(((-1.0)*x12795*x12797)));
evalcond[1]=(((r11*x12799))+((r12*x12793))+(((-1.0)*x12796*x12797)));
evalcond[2]=((((-1.0)*r22*x12797))+((r21*x12800))+(((-1.0)*x12795*x12798)));
evalcond[3]=((((-1.0)*x12794*x12798))+((r01*x12800))+(((-1.0)*r02*x12797)));
evalcond[4]=((1.0)+(((-1.0)*x12794*x12797))+((r02*x12793))+((r01*x12799)));
evalcond[5]=((1.0)+((r11*x12800))+(((-1.0)*r12*x12797))+(((-1.0)*x12796*x12798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12801=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12801.valid){
continue;
}
CheckValue<IkReal> x12802 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12801.value)))+(x12802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12803=IKcos(j4);
IkReal x12804=IKsin(j4);
IkReal x12805=(cj5*r00);
IkReal x12806=(cj5*r20);
IkReal x12807=(cj5*r10);
IkReal x12808=((1.0)*x12803);
IkReal x12809=((1.0)*x12804);
IkReal x12810=(sj5*x12803);
IkReal x12811=(sj5*x12804);
evalcond[0]=(((r21*x12810))+(((-1.0)*x12806*x12808))+((r22*x12804)));
evalcond[1]=(((r12*x12804))+((r11*x12810))+(((-1.0)*x12807*x12808)));
evalcond[2]=(((r21*x12811))+(((-1.0)*r22*x12808))+(((-1.0)*x12806*x12809)));
evalcond[3]=(((r01*x12811))+(((-1.0)*r02*x12808))+(((-1.0)*x12805*x12809)));
evalcond[4]=((1.0)+((r02*x12804))+((r01*x12810))+(((-1.0)*x12805*x12808)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12808))+((r11*x12811))+(((-1.0)*x12807*x12809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12812=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12812;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12812);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12813=((1.0)*cj5);
IkReal x12814=((((-1.0)*r21*x12813))+(((-1.0)*r20*sj5)));
j4eval[0]=x12814;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12813))+((r11*sj5))))));
j4eval[2]=IKsign(x12814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12815=cj5*cj5;
IkReal x12816=(r11*r21);
IkReal x12817=((1.0)*r20);
IkReal x12818=(cj5*sj5);
IkReal x12819=(((x12815*x12816))+(((-1.0)*r12*r22))+((r11*r20*x12818))+(((-1.0)*r10*x12815*x12817))+(((-1.0)*x12816))+((r10*r21*x12818)));
j4eval[0]=x12819;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12817))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12819);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12820=cj5*cj5;
IkReal x12821=(r21*sj5);
IkReal x12822=(r11*r21);
IkReal x12823=((1.0)*r20);
CheckValue<IkReal> x12824=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12821))+(((-1.0)*r12*r22))+(((-1.0)*x12822))+((x12820*x12822))+(((-1.0)*r10*x12820*x12823))+((cj5*r11*r20*sj5)))),-1);
if(!x12824.valid){
continue;
}
CheckValue<IkReal> x12825 = IKatan2WithCheck(IkReal((x12821+(((-1.0)*cj5*x12823)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12824.value)))+(x12825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12826=IKcos(j4);
IkReal x12827=IKsin(j4);
IkReal x12828=(cj5*r00);
IkReal x12829=(cj5*r20);
IkReal x12830=(cj5*r10);
IkReal x12831=((1.0)*x12826);
IkReal x12832=((1.0)*x12827);
IkReal x12833=(sj5*x12826);
IkReal x12834=(sj5*x12827);
evalcond[0]=((((-1.0)*x12829*x12831))+((r21*x12833))+((r22*x12827)));
evalcond[1]=(((r11*x12833))+((r12*x12827))+(((-1.0)*x12830*x12831)));
evalcond[2]=((((-1.0)*x12829*x12832))+((r21*x12834))+(((-1.0)*r22*x12831)));
evalcond[3]=((((-1.0)*x12828*x12832))+(((-1.0)*r02*x12831))+((r01*x12834)));
evalcond[4]=((-1.0)+(((-1.0)*x12828*x12831))+((r02*x12827))+((r01*x12833)));
evalcond[5]=((1.0)+((r11*x12834))+(((-1.0)*r12*x12831))+(((-1.0)*x12830*x12832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12835=((1.0)*cj5);
CheckValue<IkReal> x12836 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12835)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12836.valid){
continue;
}
CheckValue<IkReal> x12837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12835))+(((-1.0)*r20*sj5)))),-1);
if(!x12837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12836.value)+(((1.5707963267949)*(x12837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12838=IKcos(j4);
IkReal x12839=IKsin(j4);
IkReal x12840=(cj5*r00);
IkReal x12841=(cj5*r20);
IkReal x12842=(cj5*r10);
IkReal x12843=((1.0)*x12838);
IkReal x12844=((1.0)*x12839);
IkReal x12845=(sj5*x12838);
IkReal x12846=(sj5*x12839);
evalcond[0]=(((r22*x12839))+(((-1.0)*x12841*x12843))+((r21*x12845)));
evalcond[1]=(((r12*x12839))+((r11*x12845))+(((-1.0)*x12842*x12843)));
evalcond[2]=((((-1.0)*r22*x12843))+(((-1.0)*x12841*x12844))+((r21*x12846)));
evalcond[3]=((((-1.0)*r02*x12843))+((r01*x12846))+(((-1.0)*x12840*x12844)));
evalcond[4]=((-1.0)+((r01*x12845))+(((-1.0)*x12840*x12843))+((r02*x12839)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12843))+((r11*x12846))+(((-1.0)*x12842*x12844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12847 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12847.valid){
continue;
}
CheckValue<IkReal> x12848=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12847.value)+(((1.5707963267949)*(x12848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12849=IKcos(j4);
IkReal x12850=IKsin(j4);
IkReal x12851=(cj5*r00);
IkReal x12852=(cj5*r20);
IkReal x12853=(cj5*r10);
IkReal x12854=((1.0)*x12849);
IkReal x12855=((1.0)*x12850);
IkReal x12856=(sj5*x12849);
IkReal x12857=(sj5*x12850);
evalcond[0]=(((r22*x12850))+(((-1.0)*x12852*x12854))+((r21*x12856)));
evalcond[1]=((((-1.0)*x12853*x12854))+((r11*x12856))+((r12*x12850)));
evalcond[2]=((((-1.0)*r22*x12854))+(((-1.0)*x12852*x12855))+((r21*x12857)));
evalcond[3]=((((-1.0)*x12851*x12855))+(((-1.0)*r02*x12854))+((r01*x12857)));
evalcond[4]=((-1.0)+(((-1.0)*x12851*x12854))+((r01*x12856))+((r02*x12850)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12854))+(((-1.0)*x12853*x12855))+((r11*x12857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12858=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12858;
j4eval[1]=IKsign(x12858);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12859=((1.0)*cj5);
IkReal x12860=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12859)));
j4eval[0]=x12860;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12859))))));
j4eval[2]=IKsign(x12860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12861=cj5*cj5;
IkReal x12862=(r11*r21);
IkReal x12863=((1.0)*r20);
IkReal x12864=(cj5*sj5);
IkReal x12865=((((-1.0)*x12862))+((r10*r21*x12864))+(((-1.0)*r12*r22))+((r11*r20*x12864))+((x12861*x12862))+(((-1.0)*r10*x12861*x12863)));
j4eval[0]=x12865;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12863))))));
j4eval[2]=IKsign(x12865);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12866=cj5*cj5;
IkReal x12867=(r21*sj5);
IkReal x12868=(r11*r21);
IkReal x12869=((1.0)*r20);
CheckValue<IkReal> x12870=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12868))+(((-1.0)*r10*x12866*x12869))+(((-1.0)*r12*r22))+((x12866*x12868))+((cj5*r10*x12867))+((cj5*r11*r20*sj5)))),-1);
if(!x12870.valid){
continue;
}
CheckValue<IkReal> x12871 = IKatan2WithCheck(IkReal((x12867+(((-1.0)*cj5*x12869)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12870.value)))+(x12871.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12872=IKcos(j4);
IkReal x12873=IKsin(j4);
IkReal x12874=(cj5*r00);
IkReal x12875=(cj5*r20);
IkReal x12876=(cj5*r10);
IkReal x12877=((1.0)*x12872);
IkReal x12878=((1.0)*x12873);
IkReal x12879=(sj5*x12872);
IkReal x12880=(sj5*x12873);
evalcond[0]=(((r22*x12873))+((r21*x12879))+(((-1.0)*x12875*x12877)));
evalcond[1]=(((r11*x12879))+((r12*x12873))+(((-1.0)*x12876*x12877)));
evalcond[2]=((((-1.0)*r22*x12877))+(((-1.0)*x12875*x12878))+((r21*x12880)));
evalcond[3]=((((-1.0)*r02*x12877))+((r01*x12880))+(((-1.0)*x12874*x12878)));
evalcond[4]=((1.0)+((r01*x12879))+((r02*x12873))+(((-1.0)*x12874*x12877)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12877))+(((-1.0)*x12876*x12878))+((r11*x12880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12881=((1.0)*cj5);
CheckValue<IkReal> x12882 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12881))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12882.valid){
continue;
}
CheckValue<IkReal> x12883=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12881)))),-1);
if(!x12883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12882.value)+(((1.5707963267949)*(x12883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12884=IKcos(j4);
IkReal x12885=IKsin(j4);
IkReal x12886=(cj5*r00);
IkReal x12887=(cj5*r20);
IkReal x12888=(cj5*r10);
IkReal x12889=((1.0)*x12884);
IkReal x12890=((1.0)*x12885);
IkReal x12891=(sj5*x12884);
IkReal x12892=(sj5*x12885);
evalcond[0]=(((r21*x12891))+(((-1.0)*x12887*x12889))+((r22*x12885)));
evalcond[1]=(((r12*x12885))+(((-1.0)*x12888*x12889))+((r11*x12891)));
evalcond[2]=((((-1.0)*r22*x12889))+((r21*x12892))+(((-1.0)*x12887*x12890)));
evalcond[3]=(((r01*x12892))+(((-1.0)*r02*x12889))+(((-1.0)*x12886*x12890)));
evalcond[4]=((1.0)+(((-1.0)*x12886*x12889))+((r01*x12891))+((r02*x12885)));
evalcond[5]=((1.0)+(((-1.0)*x12888*x12890))+(((-1.0)*r12*x12889))+((r11*x12892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12893=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12893.valid){
continue;
}
CheckValue<IkReal> x12894 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12893.value)))+(x12894.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12895=IKcos(j4);
IkReal x12896=IKsin(j4);
IkReal x12897=(cj5*r00);
IkReal x12898=(cj5*r20);
IkReal x12899=(cj5*r10);
IkReal x12900=((1.0)*x12895);
IkReal x12901=((1.0)*x12896);
IkReal x12902=(sj5*x12895);
IkReal x12903=(sj5*x12896);
evalcond[0]=(((r22*x12896))+(((-1.0)*x12898*x12900))+((r21*x12902)));
evalcond[1]=(((r12*x12896))+(((-1.0)*x12899*x12900))+((r11*x12902)));
evalcond[2]=((((-1.0)*x12898*x12901))+((r21*x12903))+(((-1.0)*r22*x12900)));
evalcond[3]=(((r01*x12903))+(((-1.0)*r02*x12900))+(((-1.0)*x12897*x12901)));
evalcond[4]=((1.0)+((r01*x12902))+((r02*x12896))+(((-1.0)*x12897*x12900)));
evalcond[5]=((1.0)+(((-1.0)*x12899*x12901))+(((-1.0)*r12*x12900))+((r11*x12903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12904=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12904;
j4eval[1]=IKsign(x12904);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12905=((1.0)*cj5);
IkReal x12906=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12905)));
j4eval[0]=x12906;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12905))))));
j4eval[2]=IKsign(x12906);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12907=cj5*cj5;
IkReal x12908=(r11*r21);
IkReal x12909=((1.0)*r20);
IkReal x12910=(cj5*sj5);
IkReal x12911=(((r11*r20*x12910))+(((-1.0)*r12*r22))+(((-1.0)*x12908))+(((-1.0)*r10*x12907*x12909))+((x12907*x12908))+((r10*r21*x12910)));
j4eval[0]=x12911;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12909))))));
j4eval[2]=IKsign(x12911);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12912=cj5*cj5;
IkReal x12913=(r21*sj5);
IkReal x12914=(r11*r21);
IkReal x12915=((1.0)*r20);
CheckValue<IkReal> x12916 = IKatan2WithCheck(IkReal((x12913+(((-1.0)*cj5*x12915)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12916.valid){
continue;
}
CheckValue<IkReal> x12917=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x12914))+((x12912*x12914))+(((-1.0)*r10*x12912*x12915))+((cj5*r11*r20*sj5))+((cj5*r10*x12913)))),-1);
if(!x12917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12916.value)+(((1.5707963267949)*(x12917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12918=IKcos(j4);
IkReal x12919=IKsin(j4);
IkReal x12920=(cj5*r00);
IkReal x12921=(cj5*r20);
IkReal x12922=(cj5*r10);
IkReal x12923=((1.0)*x12918);
IkReal x12924=((1.0)*x12919);
IkReal x12925=(sj5*x12918);
IkReal x12926=(sj5*x12919);
evalcond[0]=(((r21*x12925))+(((-1.0)*x12921*x12923))+((r22*x12919)));
evalcond[1]=(((r11*x12925))+((r12*x12919))+(((-1.0)*x12922*x12923)));
evalcond[2]=(((r21*x12926))+(((-1.0)*x12921*x12924))+(((-1.0)*r22*x12923)));
evalcond[3]=((((-1.0)*r02*x12923))+((r01*x12926))+(((-1.0)*x12920*x12924)));
evalcond[4]=((1.0)+((r02*x12919))+((r01*x12925))+(((-1.0)*x12920*x12923)));
evalcond[5]=((1.0)+((r11*x12926))+(((-1.0)*r12*x12923))+(((-1.0)*x12922*x12924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12927=((1.0)*cj5);
CheckValue<IkReal> x12928 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12927))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12928.valid){
continue;
}
CheckValue<IkReal> x12929=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12927)))),-1);
if(!x12929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12928.value)+(((1.5707963267949)*(x12929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12930=IKcos(j4);
IkReal x12931=IKsin(j4);
IkReal x12932=(cj5*r00);
IkReal x12933=(cj5*r20);
IkReal x12934=(cj5*r10);
IkReal x12935=((1.0)*x12930);
IkReal x12936=((1.0)*x12931);
IkReal x12937=(sj5*x12930);
IkReal x12938=(sj5*x12931);
evalcond[0]=((((-1.0)*x12933*x12935))+((r22*x12931))+((r21*x12937)));
evalcond[1]=(((r11*x12937))+((r12*x12931))+(((-1.0)*x12934*x12935)));
evalcond[2]=((((-1.0)*x12933*x12936))+(((-1.0)*r22*x12935))+((r21*x12938)));
evalcond[3]=((((-1.0)*r02*x12935))+(((-1.0)*x12932*x12936))+((r01*x12938)));
evalcond[4]=((1.0)+((r02*x12931))+(((-1.0)*x12932*x12935))+((r01*x12937)));
evalcond[5]=((1.0)+((r11*x12938))+(((-1.0)*r12*x12935))+(((-1.0)*x12934*x12936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12939=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12939.valid){
continue;
}
CheckValue<IkReal> x12940 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12939.value)))+(x12940.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12941=IKcos(j4);
IkReal x12942=IKsin(j4);
IkReal x12943=(cj5*r00);
IkReal x12944=(cj5*r20);
IkReal x12945=(cj5*r10);
IkReal x12946=((1.0)*x12941);
IkReal x12947=((1.0)*x12942);
IkReal x12948=(sj5*x12941);
IkReal x12949=(sj5*x12942);
evalcond[0]=(((r22*x12942))+((r21*x12948))+(((-1.0)*x12944*x12946)));
evalcond[1]=(((r12*x12942))+(((-1.0)*x12945*x12946))+((r11*x12948)));
evalcond[2]=(((r21*x12949))+(((-1.0)*r22*x12946))+(((-1.0)*x12944*x12947)));
evalcond[3]=(((r01*x12949))+(((-1.0)*r02*x12946))+(((-1.0)*x12943*x12947)));
evalcond[4]=((1.0)+((r01*x12948))+((r02*x12942))+(((-1.0)*x12943*x12946)));
evalcond[5]=((1.0)+(((-1.0)*x12945*x12947))+((r11*x12949))+(((-1.0)*r12*x12946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12950=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12950;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12950);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12951=((1.0)*cj5);
IkReal x12952=((((-1.0)*r21*x12951))+(((-1.0)*r20*sj5)));
j4eval[0]=x12952;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12951))+((r11*sj5))))));
j4eval[2]=IKsign(x12952);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12953=cj5*cj5;
IkReal x12954=(r11*r21);
IkReal x12955=((1.0)*r20);
IkReal x12956=(cj5*sj5);
IkReal x12957=((((-1.0)*r10*x12953*x12955))+(((-1.0)*r12*r22))+((x12953*x12954))+((r10*r21*x12956))+((r11*r20*x12956))+(((-1.0)*x12954)));
j4eval[0]=x12957;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12955))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12957);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12958=cj5*cj5;
IkReal x12959=(r21*sj5);
IkReal x12960=(r11*r21);
IkReal x12961=((1.0)*r20);
CheckValue<IkReal> x12962 = IKatan2WithCheck(IkReal((x12959+(((-1.0)*cj5*x12961)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12962.valid){
continue;
}
CheckValue<IkReal> x12963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x12958*x12961))+(((-1.0)*x12960))+((cj5*r10*x12959))+((cj5*r11*r20*sj5))+((x12958*x12960)))),-1);
if(!x12963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12962.value)+(((1.5707963267949)*(x12963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12964=IKcos(j4);
IkReal x12965=IKsin(j4);
IkReal x12966=(cj5*r00);
IkReal x12967=(cj5*r20);
IkReal x12968=(cj5*r10);
IkReal x12969=((1.0)*x12964);
IkReal x12970=((1.0)*x12965);
IkReal x12971=(sj5*x12964);
IkReal x12972=(sj5*x12965);
evalcond[0]=((((-1.0)*x12967*x12969))+((r22*x12965))+((r21*x12971)));
evalcond[1]=(((r11*x12971))+((r12*x12965))+(((-1.0)*x12968*x12969)));
evalcond[2]=((((-1.0)*r22*x12969))+(((-1.0)*x12967*x12970))+((r21*x12972)));
evalcond[3]=(((r01*x12972))+(((-1.0)*x12966*x12970))+(((-1.0)*r02*x12969)));
evalcond[4]=((-1.0)+((r01*x12971))+(((-1.0)*x12966*x12969))+((r02*x12965)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12969))+((r11*x12972))+(((-1.0)*x12968*x12970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12973=((1.0)*cj5);
CheckValue<IkReal> x12974=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12973))+(((-1.0)*r20*sj5)))),-1);
if(!x12974.valid){
continue;
}
CheckValue<IkReal> x12975 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12973)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12974.value)))+(x12975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12976=IKcos(j4);
IkReal x12977=IKsin(j4);
IkReal x12978=(cj5*r00);
IkReal x12979=(cj5*r20);
IkReal x12980=(cj5*r10);
IkReal x12981=((1.0)*x12976);
IkReal x12982=((1.0)*x12977);
IkReal x12983=(sj5*x12976);
IkReal x12984=(sj5*x12977);
evalcond[0]=(((r21*x12983))+(((-1.0)*x12979*x12981))+((r22*x12977)));
evalcond[1]=((((-1.0)*x12980*x12981))+((r11*x12983))+((r12*x12977)));
evalcond[2]=((((-1.0)*r22*x12981))+((r21*x12984))+(((-1.0)*x12979*x12982)));
evalcond[3]=(((r01*x12984))+(((-1.0)*r02*x12981))+(((-1.0)*x12978*x12982)));
evalcond[4]=((-1.0)+((r02*x12977))+((r01*x12983))+(((-1.0)*x12978*x12981)));
evalcond[5]=((1.0)+(((-1.0)*x12980*x12982))+((r11*x12984))+(((-1.0)*r12*x12981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12985 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12985.valid){
continue;
}
CheckValue<IkReal> x12986=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12985.value)+(((1.5707963267949)*(x12986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12987=IKcos(j4);
IkReal x12988=IKsin(j4);
IkReal x12989=(cj5*r00);
IkReal x12990=(cj5*r20);
IkReal x12991=(cj5*r10);
IkReal x12992=((1.0)*x12987);
IkReal x12993=((1.0)*x12988);
IkReal x12994=(sj5*x12987);
IkReal x12995=(sj5*x12988);
evalcond[0]=(((r22*x12988))+((r21*x12994))+(((-1.0)*x12990*x12992)));
evalcond[1]=(((r11*x12994))+(((-1.0)*x12991*x12992))+((r12*x12988)));
evalcond[2]=((((-1.0)*r22*x12992))+((r21*x12995))+(((-1.0)*x12990*x12993)));
evalcond[3]=(((r01*x12995))+(((-1.0)*x12989*x12993))+(((-1.0)*r02*x12992)));
evalcond[4]=((-1.0)+((r01*x12994))+(((-1.0)*x12989*x12992))+((r02*x12988)));
evalcond[5]=((1.0)+((r11*x12995))+(((-1.0)*x12991*x12993))+(((-1.0)*r12*x12992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12996=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12996;
j4eval[1]=IKsign(x12996);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12997=((1.0)*cj5);
IkReal x12998=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12997)));
j4eval[0]=x12998;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12997)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12998);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12999=cj5*cj5;
IkReal x13000=(r11*r21);
IkReal x13001=((1.0)*r20);
IkReal x13002=(cj5*sj5);
IkReal x13003=(((r10*r21*x13002))+(((-1.0)*r12*r22))+(((-1.0)*x13000))+((x12999*x13000))+((r11*r20*x13002))+(((-1.0)*r10*x12999*x13001)));
j4eval[0]=x13003;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13001))))));
j4eval[2]=IKsign(x13003);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13004=cj5*cj5;
IkReal x13005=(r21*sj5);
IkReal x13006=(r11*r21);
IkReal x13007=((1.0)*r20);
CheckValue<IkReal> x13008 = IKatan2WithCheck(IkReal((x13005+(((-1.0)*cj5*x13007)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13008.valid){
continue;
}
CheckValue<IkReal> x13009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13004*x13007))+(((-1.0)*r12*r22))+((cj5*r10*x13005))+((x13004*x13006))+(((-1.0)*x13006))+((cj5*r11*r20*sj5)))),-1);
if(!x13009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13008.value)+(((1.5707963267949)*(x13009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13010=IKcos(j4);
IkReal x13011=IKsin(j4);
IkReal x13012=(cj5*r00);
IkReal x13013=(cj5*r20);
IkReal x13014=(cj5*r10);
IkReal x13015=((1.0)*x13010);
IkReal x13016=((1.0)*x13011);
IkReal x13017=(sj5*x13010);
IkReal x13018=(sj5*x13011);
evalcond[0]=((((-1.0)*x13013*x13015))+((r21*x13017))+((r22*x13011)));
evalcond[1]=(((r11*x13017))+(((-1.0)*x13014*x13015))+((r12*x13011)));
evalcond[2]=((((-1.0)*x13013*x13016))+(((-1.0)*r22*x13015))+((r21*x13018)));
evalcond[3]=((((-1.0)*x13012*x13016))+((r01*x13018))+(((-1.0)*r02*x13015)));
evalcond[4]=((1.0)+(((-1.0)*x13012*x13015))+((r01*x13017))+((r02*x13011)));
evalcond[5]=((1.0)+((r11*x13018))+(((-1.0)*x13014*x13016))+(((-1.0)*r12*x13015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13019=((1.0)*cj5);
CheckValue<IkReal> x13020 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13019)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13020.valid){
continue;
}
CheckValue<IkReal> x13021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13019)))),-1);
if(!x13021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13020.value)+(((1.5707963267949)*(x13021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13022=IKcos(j4);
IkReal x13023=IKsin(j4);
IkReal x13024=(cj5*r00);
IkReal x13025=(cj5*r20);
IkReal x13026=(cj5*r10);
IkReal x13027=((1.0)*x13022);
IkReal x13028=((1.0)*x13023);
IkReal x13029=(sj5*x13022);
IkReal x13030=(sj5*x13023);
evalcond[0]=(((r21*x13029))+(((-1.0)*x13025*x13027))+((r22*x13023)));
evalcond[1]=(((r11*x13029))+((r12*x13023))+(((-1.0)*x13026*x13027)));
evalcond[2]=((((-1.0)*r22*x13027))+(((-1.0)*x13025*x13028))+((r21*x13030)));
evalcond[3]=((((-1.0)*x13024*x13028))+((r01*x13030))+(((-1.0)*r02*x13027)));
evalcond[4]=((1.0)+((r01*x13029))+(((-1.0)*x13024*x13027))+((r02*x13023)));
evalcond[5]=((1.0)+((r11*x13030))+(((-1.0)*x13026*x13028))+(((-1.0)*r12*x13027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13031=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13031.valid){
continue;
}
CheckValue<IkReal> x13032 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13031.value)))+(x13032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13033=IKcos(j4);
IkReal x13034=IKsin(j4);
IkReal x13035=(cj5*r00);
IkReal x13036=(cj5*r20);
IkReal x13037=(cj5*r10);
IkReal x13038=((1.0)*x13033);
IkReal x13039=((1.0)*x13034);
IkReal x13040=(sj5*x13033);
IkReal x13041=(sj5*x13034);
evalcond[0]=((((-1.0)*x13036*x13038))+((r22*x13034))+((r21*x13040)));
evalcond[1]=(((r11*x13040))+((r12*x13034))+(((-1.0)*x13037*x13038)));
evalcond[2]=((((-1.0)*x13036*x13039))+((r21*x13041))+(((-1.0)*r22*x13038)));
evalcond[3]=((((-1.0)*x13035*x13039))+(((-1.0)*r02*x13038))+((r01*x13041)));
evalcond[4]=((1.0)+(((-1.0)*x13035*x13038))+((r01*x13040))+((r02*x13034)));
evalcond[5]=((1.0)+((r11*x13041))+(((-1.0)*r12*x13038))+(((-1.0)*x13037*x13039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13042=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13042;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13043=((1.0)*cj5);
IkReal x13044=((((-1.0)*r21*x13043))+(((-1.0)*r20*sj5)));
j4eval[0]=x13044;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13043))+((r11*sj5))))));
j4eval[2]=IKsign(x13044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13045=cj5*cj5;
IkReal x13046=(r11*r21);
IkReal x13047=((1.0)*r20);
IkReal x13048=(cj5*sj5);
IkReal x13049=((((-1.0)*x13046))+((r11*r20*x13048))+(((-1.0)*r12*r22))+((r10*r21*x13048))+((x13045*x13046))+(((-1.0)*r10*x13045*x13047)));
j4eval[0]=x13049;
j4eval[1]=((IKabs(((((-1.0)*cj5*x13047))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13050=cj5*cj5;
IkReal x13051=(r21*sj5);
IkReal x13052=(r11*r21);
IkReal x13053=((1.0)*r20);
CheckValue<IkReal> x13054=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13050*x13053))+(((-1.0)*x13052))+(((-1.0)*r12*r22))+((cj5*r10*x13051))+((cj5*r11*r20*sj5))+((x13050*x13052)))),-1);
if(!x13054.valid){
continue;
}
CheckValue<IkReal> x13055 = IKatan2WithCheck(IkReal((x13051+(((-1.0)*cj5*x13053)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13054.value)))+(x13055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13056=IKcos(j4);
IkReal x13057=IKsin(j4);
IkReal x13058=(cj5*r00);
IkReal x13059=(cj5*r20);
IkReal x13060=(cj5*r10);
IkReal x13061=((1.0)*x13056);
IkReal x13062=((1.0)*x13057);
IkReal x13063=(sj5*x13056);
IkReal x13064=(sj5*x13057);
evalcond[0]=(((r22*x13057))+((r21*x13063))+(((-1.0)*x13059*x13061)));
evalcond[1]=(((r12*x13057))+(((-1.0)*x13060*x13061))+((r11*x13063)));
evalcond[2]=(((r21*x13064))+(((-1.0)*x13059*x13062))+(((-1.0)*r22*x13061)));
evalcond[3]=((((-1.0)*r02*x13061))+((r01*x13064))+(((-1.0)*x13058*x13062)));
evalcond[4]=((-1.0)+((r02*x13057))+((r01*x13063))+(((-1.0)*x13058*x13061)));
evalcond[5]=((1.0)+(((-1.0)*x13060*x13062))+(((-1.0)*r12*x13061))+((r11*x13064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13065=((1.0)*cj5);
CheckValue<IkReal> x13066 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13065)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13066.valid){
continue;
}
CheckValue<IkReal> x13067=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13065))+(((-1.0)*r20*sj5)))),-1);
if(!x13067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13066.value)+(((1.5707963267949)*(x13067.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13068=IKcos(j4);
IkReal x13069=IKsin(j4);
IkReal x13070=(cj5*r00);
IkReal x13071=(cj5*r20);
IkReal x13072=(cj5*r10);
IkReal x13073=((1.0)*x13068);
IkReal x13074=((1.0)*x13069);
IkReal x13075=(sj5*x13068);
IkReal x13076=(sj5*x13069);
evalcond[0]=(((r21*x13075))+((r22*x13069))+(((-1.0)*x13071*x13073)));
evalcond[1]=(((r12*x13069))+(((-1.0)*x13072*x13073))+((r11*x13075)));
evalcond[2]=(((r21*x13076))+(((-1.0)*r22*x13073))+(((-1.0)*x13071*x13074)));
evalcond[3]=((((-1.0)*r02*x13073))+((r01*x13076))+(((-1.0)*x13070*x13074)));
evalcond[4]=((-1.0)+((r02*x13069))+((r01*x13075))+(((-1.0)*x13070*x13073)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13073))+(((-1.0)*x13072*x13074))+((r11*x13076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13077 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13077.valid){
continue;
}
CheckValue<IkReal> x13078=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13077.value)+(((1.5707963267949)*(x13078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13079=IKcos(j4);
IkReal x13080=IKsin(j4);
IkReal x13081=(cj5*r00);
IkReal x13082=(cj5*r20);
IkReal x13083=(cj5*r10);
IkReal x13084=((1.0)*x13079);
IkReal x13085=((1.0)*x13080);
IkReal x13086=(sj5*x13079);
IkReal x13087=(sj5*x13080);
evalcond[0]=((((-1.0)*x13082*x13084))+((r22*x13080))+((r21*x13086)));
evalcond[1]=(((r11*x13086))+((r12*x13080))+(((-1.0)*x13083*x13084)));
evalcond[2]=((((-1.0)*x13082*x13085))+(((-1.0)*r22*x13084))+((r21*x13087)));
evalcond[3]=((((-1.0)*r02*x13084))+(((-1.0)*x13081*x13085))+((r01*x13087)));
evalcond[4]=((-1.0)+((r02*x13080))+(((-1.0)*x13081*x13084))+((r01*x13086)));
evalcond[5]=((1.0)+((r11*x13087))+(((-1.0)*x13083*x13085))+(((-1.0)*r12*x13084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13088=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13088);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13088);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13089=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13089);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13089);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13090=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13090))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13090)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13091=((1.0)*cj5);
CheckValue<IkReal> x13092=IKPowWithIntegerCheck(((((-1.0)*r10*x13091))+((r11*sj5))),-1);
if(!x13092.valid){
continue;
}
CheckValue<IkReal> x13093=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13091))),-1);
if(!x13093.valid){
continue;
}
if( IKabs(((-1.0)*(x13092.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13093.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13092.value)))+IKsqr(((x13093.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13092.value)), ((x13093.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13094=IKsin(j4);
IkReal x13095=IKcos(j4);
IkReal x13096=((1.0)*cj5);
IkReal x13097=((1.0)*cj2);
IkReal x13098=(sj5*x13095);
IkReal x13099=(sj5*x13094);
evalcond[0]=((-1.0)*r22*x13095);
evalcond[1]=((((-1.0)*cj1*x13097))+((sj1*sj2))+((r22*x13094)));
evalcond[2]=((((-1.0)*r00*x13094*x13096))+((r01*x13099)));
evalcond[3]=((((-1.0)*r10*x13095*x13096))+((r11*x13098)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13094*x13096))+((r11*x13099)));
evalcond[5]=((((-1.0)*r00*x13095*x13096))+(((-1.0)*cj1*sj2))+((r01*x13098))+(((-1.0)*sj1*x13097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13100=IKPowWithIntegerCheck(r22,-1);
if(!x13100.valid){
continue;
}
CheckValue<IkReal> x13101=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13101.valid){
continue;
}
if( IKabs(((x13100.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13101.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13100.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13101.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13100.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13101.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13102=IKsin(j4);
IkReal x13103=IKcos(j4);
IkReal x13104=((1.0)*cj5);
IkReal x13105=((1.0)*cj2);
IkReal x13106=(sj5*x13103);
IkReal x13107=(sj5*x13102);
evalcond[0]=((-1.0)*r22*x13103);
evalcond[1]=(((sj1*sj2))+((r22*x13102))+(((-1.0)*cj1*x13105)));
evalcond[2]=(((r01*x13107))+(((-1.0)*r00*x13102*x13104)));
evalcond[3]=((((-1.0)*r10*x13103*x13104))+((r11*x13106)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13102*x13104))+((r11*x13107)));
evalcond[5]=(((r01*x13106))+(((-1.0)*r00*x13103*x13104))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13108=(sj1*sj2);
IkReal x13109=(cj5*r10);
IkReal x13110=(r11*sj5);
IkReal x13111=(cj1*cj2);
CheckValue<IkReal> x13112 = IKatan2WithCheck(IkReal((((x13108*x13110))+((x13109*x13111))+(((-1.0)*x13110*x13111))+(((-1.0)*x13108*x13109)))),IkReal((((r12*x13111))+(((-1.0)*r12*x13108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13112.valid){
continue;
}
CheckValue<IkReal> x13113=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13112.value)+(((1.5707963267949)*(x13113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13114=IKcos(j4);
IkReal x13115=IKsin(j4);
IkReal x13116=(cj5*r00);
IkReal x13117=(cj5*r10);
IkReal x13118=(r21*sj5);
IkReal x13119=((1.0)*cj2);
IkReal x13120=(cj5*r20);
IkReal x13121=((1.0)*x13114);
IkReal x13122=((1.0)*x13115);
IkReal x13123=(sj5*x13115);
IkReal x13124=(sj5*x13114);
evalcond[0]=(((r12*x13115))+((r11*x13124))+(((-1.0)*x13117*x13121)));
evalcond[1]=((((-1.0)*x13120*x13122))+((x13115*x13118))+(((-1.0)*r22*x13121)));
evalcond[2]=((((-1.0)*r02*x13121))+((r01*x13123))+(((-1.0)*x13116*x13122)));
evalcond[3]=((1.0)+((r11*x13123))+(((-1.0)*x13117*x13122))+(((-1.0)*r12*x13121)));
evalcond[4]=(((r22*x13115))+(((-1.0)*x13120*x13121))+((sj1*sj2))+((x13114*x13118))+(((-1.0)*cj1*x13119)));
evalcond[5]=(((r02*x13115))+(((-1.0)*cj1*sj2))+((r01*x13124))+(((-1.0)*x13116*x13121))+(((-1.0)*sj1*x13119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13125=((1.0)*cj5);
CheckValue<IkReal> x13126 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13125)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13126.valid){
continue;
}
CheckValue<IkReal> x13127=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13125))+(((-1.0)*r00*sj5)))),-1);
if(!x13127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13126.value)+(((1.5707963267949)*(x13127.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13128=IKcos(j4);
IkReal x13129=IKsin(j4);
IkReal x13130=(cj5*r00);
IkReal x13131=(cj5*r10);
IkReal x13132=(r21*sj5);
IkReal x13133=((1.0)*cj2);
IkReal x13134=(cj5*r20);
IkReal x13135=((1.0)*x13128);
IkReal x13136=((1.0)*x13129);
IkReal x13137=(sj5*x13129);
IkReal x13138=(sj5*x13128);
evalcond[0]=(((r12*x13129))+((r11*x13138))+(((-1.0)*x13131*x13135)));
evalcond[1]=(((x13129*x13132))+(((-1.0)*x13134*x13136))+(((-1.0)*r22*x13135)));
evalcond[2]=(((r01*x13137))+(((-1.0)*r02*x13135))+(((-1.0)*x13130*x13136)));
evalcond[3]=((1.0)+((r11*x13137))+(((-1.0)*x13131*x13136))+(((-1.0)*r12*x13135)));
evalcond[4]=((((-1.0)*cj1*x13133))+((x13128*x13132))+(((-1.0)*x13134*x13135))+((sj1*sj2))+((r22*x13129)));
evalcond[5]=(((r01*x13138))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13133))+((r02*x13129))+(((-1.0)*x13130*x13135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13139=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13139.valid){
continue;
}
CheckValue<IkReal> x13140 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13139.value)))+(x13140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13141=IKcos(j4);
IkReal x13142=IKsin(j4);
IkReal x13143=(cj5*r00);
IkReal x13144=(cj5*r10);
IkReal x13145=(r21*sj5);
IkReal x13146=((1.0)*cj2);
IkReal x13147=(cj5*r20);
IkReal x13148=((1.0)*x13141);
IkReal x13149=((1.0)*x13142);
IkReal x13150=(sj5*x13142);
IkReal x13151=(sj5*x13141);
evalcond[0]=((((-1.0)*x13144*x13148))+((r12*x13142))+((r11*x13151)));
evalcond[1]=((((-1.0)*x13147*x13149))+((x13142*x13145))+(((-1.0)*r22*x13148)));
evalcond[2]=((((-1.0)*x13143*x13149))+(((-1.0)*r02*x13148))+((r01*x13150)));
evalcond[3]=((1.0)+(((-1.0)*x13144*x13149))+(((-1.0)*r12*x13148))+((r11*x13150)));
evalcond[4]=((((-1.0)*x13147*x13148))+((x13141*x13145))+((r22*x13142))+((sj1*sj2))+(((-1.0)*cj1*x13146)));
evalcond[5]=((((-1.0)*x13143*x13148))+(((-1.0)*sj1*x13146))+(((-1.0)*cj1*sj2))+((r02*x13142))+((r01*x13151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13152=((-1.0)*r00);
IkReal x13154 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13154)==0){
continue;
}
IkReal x13153=pow(x13154,-0.5);
CheckValue<IkReal> x13155 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13152),IKFAST_ATAN2_MAGTHRESH);
if(!x13155.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13155.value));
IkReal gconst19=(r01*x13153);
IkReal gconst20=(x13152*x13153);
CheckValue<IkReal> x13156 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13156.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13156.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13157=((-1.0)*r00);
IkReal x13158=x13153;
CheckValue<IkReal> x13160 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13157),IKFAST_ATAN2_MAGTHRESH);
if(!x13160.valid){
continue;
}
IkReal x13159=((-1.0)*(x13160.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13159;
IkReal gconst18=x13159;
IkReal gconst19=(r01*x13158);
IkReal gconst20=(x13157*x13158);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13161=((-1.0)*r00);
IkReal x13162=x13153;
CheckValue<IkReal> x13164 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13161),IKFAST_ATAN2_MAGTHRESH);
if(!x13164.valid){
continue;
}
IkReal x13163=((-1.0)*(x13164.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13163;
IkReal gconst18=x13163;
IkReal gconst19=(r01*x13162);
IkReal gconst20=(x13161*x13162);
CheckValue<IkReal> x13172=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13172.valid){
continue;
}
IkReal x13165=x13172.value;
IkReal x13166=(sj3*x13165);
IkReal x13167=(r11*x13166);
IkReal x13168=(r21*x13166);
IkReal x13169=(r20*x13166);
IkReal x13170=(r10*x13166);
IkReal x13171=(r00*r01*x13166);
j4eval[0]=IKsign((((r10*x13169*(r00*r00)))+((r00*r01*r10*x13168))+((r12*r22*sj3))+((r00*r01*r20*x13167))+((r21*x13167*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13173=gconst19*gconst19;
IkReal x13174=gconst20*gconst20;
IkReal x13175=(gconst20*sj3);
IkReal x13176=((1.0)*cj3);
IkReal x13177=(r10*sj3);
IkReal x13178=(gconst19*r21);
IkReal x13179=(r11*r20);
IkReal x13180=(cj3*gconst20);
IkReal x13181=((1.0)*r10*r20);
IkReal x13182=(r21*x13173);
CheckValue<IkReal> x13183=IKPowWithIntegerCheck(IKsign((((gconst19*x13179*x13180))+(((-1.0)*r10*r20*x13174*x13176))+(((-1.0)*r11*x13176*x13182))+(((-1.0)*r12*r22*x13176))+((r10*x13178*x13180)))),-1);
if(!x13183.valid){
continue;
}
CheckValue<IkReal> x13184 = IKatan2WithCheck(IkReal((((gconst19*r22*x13177))+((r11*r22*x13175)))),IkReal(((((-1.0)*gconst19*x13175*x13181))+((r11*x13175*x13178))+(((-1.0)*sj3*x13174*x13179))+((x13177*x13182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13183.value)))+(x13184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13185=IKsin(j4);
IkReal x13186=IKcos(j4);
IkReal x13187=(sj1*sj2);
IkReal x13188=(gconst20*sj3);
IkReal x13189=(gconst19*r21);
IkReal x13190=(gconst20*r10);
IkReal x13191=(cj3*gconst19);
IkReal x13192=(gconst19*sj3);
IkReal x13193=((1.0)*cj1);
IkReal x13194=(cj3*gconst20);
IkReal x13195=(cj2*sj1);
IkReal x13196=(cj2*x13193);
IkReal x13197=((1.0)*x13186);
IkReal x13198=((1.0)*x13185);
IkReal x13199=(cj3*x13185);
IkReal x13200=(gconst19*x13185);
evalcond[0]=((((-1.0)*gconst20*r20*x13198))+(((-1.0)*r22*x13197))+((x13185*x13189)));
evalcond[1]=(((r01*x13200))+(((-1.0)*r02*x13197))+(((-1.0)*gconst20*r00*x13198)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13197))+((r11*x13200))+(((-1.0)*x13190*x13198)));
evalcond[3]=(((r12*x13199))+((r11*x13188))+((r10*x13192))+((r11*x13186*x13191))+(((-1.0)*cj3*x13190*x13197)));
evalcond[4]=(((r11*x13194))+((r10*x13191))+(((-1.0)*r11*x13192*x13197))+((r10*x13186*x13188))+(((-1.0)*r12*sj3*x13198)));
evalcond[5]=((((-1.0)*r20*x13194*x13197))+((r21*x13188))+((cj1*sj2))+((cj3*x13186*x13189))+((r20*x13192))+x13195+((r22*x13199)));
evalcond[6]=((((-1.0)*r00*x13194*x13197))+(((-1.0)*x13196))+((r02*x13199))+((r01*x13186*x13191))+((r01*x13188))+((r00*x13192))+x13187);
evalcond[7]=((((-1.0)*x13196))+(((-1.0)*sj3*x13189*x13197))+((r21*x13194))+(((-1.0)*r22*sj3*x13198))+((r20*x13191))+((r20*x13186*x13188))+x13187);
evalcond[8]=((((-1.0)*x13195))+(((-1.0)*r01*x13192*x13197))+((r00*x13191))+((r01*x13194))+(((-1.0)*sj2*x13193))+((r00*x13186*x13188))+(((-1.0)*r02*sj3*x13198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13201=gconst19*gconst19;
IkReal x13202=gconst20*gconst20;
IkReal x13203=(r21*sj3);
IkReal x13204=(cj3*r11);
IkReal x13205=(gconst19*gconst20);
IkReal x13206=((1.0)*r10);
IkReal x13207=(cj3*r10);
IkReal x13208=(r20*x13202);
CheckValue<IkReal> x13209=IKPowWithIntegerCheck(IKsign((((r10*sj3*x13208))+(((-1.0)*r11*r20*sj3*x13205))+((r12*r22*sj3))+((r11*x13201*x13203))+(((-1.0)*x13203*x13205*x13206)))),-1);
if(!x13209.valid){
continue;
}
CheckValue<IkReal> x13210 = IKatan2WithCheck(IkReal((((gconst20*r22*x13204))+((gconst19*r22*x13207)))),IkReal(((((-1.0)*cj3*r20*x13205*x13206))+((r21*x13204*x13205))+(((-1.0)*x13204*x13208))+((r21*x13201*x13207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13209.value)))+(x13210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13211=IKsin(j4);
IkReal x13212=IKcos(j4);
IkReal x13213=(sj1*sj2);
IkReal x13214=(gconst20*sj3);
IkReal x13215=(gconst19*r21);
IkReal x13216=(gconst20*r10);
IkReal x13217=(cj3*gconst19);
IkReal x13218=(gconst19*sj3);
IkReal x13219=((1.0)*cj1);
IkReal x13220=(cj3*gconst20);
IkReal x13221=(cj2*sj1);
IkReal x13222=(cj2*x13219);
IkReal x13223=((1.0)*x13212);
IkReal x13224=((1.0)*x13211);
IkReal x13225=(cj3*x13211);
IkReal x13226=(gconst19*x13211);
evalcond[0]=(((x13211*x13215))+(((-1.0)*r22*x13223))+(((-1.0)*gconst20*r20*x13224)));
evalcond[1]=((((-1.0)*r02*x13223))+((r01*x13226))+(((-1.0)*gconst20*r00*x13224)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13223))+((r11*x13226))+(((-1.0)*x13216*x13224)));
evalcond[3]=(((r11*x13212*x13217))+((r11*x13214))+((r10*x13218))+((r12*x13225))+(((-1.0)*cj3*x13216*x13223)));
evalcond[4]=(((r10*x13217))+((r11*x13220))+(((-1.0)*r12*sj3*x13224))+((r10*x13212*x13214))+(((-1.0)*r11*x13218*x13223)));
evalcond[5]=(((r21*x13214))+((cj1*sj2))+((r22*x13225))+((r20*x13218))+(((-1.0)*r20*x13220*x13223))+x13221+((cj3*x13212*x13215)));
evalcond[6]=(((r02*x13225))+((r00*x13218))+((r01*x13214))+((r01*x13212*x13217))+(((-1.0)*x13222))+x13213+(((-1.0)*r00*x13220*x13223)));
evalcond[7]=((((-1.0)*sj3*x13215*x13223))+((r21*x13220))+(((-1.0)*r22*sj3*x13224))+((r20*x13217))+(((-1.0)*x13222))+((r20*x13212*x13214))+x13213);
evalcond[8]=(((r00*x13217))+(((-1.0)*x13221))+(((-1.0)*r02*sj3*x13224))+(((-1.0)*sj2*x13219))+((r00*x13212*x13214))+(((-1.0)*r01*x13218*x13223))+((r01*x13220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13227 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13227.valid){
continue;
}
CheckValue<IkReal> x13228=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13227.value)+(((1.5707963267949)*(x13228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13229=IKsin(j4);
IkReal x13230=IKcos(j4);
IkReal x13231=(sj1*sj2);
IkReal x13232=(gconst20*sj3);
IkReal x13233=(gconst19*r21);
IkReal x13234=(gconst20*r10);
IkReal x13235=(cj3*gconst19);
IkReal x13236=(gconst19*sj3);
IkReal x13237=((1.0)*cj1);
IkReal x13238=(cj3*gconst20);
IkReal x13239=(cj2*sj1);
IkReal x13240=(cj2*x13237);
IkReal x13241=((1.0)*x13230);
IkReal x13242=((1.0)*x13229);
IkReal x13243=(cj3*x13229);
IkReal x13244=(gconst19*x13229);
evalcond[0]=(((x13229*x13233))+(((-1.0)*r22*x13241))+(((-1.0)*gconst20*r20*x13242)));
evalcond[1]=((((-1.0)*r02*x13241))+((r01*x13244))+(((-1.0)*gconst20*r00*x13242)));
evalcond[2]=((1.0)+(((-1.0)*x13234*x13242))+((r11*x13244))+(((-1.0)*r12*x13241)));
evalcond[3]=(((r11*x13230*x13235))+((r10*x13236))+((r11*x13232))+((r12*x13243))+(((-1.0)*cj3*x13234*x13241)));
evalcond[4]=(((r10*x13235))+(((-1.0)*r11*x13236*x13241))+((r11*x13238))+((r10*x13230*x13232))+(((-1.0)*r12*sj3*x13242)));
evalcond[5]=(((r20*x13236))+((cj1*sj2))+((r22*x13243))+((cj3*x13230*x13233))+((r21*x13232))+(((-1.0)*r20*x13238*x13241))+x13239);
evalcond[6]=(((r01*x13232))+(((-1.0)*r00*x13238*x13241))+((r02*x13243))+(((-1.0)*x13240))+x13231+((r01*x13230*x13235))+((r00*x13236)));
evalcond[7]=(((r20*x13235))+(((-1.0)*r22*sj3*x13242))+((r20*x13230*x13232))+(((-1.0)*sj3*x13233*x13241))+((r21*x13238))+(((-1.0)*x13240))+x13231);
evalcond[8]=(((r01*x13238))+(((-1.0)*r02*sj3*x13242))+(((-1.0)*r01*x13236*x13241))+((r00*x13230*x13232))+(((-1.0)*x13239))+(((-1.0)*sj2*x13237))+((r00*x13235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13245=((-1.0)*r01);
IkReal x13247 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13247)==0){
continue;
}
IkReal x13246=pow(x13247,-0.5);
CheckValue<IkReal> x13248 = IKatan2WithCheck(IkReal(x13245),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13248.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13248.value))));
IkReal gconst22=(x13245*x13246);
IkReal gconst23=((1.0)*r00*x13246);
CheckValue<IkReal> x13249 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13249.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13249.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13250=((-1.0)*r01);
CheckValue<IkReal> x13253 = IKatan2WithCheck(IkReal(x13250),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13253.valid){
continue;
}
IkReal x13251=((1.0)*(x13253.value));
IkReal x13252=x13246;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13251)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13251)));
IkReal gconst22=(x13250*x13252);
IkReal gconst23=((1.0)*r00*x13252);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13254=((-1.0)*r01);
CheckValue<IkReal> x13257 = IKatan2WithCheck(IkReal(x13254),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13257.valid){
continue;
}
IkReal x13255=((1.0)*(x13257.value));
IkReal x13256=x13246;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13255)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13255)));
IkReal gconst22=(x13254*x13256);
IkReal gconst23=((1.0)*r00*x13256);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13258=gconst22*gconst22;
IkReal x13259=gconst23*gconst23;
IkReal x13260=(r21*sj3);
IkReal x13261=((1.0)*cj3);
IkReal x13262=(gconst23*r11);
IkReal x13263=(r22*sj3);
IkReal x13264=(gconst22*r10);
IkReal x13265=((1.0)*r20*sj3);
CheckValue<IkReal> x13266=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x13259*x13261))+(((-1.0)*r12*r22*x13261))+(((-1.0)*r11*r21*x13258*x13261))+((cj3*gconst22*r20*x13262))+((cj3*gconst23*r21*x13264)))),-1);
if(!x13266.valid){
continue;
}
CheckValue<IkReal> x13267 = IKatan2WithCheck(IkReal((((x13262*x13263))+((x13263*x13264)))),IkReal((((r10*x13258*x13260))+((gconst22*x13260*x13262))+(((-1.0)*gconst23*x13264*x13265))+(((-1.0)*r11*x13259*x13265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13266.value)))+(x13267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13268=IKsin(j4);
IkReal x13269=IKcos(j4);
IkReal x13270=(sj1*sj2);
IkReal x13271=(gconst23*sj3);
IkReal x13272=(gconst22*sj3);
IkReal x13273=(cj2*sj1);
IkReal x13274=((1.0)*cj1);
IkReal x13275=(cj3*gconst23);
IkReal x13276=(cj3*gconst22);
IkReal x13277=(cj2*x13274);
IkReal x13278=((1.0)*x13269);
IkReal x13279=(cj3*x13268);
IkReal x13280=(gconst22*x13268);
IkReal x13281=((1.0)*sj3*x13268);
IkReal x13282=(x13269*x13276);
IkReal x13283=((1.0)*gconst23*x13268);
evalcond[0]=((((-1.0)*r20*x13283))+(((-1.0)*r22*x13278))+((r21*x13280)));
evalcond[1]=((((-1.0)*r02*x13278))+(((-1.0)*r00*x13283))+((r01*x13280)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13283))+((r11*x13280))+(((-1.0)*r12*x13278)));
evalcond[3]=(((r11*x13271))+((r12*x13279))+((r11*x13282))+((r10*x13272))+(((-1.0)*r10*x13275*x13278)));
evalcond[4]=(((r11*x13275))+((r10*x13276))+(((-1.0)*r11*x13272*x13278))+((r10*x13269*x13271))+(((-1.0)*r12*x13281)));
evalcond[5]=(((r21*x13271))+((r20*x13272))+((cj1*sj2))+(((-1.0)*r20*x13275*x13278))+((r21*x13282))+((r22*x13279))+x13273);
evalcond[6]=((((-1.0)*x13277))+((r01*x13271))+((r00*x13272))+((r02*x13279))+x13270+((r01*x13282))+(((-1.0)*r00*x13275*x13278)));
evalcond[7]=((((-1.0)*r22*x13281))+(((-1.0)*x13277))+((r21*x13275))+((r20*x13276))+(((-1.0)*r21*x13272*x13278))+x13270+((r20*x13269*x13271)));
evalcond[8]=((((-1.0)*r01*x13272*x13278))+((r00*x13269*x13271))+(((-1.0)*x13273))+((r01*x13275))+(((-1.0)*sj2*x13274))+((r00*x13276))+(((-1.0)*r02*x13281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13284=((1.0)*gconst23);
CheckValue<IkReal> x13285=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13284)))),-1);
if(!x13285.valid){
continue;
}
CheckValue<IkReal> x13286 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13284))+((gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13285.value)))+(x13286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13287=IKsin(j4);
IkReal x13288=IKcos(j4);
IkReal x13289=(sj1*sj2);
IkReal x13290=(gconst23*sj3);
IkReal x13291=(gconst22*sj3);
IkReal x13292=(cj2*sj1);
IkReal x13293=((1.0)*cj1);
IkReal x13294=(cj3*gconst23);
IkReal x13295=(cj3*gconst22);
IkReal x13296=(cj2*x13293);
IkReal x13297=((1.0)*x13288);
IkReal x13298=(cj3*x13287);
IkReal x13299=(gconst22*x13287);
IkReal x13300=((1.0)*sj3*x13287);
IkReal x13301=(x13288*x13295);
IkReal x13302=((1.0)*gconst23*x13287);
evalcond[0]=((((-1.0)*r20*x13302))+(((-1.0)*r22*x13297))+((r21*x13299)));
evalcond[1]=((((-1.0)*r02*x13297))+(((-1.0)*r00*x13302))+((r01*x13299)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13302))+((r11*x13299))+(((-1.0)*r12*x13297)));
evalcond[3]=(((r11*x13290))+((r12*x13298))+((r10*x13291))+(((-1.0)*r10*x13294*x13297))+((r11*x13301)));
evalcond[4]=((((-1.0)*r11*x13291*x13297))+((r11*x13294))+((r10*x13288*x13290))+((r10*x13295))+(((-1.0)*r12*x13300)));
evalcond[5]=(((r21*x13301))+((r20*x13291))+((cj1*sj2))+(((-1.0)*r20*x13294*x13297))+((r22*x13298))+x13292+((r21*x13290)));
evalcond[6]=(((r02*x13298))+((r01*x13301))+x13289+(((-1.0)*r00*x13294*x13297))+(((-1.0)*x13296))+((r00*x13291))+((r01*x13290)));
evalcond[7]=(((r20*x13295))+((r20*x13288*x13290))+(((-1.0)*r21*x13291*x13297))+x13289+(((-1.0)*r22*x13300))+(((-1.0)*x13296))+((r21*x13294)));
evalcond[8]=(((r00*x13288*x13290))+(((-1.0)*r01*x13291*x13297))+(((-1.0)*x13292))+(((-1.0)*r02*x13300))+(((-1.0)*sj2*x13293))+((r00*x13295))+((r01*x13294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13303=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13303.valid){
continue;
}
CheckValue<IkReal> x13304 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13303.value)))+(x13304.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13305=IKsin(j4);
IkReal x13306=IKcos(j4);
IkReal x13307=(sj1*sj2);
IkReal x13308=(gconst23*sj3);
IkReal x13309=(gconst22*sj3);
IkReal x13310=(cj2*sj1);
IkReal x13311=((1.0)*cj1);
IkReal x13312=(cj3*gconst23);
IkReal x13313=(cj3*gconst22);
IkReal x13314=(cj2*x13311);
IkReal x13315=((1.0)*x13306);
IkReal x13316=(cj3*x13305);
IkReal x13317=(gconst22*x13305);
IkReal x13318=((1.0)*sj3*x13305);
IkReal x13319=(x13306*x13313);
IkReal x13320=((1.0)*gconst23*x13305);
evalcond[0]=((((-1.0)*r20*x13320))+((r21*x13317))+(((-1.0)*r22*x13315)));
evalcond[1]=(((r01*x13317))+(((-1.0)*r00*x13320))+(((-1.0)*r02*x13315)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13320))+((r11*x13317))+(((-1.0)*r12*x13315)));
evalcond[3]=(((r11*x13319))+((r10*x13309))+(((-1.0)*r10*x13312*x13315))+((r11*x13308))+((r12*x13316)));
evalcond[4]=(((r11*x13312))+((r10*x13313))+(((-1.0)*r11*x13309*x13315))+((r10*x13306*x13308))+(((-1.0)*r12*x13318)));
evalcond[5]=((((-1.0)*r20*x13312*x13315))+((r21*x13308))+((r20*x13309))+((cj1*sj2))+((r22*x13316))+((r21*x13319))+x13310);
evalcond[6]=(((r01*x13319))+((r00*x13309))+(((-1.0)*r00*x13312*x13315))+((r01*x13308))+(((-1.0)*x13314))+x13307+((r02*x13316)));
evalcond[7]=(((r20*x13306*x13308))+(((-1.0)*r21*x13309*x13315))+((r20*x13313))+(((-1.0)*x13314))+((r21*x13312))+x13307+(((-1.0)*r22*x13318)));
evalcond[8]=((((-1.0)*r01*x13309*x13315))+(((-1.0)*sj2*x13311))+((r01*x13312))+((r00*x13313))+(((-1.0)*r02*x13318))+((r00*x13306*x13308))+(((-1.0)*x13310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13322 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13322)==0){
continue;
}
IkReal x13321=pow(x13322,-0.5);
CheckValue<IkReal> x13323 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13323.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13323.value));
IkReal gconst25=((-1.0)*r21*x13321);
IkReal gconst26=(r20*x13321);
CheckValue<IkReal> x13324 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13324.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13324.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13327 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13327.valid){
continue;
}
IkReal x13325=((-1.0)*(x13327.value));
IkReal x13326=x13321;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13325;
IkReal gconst24=x13325;
IkReal gconst25=((-1.0)*r21*x13326);
IkReal gconst26=(r20*x13326);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13330 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13330.valid){
continue;
}
IkReal x13328=((-1.0)*(x13330.value));
IkReal x13329=x13321;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13328;
IkReal gconst24=x13328;
IkReal gconst25=((-1.0)*r21*x13329);
IkReal gconst26=(r20*x13329);
CheckValue<IkReal> x13338=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13338.valid){
continue;
}
IkReal x13331=x13338.value;
IkReal x13332=(sj3*x13331);
IkReal x13333=(r11*x13332);
IkReal x13334=(r00*x13332);
IkReal x13335=(r01*x13332);
IkReal x13336=(r10*x13332);
IkReal x13337=(r20*r21*x13332);
j4eval[0]=IKsign((((r01*x13333*(r21*r21)))+((r02*r12*sj3))+((r10*x13334*(r20*r20)))+((r00*r20*r21*x13333))+((r10*r20*r21*x13335))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13339=gconst25*gconst25;
IkReal x13340=gconst26*gconst26;
IkReal x13341=(r00*r11);
IkReal x13342=(r01*r10);
IkReal x13343=(r02*sj3);
IkReal x13344=(gconst25*r10);
IkReal x13345=(gconst26*r11);
IkReal x13346=((1.0)*sj3);
IkReal x13347=((1.0)*cj3);
IkReal x13348=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13349 = IKatan2WithCheck(IkReal((((x13343*x13344))+((x13343*x13345)))),IkReal(((((-1.0)*x13340*x13341*x13346))+((sj3*x13339*x13342))+(((-1.0)*gconst26*r00*x13344*x13346))+((gconst25*r01*sj3*x13345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13349.valid){
continue;
}
CheckValue<IkReal> x13350=IKPowWithIntegerCheck(IKsign((((x13341*x13348))+(((-1.0)*r02*r12*x13347))+(((-1.0)*r00*r10*x13340*x13347))+((x13342*x13348))+(((-1.0)*r01*r11*x13339*x13347)))),-1);
if(!x13350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13349.value)+(((1.5707963267949)*(x13350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13351=IKsin(j4);
IkReal x13352=IKcos(j4);
IkReal x13353=(sj1*sj2);
IkReal x13354=(gconst26*sj3);
IkReal x13355=(gconst25*sj3);
IkReal x13356=(gconst26*r10);
IkReal x13357=(gconst25*r11);
IkReal x13358=(cj3*gconst25);
IkReal x13359=((1.0)*cj2);
IkReal x13360=(cj1*sj2);
IkReal x13361=(gconst26*r00);
IkReal x13362=(gconst26*r20);
IkReal x13363=(cj3*gconst26);
IkReal x13364=(cj1*x13359);
IkReal x13365=((1.0)*x13352);
IkReal x13366=((1.0)*x13351);
IkReal x13367=(cj3*x13351);
IkReal x13368=(gconst25*x13351);
evalcond[0]=((((-1.0)*r22*x13365))+(((-1.0)*x13362*x13366))+((r21*x13368)));
evalcond[1]=(((r01*x13368))+(((-1.0)*r02*x13365))+(((-1.0)*x13361*x13366)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13365))+(((-1.0)*x13356*x13366))+((x13351*x13357)));
evalcond[3]=(((r12*x13367))+((r10*x13355))+(((-1.0)*cj3*x13356*x13365))+((cj3*x13352*x13357))+((r11*x13354)));
evalcond[4]=(((r10*x13352*x13354))+((r11*x13363))+((r10*x13358))+(((-1.0)*r12*sj3*x13366))+(((-1.0)*r11*x13355*x13365)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x13362*x13365))+((r20*x13355))+((r21*x13354))+((r21*x13352*x13358))+((r22*x13367))+x13360);
evalcond[6]=((((-1.0)*cj3*x13361*x13365))+((r01*x13352*x13358))+((r01*x13354))+((r00*x13355))+(((-1.0)*x13364))+x13353+((r02*x13367)));
evalcond[7]=((((-1.0)*r21*x13355*x13365))+((r20*x13358))+(((-1.0)*r22*sj3*x13366))+(((-1.0)*x13364))+((r20*x13352*x13354))+((r21*x13363))+x13353);
evalcond[8]=((((-1.0)*x13360))+((r01*x13363))+(((-1.0)*r01*x13355*x13365))+((r00*x13352*x13354))+((r00*x13358))+(((-1.0)*r02*sj3*x13366))+(((-1.0)*sj1*x13359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13369=gconst26*gconst26;
IkReal x13370=gconst25*gconst25;
IkReal x13371=(r01*r10);
IkReal x13372=(cj3*r11);
IkReal x13373=(gconst25*gconst26);
IkReal x13374=(cj3*r10);
IkReal x13375=(r00*x13369);
IkReal x13376=((1.0)*sj3*x13373);
CheckValue<IkReal> x13377=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r10*sj3*x13375))+((r01*r11*sj3*x13370))+(((-1.0)*r00*r11*x13376))+(((-1.0)*x13371*x13376)))),-1);
if(!x13377.valid){
continue;
}
CheckValue<IkReal> x13378 = IKatan2WithCheck(IkReal((((gconst26*r02*x13372))+((gconst25*r02*x13374)))),IkReal(((((-1.0)*r00*x13373*x13374))+(((-1.0)*x13372*x13375))+((r01*x13372*x13373))+((cj3*x13370*x13371)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13377.value)))+(x13378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13379=IKsin(j4);
IkReal x13380=IKcos(j4);
IkReal x13381=(sj1*sj2);
IkReal x13382=(gconst26*sj3);
IkReal x13383=(gconst25*sj3);
IkReal x13384=(gconst26*r10);
IkReal x13385=(gconst25*r11);
IkReal x13386=(cj3*gconst25);
IkReal x13387=((1.0)*cj2);
IkReal x13388=(cj1*sj2);
IkReal x13389=(gconst26*r00);
IkReal x13390=(gconst26*r20);
IkReal x13391=(cj3*gconst26);
IkReal x13392=(cj1*x13387);
IkReal x13393=((1.0)*x13380);
IkReal x13394=((1.0)*x13379);
IkReal x13395=(cj3*x13379);
IkReal x13396=(gconst25*x13379);
evalcond[0]=(((r21*x13396))+(((-1.0)*r22*x13393))+(((-1.0)*x13390*x13394)));
evalcond[1]=((((-1.0)*x13389*x13394))+((r01*x13396))+(((-1.0)*r02*x13393)));
evalcond[2]=((1.0)+(((-1.0)*x13384*x13394))+(((-1.0)*r12*x13393))+((x13379*x13385)));
evalcond[3]=(((r11*x13382))+((r10*x13383))+((r12*x13395))+((cj3*x13380*x13385))+(((-1.0)*cj3*x13384*x13393)));
evalcond[4]=(((r11*x13391))+((r10*x13386))+((r10*x13380*x13382))+(((-1.0)*r11*x13383*x13393))+(((-1.0)*r12*sj3*x13394)));
evalcond[5]=(((cj2*sj1))+((r20*x13383))+((r22*x13395))+(((-1.0)*cj3*x13390*x13393))+((r21*x13380*x13386))+x13388+((r21*x13382)));
evalcond[6]=(((r01*x13382))+((r01*x13380*x13386))+((r00*x13383))+(((-1.0)*x13392))+(((-1.0)*cj3*x13389*x13393))+((r02*x13395))+x13381);
evalcond[7]=(((r21*x13391))+((r20*x13386))+(((-1.0)*r21*x13383*x13393))+((r20*x13380*x13382))+(((-1.0)*r22*sj3*x13394))+(((-1.0)*x13392))+x13381);
evalcond[8]=(((r00*x13380*x13382))+(((-1.0)*x13388))+(((-1.0)*r01*x13383*x13393))+((r01*x13391))+((r00*x13386))+(((-1.0)*sj1*x13387))+(((-1.0)*r02*sj3*x13394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13397=((1.0)*gconst26);
CheckValue<IkReal> x13398 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13397))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13398.valid){
continue;
}
CheckValue<IkReal> x13399=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13397))+(((-1.0)*gconst25*r00)))),-1);
if(!x13399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13398.value)+(((1.5707963267949)*(x13399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13400=IKsin(j4);
IkReal x13401=IKcos(j4);
IkReal x13402=(sj1*sj2);
IkReal x13403=(gconst26*sj3);
IkReal x13404=(gconst25*sj3);
IkReal x13405=(gconst26*r10);
IkReal x13406=(gconst25*r11);
IkReal x13407=(cj3*gconst25);
IkReal x13408=((1.0)*cj2);
IkReal x13409=(cj1*sj2);
IkReal x13410=(gconst26*r00);
IkReal x13411=(gconst26*r20);
IkReal x13412=(cj3*gconst26);
IkReal x13413=(cj1*x13408);
IkReal x13414=((1.0)*x13401);
IkReal x13415=((1.0)*x13400);
IkReal x13416=(cj3*x13400);
IkReal x13417=(gconst25*x13400);
evalcond[0]=((((-1.0)*r22*x13414))+(((-1.0)*x13411*x13415))+((r21*x13417)));
evalcond[1]=((((-1.0)*x13410*x13415))+(((-1.0)*r02*x13414))+((r01*x13417)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13414))+((x13400*x13406))+(((-1.0)*x13405*x13415)));
evalcond[3]=(((r11*x13403))+((r10*x13404))+((cj3*x13401*x13406))+(((-1.0)*cj3*x13405*x13414))+((r12*x13416)));
evalcond[4]=(((r10*x13401*x13403))+((r10*x13407))+(((-1.0)*r12*sj3*x13415))+((r11*x13412))+(((-1.0)*r11*x13404*x13414)));
evalcond[5]=(x13409+((r22*x13416))+((cj2*sj1))+(((-1.0)*cj3*x13411*x13414))+((r21*x13403))+((r21*x13401*x13407))+((r20*x13404)));
evalcond[6]=(x13402+(((-1.0)*cj3*x13410*x13414))+((r02*x13416))+((r01*x13403))+((r01*x13401*x13407))+((r00*x13404))+(((-1.0)*x13413)));
evalcond[7]=(x13402+(((-1.0)*r22*sj3*x13415))+(((-1.0)*r21*x13404*x13414))+((r20*x13407))+((r21*x13412))+((r20*x13401*x13403))+(((-1.0)*x13413)));
evalcond[8]=(((r00*x13407))+(((-1.0)*r01*x13404*x13414))+(((-1.0)*sj1*x13408))+((r01*x13412))+((r00*x13401*x13403))+(((-1.0)*x13409))+(((-1.0)*r02*sj3*x13415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13419 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13419)==0){
continue;
}
IkReal x13418=pow(x13419,-0.5);
CheckValue<IkReal> x13420 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13420.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13420.value))));
IkReal gconst28=((1.0)*r21*x13418);
IkReal gconst29=((-1.0)*r20*x13418);
CheckValue<IkReal> x13421 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13421.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13421.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13424 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13424.valid){
continue;
}
IkReal x13422=((1.0)*(x13424.value));
IkReal x13423=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13422)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13422)));
IkReal gconst28=((1.0)*r21*x13423);
IkReal gconst29=((-1.0)*r20*x13423);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13427 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13427.valid){
continue;
}
IkReal x13425=((1.0)*(x13427.value));
IkReal x13426=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13425)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13425)));
IkReal gconst28=((1.0)*r21*x13426);
IkReal gconst29=((-1.0)*r20*x13426);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13430 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13430.valid){
continue;
}
IkReal x13428=((1.0)*(x13430.value));
IkReal x13429=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13428)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13428)));
IkReal gconst28=((1.0)*r21*x13429);
IkReal gconst29=((-1.0)*r20*x13429);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13433 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13433.valid){
continue;
}
IkReal x13431=((1.0)*(x13433.value));
IkReal x13432=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13431)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13431)));
IkReal gconst28=((1.0)*r21*x13432);
IkReal gconst29=((-1.0)*r20*x13432);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13436 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13436.valid){
continue;
}
IkReal x13434=((1.0)*(x13436.value));
IkReal x13435=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13434)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13434)));
IkReal gconst28=((1.0)*r21*x13435);
IkReal gconst29=((-1.0)*r20*x13435);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13439 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13439.valid){
continue;
}
IkReal x13437=((1.0)*(x13439.value));
IkReal x13438=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13437)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13437)));
IkReal gconst28=((1.0)*r21*x13438);
IkReal gconst29=((-1.0)*r20*x13438);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13440=(gconst29*r10);
IkReal x13441=(gconst28*r11);
CheckValue<IkReal> x13442 = IKatan2WithCheck(IkReal((x13440+(((-1.0)*x13441)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13442.valid){
continue;
}
CheckValue<IkReal> x13443=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13440*x13441))+(x13440*x13440)+(x13441*x13441))),-1);
if(!x13443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13442.value)+(((1.5707963267949)*(x13443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13444=IKsin(j4);
IkReal x13445=IKcos(j4);
IkReal x13446=(gconst28*r11);
IkReal x13447=((1.0)*cj2);
IkReal x13448=((1.0)*x13445);
IkReal x13449=(gconst29*x13445);
IkReal x13450=(gconst28*x13444);
IkReal x13451=((1.0)*x13444);
IkReal x13452=(gconst29*x13451);
evalcond[0]=(((r21*x13450))+(((-1.0)*r20*x13452))+(((-1.0)*r22*x13448)));
evalcond[1]=((((-1.0)*r02*x13448))+(((-1.0)*r00*x13452))+((r01*x13450)));
evalcond[2]=(((r10*x13449))+(((-1.0)*x13446*x13448))+(((-1.0)*r12*x13451)));
evalcond[3]=((1.0)+((x13444*x13446))+(((-1.0)*r10*x13452))+(((-1.0)*r12*x13448)));
evalcond[4]=((((-1.0)*r22*x13451))+(((-1.0)*gconst28*r21*x13448))+((sj1*sj2))+((r20*x13449))+(((-1.0)*cj1*x13447)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x13448))+((r00*x13449))+(((-1.0)*r02*x13451))+(((-1.0)*sj1*x13447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13453=((1.0)*gconst29);
CheckValue<IkReal> x13454 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13453))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13454.valid){
continue;
}
CheckValue<IkReal> x13455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13453))+(((-1.0)*gconst28*r00)))),-1);
if(!x13455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13454.value)+(((1.5707963267949)*(x13455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13456=IKsin(j4);
IkReal x13457=IKcos(j4);
IkReal x13458=(gconst28*r11);
IkReal x13459=((1.0)*cj2);
IkReal x13460=((1.0)*x13457);
IkReal x13461=(gconst29*x13457);
IkReal x13462=(gconst28*x13456);
IkReal x13463=((1.0)*x13456);
IkReal x13464=(gconst29*x13463);
evalcond[0]=((((-1.0)*r22*x13460))+((r21*x13462))+(((-1.0)*r20*x13464)));
evalcond[1]=((((-1.0)*r00*x13464))+(((-1.0)*r02*x13460))+((r01*x13462)));
evalcond[2]=(((r10*x13461))+(((-1.0)*x13458*x13460))+(((-1.0)*r12*x13463)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13464))+((x13456*x13458))+(((-1.0)*r12*x13460)));
evalcond[4]=(((r20*x13461))+(((-1.0)*r22*x13463))+(((-1.0)*cj1*x13459))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13460)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13459))+(((-1.0)*gconst28*r01*x13460))+(((-1.0)*r02*x13463))+((r00*x13461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13465=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13465.valid){
continue;
}
CheckValue<IkReal> x13466 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13465.value)))+(x13466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13467=IKsin(j4);
IkReal x13468=IKcos(j4);
IkReal x13469=(gconst28*r11);
IkReal x13470=((1.0)*cj2);
IkReal x13471=((1.0)*x13468);
IkReal x13472=(gconst29*x13468);
IkReal x13473=(gconst28*x13467);
IkReal x13474=((1.0)*x13467);
IkReal x13475=(gconst29*x13474);
evalcond[0]=(((r21*x13473))+(((-1.0)*r20*x13475))+(((-1.0)*r22*x13471)));
evalcond[1]=(((r01*x13473))+(((-1.0)*r02*x13471))+(((-1.0)*r00*x13475)));
evalcond[2]=(((r10*x13472))+(((-1.0)*x13469*x13471))+(((-1.0)*r12*x13474)));
evalcond[3]=((1.0)+((x13467*x13469))+(((-1.0)*r10*x13475))+(((-1.0)*r12*x13471)));
evalcond[4]=((((-1.0)*cj1*x13470))+(((-1.0)*gconst28*r21*x13471))+((sj1*sj2))+((r20*x13472))+(((-1.0)*r22*x13474)));
evalcond[5]=(((r00*x13472))+(((-1.0)*r02*x13474))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13470))+(((-1.0)*gconst28*r01*x13471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13478 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13478.valid){
continue;
}
IkReal x13476=((1.0)*(x13478.value));
IkReal x13477=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13476)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13476)));
IkReal gconst28=((1.0)*r21*x13477);
IkReal gconst29=((-1.0)*r20*x13477);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13481 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13481.valid){
continue;
}
IkReal x13479=((1.0)*(x13481.value));
IkReal x13480=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13479)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13479)));
IkReal gconst28=((1.0)*r21*x13480);
IkReal gconst29=((-1.0)*r20*x13480);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13484 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13484.valid){
continue;
}
IkReal x13482=((1.0)*(x13484.value));
IkReal x13483=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13482)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13482)));
IkReal gconst28=((1.0)*r21*x13483);
IkReal gconst29=((-1.0)*r20*x13483);
IkReal x13485=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13489=IKPowWithIntegerCheck(x13485,-1);
if(!x13489.valid){
continue;
}
IkReal x13486=x13489.value;
IkReal x13487=((1.0)*x13486);
IkReal x13488=((((-1.0)*x13487*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13486))+(((-1.0)*(r12*r12)))+(((-1.0)*x13487*(r11*r11)*(r21*r21))));
j4eval[0]=x13488;
j4eval[1]=r12;
j4eval[2]=x13485;
j4eval[3]=IKsign(x13488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13490=(gconst28*r11);
IkReal x13491=(gconst29*r10);
CheckValue<IkReal> x13492=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13490*x13490)))+(((-1.0)*(r12*r12)))+(((2.0)*x13490*x13491))+(((-1.0)*(x13491*x13491))))),-1);
if(!x13492.valid){
continue;
}
CheckValue<IkReal> x13493 = IKatan2WithCheck(IkReal((x13490+(((-1.0)*x13491)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13492.value)))+(x13493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13494=IKcos(j4);
IkReal x13495=IKsin(j4);
IkReal x13496=(gconst29*r10);
IkReal x13497=(gconst29*r20);
IkReal x13498=(gconst28*r21);
IkReal x13499=((1.0)*cj2);
IkReal x13500=(gconst29*r00);
IkReal x13501=((1.0)*x13494);
IkReal x13502=((1.0)*x13495);
IkReal x13503=(gconst28*x13494);
IkReal x13504=(gconst28*x13495);
evalcond[0]=((((-1.0)*x13496*x13501))+((r11*x13503))+((r12*x13495)));
evalcond[1]=((((-1.0)*x13497*x13502))+((x13495*x13498))+(((-1.0)*r22*x13501)));
evalcond[2]=((((-1.0)*x13500*x13502))+(((-1.0)*r02*x13501))+((r01*x13504)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13501))+(((-1.0)*x13496*x13502))+((r11*x13504)));
evalcond[4]=(((r22*x13495))+((sj1*sj2))+(((-1.0)*x13497*x13501))+((x13494*x13498))+(((-1.0)*cj1*x13499)));
evalcond[5]=(((r02*x13495))+(((-1.0)*cj1*sj2))+(((-1.0)*x13500*x13501))+((r01*x13503))+(((-1.0)*sj1*x13499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13505=((1.0)*gconst29);
CheckValue<IkReal> x13506=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13505)))),-1);
if(!x13506.valid){
continue;
}
CheckValue<IkReal> x13507 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13505))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13506.value)))+(x13507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13508=IKcos(j4);
IkReal x13509=IKsin(j4);
IkReal x13510=(gconst29*r10);
IkReal x13511=(gconst29*r20);
IkReal x13512=(gconst28*r21);
IkReal x13513=((1.0)*cj2);
IkReal x13514=(gconst29*r00);
IkReal x13515=((1.0)*x13508);
IkReal x13516=((1.0)*x13509);
IkReal x13517=(gconst28*x13508);
IkReal x13518=(gconst28*x13509);
evalcond[0]=(((r11*x13517))+((r12*x13509))+(((-1.0)*x13510*x13515)));
evalcond[1]=(((x13509*x13512))+(((-1.0)*r22*x13515))+(((-1.0)*x13511*x13516)));
evalcond[2]=((((-1.0)*x13514*x13516))+((r01*x13518))+(((-1.0)*r02*x13515)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13515))+((r11*x13518))+(((-1.0)*x13510*x13516)));
evalcond[4]=(((x13508*x13512))+(((-1.0)*cj1*x13513))+((sj1*sj2))+((r22*x13509))+(((-1.0)*x13511*x13515)));
evalcond[5]=(((r02*x13509))+(((-1.0)*sj1*x13513))+(((-1.0)*cj1*sj2))+(((-1.0)*x13514*x13515))+((r01*x13517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13519=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13519.valid){
continue;
}
CheckValue<IkReal> x13520 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13519.value)))+(x13520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13521=IKcos(j4);
IkReal x13522=IKsin(j4);
IkReal x13523=(gconst29*r10);
IkReal x13524=(gconst29*r20);
IkReal x13525=(gconst28*r21);
IkReal x13526=((1.0)*cj2);
IkReal x13527=(gconst29*r00);
IkReal x13528=((1.0)*x13521);
IkReal x13529=((1.0)*x13522);
IkReal x13530=(gconst28*x13521);
IkReal x13531=(gconst28*x13522);
evalcond[0]=((((-1.0)*x13523*x13528))+((r12*x13522))+((r11*x13530)));
evalcond[1]=(((x13522*x13525))+(((-1.0)*r22*x13528))+(((-1.0)*x13524*x13529)));
evalcond[2]=((((-1.0)*x13527*x13529))+((r01*x13531))+(((-1.0)*r02*x13528)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13528))+(((-1.0)*x13523*x13529))+((r11*x13531)));
evalcond[4]=(((x13521*x13525))+((sj1*sj2))+(((-1.0)*cj1*x13526))+((r22*x13522))+(((-1.0)*x13524*x13528)));
evalcond[5]=((((-1.0)*sj1*x13526))+((r02*x13522))+(((-1.0)*cj1*sj2))+(((-1.0)*x13527*x13528))+((r01*x13530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13534 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13534.valid){
continue;
}
IkReal x13532=((1.0)*(x13534.value));
IkReal x13533=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13532)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13532)));
IkReal gconst28=((1.0)*r21*x13533);
IkReal gconst29=((-1.0)*r20*x13533);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13537 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13537.valid){
continue;
}
IkReal x13535=((1.0)*(x13537.value));
IkReal x13536=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13535)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13535)));
IkReal gconst28=((1.0)*r21*x13536);
IkReal gconst29=((-1.0)*r20*x13536);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13540 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13540.valid){
continue;
}
IkReal x13538=((1.0)*(x13540.value));
IkReal x13539=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13538)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13538)));
IkReal gconst28=((1.0)*r21*x13539);
IkReal gconst29=((-1.0)*r20*x13539);
IkReal x13541=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13545=IKPowWithIntegerCheck(x13541,-1);
if(!x13545.valid){
continue;
}
IkReal x13542=x13545.value;
IkReal x13543=((1.0)*x13542);
IkReal x13544=((((-1.0)*x13543*(r10*r10)*(r20*r20)))+(((-1.0)*x13543*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13542)));
j4eval[0]=x13544;
j4eval[1]=r12;
j4eval[2]=x13541;
j4eval[3]=IKsign(x13544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13546=(gconst28*r11);
IkReal x13547=(gconst29*r10);
CheckValue<IkReal> x13548=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13546*x13546)))+(((2.0)*x13546*x13547))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13547*x13547))))),-1);
if(!x13548.valid){
continue;
}
CheckValue<IkReal> x13549 = IKatan2WithCheck(IkReal((x13546+(((-1.0)*x13547)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13548.value)))+(x13549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13550=IKcos(j4);
IkReal x13551=IKsin(j4);
IkReal x13552=(gconst29*r10);
IkReal x13553=(gconst29*r20);
IkReal x13554=(gconst28*r21);
IkReal x13555=(gconst29*r00);
IkReal x13556=((1.0)*x13550);
IkReal x13557=((1.0)*x13551);
IkReal x13558=(gconst28*x13550);
IkReal x13559=(gconst28*x13551);
evalcond[0]=(((r12*x13551))+((r11*x13558))+(((-1.0)*x13552*x13556)));
evalcond[1]=(((x13551*x13554))+(((-1.0)*x13553*x13557))+(((-1.0)*r22*x13556)));
evalcond[2]=(((r01*x13559))+(((-1.0)*x13555*x13557))+(((-1.0)*r02*x13556)));
evalcond[3]=((1.0)+((r11*x13559))+(((-1.0)*x13552*x13557))+(((-1.0)*r12*x13556)));
evalcond[4]=(((cj2*sj1))+((r22*x13551))+(((-1.0)*x13553*x13556))+((cj1*sj2))+((x13550*x13554)));
evalcond[5]=(((r01*x13558))+(((-1.0)*x13555*x13556))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13560=((1.0)*gconst29);
CheckValue<IkReal> x13561=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13560)))),-1);
if(!x13561.valid){
continue;
}
CheckValue<IkReal> x13562 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13561.value)))+(x13562.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13563=IKcos(j4);
IkReal x13564=IKsin(j4);
IkReal x13565=(gconst29*r10);
IkReal x13566=(gconst29*r20);
IkReal x13567=(gconst28*r21);
IkReal x13568=(gconst29*r00);
IkReal x13569=((1.0)*x13563);
IkReal x13570=((1.0)*x13564);
IkReal x13571=(gconst28*x13563);
IkReal x13572=(gconst28*x13564);
evalcond[0]=(((r11*x13571))+((r12*x13564))+(((-1.0)*x13565*x13569)));
evalcond[1]=((((-1.0)*x13566*x13570))+((x13564*x13567))+(((-1.0)*r22*x13569)));
evalcond[2]=((((-1.0)*x13568*x13570))+(((-1.0)*r02*x13569))+((r01*x13572)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13569))+((r11*x13572))+(((-1.0)*x13565*x13570)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13566*x13569))+((cj1*sj2))+((x13563*x13567))+((r22*x13564)));
evalcond[5]=((((-1.0)*x13568*x13569))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13564))+((r01*x13571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13573=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13573.valid){
continue;
}
CheckValue<IkReal> x13574 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13573.value)))+(x13574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13575=IKcos(j4);
IkReal x13576=IKsin(j4);
IkReal x13577=(gconst29*r10);
IkReal x13578=(gconst29*r20);
IkReal x13579=(gconst28*r21);
IkReal x13580=(gconst29*r00);
IkReal x13581=((1.0)*x13575);
IkReal x13582=((1.0)*x13576);
IkReal x13583=(gconst28*x13575);
IkReal x13584=(gconst28*x13576);
evalcond[0]=(((r12*x13576))+(((-1.0)*x13577*x13581))+((r11*x13583)));
evalcond[1]=((((-1.0)*x13578*x13582))+(((-1.0)*r22*x13581))+((x13576*x13579)));
evalcond[2]=((((-1.0)*r02*x13581))+((r01*x13584))+(((-1.0)*x13580*x13582)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13581))+(((-1.0)*x13577*x13582))+((r11*x13584)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13578*x13581))+((cj1*sj2))+((x13575*x13579))+((r22*x13576)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13583))+((r02*x13576))+(((-1.0)*x13580*x13581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13587 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13587.valid){
continue;
}
IkReal x13585=((1.0)*(x13587.value));
IkReal x13586=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13585)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13585)));
IkReal gconst28=((1.0)*r21*x13586);
IkReal gconst29=((-1.0)*r20*x13586);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13590 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13590.valid){
continue;
}
IkReal x13588=((1.0)*(x13590.value));
IkReal x13589=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13588)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13588)));
IkReal gconst28=((1.0)*r21*x13589);
IkReal gconst29=((-1.0)*r20*x13589);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13593 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13593.valid){
continue;
}
IkReal x13591=((1.0)*(x13593.value));
IkReal x13592=x13418;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13591)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13591)));
IkReal gconst28=((1.0)*r21*x13592);
IkReal gconst29=((-1.0)*r20*x13592);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13594=(gconst29*r10);
IkReal x13595=(gconst28*r11);
CheckValue<IkReal> x13596 = IKatan2WithCheck(IkReal((x13594+(((-1.0)*x13595)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13596.valid){
continue;
}
CheckValue<IkReal> x13597=IKPowWithIntegerCheck(IKsign(((x13595*x13595)+(r12*r12)+(x13594*x13594)+(((-2.0)*x13594*x13595)))),-1);
if(!x13597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13596.value)+(((1.5707963267949)*(x13597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13598=IKsin(j4);
IkReal x13599=IKcos(j4);
IkReal x13600=(gconst28*r11);
IkReal x13601=((1.0)*x13599);
IkReal x13602=(gconst29*x13599);
IkReal x13603=(gconst28*x13598);
IkReal x13604=((1.0)*x13598);
IkReal x13605=(gconst29*x13604);
evalcond[0]=((((-1.0)*r22*x13601))+((r21*x13603))+(((-1.0)*r20*x13605)));
evalcond[1]=((((-1.0)*r02*x13601))+(((-1.0)*r00*x13605))+((r01*x13603)));
evalcond[2]=(((r10*x13602))+(((-1.0)*r12*x13604))+(((-1.0)*x13600*x13601)));
evalcond[3]=((1.0)+((x13598*x13600))+(((-1.0)*r12*x13601))+(((-1.0)*r10*x13605)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13601))+(((-1.0)*r22*x13604))+((r20*x13602)));
evalcond[5]=((((-1.0)*r02*x13604))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13601))+((r00*x13602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13606=((1.0)*gconst29);
CheckValue<IkReal> x13607 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13607.valid){
continue;
}
CheckValue<IkReal> x13608=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13606))+(((-1.0)*gconst28*r00)))),-1);
if(!x13608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13607.value)+(((1.5707963267949)*(x13608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13609=IKsin(j4);
IkReal x13610=IKcos(j4);
IkReal x13611=(gconst28*r11);
IkReal x13612=((1.0)*x13610);
IkReal x13613=(gconst29*x13610);
IkReal x13614=(gconst28*x13609);
IkReal x13615=((1.0)*x13609);
IkReal x13616=(gconst29*x13615);
evalcond[0]=(((r21*x13614))+(((-1.0)*r20*x13616))+(((-1.0)*r22*x13612)));
evalcond[1]=((((-1.0)*r02*x13612))+((r01*x13614))+(((-1.0)*r00*x13616)));
evalcond[2]=(((r10*x13613))+(((-1.0)*x13611*x13612))+(((-1.0)*r12*x13615)));
evalcond[3]=((1.0)+((x13609*x13611))+(((-1.0)*r10*x13616))+(((-1.0)*r12*x13612)));
evalcond[4]=((((-1.0)*gconst28*r21*x13612))+((cj2*sj1))+((cj1*sj2))+((r20*x13613))+(((-1.0)*r22*x13615)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x13615))+((r00*x13613))+(((-1.0)*gconst28*r01*x13612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13617=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13617.valid){
continue;
}
CheckValue<IkReal> x13618 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13617.value)))+(x13618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13619=IKsin(j4);
IkReal x13620=IKcos(j4);
IkReal x13621=(gconst28*r11);
IkReal x13622=((1.0)*x13620);
IkReal x13623=(gconst29*x13620);
IkReal x13624=(gconst28*x13619);
IkReal x13625=((1.0)*x13619);
IkReal x13626=(gconst29*x13625);
evalcond[0]=(((r21*x13624))+(((-1.0)*r22*x13622))+(((-1.0)*r20*x13626)));
evalcond[1]=((((-1.0)*r00*x13626))+((r01*x13624))+(((-1.0)*r02*x13622)));
evalcond[2]=(((r10*x13623))+(((-1.0)*x13621*x13622))+(((-1.0)*r12*x13625)));
evalcond[3]=((1.0)+((x13619*x13621))+(((-1.0)*r10*x13626))+(((-1.0)*r12*x13622)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13622))+(((-1.0)*r22*x13625))+((r20*x13623)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13622))+((r00*x13623))+(((-1.0)*r02*x13625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13627=gconst28*gconst28;
IkReal x13628=gconst29*gconst29;
IkReal x13629=(r11*r21);
IkReal x13630=(gconst29*sj3);
IkReal x13631=((1.0)*cj3);
IkReal x13632=(r10*r20);
IkReal x13633=(r10*r21);
IkReal x13634=(r11*r20);
IkReal x13635=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13636 = IKatan2WithCheck(IkReal((((r11*r22*x13630))+((gconst28*r10*r22*sj3)))),IkReal(((((-1.0)*sj3*x13628*x13634))+((gconst28*x13629*x13630))+(((-1.0)*gconst28*x13630*x13632))+((sj3*x13627*x13633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13636.valid){
continue;
}
CheckValue<IkReal> x13637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13631))+((x13634*x13635))+(((-1.0)*x13627*x13629*x13631))+(((-1.0)*x13628*x13631*x13632))+((x13633*x13635)))),-1);
if(!x13637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13636.value)+(((1.5707963267949)*(x13637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13638=IKsin(j4);
IkReal x13639=IKcos(j4);
IkReal x13640=(sj1*sj2);
IkReal x13641=(gconst29*r20);
IkReal x13642=(gconst28*r20);
IkReal x13643=((1.0)*cj2);
IkReal x13644=(r11*sj3);
IkReal x13645=(cj1*sj2);
IkReal x13646=(gconst29*r01);
IkReal x13647=(gconst29*r10);
IkReal x13648=(cj3*gconst28);
IkReal x13649=(cj3*gconst29);
IkReal x13650=(gconst28*sj3);
IkReal x13651=(gconst29*r00);
IkReal x13652=(cj1*x13643);
IkReal x13653=((1.0)*x13639);
IkReal x13654=((1.0)*x13638);
IkReal x13655=(gconst28*x13638);
IkReal x13656=(cj3*x13638);
IkReal x13657=(sj3*x13639);
evalcond[0]=((((-1.0)*r22*x13653))+((r21*x13655))+(((-1.0)*x13641*x13654)));
evalcond[1]=(((r01*x13655))+(((-1.0)*r02*x13653))+(((-1.0)*x13651*x13654)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13653))+((r11*x13655))+(((-1.0)*x13647*x13654)));
evalcond[3]=(((r12*x13656))+(((-1.0)*cj3*x13647*x13653))+((r10*x13650))+((gconst29*x13644))+((r11*x13639*x13648)));
evalcond[4]=(((r11*x13649))+(((-1.0)*r12*sj3*x13654))+(((-1.0)*gconst28*x13644*x13653))+((r10*x13648))+((x13647*x13657)));
evalcond[5]=(((cj2*sj1))+((r21*x13639*x13648))+x13645+((gconst29*r21*sj3))+((sj3*x13642))+((r22*x13656))+(((-1.0)*cj3*x13641*x13653)));
evalcond[6]=(x13640+((r00*x13650))+((sj3*x13646))+((r02*x13656))+((r01*x13639*x13648))+(((-1.0)*x13652))+(((-1.0)*r00*x13649*x13653)));
evalcond[7]=(x13640+((x13641*x13657))+(((-1.0)*r22*sj3*x13654))+(((-1.0)*r21*x13650*x13653))+((r21*x13649))+(((-1.0)*x13652))+((cj3*x13642)));
evalcond[8]=(((x13651*x13657))+(((-1.0)*sj1*x13643))+(((-1.0)*r02*sj3*x13654))+((r00*x13648))+(((-1.0)*x13645))+((cj3*x13646))+(((-1.0)*r01*x13650*x13653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13658=((1.0)*gconst29);
CheckValue<IkReal> x13659=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13658))+(((-1.0)*gconst28*r00)))),-1);
if(!x13659.valid){
continue;
}
CheckValue<IkReal> x13660 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13658))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13659.value)))+(x13660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13661=IKsin(j4);
IkReal x13662=IKcos(j4);
IkReal x13663=(sj1*sj2);
IkReal x13664=(gconst29*r20);
IkReal x13665=(gconst28*r20);
IkReal x13666=((1.0)*cj2);
IkReal x13667=(r11*sj3);
IkReal x13668=(cj1*sj2);
IkReal x13669=(gconst29*r01);
IkReal x13670=(gconst29*r10);
IkReal x13671=(cj3*gconst28);
IkReal x13672=(cj3*gconst29);
IkReal x13673=(gconst28*sj3);
IkReal x13674=(gconst29*r00);
IkReal x13675=(cj1*x13666);
IkReal x13676=((1.0)*x13662);
IkReal x13677=((1.0)*x13661);
IkReal x13678=(gconst28*x13661);
IkReal x13679=(cj3*x13661);
IkReal x13680=(sj3*x13662);
evalcond[0]=(((r21*x13678))+(((-1.0)*x13664*x13677))+(((-1.0)*r22*x13676)));
evalcond[1]=((((-1.0)*x13674*x13677))+((r01*x13678))+(((-1.0)*r02*x13676)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13676))+((r11*x13678))+(((-1.0)*x13670*x13677)));
evalcond[3]=(((r11*x13662*x13671))+(((-1.0)*cj3*x13670*x13676))+((r12*x13679))+((gconst29*x13667))+((r10*x13673)));
evalcond[4]=(((x13670*x13680))+((r11*x13672))+(((-1.0)*gconst28*x13667*x13676))+((r10*x13671))+(((-1.0)*r12*sj3*x13677)));
evalcond[5]=(((cj2*sj1))+x13668+((gconst29*r21*sj3))+(((-1.0)*cj3*x13664*x13676))+((r21*x13662*x13671))+((r22*x13679))+((sj3*x13665)));
evalcond[6]=(((r01*x13662*x13671))+x13663+((r02*x13679))+(((-1.0)*x13675))+((r00*x13673))+((sj3*x13669))+(((-1.0)*r00*x13672*x13676)));
evalcond[7]=(((x13664*x13680))+((cj3*x13665))+x13663+(((-1.0)*x13675))+((r21*x13672))+(((-1.0)*r21*x13673*x13676))+(((-1.0)*r22*sj3*x13677)));
evalcond[8]=(((cj3*x13669))+(((-1.0)*r01*x13673*x13676))+(((-1.0)*sj1*x13666))+((r00*x13671))+(((-1.0)*r02*sj3*x13677))+(((-1.0)*x13668))+((x13674*x13680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13681=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13681.valid){
continue;
}
CheckValue<IkReal> x13682 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13681.value)))+(x13682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13683=IKsin(j4);
IkReal x13684=IKcos(j4);
IkReal x13685=(sj1*sj2);
IkReal x13686=(gconst29*r20);
IkReal x13687=(gconst28*r20);
IkReal x13688=((1.0)*cj2);
IkReal x13689=(r11*sj3);
IkReal x13690=(cj1*sj2);
IkReal x13691=(gconst29*r01);
IkReal x13692=(gconst29*r10);
IkReal x13693=(cj3*gconst28);
IkReal x13694=(cj3*gconst29);
IkReal x13695=(gconst28*sj3);
IkReal x13696=(gconst29*r00);
IkReal x13697=(cj1*x13688);
IkReal x13698=((1.0)*x13684);
IkReal x13699=((1.0)*x13683);
IkReal x13700=(gconst28*x13683);
IkReal x13701=(cj3*x13683);
IkReal x13702=(sj3*x13684);
evalcond[0]=(((r21*x13700))+(((-1.0)*r22*x13698))+(((-1.0)*x13686*x13699)));
evalcond[1]=((((-1.0)*r02*x13698))+((r01*x13700))+(((-1.0)*x13696*x13699)));
evalcond[2]=((1.0)+(((-1.0)*x13692*x13699))+((r11*x13700))+(((-1.0)*r12*x13698)));
evalcond[3]=(((r12*x13701))+((gconst29*x13689))+(((-1.0)*cj3*x13692*x13698))+((r10*x13695))+((r11*x13684*x13693)));
evalcond[4]=(((r10*x13693))+((x13692*x13702))+(((-1.0)*r12*sj3*x13699))+(((-1.0)*gconst28*x13689*x13698))+((r11*x13694)));
evalcond[5]=(((cj2*sj1))+x13690+((gconst29*r21*sj3))+(((-1.0)*cj3*x13686*x13698))+((r21*x13684*x13693))+((r22*x13701))+((sj3*x13687)));
evalcond[6]=(((r00*x13695))+((sj3*x13691))+x13685+(((-1.0)*x13697))+(((-1.0)*r00*x13694*x13698))+((r02*x13701))+((r01*x13684*x13693)));
evalcond[7]=(((x13686*x13702))+(((-1.0)*r22*sj3*x13699))+x13685+(((-1.0)*x13697))+((cj3*x13687))+((r21*x13694))+(((-1.0)*r21*x13695*x13698)));
evalcond[8]=(((x13696*x13702))+((r00*x13693))+(((-1.0)*sj1*x13688))+(((-1.0)*r01*x13695*x13698))+((cj3*x13691))+(((-1.0)*r02*sj3*x13699))+(((-1.0)*x13690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13703=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13703);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13703);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13704=(r11*sj5);
IkReal x13705=((1.0)*cj5*r10);
j4eval[0]=(x13704+(((-1.0)*x13705)));
j4eval[1]=((((-1.0)*cj3*x13705))+((cj3*x13704)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13706=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13706);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13706);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13707=(cj5*r10);
IkReal x13708=(r11*sj5);
j4eval[0]=(x13708+(((-1.0)*x13707)));
j4eval[1]=(((sj3*x13707))+(((-1.0)*sj3*x13708)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13709=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13709);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13709);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13710=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13710);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13710);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13711=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13711)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13711)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13712=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13712);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13712);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13713=((1.0)*sj1);
CheckValue<IkReal> x13714=IKPowWithIntegerCheck(r22,-1);
if(!x13714.valid){
continue;
}
CheckValue<IkReal> x13715=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13715.valid){
continue;
}
if( IKabs(((x13714.value)*(((((-1.0)*cj2*x13713))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13715.value)*(((((-1.0)*sj2*x13713))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13714.value)*(((((-1.0)*cj2*x13713))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13715.value)*(((((-1.0)*sj2*x13713))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13714.value)*(((((-1.0)*cj2*x13713))+(((-1.0)*cj1*sj2))))), ((x13715.value)*(((((-1.0)*sj2*x13713))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13716=IKsin(j4);
IkReal x13717=IKcos(j4);
IkReal x13718=((1.0)*cj5);
IkReal x13719=(sj5*x13717);
IkReal x13720=(sj5*x13716);
evalcond[0]=((-1.0)*r22*x13717);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13716)));
evalcond[2]=(((r01*x13720))+(((-1.0)*r00*x13716*x13718)));
evalcond[3]=((((-1.0)*r10*x13717*x13718))+((r11*x13719)));
evalcond[4]=((1.0)+((r11*x13720))+(((-1.0)*r10*x13716*x13718)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13719))+(((-1.0)*r00*x13717*x13718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13721=((1.0)*cj5);
CheckValue<IkReal> x13722=IKPowWithIntegerCheck(((((-1.0)*r10*x13721))+((r11*sj5))),-1);
if(!x13722.valid){
continue;
}
CheckValue<IkReal> x13723=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13721))),-1);
if(!x13723.valid){
continue;
}
if( IKabs(((-1.0)*(x13722.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13723.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13722.value)))+IKsqr(((x13723.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13722.value)), ((x13723.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13724=IKsin(j4);
IkReal x13725=IKcos(j4);
IkReal x13726=((1.0)*cj5);
IkReal x13727=(sj5*x13725);
IkReal x13728=(sj5*x13724);
evalcond[0]=((-1.0)*r22*x13725);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13724)));
evalcond[2]=(((r01*x13728))+(((-1.0)*r00*x13724*x13726)));
evalcond[3]=((((-1.0)*r10*x13725*x13726))+((r11*x13727)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13724*x13726))+((r11*x13728)));
evalcond[5]=(((r01*x13727))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13725*x13726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13729=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13729);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13729);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13730=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13730);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13730);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13731=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13731.valid){
continue;
}
CheckValue<IkReal> x13732=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13732.valid){
continue;
}
if( IKabs(((-1.0)*(x13731.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13732.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13731.value)))+IKsqr(((x13732.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13731.value)), ((x13732.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13733=IKsin(j4);
IkReal x13734=IKcos(j4);
IkReal x13735=(cj5*x13734);
IkReal x13736=(sj5*x13733);
IkReal x13737=((1.0)*cj5*x13733);
IkReal x13738=((1.0)*sj5*x13734);
evalcond[0]=((-1.0)*r22*x13734);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13733)));
evalcond[2]=((((-1.0)*r00*x13737))+((r01*x13736)));
evalcond[3]=(((r10*x13735))+(((-1.0)*r11*x13738)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13737))+((r11*x13736)));
evalcond[5]=(((r00*x13735))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13739=IKPowWithIntegerCheck(r22,-1);
if(!x13739.valid){
continue;
}
CheckValue<IkReal> x13740=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13740.valid){
continue;
}
if( IKabs(((x13739.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13740.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13739.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13740.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13739.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13740.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13741=IKsin(j4);
IkReal x13742=IKcos(j4);
IkReal x13743=(cj5*x13742);
IkReal x13744=(sj5*x13741);
IkReal x13745=((1.0)*cj5*x13741);
IkReal x13746=((1.0)*sj5*x13742);
evalcond[0]=((-1.0)*r22*x13742);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13741)));
evalcond[2]=(((r01*x13744))+(((-1.0)*r00*x13745)));
evalcond[3]=((((-1.0)*r11*x13746))+((r10*x13743)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13745))+((r11*x13744)));
evalcond[5]=((((-1.0)*r01*x13746))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13747=((1.0)*r10);
CheckValue<IkReal> x13748=IKPowWithIntegerCheck(cj3,-1);
if(!x13748.valid){
continue;
}
CheckValue<IkReal> x13749=IKPowWithIntegerCheck(r22,-1);
if(!x13749.valid){
continue;
}
CheckValue<IkReal> x13750=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13747))+((cj3*r11*sj5))),-1);
if(!x13750.valid){
continue;
}
if( IKabs(((x13748.value)*(x13749.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13750.value)*(((((-1.0)*sj3*sj5*x13747))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13748.value)*(x13749.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13750.value)*(((((-1.0)*sj3*sj5*x13747))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13748.value)*(x13749.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13750.value)*(((((-1.0)*sj3*sj5*x13747))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13751=IKsin(j4);
IkReal x13752=IKcos(j4);
IkReal x13753=(sj1*sj2);
IkReal x13754=(r11*sj5);
IkReal x13755=(r00*sj3);
IkReal x13756=(cj5*r01);
IkReal x13757=((1.0)*cj1);
IkReal x13758=(cj3*sj5);
IkReal x13759=(cj5*r11);
IkReal x13760=(r10*sj3);
IkReal x13761=(cj2*sj1);
IkReal x13762=((1.0)*cj5);
IkReal x13763=((1.0)*sj3);
IkReal x13764=(r01*sj5);
IkReal x13765=(cj2*x13757);
IkReal x13766=(cj3*x13752);
IkReal x13767=(r22*x13751);
IkReal x13768=(cj5*x13752);
IkReal x13769=(x13751*x13762);
evalcond[0]=((-1.0)*r22*x13752);
evalcond[1]=(x13761+((cj1*sj2))+((cj3*x13767)));
evalcond[2]=((((-1.0)*r00*x13769))+((x13751*x13764)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13769))+((x13751*x13754)));
evalcond[4]=(x13753+(((-1.0)*x13763*x13767))+(((-1.0)*x13765)));
evalcond[5]=(((sj5*x13760))+((sj3*x13759))+((x13754*x13766))+(((-1.0)*r10*x13762*x13766)));
evalcond[6]=(((x13760*x13768))+(((-1.0)*x13752*x13754*x13763))+((r10*x13758))+((cj3*x13759)));
evalcond[7]=(((r01*x13752*x13758))+x13753+(((-1.0)*r00*x13762*x13766))+((sj3*x13756))+((sj5*x13755))+(((-1.0)*x13765)));
evalcond[8]=((((-1.0)*x13761))+(((-1.0)*x13752*x13763*x13764))+((x13755*x13768))+((r00*x13758))+((cj3*x13756))+(((-1.0)*sj2*x13757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13770=(cj5*r10);
IkReal x13771=((1.0)*r11);
CheckValue<IkReal> x13772=IKPowWithIntegerCheck(((((-1.0)*x13770))+((r11*sj5))),-1);
if(!x13772.valid){
continue;
}
CheckValue<IkReal> x13773=IKPowWithIntegerCheck((((sj3*x13770))+(((-1.0)*sj3*sj5*x13771))),-1);
if(!x13773.valid){
continue;
}
if( IKabs(((-1.0)*(x13772.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13773.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13771)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13772.value)))+IKsqr(((x13773.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13771))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13772.value)), ((x13773.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13771))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13774=IKsin(j4);
IkReal x13775=IKcos(j4);
IkReal x13776=(sj1*sj2);
IkReal x13777=(r11*sj5);
IkReal x13778=(r00*sj3);
IkReal x13779=(cj5*r01);
IkReal x13780=((1.0)*cj1);
IkReal x13781=(cj3*sj5);
IkReal x13782=(cj5*r11);
IkReal x13783=(r10*sj3);
IkReal x13784=(cj2*sj1);
IkReal x13785=((1.0)*cj5);
IkReal x13786=((1.0)*sj3);
IkReal x13787=(r01*sj5);
IkReal x13788=(cj2*x13780);
IkReal x13789=(cj3*x13775);
IkReal x13790=(r22*x13774);
IkReal x13791=(cj5*x13775);
IkReal x13792=(x13774*x13785);
evalcond[0]=((-1.0)*r22*x13775);
evalcond[1]=(x13784+((cj1*sj2))+((cj3*x13790)));
evalcond[2]=((((-1.0)*r00*x13792))+((x13774*x13787)));
evalcond[3]=((1.0)+((x13774*x13777))+(((-1.0)*r10*x13792)));
evalcond[4]=(x13776+(((-1.0)*x13786*x13790))+(((-1.0)*x13788)));
evalcond[5]=(((x13777*x13789))+((sj3*x13782))+((sj5*x13783))+(((-1.0)*r10*x13785*x13789)));
evalcond[6]=((((-1.0)*x13775*x13777*x13786))+((x13783*x13791))+((cj3*x13782))+((r10*x13781)));
evalcond[7]=((((-1.0)*r00*x13785*x13789))+x13776+((sj5*x13778))+((sj3*x13779))+(((-1.0)*x13788))+((r01*x13775*x13781)));
evalcond[8]=(((r00*x13781))+(((-1.0)*sj2*x13780))+((x13778*x13791))+((cj3*x13779))+(((-1.0)*x13784))+(((-1.0)*x13775*x13786*x13787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13793=((1.0)*sj3);
IkReal x13794=(r11*sj5);
IkReal x13795=((1.0)*cj5*r10);
CheckValue<IkReal> x13796=IKPowWithIntegerCheck((x13794+(((-1.0)*x13795))),-1);
if(!x13796.valid){
continue;
}
CheckValue<IkReal> x13797=IKPowWithIntegerCheck(((((-1.0)*cj3*x13795))+((cj3*x13794))),-1);
if(!x13797.valid){
continue;
}
if( IKabs(((-1.0)*(x13796.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13797.value)*(((((-1.0)*cj5*r11*x13793))+(((-1.0)*r10*sj5*x13793)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13796.value)))+IKsqr(((x13797.value)*(((((-1.0)*cj5*r11*x13793))+(((-1.0)*r10*sj5*x13793))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13796.value)), ((x13797.value)*(((((-1.0)*cj5*r11*x13793))+(((-1.0)*r10*sj5*x13793))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13798=IKsin(j4);
IkReal x13799=IKcos(j4);
IkReal x13800=(sj1*sj2);
IkReal x13801=(r11*sj5);
IkReal x13802=(r00*sj3);
IkReal x13803=(cj5*r01);
IkReal x13804=((1.0)*cj1);
IkReal x13805=(cj3*sj5);
IkReal x13806=(cj5*r11);
IkReal x13807=(r10*sj3);
IkReal x13808=(cj2*sj1);
IkReal x13809=((1.0)*cj5);
IkReal x13810=((1.0)*sj3);
IkReal x13811=(r01*sj5);
IkReal x13812=(cj2*x13804);
IkReal x13813=(cj3*x13799);
IkReal x13814=(r22*x13798);
IkReal x13815=(cj5*x13799);
IkReal x13816=(x13798*x13809);
evalcond[0]=((-1.0)*r22*x13799);
evalcond[1]=(x13808+((cj1*sj2))+((cj3*x13814)));
evalcond[2]=(((x13798*x13811))+(((-1.0)*r00*x13816)));
evalcond[3]=((1.0)+((x13798*x13801))+(((-1.0)*r10*x13816)));
evalcond[4]=((((-1.0)*x13812))+x13800+(((-1.0)*x13810*x13814)));
evalcond[5]=((((-1.0)*r10*x13809*x13813))+((sj5*x13807))+((sj3*x13806))+((x13801*x13813)));
evalcond[6]=(((x13807*x13815))+(((-1.0)*x13799*x13801*x13810))+((cj3*x13806))+((r10*x13805)));
evalcond[7]=((((-1.0)*x13812))+((r01*x13799*x13805))+x13800+((sj5*x13802))+(((-1.0)*r00*x13809*x13813))+((sj3*x13803)));
evalcond[8]=(((r00*x13805))+(((-1.0)*x13799*x13810*x13811))+(((-1.0)*x13808))+((x13802*x13815))+(((-1.0)*sj2*x13804))+((cj3*x13803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13817=cj5*cj5;
IkReal x13818=((1.0)*cj3);
IkReal x13819=(r10*r21);
IkReal x13820=(cj5*sj5);
IkReal x13821=(r11*r21);
IkReal x13822=(r11*r20);
IkReal x13823=(r22*sj3);
IkReal x13824=(r10*r20);
IkReal x13825=((1.0)*sj3*x13817);
CheckValue<IkReal> x13826=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13818*x13821))+((cj3*x13817*x13821))+((cj3*x13819*x13820))+(((-1.0)*r12*r22*x13818))+((cj3*x13820*x13822))+(((-1.0)*x13817*x13818*x13824)))),-1);
if(!x13826.valid){
continue;
}
CheckValue<IkReal> x13827 = IKatan2WithCheck(IkReal((((cj5*r11*x13823))+((r10*sj5*x13823)))),IkReal((((sj3*x13820*x13821))+((sj3*x13819))+(((-1.0)*x13822*x13825))+(((-1.0)*sj3*x13820*x13824))+(((-1.0)*x13819*x13825)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13826.value)))+(x13827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13828=IKsin(j4);
IkReal x13829=IKcos(j4);
IkReal x13830=(sj1*sj2);
IkReal x13831=(cj5*sj3);
IkReal x13832=(cj5*r10);
IkReal x13833=(r00*sj5);
IkReal x13834=(r11*sj5);
IkReal x13835=(cj3*cj5);
IkReal x13836=((1.0)*cj1);
IkReal x13837=(cj3*sj5);
IkReal x13838=(r21*sj5);
IkReal x13839=(cj2*sj1);
IkReal x13840=(sj3*sj5);
IkReal x13841=(r01*sj5);
IkReal x13842=(cj2*x13836);
IkReal x13843=((1.0)*x13829);
IkReal x13844=((1.0)*x13828);
IkReal x13845=(cj3*x13828);
IkReal x13846=(cj3*x13829);
evalcond[0]=((((-1.0)*r22*x13843))+(((-1.0)*cj5*r20*x13844))+((x13828*x13838)));
evalcond[1]=((((-1.0)*cj5*r00*x13844))+(((-1.0)*r02*x13843))+((x13828*x13841)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13843))+(((-1.0)*x13832*x13844))+((x13828*x13834)));
evalcond[3]=((((-1.0)*cj3*x13832*x13843))+((x13834*x13846))+((r12*x13845))+((r11*x13831))+((r10*x13840)));
evalcond[4]=(((r10*x13829*x13831))+(((-1.0)*r12*sj3*x13844))+((r11*x13835))+((r10*x13837))+(((-1.0)*sj3*x13834*x13843)));
evalcond[5]=(x13839+((r21*x13829*x13837))+(((-1.0)*r20*x13835*x13843))+((cj1*sj2))+((r21*x13831))+((r22*x13845))+((r20*x13840)));
evalcond[6]=((((-1.0)*x13842))+((r01*x13831))+x13830+(((-1.0)*r00*x13835*x13843))+((sj3*x13833))+((r02*x13845))+((r01*x13829*x13837)));
evalcond[7]=((((-1.0)*x13842))+x13830+((r21*x13835))+(((-1.0)*r22*sj3*x13844))+((r20*x13829*x13831))+((r20*x13837))+(((-1.0)*sj3*x13838*x13843)));
evalcond[8]=(((r01*x13835))+(((-1.0)*r01*x13840*x13843))+(((-1.0)*sj2*x13836))+(((-1.0)*r02*sj3*x13844))+(((-1.0)*x13839))+((r00*x13829*x13831))+((cj3*x13833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13847=((1.0)*cj5);
CheckValue<IkReal> x13848 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13848.valid){
continue;
}
CheckValue<IkReal> x13849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13847)))),-1);
if(!x13849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13848.value)+(((1.5707963267949)*(x13849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13850=IKsin(j4);
IkReal x13851=IKcos(j4);
IkReal x13852=(sj1*sj2);
IkReal x13853=(cj5*sj3);
IkReal x13854=(cj5*r10);
IkReal x13855=(r00*sj5);
IkReal x13856=(r11*sj5);
IkReal x13857=(cj3*cj5);
IkReal x13858=((1.0)*cj1);
IkReal x13859=(cj3*sj5);
IkReal x13860=(r21*sj5);
IkReal x13861=(cj2*sj1);
IkReal x13862=(sj3*sj5);
IkReal x13863=(r01*sj5);
IkReal x13864=(cj2*x13858);
IkReal x13865=((1.0)*x13851);
IkReal x13866=((1.0)*x13850);
IkReal x13867=(cj3*x13850);
IkReal x13868=(cj3*x13851);
evalcond[0]=((((-1.0)*r22*x13865))+((x13850*x13860))+(((-1.0)*cj5*r20*x13866)));
evalcond[1]=((((-1.0)*cj5*r00*x13866))+(((-1.0)*r02*x13865))+((x13850*x13863)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13865))+((x13850*x13856))+(((-1.0)*x13854*x13866)));
evalcond[3]=(((r11*x13853))+((r12*x13867))+(((-1.0)*cj3*x13854*x13865))+((x13856*x13868))+((r10*x13862)));
evalcond[4]=(((r11*x13857))+((r10*x13851*x13853))+(((-1.0)*sj3*x13856*x13865))+(((-1.0)*r12*sj3*x13866))+((r10*x13859)));
evalcond[5]=(((r21*x13851*x13859))+((r22*x13867))+x13861+((cj1*sj2))+(((-1.0)*r20*x13857*x13865))+((r21*x13853))+((r20*x13862)));
evalcond[6]=((((-1.0)*r00*x13857*x13865))+((r01*x13853))+x13852+((sj3*x13855))+((r02*x13867))+((r01*x13851*x13859))+(((-1.0)*x13864)));
evalcond[7]=(x13852+(((-1.0)*sj3*x13860*x13865))+((r21*x13857))+(((-1.0)*r22*sj3*x13866))+((r20*x13859))+((r20*x13851*x13853))+(((-1.0)*x13864)));
evalcond[8]=(((r01*x13857))+(((-1.0)*x13861))+(((-1.0)*sj2*x13858))+(((-1.0)*r01*x13862*x13865))+((r00*x13851*x13853))+(((-1.0)*r02*sj3*x13866))+((cj3*x13855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13869=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13869.valid){
continue;
}
CheckValue<IkReal> x13870 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13869.value)))+(x13870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13871=IKsin(j4);
IkReal x13872=IKcos(j4);
IkReal x13873=(sj1*sj2);
IkReal x13874=(cj5*sj3);
IkReal x13875=(cj5*r10);
IkReal x13876=(r00*sj5);
IkReal x13877=(r11*sj5);
IkReal x13878=(cj3*cj5);
IkReal x13879=((1.0)*cj1);
IkReal x13880=(cj3*sj5);
IkReal x13881=(r21*sj5);
IkReal x13882=(cj2*sj1);
IkReal x13883=(sj3*sj5);
IkReal x13884=(r01*sj5);
IkReal x13885=(cj2*x13879);
IkReal x13886=((1.0)*x13872);
IkReal x13887=((1.0)*x13871);
IkReal x13888=(cj3*x13871);
IkReal x13889=(cj3*x13872);
evalcond[0]=(((x13871*x13881))+(((-1.0)*cj5*r20*x13887))+(((-1.0)*r22*x13886)));
evalcond[1]=((((-1.0)*r02*x13886))+((x13871*x13884))+(((-1.0)*cj5*r00*x13887)));
evalcond[2]=((1.0)+((x13871*x13877))+(((-1.0)*x13875*x13887))+(((-1.0)*r12*x13886)));
evalcond[3]=((((-1.0)*cj3*x13875*x13886))+((r10*x13883))+((r11*x13874))+((r12*x13888))+((x13877*x13889)));
evalcond[4]=(((r10*x13872*x13874))+((r10*x13880))+((r11*x13878))+(((-1.0)*sj3*x13877*x13886))+(((-1.0)*r12*sj3*x13887)));
evalcond[5]=(((r21*x13872*x13880))+x13882+(((-1.0)*r20*x13878*x13886))+((cj1*sj2))+((r21*x13874))+((r20*x13883))+((r22*x13888)));
evalcond[6]=(((sj3*x13876))+x13873+((r02*x13888))+((r01*x13874))+(((-1.0)*r00*x13878*x13886))+((r01*x13872*x13880))+(((-1.0)*x13885)));
evalcond[7]=(((r20*x13872*x13874))+(((-1.0)*r22*sj3*x13887))+x13873+(((-1.0)*sj3*x13881*x13886))+((r21*x13878))+((r20*x13880))+(((-1.0)*x13885)));
evalcond[8]=((((-1.0)*r01*x13883*x13886))+((r00*x13872*x13874))+((cj3*x13876))+(((-1.0)*sj2*x13879))+((r01*x13878))+(((-1.0)*x13882))+(((-1.0)*r02*sj3*x13887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13890=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13890;
j4eval[1]=IKsign(x13890);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13891=((1.0)*cj5);
IkReal x13892=((((-1.0)*r21*x13891))+(((-1.0)*r20*sj5)));
j4eval[0]=x13892;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13891))))));
j4eval[2]=IKsign(x13892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13893=cj5*cj5;
IkReal x13894=(cj3*r21);
IkReal x13895=(cj5*sj5);
IkReal x13896=((1.0)*cj3);
IkReal x13897=((((-1.0)*r11*x13894))+(((-1.0)*r10*r20*x13893*x13896))+(((-1.0)*r12*r22*x13896))+((r11*x13893*x13894))+((r10*x13894*x13895))+((cj3*r11*r20*x13895)));
j4eval[0]=x13897;
j4eval[1]=IKsign(x13897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13898=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13898;
j4eval[1]=IKsign(x13898);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13899=((1.0)*cj5);
IkReal x13900=((((-1.0)*r21*x13899))+(((-1.0)*r20*sj5)));
j4eval[0]=x13900;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13899))))));
j4eval[2]=IKsign(x13900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13901=cj5*cj5;
IkReal x13902=r11*r11;
IkReal x13903=(cj5*r10);
IkReal x13904=(r11*sj5);
IkReal x13905=((((-1.0)*x13901*(r10*r10)))+(((-1.0)*x13902))+(((2.0)*x13903*x13904))+(((-1.0)*(r12*r12)))+((x13901*x13902)));
j4eval[0]=x13905;
j4eval[1]=((IKabs(r12))+(IKabs((x13903+(((-1.0)*x13904))))));
j4eval[2]=IKsign(x13905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13906=cj5*cj5;
IkReal x13907=r11*r11;
IkReal x13908=(cj5*r10);
IkReal x13909=(r11*sj5);
CheckValue<IkReal> x13910=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13906*(r10*r10)))+(((2.0)*x13908*x13909))+((x13906*x13907))+(((-1.0)*x13907))+(((-1.0)*(r12*r12))))),-1);
if(!x13910.valid){
continue;
}
CheckValue<IkReal> x13911 = IKatan2WithCheck(IkReal((x13908+(((-1.0)*x13909)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13910.value)))+(x13911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13912=IKsin(j4);
IkReal x13913=IKcos(j4);
IkReal x13914=(cj5*r10);
IkReal x13915=(r01*sj5);
IkReal x13916=(cj5*r00);
IkReal x13917=(cj5*r20);
IkReal x13918=((1.0)*x13913);
IkReal x13919=((1.0)*x13912);
IkReal x13920=(sj5*x13912);
evalcond[0]=((((-1.0)*x13917*x13919))+((r21*x13920))+(((-1.0)*r22*x13918)));
evalcond[1]=((((-1.0)*x13916*x13919))+((x13912*x13915))+(((-1.0)*r02*x13918)));
evalcond[2]=((((-1.0)*r12*x13919))+((x13913*x13914))+(((-1.0)*r11*sj5*x13918)));
evalcond[3]=((-1.0)+(((-1.0)*x13914*x13919))+(((-1.0)*r12*x13918))+((r11*x13920)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13915*x13918))+((x13913*x13916))+(((-1.0)*r02*x13919)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13919))+((x13913*x13917))+(((-1.0)*r21*sj5*x13918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13921=((1.0)*cj5);
CheckValue<IkReal> x13922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13921))+(((-1.0)*r20*sj5)))),-1);
if(!x13922.valid){
continue;
}
CheckValue<IkReal> x13923 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13922.value)))+(x13923.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13924=IKsin(j4);
IkReal x13925=IKcos(j4);
IkReal x13926=(cj5*r10);
IkReal x13927=(r01*sj5);
IkReal x13928=(cj5*r00);
IkReal x13929=(cj5*r20);
IkReal x13930=((1.0)*x13925);
IkReal x13931=((1.0)*x13924);
IkReal x13932=(sj5*x13924);
evalcond[0]=(((r21*x13932))+(((-1.0)*x13929*x13931))+(((-1.0)*r22*x13930)));
evalcond[1]=((((-1.0)*r02*x13930))+(((-1.0)*x13928*x13931))+((x13924*x13927)));
evalcond[2]=(((x13925*x13926))+(((-1.0)*r12*x13931))+(((-1.0)*r11*sj5*x13930)));
evalcond[3]=((-1.0)+((r11*x13932))+(((-1.0)*x13926*x13931))+(((-1.0)*r12*x13930)));
evalcond[4]=(((cj2*sj1))+((x13925*x13928))+(((-1.0)*x13927*x13930))+((cj1*sj2))+(((-1.0)*r02*x13931)));
evalcond[5]=(((x13925*x13929))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13931))+(((-1.0)*r21*sj5*x13930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13933 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13933.valid){
continue;
}
CheckValue<IkReal> x13934=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13933.value)+(((1.5707963267949)*(x13934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13935=IKsin(j4);
IkReal x13936=IKcos(j4);
IkReal x13937=(cj5*r10);
IkReal x13938=(r01*sj5);
IkReal x13939=(cj5*r00);
IkReal x13940=(cj5*r20);
IkReal x13941=((1.0)*x13936);
IkReal x13942=((1.0)*x13935);
IkReal x13943=(sj5*x13935);
evalcond[0]=((((-1.0)*x13940*x13942))+(((-1.0)*r22*x13941))+((r21*x13943)));
evalcond[1]=((((-1.0)*r02*x13941))+(((-1.0)*x13939*x13942))+((x13935*x13938)));
evalcond[2]=((((-1.0)*r11*sj5*x13941))+(((-1.0)*r12*x13942))+((x13936*x13937)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13941))+(((-1.0)*x13937*x13942))+((r11*x13943)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13938*x13941))+(((-1.0)*r02*x13942))+((x13936*x13939)));
evalcond[5]=(((x13936*x13940))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13942))+(((-1.0)*r21*sj5*x13941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13944=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13944;
j4eval[1]=IKsign(x13944);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13945=((1.0)*cj5);
IkReal x13946=((((-1.0)*r21*x13945))+(((-1.0)*r20*sj5)));
j4eval[0]=x13946;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13945))))));
j4eval[2]=IKsign(x13946);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13947=cj5*cj5;
IkReal x13948=r11*r11;
IkReal x13949=(r11*sj5);
IkReal x13950=(cj5*r10);
IkReal x13951=((r12*r12)+(((-1.0)*x13947*x13948))+x13948+((x13947*(r10*r10)))+(((-2.0)*x13949*x13950)));
j4eval[0]=x13951;
j4eval[1]=IKsign(x13951);
j4eval[2]=((IKabs(r12))+(IKabs((x13949+(((-1.0)*x13950))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13952=cj5*cj5;
IkReal x13953=r11*r11;
IkReal x13954=(cj5*r10);
IkReal x13955=(r11*sj5);
CheckValue<IkReal> x13956 = IKatan2WithCheck(IkReal((x13955+(((-1.0)*x13954)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13956.valid){
continue;
}
CheckValue<IkReal> x13957=IKPowWithIntegerCheck(IKsign(((r12*r12)+x13953+((x13952*(r10*r10)))+(((-2.0)*x13954*x13955))+(((-1.0)*x13952*x13953)))),-1);
if(!x13957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13956.value)+(((1.5707963267949)*(x13957.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13958=IKcos(j4);
IkReal x13959=IKsin(j4);
IkReal x13960=(cj5*r00);
IkReal x13961=(cj5*r10);
IkReal x13962=(r21*sj5);
IkReal x13963=(cj5*r20);
IkReal x13964=((1.0)*x13958);
IkReal x13965=((1.0)*x13959);
IkReal x13966=(sj5*x13959);
IkReal x13967=(sj5*x13958);
evalcond[0]=(((r12*x13959))+((r11*x13967))+(((-1.0)*x13961*x13964)));
evalcond[1]=(((x13959*x13962))+(((-1.0)*r22*x13964))+(((-1.0)*x13963*x13965)));
evalcond[2]=((((-1.0)*r02*x13964))+(((-1.0)*x13960*x13965))+((r01*x13966)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13964))+((r11*x13966))+(((-1.0)*x13961*x13965)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x13959))+(((-1.0)*x13960*x13964))+((r01*x13967)));
evalcond[5]=(((x13958*x13962))+((r22*x13959))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13963*x13964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13968=((1.0)*cj5);
CheckValue<IkReal> x13969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13968))+(((-1.0)*r20*sj5)))),-1);
if(!x13969.valid){
continue;
}
CheckValue<IkReal> x13970 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13969.value)))+(x13970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13971=IKcos(j4);
IkReal x13972=IKsin(j4);
IkReal x13973=(cj5*r00);
IkReal x13974=(cj5*r10);
IkReal x13975=(r21*sj5);
IkReal x13976=(cj5*r20);
IkReal x13977=((1.0)*x13971);
IkReal x13978=((1.0)*x13972);
IkReal x13979=(sj5*x13972);
IkReal x13980=(sj5*x13971);
evalcond[0]=(((r11*x13980))+(((-1.0)*x13974*x13977))+((r12*x13972)));
evalcond[1]=((((-1.0)*r22*x13977))+((x13972*x13975))+(((-1.0)*x13976*x13978)));
evalcond[2]=((((-1.0)*r02*x13977))+(((-1.0)*x13973*x13978))+((r01*x13979)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13977))+((r11*x13979))+(((-1.0)*x13974*x13978)));
evalcond[4]=(((cj2*sj1))+((r02*x13972))+(((-1.0)*x13973*x13977))+((r01*x13980))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13971*x13975))+(((-1.0)*x13976*x13977))+((r22*x13972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13981 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13981.valid){
continue;
}
CheckValue<IkReal> x13982=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13981.value)+(((1.5707963267949)*(x13982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13983=IKcos(j4);
IkReal x13984=IKsin(j4);
IkReal x13985=(cj5*r00);
IkReal x13986=(cj5*r10);
IkReal x13987=(r21*sj5);
IkReal x13988=(cj5*r20);
IkReal x13989=((1.0)*x13983);
IkReal x13990=((1.0)*x13984);
IkReal x13991=(sj5*x13984);
IkReal x13992=(sj5*x13983);
evalcond[0]=(((r12*x13984))+((r11*x13992))+(((-1.0)*x13986*x13989)));
evalcond[1]=((((-1.0)*x13988*x13990))+((x13984*x13987))+(((-1.0)*r22*x13989)));
evalcond[2]=((((-1.0)*r02*x13989))+(((-1.0)*x13985*x13990))+((r01*x13991)));
evalcond[3]=((-1.0)+((r11*x13991))+(((-1.0)*x13986*x13990))+(((-1.0)*r12*x13989)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13985*x13989))+((cj1*sj2))+((r02*x13984))+((r01*x13992)));
evalcond[5]=(((x13983*x13987))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13984))+(((-1.0)*x13988*x13989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13994 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13994)==0){
continue;
}
IkReal x13993=pow(x13994,-0.5);
CheckValue<IkReal> x13995 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13995.valid){
continue;
}
IkReal gconst36=((-1.0)*(x13995.value));
IkReal gconst37=((-1.0)*r01*x13993);
IkReal gconst38=(r00*x13993);
CheckValue<IkReal> x13996 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13996.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13996.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13999 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13999.valid){
continue;
}
IkReal x13997=((-1.0)*(x13999.value));
IkReal x13998=x13993;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x13997;
IkReal gconst36=x13997;
IkReal gconst37=((-1.0)*r01*x13998);
IkReal gconst38=(r00*x13998);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14002 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14002.valid){
continue;
}
IkReal x14000=((-1.0)*(x14002.value));
IkReal x14001=x13993;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14000;
IkReal gconst36=x14000;
IkReal gconst37=((-1.0)*r01*x14001);
IkReal gconst38=(r00*x14001);
CheckValue<IkReal> x14010=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14010.valid){
continue;
}
IkReal x14003=x14010.value;
IkReal x14004=(sj3*x14003);
IkReal x14005=(r11*x14004);
IkReal x14006=(r21*x14004);
IkReal x14007=(r20*x14004);
IkReal x14008=(r10*x14004);
IkReal x14009=(r00*r01*x14004);
j4eval[0]=IKsign((((r10*x14007*(r00*r00)))+((r12*r22*sj3))+((r21*x14005*(r01*r01)))+((r00*r01*r20*x14005))+((r00*r01*r10*x14006))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14011=gconst38*gconst38;
IkReal x14012=gconst37*gconst37;
IkReal x14013=((1.0)*cj3);
IkReal x14014=(r11*r20);
IkReal x14015=(r10*sj3);
IkReal x14016=(gconst37*gconst38);
IkReal x14017=(r11*sj3);
IkReal x14018=(r21*x14012);
IkReal x14019=(cj3*x14016);
CheckValue<IkReal> x14020 = IKatan2WithCheck(IkReal((((gconst38*r22*x14017))+((gconst37*r22*x14015)))),IkReal((((x14015*x14018))+((r21*x14016*x14017))+(((-1.0)*r20*x14015*x14016))+(((-1.0)*sj3*x14011*x14014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14020.valid){
continue;
}
CheckValue<IkReal> x14021=IKPowWithIntegerCheck(IKsign((((r10*r21*x14019))+(((-1.0)*r10*r20*x14011*x14013))+((x14014*x14019))+(((-1.0)*r12*r22*x14013))+(((-1.0)*r11*x14013*x14018)))),-1);
if(!x14021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14020.value)+(((1.5707963267949)*(x14021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14022=IKsin(j4);
IkReal x14023=IKcos(j4);
IkReal x14024=(cj2*sj1);
IkReal x14025=(cj1*sj2);
IkReal x14026=(gconst38*r21);
IkReal x14027=(cj3*r20);
IkReal x14028=(gconst38*r10);
IkReal x14029=(cj3*gconst37);
IkReal x14030=(sj1*sj2);
IkReal x14031=(gconst38*r00);
IkReal x14032=(cj1*cj2);
IkReal x14033=(gconst37*sj3);
IkReal x14034=(gconst38*r20);
IkReal x14035=(gconst38*r01);
IkReal x14036=(gconst38*r11);
IkReal x14037=((1.0)*x14023);
IkReal x14038=((1.0)*x14022);
IkReal x14039=(cj3*x14022);
IkReal x14040=(sj3*x14023);
IkReal x14041=(gconst37*x14022);
IkReal x14042=(x14024+x14025);
evalcond[0]=((((-1.0)*x14034*x14038))+((r21*x14041))+(((-1.0)*r22*x14037)));
evalcond[1]=((((-1.0)*x14031*x14038))+((r01*x14041))+(((-1.0)*r02*x14037)));
evalcond[2]=((-1.0)+((r11*x14041))+(((-1.0)*x14028*x14038))+(((-1.0)*r12*x14037)));
evalcond[3]=(((sj3*x14036))+((r10*x14033))+(((-1.0)*cj3*x14028*x14037))+((r12*x14039))+((r11*x14023*x14029)));
evalcond[4]=((((-1.0)*r11*x14033*x14037))+((r10*x14029))+(((-1.0)*r12*sj3*x14038))+((cj3*x14036))+((x14028*x14040)));
evalcond[5]=(((r22*x14039))+(((-1.0)*gconst38*x14027*x14037))+((sj3*x14026))+((r20*x14033))+((r21*x14023*x14029))+x14042);
evalcond[6]=(((r00*x14033))+((sj3*x14035))+(((-1.0)*cj3*x14031*x14037))+(((-1.0)*x14030))+((r01*x14023*x14029))+x14032+((r02*x14039)));
evalcond[7]=(((r00*x14029))+(((-1.0)*r01*x14033*x14037))+((x14031*x14040))+(((-1.0)*r02*sj3*x14038))+((cj3*x14035))+x14042);
evalcond[8]=((((-1.0)*x14032))+((cj3*x14026))+((gconst37*x14027))+(((-1.0)*r21*x14033*x14037))+(((-1.0)*r22*sj3*x14038))+x14030+((x14034*x14040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14043=gconst38*gconst38;
IkReal x14044=gconst37*gconst37;
IkReal x14045=(gconst37*r10);
IkReal x14046=(cj3*r22);
IkReal x14047=((1.0)*gconst38);
IkReal x14048=(r21*sj3);
IkReal x14049=(gconst38*r11);
IkReal x14050=(cj3*r20);
IkReal x14051=(cj3*r21);
IkReal x14052=(r20*sj3);
CheckValue<IkReal> x14053=IKPowWithIntegerCheck(IKsign((((r10*x14043*x14052))+((r12*r22*sj3))+(((-1.0)*gconst37*r11*x14047*x14052))+((r11*x14044*x14048))+(((-1.0)*x14045*x14047*x14048)))),-1);
if(!x14053.valid){
continue;
}
CheckValue<IkReal> x14054 = IKatan2WithCheck(IkReal((((x14046*x14049))+((x14045*x14046)))),IkReal(((((-1.0)*r11*x14043*x14050))+((gconst37*x14049*x14051))+(((-1.0)*x14045*x14047*x14050))+((r10*x14044*x14051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14053.value)))+(x14054.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14055=IKsin(j4);
IkReal x14056=IKcos(j4);
IkReal x14057=(cj2*sj1);
IkReal x14058=(cj1*sj2);
IkReal x14059=(gconst38*r21);
IkReal x14060=(cj3*r20);
IkReal x14061=(gconst38*r10);
IkReal x14062=(cj3*gconst37);
IkReal x14063=(sj1*sj2);
IkReal x14064=(gconst38*r00);
IkReal x14065=(cj1*cj2);
IkReal x14066=(gconst37*sj3);
IkReal x14067=(gconst38*r20);
IkReal x14068=(gconst38*r01);
IkReal x14069=(gconst38*r11);
IkReal x14070=((1.0)*x14056);
IkReal x14071=((1.0)*x14055);
IkReal x14072=(cj3*x14055);
IkReal x14073=(sj3*x14056);
IkReal x14074=(gconst37*x14055);
IkReal x14075=(x14058+x14057);
evalcond[0]=((((-1.0)*r22*x14070))+((r21*x14074))+(((-1.0)*x14067*x14071)));
evalcond[1]=((((-1.0)*x14064*x14071))+((r01*x14074))+(((-1.0)*r02*x14070)));
evalcond[2]=((-1.0)+(((-1.0)*x14061*x14071))+(((-1.0)*r12*x14070))+((r11*x14074)));
evalcond[3]=((((-1.0)*cj3*x14061*x14070))+((sj3*x14069))+((r10*x14066))+((r12*x14072))+((r11*x14056*x14062)));
evalcond[4]=(((x14061*x14073))+((cj3*x14069))+((r10*x14062))+(((-1.0)*r12*sj3*x14071))+(((-1.0)*r11*x14066*x14070)));
evalcond[5]=(((r22*x14072))+(((-1.0)*gconst38*x14060*x14070))+((r20*x14066))+((r21*x14056*x14062))+x14075+((sj3*x14059)));
evalcond[6]=(((r02*x14072))+(((-1.0)*cj3*x14064*x14070))+((sj3*x14068))+((r00*x14066))+(((-1.0)*x14063))+x14065+((r01*x14056*x14062)));
evalcond[7]=(((cj3*x14068))+(((-1.0)*r02*sj3*x14071))+((r00*x14062))+(((-1.0)*r01*x14066*x14070))+x14075+((x14064*x14073)));
evalcond[8]=((((-1.0)*r21*x14066*x14070))+(((-1.0)*r22*sj3*x14071))+((x14067*x14073))+((gconst37*x14060))+(((-1.0)*x14065))+((cj3*x14059))+x14063);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14076=((1.0)*gconst38);
CheckValue<IkReal> x14077=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14076)))),-1);
if(!x14077.valid){
continue;
}
CheckValue<IkReal> x14078 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14076))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14077.value)))+(x14078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14079=IKsin(j4);
IkReal x14080=IKcos(j4);
IkReal x14081=(cj2*sj1);
IkReal x14082=(cj1*sj2);
IkReal x14083=(gconst38*r21);
IkReal x14084=(cj3*r20);
IkReal x14085=(gconst38*r10);
IkReal x14086=(cj3*gconst37);
IkReal x14087=(sj1*sj2);
IkReal x14088=(gconst38*r00);
IkReal x14089=(cj1*cj2);
IkReal x14090=(gconst37*sj3);
IkReal x14091=(gconst38*r20);
IkReal x14092=(gconst38*r01);
IkReal x14093=(gconst38*r11);
IkReal x14094=((1.0)*x14080);
IkReal x14095=((1.0)*x14079);
IkReal x14096=(cj3*x14079);
IkReal x14097=(sj3*x14080);
IkReal x14098=(gconst37*x14079);
IkReal x14099=(x14082+x14081);
evalcond[0]=((((-1.0)*r22*x14094))+((r21*x14098))+(((-1.0)*x14091*x14095)));
evalcond[1]=((((-1.0)*r02*x14094))+(((-1.0)*x14088*x14095))+((r01*x14098)));
evalcond[2]=((-1.0)+(((-1.0)*x14085*x14095))+(((-1.0)*r12*x14094))+((r11*x14098)));
evalcond[3]=(((sj3*x14093))+(((-1.0)*cj3*x14085*x14094))+((r12*x14096))+((r10*x14090))+((r11*x14080*x14086)));
evalcond[4]=((((-1.0)*r11*x14090*x14094))+(((-1.0)*r12*sj3*x14095))+((r10*x14086))+((cj3*x14093))+((x14085*x14097)));
evalcond[5]=((((-1.0)*gconst38*x14084*x14094))+((r20*x14090))+x14099+((r22*x14096))+((r21*x14080*x14086))+((sj3*x14083)));
evalcond[6]=(((r00*x14090))+((sj3*x14092))+(((-1.0)*x14087))+((r02*x14096))+x14089+(((-1.0)*cj3*x14088*x14094))+((r01*x14080*x14086)));
evalcond[7]=(((x14088*x14097))+((r00*x14086))+(((-1.0)*r01*x14090*x14094))+(((-1.0)*r02*sj3*x14095))+((cj3*x14092))+x14099);
evalcond[8]=(((x14091*x14097))+(((-1.0)*x14089))+((cj3*x14083))+x14087+((gconst37*x14084))+(((-1.0)*r22*sj3*x14095))+(((-1.0)*r21*x14090*x14094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14101 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14101)==0){
continue;
}
IkReal x14100=pow(x14101,-0.5);
CheckValue<IkReal> x14102 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14102.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14102.value))));
IkReal gconst40=((1.0)*r01*x14100);
IkReal gconst41=((-1.0)*r00*x14100);
CheckValue<IkReal> x14103 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14103.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14103.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14106 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14106.valid){
continue;
}
IkReal x14104=((1.0)*(x14106.value));
IkReal x14105=x14100;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14104)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14104)));
IkReal gconst40=((1.0)*r01*x14105);
IkReal gconst41=((-1.0)*r00*x14105);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14109 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14109.valid){
continue;
}
IkReal x14107=((1.0)*(x14109.value));
IkReal x14108=x14100;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14107)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14107)));
IkReal gconst40=((1.0)*r01*x14108);
IkReal gconst41=((-1.0)*r00*x14108);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14110=gconst41*gconst41;
IkReal x14111=gconst40*gconst40;
IkReal x14112=(gconst40*r10);
IkReal x14113=(r22*sj3);
IkReal x14114=(r11*sj3);
IkReal x14115=((1.0)*cj3);
IkReal x14116=(gconst41*r21);
IkReal x14117=(gconst41*r20);
IkReal x14118=(r21*x14111);
IkReal x14119=((1.0)*r20*x14110);
CheckValue<IkReal> x14120=IKPowWithIntegerCheck(IKsign((((cj3*gconst40*r11*x14117))+(((-1.0)*r10*r20*x14110*x14115))+((cj3*x14112*x14116))+(((-1.0)*r11*x14115*x14118))+(((-1.0)*r12*r22*x14115)))),-1);
if(!x14120.valid){
continue;
}
CheckValue<IkReal> x14121 = IKatan2WithCheck(IkReal((((x14112*x14113))+((gconst41*r11*x14113)))),IkReal((((r10*sj3*x14118))+(((-1.0)*x14114*x14119))+(((-1.0)*sj3*x14112*x14117))+((gconst40*x14114*x14116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14120.value)))+(x14121.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14122=IKsin(j4);
IkReal x14123=IKcos(j4);
IkReal x14124=(cj2*sj1);
IkReal x14125=(cj1*sj2);
IkReal x14126=(gconst40*sj3);
IkReal x14127=(gconst41*sj3);
IkReal x14128=(gconst41*r20);
IkReal x14129=(cj3*gconst41);
IkReal x14130=(sj1*sj2);
IkReal x14131=(cj1*cj2);
IkReal x14132=(cj3*gconst40);
IkReal x14133=((1.0)*x14123);
IkReal x14134=((1.0)*x14122);
IkReal x14135=(cj3*x14122);
IkReal x14136=(gconst40*x14122);
IkReal x14137=(x14125+x14124);
IkReal x14138=(x14123*x14132);
evalcond[0]=(((r21*x14136))+(((-1.0)*x14128*x14134))+(((-1.0)*r22*x14133)));
evalcond[1]=((((-1.0)*r02*x14133))+(((-1.0)*gconst41*r00*x14134))+((r01*x14136)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14134))+((r11*x14136))+(((-1.0)*r12*x14133)));
evalcond[3]=((((-1.0)*r10*x14129*x14133))+((r11*x14138))+((r12*x14135))+((r10*x14126))+((r11*x14127)));
evalcond[4]=((((-1.0)*r11*x14126*x14133))+((r10*x14132))+(((-1.0)*r12*sj3*x14134))+((r10*x14123*x14127))+((r11*x14129)));
evalcond[5]=(((r21*x14127))+((r21*x14138))+((r20*x14126))+((r22*x14135))+x14137+(((-1.0)*cj3*x14128*x14133)));
evalcond[6]=((((-1.0)*x14130))+(((-1.0)*r00*x14129*x14133))+((r00*x14126))+((r02*x14135))+((r01*x14127))+x14131+((r01*x14138)));
evalcond[7]=((((-1.0)*r02*sj3*x14134))+((r01*x14129))+(((-1.0)*r01*x14126*x14133))+x14137+((r00*x14123*x14127))+((r00*x14132)));
evalcond[8]=((((-1.0)*r21*x14126*x14133))+((r21*x14129))+(((-1.0)*x14131))+((r20*x14132))+((r20*x14123*x14127))+(((-1.0)*r22*sj3*x14134))+x14130);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14139=((1.0)*gconst41);
CheckValue<IkReal> x14140 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst40*r01))+(((-1.0)*r00*x14139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14140.valid){
continue;
}
CheckValue<IkReal> x14141=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r20))+(((-1.0)*r21*x14139)))),-1);
if(!x14141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14140.value)+(((1.5707963267949)*(x14141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14142=IKsin(j4);
IkReal x14143=IKcos(j4);
IkReal x14144=(cj2*sj1);
IkReal x14145=(cj1*sj2);
IkReal x14146=(gconst40*sj3);
IkReal x14147=(gconst41*sj3);
IkReal x14148=(gconst41*r20);
IkReal x14149=(cj3*gconst41);
IkReal x14150=(sj1*sj2);
IkReal x14151=(cj1*cj2);
IkReal x14152=(cj3*gconst40);
IkReal x14153=((1.0)*x14143);
IkReal x14154=((1.0)*x14142);
IkReal x14155=(cj3*x14142);
IkReal x14156=(gconst40*x14142);
IkReal x14157=(x14145+x14144);
IkReal x14158=(x14143*x14152);
evalcond[0]=((((-1.0)*r22*x14153))+(((-1.0)*x14148*x14154))+((r21*x14156)));
evalcond[1]=((((-1.0)*r02*x14153))+((r01*x14156))+(((-1.0)*gconst41*r00*x14154)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14154))+((r11*x14156))+(((-1.0)*r12*x14153)));
evalcond[3]=(((r10*x14146))+(((-1.0)*r10*x14149*x14153))+((r11*x14158))+((r12*x14155))+((r11*x14147)));
evalcond[4]=(((r10*x14152))+(((-1.0)*r12*sj3*x14154))+((r11*x14149))+(((-1.0)*r11*x14146*x14153))+((r10*x14143*x14147)));
evalcond[5]=((((-1.0)*cj3*x14148*x14153))+((r22*x14155))+((r21*x14147))+x14157+((r21*x14158))+((r20*x14146)));
evalcond[6]=(((r02*x14155))+(((-1.0)*r00*x14149*x14153))+((r01*x14147))+((r00*x14146))+((r01*x14158))+x14151+(((-1.0)*x14150)));
evalcond[7]=((((-1.0)*r02*sj3*x14154))+(((-1.0)*r01*x14146*x14153))+((r01*x14149))+((r00*x14152))+x14157+((r00*x14143*x14147)));
evalcond[8]=(((r21*x14149))+(((-1.0)*r22*sj3*x14154))+(((-1.0)*r21*x14146*x14153))+x14150+((r20*x14143*x14147))+((r20*x14152))+(((-1.0)*x14151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14159 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14159.valid){
continue;
}
CheckValue<IkReal> x14160=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14159.value)+(((1.5707963267949)*(x14160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14161=IKsin(j4);
IkReal x14162=IKcos(j4);
IkReal x14163=(cj2*sj1);
IkReal x14164=(cj1*sj2);
IkReal x14165=(gconst40*sj3);
IkReal x14166=(gconst41*sj3);
IkReal x14167=(gconst41*r20);
IkReal x14168=(cj3*gconst41);
IkReal x14169=(sj1*sj2);
IkReal x14170=(cj1*cj2);
IkReal x14171=(cj3*gconst40);
IkReal x14172=((1.0)*x14162);
IkReal x14173=((1.0)*x14161);
IkReal x14174=(cj3*x14161);
IkReal x14175=(gconst40*x14161);
IkReal x14176=(x14163+x14164);
IkReal x14177=(x14162*x14171);
evalcond[0]=((((-1.0)*x14167*x14173))+((r21*x14175))+(((-1.0)*r22*x14172)));
evalcond[1]=(((r01*x14175))+(((-1.0)*r02*x14172))+(((-1.0)*gconst41*r00*x14173)));
evalcond[2]=((-1.0)+((r11*x14175))+(((-1.0)*gconst41*r10*x14173))+(((-1.0)*r12*x14172)));
evalcond[3]=(((r10*x14165))+((r11*x14177))+((r12*x14174))+((r11*x14166))+(((-1.0)*r10*x14168*x14172)));
evalcond[4]=((((-1.0)*r12*sj3*x14173))+(((-1.0)*r11*x14165*x14172))+((r10*x14162*x14166))+((r11*x14168))+((r10*x14171)));
evalcond[5]=(((r22*x14174))+((r21*x14177))+(((-1.0)*cj3*x14167*x14172))+x14176+((r21*x14166))+((r20*x14165)));
evalcond[6]=(((r01*x14177))+(((-1.0)*r00*x14168*x14172))+((r02*x14174))+((r00*x14165))+((r01*x14166))+x14170+(((-1.0)*x14169)));
evalcond[7]=(((r00*x14162*x14166))+((r00*x14171))+(((-1.0)*r01*x14165*x14172))+((r01*x14168))+x14176+(((-1.0)*r02*sj3*x14173)));
evalcond[8]=((((-1.0)*r21*x14165*x14172))+((r20*x14171))+(((-1.0)*x14170))+x14169+((r21*x14168))+((r20*x14162*x14166))+(((-1.0)*r22*sj3*x14173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14178=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14178);
rxp1_1=(px*r21);
rxp1_2=(r11*x14178);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14179=(r11*sj5);
IkReal x14180=((1.0)*cj5*r10);
j4eval[0]=(x14179+(((-1.0)*x14180)));
j4eval[1]=(((cj3*x14179))+(((-1.0)*cj3*x14180)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14181=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14181);
rxp1_1=(px*r21);
rxp1_2=(r11*x14181);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14182=(cj5*r10);
IkReal x14183=(r11*sj5);
j4eval[0]=(x14183+(((-1.0)*x14182)));
j4eval[1]=((((-1.0)*sj3*x14183))+((sj3*x14182)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14184=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14184);
rxp1_1=(px*r21);
rxp1_2=(r11*x14184);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14185=((1.0)*r10);
CheckValue<IkReal> x14186=IKPowWithIntegerCheck(cj3,-1);
if(!x14186.valid){
continue;
}
CheckValue<IkReal> x14187=IKPowWithIntegerCheck(r02,-1);
if(!x14187.valid){
continue;
}
CheckValue<IkReal> x14188=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14185))+((cj3*r11*sj5))),-1);
if(!x14188.valid){
continue;
}
if( IKabs(((x14186.value)*(x14187.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14188.value)*(((((-1.0)*sj3*sj5*x14185))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14186.value)*(x14187.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14188.value)*(((((-1.0)*sj3*sj5*x14185))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14186.value)*(x14187.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14188.value)*(((((-1.0)*sj3*sj5*x14185))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14189=IKsin(j4);
IkReal x14190=IKcos(j4);
IkReal x14191=(cj2*sj1);
IkReal x14192=(cj1*sj2);
IkReal x14193=(cj5*r10);
IkReal x14194=(sj1*sj2);
IkReal x14195=(cj5*sj3);
IkReal x14196=(r11*sj5);
IkReal x14197=(cj3*sj5);
IkReal x14198=(r21*sj5);
IkReal x14199=(cj1*cj2);
IkReal x14200=(cj3*cj5);
IkReal x14201=(sj3*sj5);
IkReal x14202=((1.0)*x14189);
IkReal x14203=(r20*x14190);
IkReal x14204=(cj3*x14190);
IkReal x14205=(sj3*x14190);
IkReal x14206=(x14191+x14192);
evalcond[0]=((-1.0)*r02*x14190);
evalcond[1]=((((-1.0)*cj5*r20*x14202))+((x14189*x14198)));
evalcond[2]=((((-1.0)*x14194))+((cj3*r02*x14189))+x14199);
evalcond[3]=((((-1.0)*r02*sj3*x14202))+x14206);
evalcond[4]=((-1.0)+(((-1.0)*x14193*x14202))+((x14189*x14196)));
evalcond[5]=(((r10*x14201))+((r11*x14195))+((x14196*x14204))+(((-1.0)*x14193*x14204)));
evalcond[6]=(((r10*x14197))+(((-1.0)*x14196*x14205))+((x14193*x14205))+((r11*x14200)));
evalcond[7]=((((-1.0)*x14200*x14203))+((r20*x14201))+((r21*x14195))+x14206+((r21*x14190*x14197)));
evalcond[8]=((((-1.0)*x14199))+(((-1.0)*x14198*x14205))+((r21*x14200))+((x14195*x14203))+x14194+((r20*x14197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14207=(cj5*r10);
IkReal x14208=((1.0)*r11);
CheckValue<IkReal> x14209=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14207))),-1);
if(!x14209.valid){
continue;
}
CheckValue<IkReal> x14210=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14208))+((sj3*x14207))),-1);
if(!x14210.valid){
continue;
}
if( IKabs(x14209.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14210.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14208)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14209.value)+IKsqr(((x14210.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14208))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14209.value, ((x14210.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14208))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14211=IKsin(j4);
IkReal x14212=IKcos(j4);
IkReal x14213=(cj2*sj1);
IkReal x14214=(cj1*sj2);
IkReal x14215=(cj5*r10);
IkReal x14216=(sj1*sj2);
IkReal x14217=(cj5*sj3);
IkReal x14218=(r11*sj5);
IkReal x14219=(cj3*sj5);
IkReal x14220=(r21*sj5);
IkReal x14221=(cj1*cj2);
IkReal x14222=(cj3*cj5);
IkReal x14223=(sj3*sj5);
IkReal x14224=((1.0)*x14211);
IkReal x14225=(r20*x14212);
IkReal x14226=(cj3*x14212);
IkReal x14227=(sj3*x14212);
IkReal x14228=(x14213+x14214);
evalcond[0]=((-1.0)*r02*x14212);
evalcond[1]=((((-1.0)*cj5*r20*x14224))+((x14211*x14220)));
evalcond[2]=(((cj3*r02*x14211))+(((-1.0)*x14216))+x14221);
evalcond[3]=((((-1.0)*r02*sj3*x14224))+x14228);
evalcond[4]=((-1.0)+(((-1.0)*x14215*x14224))+((x14211*x14218)));
evalcond[5]=(((r11*x14217))+((x14218*x14226))+((r10*x14223))+(((-1.0)*x14215*x14226)));
evalcond[6]=(((r10*x14219))+((r11*x14222))+((x14215*x14227))+(((-1.0)*x14218*x14227)));
evalcond[7]=(((r20*x14223))+(((-1.0)*x14222*x14225))+((r21*x14212*x14219))+((r21*x14217))+x14228);
evalcond[8]=(((r21*x14222))+((x14217*x14225))+(((-1.0)*x14220*x14227))+(((-1.0)*x14221))+((r20*x14219))+x14216);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14229=((1.0)*r10);
IkReal x14230=(r11*sj5);
CheckValue<IkReal> x14231=IKPowWithIntegerCheck(((((-1.0)*cj5*x14229))+x14230),-1);
if(!x14231.valid){
continue;
}
CheckValue<IkReal> x14232=IKPowWithIntegerCheck((((cj3*x14230))+(((-1.0)*cj3*cj5*x14229))),-1);
if(!x14232.valid){
continue;
}
if( IKabs(x14231.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14232.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14229)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14231.value)+IKsqr(((x14232.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14229))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14231.value, ((x14232.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14229))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14233=IKsin(j4);
IkReal x14234=IKcos(j4);
IkReal x14235=(cj2*sj1);
IkReal x14236=(cj1*sj2);
IkReal x14237=(cj5*r10);
IkReal x14238=(sj1*sj2);
IkReal x14239=(cj5*sj3);
IkReal x14240=(r11*sj5);
IkReal x14241=(cj3*sj5);
IkReal x14242=(r21*sj5);
IkReal x14243=(cj1*cj2);
IkReal x14244=(cj3*cj5);
IkReal x14245=(sj3*sj5);
IkReal x14246=((1.0)*x14233);
IkReal x14247=(r20*x14234);
IkReal x14248=(cj3*x14234);
IkReal x14249=(sj3*x14234);
IkReal x14250=(x14235+x14236);
evalcond[0]=((-1.0)*r02*x14234);
evalcond[1]=((((-1.0)*cj5*r20*x14246))+((x14233*x14242)));
evalcond[2]=((((-1.0)*x14238))+((cj3*r02*x14233))+x14243);
evalcond[3]=((((-1.0)*r02*sj3*x14246))+x14250);
evalcond[4]=((-1.0)+(((-1.0)*x14237*x14246))+((x14233*x14240)));
evalcond[5]=((((-1.0)*x14237*x14248))+((x14240*x14248))+((r10*x14245))+((r11*x14239)));
evalcond[6]=(((x14237*x14249))+((r11*x14244))+((r10*x14241))+(((-1.0)*x14240*x14249)));
evalcond[7]=((((-1.0)*x14244*x14247))+((r21*x14239))+((r21*x14234*x14241))+((r20*x14245))+x14250);
evalcond[8]=(((r21*x14244))+(((-1.0)*x14243))+(((-1.0)*x14242*x14249))+((x14239*x14247))+((r20*x14241))+x14238);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14251=cj5*cj5;
IkReal x14252=((1.0)*cj3);
IkReal x14253=(r10*r21);
IkReal x14254=(cj5*sj5);
IkReal x14255=(r11*r21);
IkReal x14256=(r11*r20);
IkReal x14257=(r22*sj3);
IkReal x14258=(r10*r20);
IkReal x14259=((1.0)*sj3*x14251);
CheckValue<IkReal> x14260=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14252*x14255))+((cj3*x14254*x14256))+((cj3*x14251*x14255))+((cj3*x14253*x14254))+(((-1.0)*r12*r22*x14252))+(((-1.0)*x14251*x14252*x14258)))),-1);
if(!x14260.valid){
continue;
}
CheckValue<IkReal> x14261 = IKatan2WithCheck(IkReal((((r10*sj5*x14257))+((cj5*r11*x14257)))),IkReal(((((-1.0)*x14253*x14259))+((sj3*x14254*x14255))+((sj3*x14253))+(((-1.0)*sj3*x14254*x14258))+(((-1.0)*x14256*x14259)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14260.value)))+(x14261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14262=IKsin(j4);
IkReal x14263=IKcos(j4);
IkReal x14264=(cj2*sj1);
IkReal x14265=(cj1*sj2);
IkReal x14266=(cj5*sj3);
IkReal x14267=(cj5*r10);
IkReal x14268=(r00*sj5);
IkReal x14269=(sj1*sj2);
IkReal x14270=(r11*sj5);
IkReal x14271=(cj3*cj5);
IkReal x14272=(cj3*sj5);
IkReal x14273=(r21*sj5);
IkReal x14274=(cj1*cj2);
IkReal x14275=(sj3*sj5);
IkReal x14276=(r01*sj5);
IkReal x14277=((1.0)*x14263);
IkReal x14278=((1.0)*x14262);
IkReal x14279=(cj3*x14262);
IkReal x14280=(cj3*x14263);
IkReal x14281=(x14264+x14265);
evalcond[0]=((((-1.0)*r22*x14277))+(((-1.0)*cj5*r20*x14278))+((x14262*x14273)));
evalcond[1]=((((-1.0)*r02*x14277))+((x14262*x14276))+(((-1.0)*cj5*r00*x14278)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14277))+((x14262*x14270))+(((-1.0)*x14267*x14278)));
evalcond[3]=((((-1.0)*cj3*x14267*x14277))+((r11*x14266))+((r12*x14279))+((r10*x14275))+((x14270*x14280)));
evalcond[4]=((((-1.0)*sj3*x14270*x14277))+(((-1.0)*r12*sj3*x14278))+((r11*x14271))+((r10*x14263*x14266))+((r10*x14272)));
evalcond[5]=((((-1.0)*r20*x14271*x14277))+((r21*x14266))+((r20*x14275))+((r21*x14263*x14272))+((r22*x14279))+x14281);
evalcond[6]=(((sj3*x14268))+(((-1.0)*r00*x14271*x14277))+(((-1.0)*x14269))+((r02*x14279))+((r01*x14263*x14272))+x14274+((r01*x14266)));
evalcond[7]=(((r01*x14271))+((cj3*x14268))+(((-1.0)*r02*sj3*x14278))+((r00*x14263*x14266))+(((-1.0)*r01*x14275*x14277))+x14281);
evalcond[8]=((((-1.0)*x14274))+(((-1.0)*r22*sj3*x14278))+((r21*x14271))+((r20*x14272))+(((-1.0)*sj3*x14273*x14277))+x14269+((r20*x14263*x14266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14282=((1.0)*cj5);
CheckValue<IkReal> x14283 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14283.valid){
continue;
}
CheckValue<IkReal> x14284=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14282))+(((-1.0)*r20*sj5)))),-1);
if(!x14284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14283.value)+(((1.5707963267949)*(x14284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14285=IKsin(j4);
IkReal x14286=IKcos(j4);
IkReal x14287=(cj2*sj1);
IkReal x14288=(cj1*sj2);
IkReal x14289=(cj5*sj3);
IkReal x14290=(cj5*r10);
IkReal x14291=(r00*sj5);
IkReal x14292=(sj1*sj2);
IkReal x14293=(r11*sj5);
IkReal x14294=(cj3*cj5);
IkReal x14295=(cj3*sj5);
IkReal x14296=(r21*sj5);
IkReal x14297=(cj1*cj2);
IkReal x14298=(sj3*sj5);
IkReal x14299=(r01*sj5);
IkReal x14300=((1.0)*x14286);
IkReal x14301=((1.0)*x14285);
IkReal x14302=(cj3*x14285);
IkReal x14303=(cj3*x14286);
IkReal x14304=(x14287+x14288);
evalcond[0]=((((-1.0)*r22*x14300))+(((-1.0)*cj5*r20*x14301))+((x14285*x14296)));
evalcond[1]=((((-1.0)*cj5*r00*x14301))+(((-1.0)*r02*x14300))+((x14285*x14299)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14300))+(((-1.0)*x14290*x14301))+((x14285*x14293)));
evalcond[3]=(((x14293*x14303))+((r10*x14298))+((r12*x14302))+((r11*x14289))+(((-1.0)*cj3*x14290*x14300)));
evalcond[4]=(((r10*x14286*x14289))+((r10*x14295))+((r11*x14294))+(((-1.0)*sj3*x14293*x14300))+(((-1.0)*r12*sj3*x14301)));
evalcond[5]=(((r20*x14298))+((r21*x14289))+(((-1.0)*r20*x14294*x14300))+((r21*x14286*x14295))+((r22*x14302))+x14304);
evalcond[6]=(((r02*x14302))+(((-1.0)*r00*x14294*x14300))+((r01*x14286*x14295))+((r01*x14289))+((sj3*x14291))+(((-1.0)*x14292))+x14297);
evalcond[7]=(((cj3*x14291))+(((-1.0)*r02*sj3*x14301))+((r01*x14294))+((r00*x14286*x14289))+(((-1.0)*r01*x14298*x14300))+x14304);
evalcond[8]=(((r20*x14295))+(((-1.0)*sj3*x14296*x14300))+(((-1.0)*r22*sj3*x14301))+((r21*x14294))+((r20*x14286*x14289))+(((-1.0)*x14297))+x14292);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14305 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14305.valid){
continue;
}
CheckValue<IkReal> x14306=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14305.value)+(((1.5707963267949)*(x14306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14307=IKsin(j4);
IkReal x14308=IKcos(j4);
IkReal x14309=(cj2*sj1);
IkReal x14310=(cj1*sj2);
IkReal x14311=(cj5*sj3);
IkReal x14312=(cj5*r10);
IkReal x14313=(r00*sj5);
IkReal x14314=(sj1*sj2);
IkReal x14315=(r11*sj5);
IkReal x14316=(cj3*cj5);
IkReal x14317=(cj3*sj5);
IkReal x14318=(r21*sj5);
IkReal x14319=(cj1*cj2);
IkReal x14320=(sj3*sj5);
IkReal x14321=(r01*sj5);
IkReal x14322=((1.0)*x14308);
IkReal x14323=((1.0)*x14307);
IkReal x14324=(cj3*x14307);
IkReal x14325=(cj3*x14308);
IkReal x14326=(x14309+x14310);
evalcond[0]=(((x14307*x14318))+(((-1.0)*cj5*r20*x14323))+(((-1.0)*r22*x14322)));
evalcond[1]=((((-1.0)*cj5*r00*x14323))+((x14307*x14321))+(((-1.0)*r02*x14322)));
evalcond[2]=((-1.0)+((x14307*x14315))+(((-1.0)*x14312*x14323))+(((-1.0)*r12*x14322)));
evalcond[3]=(((r11*x14311))+((x14315*x14325))+((r10*x14320))+(((-1.0)*cj3*x14312*x14322))+((r12*x14324)));
evalcond[4]=(((r11*x14316))+((r10*x14308*x14311))+(((-1.0)*sj3*x14315*x14322))+(((-1.0)*r12*sj3*x14323))+((r10*x14317)));
evalcond[5]=(((r21*x14308*x14317))+((r20*x14320))+((r21*x14311))+(((-1.0)*r20*x14316*x14322))+x14326+((r22*x14324)));
evalcond[6]=(((sj3*x14313))+((r02*x14324))+(((-1.0)*x14314))+(((-1.0)*r00*x14316*x14322))+((r01*x14311))+((r01*x14308*x14317))+x14319);
evalcond[7]=(((cj3*x14313))+(((-1.0)*r01*x14320*x14322))+(((-1.0)*r02*sj3*x14323))+((r00*x14308*x14311))+((r01*x14316))+x14326);
evalcond[8]=((((-1.0)*r22*sj3*x14323))+(((-1.0)*x14319))+((r20*x14317))+(((-1.0)*sj3*x14318*x14322))+((r21*x14316))+((r20*x14308*x14311))+x14314);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14327=((-1.0)*r00);
IkReal x14329 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14329)==0){
continue;
}
IkReal x14328=pow(x14329,-0.5);
CheckValue<IkReal> x14330 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14327),IKFAST_ATAN2_MAGTHRESH);
if(!x14330.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14330.value));
IkReal gconst13=(r01*x14328);
IkReal gconst14=(x14327*x14328);
CheckValue<IkReal> x14331 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14331.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14331.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14332=((-1.0)*r00);
IkReal x14333=x14328;
CheckValue<IkReal> x14335 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14332),IKFAST_ATAN2_MAGTHRESH);
if(!x14335.valid){
continue;
}
IkReal x14334=((-1.0)*(x14335.value));
sj5=gconst13;
cj5=gconst14;
j5=x14334;
IkReal gconst12=x14334;
IkReal gconst13=(r01*x14333);
IkReal gconst14=(x14332*x14333);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14336=((1.0)*sj0);
IkReal x14337=((1.0)*cj0);
CheckValue<IkReal> x14338 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14337))+(((-1.0)*r12*x14336)))),IkReal(((((-1.0)*gconst13*r11*x14336))+((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x14337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14338.valid){
continue;
}
CheckValue<IkReal> x14339=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14338.value)+(((1.5707963267949)*(x14339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14340=IKsin(j4);
IkReal x14341=IKcos(j4);
IkReal x14342=((1.0)*r22);
IkReal x14343=((1.0)*r12);
IkReal x14344=(gconst13*sj3);
IkReal x14345=(gconst13*r01);
IkReal x14346=(sj1*sj2);
IkReal x14347=(gconst14*sj3);
IkReal x14348=(cj2*sj1);
IkReal x14349=((1.0)*sj0);
IkReal x14350=(cj3*gconst13);
IkReal x14351=(cj3*gconst14);
IkReal x14352=((1.0)*cj0);
IkReal x14353=((1.0)*gconst14);
IkReal x14354=(cj1*sj2);
IkReal x14355=(sj3*x14340);
IkReal x14356=((1.0)*cj1*cj2);
IkReal x14357=(cj3*x14341);
IkReal x14358=(cj3*x14340);
IkReal x14359=(gconst13*x14340);
IkReal x14360=((1.0)*x14341);
IkReal x14361=(x14340*x14353);
evalcond[0]=((((-1.0)*x14341*x14342))+(((-1.0)*r20*x14361))+((r21*x14359)));
evalcond[1]=(cj0+((r11*x14359))+(((-1.0)*r10*x14361))+(((-1.0)*x14341*x14343)));
evalcond[2]=((((-1.0)*r00*x14361))+(((-1.0)*r02*x14360))+((x14340*x14345))+(((-1.0)*x14349)));
evalcond[3]=((((-1.0)*r20*x14351*x14360))+((r21*x14347))+((r21*x14341*x14350))+((r20*x14344))+((r22*x14358))+x14348+x14354);
evalcond[4]=((((-1.0)*x14356))+((r20*x14350))+((r20*x14341*x14347))+(((-1.0)*r21*x14344*x14360))+(((-1.0)*x14342*x14355))+((r21*x14351))+x14346);
evalcond[5]=((((-1.0)*r00*x14351*x14360))+((cj0*x14346))+((r00*x14344))+((r02*x14358))+(((-1.0)*cj1*cj2*x14352))+((r01*x14347))+((x14345*x14357)));
evalcond[6]=((((-1.0)*cj1*cj2*x14349))+((sj0*x14346))+(((-1.0)*r10*x14351*x14360))+((r12*x14358))+((r11*x14347))+((r10*x14344))+((r11*x14341*x14350)));
evalcond[7]=((((-1.0)*r02*x14355))+(((-1.0)*x14348*x14352))+(((-1.0)*r01*x14344*x14360))+((r00*x14350))+((r01*x14351))+(((-1.0)*x14352*x14354))+((r00*x14341*x14347)));
evalcond[8]=(((r10*x14341*x14347))+(((-1.0)*x14348*x14349))+((r11*x14351))+(((-1.0)*r11*x14344*x14360))+(((-1.0)*x14343*x14355))+((r10*x14350))+(((-1.0)*x14349*x14354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14362=((1.0)*gconst14);
CheckValue<IkReal> x14363 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst13*r21*sj0))+(((-1.0)*r20*sj0*x14362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14363.valid){
continue;
}
CheckValue<IkReal> x14364=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14362)))),-1);
if(!x14364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14363.value)+(((1.5707963267949)*(x14364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14365=IKsin(j4);
IkReal x14366=IKcos(j4);
IkReal x14367=((1.0)*r22);
IkReal x14368=((1.0)*r12);
IkReal x14369=(gconst13*sj3);
IkReal x14370=(gconst13*r01);
IkReal x14371=(sj1*sj2);
IkReal x14372=(gconst14*sj3);
IkReal x14373=(cj2*sj1);
IkReal x14374=((1.0)*sj0);
IkReal x14375=(cj3*gconst13);
IkReal x14376=(cj3*gconst14);
IkReal x14377=((1.0)*cj0);
IkReal x14378=((1.0)*gconst14);
IkReal x14379=(cj1*sj2);
IkReal x14380=(sj3*x14365);
IkReal x14381=((1.0)*cj1*cj2);
IkReal x14382=(cj3*x14366);
IkReal x14383=(cj3*x14365);
IkReal x14384=(gconst13*x14365);
IkReal x14385=((1.0)*x14366);
IkReal x14386=(x14365*x14378);
evalcond[0]=(((r21*x14384))+(((-1.0)*r20*x14386))+(((-1.0)*x14366*x14367)));
evalcond[1]=(cj0+((r11*x14384))+(((-1.0)*x14366*x14368))+(((-1.0)*r10*x14386)));
evalcond[2]=(((x14365*x14370))+(((-1.0)*r00*x14386))+(((-1.0)*x14374))+(((-1.0)*r02*x14385)));
evalcond[3]=(((r21*x14372))+((r22*x14383))+((r20*x14369))+(((-1.0)*r20*x14376*x14385))+((r21*x14366*x14375))+x14379+x14373);
evalcond[4]=(((r21*x14376))+(((-1.0)*x14367*x14380))+(((-1.0)*x14381))+(((-1.0)*r21*x14369*x14385))+((r20*x14366*x14372))+((r20*x14375))+x14371);
evalcond[5]=(((r01*x14372))+(((-1.0)*r00*x14376*x14385))+((x14370*x14382))+((r02*x14383))+(((-1.0)*cj1*cj2*x14377))+((r00*x14369))+((cj0*x14371)));
evalcond[6]=(((r10*x14369))+((r11*x14366*x14375))+(((-1.0)*r10*x14376*x14385))+((r12*x14383))+((r11*x14372))+(((-1.0)*cj1*cj2*x14374))+((sj0*x14371)));
evalcond[7]=(((r01*x14376))+((r00*x14375))+(((-1.0)*x14377*x14379))+((r00*x14366*x14372))+(((-1.0)*x14373*x14377))+(((-1.0)*r02*x14380))+(((-1.0)*r01*x14369*x14385)));
evalcond[8]=((((-1.0)*x14374*x14379))+((r10*x14375))+((r10*x14366*x14372))+(((-1.0)*x14373*x14374))+(((-1.0)*x14368*x14380))+((r11*x14376))+(((-1.0)*r11*x14369*x14385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14387=((-1.0)*r01);
IkReal x14389 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14389)==0){
continue;
}
IkReal x14388=pow(x14389,-0.5);
CheckValue<IkReal> x14390 = IKatan2WithCheck(IkReal(x14387),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14390.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14390.value))));
IkReal gconst16=(x14387*x14388);
IkReal gconst17=((1.0)*r00*x14388);
CheckValue<IkReal> x14391 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14391.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14391.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14392=((-1.0)*r01);
CheckValue<IkReal> x14395 = IKatan2WithCheck(IkReal(x14392),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14395.valid){
continue;
}
IkReal x14393=((1.0)*(x14395.value));
IkReal x14394=x14388;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14393)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14393)));
IkReal gconst16=(x14392*x14394);
IkReal gconst17=((1.0)*r00*x14394);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14396=((-1.0)*r01);
CheckValue<IkReal> x14399 = IKatan2WithCheck(IkReal(x14396),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14399.valid){
continue;
}
IkReal x14397=((1.0)*(x14399.value));
IkReal x14398=x14388;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14397)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14397)));
IkReal gconst16=(x14396*x14398);
IkReal gconst17=((1.0)*r00*x14398);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14400=((-1.0)*r01);
CheckValue<IkReal> x14403 = IKatan2WithCheck(IkReal(x14400),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14403.valid){
continue;
}
IkReal x14401=((1.0)*(x14403.value));
IkReal x14402=x14388;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14401)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14401)));
IkReal gconst16=(x14400*x14402);
IkReal gconst17=((1.0)*r00*x14402);
IkReal x14404=r02*r02;
IkReal x14405=(r12*sj0);
IkReal x14406=((1.0)*cj0);
IkReal x14407=x14388;
j4eval[0]=((IKabs((((r02*x14405*x14407))+(((-1.0)*x14406*x14407))+((cj0*x14404*x14407)))))+(IKabs(((((-1.0)*x14405))+(((-1.0)*r02*x14406))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14408=((-1.0)*r01);
CheckValue<IkReal> x14411 = IKatan2WithCheck(IkReal(x14408),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14411.valid){
continue;
}
IkReal x14409=((1.0)*(x14411.value));
IkReal x14410=x14388;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14409)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14409)));
IkReal gconst16=(x14408*x14410);
IkReal gconst17=((1.0)*r00*x14410);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14412=((-1.0)*r01);
CheckValue<IkReal> x14415 = IKatan2WithCheck(IkReal(x14412),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14415.valid){
continue;
}
IkReal x14413=((1.0)*(x14415.value));
IkReal x14414=x14388;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14413)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14413)));
IkReal gconst16=(x14412*x14414);
IkReal gconst17=((1.0)*r00*x14414);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14416=gconst16*gconst16;
IkReal x14417=gconst17*gconst17;
IkReal x14418=(r11*sj3);
IkReal x14419=(cj3*r10);
IkReal x14420=((1.0)*cj3);
IkReal x14421=(r10*sj3);
IkReal x14422=(gconst16*gconst17);
IkReal x14423=(r21*x14416);
IkReal x14424=((1.0)*r20*x14417);
CheckValue<IkReal> x14425=IKPowWithIntegerCheck(IKsign((((cj3*r11*r20*x14422))+(((-1.0)*x14419*x14424))+((r21*x14419*x14422))+(((-1.0)*r11*x14420*x14423))+(((-1.0)*r12*r22*x14420)))),-1);
if(!x14425.valid){
continue;
}
CheckValue<IkReal> x14426 = IKatan2WithCheck(IkReal((((gconst17*r22*x14418))+((gconst16*r22*x14421)))),IkReal(((((-1.0)*x14418*x14424))+((r21*x14418*x14422))+((x14421*x14423))+(((-1.0)*r20*x14421*x14422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14425.value)))+(x14426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14427=IKsin(j4);
IkReal x14428=IKcos(j4);
IkReal x14429=(cj2*sj1);
IkReal x14430=(cj1*sj2);
IkReal x14431=(gconst16*r21);
IkReal x14432=(cj3*gconst17);
IkReal x14433=(gconst16*r20);
IkReal x14434=(sj1*sj2);
IkReal x14435=(gconst17*r20);
IkReal x14436=(gconst17*sj3);
IkReal x14437=(gconst16*r10);
IkReal x14438=(cj1*cj2);
IkReal x14439=(gconst16*sj3);
IkReal x14440=((1.0)*x14428);
IkReal x14441=((1.0)*x14427);
IkReal x14442=(gconst16*x14427);
IkReal x14443=(cj3*x14428);
IkReal x14444=(cj3*x14427);
IkReal x14445=(x14430+x14429);
evalcond[0]=((((-1.0)*r22*x14440))+((x14427*x14431))+(((-1.0)*x14435*x14441)));
evalcond[1]=(((r01*x14442))+(((-1.0)*gconst17*r00*x14441))+(((-1.0)*r02*x14440)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14440))+((r11*x14442))+(((-1.0)*gconst17*r10*x14441)));
evalcond[3]=((((-1.0)*r10*x14432*x14440))+((r11*x14436))+((r12*x14444))+((gconst16*r11*x14443))+((sj3*x14437)));
evalcond[4]=(((r11*x14432))+(((-1.0)*r12*sj3*x14441))+((cj3*x14437))+(((-1.0)*r11*x14439*x14440))+((r10*x14428*x14436)));
evalcond[5]=(((x14431*x14443))+((r21*x14436))+((sj3*x14433))+x14445+(((-1.0)*r20*x14432*x14440))+((r22*x14444)));
evalcond[6]=(((r00*x14439))+((gconst16*r01*x14443))+(((-1.0)*r00*x14432*x14440))+((r01*x14436))+x14438+(((-1.0)*x14434))+((r02*x14444)));
evalcond[7]=(((r00*x14428*x14436))+((r01*x14432))+x14445+(((-1.0)*r01*x14439*x14440))+((cj3*gconst16*r00))+(((-1.0)*r02*sj3*x14441)));
evalcond[8]=(((r21*x14432))+(((-1.0)*r22*sj3*x14441))+x14434+(((-1.0)*sj3*x14431*x14440))+((cj3*x14433))+(((-1.0)*x14438))+((sj3*x14428*x14435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14446=((1.0)*gconst17);
CheckValue<IkReal> x14447=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14446)))),-1);
if(!x14447.valid){
continue;
}
CheckValue<IkReal> x14448 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst16*r01))+(((-1.0)*r00*x14446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14447.value)))+(x14448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14449=IKsin(j4);
IkReal x14450=IKcos(j4);
IkReal x14451=(cj2*sj1);
IkReal x14452=(cj1*sj2);
IkReal x14453=(gconst16*r21);
IkReal x14454=(cj3*gconst17);
IkReal x14455=(gconst16*r20);
IkReal x14456=(sj1*sj2);
IkReal x14457=(gconst17*r20);
IkReal x14458=(gconst17*sj3);
IkReal x14459=(gconst16*r10);
IkReal x14460=(cj1*cj2);
IkReal x14461=(gconst16*sj3);
IkReal x14462=((1.0)*x14450);
IkReal x14463=((1.0)*x14449);
IkReal x14464=(gconst16*x14449);
IkReal x14465=(cj3*x14450);
IkReal x14466=(cj3*x14449);
IkReal x14467=(x14451+x14452);
evalcond[0]=((((-1.0)*x14457*x14463))+(((-1.0)*r22*x14462))+((x14449*x14453)));
evalcond[1]=((((-1.0)*gconst17*r00*x14463))+((r01*x14464))+(((-1.0)*r02*x14462)));
evalcond[2]=((-1.0)+((r11*x14464))+(((-1.0)*r12*x14462))+(((-1.0)*gconst17*r10*x14463)));
evalcond[3]=(((gconst16*r11*x14465))+((r11*x14458))+((r12*x14466))+((sj3*x14459))+(((-1.0)*r10*x14454*x14462)));
evalcond[4]=(((r10*x14450*x14458))+((r11*x14454))+(((-1.0)*r12*sj3*x14463))+((cj3*x14459))+(((-1.0)*r11*x14461*x14462)));
evalcond[5]=(((r22*x14466))+x14467+((sj3*x14455))+(((-1.0)*r20*x14454*x14462))+((x14453*x14465))+((r21*x14458)));
evalcond[6]=(((r00*x14461))+((r01*x14458))+((r02*x14466))+(((-1.0)*x14456))+x14460+((gconst16*r01*x14465))+(((-1.0)*r00*x14454*x14462)));
evalcond[7]=(((r00*x14450*x14458))+((r01*x14454))+(((-1.0)*r02*sj3*x14463))+x14467+(((-1.0)*r01*x14461*x14462))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*sj3*x14453*x14462))+(((-1.0)*r22*sj3*x14463))+((sj3*x14450*x14457))+(((-1.0)*x14460))+x14456+((cj3*x14455))+((r21*x14454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14468=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14468.valid){
continue;
}
CheckValue<IkReal> x14469 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14468.value)))+(x14469.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14470=IKsin(j4);
IkReal x14471=IKcos(j4);
IkReal x14472=(cj2*sj1);
IkReal x14473=(cj1*sj2);
IkReal x14474=(gconst16*r21);
IkReal x14475=(cj3*gconst17);
IkReal x14476=(gconst16*r20);
IkReal x14477=(sj1*sj2);
IkReal x14478=(gconst17*r20);
IkReal x14479=(gconst17*sj3);
IkReal x14480=(gconst16*r10);
IkReal x14481=(cj1*cj2);
IkReal x14482=(gconst16*sj3);
IkReal x14483=((1.0)*x14471);
IkReal x14484=((1.0)*x14470);
IkReal x14485=(gconst16*x14470);
IkReal x14486=(cj3*x14471);
IkReal x14487=(cj3*x14470);
IkReal x14488=(x14473+x14472);
evalcond[0]=((((-1.0)*r22*x14483))+(((-1.0)*x14478*x14484))+((x14470*x14474)));
evalcond[1]=((((-1.0)*gconst17*r00*x14484))+(((-1.0)*r02*x14483))+((r01*x14485)));
evalcond[2]=((-1.0)+((r11*x14485))+(((-1.0)*gconst17*r10*x14484))+(((-1.0)*r12*x14483)));
evalcond[3]=((((-1.0)*r10*x14475*x14483))+((r12*x14487))+((r11*x14479))+((gconst16*r11*x14486))+((sj3*x14480)));
evalcond[4]=(((cj3*x14480))+((r11*x14475))+((r10*x14471*x14479))+(((-1.0)*r12*sj3*x14484))+(((-1.0)*r11*x14482*x14483)));
evalcond[5]=(((sj3*x14476))+((r21*x14479))+((r22*x14487))+((x14474*x14486))+x14488+(((-1.0)*r20*x14475*x14483)));
evalcond[6]=(((r02*x14487))+((r01*x14479))+(((-1.0)*x14477))+(((-1.0)*r00*x14475*x14483))+x14481+((r00*x14482))+((gconst16*r01*x14486)));
evalcond[7]=((((-1.0)*r02*sj3*x14484))+((r01*x14475))+x14488+((r00*x14471*x14479))+((cj3*gconst16*r00))+(((-1.0)*r01*x14482*x14483)));
evalcond[8]=((((-1.0)*sj3*x14474*x14483))+(((-1.0)*x14481))+((r21*x14475))+(((-1.0)*r22*sj3*x14484))+((sj3*x14471*x14478))+x14477+((cj3*x14476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14489=((-1.0)*r01);
CheckValue<IkReal> x14492 = IKatan2WithCheck(IkReal(x14489),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14492.valid){
continue;
}
IkReal x14490=((1.0)*(x14492.value));
IkReal x14491=x14388;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14490)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14490)));
IkReal gconst16=(x14489*x14491);
IkReal gconst17=((1.0)*r00*x14491);
IkReal x14493=r02*r02;
IkReal x14494=(r12*sj0);
IkReal x14495=((1.0)*cj0);
IkReal x14496=x14388;
j4eval[0]=((IKabs((((cj0*x14493*x14496))+((r02*x14494*x14496))+(((-1.0)*x14495*x14496)))))+(IKabs(((((-1.0)*x14494))+(((-1.0)*r02*x14495))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14497=((1.0)*r12);
IkReal x14498=(sj1*sj2);
IkReal x14499=(cj1*cj2);
IkReal x14500=((1.0)*sj3);
IkReal x14501=(gconst16*r21);
IkReal x14502=(cj3*gconst16*r20);
IkReal x14503=(gconst17*r20*sj3);
IkReal x14504=(cj3*gconst17*r21);
CheckValue<IkReal> x14505=IKPowWithIntegerCheck((((gconst17*r10*sj3*x14501))+(((-1.0)*r10*r20*x14500*(gconst17*gconst17)))+((gconst16*r11*x14503))+(((-1.0)*gconst16*r11*x14500*x14501))),-1);
if(!x14505.valid){
continue;
}
CheckValue<IkReal> x14506=IKPowWithIntegerCheck(((((-1.0)*x14500*x14501))+x14503),-1);
if(!x14506.valid){
continue;
}
if( IKabs(((x14505.value)*((((r12*x14499))+(((-1.0)*x14497*x14502))+(((-1.0)*x14497*x14504))+(((-1.0)*cj0*gconst17*r20*x14500))+(((-1.0)*x14497*x14498))+((cj0*sj3*x14501)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14506.value)*(((((-1.0)*x14498))+(((-1.0)*x14502))+(((-1.0)*x14504))+x14499)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14505.value)*((((r12*x14499))+(((-1.0)*x14497*x14502))+(((-1.0)*x14497*x14504))+(((-1.0)*cj0*gconst17*r20*x14500))+(((-1.0)*x14497*x14498))+((cj0*sj3*x14501))))))+IKsqr(((x14506.value)*(((((-1.0)*x14498))+(((-1.0)*x14502))+(((-1.0)*x14504))+x14499))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14505.value)*((((r12*x14499))+(((-1.0)*x14497*x14502))+(((-1.0)*x14497*x14504))+(((-1.0)*cj0*gconst17*r20*x14500))+(((-1.0)*x14497*x14498))+((cj0*sj3*x14501))))), ((x14506.value)*(((((-1.0)*x14498))+(((-1.0)*x14502))+(((-1.0)*x14504))+x14499))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14507=IKsin(j4);
IkReal x14508=IKcos(j4);
IkReal x14509=((1.0)*gconst17);
IkReal x14510=(gconst17*sj3);
IkReal x14511=(gconst16*r21);
IkReal x14512=(cj3*gconst17);
IkReal x14513=(sj1*sj2);
IkReal x14514=((1.0)*sj0);
IkReal x14515=(gconst16*sj3);
IkReal x14516=(cj3*gconst16);
IkReal x14517=(cj2*sj1);
IkReal x14518=((1.0)*cj0);
IkReal x14519=((1.0)*sj3);
IkReal x14520=(cj1*sj2);
IkReal x14521=(cj3*x14508);
IkReal x14522=(gconst16*x14507);
IkReal x14523=((1.0)*x14508);
IkReal x14524=((1.0)*cj1*cj2);
IkReal x14525=(r02*x14507);
IkReal x14526=(r12*x14507);
evalcond[0]=((((-1.0)*r20*x14507*x14509))+((x14507*x14511)));
evalcond[1]=(cj0+((r11*x14522))+(((-1.0)*r12*x14523))+(((-1.0)*r10*x14507*x14509)));
evalcond[2]=(((r01*x14522))+(((-1.0)*r02*x14523))+(((-1.0)*x14514))+(((-1.0)*r00*x14507*x14509)));
evalcond[3]=(((r20*x14515))+x14517+x14520+((x14511*x14521))+(((-1.0)*r20*x14509*x14521))+((r21*x14510)));
evalcond[4]=(((r20*x14516))+((r20*x14508*x14510))+(((-1.0)*x14508*x14511*x14519))+(((-1.0)*x14524))+x14513+((r21*x14512)));
evalcond[5]=(((r00*x14515))+((r01*x14510))+((cj0*x14513))+((cj3*x14525))+(((-1.0)*cj1*cj2*x14518))+(((-1.0)*r00*x14509*x14521))+((r01*x14508*x14516)));
evalcond[6]=(((r11*x14510))+((cj3*x14526))+(((-1.0)*cj1*cj2*x14514))+((sj0*x14513))+(((-1.0)*r10*x14509*x14521))+((r10*x14515))+((r11*x14508*x14516)));
evalcond[7]=((((-1.0)*x14517*x14518))+((r00*x14516))+((r01*x14512))+(((-1.0)*x14518*x14520))+((r00*x14508*x14510))+(((-1.0)*r01*x14515*x14523))+(((-1.0)*x14519*x14525)));
evalcond[8]=(((r10*x14508*x14510))+(((-1.0)*x14514*x14520))+((r11*x14512))+(((-1.0)*x14519*x14526))+(((-1.0)*x14514*x14517))+(((-1.0)*r11*x14515*x14523))+((r10*x14516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14527=((1.0)*sj0);
IkReal x14528=((1.0)*cj0);
CheckValue<IkReal> x14529=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14529.valid){
continue;
}
CheckValue<IkReal> x14530 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14528))+(((-1.0)*r12*x14527)))),IkReal(((((-1.0)*gconst16*r11*x14527))+(((-1.0)*gconst16*r01*x14528))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14529.value)))+(x14530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14531=IKsin(j4);
IkReal x14532=IKcos(j4);
IkReal x14533=((1.0)*gconst17);
IkReal x14534=(gconst17*sj3);
IkReal x14535=(gconst16*r21);
IkReal x14536=(cj3*gconst17);
IkReal x14537=(sj1*sj2);
IkReal x14538=((1.0)*sj0);
IkReal x14539=(gconst16*sj3);
IkReal x14540=(cj3*gconst16);
IkReal x14541=(cj2*sj1);
IkReal x14542=((1.0)*cj0);
IkReal x14543=((1.0)*sj3);
IkReal x14544=(cj1*sj2);
IkReal x14545=(cj3*x14532);
IkReal x14546=(gconst16*x14531);
IkReal x14547=((1.0)*x14532);
IkReal x14548=((1.0)*cj1*cj2);
IkReal x14549=(r02*x14531);
IkReal x14550=(r12*x14531);
evalcond[0]=((((-1.0)*r20*x14531*x14533))+((x14531*x14535)));
evalcond[1]=((((-1.0)*r10*x14531*x14533))+cj0+((r11*x14546))+(((-1.0)*r12*x14547)));
evalcond[2]=((((-1.0)*x14538))+((r01*x14546))+(((-1.0)*r00*x14531*x14533))+(((-1.0)*r02*x14547)));
evalcond[3]=(((r21*x14534))+x14541+x14544+((x14535*x14545))+(((-1.0)*r20*x14533*x14545))+((r20*x14539)));
evalcond[4]=((((-1.0)*x14532*x14535*x14543))+((r21*x14536))+x14537+((r20*x14540))+(((-1.0)*x14548))+((r20*x14532*x14534)));
evalcond[5]=(((r00*x14539))+((cj3*x14549))+((r01*x14534))+((cj0*x14537))+(((-1.0)*cj1*cj2*x14542))+(((-1.0)*r00*x14533*x14545))+((r01*x14532*x14540)));
evalcond[6]=((((-1.0)*r10*x14533*x14545))+((r11*x14532*x14540))+((sj0*x14537))+((r11*x14534))+(((-1.0)*cj1*cj2*x14538))+((cj3*x14550))+((r10*x14539)));
evalcond[7]=((((-1.0)*r01*x14539*x14547))+((r00*x14540))+((r01*x14536))+(((-1.0)*x14542*x14544))+(((-1.0)*x14543*x14549))+(((-1.0)*x14541*x14542))+((r00*x14532*x14534)));
evalcond[8]=(((r10*x14540))+((r11*x14536))+(((-1.0)*r11*x14539*x14547))+(((-1.0)*x14538*x14541))+(((-1.0)*x14538*x14544))+((r10*x14532*x14534))+(((-1.0)*x14543*x14550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14551=((1.0)*sj0);
IkReal x14552=((1.0)*cj0);
CheckValue<IkReal> x14553=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14553.valid){
continue;
}
CheckValue<IkReal> x14554 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14552))+(((-1.0)*r12*x14551)))),IkReal((((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14551))+(((-1.0)*gconst16*r01*x14552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14553.value)))+(x14554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14555=IKsin(j4);
IkReal x14556=IKcos(j4);
IkReal x14557=(cj3*gconst17);
IkReal x14558=(gconst16*r21);
IkReal x14559=(gconst17*sj3);
IkReal x14560=(gconst16*r20);
IkReal x14561=(sj1*sj2);
IkReal x14562=(gconst16*r10);
IkReal x14563=(cj2*sj1);
IkReal x14564=(gconst16*sj3);
IkReal x14565=((1.0)*cj0);
IkReal x14566=((1.0)*sj0);
IkReal x14567=(cj1*sj2);
IkReal x14568=((1.0)*x14556);
IkReal x14569=(gconst16*x14555);
IkReal x14570=(cj3*x14556);
IkReal x14571=(cj3*x14555);
IkReal x14572=((1.0)*cj1*cj2);
IkReal x14573=((1.0)*gconst17*x14555);
IkReal x14574=((1.0)*sj3*x14555);
evalcond[0]=((((-1.0)*r22*x14568))+((x14555*x14558))+(((-1.0)*r20*x14573)));
evalcond[1]=(cj0+(((-1.0)*r12*x14568))+((r11*x14569))+(((-1.0)*r10*x14573)));
evalcond[2]=(((r01*x14569))+(((-1.0)*r02*x14568))+(((-1.0)*x14566))+(((-1.0)*r00*x14573)));
evalcond[3]=((((-1.0)*r20*x14557*x14568))+x14567+x14563+((x14558*x14570))+((r22*x14571))+((sj3*x14560))+((r21*x14559)));
evalcond[4]=((((-1.0)*r22*x14574))+(((-1.0)*x14572))+x14561+((cj3*x14560))+((r20*x14556*x14559))+((r21*x14557))+(((-1.0)*sj3*x14558*x14568)));
evalcond[5]=(((cj0*x14561))+(((-1.0)*r00*x14557*x14568))+((r02*x14571))+(((-1.0)*cj1*cj2*x14565))+((r01*x14559))+((r00*x14564))+((gconst16*r01*x14570)));
evalcond[6]=((((-1.0)*cj1*cj2*x14566))+(((-1.0)*r10*x14557*x14568))+((r12*x14571))+((gconst16*r11*x14570))+((sj0*x14561))+((r11*x14559))+((sj3*x14562)));
evalcond[7]=((((-1.0)*x14563*x14565))+((r00*x14556*x14559))+(((-1.0)*r02*x14574))+(((-1.0)*x14565*x14567))+(((-1.0)*r01*x14564*x14568))+((r01*x14557))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14563*x14566))+(((-1.0)*r12*x14574))+(((-1.0)*r11*x14564*x14568))+((cj3*x14562))+((r10*x14556*x14559))+((r11*x14557))+(((-1.0)*x14566*x14567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14575=((1.0)*gconst17);
CheckValue<IkReal> x14576 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14576.valid){
continue;
}
CheckValue<IkReal> x14577=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14575)))),-1);
if(!x14577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14576.value)+(((1.5707963267949)*(x14577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14578=IKsin(j4);
IkReal x14579=IKcos(j4);
IkReal x14580=(cj3*gconst17);
IkReal x14581=(gconst16*r21);
IkReal x14582=(gconst17*sj3);
IkReal x14583=(gconst16*r20);
IkReal x14584=(sj1*sj2);
IkReal x14585=(gconst16*r10);
IkReal x14586=(cj2*sj1);
IkReal x14587=(gconst16*sj3);
IkReal x14588=((1.0)*cj0);
IkReal x14589=((1.0)*sj0);
IkReal x14590=(cj1*sj2);
IkReal x14591=((1.0)*x14579);
IkReal x14592=(gconst16*x14578);
IkReal x14593=(cj3*x14579);
IkReal x14594=(cj3*x14578);
IkReal x14595=((1.0)*cj1*cj2);
IkReal x14596=((1.0)*gconst17*x14578);
IkReal x14597=((1.0)*sj3*x14578);
evalcond[0]=((((-1.0)*r20*x14596))+((x14578*x14581))+(((-1.0)*r22*x14591)));
evalcond[1]=(cj0+(((-1.0)*r10*x14596))+(((-1.0)*r12*x14591))+((r11*x14592)));
evalcond[2]=((((-1.0)*r02*x14591))+(((-1.0)*x14589))+(((-1.0)*r00*x14596))+((r01*x14592)));
evalcond[3]=(((x14581*x14593))+((r22*x14594))+((r21*x14582))+x14586+x14590+((sj3*x14583))+(((-1.0)*r20*x14580*x14591)));
evalcond[4]=(((cj3*x14583))+(((-1.0)*sj3*x14581*x14591))+(((-1.0)*x14595))+((r21*x14580))+x14584+(((-1.0)*r22*x14597))+((r20*x14579*x14582)));
evalcond[5]=((((-1.0)*r00*x14580*x14591))+(((-1.0)*cj1*cj2*x14588))+((gconst16*r01*x14593))+((r00*x14587))+((r01*x14582))+((cj0*x14584))+((r02*x14594)));
evalcond[6]=(((sj0*x14584))+((gconst16*r11*x14593))+(((-1.0)*cj1*cj2*x14589))+(((-1.0)*r10*x14580*x14591))+((sj3*x14585))+((r11*x14582))+((r12*x14594)));
evalcond[7]=((((-1.0)*r02*x14597))+(((-1.0)*x14588*x14590))+(((-1.0)*r01*x14587*x14591))+((r01*x14580))+(((-1.0)*x14586*x14588))+((cj3*gconst16*r00))+((r00*x14579*x14582)));
evalcond[8]=(((cj3*x14585))+(((-1.0)*r11*x14587*x14591))+(((-1.0)*r12*x14597))+((r10*x14579*x14582))+((r11*x14580))+(((-1.0)*x14589*x14590))+(((-1.0)*x14586*x14589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14598=((1.0)*gconst17);
CheckValue<IkReal> x14599 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14598))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14599.valid){
continue;
}
CheckValue<IkReal> x14600=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14598)))),-1);
if(!x14600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14599.value)+(((1.5707963267949)*(x14600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14601=IKsin(j4);
IkReal x14602=IKcos(j4);
IkReal x14603=(cj3*gconst17);
IkReal x14604=(gconst16*r21);
IkReal x14605=(gconst17*sj3);
IkReal x14606=(gconst16*r20);
IkReal x14607=(sj1*sj2);
IkReal x14608=(gconst16*r10);
IkReal x14609=(cj2*sj1);
IkReal x14610=(gconst16*sj3);
IkReal x14611=((1.0)*cj0);
IkReal x14612=((1.0)*sj0);
IkReal x14613=(cj1*sj2);
IkReal x14614=((1.0)*x14602);
IkReal x14615=(gconst16*x14601);
IkReal x14616=(cj3*x14602);
IkReal x14617=(cj3*x14601);
IkReal x14618=((1.0)*cj1*cj2);
IkReal x14619=((1.0)*gconst17*x14601);
IkReal x14620=((1.0)*sj3*x14601);
evalcond[0]=((((-1.0)*r20*x14619))+(((-1.0)*r22*x14614))+((x14601*x14604)));
evalcond[1]=(cj0+(((-1.0)*r10*x14619))+(((-1.0)*r12*x14614))+((r11*x14615)));
evalcond[2]=(((r01*x14615))+(((-1.0)*r00*x14619))+(((-1.0)*r02*x14614))+(((-1.0)*x14612)));
evalcond[3]=(((r21*x14605))+(((-1.0)*r20*x14603*x14614))+((r22*x14617))+x14613+x14609+((sj3*x14606))+((x14604*x14616)));
evalcond[4]=(((r20*x14602*x14605))+((r21*x14603))+(((-1.0)*sj3*x14604*x14614))+((cj3*x14606))+x14607+(((-1.0)*x14618))+(((-1.0)*r22*x14620)));
evalcond[5]=(((gconst16*r01*x14616))+((r02*x14617))+(((-1.0)*r00*x14603*x14614))+((cj0*x14607))+((r01*x14605))+(((-1.0)*cj1*cj2*x14611))+((r00*x14610)));
evalcond[6]=(((gconst16*r11*x14616))+((sj0*x14607))+(((-1.0)*r10*x14603*x14614))+(((-1.0)*cj1*cj2*x14612))+((r11*x14605))+((sj3*x14608))+((r12*x14617)));
evalcond[7]=(((r00*x14602*x14605))+(((-1.0)*r02*x14620))+(((-1.0)*r01*x14610*x14614))+((r01*x14603))+((cj3*gconst16*r00))+(((-1.0)*x14609*x14611))+(((-1.0)*x14611*x14613)));
evalcond[8]=((((-1.0)*x14612*x14613))+(((-1.0)*r11*x14610*x14614))+((cj3*x14608))+((r10*x14602*x14605))+((r11*x14603))+(((-1.0)*r12*x14620))+(((-1.0)*x14609*x14612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14621=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14621;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14621);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14622=((1.0)*cj5);
IkReal x14623=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14622)));
j4eval[0]=x14623;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14622)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14623);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14624=cj5*cj5;
IkReal x14625=(cj3*r01);
IkReal x14626=(cj5*sj5);
IkReal x14627=((1.0)*cj3);
IkReal x14628=(((r20*x14625*x14626))+((r21*x14624*x14625))+(((-1.0)*r21*x14625))+(((-1.0)*r00*r20*x14624*x14627))+((cj3*r00*r21*x14626))+(((-1.0)*r02*r22*x14627)));
j4eval[0]=x14628;
j4eval[1]=IKsign(x14628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14629=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14629;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14629);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14630=((1.0)*cj5);
IkReal x14631=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14630)));
j4eval[0]=x14631;
j4eval[1]=((IKabs(((((-1.0)*r20*x14630))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14631);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14632=cj5*cj5;
IkReal x14633=r01*r01;
IkReal x14634=(r01*sj5);
IkReal x14635=(cj5*r00);
IkReal x14636=((((-1.0)*(r02*r02)))+(((-1.0)*x14632*(r00*r00)))+(((-1.0)*x14633))+(((2.0)*x14634*x14635))+((x14632*x14633)));
j4eval[0]=x14636;
j4eval[1]=IKsign(x14636);
j4eval[2]=((IKabs(r02))+(IKabs((x14635+(((-1.0)*x14634))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14637=cj5*cj5;
IkReal x14638=r01*r01;
IkReal x14639=(r01*sj5);
IkReal x14640=(cj5*r00);
CheckValue<IkReal> x14641 = IKatan2WithCheck(IkReal((x14640+(((-1.0)*x14639)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14641.valid){
continue;
}
CheckValue<IkReal> x14642=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14637*(r00*r00)))+(((-1.0)*(r02*r02)))+((x14637*x14638))+(((-1.0)*x14638))+(((2.0)*x14639*x14640)))),-1);
if(!x14642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14641.value)+(((1.5707963267949)*(x14642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14643=IKsin(j4);
IkReal x14644=IKcos(j4);
IkReal x14645=(cj5*r10);
IkReal x14646=(r01*sj5);
IkReal x14647=((1.0)*cj2);
IkReal x14648=(cj5*r00);
IkReal x14649=(cj5*r20);
IkReal x14650=((1.0)*x14644);
IkReal x14651=((1.0)*x14643);
IkReal x14652=(sj5*x14643);
evalcond[0]=((((-1.0)*r22*x14650))+((r21*x14652))+(((-1.0)*x14649*x14651)));
evalcond[1]=((((-1.0)*r12*x14650))+(((-1.0)*x14645*x14651))+((r11*x14652)));
evalcond[2]=((((-1.0)*r02*x14651))+((x14644*x14648))+(((-1.0)*x14646*x14650)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14650))+((x14643*x14646))+(((-1.0)*x14648*x14651)));
evalcond[4]=((((-1.0)*r22*x14651))+(((-1.0)*r21*sj5*x14650))+((sj1*sj2))+(((-1.0)*cj1*x14647))+((x14644*x14649)));
evalcond[5]=((((-1.0)*r12*x14651))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14650))+((x14644*x14645))+(((-1.0)*sj1*x14647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14653=((1.0)*cj5);
CheckValue<IkReal> x14654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14653)))),-1);
if(!x14654.valid){
continue;
}
CheckValue<IkReal> x14655 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14654.value)))+(x14655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14656=IKsin(j4);
IkReal x14657=IKcos(j4);
IkReal x14658=(cj5*r10);
IkReal x14659=(r01*sj5);
IkReal x14660=((1.0)*cj2);
IkReal x14661=(cj5*r00);
IkReal x14662=(cj5*r20);
IkReal x14663=((1.0)*x14657);
IkReal x14664=((1.0)*x14656);
IkReal x14665=(sj5*x14656);
evalcond[0]=((((-1.0)*r22*x14663))+((r21*x14665))+(((-1.0)*x14662*x14664)));
evalcond[1]=((((-1.0)*r12*x14663))+(((-1.0)*x14658*x14664))+((r11*x14665)));
evalcond[2]=(((x14657*x14661))+(((-1.0)*x14659*x14663))+(((-1.0)*r02*x14664)));
evalcond[3]=((-1.0)+((x14656*x14659))+(((-1.0)*x14661*x14664))+(((-1.0)*r02*x14663)));
evalcond[4]=(((x14657*x14662))+(((-1.0)*r22*x14664))+((sj1*sj2))+(((-1.0)*cj1*x14660))+(((-1.0)*r21*sj5*x14663)));
evalcond[5]=((((-1.0)*r11*sj5*x14663))+(((-1.0)*sj1*x14660))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14664))+((x14657*x14658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14666=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14666.valid){
continue;
}
CheckValue<IkReal> x14667 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14666.value)))+(x14667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14668=IKsin(j4);
IkReal x14669=IKcos(j4);
IkReal x14670=(cj5*r10);
IkReal x14671=(r01*sj5);
IkReal x14672=((1.0)*cj2);
IkReal x14673=(cj5*r00);
IkReal x14674=(cj5*r20);
IkReal x14675=((1.0)*x14669);
IkReal x14676=((1.0)*x14668);
IkReal x14677=(sj5*x14668);
evalcond[0]=(((r21*x14677))+(((-1.0)*r22*x14675))+(((-1.0)*x14674*x14676)));
evalcond[1]=((((-1.0)*x14670*x14676))+(((-1.0)*r12*x14675))+((r11*x14677)));
evalcond[2]=((((-1.0)*x14671*x14675))+((x14669*x14673))+(((-1.0)*r02*x14676)));
evalcond[3]=((-1.0)+((x14668*x14671))+(((-1.0)*x14673*x14676))+(((-1.0)*r02*x14675)));
evalcond[4]=((((-1.0)*cj1*x14672))+(((-1.0)*r22*x14676))+((sj1*sj2))+((x14669*x14674))+(((-1.0)*r21*sj5*x14675)));
evalcond[5]=((((-1.0)*sj1*x14672))+(((-1.0)*r11*sj5*x14675))+(((-1.0)*cj1*sj2))+((x14669*x14670))+(((-1.0)*r12*x14676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14678=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14678;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14678);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14679=((1.0)*cj5);
IkReal x14680=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14679)));
j4eval[0]=x14680;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14679))))));
j4eval[2]=IKsign(x14680);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14681=cj5*cj5;
IkReal x14682=r01*r01;
IkReal x14683=(cj5*r00);
IkReal x14684=(r01*sj5);
IkReal x14685=((((-2.0)*x14683*x14684))+((x14681*(r00*r00)))+(((-1.0)*x14681*x14682))+x14682+(r02*r02));
j4eval[0]=x14685;
j4eval[1]=IKsign(x14685);
j4eval[2]=((IKabs(r02))+(IKabs((x14684+(((-1.0)*x14683))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14686=cj5*cj5;
IkReal x14687=r01*r01;
IkReal x14688=(r01*sj5);
IkReal x14689=(cj5*r00);
CheckValue<IkReal> x14690=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14686*x14687))+((x14686*(r00*r00)))+(((-2.0)*x14688*x14689))+x14687+(r02*r02))),-1);
if(!x14690.valid){
continue;
}
CheckValue<IkReal> x14691 = IKatan2WithCheck(IkReal((x14688+(((-1.0)*x14689)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14690.value)))+(x14691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14692=IKcos(j4);
IkReal x14693=IKsin(j4);
IkReal x14694=(cj5*r00);
IkReal x14695=(cj5*r10);
IkReal x14696=(r21*sj5);
IkReal x14697=((1.0)*cj2);
IkReal x14698=(cj5*r20);
IkReal x14699=((1.0)*x14692);
IkReal x14700=((1.0)*x14693);
IkReal x14701=(sj5*x14693);
IkReal x14702=(sj5*x14692);
evalcond[0]=((((-1.0)*x14694*x14699))+((r01*x14702))+((r02*x14693)));
evalcond[1]=(((x14693*x14696))+(((-1.0)*x14698*x14700))+(((-1.0)*r22*x14699)));
evalcond[2]=(((r11*x14701))+(((-1.0)*x14695*x14700))+(((-1.0)*r12*x14699)));
evalcond[3]=((-1.0)+((r01*x14701))+(((-1.0)*r02*x14699))+(((-1.0)*x14694*x14700)));
evalcond[4]=(((r22*x14693))+(((-1.0)*cj1*x14697))+((sj1*sj2))+(((-1.0)*x14698*x14699))+((x14692*x14696)));
evalcond[5]=((((-1.0)*x14695*x14699))+(((-1.0)*cj1*sj2))+((r12*x14693))+((r11*x14702))+(((-1.0)*sj1*x14697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14703=((1.0)*cj5);
CheckValue<IkReal> x14704 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14704.valid){
continue;
}
CheckValue<IkReal> x14705=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14703)))),-1);
if(!x14705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14704.value)+(((1.5707963267949)*(x14705.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14706=IKcos(j4);
IkReal x14707=IKsin(j4);
IkReal x14708=(cj5*r00);
IkReal x14709=(cj5*r10);
IkReal x14710=(r21*sj5);
IkReal x14711=((1.0)*cj2);
IkReal x14712=(cj5*r20);
IkReal x14713=((1.0)*x14706);
IkReal x14714=((1.0)*x14707);
IkReal x14715=(sj5*x14707);
IkReal x14716=(sj5*x14706);
evalcond[0]=(((r01*x14716))+(((-1.0)*x14708*x14713))+((r02*x14707)));
evalcond[1]=((((-1.0)*r22*x14713))+((x14707*x14710))+(((-1.0)*x14712*x14714)));
evalcond[2]=(((r11*x14715))+(((-1.0)*x14709*x14714))+(((-1.0)*r12*x14713)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14713))+((r01*x14715))+(((-1.0)*x14708*x14714)));
evalcond[4]=(((sj1*sj2))+((x14706*x14710))+(((-1.0)*x14712*x14713))+((r22*x14707))+(((-1.0)*cj1*x14711)));
evalcond[5]=((((-1.0)*sj1*x14711))+((r11*x14716))+(((-1.0)*cj1*sj2))+((r12*x14707))+(((-1.0)*x14709*x14713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14717=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14717.valid){
continue;
}
CheckValue<IkReal> x14718 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14717.value)))+(x14718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14719=IKcos(j4);
IkReal x14720=IKsin(j4);
IkReal x14721=(cj5*r00);
IkReal x14722=(cj5*r10);
IkReal x14723=(r21*sj5);
IkReal x14724=((1.0)*cj2);
IkReal x14725=(cj5*r20);
IkReal x14726=((1.0)*x14719);
IkReal x14727=((1.0)*x14720);
IkReal x14728=(sj5*x14720);
IkReal x14729=(sj5*x14719);
evalcond[0]=(((r01*x14729))+((r02*x14720))+(((-1.0)*x14721*x14726)));
evalcond[1]=(((x14720*x14723))+(((-1.0)*r22*x14726))+(((-1.0)*x14725*x14727)));
evalcond[2]=((((-1.0)*r12*x14726))+(((-1.0)*x14722*x14727))+((r11*x14728)));
evalcond[3]=((-1.0)+((r01*x14728))+(((-1.0)*x14721*x14727))+(((-1.0)*r02*x14726)));
evalcond[4]=(((x14719*x14723))+((sj1*sj2))+((r22*x14720))+(((-1.0)*cj1*x14724))+(((-1.0)*x14725*x14726)));
evalcond[5]=((((-1.0)*x14722*x14726))+(((-1.0)*sj1*x14724))+(((-1.0)*cj1*sj2))+((r11*x14729))+((r12*x14720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14731 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14731)==0){
continue;
}
IkReal x14730=pow(x14731,-0.5);
CheckValue<IkReal> x14732 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14732.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14732.value));
IkReal gconst49=((-1.0)*r21*x14730);
IkReal gconst50=(r20*x14730);
CheckValue<IkReal> x14733 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14733.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14733.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14736 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14736.valid){
continue;
}
IkReal x14734=((-1.0)*(x14736.value));
IkReal x14735=x14730;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14734;
IkReal gconst48=x14734;
IkReal gconst49=((-1.0)*r21*x14735);
IkReal gconst50=(r20*x14735);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14739 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14739.valid){
continue;
}
IkReal x14737=((-1.0)*(x14739.value));
IkReal x14738=x14730;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14737;
IkReal gconst48=x14737;
IkReal gconst49=((-1.0)*r21*x14738);
IkReal gconst50=(r20*x14738);
CheckValue<IkReal> x14747=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14747.valid){
continue;
}
IkReal x14740=x14747.value;
IkReal x14741=(sj3*x14740);
IkReal x14742=(r11*x14741);
IkReal x14743=(r00*x14741);
IkReal x14744=(r01*x14741);
IkReal x14745=(r10*x14741);
IkReal x14746=(r20*r21*x14741);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x14742))+((r10*r20*r21*x14744))+((r01*x14742*(r21*r21)))+((r10*x14743*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14748=gconst49*gconst49;
IkReal x14749=gconst50*gconst50;
IkReal x14750=((1.0)*cj3);
IkReal x14751=(gconst50*r01);
IkReal x14752=(gconst49*r10);
IkReal x14753=(r12*sj3);
IkReal x14754=(gconst49*r00);
IkReal x14755=(r00*sj3);
IkReal x14756=(r11*x14748);
IkReal x14757=(r10*x14749);
CheckValue<IkReal> x14758 = IKatan2WithCheck(IkReal((((x14753*x14754))+((x14751*x14753)))),IkReal((((gconst49*r11*sj3*x14751))+((x14755*x14756))+(((-1.0)*r01*sj3*x14757))+(((-1.0)*gconst50*x14752*x14755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14758.valid){
continue;
}
CheckValue<IkReal> x14759=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x14750))+(((-1.0)*r01*x14750*x14756))+(((-1.0)*r00*x14750*x14757))+((cj3*gconst50*r11*x14754))+((cj3*x14751*x14752)))),-1);
if(!x14759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14758.value)+(((1.5707963267949)*(x14759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14760=IKsin(j4);
IkReal x14761=IKcos(j4);
IkReal x14762=(sj1*sj2);
IkReal x14763=(gconst50*r20);
IkReal x14764=(gconst50*sj3);
IkReal x14765=(cj3*r01);
IkReal x14766=(gconst50*r10);
IkReal x14767=(gconst49*sj3);
IkReal x14768=((1.0)*cj2);
IkReal x14769=(cj1*sj2);
IkReal x14770=(cj3*r11);
IkReal x14771=(gconst50*r00);
IkReal x14772=(cj3*r21);
IkReal x14773=(cj3*gconst49);
IkReal x14774=(cj1*x14768);
IkReal x14775=((1.0)*x14761);
IkReal x14776=((1.0)*x14760);
IkReal x14777=(gconst49*x14760);
IkReal x14778=(gconst49*x14761);
IkReal x14779=(cj3*x14760);
evalcond[0]=(((r21*x14777))+(((-1.0)*r22*x14775))+(((-1.0)*x14763*x14776)));
evalcond[1]=(((r11*x14777))+(((-1.0)*x14766*x14776))+(((-1.0)*r12*x14775)));
evalcond[2]=((-1.0)+(((-1.0)*x14771*x14776))+(((-1.0)*r02*x14775))+((r01*x14777)));
evalcond[3]=(((x14765*x14778))+((r01*x14764))+((r00*x14767))+(((-1.0)*cj3*x14771*x14775))+((r02*x14779)));
evalcond[4]=(((gconst50*x14765))+((r00*x14773))+(((-1.0)*r01*x14767*x14775))+(((-1.0)*r02*sj3*x14776))+((r00*x14761*x14764)));
evalcond[5]=(((cj2*sj1))+((r22*x14779))+(((-1.0)*cj3*x14763*x14775))+((r20*x14767))+((x14772*x14778))+((r21*x14764))+x14769);
evalcond[6]=(((r12*x14779))+((r10*x14767))+((x14770*x14778))+(((-1.0)*x14774))+(((-1.0)*cj3*x14766*x14775))+((r11*x14764))+x14762);
evalcond[7]=((((-1.0)*x14774))+((sj3*x14761*x14763))+x14762+((r20*x14773))+(((-1.0)*r22*sj3*x14776))+(((-1.0)*r21*x14767*x14775))+((gconst50*x14772)));
evalcond[8]=((((-1.0)*sj1*x14768))+((r10*x14773))+(((-1.0)*x14769))+((r10*x14761*x14764))+(((-1.0)*r12*sj3*x14776))+(((-1.0)*r11*x14767*x14775))+((gconst50*x14770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14780=gconst49*gconst49;
IkReal x14781=gconst50*gconst50;
IkReal x14782=(cj3*r12);
IkReal x14783=(gconst49*r00);
IkReal x14784=(r01*r11);
IkReal x14785=(r00*r11);
IkReal x14786=(cj3*gconst50);
IkReal x14787=((1.0)*r01*r10);
IkReal x14788=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14789=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((sj3*x14780*x14784))+(((-1.0)*gconst50*r11*sj3*x14783))+((r00*r10*sj3*x14781))+(((-1.0)*x14787*x14788)))),-1);
if(!x14789.valid){
continue;
}
CheckValue<IkReal> x14790 = IKatan2WithCheck(IkReal((((x14782*x14783))+((gconst50*r01*x14782)))),IkReal((((gconst49*x14784*x14786))+(((-1.0)*cj3*x14781*x14787))+(((-1.0)*r10*x14783*x14786))+((cj3*x14780*x14785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14789.value)))+(x14790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14791=IKsin(j4);
IkReal x14792=IKcos(j4);
IkReal x14793=(sj1*sj2);
IkReal x14794=(gconst50*r20);
IkReal x14795=(gconst50*sj3);
IkReal x14796=(cj3*r01);
IkReal x14797=(gconst50*r10);
IkReal x14798=(gconst49*sj3);
IkReal x14799=((1.0)*cj2);
IkReal x14800=(cj1*sj2);
IkReal x14801=(cj3*r11);
IkReal x14802=(gconst50*r00);
IkReal x14803=(cj3*r21);
IkReal x14804=(cj3*gconst49);
IkReal x14805=(cj1*x14799);
IkReal x14806=((1.0)*x14792);
IkReal x14807=((1.0)*x14791);
IkReal x14808=(gconst49*x14791);
IkReal x14809=(gconst49*x14792);
IkReal x14810=(cj3*x14791);
evalcond[0]=((((-1.0)*r22*x14806))+((r21*x14808))+(((-1.0)*x14794*x14807)));
evalcond[1]=((((-1.0)*x14797*x14807))+(((-1.0)*r12*x14806))+((r11*x14808)));
evalcond[2]=((-1.0)+(((-1.0)*x14802*x14807))+((r01*x14808))+(((-1.0)*r02*x14806)));
evalcond[3]=(((r00*x14798))+((r01*x14795))+(((-1.0)*cj3*x14802*x14806))+((x14796*x14809))+((r02*x14810)));
evalcond[4]=(((gconst50*x14796))+(((-1.0)*r02*sj3*x14807))+((r00*x14804))+(((-1.0)*r01*x14798*x14806))+((r00*x14792*x14795)));
evalcond[5]=(((x14803*x14809))+((cj2*sj1))+(((-1.0)*cj3*x14794*x14806))+x14800+((r22*x14810))+((r20*x14798))+((r21*x14795)));
evalcond[6]=(((r10*x14798))+(((-1.0)*x14805))+((r11*x14795))+(((-1.0)*cj3*x14797*x14806))+x14793+((r12*x14810))+((x14801*x14809)));
evalcond[7]=((((-1.0)*x14805))+(((-1.0)*r21*x14798*x14806))+((sj3*x14792*x14794))+(((-1.0)*r22*sj3*x14807))+x14793+((r20*x14804))+((gconst50*x14803)));
evalcond[8]=(((r10*x14792*x14795))+(((-1.0)*r11*x14798*x14806))+(((-1.0)*sj1*x14799))+((r10*x14804))+(((-1.0)*r12*sj3*x14807))+(((-1.0)*x14800))+((gconst50*x14801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14811=((1.0)*gconst50);
CheckValue<IkReal> x14812=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14811)))),-1);
if(!x14812.valid){
continue;
}
CheckValue<IkReal> x14813 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14811))+((gconst49*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14812.value)))+(x14813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14814=IKsin(j4);
IkReal x14815=IKcos(j4);
IkReal x14816=(sj1*sj2);
IkReal x14817=(gconst50*r20);
IkReal x14818=(gconst50*sj3);
IkReal x14819=(cj3*r01);
IkReal x14820=(gconst50*r10);
IkReal x14821=(gconst49*sj3);
IkReal x14822=((1.0)*cj2);
IkReal x14823=(cj1*sj2);
IkReal x14824=(cj3*r11);
IkReal x14825=(gconst50*r00);
IkReal x14826=(cj3*r21);
IkReal x14827=(cj3*gconst49);
IkReal x14828=(cj1*x14822);
IkReal x14829=((1.0)*x14815);
IkReal x14830=((1.0)*x14814);
IkReal x14831=(gconst49*x14814);
IkReal x14832=(gconst49*x14815);
IkReal x14833=(cj3*x14814);
evalcond[0]=((((-1.0)*x14817*x14830))+(((-1.0)*r22*x14829))+((r21*x14831)));
evalcond[1]=((((-1.0)*x14820*x14830))+((r11*x14831))+(((-1.0)*r12*x14829)));
evalcond[2]=((-1.0)+(((-1.0)*x14825*x14830))+(((-1.0)*r02*x14829))+((r01*x14831)));
evalcond[3]=(((x14819*x14832))+((r00*x14821))+(((-1.0)*cj3*x14825*x14829))+((r01*x14818))+((r02*x14833)));
evalcond[4]=((((-1.0)*r01*x14821*x14829))+((r00*x14815*x14818))+((r00*x14827))+(((-1.0)*r02*sj3*x14830))+((gconst50*x14819)));
evalcond[5]=(((cj2*sj1))+((r22*x14833))+x14823+(((-1.0)*cj3*x14817*x14829))+((r21*x14818))+((r20*x14821))+((x14826*x14832)));
evalcond[6]=((((-1.0)*cj3*x14820*x14829))+((r12*x14833))+((r10*x14821))+x14816+(((-1.0)*x14828))+((x14824*x14832))+((r11*x14818)));
evalcond[7]=(((sj3*x14815*x14817))+(((-1.0)*r22*sj3*x14830))+x14816+(((-1.0)*x14828))+((gconst50*x14826))+((r20*x14827))+(((-1.0)*r21*x14821*x14829)));
evalcond[8]=((((-1.0)*sj1*x14822))+((r10*x14827))+(((-1.0)*r11*x14821*x14829))+(((-1.0)*x14823))+(((-1.0)*r12*sj3*x14830))+((gconst50*x14824))+((r10*x14815*x14818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14835 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14835)==0){
continue;
}
IkReal x14834=pow(x14835,-0.5);
CheckValue<IkReal> x14836 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14836.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14836.value))));
IkReal gconst52=((1.0)*r21*x14834);
IkReal gconst53=((-1.0)*r20*x14834);
CheckValue<IkReal> x14837 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14837.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14837.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14840 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14840.valid){
continue;
}
IkReal x14838=((1.0)*(x14840.value));
IkReal x14839=x14834;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14838)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14838)));
IkReal gconst52=((1.0)*r21*x14839);
IkReal gconst53=((-1.0)*r20*x14839);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14843 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14843.valid){
continue;
}
IkReal x14841=((1.0)*(x14843.value));
IkReal x14842=x14834;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14841)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14841)));
IkReal gconst52=((1.0)*r21*x14842);
IkReal gconst53=((-1.0)*r20*x14842);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14846 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14846.valid){
continue;
}
IkReal x14844=((1.0)*(x14846.value));
IkReal x14845=x14834;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14844)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14844)));
IkReal gconst52=((1.0)*r21*x14845);
IkReal gconst53=((-1.0)*r20*x14845);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14847=gconst52*gconst52;
IkReal x14848=gconst53*gconst53;
IkReal x14849=(gconst53*r01);
IkReal x14850=(cj3*r20);
IkReal x14851=(r22*sj3);
IkReal x14852=((1.0)*cj3);
IkReal x14853=(gconst52*sj3);
IkReal x14854=((1.0)*r00);
IkReal x14855=(gconst52*r00);
IkReal x14856=(r21*x14847);
CheckValue<IkReal> x14857=IKPowWithIntegerCheck(IKsign((((gconst52*x14849*x14850))+((cj3*gconst53*r21*x14855))+(((-1.0)*r02*r22*x14852))+(((-1.0)*x14848*x14850*x14854))+(((-1.0)*r01*x14852*x14856)))),-1);
if(!x14857.valid){
continue;
}
CheckValue<IkReal> x14858 = IKatan2WithCheck(IkReal((((x14851*x14855))+((x14849*x14851)))),IkReal(((((-1.0)*r01*r20*sj3*x14848))+((r21*x14849*x14853))+(((-1.0)*gconst53*r20*x14853*x14854))+((r00*sj3*x14856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14857.value)))+(x14858.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14859=IKsin(j4);
IkReal x14860=IKcos(j4);
IkReal x14861=(sj1*sj2);
IkReal x14862=((1.0)*cj1);
IkReal x14863=(cj3*gconst52);
IkReal x14864=(gconst53*sj3);
IkReal x14865=(cj3*gconst53);
IkReal x14866=(cj2*sj1);
IkReal x14867=(gconst52*sj3);
IkReal x14868=(cj2*x14862);
IkReal x14869=((1.0)*x14860);
IkReal x14870=((1.0)*x14859);
IkReal x14871=(gconst52*x14859);
IkReal x14872=(cj3*x14859);
evalcond[0]=(((r21*x14871))+(((-1.0)*gconst53*r20*x14870))+(((-1.0)*r22*x14869)));
evalcond[1]=(((r11*x14871))+(((-1.0)*gconst53*r10*x14870))+(((-1.0)*r12*x14869)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14869))+((r01*x14871))+(((-1.0)*gconst53*r00*x14870)));
evalcond[3]=((((-1.0)*r00*x14865*x14869))+((r01*x14864))+((r00*x14867))+((r01*x14860*x14863))+((r02*x14872)));
evalcond[4]=(((r00*x14860*x14864))+(((-1.0)*r01*x14867*x14869))+((r01*x14865))+((r00*x14863))+(((-1.0)*r02*sj3*x14870)));
evalcond[5]=(((r22*x14872))+((r20*x14867))+x14866+((cj1*sj2))+(((-1.0)*r20*x14865*x14869))+((r21*x14864))+((r21*x14860*x14863)));
evalcond[6]=(((r12*x14872))+x14861+((r11*x14860*x14863))+(((-1.0)*r10*x14865*x14869))+((r10*x14867))+((r11*x14864))+(((-1.0)*x14868)));
evalcond[7]=(((r20*x14863))+(((-1.0)*r22*sj3*x14870))+x14861+((r20*x14860*x14864))+(((-1.0)*r21*x14867*x14869))+(((-1.0)*x14868))+((r21*x14865)));
evalcond[8]=((((-1.0)*r11*x14867*x14869))+((r10*x14860*x14864))+(((-1.0)*r12*sj3*x14870))+(((-1.0)*sj2*x14862))+((r10*x14863))+((r11*x14865))+(((-1.0)*x14866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14873=((1.0)*gconst53);
CheckValue<IkReal> x14874 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14873)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14874.valid){
continue;
}
CheckValue<IkReal> x14875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14873))+(((-1.0)*gconst52*r10)))),-1);
if(!x14875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14874.value)+(((1.5707963267949)*(x14875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14876=IKsin(j4);
IkReal x14877=IKcos(j4);
IkReal x14878=(sj1*sj2);
IkReal x14879=((1.0)*cj1);
IkReal x14880=(cj3*gconst52);
IkReal x14881=(gconst53*sj3);
IkReal x14882=(cj3*gconst53);
IkReal x14883=(cj2*sj1);
IkReal x14884=(gconst52*sj3);
IkReal x14885=(cj2*x14879);
IkReal x14886=((1.0)*x14877);
IkReal x14887=((1.0)*x14876);
IkReal x14888=(gconst52*x14876);
IkReal x14889=(cj3*x14876);
evalcond[0]=((((-1.0)*r22*x14886))+((r21*x14888))+(((-1.0)*gconst53*r20*x14887)));
evalcond[1]=(((r11*x14888))+(((-1.0)*gconst53*r10*x14887))+(((-1.0)*r12*x14886)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14886))+((r01*x14888))+(((-1.0)*gconst53*r00*x14887)));
evalcond[3]=((((-1.0)*r00*x14882*x14886))+((r01*x14877*x14880))+((r00*x14884))+((r01*x14881))+((r02*x14889)));
evalcond[4]=(((r00*x14880))+((r01*x14882))+((r00*x14877*x14881))+(((-1.0)*r01*x14884*x14886))+(((-1.0)*r02*sj3*x14887)));
evalcond[5]=((((-1.0)*r20*x14882*x14886))+((r22*x14889))+x14883+((cj1*sj2))+((r21*x14881))+((r20*x14884))+((r21*x14877*x14880)));
evalcond[6]=(((r11*x14881))+((r10*x14884))+((r12*x14889))+x14878+((r11*x14877*x14880))+(((-1.0)*x14885))+(((-1.0)*r10*x14882*x14886)));
evalcond[7]=((((-1.0)*r22*sj3*x14887))+x14878+((r20*x14877*x14881))+((r21*x14882))+(((-1.0)*r21*x14884*x14886))+(((-1.0)*x14885))+((r20*x14880)));
evalcond[8]=(((r11*x14882))+((r10*x14880))+(((-1.0)*r12*sj3*x14887))+(((-1.0)*r11*x14884*x14886))+((r10*x14877*x14881))+(((-1.0)*sj2*x14879))+(((-1.0)*x14883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14890 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14890.valid){
continue;
}
CheckValue<IkReal> x14891=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14890.value)+(((1.5707963267949)*(x14891.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14892=IKsin(j4);
IkReal x14893=IKcos(j4);
IkReal x14894=(sj1*sj2);
IkReal x14895=((1.0)*cj1);
IkReal x14896=(cj3*gconst52);
IkReal x14897=(gconst53*sj3);
IkReal x14898=(cj3*gconst53);
IkReal x14899=(cj2*sj1);
IkReal x14900=(gconst52*sj3);
IkReal x14901=(cj2*x14895);
IkReal x14902=((1.0)*x14893);
IkReal x14903=((1.0)*x14892);
IkReal x14904=(gconst52*x14892);
IkReal x14905=(cj3*x14892);
evalcond[0]=(((r21*x14904))+(((-1.0)*r22*x14902))+(((-1.0)*gconst53*r20*x14903)));
evalcond[1]=((((-1.0)*r12*x14902))+((r11*x14904))+(((-1.0)*gconst53*r10*x14903)));
evalcond[2]=((-1.0)+((r01*x14904))+(((-1.0)*r02*x14902))+(((-1.0)*gconst53*r00*x14903)));
evalcond[3]=(((r00*x14900))+((r01*x14897))+((r02*x14905))+(((-1.0)*r00*x14898*x14902))+((r01*x14893*x14896)));
evalcond[4]=(((r01*x14898))+((r00*x14896))+(((-1.0)*r01*x14900*x14902))+(((-1.0)*r02*sj3*x14903))+((r00*x14893*x14897)));
evalcond[5]=(((r22*x14905))+x14899+((cj1*sj2))+((r21*x14897))+((r20*x14900))+(((-1.0)*r20*x14898*x14902))+((r21*x14893*x14896)));
evalcond[6]=(((r11*x14897))+(((-1.0)*x14901))+x14894+((r12*x14905))+((r10*x14900))+((r11*x14893*x14896))+(((-1.0)*r10*x14898*x14902)));
evalcond[7]=((((-1.0)*r21*x14900*x14902))+(((-1.0)*x14901))+x14894+((r21*x14898))+(((-1.0)*r22*sj3*x14903))+((r20*x14893*x14897))+((r20*x14896)));
evalcond[8]=(((r10*x14896))+(((-1.0)*sj2*x14895))+((r11*x14898))+((r10*x14893*x14897))+(((-1.0)*x14899))+(((-1.0)*r11*x14900*x14902))+(((-1.0)*r12*sj3*x14903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14906=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14906);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14906);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14907=(r01*sj5);
IkReal x14908=((1.0)*cj5*r00);
j4eval[0]=(x14907+(((-1.0)*x14908)));
j4eval[1]=(((cj3*x14907))+(((-1.0)*cj3*x14908)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14909=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14909);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14909);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14910=(cj5*r00);
IkReal x14911=(r01*sj5);
j4eval[0]=(x14911+(((-1.0)*x14910)));
j4eval[1]=((((-1.0)*sj3*x14911))+((sj3*x14910)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14912=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14912);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14912);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14913=((1.0)*r00);
CheckValue<IkReal> x14914=IKPowWithIntegerCheck(cj3,-1);
if(!x14914.valid){
continue;
}
CheckValue<IkReal> x14915=IKPowWithIntegerCheck(r22,-1);
if(!x14915.valid){
continue;
}
CheckValue<IkReal> x14916=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14913))+((cj3*r01*sj5))),-1);
if(!x14916.valid){
continue;
}
if( IKabs(((x14914.value)*(x14915.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14916.value)*(((((-1.0)*sj3*sj5*x14913))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14914.value)*(x14915.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14916.value)*(((((-1.0)*sj3*sj5*x14913))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14914.value)*(x14915.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14916.value)*(((((-1.0)*sj3*sj5*x14913))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14917=IKsin(j4);
IkReal x14918=IKcos(j4);
IkReal x14919=(sj1*sj2);
IkReal x14920=(cj5*sj3);
IkReal x14921=(r11*sj5);
IkReal x14922=(cj3*cj5);
IkReal x14923=((1.0)*cj1);
IkReal x14924=(cj3*sj5);
IkReal x14925=(sj3*sj5);
IkReal x14926=(cj2*sj1);
IkReal x14927=(r01*sj5);
IkReal x14928=((1.0)*sj3);
IkReal x14929=(cj2*x14923);
IkReal x14930=(r10*x14918);
IkReal x14931=(r22*x14917);
IkReal x14932=(cj3*x14918);
IkReal x14933=((1.0)*cj5*x14917);
evalcond[0]=((-1.0)*r22*x14918);
evalcond[1]=(x14926+((cj1*sj2))+((cj3*x14931)));
evalcond[2]=((((-1.0)*r10*x14933))+((x14917*x14921)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14933))+((x14917*x14927)));
evalcond[4]=(x14919+(((-1.0)*x14929))+(((-1.0)*x14928*x14931)));
evalcond[5]=(((r01*x14920))+((r00*x14925))+(((-1.0)*r00*x14918*x14922))+((r01*x14918*x14924)));
evalcond[6]=(((r01*x14922))+((r00*x14924))+((r00*x14918*x14920))+(((-1.0)*r01*x14918*x14925)));
evalcond[7]=(((x14921*x14932))+x14919+(((-1.0)*x14922*x14930))+((r10*x14925))+(((-1.0)*x14929))+((r11*x14920)));
evalcond[8]=(((x14920*x14930))+(((-1.0)*x14926))+((r10*x14924))+(((-1.0)*x14918*x14921*x14928))+(((-1.0)*sj2*x14923))+((r11*x14922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14934=((1.0)*cj3);
IkReal x14935=(cj5*r00);
IkReal x14936=(r01*sj5);
CheckValue<IkReal> x14937=IKPowWithIntegerCheck(((((-1.0)*x14935))+x14936),-1);
if(!x14937.valid){
continue;
}
CheckValue<IkReal> x14938=IKPowWithIntegerCheck((((sj3*x14935))+(((-1.0)*sj3*x14936))),-1);
if(!x14938.valid){
continue;
}
if( IKabs(x14937.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14938.value)*(((((-1.0)*cj5*r01*x14934))+(((-1.0)*r00*sj5*x14934)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14937.value)+IKsqr(((x14938.value)*(((((-1.0)*cj5*r01*x14934))+(((-1.0)*r00*sj5*x14934))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14937.value, ((x14938.value)*(((((-1.0)*cj5*r01*x14934))+(((-1.0)*r00*sj5*x14934))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14939=IKsin(j4);
IkReal x14940=IKcos(j4);
IkReal x14941=(sj1*sj2);
IkReal x14942=(cj5*sj3);
IkReal x14943=(r11*sj5);
IkReal x14944=(cj3*cj5);
IkReal x14945=((1.0)*cj1);
IkReal x14946=(cj3*sj5);
IkReal x14947=(sj3*sj5);
IkReal x14948=(cj2*sj1);
IkReal x14949=(r01*sj5);
IkReal x14950=((1.0)*sj3);
IkReal x14951=(cj2*x14945);
IkReal x14952=(r10*x14940);
IkReal x14953=(r22*x14939);
IkReal x14954=(cj3*x14940);
IkReal x14955=((1.0)*cj5*x14939);
evalcond[0]=((-1.0)*r22*x14940);
evalcond[1]=(x14948+((cj1*sj2))+((cj3*x14953)));
evalcond[2]=(((x14939*x14943))+(((-1.0)*r10*x14955)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14955))+((x14939*x14949)));
evalcond[4]=(x14941+(((-1.0)*x14951))+(((-1.0)*x14950*x14953)));
evalcond[5]=(((r01*x14940*x14946))+((r00*x14947))+((r01*x14942))+(((-1.0)*r00*x14940*x14944)));
evalcond[6]=(((r00*x14946))+((r01*x14944))+(((-1.0)*r01*x14940*x14947))+((r00*x14940*x14942)));
evalcond[7]=(x14941+((r10*x14947))+(((-1.0)*x14951))+(((-1.0)*x14944*x14952))+((r11*x14942))+((x14943*x14954)));
evalcond[8]=(((r10*x14946))+(((-1.0)*sj2*x14945))+(((-1.0)*x14948))+((x14942*x14952))+(((-1.0)*x14940*x14943*x14950))+((r11*x14944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14956=((1.0)*sj3);
IkReal x14957=(r01*sj5);
IkReal x14958=((1.0)*cj5*r00);
CheckValue<IkReal> x14959=IKPowWithIntegerCheck((x14957+(((-1.0)*x14958))),-1);
if(!x14959.valid){
continue;
}
CheckValue<IkReal> x14960=IKPowWithIntegerCheck(((((-1.0)*cj3*x14958))+((cj3*x14957))),-1);
if(!x14960.valid){
continue;
}
if( IKabs(x14959.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14960.value)*(((((-1.0)*cj5*r01*x14956))+(((-1.0)*r00*sj5*x14956)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14959.value)+IKsqr(((x14960.value)*(((((-1.0)*cj5*r01*x14956))+(((-1.0)*r00*sj5*x14956))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14959.value, ((x14960.value)*(((((-1.0)*cj5*r01*x14956))+(((-1.0)*r00*sj5*x14956))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14961=IKsin(j4);
IkReal x14962=IKcos(j4);
IkReal x14963=(sj1*sj2);
IkReal x14964=(cj5*sj3);
IkReal x14965=(r11*sj5);
IkReal x14966=(cj3*cj5);
IkReal x14967=((1.0)*cj1);
IkReal x14968=(cj3*sj5);
IkReal x14969=(sj3*sj5);
IkReal x14970=(cj2*sj1);
IkReal x14971=(r01*sj5);
IkReal x14972=((1.0)*sj3);
IkReal x14973=(cj2*x14967);
IkReal x14974=(r10*x14962);
IkReal x14975=(r22*x14961);
IkReal x14976=(cj3*x14962);
IkReal x14977=((1.0)*cj5*x14961);
evalcond[0]=((-1.0)*r22*x14962);
evalcond[1]=(x14970+((cj3*x14975))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r10*x14977))+((x14961*x14965)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14977))+((x14961*x14971)));
evalcond[4]=(x14963+(((-1.0)*x14973))+(((-1.0)*x14972*x14975)));
evalcond[5]=(((r01*x14964))+(((-1.0)*r00*x14962*x14966))+((r01*x14962*x14968))+((r00*x14969)));
evalcond[6]=(((r01*x14966))+(((-1.0)*r01*x14962*x14969))+((r00*x14968))+((r00*x14962*x14964)));
evalcond[7]=(x14963+(((-1.0)*x14973))+((r11*x14964))+(((-1.0)*x14966*x14974))+((x14965*x14976))+((r10*x14969)));
evalcond[8]=(((x14964*x14974))+(((-1.0)*sj2*x14967))+(((-1.0)*x14970))+((r11*x14966))+(((-1.0)*x14962*x14965*x14972))+((r10*x14968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14978=cj5*cj5;
IkReal x14979=(cj3*r20);
IkReal x14980=(r21*sj3);
IkReal x14981=((1.0)*cj3);
IkReal x14982=(r01*r21);
IkReal x14983=(r01*sj3);
IkReal x14984=(r00*sj5);
IkReal x14985=(cj5*r01*sj5);
IkReal x14986=((1.0)*x14978);
CheckValue<IkReal> x14987=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14979*x14986))+(((-1.0)*x14981*x14982))+(((-1.0)*r02*r22*x14981))+((cj3*cj5*r21*x14984))+((x14979*x14985))+((cj3*x14978*x14982)))),-1);
if(!x14987.valid){
continue;
}
CheckValue<IkReal> x14988 = IKatan2WithCheck(IkReal((((cj5*r22*x14983))+((r22*sj3*x14984)))),IkReal((((x14980*x14985))+(((-1.0)*cj5*r20*sj3*x14984))+(((-1.0)*r00*x14980*x14986))+((r00*x14980))+(((-1.0)*r20*x14983*x14986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14987.value)))+(x14988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14989=IKsin(j4);
IkReal x14990=IKcos(j4);
IkReal x14991=(sj1*sj2);
IkReal x14992=(r11*sj5);
IkReal x14993=(cj5*r10);
IkReal x14994=(cj5*r01);
IkReal x14995=(cj5*r00);
IkReal x14996=((1.0)*cj1);
IkReal x14997=(cj3*sj5);
IkReal x14998=(r21*sj5);
IkReal x14999=(cj5*sj3);
IkReal x15000=(sj3*sj5);
IkReal x15001=(cj2*sj1);
IkReal x15002=(r01*sj5);
IkReal x15003=(cj3*cj5);
IkReal x15004=(cj5*r20);
IkReal x15005=(cj2*x14996);
IkReal x15006=((1.0)*x14990);
IkReal x15007=((1.0)*x14989);
IkReal x15008=(cj3*x14990);
IkReal x15009=(sj3*x14990);
IkReal x15010=(cj3*x14989);
evalcond[0]=((((-1.0)*r22*x15006))+(((-1.0)*x15004*x15007))+((x14989*x14998)));
evalcond[1]=(((x14989*x14992))+(((-1.0)*r12*x15006))+(((-1.0)*x14993*x15007)));
evalcond[2]=((-1.0)+((x14989*x15002))+(((-1.0)*r02*x15006))+(((-1.0)*x14995*x15007)));
evalcond[3]=(((r00*x15000))+((sj3*x14994))+(((-1.0)*cj3*x14995*x15006))+((r01*x14990*x14997))+((r02*x15010)));
evalcond[4]=((((-1.0)*r02*sj3*x15007))+((cj3*x14994))+((r00*x14997))+(((-1.0)*r01*x15000*x15006))+((x14995*x15009)));
evalcond[5]=(((r22*x15010))+((r21*x14999))+((r21*x14990*x14997))+(((-1.0)*r20*x15003*x15006))+((cj1*sj2))+((r20*x15000))+x15001);
evalcond[6]=(x14991+((r10*x15000))+((r11*x14999))+(((-1.0)*cj3*x14993*x15006))+((r12*x15010))+((x14992*x15008))+(((-1.0)*x15005)));
evalcond[7]=((((-1.0)*sj3*x14998*x15006))+x14991+((r20*x14990*x14999))+((r20*x14997))+(((-1.0)*r22*sj3*x15007))+(((-1.0)*x15005))+((r21*x15003)));
evalcond[8]=((((-1.0)*sj3*x14992*x15006))+(((-1.0)*r12*sj3*x15007))+(((-1.0)*x15001))+((r10*x14997))+((r11*x15003))+(((-1.0)*sj2*x14996))+((x14993*x15009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15011=((1.0)*cj5);
CheckValue<IkReal> x15012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x15011))+(((-1.0)*r10*sj5)))),-1);
if(!x15012.valid){
continue;
}
CheckValue<IkReal> x15013 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15012.value)))+(x15013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15014=IKsin(j4);
IkReal x15015=IKcos(j4);
IkReal x15016=(sj1*sj2);
IkReal x15017=(r11*sj5);
IkReal x15018=(cj5*r10);
IkReal x15019=(cj5*r01);
IkReal x15020=(cj5*r00);
IkReal x15021=((1.0)*cj1);
IkReal x15022=(cj3*sj5);
IkReal x15023=(r21*sj5);
IkReal x15024=(cj5*sj3);
IkReal x15025=(sj3*sj5);
IkReal x15026=(cj2*sj1);
IkReal x15027=(r01*sj5);
IkReal x15028=(cj3*cj5);
IkReal x15029=(cj5*r20);
IkReal x15030=(cj2*x15021);
IkReal x15031=((1.0)*x15015);
IkReal x15032=((1.0)*x15014);
IkReal x15033=(cj3*x15015);
IkReal x15034=(sj3*x15015);
IkReal x15035=(cj3*x15014);
evalcond[0]=(((x15014*x15023))+(((-1.0)*r22*x15031))+(((-1.0)*x15029*x15032)));
evalcond[1]=((((-1.0)*x15018*x15032))+(((-1.0)*r12*x15031))+((x15014*x15017)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15031))+((x15014*x15027))+(((-1.0)*x15020*x15032)));
evalcond[3]=(((r00*x15025))+((r01*x15015*x15022))+((sj3*x15019))+(((-1.0)*cj3*x15020*x15031))+((r02*x15035)));
evalcond[4]=(((r00*x15022))+((cj3*x15019))+((x15020*x15034))+(((-1.0)*r01*x15025*x15031))+(((-1.0)*r02*sj3*x15032)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r20*x15028*x15031))+((r21*x15024))+x15026+((r21*x15015*x15022))+((r22*x15035))+((r20*x15025)));
evalcond[6]=((((-1.0)*x15030))+(((-1.0)*cj3*x15018*x15031))+((r10*x15025))+x15016+((r12*x15035))+((r11*x15024))+((x15017*x15033)));
evalcond[7]=((((-1.0)*x15030))+((r21*x15028))+x15016+((r20*x15015*x15024))+(((-1.0)*sj3*x15023*x15031))+((r20*x15022))+(((-1.0)*r22*sj3*x15032)));
evalcond[8]=((((-1.0)*r12*sj3*x15032))+(((-1.0)*x15026))+((r10*x15022))+((x15018*x15034))+(((-1.0)*sj3*x15017*x15031))+(((-1.0)*sj2*x15021))+((r11*x15028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15036=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15036.valid){
continue;
}
CheckValue<IkReal> x15037 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15036.value)))+(x15037.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15038=IKsin(j4);
IkReal x15039=IKcos(j4);
IkReal x15040=(sj1*sj2);
IkReal x15041=(r11*sj5);
IkReal x15042=(cj5*r10);
IkReal x15043=(cj5*r01);
IkReal x15044=(cj5*r00);
IkReal x15045=((1.0)*cj1);
IkReal x15046=(cj3*sj5);
IkReal x15047=(r21*sj5);
IkReal x15048=(cj5*sj3);
IkReal x15049=(sj3*sj5);
IkReal x15050=(cj2*sj1);
IkReal x15051=(r01*sj5);
IkReal x15052=(cj3*cj5);
IkReal x15053=(cj5*r20);
IkReal x15054=(cj2*x15045);
IkReal x15055=((1.0)*x15039);
IkReal x15056=((1.0)*x15038);
IkReal x15057=(cj3*x15039);
IkReal x15058=(sj3*x15039);
IkReal x15059=(cj3*x15038);
evalcond[0]=(((x15038*x15047))+(((-1.0)*x15053*x15056))+(((-1.0)*r22*x15055)));
evalcond[1]=(((x15038*x15041))+(((-1.0)*r12*x15055))+(((-1.0)*x15042*x15056)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15055))+((x15038*x15051))+(((-1.0)*x15044*x15056)));
evalcond[3]=((((-1.0)*cj3*x15044*x15055))+((r00*x15049))+((sj3*x15043))+((r02*x15059))+((r01*x15039*x15046)));
evalcond[4]=((((-1.0)*r01*x15049*x15055))+((cj3*x15043))+((r00*x15046))+(((-1.0)*r02*sj3*x15056))+((x15044*x15058)));
evalcond[5]=(((cj1*sj2))+x15050+((r20*x15049))+((r22*x15059))+(((-1.0)*r20*x15052*x15055))+((r21*x15048))+((r21*x15039*x15046)));
evalcond[6]=(((r11*x15048))+x15040+(((-1.0)*x15054))+((r10*x15049))+(((-1.0)*cj3*x15042*x15055))+((r12*x15059))+((x15041*x15057)));
evalcond[7]=(x15040+((r21*x15052))+((r20*x15046))+(((-1.0)*x15054))+(((-1.0)*sj3*x15047*x15055))+(((-1.0)*r22*sj3*x15056))+((r20*x15039*x15048)));
evalcond[8]=((((-1.0)*sj2*x15045))+(((-1.0)*x15050))+((x15042*x15058))+((r10*x15046))+((r11*x15052))+(((-1.0)*r12*sj3*x15056))+(((-1.0)*sj3*x15041*x15055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15060=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15060;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15060);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15061=((1.0)*cj5);
IkReal x15062=((((-1.0)*r21*x15061))+(((-1.0)*r20*sj5)));
j4eval[0]=x15062;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15061))+((r11*sj5))))));
j4eval[2]=IKsign(x15062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15063=cj5*cj5;
IkReal x15064=(cj3*r01);
IkReal x15065=(cj5*sj5);
IkReal x15066=((1.0)*cj3);
IkReal x15067=(((cj3*r00*r21*x15065))+((r20*x15064*x15065))+(((-1.0)*r21*x15064))+(((-1.0)*r02*r22*x15066))+(((-1.0)*r00*r20*x15063*x15066))+((r21*x15063*x15064)));
j4eval[0]=x15067;
j4eval[1]=IKsign(x15067);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15068=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15068;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15068);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15069=((1.0)*cj5);
IkReal x15070=((((-1.0)*r21*x15069))+(((-1.0)*r20*sj5)));
j4eval[0]=x15070;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15069))+((r11*sj5))))));
j4eval[2]=IKsign(x15070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15071=cj5*cj5;
IkReal x15072=r01*r01;
IkReal x15073=(cj5*r00);
IkReal x15074=(r01*sj5);
IkReal x15075=((((-2.0)*x15073*x15074))+((x15071*(r00*r00)))+(((-1.0)*x15071*x15072))+x15072+(r02*r02));
j4eval[0]=x15075;
j4eval[1]=((IKabs(r02))+(IKabs((x15073+(((-1.0)*x15074))))));
j4eval[2]=IKsign(x15075);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15076=cj5*cj5;
IkReal x15077=r01*r01;
IkReal x15078=(r01*sj5);
IkReal x15079=(cj5*r00);
CheckValue<IkReal> x15080=IKPowWithIntegerCheck(IKsign(((((-2.0)*x15078*x15079))+x15077+(((-1.0)*x15076*x15077))+(r02*r02)+((x15076*(r00*r00))))),-1);
if(!x15080.valid){
continue;
}
CheckValue<IkReal> x15081 = IKatan2WithCheck(IkReal((x15079+(((-1.0)*x15078)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15080.value)))+(x15081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15082=IKsin(j4);
IkReal x15083=IKcos(j4);
IkReal x15084=(cj5*r10);
IkReal x15085=(r01*sj5);
IkReal x15086=(cj5*r00);
IkReal x15087=(cj5*r20);
IkReal x15088=((1.0)*x15083);
IkReal x15089=((1.0)*x15082);
IkReal x15090=(sj5*x15082);
evalcond[0]=((((-1.0)*r22*x15088))+((r21*x15090))+(((-1.0)*x15087*x15089)));
evalcond[1]=((((-1.0)*r12*x15088))+(((-1.0)*x15084*x15089))+((r11*x15090)));
evalcond[2]=((((-1.0)*r02*x15089))+(((-1.0)*x15085*x15088))+((x15083*x15086)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15088))+(((-1.0)*x15086*x15089))+((x15082*x15085)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x15089))+((cj1*sj2))+(((-1.0)*r11*sj5*x15088))+((x15083*x15084)));
evalcond[5]=((((-1.0)*r22*x15089))+(((-1.0)*r21*sj5*x15088))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15083*x15087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15091=((1.0)*cj5);
CheckValue<IkReal> x15092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15091))+(((-1.0)*r20*sj5)))),-1);
if(!x15092.valid){
continue;
}
CheckValue<IkReal> x15093 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15091))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15092.value)))+(x15093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15094=IKsin(j4);
IkReal x15095=IKcos(j4);
IkReal x15096=(cj5*r10);
IkReal x15097=(r01*sj5);
IkReal x15098=(cj5*r00);
IkReal x15099=(cj5*r20);
IkReal x15100=((1.0)*x15095);
IkReal x15101=((1.0)*x15094);
IkReal x15102=(sj5*x15094);
evalcond[0]=((((-1.0)*x15099*x15101))+((r21*x15102))+(((-1.0)*r22*x15100)));
evalcond[1]=((((-1.0)*r12*x15100))+(((-1.0)*x15096*x15101))+((r11*x15102)));
evalcond[2]=((((-1.0)*x15097*x15100))+((x15095*x15098))+(((-1.0)*r02*x15101)));
evalcond[3]=((1.0)+(((-1.0)*x15098*x15101))+(((-1.0)*r02*x15100))+((x15094*x15097)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x15101))+(((-1.0)*r11*sj5*x15100))+((cj1*sj2))+((x15095*x15096)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*r22*x15101))+((sj1*sj2))+(((-1.0)*r21*sj5*x15100))+((x15095*x15099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15103 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15103.valid){
continue;
}
CheckValue<IkReal> x15104=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15103.value)+(((1.5707963267949)*(x15104.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15105=IKsin(j4);
IkReal x15106=IKcos(j4);
IkReal x15107=(cj5*r10);
IkReal x15108=(r01*sj5);
IkReal x15109=(cj5*r00);
IkReal x15110=(cj5*r20);
IkReal x15111=((1.0)*x15106);
IkReal x15112=((1.0)*x15105);
IkReal x15113=(sj5*x15105);
evalcond[0]=((((-1.0)*x15110*x15112))+(((-1.0)*r22*x15111))+((r21*x15113)));
evalcond[1]=(((r11*x15113))+(((-1.0)*r12*x15111))+(((-1.0)*x15107*x15112)));
evalcond[2]=(((x15106*x15109))+(((-1.0)*r02*x15112))+(((-1.0)*x15108*x15111)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15111))+(((-1.0)*x15109*x15112))+((x15105*x15108)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x15111))+((x15106*x15107))+((cj1*sj2))+(((-1.0)*r12*x15112)));
evalcond[5]=((((-1.0)*r21*sj5*x15111))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15106*x15110))+(((-1.0)*r22*x15112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15114=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15114;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15115=((1.0)*cj5);
IkReal x15116=((((-1.0)*r21*x15115))+(((-1.0)*r20*sj5)));
j4eval[0]=x15116;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15115))+((r11*sj5))))));
j4eval[2]=IKsign(x15116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15117=cj5*cj5;
IkReal x15118=r01*r01;
IkReal x15119=(r01*sj5);
IkReal x15120=(cj5*r00);
IkReal x15121=((((2.0)*x15119*x15120))+(((-1.0)*x15118))+(((-1.0)*(r02*r02)))+((x15117*x15118))+(((-1.0)*x15117*(r00*r00))));
j4eval[0]=x15121;
j4eval[1]=IKsign(x15121);
j4eval[2]=((IKabs(r02))+(IKabs((x15119+(((-1.0)*x15120))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15122=cj5*cj5;
IkReal x15123=r01*r01;
IkReal x15124=(r01*sj5);
IkReal x15125=(cj5*r00);
CheckValue<IkReal> x15126 = IKatan2WithCheck(IkReal((x15124+(((-1.0)*x15125)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15126.valid){
continue;
}
CheckValue<IkReal> x15127=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x15124*x15125))+(((-1.0)*x15122*(r00*r00)))+(((-1.0)*x15123))+((x15122*x15123)))),-1);
if(!x15127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15126.value)+(((1.5707963267949)*(x15127.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15128=IKcos(j4);
IkReal x15129=IKsin(j4);
IkReal x15130=(cj5*r00);
IkReal x15131=(cj5*r10);
IkReal x15132=(r21*sj5);
IkReal x15133=(cj5*r20);
IkReal x15134=((1.0)*x15128);
IkReal x15135=((1.0)*x15129);
IkReal x15136=(sj5*x15129);
IkReal x15137=(sj5*x15128);
evalcond[0]=(((r01*x15137))+((r02*x15129))+(((-1.0)*x15130*x15134)));
evalcond[1]=(((x15129*x15132))+(((-1.0)*x15133*x15135))+(((-1.0)*r22*x15134)));
evalcond[2]=((((-1.0)*r12*x15134))+((r11*x15136))+(((-1.0)*x15131*x15135)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15134))+((r01*x15136))+(((-1.0)*x15130*x15135)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x15129))+((r11*x15137))+(((-1.0)*x15131*x15134)));
evalcond[5]=(((x15128*x15132))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15133*x15134))+((r22*x15129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15138=((1.0)*cj5);
CheckValue<IkReal> x15139 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15138))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15139.valid){
continue;
}
CheckValue<IkReal> x15140=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15138))+(((-1.0)*r20*sj5)))),-1);
if(!x15140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15139.value)+(((1.5707963267949)*(x15140.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15141=IKcos(j4);
IkReal x15142=IKsin(j4);
IkReal x15143=(cj5*r00);
IkReal x15144=(cj5*r10);
IkReal x15145=(r21*sj5);
IkReal x15146=(cj5*r20);
IkReal x15147=((1.0)*x15141);
IkReal x15148=((1.0)*x15142);
IkReal x15149=(sj5*x15142);
IkReal x15150=(sj5*x15141);
evalcond[0]=(((r01*x15150))+((r02*x15142))+(((-1.0)*x15143*x15147)));
evalcond[1]=(((x15142*x15145))+(((-1.0)*x15146*x15148))+(((-1.0)*r22*x15147)));
evalcond[2]=(((r11*x15149))+(((-1.0)*x15144*x15148))+(((-1.0)*r12*x15147)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15147))+((r01*x15149))+(((-1.0)*x15143*x15148)));
evalcond[4]=(((cj2*sj1))+((r12*x15142))+((cj1*sj2))+(((-1.0)*x15144*x15147))+((r11*x15150)));
evalcond[5]=(((r22*x15142))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15146*x15147))+((x15141*x15145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15151 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15151.valid){
continue;
}
CheckValue<IkReal> x15152=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15151.value)+(((1.5707963267949)*(x15152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15153=IKcos(j4);
IkReal x15154=IKsin(j4);
IkReal x15155=(cj5*r00);
IkReal x15156=(cj5*r10);
IkReal x15157=(r21*sj5);
IkReal x15158=(cj5*r20);
IkReal x15159=((1.0)*x15153);
IkReal x15160=((1.0)*x15154);
IkReal x15161=(sj5*x15154);
IkReal x15162=(sj5*x15153);
evalcond[0]=((((-1.0)*x15155*x15159))+((r02*x15154))+((r01*x15162)));
evalcond[1]=(((x15154*x15157))+(((-1.0)*r22*x15159))+(((-1.0)*x15158*x15160)));
evalcond[2]=(((r11*x15161))+(((-1.0)*r12*x15159))+(((-1.0)*x15156*x15160)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15159))+(((-1.0)*x15155*x15160))+((r01*x15161)));
evalcond[4]=(((cj2*sj1))+((r11*x15162))+(((-1.0)*x15156*x15159))+((cj1*sj2))+((r12*x15154)));
evalcond[5]=(((x15153*x15157))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15154))+(((-1.0)*x15158*x15159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15164 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15164)==0){
continue;
}
IkReal x15163=pow(x15164,-0.5);
CheckValue<IkReal> x15165 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15165.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15165.value));
IkReal gconst61=((-1.0)*r11*x15163);
IkReal gconst62=(r10*x15163);
CheckValue<IkReal> x15166 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15166.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15166.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15169 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15169.valid){
continue;
}
IkReal x15167=((-1.0)*(x15169.value));
IkReal x15168=x15163;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15167;
IkReal gconst60=x15167;
IkReal gconst61=((-1.0)*r11*x15168);
IkReal gconst62=(r10*x15168);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15172 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15172.valid){
continue;
}
IkReal x15170=((-1.0)*(x15172.value));
IkReal x15171=x15163;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15170;
IkReal gconst60=x15170;
IkReal gconst61=((-1.0)*r11*x15171);
IkReal gconst62=(r10*x15171);
CheckValue<IkReal> x15180=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15180.valid){
continue;
}
IkReal x15173=x15180.value;
IkReal x15174=(sj3*x15173);
IkReal x15175=(r20*x15174);
IkReal x15176=(r00*x15174);
IkReal x15177=(r01*x15174);
IkReal x15178=(r21*x15174);
IkReal x15179=(r10*r11*x15174);
j4eval[0]=IKsign((((r00*x15175*(r10*r10)))+((r01*r10*r11*x15175))+((r10*r11*r21*x15176))+((r02*r22*sj3))+((r21*x15177*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15181=gconst61*gconst61;
IkReal x15182=gconst62*gconst62;
IkReal x15183=(cj3*r01);
IkReal x15184=(r22*sj3);
IkReal x15185=(gconst61*r00);
IkReal x15186=((1.0)*cj3);
IkReal x15187=(gconst62*r01);
IkReal x15188=((1.0)*sj3);
IkReal x15189=(gconst61*gconst62*r20);
IkReal x15190=(r21*x15181);
IkReal x15191=(r20*x15182);
CheckValue<IkReal> x15192 = IKatan2WithCheck(IkReal((((x15184*x15187))+((x15184*x15185)))),IkReal(((((-1.0)*gconst62*r20*x15185*x15188))+((r00*sj3*x15190))+(((-1.0)*r01*x15188*x15191))+((gconst61*r21*sj3*x15187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15192.valid){
continue;
}
CheckValue<IkReal> x15193=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15183*x15190))+(((-1.0)*r02*r22*x15186))+(((-1.0)*r00*x15186*x15191))+((cj3*gconst62*r21*x15185))+((x15183*x15189)))),-1);
if(!x15193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15192.value)+(((1.5707963267949)*(x15193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15194=IKsin(j4);
IkReal x15195=IKcos(j4);
IkReal x15196=(cj2*sj1);
IkReal x15197=(cj1*sj2);
IkReal x15198=(gconst61*sj3);
IkReal x15199=(cj3*gconst61);
IkReal x15200=(cj3*gconst62);
IkReal x15201=(sj1*sj2);
IkReal x15202=(gconst62*sj3);
IkReal x15203=(cj1*cj2);
IkReal x15204=((1.0)*x15195);
IkReal x15205=((1.0)*x15194);
IkReal x15206=(gconst61*x15194);
IkReal x15207=(cj3*x15194);
IkReal x15208=(x15197+x15196);
evalcond[0]=((((-1.0)*r22*x15204))+((r21*x15206))+(((-1.0)*gconst62*r20*x15205)));
evalcond[1]=(((r11*x15206))+(((-1.0)*r12*x15204))+(((-1.0)*gconst62*r10*x15205)));
evalcond[2]=((1.0)+((r01*x15206))+(((-1.0)*gconst62*r00*x15205))+(((-1.0)*r02*x15204)));
evalcond[3]=(((r00*x15198))+((r01*x15195*x15199))+((r01*x15202))+(((-1.0)*r00*x15200*x15204))+((r02*x15207)));
evalcond[4]=(((r00*x15199))+(((-1.0)*r02*sj3*x15205))+((r00*x15195*x15202))+(((-1.0)*r01*x15198*x15204))+((r01*x15200)));
evalcond[5]=((((-1.0)*r20*x15200*x15204))+x15208+((r22*x15207))+((r21*x15202))+((r20*x15198))+((r21*x15195*x15199)));
evalcond[6]=(((r11*x15195*x15199))+(((-1.0)*x15201))+((r10*x15198))+((r11*x15202))+x15203+((r12*x15207))+(((-1.0)*r10*x15200*x15204)));
evalcond[7]=((((-1.0)*r11*x15198*x15204))+((r10*x15199))+((r11*x15200))+x15208+((r10*x15195*x15202))+(((-1.0)*r12*sj3*x15205)));
evalcond[8]=((((-1.0)*r21*x15198*x15204))+(((-1.0)*x15203))+((r20*x15195*x15202))+x15201+((r21*x15200))+(((-1.0)*r22*sj3*x15205))+((r20*x15199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15209=gconst61*gconst61;
IkReal x15210=gconst62*gconst62;
IkReal x15211=(cj3*r22);
IkReal x15212=(gconst62*r01);
IkReal x15213=(gconst61*r00);
IkReal x15214=((1.0)*r20);
IkReal x15215=(cj3*r21);
IkReal x15216=(r21*sj3);
CheckValue<IkReal> x15217 = IKatan2WithCheck(IkReal((((x15211*x15213))+((x15211*x15212)))),IkReal(((((-1.0)*cj3*r01*x15210*x15214))+(((-1.0)*cj3*gconst62*x15213*x15214))+((r00*x15209*x15215))+((gconst61*x15212*x15215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15217.valid){
continue;
}
CheckValue<IkReal> x15218=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15210))+(((-1.0)*gconst61*sj3*x15212*x15214))+((r01*x15209*x15216))+(((-1.0)*gconst62*x15213*x15216))+((r02*r22*sj3)))),-1);
if(!x15218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15217.value)+(((1.5707963267949)*(x15218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15219=IKsin(j4);
IkReal x15220=IKcos(j4);
IkReal x15221=(cj2*sj1);
IkReal x15222=(cj1*sj2);
IkReal x15223=(gconst61*sj3);
IkReal x15224=(cj3*gconst61);
IkReal x15225=(cj3*gconst62);
IkReal x15226=(sj1*sj2);
IkReal x15227=(gconst62*sj3);
IkReal x15228=(cj1*cj2);
IkReal x15229=((1.0)*x15220);
IkReal x15230=((1.0)*x15219);
IkReal x15231=(gconst61*x15219);
IkReal x15232=(cj3*x15219);
IkReal x15233=(x15221+x15222);
evalcond[0]=((((-1.0)*gconst62*r20*x15230))+((r21*x15231))+(((-1.0)*r22*x15229)));
evalcond[1]=((((-1.0)*r12*x15229))+(((-1.0)*gconst62*r10*x15230))+((r11*x15231)));
evalcond[2]=((1.0)+((r01*x15231))+(((-1.0)*r02*x15229))+(((-1.0)*gconst62*r00*x15230)));
evalcond[3]=(((r02*x15232))+((r00*x15223))+(((-1.0)*r00*x15225*x15229))+((r01*x15220*x15224))+((r01*x15227)));
evalcond[4]=(((r00*x15224))+(((-1.0)*r02*sj3*x15230))+(((-1.0)*r01*x15223*x15229))+((r00*x15220*x15227))+((r01*x15225)));
evalcond[5]=(((r21*x15220*x15224))+x15233+(((-1.0)*r20*x15225*x15229))+((r20*x15223))+((r22*x15232))+((r21*x15227)));
evalcond[6]=((((-1.0)*x15226))+x15228+((r10*x15223))+((r12*x15232))+((r11*x15220*x15224))+(((-1.0)*r10*x15225*x15229))+((r11*x15227)));
evalcond[7]=((((-1.0)*r11*x15223*x15229))+(((-1.0)*r12*sj3*x15230))+x15233+((r10*x15224))+((r10*x15220*x15227))+((r11*x15225)));
evalcond[8]=((((-1.0)*x15228))+((r20*x15220*x15227))+x15226+((r20*x15224))+(((-1.0)*r22*sj3*x15230))+(((-1.0)*r21*x15223*x15229))+((r21*x15225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15234=((1.0)*gconst62);
CheckValue<IkReal> x15235=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15234)))),-1);
if(!x15235.valid){
continue;
}
CheckValue<IkReal> x15236 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15234))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15235.value)))+(x15236.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15237=IKsin(j4);
IkReal x15238=IKcos(j4);
IkReal x15239=(cj2*sj1);
IkReal x15240=(cj1*sj2);
IkReal x15241=(gconst61*sj3);
IkReal x15242=(cj3*gconst61);
IkReal x15243=(cj3*gconst62);
IkReal x15244=(sj1*sj2);
IkReal x15245=(gconst62*sj3);
IkReal x15246=(cj1*cj2);
IkReal x15247=((1.0)*x15238);
IkReal x15248=((1.0)*x15237);
IkReal x15249=(gconst61*x15237);
IkReal x15250=(cj3*x15237);
IkReal x15251=(x15239+x15240);
evalcond[0]=((((-1.0)*gconst62*r20*x15248))+((r21*x15249))+(((-1.0)*r22*x15247)));
evalcond[1]=((((-1.0)*gconst62*r10*x15248))+(((-1.0)*r12*x15247))+((r11*x15249)));
evalcond[2]=((1.0)+((r01*x15249))+(((-1.0)*r02*x15247))+(((-1.0)*gconst62*r00*x15248)));
evalcond[3]=(((r01*x15245))+((r00*x15241))+(((-1.0)*r00*x15243*x15247))+((r01*x15238*x15242))+((r02*x15250)));
evalcond[4]=(((r01*x15243))+((r00*x15242))+((r00*x15238*x15245))+(((-1.0)*r01*x15241*x15247))+(((-1.0)*r02*sj3*x15248)));
evalcond[5]=((((-1.0)*r20*x15243*x15247))+x15251+((r22*x15250))+((r21*x15245))+((r21*x15238*x15242))+((r20*x15241)));
evalcond[6]=((((-1.0)*x15244))+x15246+(((-1.0)*r10*x15243*x15247))+((r10*x15241))+((r11*x15238*x15242))+((r11*x15245))+((r12*x15250)));
evalcond[7]=((((-1.0)*r11*x15241*x15247))+(((-1.0)*r12*sj3*x15248))+x15251+((r10*x15238*x15245))+((r10*x15242))+((r11*x15243)));
evalcond[8]=((((-1.0)*x15246))+((r20*x15238*x15245))+x15244+((r21*x15243))+(((-1.0)*r22*sj3*x15248))+(((-1.0)*r21*x15241*x15247))+((r20*x15242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15253 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15253)==0){
continue;
}
IkReal x15252=pow(x15253,-0.5);
CheckValue<IkReal> x15254 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15254.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15254.value))));
IkReal gconst64=((1.0)*r11*x15252);
IkReal gconst65=((-1.0)*r10*x15252);
CheckValue<IkReal> x15255 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15255.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15255.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15258 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15258.valid){
continue;
}
IkReal x15256=((1.0)*(x15258.value));
IkReal x15257=x15252;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15256)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15256)));
IkReal gconst64=((1.0)*r11*x15257);
IkReal gconst65=((-1.0)*r10*x15257);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15259=gconst64*gconst64;
IkReal x15260=gconst65*gconst65;
IkReal x15261=(gconst65*r01);
IkReal x15262=(cj3*r22);
IkReal x15263=(gconst64*r00);
IkReal x15264=(cj3*r21);
IkReal x15265=((1.0)*gconst64*sj3);
IkReal x15266=((1.0)*cj3*r20);
CheckValue<IkReal> x15267=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15260))+(((-1.0)*gconst65*r21*sj3*x15263))+((r02*r22*sj3))+(((-1.0)*r20*x15261*x15265))+((r01*r21*sj3*x15259)))),-1);
if(!x15267.valid){
continue;
}
CheckValue<IkReal> x15268 = IKatan2WithCheck(IkReal((((x15261*x15262))+((x15262*x15263)))),IkReal((((gconst64*x15261*x15264))+(((-1.0)*gconst65*x15263*x15266))+((r00*x15259*x15264))+(((-1.0)*r01*x15260*x15266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15267.value)))+(x15268.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15269=IKsin(j4);
IkReal x15270=IKcos(j4);
IkReal x15271=(cj2*sj1);
IkReal x15272=(cj1*sj2);
IkReal x15273=(cj3*gconst64);
IkReal x15274=(gconst65*r21);
IkReal x15275=(sj1*sj2);
IkReal x15276=(gconst65*sj3);
IkReal x15277=(gconst64*sj3);
IkReal x15278=(cj3*gconst65);
IkReal x15279=(cj1*cj2);
IkReal x15280=((1.0)*x15270);
IkReal x15281=((1.0)*x15269);
IkReal x15282=(cj3*x15269);
IkReal x15283=(gconst64*x15269);
IkReal x15284=(x15272+x15271);
evalcond[0]=((((-1.0)*r22*x15280))+(((-1.0)*gconst65*r20*x15281))+((r21*x15283)));
evalcond[1]=((((-1.0)*r12*x15280))+(((-1.0)*gconst65*r10*x15281))+((r11*x15283)));
evalcond[2]=((1.0)+((r01*x15283))+(((-1.0)*r02*x15280))+(((-1.0)*gconst65*r00*x15281)));
evalcond[3]=((((-1.0)*r00*x15278*x15280))+((r02*x15282))+((r01*x15270*x15273))+((r01*x15276))+((r00*x15277)));
evalcond[4]=(((r00*x15270*x15276))+(((-1.0)*r01*x15277*x15280))+(((-1.0)*r02*sj3*x15281))+((r01*x15278))+((r00*x15273)));
evalcond[5]=(((r22*x15282))+((r21*x15270*x15273))+x15284+((r20*x15277))+((sj3*x15274))+(((-1.0)*r20*x15278*x15280)));
evalcond[6]=((((-1.0)*r10*x15278*x15280))+((r11*x15276))+x15279+((r10*x15277))+(((-1.0)*x15275))+((r12*x15282))+((r11*x15270*x15273)));
evalcond[7]=(((r10*x15270*x15276))+(((-1.0)*r11*x15277*x15280))+((r11*x15278))+(((-1.0)*r12*sj3*x15281))+x15284+((r10*x15273)));
evalcond[8]=((((-1.0)*r22*sj3*x15281))+x15275+((r20*x15273))+((cj3*x15274))+(((-1.0)*x15279))+(((-1.0)*r21*x15277*x15280))+((r20*x15270*x15276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15285=((1.0)*gconst65);
CheckValue<IkReal> x15286 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15285))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15286.valid){
continue;
}
CheckValue<IkReal> x15287=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x15285)))),-1);
if(!x15287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15286.value)+(((1.5707963267949)*(x15287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15288=IKsin(j4);
IkReal x15289=IKcos(j4);
IkReal x15290=(cj2*sj1);
IkReal x15291=(cj1*sj2);
IkReal x15292=(cj3*gconst64);
IkReal x15293=(gconst65*r21);
IkReal x15294=(sj1*sj2);
IkReal x15295=(gconst65*sj3);
IkReal x15296=(gconst64*sj3);
IkReal x15297=(cj3*gconst65);
IkReal x15298=(cj1*cj2);
IkReal x15299=((1.0)*x15289);
IkReal x15300=((1.0)*x15288);
IkReal x15301=(cj3*x15288);
IkReal x15302=(gconst64*x15288);
IkReal x15303=(x15290+x15291);
evalcond[0]=((((-1.0)*r22*x15299))+((r21*x15302))+(((-1.0)*gconst65*r20*x15300)));
evalcond[1]=((((-1.0)*gconst65*r10*x15300))+(((-1.0)*r12*x15299))+((r11*x15302)));
evalcond[2]=((1.0)+((r01*x15302))+(((-1.0)*gconst65*r00*x15300))+(((-1.0)*r02*x15299)));
evalcond[3]=(((r02*x15301))+((r01*x15289*x15292))+(((-1.0)*r00*x15297*x15299))+((r01*x15295))+((r00*x15296)));
evalcond[4]=((((-1.0)*r02*sj3*x15300))+(((-1.0)*r01*x15296*x15299))+((r01*x15297))+((r00*x15292))+((r00*x15289*x15295)));
evalcond[5]=(((r20*x15296))+((sj3*x15293))+x15303+((r22*x15301))+(((-1.0)*r20*x15297*x15299))+((r21*x15289*x15292)));
evalcond[6]=(((r10*x15296))+(((-1.0)*x15294))+((r11*x15295))+x15298+((r12*x15301))+(((-1.0)*r10*x15297*x15299))+((r11*x15289*x15292)));
evalcond[7]=(((r10*x15292))+(((-1.0)*r11*x15296*x15299))+((r11*x15297))+(((-1.0)*r12*sj3*x15300))+x15303+((r10*x15289*x15295)));
evalcond[8]=(((r20*x15292))+(((-1.0)*x15298))+x15294+(((-1.0)*r21*x15296*x15299))+((r20*x15289*x15295))+(((-1.0)*r22*sj3*x15300))+((cj3*x15293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15304=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15304);
rxp0_2=(py*r00);
rxp1_0=(r21*x15304);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15305=(r01*sj5);
IkReal x15306=((1.0)*cj5*r00);
j4eval[0]=(x15305+(((-1.0)*x15306)));
j4eval[1]=((((-1.0)*cj3*x15306))+((cj3*x15305)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15307=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15307);
rxp0_2=(py*r00);
rxp1_0=(r21*x15307);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15308=(cj5*r00);
IkReal x15309=(r01*sj5);
j4eval[0]=((((-1.0)*x15308))+x15309);
j4eval[1]=((((-1.0)*sj3*x15309))+((sj3*x15308)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15310=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15310);
rxp0_2=(py*r00);
rxp1_0=(r21*x15310);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15311=((1.0)*r00);
CheckValue<IkReal> x15312=IKPowWithIntegerCheck(cj3,-1);
if(!x15312.valid){
continue;
}
CheckValue<IkReal> x15313=IKPowWithIntegerCheck(r12,-1);
if(!x15313.valid){
continue;
}
CheckValue<IkReal> x15314=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15311))),-1);
if(!x15314.valid){
continue;
}
if( IKabs(((x15312.value)*(x15313.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15314.value)*(((((-1.0)*sj3*sj5*x15311))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15312.value)*(x15313.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15314.value)*(((((-1.0)*sj3*sj5*x15311))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15312.value)*(x15313.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15314.value)*(((((-1.0)*sj3*sj5*x15311))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15315=IKsin(j4);
IkReal x15316=IKcos(j4);
IkReal x15317=(cj2*sj1);
IkReal x15318=(cj1*sj2);
IkReal x15319=(sj1*sj2);
IkReal x15320=(cj5*sj3);
IkReal x15321=(cj3*cj5);
IkReal x15322=(r21*sj5);
IkReal x15323=(cj1*cj2);
IkReal x15324=(r00*sj5);
IkReal x15325=(r01*sj5);
IkReal x15326=(r20*sj5);
IkReal x15327=((1.0)*x15315);
IkReal x15328=(r20*x15316);
IkReal x15329=(r00*x15316);
IkReal x15330=(cj3*x15316);
IkReal x15331=(x15317+x15318);
IkReal x15332=((1.0)*sj3*x15316);
evalcond[0]=((-1.0)*r12*x15316);
evalcond[1]=(((x15315*x15322))+(((-1.0)*cj5*r20*x15327)));
evalcond[2]=((((-1.0)*x15319))+x15323+((cj3*r12*x15315)));
evalcond[3]=(x15331+(((-1.0)*r12*sj3*x15327)));
evalcond[4]=((1.0)+((x15315*x15325))+(((-1.0)*cj5*r00*x15327)));
evalcond[5]=((((-1.0)*x15321*x15329))+((r01*x15320))+((x15325*x15330))+((sj3*x15324)));
evalcond[6]=(((x15320*x15329))+((r01*x15321))+(((-1.0)*x15325*x15332))+((cj3*x15324)));
evalcond[7]=((((-1.0)*x15321*x15328))+x15331+((x15322*x15330))+((r21*x15320))+((sj3*x15326)));
evalcond[8]=(((x15320*x15328))+(((-1.0)*x15323))+x15319+((r21*x15321))+((cj3*x15326))+(((-1.0)*x15322*x15332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15333=((1.0)*r01);
IkReal x15334=(cj5*r00);
CheckValue<IkReal> x15335=IKPowWithIntegerCheck(((((-1.0)*x15334))+((r01*sj5))),-1);
if(!x15335.valid){
continue;
}
CheckValue<IkReal> x15336=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x15333))+((sj3*x15334))),-1);
if(!x15336.valid){
continue;
}
if( IKabs(((-1.0)*(x15335.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15336.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15333)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15335.value)))+IKsqr(((x15336.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15333))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15335.value)), ((x15336.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15333))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15337=IKsin(j4);
IkReal x15338=IKcos(j4);
IkReal x15339=(cj2*sj1);
IkReal x15340=(cj1*sj2);
IkReal x15341=(sj1*sj2);
IkReal x15342=(cj5*sj3);
IkReal x15343=(cj3*cj5);
IkReal x15344=(r21*sj5);
IkReal x15345=(cj1*cj2);
IkReal x15346=(r00*sj5);
IkReal x15347=(r01*sj5);
IkReal x15348=(r20*sj5);
IkReal x15349=((1.0)*x15337);
IkReal x15350=(r20*x15338);
IkReal x15351=(r00*x15338);
IkReal x15352=(cj3*x15338);
IkReal x15353=(x15340+x15339);
IkReal x15354=((1.0)*sj3*x15338);
evalcond[0]=((-1.0)*r12*x15338);
evalcond[1]=((((-1.0)*cj5*r20*x15349))+((x15337*x15344)));
evalcond[2]=(x15345+((cj3*r12*x15337))+(((-1.0)*x15341)));
evalcond[3]=((((-1.0)*r12*sj3*x15349))+x15353);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15349))+((x15337*x15347)));
evalcond[5]=(((r01*x15342))+((x15347*x15352))+((sj3*x15346))+(((-1.0)*x15343*x15351)));
evalcond[6]=(((r01*x15343))+(((-1.0)*x15347*x15354))+((x15342*x15351))+((cj3*x15346)));
evalcond[7]=(((r21*x15342))+((x15344*x15352))+x15353+((sj3*x15348))+(((-1.0)*x15343*x15350)));
evalcond[8]=((((-1.0)*x15344*x15354))+((r21*x15343))+((x15342*x15350))+((cj3*x15348))+x15341+(((-1.0)*x15345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15355=((1.0)*r00);
IkReal x15356=(r01*sj5);
CheckValue<IkReal> x15357=IKPowWithIntegerCheck(((((-1.0)*cj5*x15355))+x15356),-1);
if(!x15357.valid){
continue;
}
CheckValue<IkReal> x15358=IKPowWithIntegerCheck((((cj3*x15356))+(((-1.0)*cj3*cj5*x15355))),-1);
if(!x15358.valid){
continue;
}
if( IKabs(((-1.0)*(x15357.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15358.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15355)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15357.value)))+IKsqr(((x15358.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15355))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15357.value)), ((x15358.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15355))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15359=IKsin(j4);
IkReal x15360=IKcos(j4);
IkReal x15361=(cj2*sj1);
IkReal x15362=(cj1*sj2);
IkReal x15363=(sj1*sj2);
IkReal x15364=(cj5*sj3);
IkReal x15365=(cj3*cj5);
IkReal x15366=(r21*sj5);
IkReal x15367=(cj1*cj2);
IkReal x15368=(r00*sj5);
IkReal x15369=(r01*sj5);
IkReal x15370=(r20*sj5);
IkReal x15371=((1.0)*x15359);
IkReal x15372=(r20*x15360);
IkReal x15373=(r00*x15360);
IkReal x15374=(cj3*x15360);
IkReal x15375=(x15361+x15362);
IkReal x15376=((1.0)*sj3*x15360);
evalcond[0]=((-1.0)*r12*x15360);
evalcond[1]=(((x15359*x15366))+(((-1.0)*cj5*r20*x15371)));
evalcond[2]=(x15367+(((-1.0)*x15363))+((cj3*r12*x15359)));
evalcond[3]=((((-1.0)*r12*sj3*x15371))+x15375);
evalcond[4]=((1.0)+((x15359*x15369))+(((-1.0)*cj5*r00*x15371)));
evalcond[5]=(((x15369*x15374))+(((-1.0)*x15365*x15373))+((sj3*x15368))+((r01*x15364)));
evalcond[6]=((((-1.0)*x15369*x15376))+((cj3*x15368))+((x15364*x15373))+((r01*x15365)));
evalcond[7]=(((sj3*x15370))+x15375+((x15366*x15374))+(((-1.0)*x15365*x15372))+((r21*x15364)));
evalcond[8]=((((-1.0)*x15366*x15376))+((x15364*x15372))+x15363+(((-1.0)*x15367))+((cj3*x15370))+((r21*x15365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15377=cj5*cj5;
IkReal x15378=(cj3*r20);
IkReal x15379=(r21*sj3);
IkReal x15380=((1.0)*cj3);
IkReal x15381=(r01*r21);
IkReal x15382=(r01*sj3);
IkReal x15383=(r00*sj5);
IkReal x15384=(cj5*r01*sj5);
IkReal x15385=((1.0)*x15377);
CheckValue<IkReal> x15386 = IKatan2WithCheck(IkReal((((r22*sj3*x15383))+((cj5*r22*x15382)))),IkReal((((r00*x15379))+((x15379*x15384))+(((-1.0)*r20*x15382*x15385))+(((-1.0)*r00*x15379*x15385))+(((-1.0)*cj5*r20*sj3*x15383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15386.valid){
continue;
}
CheckValue<IkReal> x15387=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15378*x15385))+((cj3*x15377*x15381))+((x15378*x15384))+(((-1.0)*r02*r22*x15380))+(((-1.0)*x15380*x15381))+((cj3*cj5*r21*x15383)))),-1);
if(!x15387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15386.value)+(((1.5707963267949)*(x15387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15388=IKsin(j4);
IkReal x15389=IKcos(j4);
IkReal x15390=(cj2*sj1);
IkReal x15391=(cj1*sj2);
IkReal x15392=(r11*sj5);
IkReal x15393=(cj5*r10);
IkReal x15394=(sj1*sj2);
IkReal x15395=(cj5*r01);
IkReal x15396=(cj5*r00);
IkReal x15397=(cj3*sj5);
IkReal x15398=(r21*sj5);
IkReal x15399=(cj1*cj2);
IkReal x15400=(cj5*sj3);
IkReal x15401=(sj3*sj5);
IkReal x15402=(r01*sj5);
IkReal x15403=(cj3*cj5);
IkReal x15404=(cj5*r20);
IkReal x15405=((1.0)*x15389);
IkReal x15406=((1.0)*x15388);
IkReal x15407=(cj3*x15389);
IkReal x15408=(sj3*x15389);
IkReal x15409=(cj3*x15388);
IkReal x15410=(x15391+x15390);
evalcond[0]=((((-1.0)*x15404*x15406))+(((-1.0)*r22*x15405))+((x15388*x15398)));
evalcond[1]=((((-1.0)*r12*x15405))+(((-1.0)*x15393*x15406))+((x15388*x15392)));
evalcond[2]=((1.0)+((x15388*x15402))+(((-1.0)*x15396*x15406))+(((-1.0)*r02*x15405)));
evalcond[3]=((((-1.0)*cj3*x15396*x15405))+((r01*x15389*x15397))+((r00*x15401))+((sj3*x15395))+((r02*x15409)));
evalcond[4]=((((-1.0)*r02*sj3*x15406))+((cj3*x15395))+(((-1.0)*r01*x15401*x15405))+((r00*x15397))+((x15396*x15408)));
evalcond[5]=((((-1.0)*r20*x15403*x15405))+((r21*x15389*x15397))+((r20*x15401))+x15410+((r22*x15409))+((r21*x15400)));
evalcond[6]=(((r12*x15409))+((x15392*x15407))+x15399+((r10*x15401))+(((-1.0)*cj3*x15393*x15405))+(((-1.0)*x15394))+((r11*x15400)));
evalcond[7]=(((r10*x15397))+(((-1.0)*sj3*x15392*x15405))+((x15393*x15408))+x15410+(((-1.0)*r12*sj3*x15406))+((r11*x15403)));
evalcond[8]=(((r20*x15397))+x15394+((r20*x15389*x15400))+(((-1.0)*x15399))+(((-1.0)*r22*sj3*x15406))+(((-1.0)*sj3*x15398*x15405))+((r21*x15403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15411=((1.0)*cj5);
CheckValue<IkReal> x15412=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15411))+(((-1.0)*r20*sj5)))),-1);
if(!x15412.valid){
continue;
}
CheckValue<IkReal> x15413 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15411))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15412.value)))+(x15413.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15414=IKsin(j4);
IkReal x15415=IKcos(j4);
IkReal x15416=(cj2*sj1);
IkReal x15417=(cj1*sj2);
IkReal x15418=(r11*sj5);
IkReal x15419=(cj5*r10);
IkReal x15420=(sj1*sj2);
IkReal x15421=(cj5*r01);
IkReal x15422=(cj5*r00);
IkReal x15423=(cj3*sj5);
IkReal x15424=(r21*sj5);
IkReal x15425=(cj1*cj2);
IkReal x15426=(cj5*sj3);
IkReal x15427=(sj3*sj5);
IkReal x15428=(r01*sj5);
IkReal x15429=(cj3*cj5);
IkReal x15430=(cj5*r20);
IkReal x15431=((1.0)*x15415);
IkReal x15432=((1.0)*x15414);
IkReal x15433=(cj3*x15415);
IkReal x15434=(sj3*x15415);
IkReal x15435=(cj3*x15414);
IkReal x15436=(x15416+x15417);
evalcond[0]=((((-1.0)*r22*x15431))+((x15414*x15424))+(((-1.0)*x15430*x15432)));
evalcond[1]=((((-1.0)*x15419*x15432))+(((-1.0)*r12*x15431))+((x15414*x15418)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15431))+((x15414*x15428))+(((-1.0)*x15422*x15432)));
evalcond[3]=(((sj3*x15421))+((r02*x15435))+((r01*x15415*x15423))+(((-1.0)*cj3*x15422*x15431))+((r00*x15427)));
evalcond[4]=((((-1.0)*r01*x15427*x15431))+((cj3*x15421))+((x15422*x15434))+(((-1.0)*r02*sj3*x15432))+((r00*x15423)));
evalcond[5]=(((r20*x15427))+((r21*x15426))+(((-1.0)*r20*x15429*x15431))+((r22*x15435))+((r21*x15415*x15423))+x15436);
evalcond[6]=(((r10*x15427))+((r12*x15435))+(((-1.0)*x15420))+((r11*x15426))+((x15418*x15433))+x15425+(((-1.0)*cj3*x15419*x15431)));
evalcond[7]=(((r10*x15423))+(((-1.0)*r12*sj3*x15432))+((x15419*x15434))+(((-1.0)*sj3*x15418*x15431))+((r11*x15429))+x15436);
evalcond[8]=(((r20*x15415*x15426))+((r20*x15423))+(((-1.0)*r22*sj3*x15432))+((r21*x15429))+(((-1.0)*sj3*x15424*x15431))+(((-1.0)*x15425))+x15420);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15437 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15437.valid){
continue;
}
CheckValue<IkReal> x15438=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15437.value)+(((1.5707963267949)*(x15438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15439=IKsin(j4);
IkReal x15440=IKcos(j4);
IkReal x15441=(cj2*sj1);
IkReal x15442=(cj1*sj2);
IkReal x15443=(r11*sj5);
IkReal x15444=(cj5*r10);
IkReal x15445=(sj1*sj2);
IkReal x15446=(cj5*r01);
IkReal x15447=(cj5*r00);
IkReal x15448=(cj3*sj5);
IkReal x15449=(r21*sj5);
IkReal x15450=(cj1*cj2);
IkReal x15451=(cj5*sj3);
IkReal x15452=(sj3*sj5);
IkReal x15453=(r01*sj5);
IkReal x15454=(cj3*cj5);
IkReal x15455=(cj5*r20);
IkReal x15456=((1.0)*x15440);
IkReal x15457=((1.0)*x15439);
IkReal x15458=(cj3*x15440);
IkReal x15459=(sj3*x15440);
IkReal x15460=(cj3*x15439);
IkReal x15461=(x15441+x15442);
evalcond[0]=((((-1.0)*x15455*x15457))+(((-1.0)*r22*x15456))+((x15439*x15449)));
evalcond[1]=((((-1.0)*x15444*x15457))+(((-1.0)*r12*x15456))+((x15439*x15443)));
evalcond[2]=((1.0)+(((-1.0)*x15447*x15457))+((x15439*x15453))+(((-1.0)*r02*x15456)));
evalcond[3]=(((sj3*x15446))+((r02*x15460))+(((-1.0)*cj3*x15447*x15456))+((r00*x15452))+((r01*x15440*x15448)));
evalcond[4]=((((-1.0)*r01*x15452*x15456))+((r00*x15448))+(((-1.0)*r02*sj3*x15457))+((x15447*x15459))+((cj3*x15446)));
evalcond[5]=(((r20*x15452))+((r22*x15460))+((r21*x15440*x15448))+x15461+((r21*x15451))+(((-1.0)*r20*x15454*x15456)));
evalcond[6]=((((-1.0)*cj3*x15444*x15456))+((r11*x15451))+((r10*x15452))+((x15443*x15458))+x15450+((r12*x15460))+(((-1.0)*x15445)));
evalcond[7]=((((-1.0)*sj3*x15443*x15456))+((x15444*x15459))+((r11*x15454))+((r10*x15448))+x15461+(((-1.0)*r12*sj3*x15457)));
evalcond[8]=(((r20*x15448))+(((-1.0)*r22*sj3*x15457))+(((-1.0)*sj3*x15449*x15456))+x15445+((r20*x15440*x15451))+((r21*x15454))+(((-1.0)*x15450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15462=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15462);
rxp1_1=(px*r21);
rxp1_2=(r11*x15462);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15463=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15463);
rxp1_1=(px*r21);
rxp1_2=(r11*x15463);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15464=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x15464))+((r11*sj5)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15464)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15465=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15465);
rxp1_1=(px*r21);
rxp1_2=(r11*x15465);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15466=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15466);
rxp1_1=(px*r21);
rxp1_2=(r11*x15466);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15467=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15467);
rxp1_1=(px*r21);
rxp1_2=(r11*x15467);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15468=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15468);
rxp1_1=(px*r21);
rxp1_2=(r11*x15468);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15471=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15471.valid){
continue;
}
IkReal x15469=x15471.value;
IkReal x15470=(sj0*x15469);
cj4array[0]=(((cj2*sj1*x15470))+((cj1*sj2*x15470)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15472=IKsin(j4);
IkReal x15473=IKcos(j4);
IkReal x15474=(cj5*r20);
IkReal x15475=(r21*sj5);
IkReal x15476=((1.0)*x15472);
IkReal x15477=((1.0)*x15473);
evalcond[0]=((-1.0)*r02*x15472);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15477)));
evalcond[2]=(((x15472*x15475))+(((-1.0)*x15474*x15476)));
evalcond[3]=((((-1.0)*cj5*r10*x15476))+((r11*sj5*x15472)));
evalcond[4]=(((x15473*x15474))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15475*x15477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15479=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15479.valid){
continue;
}
IkReal x15478=x15479.value;
cj4array[0]=(((cj1*cj2*x15478))+(((-1.0)*sj1*sj2*x15478)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15480=IKsin(j4);
IkReal x15481=IKcos(j4);
IkReal x15482=(r11*sj5);
IkReal x15483=((1.0)*sj0);
IkReal x15484=((1.0)*x15481);
IkReal x15485=((1.0)*cj5*x15480);
evalcond[0]=((-1.0)*r02*x15480);
evalcond[1]=((((-1.0)*r02*x15484))+(((-1.0)*x15483)));
evalcond[2]=(((r21*sj5*x15480))+(((-1.0)*r20*x15485)));
evalcond[3]=(((x15480*x15482))+(((-1.0)*r10*x15485)));
evalcond[4]=((((-1.0)*cj1*sj2*x15483))+(((-1.0)*cj2*sj1*x15483))+(((-1.0)*x15482*x15484))+((cj5*r10*x15481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15486=IKPowWithIntegerCheck(r02,-1);
if(!x15486.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15486.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15487=IKsin(j4);
IkReal x15488=IKcos(j4);
IkReal x15489=((1.0)*sj0);
IkReal x15490=(cj5*x15488);
IkReal x15491=(sj5*x15487);
IkReal x15492=((1.0)*sj5*x15488);
IkReal x15493=((1.0)*cj5*x15487);
evalcond[0]=((-1.0)*r02*x15487);
evalcond[1]=((((-1.0)*r20*x15493))+((r21*x15491)));
evalcond[2]=(((r11*x15491))+(((-1.0)*r10*x15493)));
evalcond[3]=(((r20*x15490))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x15492)));
evalcond[4]=((((-1.0)*cj1*sj2*x15489))+((r10*x15490))+(((-1.0)*cj2*sj1*x15489))+(((-1.0)*r11*x15492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15494=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15494);
rxp1_1=(px*r21);
rxp1_2=(r11*x15494);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15495=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15495);
rxp1_1=(px*r21);
rxp1_2=(r11*x15495);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15496=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15496);
rxp1_1=(px*r21);
rxp1_2=(r11*x15496);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15499=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15499.valid){
continue;
}
IkReal x15497=x15499.value;
IkReal x15498=(sj0*x15497);
cj4array[0]=(((cj1*sj2*x15498))+((cj2*sj1*x15498)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15500=IKsin(j4);
IkReal x15501=IKcos(j4);
IkReal x15502=(r21*sj5);
IkReal x15503=((1.0)*cj5*r20);
evalcond[0]=(r02*x15500);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15501)));
evalcond[2]=(((x15500*x15502))+(((-1.0)*x15500*x15503)));
evalcond[3]=(((r11*sj5*x15500))+(((-1.0)*cj5*r10*x15500)));
evalcond[4]=(((x15501*x15502))+(((-1.0)*x15501*x15503))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15505=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15505.valid){
continue;
}
IkReal x15504=x15505.value;
cj4array[0]=(((cj1*cj2*x15504))+(((-1.0)*sj1*sj2*x15504)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15506=IKsin(j4);
IkReal x15507=IKcos(j4);
IkReal x15508=((1.0)*sj0);
IkReal x15509=((1.0)*cj5);
IkReal x15510=(sj5*x15506);
evalcond[0]=(r02*x15506);
evalcond[1]=((((-1.0)*x15508))+(((-1.0)*r02*x15507)));
evalcond[2]=((((-1.0)*r20*x15506*x15509))+((r21*x15510)));
evalcond[3]=(((r11*x15510))+(((-1.0)*r10*x15506*x15509)));
evalcond[4]=((((-1.0)*r10*x15507*x15509))+((r11*sj5*x15507))+(((-1.0)*cj1*sj2*x15508))+(((-1.0)*cj2*sj1*x15508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15511=IKPowWithIntegerCheck(r02,-1);
if(!x15511.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15511.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15512=IKsin(j4);
IkReal x15513=IKcos(j4);
IkReal x15514=((1.0)*cj1);
IkReal x15515=(r21*sj5);
IkReal x15516=((1.0)*cj5);
IkReal x15517=(r11*sj5);
evalcond[0]=(r02*x15512);
evalcond[1]=(((x15512*x15515))+(((-1.0)*r20*x15512*x15516)));
evalcond[2]=((((-1.0)*r10*x15512*x15516))+((x15512*x15517)));
evalcond[3]=((((-1.0)*cj2*x15514))+(((-1.0)*r20*x15513*x15516))+((sj1*sj2))+((x15513*x15515)));
evalcond[4]=((((-1.0)*r10*x15513*x15516))+(((-1.0)*sj0*sj2*x15514))+(((-1.0)*cj2*sj0*sj1))+((x15513*x15517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15518 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15518.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15518.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15519 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15519.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15519.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15520=((-1.0)*r10);
CheckValue<IkReal> x15522 = IKatan2WithCheck(IkReal(x15520),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15522.valid){
continue;
}
IkReal x15521=((-1.0)*(x15522.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15520);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15521;
IkReal gconst66=x15521;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15523=((-1.0)*r10);
CheckValue<IkReal> x15525 = IKatan2WithCheck(IkReal(x15523),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15525.valid){
continue;
}
IkReal x15524=((-1.0)*(x15525.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15523);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15524;
IkReal gconst66=x15524;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15526=((-1.0)*r10);
CheckValue<IkReal> x15528 = IKatan2WithCheck(IkReal(x15526),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15528.valid){
continue;
}
IkReal x15527=((-1.0)*(x15528.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15526);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15527;
IkReal gconst66=x15527;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15529=((1.0)*gconst67);
IkReal x15530=(cj1*cj2);
IkReal x15531=((1.0)*sj1*sj2);
CheckValue<IkReal> x15532=IKPowWithIntegerCheck(cj3,-1);
if(!x15532.valid){
continue;
}
CheckValue<IkReal> x15533=IKPowWithIntegerCheck(r02,-1);
if(!x15533.valid){
continue;
}
CheckValue<IkReal> x15534=IKPowWithIntegerCheck((((gconst68*r20*sj3))+(((-1.0)*r21*sj3*x15529))),-1);
if(!x15534.valid){
continue;
}
if( IKabs(((x15532.value)*(x15533.value)*(((((-1.0)*cj0*x15531))+((cj0*x15530)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15534.value)*(((((-1.0)*x15531))+x15530+(((-1.0)*cj3*r20*x15529))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15532.value)*(x15533.value)*(((((-1.0)*cj0*x15531))+((cj0*x15530))))))+IKsqr(((x15534.value)*(((((-1.0)*x15531))+x15530+(((-1.0)*cj3*r20*x15529))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15532.value)*(x15533.value)*(((((-1.0)*cj0*x15531))+((cj0*x15530))))), ((x15534.value)*(((((-1.0)*x15531))+x15530+(((-1.0)*cj3*r20*x15529))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15535=IKsin(j4);
IkReal x15536=IKcos(j4);
IkReal x15537=(sj1*sj2);
IkReal x15538=(gconst68*sj3);
IkReal x15539=(gconst67*r11);
IkReal x15540=(gconst67*sj3);
IkReal x15541=((1.0)*gconst68);
IkReal x15542=(cj2*sj1);
IkReal x15543=((1.0)*cj0);
IkReal x15544=((1.0)*sj0);
IkReal x15545=(cj3*gconst67);
IkReal x15546=(cj3*gconst68);
IkReal x15547=(cj1*sj2);
IkReal x15548=(gconst67*r21);
IkReal x15549=((1.0)*cj1*cj2);
IkReal x15550=(cj3*x15536);
IkReal x15551=((1.0)*x15536);
IkReal x15552=(r02*x15535);
evalcond[0]=((((-1.0)*x15544))+(((-1.0)*r02*x15551)));
evalcond[1]=((((-1.0)*r20*x15535*x15541))+((x15535*x15548)));
evalcond[2]=(((x15535*x15539))+cj0+(((-1.0)*r10*x15535*x15541)));
evalcond[3]=((((-1.0)*cj1*cj2*x15543))+((cj3*x15552))+((cj0*x15537)));
evalcond[4]=((((-1.0)*x15542*x15543))+(((-1.0)*x15543*x15547))+(((-1.0)*sj3*x15552)));
evalcond[5]=((((-1.0)*r20*x15541*x15550))+((r20*x15540))+((r21*x15538))+x15547+x15542+((r21*x15536*x15545)));
evalcond[6]=(((r20*x15545))+((r20*x15536*x15538))+(((-1.0)*x15549))+((r21*x15546))+x15537+(((-1.0)*r21*x15540*x15551)));
evalcond[7]=((((-1.0)*cj1*cj2*x15544))+((x15539*x15550))+((r10*x15540))+((sj0*x15537))+(((-1.0)*r10*x15541*x15550))+((r11*x15538)));
evalcond[8]=((((-1.0)*x15542*x15544))+((r10*x15545))+(((-1.0)*sj3*x15539*x15551))+((r10*x15536*x15538))+(((-1.0)*x15544*x15547))+((r11*x15546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15555=IKPowWithIntegerCheck(r02,-1);
if(!x15555.valid){
continue;
}
IkReal x15553=x15555.value;
IkReal x15554=((1.0)*cj0);
CheckValue<IkReal> x15556=IKPowWithIntegerCheck(sj3,-1);
if(!x15556.valid){
continue;
}
if( IKabs((x15553*(x15556.value)*(((((-1.0)*cj1*sj2*x15554))+(((-1.0)*cj2*sj1*x15554)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15553)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15553*(x15556.value)*(((((-1.0)*cj1*sj2*x15554))+(((-1.0)*cj2*sj1*x15554))))))+IKsqr(((-1.0)*sj0*x15553))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15553*(x15556.value)*(((((-1.0)*cj1*sj2*x15554))+(((-1.0)*cj2*sj1*x15554))))), ((-1.0)*sj0*x15553));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15557=IKsin(j4);
IkReal x15558=IKcos(j4);
IkReal x15559=(sj1*sj2);
IkReal x15560=(gconst68*sj3);
IkReal x15561=(gconst67*r11);
IkReal x15562=(gconst67*sj3);
IkReal x15563=((1.0)*gconst68);
IkReal x15564=(cj2*sj1);
IkReal x15565=((1.0)*cj0);
IkReal x15566=((1.0)*sj0);
IkReal x15567=(cj3*gconst67);
IkReal x15568=(cj3*gconst68);
IkReal x15569=(cj1*sj2);
IkReal x15570=(gconst67*r21);
IkReal x15571=((1.0)*cj1*cj2);
IkReal x15572=(cj3*x15558);
IkReal x15573=((1.0)*x15558);
IkReal x15574=(r02*x15557);
evalcond[0]=((((-1.0)*r02*x15573))+(((-1.0)*x15566)));
evalcond[1]=((((-1.0)*r20*x15557*x15563))+((x15557*x15570)));
evalcond[2]=(cj0+(((-1.0)*r10*x15557*x15563))+((x15557*x15561)));
evalcond[3]=((((-1.0)*cj1*cj2*x15565))+((cj0*x15559))+((cj3*x15574)));
evalcond[4]=((((-1.0)*x15564*x15565))+(((-1.0)*x15565*x15569))+(((-1.0)*sj3*x15574)));
evalcond[5]=((((-1.0)*r20*x15563*x15572))+((r21*x15560))+((r20*x15562))+((r21*x15558*x15567))+x15569+x15564);
evalcond[6]=(((r21*x15568))+((r20*x15558*x15560))+(((-1.0)*r21*x15562*x15573))+((r20*x15567))+x15559+(((-1.0)*x15571)));
evalcond[7]=(((x15561*x15572))+(((-1.0)*r10*x15563*x15572))+((sj0*x15559))+(((-1.0)*cj1*cj2*x15566))+((r10*x15562))+((r11*x15560)));
evalcond[8]=(((r10*x15567))+(((-1.0)*x15566*x15569))+(((-1.0)*x15564*x15566))+(((-1.0)*sj3*x15561*x15573))+((r11*x15568))+((r10*x15558*x15560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15576=IKPowWithIntegerCheck(r02,-1);
if(!x15576.valid){
continue;
}
IkReal x15575=x15576.value;
CheckValue<IkReal> x15577=IKPowWithIntegerCheck(cj3,-1);
if(!x15577.valid){
continue;
}
if( IKabs((x15575*(x15577.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15575)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15575*(x15577.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15575))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15575*(x15577.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15575));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15578=IKsin(j4);
IkReal x15579=IKcos(j4);
IkReal x15580=(sj1*sj2);
IkReal x15581=(gconst68*sj3);
IkReal x15582=(gconst67*r11);
IkReal x15583=(gconst67*sj3);
IkReal x15584=((1.0)*gconst68);
IkReal x15585=(cj2*sj1);
IkReal x15586=((1.0)*cj0);
IkReal x15587=((1.0)*sj0);
IkReal x15588=(cj3*gconst67);
IkReal x15589=(cj3*gconst68);
IkReal x15590=(cj1*sj2);
IkReal x15591=(gconst67*r21);
IkReal x15592=((1.0)*cj1*cj2);
IkReal x15593=(cj3*x15579);
IkReal x15594=((1.0)*x15579);
IkReal x15595=(r02*x15578);
evalcond[0]=((((-1.0)*x15587))+(((-1.0)*r02*x15594)));
evalcond[1]=((((-1.0)*r20*x15578*x15584))+((x15578*x15591)));
evalcond[2]=(cj0+((x15578*x15582))+(((-1.0)*r10*x15578*x15584)));
evalcond[3]=(((cj0*x15580))+(((-1.0)*cj1*cj2*x15586))+((cj3*x15595)));
evalcond[4]=((((-1.0)*x15585*x15586))+(((-1.0)*x15586*x15590))+(((-1.0)*sj3*x15595)));
evalcond[5]=((((-1.0)*r20*x15584*x15593))+x15590+x15585+((r20*x15583))+((r21*x15579*x15588))+((r21*x15581)));
evalcond[6]=(((r20*x15579*x15581))+(((-1.0)*r21*x15583*x15594))+(((-1.0)*x15592))+x15580+((r20*x15588))+((r21*x15589)));
evalcond[7]=((((-1.0)*r10*x15584*x15593))+((r11*x15581))+(((-1.0)*cj1*cj2*x15587))+((x15582*x15593))+((r10*x15583))+((sj0*x15580)));
evalcond[8]=(((r11*x15589))+((r10*x15588))+(((-1.0)*x15585*x15587))+(((-1.0)*x15587*x15590))+(((-1.0)*sj3*x15582*x15594))+((r10*x15579*x15581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15596=((-1.0)*r10);
CheckValue<IkReal> x15597 = IKatan2WithCheck(IkReal(x15596),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15597.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15597.value))));
IkReal gconst70=x15596;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15598 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15598.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15598.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15599=((-1.0)*r10);
IkReal x15600=((-1.0)*r11);
CheckValue<IkReal> x15602 = IKatan2WithCheck(IkReal(x15599),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15602.valid){
continue;
}
IkReal x15601=((1.0)*(x15602.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15599);
rxp1_1=(px*r21);
rxp1_2=(px*x15600);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15601)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15601)));
IkReal gconst70=x15599;
IkReal gconst71=x15600;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15603=((-1.0)*r10);
IkReal x15604=((-1.0)*r11);
CheckValue<IkReal> x15606 = IKatan2WithCheck(IkReal(x15603),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15606.valid){
continue;
}
IkReal x15605=((1.0)*(x15606.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15603);
rxp1_1=(px*r21);
rxp1_2=(px*x15604);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15605)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15605)));
IkReal gconst70=x15603;
IkReal gconst71=x15604;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15607=((-1.0)*r10);
IkReal x15608=((-1.0)*r11);
CheckValue<IkReal> x15610 = IKatan2WithCheck(IkReal(x15607),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15610.valid){
continue;
}
IkReal x15609=((1.0)*(x15610.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15607);
rxp1_1=(px*r21);
rxp1_2=(px*x15608);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15609)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15609)));
IkReal gconst70=x15607;
IkReal gconst71=x15608;
IkReal x15611=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r20*x15611))+((r10*r21*x15611)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15612=((1.0)*r21);
IkReal x15613=(cj1*cj2);
IkReal x15614=((1.0)*sj1*sj2);
CheckValue<IkReal> x15615=IKPowWithIntegerCheck(cj3,-1);
if(!x15615.valid){
continue;
}
CheckValue<IkReal> x15616=IKPowWithIntegerCheck(r02,-1);
if(!x15616.valid){
continue;
}
CheckValue<IkReal> x15617=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15612))+((gconst71*r20*sj3))),-1);
if(!x15617.valid){
continue;
}
if( IKabs(((x15615.value)*(x15616.value)*((((cj0*x15613))+(((-1.0)*cj0*x15614)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15617.value)*(((((-1.0)*cj3*gconst71*x15612))+(((-1.0)*x15614))+x15613+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15615.value)*(x15616.value)*((((cj0*x15613))+(((-1.0)*cj0*x15614))))))+IKsqr(((x15617.value)*(((((-1.0)*cj3*gconst71*x15612))+(((-1.0)*x15614))+x15613+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15615.value)*(x15616.value)*((((cj0*x15613))+(((-1.0)*cj0*x15614))))), ((x15617.value)*(((((-1.0)*cj3*gconst71*x15612))+(((-1.0)*x15614))+x15613+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15618=IKsin(j4);
IkReal x15619=IKcos(j4);
IkReal x15620=(cj3*gconst70);
IkReal x15621=(sj1*sj2);
IkReal x15622=((1.0)*gconst71);
IkReal x15623=(gconst71*sj3);
IkReal x15624=(cj2*sj1);
IkReal x15625=((1.0)*sj0);
IkReal x15626=(gconst70*r11);
IkReal x15627=(gconst70*sj3);
IkReal x15628=((1.0)*cj0);
IkReal x15629=(cj3*gconst71);
IkReal x15630=(cj1*sj2);
IkReal x15631=((1.0)*cj1*cj2);
IkReal x15632=(r21*x15619);
IkReal x15633=(r10*x15619);
IkReal x15634=((1.0)*x15619);
IkReal x15635=(r02*x15618);
IkReal x15636=(r20*x15619);
evalcond[0]=((((-1.0)*x15625))+(((-1.0)*r02*x15634)));
evalcond[1]=(((gconst70*r21*x15618))+(((-1.0)*r20*x15618*x15622)));
evalcond[2]=(cj0+((x15618*x15626))+(((-1.0)*r10*x15618*x15622)));
evalcond[3]=(((cj3*x15635))+((cj0*x15621))+(((-1.0)*cj1*cj2*x15628)));
evalcond[4]=((((-1.0)*sj3*x15635))+(((-1.0)*x15628*x15630))+(((-1.0)*x15624*x15628)));
evalcond[5]=(((r21*x15623))+x15624+x15630+((r20*x15627))+((x15620*x15632))+(((-1.0)*cj3*x15622*x15636)));
evalcond[6]=(((r21*x15629))+x15621+((x15623*x15636))+((r20*x15620))+(((-1.0)*x15631))+(((-1.0)*x15627*x15632)));
evalcond[7]=(((sj0*x15621))+(((-1.0)*cj1*cj2*x15625))+((r11*x15619*x15620))+((r11*x15623))+(((-1.0)*cj3*x15622*x15633))+((r10*x15627)));
evalcond[8]=((((-1.0)*x15625*x15630))+(((-1.0)*sj3*x15626*x15634))+((x15623*x15633))+(((-1.0)*x15624*x15625))+((r11*x15629))+((r10*x15620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15639=IKPowWithIntegerCheck(r02,-1);
if(!x15639.valid){
continue;
}
IkReal x15637=x15639.value;
IkReal x15638=((1.0)*cj0);
CheckValue<IkReal> x15640=IKPowWithIntegerCheck(sj3,-1);
if(!x15640.valid){
continue;
}
if( IKabs((x15637*(x15640.value)*(((((-1.0)*cj2*sj1*x15638))+(((-1.0)*cj1*sj2*x15638)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15637)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15637*(x15640.value)*(((((-1.0)*cj2*sj1*x15638))+(((-1.0)*cj1*sj2*x15638))))))+IKsqr(((-1.0)*sj0*x15637))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15637*(x15640.value)*(((((-1.0)*cj2*sj1*x15638))+(((-1.0)*cj1*sj2*x15638))))), ((-1.0)*sj0*x15637));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15641=IKsin(j4);
IkReal x15642=IKcos(j4);
IkReal x15643=(cj3*gconst70);
IkReal x15644=(sj1*sj2);
IkReal x15645=((1.0)*gconst71);
IkReal x15646=(gconst71*sj3);
IkReal x15647=(cj2*sj1);
IkReal x15648=((1.0)*sj0);
IkReal x15649=(gconst70*r11);
IkReal x15650=(gconst70*sj3);
IkReal x15651=((1.0)*cj0);
IkReal x15652=(cj3*gconst71);
IkReal x15653=(cj1*sj2);
IkReal x15654=((1.0)*cj1*cj2);
IkReal x15655=(r21*x15642);
IkReal x15656=(r10*x15642);
IkReal x15657=((1.0)*x15642);
IkReal x15658=(r02*x15641);
IkReal x15659=(r20*x15642);
evalcond[0]=((((-1.0)*x15648))+(((-1.0)*r02*x15657)));
evalcond[1]=(((gconst70*r21*x15641))+(((-1.0)*r20*x15641*x15645)));
evalcond[2]=(cj0+((x15641*x15649))+(((-1.0)*r10*x15641*x15645)));
evalcond[3]=(((cj3*x15658))+(((-1.0)*cj1*cj2*x15651))+((cj0*x15644)));
evalcond[4]=((((-1.0)*x15647*x15651))+(((-1.0)*x15651*x15653))+(((-1.0)*sj3*x15658)));
evalcond[5]=((((-1.0)*cj3*x15645*x15659))+x15647+x15653+((r21*x15646))+((r20*x15650))+((x15643*x15655)));
evalcond[6]=(((x15646*x15659))+x15644+(((-1.0)*x15654))+(((-1.0)*x15650*x15655))+((r21*x15652))+((r20*x15643)));
evalcond[7]=(((r10*x15650))+(((-1.0)*cj3*x15645*x15656))+((r11*x15646))+((sj0*x15644))+((r11*x15642*x15643))+(((-1.0)*cj1*cj2*x15648)));
evalcond[8]=(((x15646*x15656))+(((-1.0)*x15647*x15648))+(((-1.0)*x15648*x15653))+(((-1.0)*sj3*x15649*x15657))+((r11*x15652))+((r10*x15643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15661=IKPowWithIntegerCheck(r02,-1);
if(!x15661.valid){
continue;
}
IkReal x15660=x15661.value;
CheckValue<IkReal> x15662=IKPowWithIntegerCheck(cj3,-1);
if(!x15662.valid){
continue;
}
if( IKabs((x15660*(x15662.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15660)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15660*(x15662.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15660))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15660*(x15662.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15660));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15663=IKsin(j4);
IkReal x15664=IKcos(j4);
IkReal x15665=(cj3*gconst70);
IkReal x15666=(sj1*sj2);
IkReal x15667=((1.0)*gconst71);
IkReal x15668=(gconst71*sj3);
IkReal x15669=(cj2*sj1);
IkReal x15670=((1.0)*sj0);
IkReal x15671=(gconst70*r11);
IkReal x15672=(gconst70*sj3);
IkReal x15673=((1.0)*cj0);
IkReal x15674=(cj3*gconst71);
IkReal x15675=(cj1*sj2);
IkReal x15676=((1.0)*cj1*cj2);
IkReal x15677=(r21*x15664);
IkReal x15678=(r10*x15664);
IkReal x15679=((1.0)*x15664);
IkReal x15680=(r02*x15663);
IkReal x15681=(r20*x15664);
evalcond[0]=((((-1.0)*x15670))+(((-1.0)*r02*x15679)));
evalcond[1]=(((gconst70*r21*x15663))+(((-1.0)*r20*x15663*x15667)));
evalcond[2]=(cj0+((x15663*x15671))+(((-1.0)*r10*x15663*x15667)));
evalcond[3]=(((cj3*x15680))+(((-1.0)*cj1*cj2*x15673))+((cj0*x15666)));
evalcond[4]=((((-1.0)*sj3*x15680))+(((-1.0)*x15673*x15675))+(((-1.0)*x15669*x15673)));
evalcond[5]=(((r20*x15672))+x15669+x15675+((r21*x15668))+((x15665*x15677))+(((-1.0)*cj3*x15667*x15681)));
evalcond[6]=((((-1.0)*x15676))+((x15668*x15681))+((r20*x15665))+x15666+((r21*x15674))+(((-1.0)*x15672*x15677)));
evalcond[7]=((((-1.0)*cj3*x15667*x15678))+((r11*x15664*x15665))+((r10*x15672))+((r11*x15668))+(((-1.0)*cj1*cj2*x15670))+((sj0*x15666)));
evalcond[8]=((((-1.0)*sj3*x15671*x15679))+((r10*x15665))+((x15668*x15678))+((r11*x15674))+(((-1.0)*x15670*x15675))+(((-1.0)*x15669*x15670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15683=IKPowWithIntegerCheck(r02,-1);
if(!x15683.valid){
continue;
}
IkReal x15682=x15683.value;
CheckValue<IkReal> x15684=IKPowWithIntegerCheck(cj3,-1);
if(!x15684.valid){
continue;
}
if( IKabs((x15682*(x15684.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15682)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15682*(x15684.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15682))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15682*(x15684.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15682));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15685=IKsin(j4);
IkReal x15686=IKcos(j4);
IkReal x15687=(cj5*r10);
IkReal x15688=(sj1*sj2);
IkReal x15689=(cj5*sj3);
IkReal x15690=(r11*sj5);
IkReal x15691=(cj3*cj5);
IkReal x15692=(cj3*sj5);
IkReal x15693=(r21*sj5);
IkReal x15694=(cj2*sj1);
IkReal x15695=((1.0)*sj0);
IkReal x15696=((1.0)*cj0);
IkReal x15697=(sj3*sj5);
IkReal x15698=(cj1*sj2);
IkReal x15699=((1.0)*cj1*cj2);
IkReal x15700=((1.0)*x15685);
IkReal x15701=(r20*x15686);
IkReal x15702=(cj3*x15686);
IkReal x15703=(sj3*x15686);
evalcond[0]=((((-1.0)*x15695))+(((-1.0)*r02*x15686)));
evalcond[1]=((((-1.0)*cj5*r20*x15700))+((x15685*x15693)));
evalcond[2]=((((-1.0)*x15687*x15700))+cj0+((x15685*x15690)));
evalcond[3]=(((cj3*r02*x15685))+((cj0*x15688))+(((-1.0)*cj1*cj2*x15696)));
evalcond[4]=((((-1.0)*r02*sj3*x15700))+(((-1.0)*x15696*x15698))+(((-1.0)*x15694*x15696)));
evalcond[5]=(((r20*x15697))+x15698+x15694+((r21*x15686*x15692))+((r21*x15689))+(((-1.0)*x15691*x15701)));
evalcond[6]=((((-1.0)*x15699))+((x15689*x15701))+((r20*x15692))+((r21*x15691))+x15688+(((-1.0)*x15693*x15703)));
evalcond[7]=(((r10*x15697))+((r11*x15689))+((x15690*x15702))+(((-1.0)*x15687*x15702))+(((-1.0)*cj1*cj2*x15695))+((sj0*x15688)));
evalcond[8]=(((r10*x15692))+((r11*x15691))+(((-1.0)*x15690*x15703))+(((-1.0)*x15694*x15695))+(((-1.0)*x15695*x15698))+((x15687*x15703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15704=((1.0)*sj3);
IkReal x15705=((1.0)*cj5);
CheckValue<IkReal> x15706=IKPowWithIntegerCheck(((((-1.0)*r10*x15705))+((r11*sj5))),-1);
if(!x15706.valid){
continue;
}
CheckValue<IkReal> x15707=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15705))),-1);
if(!x15707.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15706.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15707.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15704))+(((-1.0)*r20*sj5*x15704)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15706.value)))+IKsqr(((x15707.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15704))+(((-1.0)*r20*sj5*x15704))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15706.value)), ((x15707.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15704))+(((-1.0)*r20*sj5*x15704))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15708=IKsin(j4);
IkReal x15709=IKcos(j4);
IkReal x15710=(cj5*r10);
IkReal x15711=(sj1*sj2);
IkReal x15712=(cj5*sj3);
IkReal x15713=(r11*sj5);
IkReal x15714=(cj3*cj5);
IkReal x15715=(cj3*sj5);
IkReal x15716=(r21*sj5);
IkReal x15717=(cj2*sj1);
IkReal x15718=((1.0)*sj0);
IkReal x15719=((1.0)*cj0);
IkReal x15720=(sj3*sj5);
IkReal x15721=(cj1*sj2);
IkReal x15722=((1.0)*cj1*cj2);
IkReal x15723=((1.0)*x15708);
IkReal x15724=(r20*x15709);
IkReal x15725=(cj3*x15709);
IkReal x15726=(sj3*x15709);
evalcond[0]=((((-1.0)*x15718))+(((-1.0)*r02*x15709)));
evalcond[1]=(((x15708*x15716))+(((-1.0)*cj5*r20*x15723)));
evalcond[2]=((((-1.0)*x15710*x15723))+((x15708*x15713))+cj0);
evalcond[3]=((((-1.0)*cj1*cj2*x15719))+((cj0*x15711))+((cj3*r02*x15708)));
evalcond[4]=((((-1.0)*r02*sj3*x15723))+(((-1.0)*x15717*x15719))+(((-1.0)*x15719*x15721)));
evalcond[5]=(((r21*x15709*x15715))+((r20*x15720))+(((-1.0)*x15714*x15724))+((r21*x15712))+x15721+x15717);
evalcond[6]=((((-1.0)*x15722))+(((-1.0)*x15716*x15726))+((r20*x15715))+((r21*x15714))+x15711+((x15712*x15724)));
evalcond[7]=((((-1.0)*x15710*x15725))+(((-1.0)*cj1*cj2*x15718))+((x15713*x15725))+((r10*x15720))+((sj0*x15711))+((r11*x15712)));
evalcond[8]=((((-1.0)*x15713*x15726))+((x15710*x15726))+(((-1.0)*x15717*x15718))+(((-1.0)*x15718*x15721))+((r11*x15714))+((r10*x15715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15727=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15727.valid){
continue;
}
CheckValue<IkReal> x15728=IKPowWithIntegerCheck(r02,-1);
if(!x15728.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15727.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15728.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15727.value)))+IKsqr(((-1.0)*sj0*(x15728.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15727.value)), ((-1.0)*sj0*(x15728.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15729=IKsin(j4);
IkReal x15730=IKcos(j4);
IkReal x15731=(cj5*r10);
IkReal x15732=(sj1*sj2);
IkReal x15733=(cj5*sj3);
IkReal x15734=(r11*sj5);
IkReal x15735=(cj3*cj5);
IkReal x15736=(cj3*sj5);
IkReal x15737=(r21*sj5);
IkReal x15738=(cj2*sj1);
IkReal x15739=((1.0)*sj0);
IkReal x15740=((1.0)*cj0);
IkReal x15741=(sj3*sj5);
IkReal x15742=(cj1*sj2);
IkReal x15743=((1.0)*cj1*cj2);
IkReal x15744=((1.0)*x15729);
IkReal x15745=(r20*x15730);
IkReal x15746=(cj3*x15730);
IkReal x15747=(sj3*x15730);
evalcond[0]=((((-1.0)*x15739))+(((-1.0)*r02*x15730)));
evalcond[1]=(((x15729*x15737))+(((-1.0)*cj5*r20*x15744)));
evalcond[2]=((((-1.0)*x15731*x15744))+cj0+((x15729*x15734)));
evalcond[3]=(((cj3*r02*x15729))+((cj0*x15732))+(((-1.0)*cj1*cj2*x15740)));
evalcond[4]=((((-1.0)*r02*sj3*x15744))+(((-1.0)*x15738*x15740))+(((-1.0)*x15740*x15742)));
evalcond[5]=(((r21*x15733))+(((-1.0)*x15735*x15745))+x15742+x15738+((r20*x15741))+((r21*x15730*x15736)));
evalcond[6]=(((r20*x15736))+(((-1.0)*x15743))+((r21*x15735))+(((-1.0)*x15737*x15747))+x15732+((x15733*x15745)));
evalcond[7]=(((r11*x15733))+((x15734*x15746))+(((-1.0)*cj1*cj2*x15739))+((sj0*x15732))+(((-1.0)*x15731*x15746))+((r10*x15741)));
evalcond[8]=(((r11*x15735))+(((-1.0)*x15734*x15747))+(((-1.0)*x15739*x15742))+(((-1.0)*x15738*x15739))+((x15731*x15747))+((r10*x15736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15748=((1.0)*sj0);
IkReal x15749=((1.0)*cj0);
CheckValue<IkReal> x15750 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15749))+(((-1.0)*r12*x15748)))),IkReal(((((-1.0)*r11*sj5*x15748))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15750.valid){
continue;
}
CheckValue<IkReal> x15751=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15750.value)+(((1.5707963267949)*(x15751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15752=IKsin(j4);
IkReal x15753=IKcos(j4);
IkReal x15754=(r11*sj5);
IkReal x15755=(cj5*r10);
IkReal x15756=(sj1*sj2);
IkReal x15757=(cj5*sj3);
IkReal x15758=((1.0)*sj0);
IkReal x15759=(cj3*cj5);
IkReal x15760=(cj3*sj5);
IkReal x15761=(r21*sj5);
IkReal x15762=(cj2*sj1);
IkReal x15763=(sj3*sj5);
IkReal x15764=(r01*sj5);
IkReal x15765=((1.0)*cj0);
IkReal x15766=(cj1*sj2);
IkReal x15767=((1.0)*x15753);
IkReal x15768=((1.0)*x15752);
IkReal x15769=(cj3*x15753);
IkReal x15770=((1.0)*cj1*cj2);
IkReal x15771=(cj3*x15752);
evalcond[0]=((((-1.0)*r22*x15767))+((x15752*x15761))+(((-1.0)*cj5*r20*x15768)));
evalcond[1]=(cj0+((x15752*x15754))+(((-1.0)*x15755*x15768))+(((-1.0)*r12*x15767)));
evalcond[2]=((((-1.0)*cj5*r00*x15768))+(((-1.0)*x15758))+((x15752*x15764))+(((-1.0)*r02*x15767)));
evalcond[3]=(((r22*x15771))+((r21*x15757))+((r21*x15753*x15760))+((r20*x15763))+x15766+x15762+(((-1.0)*r20*x15759*x15767)));
evalcond[4]=(((r21*x15759))+(((-1.0)*sj3*x15761*x15767))+((r20*x15753*x15757))+(((-1.0)*x15770))+((r20*x15760))+x15756+(((-1.0)*r22*sj3*x15768)));
evalcond[5]=(((r01*x15753*x15760))+((r02*x15771))+((r00*x15763))+(((-1.0)*cj1*cj2*x15765))+((r01*x15757))+(((-1.0)*r00*x15759*x15767))+((cj0*x15756)));
evalcond[6]=(((r10*x15763))+((x15754*x15769))+((sj0*x15756))+(((-1.0)*cj3*x15755*x15767))+((r12*x15771))+((r11*x15757))+(((-1.0)*cj1*cj2*x15758)));
evalcond[7]=((((-1.0)*r02*sj3*x15768))+((r00*x15753*x15757))+((r00*x15760))+(((-1.0)*r01*x15763*x15767))+((r01*x15759))+(((-1.0)*x15765*x15766))+(((-1.0)*x15762*x15765)));
evalcond[8]=(((r10*x15760))+((sj3*x15753*x15755))+(((-1.0)*r12*sj3*x15768))+(((-1.0)*sj3*x15754*x15767))+((r11*x15759))+(((-1.0)*x15758*x15766))+(((-1.0)*x15758*x15762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15772=((1.0)*cj5);
CheckValue<IkReal> x15773 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x15772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15773.valid){
continue;
}
CheckValue<IkReal> x15774=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15772)))),-1);
if(!x15774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15773.value)+(((1.5707963267949)*(x15774.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15775=IKsin(j4);
IkReal x15776=IKcos(j4);
IkReal x15777=(r11*sj5);
IkReal x15778=(cj5*r10);
IkReal x15779=(sj1*sj2);
IkReal x15780=(cj5*sj3);
IkReal x15781=((1.0)*sj0);
IkReal x15782=(cj3*cj5);
IkReal x15783=(cj3*sj5);
IkReal x15784=(r21*sj5);
IkReal x15785=(cj2*sj1);
IkReal x15786=(sj3*sj5);
IkReal x15787=(r01*sj5);
IkReal x15788=((1.0)*cj0);
IkReal x15789=(cj1*sj2);
IkReal x15790=((1.0)*x15776);
IkReal x15791=((1.0)*x15775);
IkReal x15792=(cj3*x15776);
IkReal x15793=((1.0)*cj1*cj2);
IkReal x15794=(cj3*x15775);
evalcond[0]=((((-1.0)*r22*x15790))+(((-1.0)*cj5*r20*x15791))+((x15775*x15784)));
evalcond[1]=(((x15775*x15777))+cj0+(((-1.0)*r12*x15790))+(((-1.0)*x15778*x15791)));
evalcond[2]=((((-1.0)*cj5*r00*x15791))+(((-1.0)*r02*x15790))+((x15775*x15787))+(((-1.0)*x15781)));
evalcond[3]=(((r21*x15780))+(((-1.0)*r20*x15782*x15790))+x15785+x15789+((r22*x15794))+((r21*x15776*x15783))+((r20*x15786)));
evalcond[4]=((((-1.0)*sj3*x15784*x15790))+((r21*x15782))+(((-1.0)*r22*sj3*x15791))+(((-1.0)*x15793))+x15779+((r20*x15776*x15780))+((r20*x15783)));
evalcond[5]=((((-1.0)*cj1*cj2*x15788))+((r01*x15780))+((r01*x15776*x15783))+((r00*x15786))+((r02*x15794))+(((-1.0)*r00*x15782*x15790))+((cj0*x15779)));
evalcond[6]=((((-1.0)*cj1*cj2*x15781))+((r10*x15786))+((sj0*x15779))+((x15777*x15792))+(((-1.0)*cj3*x15778*x15790))+((r11*x15780))+((r12*x15794)));
evalcond[7]=((((-1.0)*x15785*x15788))+((r01*x15782))+((r00*x15783))+(((-1.0)*r02*sj3*x15791))+((r00*x15776*x15780))+(((-1.0)*x15788*x15789))+(((-1.0)*r01*x15786*x15790)));
evalcond[8]=((((-1.0)*sj3*x15777*x15790))+((r10*x15783))+(((-1.0)*r12*sj3*x15791))+((r11*x15782))+((sj3*x15776*x15778))+(((-1.0)*x15781*x15785))+(((-1.0)*x15781*x15789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15795=((1.0)*cj5);
CheckValue<IkReal> x15796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x15795))+(((-1.0)*r00*sj5)))),-1);
if(!x15796.valid){
continue;
}
CheckValue<IkReal> x15797 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15796.value)))+(x15797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15798=IKsin(j4);
IkReal x15799=IKcos(j4);
IkReal x15800=(r11*sj5);
IkReal x15801=(cj5*r10);
IkReal x15802=(sj1*sj2);
IkReal x15803=(cj5*sj3);
IkReal x15804=((1.0)*sj0);
IkReal x15805=(cj3*cj5);
IkReal x15806=(cj3*sj5);
IkReal x15807=(r21*sj5);
IkReal x15808=(cj2*sj1);
IkReal x15809=(sj3*sj5);
IkReal x15810=(r01*sj5);
IkReal x15811=((1.0)*cj0);
IkReal x15812=(cj1*sj2);
IkReal x15813=((1.0)*x15799);
IkReal x15814=((1.0)*x15798);
IkReal x15815=(cj3*x15799);
IkReal x15816=((1.0)*cj1*cj2);
IkReal x15817=(cj3*x15798);
evalcond[0]=((((-1.0)*cj5*r20*x15814))+((x15798*x15807))+(((-1.0)*r22*x15813)));
evalcond[1]=(cj0+((x15798*x15800))+(((-1.0)*x15801*x15814))+(((-1.0)*r12*x15813)));
evalcond[2]=((((-1.0)*x15804))+((x15798*x15810))+(((-1.0)*cj5*r00*x15814))+(((-1.0)*r02*x15813)));
evalcond[3]=((((-1.0)*r20*x15805*x15813))+((r22*x15817))+((r21*x15803))+((r21*x15799*x15806))+x15808+x15812+((r20*x15809)));
evalcond[4]=((((-1.0)*x15816))+((r20*x15799*x15803))+(((-1.0)*sj3*x15807*x15813))+((r21*x15805))+x15802+(((-1.0)*r22*sj3*x15814))+((r20*x15806)));
evalcond[5]=((((-1.0)*cj1*cj2*x15811))+(((-1.0)*r00*x15805*x15813))+((cj0*x15802))+((r02*x15817))+((r01*x15799*x15806))+((r01*x15803))+((r00*x15809)));
evalcond[6]=(((r10*x15809))+((r12*x15817))+((r11*x15803))+(((-1.0)*cj3*x15801*x15813))+((x15800*x15815))+((sj0*x15802))+(((-1.0)*cj1*cj2*x15804)));
evalcond[7]=((((-1.0)*x15808*x15811))+((r00*x15799*x15803))+(((-1.0)*r02*sj3*x15814))+((r01*x15805))+(((-1.0)*x15811*x15812))+((r00*x15806))+(((-1.0)*r01*x15809*x15813)));
evalcond[8]=((((-1.0)*r12*sj3*x15814))+(((-1.0)*x15804*x15808))+((r10*x15806))+(((-1.0)*x15804*x15812))+((sj3*x15799*x15801))+(((-1.0)*sj3*x15800*x15813))+((r11*x15805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15818=cj5*cj5;
IkReal x15819=r21*r21;
IkReal x15820=r20*r20;
IkReal x15821=(r20*r21);
IkReal x15822=((1.0)*cj3);
IkReal x15823=((1.0)*cj5);
IkReal x15824=(cj1*sj2);
IkReal x15825=(cj5*sj5);
IkReal x15826=(sj3*sj5);
IkReal x15827=(cj2*sj1);
IkReal x15828=(r21*sj5);
CheckValue<IkReal> x15829=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15818*x15820*x15822))+(((-1.0)*x15819*x15822))+(((2.0)*cj3*x15821*x15825))+(((-1.0)*x15822*(r22*r22)))+((cj3*x15818*x15819)))),-1);
if(!x15829.valid){
continue;
}
CheckValue<IkReal> x15830 = IKatan2WithCheck(IkReal((((r20*r22*x15826))+((cj5*r21*r22*sj3))+((r22*x15827))+((r22*x15824)))),IkReal(((((-1.0)*x15820*x15823*x15826))+((sj3*x15819*x15825))+(((-1.0)*r20*x15823*x15827))+(((-1.0)*r20*x15823*x15824))+(((-2.0)*sj3*x15818*x15821))+((x15827*x15828))+((sj3*x15821))+((x15824*x15828)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15829.value)))+(x15830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15831=IKsin(j4);
IkReal x15832=IKcos(j4);
IkReal x15833=(cj3*r21);
IkReal x15834=(r21*sj5);
IkReal x15835=(r20*sj5);
IkReal x15836=(cj5*r20);
IkReal x15837=((1.0)*x15832);
IkReal x15838=((1.0)*x15831);
evalcond[0]=(((x15831*x15834))+(((-1.0)*x15836*x15838))+(((-1.0)*r22*x15837)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+(((-1.0)*cj3*x15836*x15837))+((cj1*sj2))+((cj3*r22*x15831))+((sj5*x15832*x15833))+((sj3*x15835)));
evalcond[2]=(((sj3*x15832*x15836))+((cj5*x15833))+(((-1.0)*sj3*x15834*x15837))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj3*x15835))+(((-1.0)*r22*sj3*x15838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15839=(cj5*sj4);
IkReal x15840=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15840))+(((-1.0)*r00*x15839)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15839))+(((-1.0)*r11*x15840))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15840))+(((-1.0)*r00*x15839))))+IKsqr((((r10*x15839))+(((-1.0)*r11*x15840))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15840))+(((-1.0)*r00*x15839))), (((r10*x15839))+(((-1.0)*r11*x15840))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15841=IKcos(j0);
IkReal x15842=IKsin(j0);
IkReal x15843=(r02*sj4);
IkReal x15844=(cj5*r01);
IkReal x15845=((1.0)*sj3);
IkReal x15846=(r12*sj4);
IkReal x15847=((1.0)*cj3);
IkReal x15848=(r00*sj5);
IkReal x15849=(r11*sj5);
IkReal x15850=(r10*sj5);
IkReal x15851=(cj5*r11);
IkReal x15852=((1.0)*cj2);
IkReal x15853=((0.5723)*sj2);
IkReal x15854=((1.0)*cj4);
IkReal x15855=((0.5723)*cj2);
IkReal x15856=(cj4*cj5*r00);
IkReal x15857=((1.0)*cj1*sj2);
IkReal x15858=(cj4*cj5*r10);
IkReal x15859=(cj4*r01*sj5);
IkReal x15860=(sj1*x15841);
IkReal x15861=(cj1*x15842);
IkReal x15862=((1.0)*cj5*sj4);
IkReal x15863=(cj1*x15841);
IkReal x15864=(sj1*x15842);
evalcond[0]=((((-1.0)*r12*x15854))+((sj4*x15849))+(((-1.0)*r10*x15862))+x15841);
evalcond[1]=((((-1.0)*r02*x15854))+(((-1.0)*r00*x15862))+((r01*sj4*sj5))+(((-1.0)*x15842)));
evalcond[2]=((((-1.0)*px))+((x15855*x15863))+(((-1.0)*x15853*x15860))+(((-0.1157)*x15844))+(((-0.1157)*x15848))+(((-0.16394)*x15842))+(((0.612)*x15863)));
evalcond[3]=((((0.16394)*x15841))+(((-1.0)*py))+((x15855*x15861))+(((-0.1157)*x15851))+(((-0.1157)*x15850))+(((-1.0)*x15853*x15864))+(((0.612)*x15861)));
evalcond[4]=(((cj3*x15859))+((sj2*x15860))+((cj3*x15843))+(((-1.0)*x15847*x15856))+(((-1.0)*x15852*x15863))+((sj3*x15848))+((sj3*x15844)));
evalcond[5]=(((sj2*x15864))+((cj3*x15846))+(((-1.0)*x15847*x15858))+((sj3*x15850))+((sj3*x15851))+(((-1.0)*x15852*x15861))+((cj3*cj4*x15849)));
evalcond[6]=((((-1.0)*x15841*x15857))+((cj3*x15848))+((cj3*x15844))+((sj3*x15856))+(((-1.0)*x15852*x15860))+(((-1.0)*x15843*x15845))+(((-1.0)*x15845*x15859)));
evalcond[7]=(((cj3*x15850))+((cj3*x15851))+(((-1.0)*x15842*x15857))+(((-1.0)*x15845*x15846))+((sj3*x15858))+(((-1.0)*cj4*x15845*x15849))+(((-1.0)*x15852*x15864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15865=cj5*cj5;
IkReal x15866=r21*r21;
IkReal x15867=r20*r20;
IkReal x15868=(r20*r21);
IkReal x15869=(sj1*sj2);
IkReal x15870=(r21*sj5);
IkReal x15871=(cj1*cj2);
IkReal x15872=(cj5*r20);
IkReal x15873=(cj5*sj5);
IkReal x15874=(cj3*r22);
IkReal x15875=(sj3*x15866);
CheckValue<IkReal> x15876 = IKatan2WithCheck(IkReal((((cj5*r21*x15874))+((r22*x15869))+((r20*sj5*x15874))+(((-1.0)*r22*x15871)))),IkReal(((((-2.0)*cj3*x15865*x15868))+((x15871*x15872))+(((-1.0)*x15869*x15872))+(((-1.0)*cj3*x15867*x15873))+(((-1.0)*x15870*x15871))+((cj3*x15868))+((x15869*x15870))+((cj3*x15866*x15873)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15876.valid){
continue;
}
CheckValue<IkReal> x15877=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x15865*x15875))+((sj3*x15865*x15867))+x15875+(((-2.0)*sj3*x15868*x15873)))),-1);
if(!x15877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15876.value)+(((1.5707963267949)*(x15877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15878=IKsin(j4);
IkReal x15879=IKcos(j4);
IkReal x15880=(cj3*r21);
IkReal x15881=(r21*sj5);
IkReal x15882=(r20*sj5);
IkReal x15883=(cj5*r20);
IkReal x15884=((1.0)*x15879);
IkReal x15885=((1.0)*x15878);
evalcond[0]=((((-1.0)*x15883*x15885))+(((-1.0)*r22*x15884))+((x15878*x15881)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj3*x15883*x15884))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x15879*x15880))+((sj3*x15882))+((cj3*r22*x15878)));
evalcond[2]=((((-1.0)*sj3*x15881*x15884))+((cj3*x15882))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x15879*x15883))+((cj5*x15880))+(((-1.0)*r22*sj3*x15885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15886=(cj5*sj4);
IkReal x15887=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15887))+(((-1.0)*r00*x15886)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15886))+(((-1.0)*r11*x15887))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15887))+(((-1.0)*r00*x15886))))+IKsqr((((r10*x15886))+(((-1.0)*r11*x15887))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15887))+(((-1.0)*r00*x15886))), (((r10*x15886))+(((-1.0)*r11*x15887))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15888=IKcos(j0);
IkReal x15889=IKsin(j0);
IkReal x15890=(r02*sj4);
IkReal x15891=(cj5*r01);
IkReal x15892=((1.0)*sj3);
IkReal x15893=(r12*sj4);
IkReal x15894=((1.0)*cj3);
IkReal x15895=(r00*sj5);
IkReal x15896=(r11*sj5);
IkReal x15897=(r10*sj5);
IkReal x15898=(cj5*r11);
IkReal x15899=((1.0)*cj2);
IkReal x15900=((0.5723)*sj2);
IkReal x15901=((1.0)*cj4);
IkReal x15902=((0.5723)*cj2);
IkReal x15903=(cj4*cj5*r00);
IkReal x15904=((1.0)*cj1*sj2);
IkReal x15905=(cj4*cj5*r10);
IkReal x15906=(cj4*r01*sj5);
IkReal x15907=(sj1*x15888);
IkReal x15908=(cj1*x15889);
IkReal x15909=((1.0)*cj5*sj4);
IkReal x15910=(cj1*x15888);
IkReal x15911=(sj1*x15889);
evalcond[0]=(((sj4*x15896))+(((-1.0)*r12*x15901))+(((-1.0)*r10*x15909))+x15888);
evalcond[1]=((((-1.0)*r00*x15909))+(((-1.0)*r02*x15901))+(((-1.0)*x15889))+((r01*sj4*sj5)));
evalcond[2]=((((-1.0)*x15900*x15907))+(((0.612)*x15910))+((x15902*x15910))+(((-1.0)*px))+(((-0.1157)*x15895))+(((-0.1157)*x15891))+(((-0.16394)*x15889)));
evalcond[3]=((((-1.0)*x15900*x15911))+(((0.612)*x15908))+((x15902*x15908))+(((-1.0)*py))+(((-0.1157)*x15897))+(((-0.1157)*x15898))+(((0.16394)*x15888)));
evalcond[4]=(((sj2*x15907))+(((-1.0)*x15894*x15903))+((cj3*x15890))+((sj3*x15891))+((sj3*x15895))+((cj3*x15906))+(((-1.0)*x15899*x15910)));
evalcond[5]=((((-1.0)*x15894*x15905))+((sj2*x15911))+((cj3*x15893))+((cj3*cj4*x15896))+(((-1.0)*x15899*x15908))+((sj3*x15898))+((sj3*x15897)));
evalcond[6]=(((sj3*x15903))+(((-1.0)*x15892*x15906))+((cj3*x15891))+((cj3*x15895))+(((-1.0)*x15888*x15904))+(((-1.0)*x15899*x15907))+(((-1.0)*x15890*x15892)));
evalcond[7]=(((sj3*x15905))+(((-1.0)*x15892*x15893))+((cj3*x15897))+((cj3*x15898))+(((-1.0)*cj4*x15892*x15896))+(((-1.0)*x15889*x15904))+(((-1.0)*x15899*x15911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur10 (baed129c6e989685b6e46c43db0d045d)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
