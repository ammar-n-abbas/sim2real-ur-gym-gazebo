/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2019-03-17 17:47:02.112922
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "../include/ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[0]);
x6=IKsin(j[4]);
x7=IKcos(j[4]);
x8=IKcos(j[3]);
x9=IKsin(j[3]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.0819)*x7);
x13=((0.08535)*x5);
x14=((0.0819)*x9);
x15=((0.08535)*x0);
x16=((1.0)*x5);
x17=((1.0)*x9);
x18=((0.21325)*x5);
x19=((1.0)*x7);
x20=((0.0819)*x8);
x21=((1.0)*x8);
x22=((0.24365)*x1);
x23=((1.0)*x0);
x24=((0.21325)*x0);
x25=(x1*x2);
x26=(x3*x4);
x27=(x1*x3);
x28=(x0*x6);
x29=(x2*x4);
x30=(x16*x6);
x31=(x1*x15);
x32=(x23*x27);
x33=(x16*x27);
x34=(x25+x26);
x35=((((-1.0)*x29))+(((1.0)*x27)));
x36=((((-1.0)*x32))+((x0*x29)));
x37=(((x29*x5))+(((-1.0)*x33)));
x38=(x23*((x25+x26)));
x39=(x16*((x25+x26)));
x40=(x37*x8);
x41=((((-1.0)*x17*x35))+(((-1.0)*x21*x34)));
x42=(((x9*(((((1.0)*x25))+(((1.0)*x26))))))+(((-1.0)*x35*x8)));
x43=(((x38*x9))+((x36*x8)));
x44=(x40+((x39*x9)));
x45=(x44*x7);
x46=(((x17*(((((-1.0)*x32))+((x23*x29))))))+(((-1.0)*x21*x38)));
x47=(((x17*(((((-1.0)*x33))+((x16*x29))))))+(((-1.0)*x21*x39)));
eerot[0]=((((-1.0)*x16*x7))+((x6*(((((-1.0)*x17*x38))+(((-1.0)*x21*x36)))))));
eerot[1]=(((x11*(((((-1.0)*x19*x43))+x30))))+((x10*x46)));
eerot[2]=(((x11*x46))+((x10*(((((-1.0)*x30))+((x43*x7)))))));
IkReal x48=((1.0)*x15);
eetrans[0]=(((x0*x22))+(((-1.0)*x12*x5))+((x9*(((((-1.0)*x27*x48))+((x15*x29))))))+((x6*(((((-1.0)*x20*x36))+(((-1.0)*x14*x38))))))+((x8*(((((-1.0)*x26*x48))+(((-1.0)*x25*x48))))))+(((-1.0)*x24*x29))+(((-0.11235)*x5))+((x24*x27)));
eerot[3]=(((x0*x7))+((x6*(((((-1.0)*x17*x39))+(((-1.0)*x21*x37)))))));
eerot[4]=(((x10*x47))+((x11*(((((-1.0)*x19*x44))+(((-1.0)*x23*x6)))))));
eerot[5]=(((x11*x47))+((x10*((x45+x28)))));
IkReal x49=((1.0)*x13);
eetrans[1]=(((x8*(((((-1.0)*x26*x49))+(((-1.0)*x25*x49))))))+((x18*x27))+((x9*(((((-1.0)*x27*x49))+((x13*x29))))))+((x0*x12))+((x22*x5))+(((-1.0)*x18*x29))+(((0.11235)*x0))+((x6*(((((-1.0)*x20*x37))+(((-1.0)*x14*x39)))))));
eerot[6]=(x41*x6);
eerot[7]=(((x10*x42))+((x11*x41*x7)));
eerot[8]=(((x10*x7*((((x34*x8))+((x35*x9))))))+((x11*x42)));
eetrans[2]=((0.1519)+((x6*(((((-1.0)*x20*x34))+(((-1.0)*x14*x35))))))+((x8*(((((0.08535)*x29))+(((-0.08535)*x27))))))+((x9*(((((0.08535)*x25))+(((0.08535)*x26))))))+(((-0.21325)*x26))+(((-0.21325)*x25))+(((-0.24365)*x4)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r01);
new_r01=((-1.0)*r02);
new_r02=r00;
new_px=((((-0.0819)*r00))+px);
new_r10=((-1.0)*r11);
new_r11=((-1.0)*r12);
new_r12=r10;
new_py=(py+(((-0.0819)*r10)));
new_r20=((-1.0)*r21);
new_r21=((-1.0)*r22);
new_r22=r20;
new_pz=((-0.1519)+pz+(((-0.0819)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x50=((1.0)*px);
IkReal x51=((1.0)*pz);
IkReal x52=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x51)));
rxp0_2=((((-1.0)*r10*x50))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x51)));
rxp1_2=((((-1.0)*r11*x50))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x52)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x51)));
rxp2_2=((((-1.0)*r12*x50))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x53=((0.1707)*npx);
IkReal x54=((0.1707)*npy);
IkReal x55=((0.08535)*r22);
IkReal x56=((0.08535)*r21);
IkReal x57=((-0.08535)*r20);
IkReal x58=((-1.0)*r20);
IkReal x59=((-1.0)*rxp0_2);
IkReal x60=((-0.08535)*r21);
IkReal x61=((-1.0)*r21);
IkReal x62=((-1.0)*rxp1_2);
IkReal x63=((-1.0)*npx);
IkReal x64=((-1.0)*r22);
IkReal x65=((-1.0)*npz);
matrixinvcoeffs[0]=x57;
matrixinvcoeffs[1]=x53;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x58;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x59;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x57;
matrixinvcoeffs[19]=x53;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x58;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x59;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x60;
matrixinvcoeffs[33]=x54;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x61;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x62;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x60;
matrixinvcoeffs[51]=x54;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x61;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x62;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x64;
matrixinvcoeffs[76]=x55;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x65;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x55;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x62;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x60;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x62;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x56;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x58;
matrixinvcoeffs[133]=x63;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.08535)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x58;
matrixinvcoeffs[151]=x63;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x57;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x64;
matrixinvcoeffs[165]=x65;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x55;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x64;
matrixinvcoeffs[183]=x65;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.08535)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x61;
matrixinvcoeffs[204]=x56;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x62;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x56;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x63;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x57;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x58;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x57;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x59;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x66=pz*pz;
IkReal x67=pp*pp;
IkReal x68=((0.1707)*pz);
IkReal x69=(pp*r21);
IkReal x70=((0.1707)*rxp1_2);
IkReal x71=(gclwh13_1*pp);
IkReal x72=(gclwh9_0*r20);
IkReal x73=(npy*pz);
IkReal x74=((4.561674317235e-5)*r21);
IkReal x75=(npz*pz);
IkReal x76=(gclwh13_15*r21);
IkReal x77=((0.0072846225)*pz);
IkReal x78=(gclwh11_13*r22);
IkReal x79=((0.014569245)*r21);
IkReal x80=(gclwh8_12*r20);
IkReal x81=(gclwh15_1*r20);
IkReal x82=((2.0)*pp);
IkReal x83=(pp*r20);
IkReal x84=(pp*r22);
IkReal x85=(gclwh14_2*pz);
IkReal x86=(gclwh6_11*r21);
IkReal x87=((0.3414)*rxp0_2);
IkReal x88=(npx*pz);
IkReal x89=((0.001068933642)*rxp2_2);
IkReal x90=(gclwh15_10*r20);
IkReal x91=((0.853)*pp);
IkReal x92=(gclwh9_13*rxp0_2);
IkReal x93=(gclwh2_0*r21);
IkReal x94=((0.019178145)*rxp0_2);
IkReal x95=((0.2247)*gclwh15_15);
IkReal x96=(gclwh5_9*r22);
IkReal x97=(gclwh8_2*rxp0_2);
IkReal x98=((0.6828)*rxp2_2);
IkReal x99=((0.014569245)*rxp1_2);
IkReal x100=((0.15598566)*rxp0_2);
IkReal x101=(gclwh14_3*rxp0_2);
IkReal x102=(gclwh13_0*pz);
IkReal x103=(gclwh11_10*r22);
IkReal x104=(gclwh10_11*r22);
IkReal x105=((1.0)*pz);
IkReal x106=(gclwh13_0*rxp1_2);
IkReal x107=(gclwh4_14*rxp2_2);
IkReal x108=((0.1707)*rxp2_2);
IkReal x109=((0.00518928)*rxp1_2);
IkReal x110=(gclwh5_0*pz);
IkReal x111=((0.00155960496929498)*r21);
IkReal x112=(gclwh4_3*r22);
IkReal x113=(gclwh14_8*rxp0_2);
IkReal x114=((0.00332834402025)*r22);
IkReal x115=(gclwh4_2*r22);
IkReal x116=(gclwh12_14*rxp1_2);
IkReal x117=(gclwh10_2*r22);
IkReal x118=((0.000818427337875)*r20);
IkReal x119=((0.001068933642)*rxp1_2);
IkReal x120=((0.01037856)*rxp0_2);
IkReal x121=(gclwh15_9*r20);
IkReal x122=(gclwh5_10*r22);
IkReal x123=(gclwh4_8*rxp2_2);
IkReal x124=(gclwh9_10*r20);
IkReal x125=((4.0)*gclwh11_10);
IkReal x126=(gclwh6_12*r21);
IkReal x127=((0.00310689149625)*r20);
IkReal x128=(gclwh13_9*r21);
IkReal x129=(gclwh12_8*r21);
IkReal x130=((0.3414)*rxp1_2);
IkReal x131=((2.0)*gclwh7_10);
IkReal x132=((0.07280355)*rxp1_2);
IkReal x133=(gclwh8_2*r20);
IkReal x134=(gclwh4_14*r22);
IkReal x135=((0.6828)*rxp1_2);
IkReal x136=(gclwh15_15*rxp0_2);
IkReal x137=((4.0)*gclwh8_11);
IkReal x138=(gclwh7_0*r21);
IkReal x139=(gclwh5_15*rxp2_2);
IkReal x140=(gclwh15_9*rxp0_2);
IkReal x141=(gclwh4_2*rxp2_2);
IkReal x142=(gclwh14_11*r20);
IkReal x143=((0.019178145)*rxp1_2);
IkReal x144=((4.561674317235e-5)*r22);
IkReal x145=((4.0)*gclwh9_10);
IkReal x146=((0.6828)*rxp0_2);
IkReal x147=(gclwh5_9*rxp2_2);
IkReal x148=(gclwh15_1*rxp0_2);
IkReal x149=(gclwh9_13*r20);
IkReal x150=(gclwh6_2*r21);
IkReal x151=((0.00310689149625)*r21);
IkReal x152=((0.019178145)*rxp2_2);
IkReal x153=((0.0304)*pp);
IkReal x154=((0.2247)*gclwh13_15);
IkReal x155=((0.000818427337875)*r22);
IkReal x156=((0.00163685467575)*r20);
IkReal x157=((0.000818427337875)*r21);
IkReal x158=(gclwh5_0*r22);
IkReal x159=((0.1707)*rxp0_2);
IkReal x160=((0.08318211)*rxp1_2);
IkReal x161=((2.0)*gclwh6_11);
IkReal x162=(gclwh1_3*r20);
IkReal x163=((0.036546103557)*rxp2_2);
IkReal x164=((4.0)*gclwh10_11);
IkReal x165=((0.036546103557)*rxp1_2);
IkReal x166=((0.1707)*pp);
IkReal x167=(gclwh11_13*rxp2_2);
IkReal x168=((0.3414)*rxp2_2);
IkReal x169=(gclwh10_12*rxp2_2);
IkReal x170=((0.0072846225)*r21);
IkReal x171=(gclwh4_8*r22);
IkReal x172=((0.07280355)*rxp0_2);
IkReal x173=((2.0)*gclwh12_11);
IkReal x174=(gclwh11_0*r22);
IkReal x175=(gclwh14_8*r20);
IkReal x176=(gclwh14_14*rxp0_2);
IkReal x177=(gclwh7_13*r21);
IkReal x178=(gclwh11_0*pz);
IkReal x179=(gclwh10_2*pz);
IkReal x180=(gclwh12_2*rxp1_2);
IkReal x181=(gclwh5_0*rxp2_2);
IkReal x182=((0.07280355)*rxp2_2);
IkReal x183=((0.4569)*pp);
IkReal x184=(gclwh4_11*r22);
IkReal x185=((4.0)*gclwh6_11);
IkReal x186=(gclwh8_11*r20);
IkReal x187=((0.2247)*gclwh5_15);
IkReal x188=((4.0)*gclwh7_10);
IkReal x189=((2.0)*gclwh13_10);
IkReal x190=((0.07799283)*rxp1_2);
IkReal x191=(gclwh5_1*r22);
IkReal x192=((0.2247)*gclwh4_14);
IkReal x193=(gclwh10_12*r22);
IkReal x194=((0.2247)*gclwh14_14);
IkReal x195=((0.2247)*gclwh12_14);
IkReal x196=(gclwh14_3*r20);
IkReal x197=(gclwh13_15*rxp1_2);
IkReal x198=(gclwh11_1*r22);
IkReal x199=(gclwh0_1*r20);
IkReal x200=(gclwh8_12*rxp0_2);
IkReal x201=(gclwh14_14*x94);
IkReal x202=(gclwh6_5*x157);
IkReal x203=((0.019178145)*x116);
IkReal x204=((0.019178145)*x107);
IkReal x205=(gclwh10_5*x155);
IkReal x206=(gclwh8_5*x118);
IkReal x207=((0.014569245)*x123);
IkReal x208=((0.0072846225)*x86);
IkReal x209=(gclwh12_8*x99);
IkReal x210=(gclwh4_11*x108);
IkReal x211=(gclwh12_11*x70);
IkReal x212=(gclwh14_11*x159);
IkReal x213=((0.0072846225)*x104);
IkReal x214=((0.014569245)*x113);
IkReal x215=((0.0072846225)*x186);
IkReal x216=(gclwh13_9*x99);
IkReal x217=((0.014569245)*x147);
IkReal x218=((0.0072846225)*x103);
IkReal x219=(gclwh15_10*x159);
IkReal x220=((0.0072846225)*x124);
IkReal x221=(gclwh13_10*x70);
IkReal x222=(gclwh7_10*x170);
IkReal x223=((0.014569245)*x140);
IkReal x224=(gclwh5_10*x108);
IkReal x225=(gclwh15_15*x94);
IkReal x226=(gclwh7_7*x157);
IkReal x227=(gclwh13_15*x143);
IkReal x228=((0.019178145)*x139);
IkReal x229=(gclwh11_7*x155);
IkReal x230=(gclwh9_7*x118);
IkReal x231=(gclwh8_5*x94);
IkReal x232=(gclwh10_5*x152);
IkReal x233=(gclwh14_14*x118);
IkReal x234=(gclwh6_5*x143);
IkReal x235=(gclwh12_14*x157);
IkReal x236=((0.000818427337875)*x134);
IkReal x237=(gclwh8_11*x159);
IkReal x238=(gclwh10_11*x108);
IkReal x239=(gclwh12_11*x170);
IkReal x240=((0.000621742530375)*x171);
IkReal x241=((0.0072846225)*x184);
IkReal x242=((0.000621742530375)*x129);
IkReal x243=((0.000621742530375)*x175);
IkReal x244=(gclwh6_11*x70);
IkReal x245=((0.0072846225)*x142);
IkReal x246=(gclwh9_10*x159);
IkReal x247=((0.000621742530375)*x121);
IkReal x248=((0.0072846225)*x122);
IkReal x249=(gclwh11_10*x108);
IkReal x250=(gclwh13_10*x170);
IkReal x251=((0.000621742530375)*x128);
IkReal x252=((0.0072846225)*x90);
IkReal x253=(gclwh7_10*x70);
IkReal x254=((0.000621742530375)*x96);
IkReal x255=((0.000818427337875)*x76);
IkReal x256=(gclwh5_15*x155);
IkReal x257=(gclwh7_7*x143);
IkReal x258=(gclwh15_15*x118);
IkReal x259=(gclwh11_7*x152);
IkReal x260=(gclwh9_7*x94);
IkReal x261=(gclwh14_11*x87);
IkReal x262=((0.014569245)*x104);
IkReal x263=((0.014569245)*x186);
IkReal x264=((0.03835629)*x176);
IkReal x265=((0.03835629)*x107);
IkReal x266=((0.03835629)*x116);
IkReal x267=(gclwh4_11*x168);
IkReal x268=(gclwh12_11*x130);
IkReal x269=(gclwh6_11*x79);
IkReal x270=((0.03835629)*x139);
IkReal x271=((0.03835629)*x197);
IkReal x272=((0.03835629)*x136);
IkReal x273=(gclwh15_10*x87);
IkReal x274=((0.014569245)*x124);
IkReal x275=((0.014569245)*x103);
IkReal x276=((0.0608)*x73);
IkReal x277=((2.0)*x66);
IkReal x278=(r21*x67);
IkReal x279=((1.0)*x67);
IkReal x280=((0.2247)*gclwh10_5*x75);
IkReal x281=((0.2247)*gclwh8_5*x88);
IkReal x282=((0.11235)*gclwh6_5*x69);
IkReal x283=((0.11235)*gclwh8_5*x83);
IkReal x284=((0.2247)*gclwh6_5*x73);
IkReal x285=((0.11235)*gclwh10_5*x84);
IkReal x286=(gclwh12_3*pp*x70);
IkReal x287=(gclwh14_2*rxp0_2*x68);
IkReal x288=(gclwh6_3*x278);
IkReal x289=(x117*x77);
IkReal x290=((2.0)*gclwh10_11*x75);
IkReal x291=((2.0)*gclwh8_11*x88);
IkReal x292=(x179*x84);
IkReal x293=(gclwh4_3*pp*x108);
IkReal x294=(x133*x77);
IkReal x295=(gclwh8_2*pz*x83);
IkReal x296=(x150*x77);
IkReal x297=(x161*x73);
IkReal x298=(x180*x68);
IkReal x299=(x141*x68);
IkReal x300=(x101*x166);
IkReal x301=(x70*x71);
IkReal x302=(gclwh7_1*x278);
IkReal x303=(x174*x77);
IkReal x304=(gclwh15_0*rxp0_2*x68);
IkReal x305=(x178*x84);
IkReal x306=(gclwh5_1*pp*x108);
IkReal x307=(x131*x73);
IkReal x308=(x72*x77);
IkReal x309=(pp*pz*x72);
IkReal x310=((2.0)*gclwh11_10*x75);
IkReal x311=((2.0)*gclwh9_10*x88);
IkReal x312=(x148*x166);
IkReal x313=(x106*x68);
IkReal x314=(x181*x68);
IkReal x315=(x138*x77);
IkReal x316=((0.2247)*gclwh9_7*x88);
IkReal x317=((0.11235)*gclwh7_7*x69);
IkReal x318=((0.2247)*gclwh11_7*x75);
IkReal x319=((0.11235)*gclwh11_7*x84);
IkReal x320=((0.2247)*gclwh7_7*x73);
IkReal x321=((0.11235)*gclwh9_7*x83);
IkReal x322=(x195*x73);
IkReal x323=((0.11235)*gclwh14_14*x83);
IkReal x324=(x192*x75);
IkReal x325=((0.11235)*gclwh12_14*x69);
IkReal x326=(x194*x88);
IkReal x327=((0.11235)*gclwh4_14*x84);
IkReal x328=(gclwh14_8*npx*x68);
IkReal x329=(x83*x85);
IkReal x330=(gclwh12_3*x278);
IkReal x331=(gclwh3_2*r21*x77);
IkReal x332=((0.08535)*gclwh12_8*x69);
IkReal x333=(gclwh6_2*rxp1_2*x68);
IkReal x334=(gclwh3_3*x278);
IkReal x335=(x162*x67);
IkReal x336=((0.08535)*gclwh4_8*x84);
IkReal x337=(gclwh14_2*r20*x77);
IkReal x338=((2.0)*gclwh14_11*x88);
IkReal x339=(x112*x67);
IkReal x340=(gclwh1_2*r20*x77);
IkReal x341=(gclwh12_8*npy*x68);
IkReal x342=(gclwh4_8*npz*x68);
IkReal x343=(x68*x97);
IkReal x344=((2.0)*gclwh4_11*x75);
IkReal x345=((0.08535)*gclwh14_8*x83);
IkReal x346=(gclwh6_3*pp*x70);
IkReal x347=(gclwh10_2*rxp2_2*x68);
IkReal x348=(x115*x77);
IkReal x349=(gclwh12_2*r21*x77);
IkReal x350=(x173*x73);
IkReal x351=(gclwh13_0*r21*x77);
IkReal x352=(x67*x81);
IkReal x353=((0.08535)*gclwh15_9*x83);
IkReal x354=(x110*x84);
IkReal x355=(x102*x69);
IkReal x356=(x77*x93);
IkReal x357=(gclwh0_0*r20*x77);
IkReal x358=(gclwh9_0*rxp0_2*x68);
IkReal x359=((2.0)*gclwh15_10*x88);
IkReal x360=(x158*x77);
IkReal x361=(gclwh2_1*x278);
IkReal x362=(gclwh5_9*npz*x68);
IkReal x363=(gclwh7_1*pp*x70);
IkReal x364=(gclwh11_0*rxp2_2*x68);
IkReal x365=(gclwh13_9*npy*x68);
IkReal x366=(x199*x67);
IkReal x367=((0.08535)*gclwh5_9*x84);
IkReal x368=(gclwh15_9*npx*x68);
IkReal x369=((0.08535)*gclwh13_9*x69);
IkReal x370=(gclwh11_1*pp*x108);
IkReal x371=((2.0)*gclwh5_10*x75);
IkReal x372=(x189*x73);
IkReal x373=(gclwh7_0*rxp1_2*x68);
IkReal x374=(gclwh15_0*r20*x77);
IkReal x375=(x88*x95);
IkReal x376=((0.11235)*gclwh5_15*x84);
IkReal x377=((0.11235)*gclwh13_15*x69);
IkReal x378=(x154*x73);
IkReal x379=(x187*x75);
IkReal x380=((0.11235)*gclwh15_15*x83);
IkReal x381=(x186*x82);
IkReal x382=(x104*x82);
IkReal x383=(x185*x73);
IkReal x384=(x137*x88);
IkReal x385=(x161*x69);
IkReal x386=(x164*x75);
IkReal x387=(x103*x82);
IkReal x388=(x188*x73);
IkReal x389=(x124*x82);
IkReal x390=(gclwh6_2*npy*x277);
IkReal x391=(gclwh6_3*x73*x82);
IkReal x392=(gclwh6_2*x105*x69);
IkReal x393=(gclwh10_2*npz*x277);
IkReal x394=(gclwh8_2*npx*x277);
IkReal x395=(gclwh11_1*x75*x82);
IkReal x396=(gclwh7_0*npy*x277);
IkReal x397=(gclwh9_0*npx*x277);
IkReal x398=(x198*x279);
IkReal x399=(gclwh7_1*x73*x82);
IkReal x400=(gclwh11_0*npz*x277);
IkReal x401=(gclwh7_0*x105*x69);
IkReal x402=(gclwh12_2*npy*x277);
IkReal x403=(gclwh3_2*npy*x277);
IkReal x404=(gclwh1_2*npx*x277);
IkReal x405=(gclwh14_3*x82*x88);
IkReal x406=(gclwh4_2*npz*x277);
IkReal x407=(gclwh4_3*x75*x82);
IkReal x408=(gclwh12_2*x105*x69);
IkReal x409=(gclwh1_2*x105*x83);
IkReal x410=(gclwh3_3*x73*x82);
IkReal x411=(gclwh4_2*x105*x84);
IkReal x412=(gclwh1_3*x82*x88);
IkReal x413=(gclwh3_2*x105*x69);
IkReal x414=(gclwh12_3*x73*x82);
IkReal x415=(gclwh14_2*npx*x277);
IkReal x416=(x196*x279);
IkReal x417=(gclwh0_0*npx*x277);
IkReal x418=(gclwh2_0*npy*x277);
IkReal x419=(gclwh5_1*x75*x82);
IkReal x420=((2.0)*x71*x73);
IkReal x421=(gclwh15_0*npx*x277);
IkReal x422=(gclwh2_1*x73*x82);
IkReal x423=(gclwh0_1*x82*x88);
IkReal x424=(gclwh5_0*npz*x277);
IkReal x425=(gclwh13_0*npy*x277);
IkReal x426=(gclwh0_0*x105*x83);
IkReal x427=(gclwh15_0*x105*x83);
IkReal x428=(gclwh2_0*x105*x69);
IkReal x429=((1.0)*gclwh13_1*x278);
IkReal x430=(x191*x279);
IkReal x431=(gclwh15_1*x82*x88);
IkReal x432=(x228+x227);
IkReal x433=(x232+x231);
IkReal x434=(x270+x271);
IkReal x435=(x204+x203);
IkReal x436=(x265+x266);
IkReal x437=(x259+x260);
IkReal x438=(x212+x213+x215+x297);
IkReal x439=(x307+x218+x219+x220);
IkReal x440=(x350+x344+x245+x244);
IkReal x441=(x372+x371+x252+x253);
IkReal x442=(x324+x322+x323+x233);
IkReal x443=(x202+x282+x281+x280);
IkReal x444=(x380+x379+x378+x258);
IkReal x445=(x318+x317+x316+x226);
IkReal x446=(x338+x238+x239+x237+x241);
IkReal x447=(x359+x250+x246+x249+x248);
IkReal x448=(x311+x310+x221+x222+x224);
IkReal x449=(x210+x211+x208+x290+x291);
IkReal x450=(x320+x321+x319+x229+x230);
IkReal x451=(x206+x205+x285+x284+x283);
IkReal x452=(x325+x326+x327+x236+x235);
IkReal x453=(x377+x376+x375+x255+x256);
IkReal x454=(x386+x384+x385+x267+x269+x268);
IkReal x455=(((gclwh7_10*x79))+((x131*x69))+((gclwh5_10*x168))+((x145*x88))+((x125*x75))+((gclwh13_10*x130)));
IkReal x456=(x382+x383+x381+x261+x263+x262);
IkReal x457=(x387+x388+x389+x274+x275+x273);
IkReal x458=(x300+x394+x391+x393+x392+x214+x298+x299+x296);
IkReal x459=(x390+x207+x209+x292+x293+x294+x295+x289+x288+x287+x286);
IkReal x460=(x315+x314+x313+x312+x397+x399+x398+x223+x401+x400);
IkReal x461=(x308+x309+x306+x304+x305+x302+x303+x301+x395+x396+x216+x217);
IkReal x462=(x374+x373+x370+x368+x369+x367+x254+x251+x429+x428+x427+x426+x425+x424+x423+x422+x430+x431);
IkReal x463=(x339+x333+x332+x331+x330+x337+x336+x335+x334+x328+x329+x340+x242+x240+x403+x402+x405+x404+x406+x68);
IkReal x464=(x342+x343+x341+x346+x347+x345+x348+x349+x243+x407+x409+x408+x412+x413+x410+x411+x416+x414+x415);
IkReal x465=(x351+x353+x352+x355+x354+x357+x356+x358+x360+x361+x362+x363+x364+x365+x366+x247+x417+x418+x419+x421+x420+x68);
op[0]=((((-1.0)*x183*x80))+(((0.9138)*gclwh10_12*x75))+(((-0.4569)*gclwh10_12*x84))+(((0.9138)*gclwh8_12*x88))+(((-1.0)*gclwh10_12*x114))+(((0.4569)*gclwh6_12*x69))+(((-1.0)*x201))+(((-1.0)*gclwh12_8*x190))+(((-1.0)*x451))+x435+x443+(((0.07799283)*x113))+(((0.00332834402025)*x126))+(((-0.00332834402025)*x80))+(((-0.9138)*gclwh6_12*x73))+(((-0.07799283)*x123)));
op[1]=((((-1.0)*gclwh12_3*x165))+(((-1.0)*x449))+(((-0.2068108875)*gclwh6_3*x69))+(((0.036546103557)*x101))+(((-1.0)*gclwh6_11*x69))+(((-1.0)*x458))+(((-1.0)*gclwh6_3*x111))+x438+x459+(((0.42819102)*gclwh6_3*x73))+(((-1.0)*gclwh4_3*x163))+((gclwh8_11*x83))+((gclwh10_11*x84)));
op[2]=((-0.09583455)+(((-1.0)*x454))+x456);
op[3]=((((-0.08318211)*x113))+((gclwh8_2*x127))+(((-1.0)*x436))+(((-0.07280355)*x141))+(((-1.0)*gclwh12_2*x132))+(((-0.00310689149625)*x150))+(((-0.853)*gclwh10_2*x75))+(((0.08318211)*x123))+(((-0.853)*gclwh8_2*x88))+x264+(((0.4265)*gclwh10_2*x84))+(((0.00310689149625)*x117))+((gclwh12_8*x160))+(((0.853)*gclwh6_2*x73))+((gclwh14_2*x172))+(((-0.4265)*gclwh6_2*x69))+(((0.4265)*gclwh8_2*x83)));
op[4]=((((-1.0)*x435))+(((-0.0304)*gclwh10_12*x84))+((gclwh12_8*x109))+(((0.0304)*gclwh6_12*x69))+(((-1.0)*x153*x80))+(((0.00518928)*x123))+(((0.0608)*gclwh8_12*x88))+(((-0.000221452524)*x80))+(((-0.000221452524)*x193))+(((-1.0)*x451))+x201+x443+(((-0.00518928)*x113))+(((-1.0)*gclwh6_12*x276))+(((0.000221452524)*x126))+(((0.0608)*gclwh10_12*x75)));
op[5]=((((0.0010225625)*gclwh6_3*x69))+(((-1.0)*x438))+(((-1.0)*gclwh4_3*x89))+(((-1.0)*gclwh8_11*x83))+(((-1.0)*gclwh10_11*x84))+(((-1.0)*x458))+x449+x459+(((-1.0)*gclwh6_3*x74))+(((0.001068933642)*x101))+(((-1.0)*gclwh12_3*x119))+((gclwh6_11*x69))+(((0.01252412)*gclwh6_3*x73)));
op[6]=((((-1.0)*x439))+(((0.42819102)*gclwh7_1*x73))+(((-1.0)*gclwh5_1*x163))+((gclwh7_10*x69))+(((-1.0)*gclwh7_1*x111))+(((-1.0)*gclwh13_1*x165))+(((-1.0)*x460))+(((0.2068108875)*gclwh11_1*x84))+x448+x461+(((-0.2068108875)*gclwh7_1*x69))+(((-1.0)*gclwh9_10*x83))+(((-0.42819102)*gclwh11_1*x75))+(((-1.0)*gclwh11_10*x84))+(((0.036546103557)*x148))+(((0.00155960496929498)*x198)));
op[7]=((((0.4569)*gclwh7_13*x69))+(((-1.0)*gclwh13_9*x190))+(((-0.4569)*gclwh9_13*x83))+(((0.07799283)*x140))+(((-1.0)*x183*x78))+(((0.00332834402025)*x177))+(((-1.0)*x450))+(((-0.00332834402025)*x78))+x432+x445+(((-0.00332834402025)*x149))+(((0.9138)*gclwh11_13*x75))+(((0.9138)*gclwh9_13*x88))+(((-0.07799283)*x147))+(((-1.0)*x225))+(((-0.9138)*gclwh7_13*x73)));
op[8]=((((0.4265)*gclwh11_0*x84))+(((-0.07280355)*x181))+(((0.853)*gclwh7_0*x73))+(((0.00310689149625)*x72))+(((-0.4265)*gclwh7_0*x69))+(((0.08318211)*x140))+(((-0.853)*gclwh11_0*x75))+(((-0.08318211)*x147))+(((-1.0)*gclwh13_9*x160))+(((-0.07280355)*x106))+((gclwh15_0*x172))+x434+(((0.00310689149625)*x174))+(((-1.0)*x272))+(((-0.853)*gclwh9_0*x88))+(((-0.00310689149625)*x138))+(((0.4265)*pp*x72)));
op[9]=((-0.09583455)+(((-1.0)*x455))+x457);
op[10]=((((-1.0)*gclwh7_1*x74))+(((-1.0)*x448))+(((-1.0)*gclwh13_1*x119))+(((0.0010225625)*gclwh7_1*x69))+(((-0.01252412)*gclwh11_1*x75))+(((-1.0)*x460))+(((-1.0)*gclwh7_10*x69))+((gclwh11_1*x144))+(((-1.0)*gclwh5_1*x89))+x439+x461+(((0.01252412)*gclwh7_1*x73))+((gclwh11_10*x84))+((gclwh9_10*x83))+(((0.001068933642)*x148))+(((-0.0010225625)*gclwh11_1*x84)));
op[11]=((((-0.00518928)*x140))+(((-1.0)*x432))+(((0.00518928)*x147))+(((-0.000221452524)*x149))+(((-1.0)*x450))+x225+x445+(((0.0608)*gclwh11_13*x75))+(((-1.0)*gclwh7_13*x276))+(((0.0304)*gclwh7_13*x69))+((gclwh13_9*x109))+(((0.0608)*gclwh9_13*x88))+(((-1.0)*x153*x78))+(((-0.000221452524)*x78))+(((-0.0304)*gclwh9_13*x83))+(((0.000221452524)*x177)));
op[12]=((((-0.00332834402025)*x129))+(((-0.9138)*gclwh14_8*x88))+(((-1.0)*x442))+(((-0.4569)*gclwh4_8*x84))+(((-1.0)*gclwh6_12*x190))+(((-1.0)*gclwh4_8*x114))+(((0.9138)*gclwh4_8*x75))+(((-0.4569)*gclwh12_8*x69))+(((0.07799283)*x169))+(((0.00332834402025)*x175))+(((-1.0)*x234))+x433+x452+(((0.4569)*gclwh14_8*x83))+(((0.07799283)*x200))+(((0.9138)*gclwh12_8*x73)));
op[13]=((-0.2213801325)+(((-0.2068108875)*gclwh12_3*x69))+(((-1.0)*x446))+(((0.42819102)*gclwh12_3*x73))+(((-1.0)*gclwh12_11*x69))+(((-1.0)*gclwh4_11*x84))+((gclwh6_3*x165))+((gclwh3_3*x111))+(((-0.2213801325)*gclwh3_3*x69))+(((-1.0)*x464))+((gclwh14_11*x83))+(((-0.2213801325)*gclwh1_3*x83))+(((0.42819102)*gclwh4_3*x75))+(((0.42819102)*gclwh3_3*x73))+x440+x463+(((-0.00155960496929498)*x112))+(((-1.0)*gclwh12_3*x111))+(((0.2068108875)*gclwh14_3*x83))+(((-0.2068108875)*gclwh4_3*x84))+(((-0.42819102)*gclwh14_3*x88))+(((0.42819102)*gclwh1_3*x88))+(((0.00155960496929498)*x162))+(((0.00155960496929498)*x196)));
op[14]=((-0.053024565)+((gclwh6_11*x130))+(((-1.0)*gclwh12_11*x79))+(((-0.014569245)*x184))+(((4.0)*gclwh4_11*x75))+(((-1.0)*x173*x69))+(((0.014569245)*x142))+(((-1.0)*x184*x82))+((x142*x82))+(((-1.0)*gclwh8_11*x87))+(((4.0)*gclwh12_11*x73))+(((-4.0)*gclwh14_11*x88))+(((-1.0)*gclwh10_11*x168)));
op[15]=((((-0.9746)*gclwh12_8*x73))+(((-0.4265)*gclwh4_2*x84))+(((-0.00310689149625)*x115))+((gclwh14_14*x156))+(((-0.4265)*gclwh1_2*x83))+(((0.4265)*gclwh14_2*x83))+(((-1.0)*gclwh12_2*x151))+(((0.4873)*gclwh4_8*x84))+(((-0.00354979654425)*x175))+((gclwh6_2*x132))+(((0.853)*gclwh3_2*x73))+(((0.853)*gclwh1_2*x88))+(((-0.853)*npx*x85))+(((-0.4265)*gclwh12_2*x69))+((gclwh14_2*x127))+(((-0.4265)*gclwh3_2*x69))+(((-1.0)*x192*x84))+(((0.4494)*gclwh4_14*x75))+(((-0.4873)*gclwh14_8*x83))+((x194*x83))+(((0.4873)*gclwh12_8*x69))+(((-1.0)*x195*x69))+(((-0.4494)*gclwh14_14*x88))+(((-0.07280355)*x97))+(((0.853)*gclwh12_2*x73))+(((0.9746)*gclwh14_8*x88))+(((-1.0)*gclwh10_2*x182))+(((0.00354979654425)*x171))+(((-0.9746)*gclwh4_8*x75))+(((-0.00163685467575)*gclwh12_14*r21))+((gclwh3_2*x151))+(((0.853)*gclwh4_2*x75))+(((-0.00163685467575)*x134))+((gclwh1_2*x127))+(((0.00354979654425)*x129))+(((0.4494)*gclwh12_14*x73)));
op[16]=((((-0.0608)*gclwh4_8*x75))+(((-0.000221452524)*x175))+(((-1.0)*gclwh12_8*x276))+(((-1.0)*gclwh6_12*x109))+(((0.0304)*gclwh12_8*x69))+(((-1.0)*x452))+(((0.0608)*gclwh14_8*x88))+(((0.0304)*gclwh4_8*x84))+(((-1.0)*x234))+x433+x442+(((0.000221452524)*x129))+(((-0.0304)*gclwh14_8*x83))+(((0.00518928)*x200))+(((0.000221452524)*x171))+(((0.00518928)*x169)));
op[17]=((0.0135466825)+(((-4.561674317235e-5)*x112))+((gclwh3_3*x74))+(((-1.0)*x440))+(((-0.0135466825)*gclwh1_3*x83))+(((0.01252412)*gclwh12_3*x73))+(((-1.0)*gclwh14_11*x83))+(((-0.01252412)*gclwh14_3*x88))+(((-1.0)*x464))+(((0.01252412)*gclwh4_3*x75))+((gclwh4_11*x84))+(((4.561674317235e-5)*x196))+(((0.01252412)*gclwh1_3*x88))+(((4.561674317235e-5)*x162))+x446+x463+((gclwh6_3*x119))+(((-1.0)*gclwh12_3*x74))+(((-0.0135466825)*gclwh3_3*x69))+(((0.0010225625)*gclwh4_3*x84))+(((0.0010225625)*gclwh12_3*x69))+(((0.01252412)*gclwh3_3*x73))+((gclwh12_11*x69))+(((-0.0010225625)*gclwh14_3*x83)));
op[18]=((0.2213801325)+((gclwh15_10*x83))+(((-1.0)*x447))+((gclwh2_1*x111))+(((-1.0)*gclwh5_10*x84))+((gclwh13_1*x111))+(((0.42819102)*gclwh0_1*x88))+(((0.42819102)*gclwh2_1*x73))+((gclwh11_1*x163))+(((0.2068108875)*gclwh13_1*x69))+(((-1.0)*x462))+(((-1.0)*gclwh7_1*x165))+(((0.42819102)*gclwh15_1*x88))+(((0.2068108875)*gclwh5_1*x84))+x441+x465+(((-0.2213801325)*gclwh2_1*x69))+(((-0.2213801325)*gclwh0_1*x83))+(((-1.0)*gclwh13_10*x69))+(((-0.00155960496929498)*x81))+(((-0.42819102)*gclwh13_1*x73))+(((-0.42819102)*gclwh5_1*x75))+(((-0.2068108875)*pp*x81))+(((0.00155960496929498)*x191))+(((0.00155960496929498)*x199)));
op[19]=((((-0.00332834402025)*x121))+(((-1.0)*x437))+(((-0.9138)*gclwh5_9*x75))+(((0.4569)*gclwh5_9*x84))+(((-0.07799283)*x92))+((gclwh7_13*x190))+(((-1.0)*x453))+x257+x444+(((-0.9138)*gclwh13_9*x73))+(((0.00332834402025)*x96))+(((-0.07799283)*x167))+(((0.4569)*gclwh13_9*x69))+(((0.00332834402025)*x128))+(((-0.4569)*gclwh15_9*x83))+(((0.9138)*gclwh15_9*x88)));
op[20]=((((0.00354979654425)*x96))+(((-0.00354979654425)*x121))+(((-0.4873)*gclwh15_9*x83))+((gclwh0_0*x127))+(((-0.853)*gclwh5_0*x75))+(((0.00310689149625)*x93))+(((-1.0)*gclwh7_0*x132))+(((0.4494)*gclwh5_15*x75))+(((0.4873)*gclwh5_9*x84))+(((0.4265)*gclwh13_0*x69))+(((-0.00163685467575)*gclwh5_15*r22))+(((0.4494)*gclwh13_15*x73))+(((-0.9746)*gclwh13_9*x73))+(((-0.00163685467575)*x76))+(((-0.9746)*gclwh5_9*x75))+(((-1.0)*gclwh15_0*x127))+(((-0.4265)*gclwh15_0*x83))+(((-0.4494)*gclwh15_15*x88))+(((-0.4265)*gclwh0_0*x83))+(((0.853)*gclwh0_0*x88))+(((-1.0)*x154*x69))+((gclwh15_15*x156))+(((0.4873)*gclwh13_9*x69))+(((0.4265)*gclwh5_0*x84))+(((-0.853)*gclwh13_0*x73))+(((0.9746)*gclwh15_9*x88))+((x83*x95))+(((0.00310689149625)*x158))+(((0.00354979654425)*x128))+((gclwh9_0*x172))+((gclwh13_0*x151))+(((0.853)*gclwh15_0*x88))+(((-1.0)*x187*x84))+(((0.853)*gclwh2_0*x73))+((gclwh11_0*x182))+(((-0.4265)*gclwh2_0*x69)));
op[21]=((-0.053024565)+(((-1.0)*x82*x90))+((x189*x69))+((gclwh11_10*x168))+(((4.0)*gclwh15_10*x88))+(((0.014569245)*x122))+((gclwh13_10*x79))+(((-1.0)*gclwh7_10*x130))+(((-4.0)*gclwh13_10*x73))+(((-0.014569245)*x90))+((x122*x82))+((gclwh9_10*x87))+(((-4.0)*gclwh5_10*x75)));
op[22]=((-0.0135466825)+(((-1.0)*x441))+(((0.01252412)*gclwh0_1*x88))+((gclwh5_10*x84))+((gclwh13_10*x69))+((gclwh11_1*x89))+((gclwh5_1*x144))+(((0.01252412)*gclwh2_1*x73))+(((-0.01252412)*gclwh13_1*x73))+((gclwh2_1*x74))+(((-0.0135466825)*gclwh2_1*x69))+(((-1.0)*gclwh7_1*x119))+(((-1.0)*x462))+(((-4.561674317235e-5)*x81))+((gclwh13_1*x74))+(((4.561674317235e-5)*x199))+(((0.0010225625)*pp*x81))+x447+x465+(((0.01252412)*gclwh15_1*x88))+(((-1.0)*gclwh15_10*x83))+(((-0.0010225625)*gclwh13_1*x69))+(((-0.0010225625)*gclwh5_1*x84))+(((-0.01252412)*gclwh5_1*x75))+(((-0.0135466825)*gclwh0_1*x83)));
op[23]=(((gclwh7_13*x109))+(((-1.0)*x444))+(((-0.000221452524)*x128))+(((-1.0)*x437))+(((-0.00518928)*x92))+(((0.0304)*gclwh15_9*x83))+(((-0.000221452524)*x96))+(((-0.0608)*gclwh15_9*x88))+x257+x453+(((-0.0304)*gclwh5_9*x84))+(((-0.0304)*gclwh13_9*x69))+(((0.000221452524)*x121))+((gclwh13_9*x276))+(((0.0608)*gclwh5_9*x75))+(((-0.00518928)*x167)));
op[24]=((-0.20533086)+(((-1.0)*x454))+x456);
op[25]=((((0.0066566880405)*x133))+(((-1.0)*x436))+(((0.0066566880405)*x117))+(((1.8276)*gclwh6_2*x73))+((gclwh14_2*x100))+(((-0.0066566880405)*x150))+(((0.9138)*gclwh8_2*x83))+(((-0.9138)*gclwh6_2*x69))+x264+(((-0.15598566)*x180))+(((-1.8276)*gclwh8_2*x88))+(((-0.15598566)*x141))+(((-1.8276)*gclwh10_2*x75))+(((0.9138)*gclwh10_2*x84)));
op[26]=((((-1.706)*gclwh10_12*x75))+(((0.0062137829925)*x193))+(((-0.07671258)*x116))+(((-0.07671258)*x107))+(((0.07671258)*x176))+(((-1.706)*gclwh8_12*x88))+(((-0.853)*gclwh6_12*x69))+(((0.853)*gclwh10_12*x84))+(((0.0062137829925)*x80))+(((1.706)*gclwh6_12*x73))+((x80*x91))+(((-0.0062137829925)*x126)));
op[27]=((((8.0)*gclwh10_11*x75))+(((-1.0)*x164*x84))+(((-0.02913849)*x186))+((x185*x69))+(((0.02913849)*x86))+(((-1.0)*gclwh14_11*x146))+((gclwh4_11*x98))+(((-0.02913849)*x104))+(((8.0)*gclwh8_11*x88))+(((-1.0)*x137*x83))+(((-8.0)*gclwh6_11*x73))+((gclwh12_11*x135)));
op[28]=((-0.01366176)+(((-1.0)*x456))+x454);
op[29]=((((0.0608)*gclwh10_2*x84))+(((-0.1216)*gclwh10_2*x75))+((gclwh14_2*x120))+(((-0.01037856)*x141))+(((-0.01037856)*x180))+(((0.000442905048)*x117))+(((0.0608)*gclwh8_2*x83))+(((-0.1216)*gclwh8_2*x88))+x436+(((0.1216)*gclwh6_2*x73))+(((0.000442905048)*x133))+(((-0.0608)*gclwh6_2*x69))+(((-1.0)*x264))+(((-0.000442905048)*x150)));
op[30]=((((0.0066566880405)*x174))+(((-1.8276)*gclwh9_0*x88))+((gclwh15_0*x100))+(((-0.0066566880405)*x138))+(((-0.9138)*gclwh7_0*x69))+x434+(((-0.15598566)*x106))+(((-0.15598566)*x181))+(((-1.0)*x272))+(((-1.8276)*gclwh11_0*x75))+(((0.9138)*gclwh11_0*x84))+(((0.0066566880405)*x72))+(((0.9138)*pp*x72))+(((1.8276)*gclwh7_0*x73)));
op[31]=((-0.20533086)+(((-1.0)*x455))+x457);
op[32]=((((0.02913849)*x124))+((gclwh15_10*x146))+(((0.02913849)*x103))+((x125*x84))+(((-1.0)*x188*x69))+((x145*x83))+(((-8.0)*gclwh11_10*x75))+(((8.0)*gclwh7_10*x73))+(((-1.0)*gclwh13_10*x135))+(((-1.0)*gclwh5_10*x98))+(((-0.02913849)*gclwh7_10*r21))+(((-8.0)*gclwh9_10*x88)));
op[33]=((((-0.07671258)*x139))+(((0.853)*gclwh9_13*x83))+((x78*x91))+(((-0.0062137829925)*x177))+(((-0.07671258)*x197))+(((0.07671258)*x136))+(((-0.853)*gclwh7_13*x69))+(((-1.706)*gclwh11_13*x75))+(((-1.706)*gclwh9_13*x88))+(((0.0062137829925)*x149))+(((0.0062137829925)*x78))+(((1.706)*gclwh7_13*x73)));
op[34]=((((-0.1216)*gclwh9_0*x88))+(((-0.0608)*gclwh7_0*x69))+(((0.0608)*gclwh11_0*x84))+(((0.000442905048)*x72))+(((-1.0)*x434))+(((-0.1216)*gclwh11_0*x75))+((gclwh15_0*x120))+(((0.000442905048)*x174))+(((-0.01037856)*x181))+x272+(((-0.000442905048)*x138))+(((-0.01037856)*x106))+(((0.0608)*pp*x72))+(((0.1216)*gclwh7_0*x73)));
IkReal x466=pz*pz;
IkReal x467=pp*pp;
IkReal x468=((0.1707)*pz);
IkReal x469=(npy*pz);
IkReal x470=(pp*r21);
IkReal x471=((0.1707)*rxp1_2);
IkReal x472=(gclwh13_1*pp);
IkReal x473=(gclwh9_13*rxp0_2);
IkReal x474=((4.561674317235e-5)*r21);
IkReal x475=((4.0)*gclwh12_11);
IkReal x476=(npz*pz);
IkReal x477=((0.00163685467575)*r21);
IkReal x478=(gclwh10_12*rxp2_2);
IkReal x479=(pz*r20);
IkReal x480=(gclwh4_2*r22);
IkReal x481=(gclwh11_13*r22);
IkReal x482=((0.02913849)*r22);
IkReal x483=((0.014569245)*r21);
IkReal x484=(gclwh15_1*r20);
IkReal x485=(pp*r20);
IkReal x486=((2.0)*gclwh11_10);
IkReal x487=((0.0072846225)*r21);
IkReal x488=(npx*pz);
IkReal x489=((0.001068933642)*rxp2_2);
IkReal x490=((2.0)*gclwh4_11);
IkReal x491=(gclwh5_9*r22);
IkReal x492=((0.08535)*pp);
IkReal x493=(gclwh2_0*pz);
IkReal x494=((0.019178145)*rxp0_2);
IkReal x495=((0.2247)*gclwh15_15);
IkReal x496=(gclwh9_0*rxp0_2);
IkReal x497=(gclwh8_2*rxp0_2);
IkReal x498=(gclwh12_8*rxp1_2);
IkReal x499=((0.3414)*rxp0_2);
IkReal x500=(pp*r22);
IkReal x501=(gclwh14_3*rxp0_2);
IkReal x502=(gclwh13_0*pz);
IkReal x503=(gclwh12_2*r21);
IkReal x504=(gclwh11_10*rxp2_2);
IkReal x505=((0.0072846225)*r22);
IkReal x506=((0.1707)*rxp2_2);
IkReal x507=(gclwh5_1*pp);
IkReal x508=(gclwh5_0*pz);
IkReal x509=((0.00155960496929498)*r21);
IkReal x510=((2.0)*gclwh9_10);
IkReal x511=((2.0)*gclwh15_10);
IkReal x512=(gclwh14_11*r20);
IkReal x513=((0.1707)*rxp0_2);
IkReal x514=((4.0)*gclwh14_11);
IkReal x515=((0.00332834402025)*r22);
IkReal x516=((0.08318211)*rxp0_2);
IkReal x517=(gclwh12_14*rxp1_2);
IkReal x518=((0.4494)*gclwh4_14);
IkReal x519=(gclwh6_12*rxp1_2);
IkReal x520=((0.001068933642)*rxp1_2);
IkReal x521=(gclwh15_9*r20);
IkReal x522=((0.4494)*gclwh15_15);
IkReal x523=(gclwh4_8*rxp2_2);
IkReal x524=((0.2247)*gclwh12_14);
IkReal x525=((0.0072846225)*r20);
IkReal x526=((0.00310689149625)*r20);
IkReal x527=((0.3414)*rxp1_2);
IkReal x528=((0.6828)*rxp0_2);
IkReal x529=((2.0)*gclwh7_10);
IkReal x530=((0.000442905048)*r21);
IkReal x531=((1.0)*pp);
IkReal x532=((0.0032737093515)*r20);
IkReal x533=((0.07280355)*rxp1_2);
IkReal x534=((1.0)*pz);
IkReal x535=((4.0)*gclwh15_10);
IkReal x536=(gclwh4_14*r22);
IkReal x537=((0.000818427337875)*r20);
IkReal x538=(gclwh7_0*pz);
IkReal x539=(gclwh5_15*rxp2_2);
IkReal x540=(gclwh12_3*pp);
IkReal x541=(gclwh10_2*pz);
IkReal x542=(gclwh13_9*r21);
IkReal x543=(gclwh13_9*rxp1_2);
IkReal x544=((0.014569245)*rxp0_2);
IkReal x545=((0.019178145)*rxp1_2);
IkReal x546=((4.561674317235e-5)*r22);
IkReal x547=((0.15598566)*rxp1_2);
IkReal x548=(gclwh5_0*r22);
IkReal x549=(gclwh5_9*rxp2_2);
IkReal x550=((0.000221452524)*r20);
IkReal x551=(gclwh4_3*pp);
IkReal x552=(gclwh15_1*rxp0_2);
IkReal x553=(gclwh6_12*r21);
IkReal x554=((0.03835629)*rxp0_2);
IkReal x555=((0.019178145)*rxp2_2);
IkReal x556=(gclwh7_1*pp);
IkReal x557=((0.000818427337875)*r22);
IkReal x558=(gclwh10_11*rxp2_2);
IkReal x559=((0.000442905048)*r20);
IkReal x560=((0.4569)*pp);
IkReal x561=((0.000818427337875)*r21);
IkReal x562=((4.0)*gclwh4_11);
IkReal x563=((0.4494)*gclwh12_14);
IkReal x564=((2.0)*pp);
IkReal x565=((0.014569245)*r22);
IkReal x566=(gclwh12_8*r21);
IkReal x567=((0.00332834402025)*r20);
IkReal x568=((2.0)*gclwh6_11);
IkReal x569=(gclwh1_3*r20);
IkReal x570=((0.036546103557)*rxp2_2);
IkReal x571=((0.036546103557)*rxp1_2);
IkReal x572=((0.3414)*rxp2_2);
IkReal x573=(gclwh4_8*r22);
IkReal x574=((0.07280355)*rxp0_2);
IkReal x575=((2.0)*gclwh12_11);
IkReal x576=(gclwh2_0*r21);
IkReal x577=(gclwh5_15*r22);
IkReal x578=(gclwh6_2*pz);
IkReal x579=((0.4494)*gclwh13_15);
IkReal x580=(gclwh7_13*r21);
IkReal x581=(gclwh11_0*pz);
IkReal x582=((0.014569245)*r20);
IkReal x583=((0.00518928)*rxp0_2);
IkReal x584=(gclwh13_0*r21);
IkReal x585=((0.00310689149625)*r22);
IkReal x586=((2.0)*gclwh8_11);
IkReal x587=(gclwh11_0*rxp2_2);
IkReal x588=((0.00163685467575)*r20);
IkReal x589=((0.07280355)*rxp2_2);
IkReal x590=((4.0)*gclwh5_10);
IkReal x591=((2.0)*gclwh5_10);
IkReal x592=((0.6828)*rxp1_2);
IkReal x593=(gclwh8_12*rxp0_2);
IkReal x594=((0.00155960496929498)*r22);
IkReal x595=((0.07799283)*rxp0_2);
IkReal x596=((0.4494)*gclwh14_14);
IkReal x597=((0.2247)*gclwh5_15);
IkReal x598=((2.0)*gclwh13_10);
IkReal x599=((0.00310689149625)*r21);
IkReal x600=((0.2247)*gclwh4_14);
IkReal x601=(gclwh14_3*r20);
IkReal x602=((0.01037856)*rxp1_2);
IkReal x603=(gclwh11_13*rxp2_2);
IkReal x604=((0.4494)*gclwh5_15);
IkReal x605=((0.2247)*gclwh14_14);
IkReal x606=(gclwh12_2*pz);
IkReal x607=((0.02913849)*r21);
IkReal x608=((0.0066566880405)*r20);
IkReal x609=(gclwh14_8*r20);
IkReal x610=((0.0032737093515)*r21);
IkReal x611=((0.2247)*gclwh13_15);
IkReal x612=(gclwh0_1*r20);
IkReal x613=((2.0)*gclwh10_11);
IkReal x614=(gclwh7_13*rxp1_2);
IkReal x615=(gclwh10_2*rxp2_2);
IkReal x616=((4.0)*gclwh13_10);
IkReal x617=((2.0)*gclwh14_11);
IkReal x618=(gclwh8_11*x499);
IkReal x619=((0.3414)*x558);
IkReal x620=(gclwh12_11*x483);
IkReal x621=(gclwh4_11*x565);
IkReal x622=((0.014569245)*x512);
IkReal x623=(gclwh6_11*x527);
IkReal x624=((0.00163685467575)*x536);
IkReal x625=(gclwh12_14*x477);
IkReal x626=(gclwh14_14*x588);
IkReal x627=((0.00163685467575)*x577);
IkReal x628=(gclwh13_15*x477);
IkReal x629=(gclwh15_15*x588);
IkReal x630=(gclwh7_10*x527);
IkReal x631=(gclwh15_10*x582);
IkReal x632=(gclwh13_10*x483);
IkReal x633=((0.3414)*x504);
IkReal x634=(gclwh5_10*x565);
IkReal x635=(gclwh9_10*x499);
IkReal x636=((0.019178145)*x517);
IkReal x637=(gclwh4_14*x555);
IkReal x638=(gclwh6_5*x561);
IkReal x639=(gclwh10_5*x557);
IkReal x640=(gclwh8_5*x537);
IkReal x641=(gclwh14_14*x494);
IkReal x642=((0.014569245)*x523);
IkReal x643=(gclwh14_11*x513);
IkReal x644=((0.014569245)*x498);
IkReal x645=(gclwh10_11*x505);
IkReal x646=(gclwh8_11*x525);
IkReal x647=(gclwh6_11*x487);
IkReal x648=(gclwh4_11*x506);
IkReal x649=(gclwh14_8*x544);
IkReal x650=(gclwh12_11*x471);
IkReal x651=(gclwh5_10*x572);
IkReal x652=(gclwh7_10*x483);
IkReal x653=(gclwh13_10*x527);
IkReal x654=(gclwh13_10*x471);
IkReal x655=(gclwh7_10*x487);
IkReal x656=((0.014569245)*x543);
IkReal x657=(gclwh5_10*x506);
IkReal x658=((0.014569245)*x549);
IkReal x659=(gclwh15_9*x544);
IkReal x660=(gclwh11_10*x505);
IkReal x661=(gclwh15_10*x513);
IkReal x662=(gclwh9_10*x525);
IkReal x663=(gclwh13_15*x545);
IkReal x664=(gclwh7_7*x561);
IkReal x665=((0.019178145)*x539);
IkReal x666=(gclwh15_15*x494);
IkReal x667=(gclwh11_7*x557);
IkReal x668=(gclwh9_7*x537);
IkReal x669=(gclwh12_14*x561);
IkReal x670=(gclwh8_5*x494);
IkReal x671=(gclwh10_5*x555);
IkReal x672=((0.000818427337875)*x536);
IkReal x673=(gclwh6_5*x545);
IkReal x674=(gclwh14_14*x537);
IkReal x675=((0.000621742530375)*x573);
IkReal x676=(gclwh6_11*x471);
IkReal x677=((0.0072846225)*x512);
IkReal x678=((0.000621742530375)*x566);
IkReal x679=((0.000621742530375)*x609);
IkReal x680=(gclwh8_11*x513);
IkReal x681=(gclwh10_11*x506);
IkReal x682=(gclwh12_11*x487);
IkReal x683=(gclwh4_11*x505);
IkReal x684=(gclwh15_10*x525);
IkReal x685=((0.000621742530375)*x521);
IkReal x686=(gclwh7_10*x471);
IkReal x687=((0.000621742530375)*x542);
IkReal x688=(gclwh9_10*x513);
IkReal x689=(gclwh5_10*x505);
IkReal x690=((0.1707)*x504);
IkReal x691=(gclwh13_10*x487);
IkReal x692=((0.000621742530375)*x491);
IkReal x693=(r21*x467);
IkReal x694=((2.0)*x466);
IkReal x695=((1.0)*x467);
IkReal x696=(x490*x500);
IkReal x697=(x470*x575);
IkReal x698=(x488*x514);
IkReal x699=(x485*x617);
IkReal x700=(x469*x475);
IkReal x701=(x476*x562);
IkReal x702=(x500*x600);
IkReal x703=(x488*x596);
IkReal x704=(x470*x524);
IkReal x705=(x476*x518);
IkReal x706=(x485*x605);
IkReal x707=(x469*x563);
IkReal x708=(x500*x597);
IkReal x709=(x470*x611);
IkReal x710=(x488*x522);
IkReal x711=(x485*x495);
IkReal x712=(x469*x579);
IkReal x713=(x476*x604);
IkReal x714=(x485*x511);
IkReal x715=(x476*x590);
IkReal x716=(x469*x616);
IkReal x717=(x470*x598);
IkReal x718=(x488*x535);
IkReal x719=(x500*x591);
IkReal x720=((0.2247)*gclwh10_5*x476);
IkReal x721=((0.2247)*gclwh8_5*x488);
IkReal x722=((0.11235)*gclwh6_5*x470);
IkReal x723=((0.11235)*gclwh8_5*x485);
IkReal x724=((0.2247)*gclwh6_5*x469);
IkReal x725=((0.11235)*gclwh10_5*x500);
IkReal x726=(x471*x540);
IkReal x727=(gclwh14_2*rxp0_2*x468);
IkReal x728=(gclwh6_3*x693);
IkReal x729=(x505*x541);
IkReal x730=(x469*x568);
IkReal x731=(x500*x541);
IkReal x732=(x506*x551);
IkReal x733=((0.0072846225)*gclwh8_2*x479);
IkReal x734=(gclwh8_2*pp*x479);
IkReal x735=(x487*x578);
IkReal x736=(gclwh12_2*rxp1_2*x468);
IkReal x737=(x476*x613);
IkReal x738=(gclwh4_2*rxp2_2*x468);
IkReal x739=(x488*x586);
IkReal x740=((0.1707)*pp*x501);
IkReal x741=(x470*x529);
IkReal x742=((4.0)*gclwh9_10*x488);
IkReal x743=((4.0)*gclwh11_10*x476);
IkReal x744=(x476*x486);
IkReal x745=(x471*x472);
IkReal x746=(x488*x510);
IkReal x747=(gclwh7_1*x693);
IkReal x748=(x505*x581);
IkReal x749=(gclwh15_0*rxp0_2*x468);
IkReal x750=(x500*x581);
IkReal x751=(x506*x507);
IkReal x752=((0.0072846225)*gclwh9_0*x479);
IkReal x753=(gclwh9_0*pp*x479);
IkReal x754=(gclwh15_1*pp*x513);
IkReal x755=(gclwh13_0*rxp1_2*x468);
IkReal x756=(gclwh5_0*rxp2_2*x468);
IkReal x757=(x469*x529);
IkReal x758=(x487*x538);
IkReal x759=((0.2247)*gclwh9_7*x488);
IkReal x760=((0.11235)*gclwh7_7*x470);
IkReal x761=((0.2247)*gclwh11_7*x476);
IkReal x762=((0.11235)*gclwh11_7*x500);
IkReal x763=((0.2247)*gclwh7_7*x469);
IkReal x764=((0.11235)*gclwh9_7*x485);
IkReal x765=((0.11235)*gclwh12_14*x470);
IkReal x766=(x488*x605);
IkReal x767=((0.11235)*gclwh4_14*x500);
IkReal x768=(x469*x524);
IkReal x769=((0.11235)*gclwh14_14*x485);
IkReal x770=(x476*x600);
IkReal x771=(gclwh14_8*npx*x468);
IkReal x772=(gclwh14_2*pp*x479);
IkReal x773=(gclwh12_3*x693);
IkReal x774=(gclwh3_2*pz*x487);
IkReal x775=((0.08535)*gclwh12_8*x470);
IkReal x776=(x476*x490);
IkReal x777=(gclwh6_2*rxp1_2*x468);
IkReal x778=(gclwh3_3*x693);
IkReal x779=(x467*x569);
IkReal x780=(x492*x573);
IkReal x781=((0.0072846225)*gclwh14_2*x479);
IkReal x782=(gclwh4_3*r22*x467);
IkReal x783=((0.0072846225)*gclwh1_2*x479);
IkReal x784=(x469*x575);
IkReal x785=(gclwh12_8*npy*x468);
IkReal x786=(gclwh4_8*npz*x468);
IkReal x787=(x468*x497);
IkReal x788=((0.08535)*gclwh14_8*x485);
IkReal x789=(x488*x617);
IkReal x790=(gclwh6_3*pp*x471);
IkReal x791=(x468*x615);
IkReal x792=((0.0072846225)*pz*x480);
IkReal x793=(x487*x606);
IkReal x794=(x487*x502);
IkReal x795=(x467*x484);
IkReal x796=((0.08535)*gclwh15_9*x485);
IkReal x797=(x500*x508);
IkReal x798=(x470*x502);
IkReal x799=(x487*x493);
IkReal x800=((0.0072846225)*gclwh0_0*x479);
IkReal x801=(x468*x496);
IkReal x802=(x505*x508);
IkReal x803=(gclwh2_1*x693);
IkReal x804=(x476*x591);
IkReal x805=(gclwh5_9*npz*x468);
IkReal x806=(x471*x556);
IkReal x807=(x469*x598);
IkReal x808=(x468*x587);
IkReal x809=(gclwh13_9*npy*x468);
IkReal x810=(x467*x612);
IkReal x811=(x491*x492);
IkReal x812=(gclwh15_9*npx*x468);
IkReal x813=((0.08535)*gclwh13_9*x470);
IkReal x814=(gclwh11_1*pp*x506);
IkReal x815=(x488*x511);
IkReal x816=(gclwh7_0*rxp1_2*x468);
IkReal x817=((0.0072846225)*gclwh15_0*x479);
IkReal x818=(gclwh6_2*npy*x694);
IkReal x819=(gclwh6_3*x469*x564);
IkReal x820=(gclwh6_2*x470*x534);
IkReal x821=(gclwh10_2*npz*x694);
IkReal x822=(gclwh8_2*npx*x694);
IkReal x823=(gclwh11_1*x476*x564);
IkReal x824=(gclwh7_0*npy*x694);
IkReal x825=(gclwh9_0*npx*x694);
IkReal x826=(gclwh11_1*r22*x695);
IkReal x827=((2.0)*x469*x556);
IkReal x828=(gclwh11_0*npz*x694);
IkReal x829=(gclwh7_0*x470*x534);
IkReal x830=(gclwh12_2*npy*x694);
IkReal x831=(gclwh3_2*npy*x694);
IkReal x832=(gclwh1_2*npx*x694);
IkReal x833=(gclwh14_3*x488*x564);
IkReal x834=(gclwh4_2*npz*x694);
IkReal x835=((2.0)*x476*x551);
IkReal x836=(gclwh12_2*x470*x534);
IkReal x837=(gclwh1_2*x479*x531);
IkReal x838=(gclwh3_3*x469*x564);
IkReal x839=(pz*x480*x531);
IkReal x840=(gclwh1_3*x488*x564);
IkReal x841=(gclwh3_2*x470*x534);
IkReal x842=((2.0)*x469*x540);
IkReal x843=(gclwh14_2*npx*x694);
IkReal x844=(x601*x695);
IkReal x845=(gclwh0_0*npx*x694);
IkReal x846=(gclwh2_0*npy*x694);
IkReal x847=((2.0)*x476*x507);
IkReal x848=((2.0)*x469*x472);
IkReal x849=(gclwh15_0*npx*x694);
IkReal x850=(gclwh2_1*x469*x564);
IkReal x851=(gclwh0_1*x488*x564);
IkReal x852=(gclwh5_0*npz*x694);
IkReal x853=(gclwh13_0*npy*x694);
IkReal x854=(gclwh0_0*x479*x531);
IkReal x855=(gclwh15_0*x479*x531);
IkReal x856=((1.0)*x470*x493);
IkReal x857=((1.0)*gclwh13_1*x693);
IkReal x858=(gclwh5_1*r22*x695);
IkReal x859=(gclwh15_1*x488*x564);
IkReal x860=(x670+x671);
IkReal x861=(x636+x637);
IkReal x862=(x663+x665);
IkReal x863=(x646+x645+x643+x730);
IkReal x864=(x661+x660+x662+x757);
IkReal x865=(x686+x684+x804+x807);
IkReal x866=(x676+x677+x776+x784);
IkReal x867=(x626+x706+x707+x705);
IkReal x868=(x674+x770+x768+x769);
IkReal x869=(x629+x711+x713+x712);
IkReal x870=(x664+x759+x760+x761);
IkReal x871=(x638+x720+x721+x722);
IkReal x872=(x683+x682+x681+x680+x789);
IkReal x873=(x689+x688+x690+x691+x815);
IkReal x874=(x647+x648+x650+x737+x739);
IkReal x875=(x654+x655+x657+x746+x744);
IkReal x876=(x623+x622+x699+x700+x701);
IkReal x877=(x625+x624+x702+x703+x704);
IkReal x878=(x630+x631+x715+x714+x716);
IkReal x879=(x640+x639+x723+x724+x725);
IkReal x880=(x627+x628+x710+x708+x709);
IkReal x881=(x668+x667+x764+x762+x763);
IkReal x882=(x669+x672+x765+x766+x767);
IkReal x883=((((4.0)*gclwh7_10*x469))+((gclwh15_10*x499))+((gclwh9_10*x582))+((gclwh11_10*x565))+((x486*x500))+((x485*x510)));
IkReal x884=(x651+x652+x653+x742+x743+x741);
IkReal x885=(x634+x635+x632+x633+x719+x718+x717);
IkReal x886=(x618+x619+x621+x620+x696+x697+x698);
IkReal x887=(x649+x736+x735+x738+x740+x819+x822+x821+x820);
IkReal x888=(x644+x642+x734+x733+x732+x731+x726+x727+x728+x729+x818);
IkReal x889=(x659+x755+x754+x756+x758+x829+x828+x827+x826+x825);
IkReal x890=(x656+x658+x751+x750+x753+x752+x747+x745+x748+x749+x823+x824);
IkReal x891=(x687+x692+x852+x853+x850+x851+x856+x857+x854+x855+x858+x859+x816+x817+x814+x812+x813+x811);
IkReal x892=(x468+x678+x675+x773+x772+x771+x777+x775+x774+x779+x778+x782+x783+x780+x781+x834+x830+x831+x832+x833);
IkReal x893=(x679+x791+x790+x793+x792+x786+x787+x785+x788+x835+x836+x837+x838+x839+x841+x840+x843+x842+x844);
IkReal x894=(x468+x685+x795+x794+x797+x796+x799+x798+x810+x845+x847+x846+x849+x848+x809+x808+x805+x806+x801+x800+x803+x802);
op[35]=((-0.01366176)+(((-1.0)*x883))+x884);
op[36]=((0.392270175)+(((-1.0)*x886))+x876);
op[37]=((((-0.0066566880405)*x480))+(((-0.9138)*pp*x480))+(((1.8276)*gclwh3_2*x469))+(((-0.9138)*gclwh3_2*x470))+((gclwh14_2*x608))+(((0.0066566880405)*gclwh3_2*r21))+(((1.8276)*gclwh12_2*x469))+(((-1.8276)*gclwh14_2*x488))+((gclwh1_2*x608))+(((-0.15598566)*x497))+((gclwh6_2*x547))+(((1.8276)*gclwh1_2*x488))+(((1.8276)*gclwh4_2*x476))+(((0.9138)*gclwh14_2*x485))+(((-0.15598566)*x615))+(((-0.9138)*gclwh12_2*x470))+(((-0.0066566880405)*x503))+(((-0.9138)*gclwh1_2*x485))+x867+(((-1.0)*x877)));
op[38]=((((-0.8988)*gclwh14_14*x488))+((x485*x596))+(((-1.0)*x500*x518))+(((0.1456071)*x519))+(((-0.0032737093515)*x536))+(((-0.1456071)*x593))+(((-0.1456071)*x478))+((gclwh14_14*x532))+(((-1.0)*x470*x563))+(((0.8988)*gclwh4_14*x476))+(((0.8988)*gclwh12_14*x469))+(((-1.0)*gclwh12_14*x610)));
op[39]=((-0.00506895)+((gclwh12_11*x607))+(((-0.02913849)*x512))+(((0.6828)*x558))+((gclwh8_11*x528))+((x470*x475))+((gclwh4_11*x482))+(((-1.0)*gclwh6_11*x592))+(((-8.0)*gclwh4_11*x476))+(((-8.0)*gclwh12_11*x469))+((x500*x562))+(((-1.0)*x485*x514))+(((8.0)*gclwh14_11*x488)));
op[40]=((0.023396725)+x886+(((-1.0)*x876)));
op[41]=((((0.0608)*gclwh14_2*x485))+(((-1.0)*x867))+(((-0.1216)*gclwh14_2*x488))+(((-0.01037856)*x615))+(((-0.000442905048)*x480))+(((0.1216)*gclwh12_2*x469))+(((0.1216)*gclwh1_2*x488))+((gclwh6_2*x602))+(((-0.0608)*pp*x480))+(((0.1216)*gclwh4_2*x476))+((gclwh3_2*x530))+((gclwh14_2*x559))+((gclwh1_2*x559))+(((-0.0608)*gclwh12_2*x470))+(((-0.0608)*gclwh3_2*x470))+(((-0.000442905048)*x503))+x877+(((-0.01037856)*x497))+(((0.1216)*gclwh3_2*x469))+(((-0.0608)*gclwh1_2*x485)));
op[42]=((((0.15598566)*x587))+(((0.0066566880405)*x584))+(((-1.0)*gclwh7_0*x547))+(((0.15598566)*x496))+(((-0.9138)*gclwh0_0*x485))+(((0.0066566880405)*x548))+(((-1.8276)*gclwh13_0*x469))+(((0.9138)*gclwh13_0*x470))+(((-1.0)*x880))+(((1.8276)*gclwh0_0*x488))+(((-1.8276)*gclwh5_0*x476))+(((1.8276)*gclwh15_0*x488))+(((0.9138)*gclwh5_0*x500))+x869+(((1.8276)*gclwh2_0*x469))+(((-1.0)*gclwh15_0*x608))+((gclwh0_0*x608))+(((-0.9138)*gclwh2_0*x470))+(((-0.9138)*gclwh15_0*x485))+(((0.0066566880405)*x576)));
op[43]=((0.392270175)+x885+(((-1.0)*x878)));
op[44]=((0.00506895)+((x500*x590))+(((-8.0)*gclwh5_10*x476))+((gclwh5_10*x482))+(((-8.0)*gclwh13_10*x469))+(((8.0)*gclwh15_10*x488))+(((0.6828)*x504))+(((-1.0)*gclwh7_10*x592))+(((-0.02913849)*gclwh15_10*r20))+((x470*x616))+((gclwh13_10*x607))+((gclwh9_10*x528))+(((-1.0)*x485*x535)));
op[45]=((((-0.8988)*gclwh5_15*x476))+((x470*x579))+(((-0.1456071)*x614))+(((0.8988)*gclwh15_15*x488))+((gclwh13_15*x610))+(((-1.0)*gclwh15_15*x532))+(((0.0032737093515)*x577))+(((0.1456071)*x473))+(((-0.8988)*gclwh13_15*x469))+((x500*x604))+(((0.1456071)*x603))+(((-1.0)*x485*x522)));
op[46]=((((-0.1216)*gclwh13_0*x469))+((gclwh13_0*x530))+(((-1.0)*x869))+(((0.1216)*gclwh15_0*x488))+(((-0.1216)*gclwh5_0*x476))+(((0.01037856)*x496))+(((-0.0608)*gclwh2_0*x470))+(((0.1216)*gclwh2_0*x469))+(((-1.0)*gclwh7_0*x602))+(((0.1216)*gclwh0_0*x488))+((gclwh2_0*x530))+(((-0.0608)*gclwh15_0*x485))+(((0.0608)*gclwh13_0*x470))+(((-0.0608)*gclwh0_0*x485))+(((-1.0)*gclwh15_0*x559))+(((0.01037856)*x587))+x880+(((0.0608)*gclwh5_0*x500))+(((0.000442905048)*x548))+((gclwh0_0*x559)));
op[47]=((0.023396725)+(((-1.0)*x885))+x878);
op[48]=((((0.4569)*gclwh8_12*x485))+(((-0.9138)*gclwh10_12*x476))+(((-1.0)*x861))+(((0.9138)*gclwh6_12*x469))+(((-0.9138)*gclwh8_12*x488))+((gclwh8_12*x567))+((gclwh14_8*x595))+(((0.4569)*gclwh10_12*x500))+x641+(((-0.07799283)*x523))+(((-0.07799283)*x498))+(((-0.00332834402025)*x553))+x871+(((-0.4569)*gclwh6_12*x470))+((gclwh10_12*x515))+(((-1.0)*x879)));
op[49]=((((-1.0)*x863))+(((0.42819102)*gclwh6_3*x469))+(((-1.0)*gclwh10_11*x500))+(((-1.0)*x887))+(((-1.0)*gclwh4_3*x570))+((gclwh6_11*x470))+(((0.036546103557)*x501))+(((-0.2068108875)*gclwh6_3*x470))+(((-1.0)*gclwh8_11*x485))+(((-1.0)*gclwh12_3*x571))+x874+x888+(((-1.0)*gclwh6_3*x509)));
op[50]=((0.09583455)+(((-4.0)*gclwh6_11*x469))+((gclwh12_11*x527))+(((-1.0)*gclwh14_11*x499))+((gclwh6_11*x483))+(((4.0)*gclwh10_11*x476))+(((-1.0)*x485*x586))+(((-1.0)*gclwh10_11*x565))+((x470*x568))+((gclwh4_11*x572))+(((-1.0)*gclwh8_11*x582))+(((-1.0)*x500*x613))+(((4.0)*gclwh8_11*x488)));
op[51]=((((-1.0)*gclwh8_2*x526))+(((0.03835629)*x517))+((gclwh6_2*x599))+(((0.4265)*gclwh6_2*x470))+(((-1.0)*gclwh14_2*x574))+(((-1.0)*gclwh14_14*x554))+(((-1.0)*gclwh14_8*x516))+(((-1.0)*gclwh10_2*x585))+(((-0.4265)*gclwh10_2*x500))+(((0.08318211)*x523))+(((0.03835629)*gclwh4_14*rxp2_2))+(((0.08318211)*x498))+((gclwh12_2*x533))+(((0.853)*gclwh10_2*x476))+(((0.853)*gclwh8_2*x488))+(((-0.853)*gclwh6_2*x469))+((gclwh4_2*x589))+(((-0.4265)*gclwh8_2*x485)));
op[52]=((((0.0304)*gclwh8_12*x485))+(((0.0608)*gclwh6_12*x469))+(((0.00518928)*x498))+((gclwh8_12*x550))+(((0.000221452524)*gclwh10_12*r22))+(((-1.0)*x641))+(((-1.0)*gclwh14_8*x583))+x861+x871+(((-0.000221452524)*x553))+(((0.0304)*gclwh10_12*x500))+(((-0.0304)*gclwh6_12*x470))+(((-0.0608)*gclwh10_12*x476))+(((-0.0608)*gclwh8_12*x488))+(((0.00518928)*x523))+(((-1.0)*x879)));
op[53]=((((0.01252412)*gclwh6_3*x469))+((gclwh8_11*x485))+((gclwh10_11*x500))+(((-1.0)*x887))+(((0.0010225625)*gclwh6_3*x470))+(((-1.0)*gclwh6_3*x474))+(((-1.0)*gclwh4_3*x489))+(((-1.0)*gclwh6_11*x470))+(((0.001068933642)*x501))+x863+x888+(((-1.0)*gclwh12_3*x520))+(((-1.0)*x874)));
op[54]=(((gclwh11_10*x500))+((gclwh11_1*x594))+(((-1.0)*gclwh7_10*x470))+(((-1.0)*gclwh7_1*x509))+((gclwh9_10*x485))+(((0.42819102)*gclwh7_1*x469))+(((-1.0)*x889))+(((-0.42819102)*gclwh11_1*x476))+(((-1.0)*gclwh13_1*x571))+(((-1.0)*gclwh5_1*x570))+x864+x890+(((-0.2068108875)*gclwh7_1*x470))+(((0.2068108875)*gclwh11_1*x500))+(((0.036546103557)*x552))+(((-1.0)*x875)));
op[55]=((((-1.0)*x862))+(((0.9138)*gclwh7_13*x469))+(((0.4569)*gclwh9_13*x485))+(((-0.4569)*gclwh7_13*x470))+(((0.00332834402025)*x481))+((x481*x560))+(((-1.0)*x881))+((gclwh9_13*x567))+x666+(((-0.9138)*gclwh9_13*x488))+(((-0.07799283)*x543))+(((-0.07799283)*x549))+((gclwh15_9*x595))+(((-0.9138)*gclwh11_13*x476))+x870+(((-0.00332834402025)*x580)));
op[56]=(((gclwh13_0*x533))+(((-1.0)*gclwh15_0*x574))+(((-0.4265)*gclwh9_0*x485))+((gclwh5_0*x589))+((gclwh15_9*x516))+(((0.853)*gclwh11_0*x476))+(((-1.0)*gclwh11_0*x585))+(((0.853)*gclwh9_0*x488))+(((-0.03835629)*x539))+((gclwh7_0*x599))+(((-1.0)*gclwh9_0*x526))+(((-0.08318211)*x543))+(((-0.08318211)*x549))+(((-0.4265)*gclwh11_0*x500))+(((-0.853)*gclwh7_0*x469))+(((0.4265)*gclwh7_0*x470))+(((-0.03835629)*gclwh13_15*rxp1_2))+((gclwh15_15*x554)));
op[57]=((0.09583455)+(((-1.0)*x883))+x884);
op[58]=((((-0.0010225625)*gclwh11_1*x500))+(((-1.0)*x864))+(((0.0010225625)*gclwh7_1*x470))+(((-1.0)*gclwh11_10*x500))+(((0.01252412)*gclwh7_1*x469))+((gclwh7_10*x470))+(((-1.0)*gclwh7_1*x474))+(((-1.0)*x889))+(((0.001068933642)*x552))+(((-1.0)*gclwh9_10*x485))+x875+x890+((gclwh11_1*x546))+(((-1.0)*gclwh13_1*x520))+(((-0.01252412)*gclwh11_1*x476))+(((-1.0)*gclwh5_1*x489)));
op[59]=((((-1.0)*gclwh15_9*x583))+(((-0.0304)*gclwh7_13*x470))+(((0.0304)*pp*x481))+(((0.00518928)*x549))+(((0.00518928)*x543))+(((0.0608)*gclwh7_13*x469))+((gclwh9_13*x550))+(((0.000221452524)*x481))+(((-0.0608)*gclwh11_13*x476))+(((-0.000221452524)*x580))+(((-1.0)*x881))+(((-1.0)*x666))+x862+x870+(((0.0304)*gclwh9_13*x485))+(((-0.0608)*gclwh9_13*x488)));
op[60]=((((0.9138)*gclwh4_8*x476))+(((0.07799283)*x519))+(((-0.4569)*gclwh4_8*x500))+((gclwh14_8*x567))+(((-0.07799283)*x593))+(((-1.0)*gclwh4_8*x515))+(((-0.00332834402025)*x566))+(((-1.0)*x882))+(((0.4569)*gclwh14_8*x485))+(((-0.07799283)*x478))+(((-0.9138)*gclwh14_8*x488))+(((-0.4569)*gclwh12_8*x470))+x868+x860+(((0.9138)*gclwh12_8*x469))+(((-1.0)*x673)));
op[61]=((0.2213801325)+((gclwh3_3*x509))+(((-1.0)*x866))+(((-0.42819102)*gclwh14_3*x488))+(((-0.2068108875)*gclwh12_3*x470))+(((0.00155960496929498)*x569))+(((-0.2213801325)*gclwh1_3*x485))+(((-1.0)*gclwh12_3*x509))+((gclwh6_3*x571))+(((-1.0)*gclwh4_3*x594))+(((-1.0)*x893))+((gclwh12_11*x470))+(((-1.0)*gclwh14_11*x485))+(((0.42819102)*gclwh12_3*x469))+(((-0.2068108875)*gclwh4_3*x500))+(((-0.2213801325)*gclwh3_3*x470))+(((0.2068108875)*gclwh14_3*x485))+(((0.00155960496929498)*x601))+(((0.42819102)*gclwh1_3*x488))+x872+x892+(((0.42819102)*gclwh4_3*x476))+((gclwh4_11*x500))+(((0.42819102)*gclwh3_3*x469)));
op[62]=((0.053024565)+x886+(((-1.0)*x876)));
op[63]=((((-1.0)*x867))+(((0.4265)*gclwh12_2*x470))+(((-1.0)*gclwh6_2*x533))+(((0.00354979654425)*x566))+(((0.4265)*gclwh3_2*x470))+(((-1.0)*gclwh3_2*x599))+(((-1.0)*gclwh1_2*x526))+(((-0.4265)*gclwh14_2*x485))+(((-0.853)*gclwh3_2*x469))+(((0.4873)*gclwh4_8*x500))+(((0.4873)*gclwh12_8*x470))+(((-0.9746)*gclwh12_8*x469))+(((0.00310689149625)*x480))+(((0.00310689149625)*x503))+(((0.853)*gclwh14_2*x488))+(((-0.00354979654425)*x609))+(((-1.0)*gclwh14_2*x526))+(((0.9746)*gclwh14_8*x488))+((gclwh10_2*x589))+(((-0.853)*gclwh12_2*x469))+(((-0.4873)*gclwh14_8*x485))+(((0.4265)*pp*x480))+x877+(((-0.853)*gclwh1_2*x488))+(((0.4265)*gclwh1_2*x485))+(((0.07280355)*x497))+(((-0.853)*gclwh4_2*x476))+(((-0.9746)*gclwh4_8*x476))+(((0.00354979654425)*x573)));
op[64]=((((-1.0)*x868))+(((0.00518928)*x519))+(((-0.0304)*gclwh14_8*x485))+(((-0.0608)*gclwh12_8*x469))+(((0.000221452524)*x573))+(((0.0304)*gclwh12_8*x470))+(((-0.0608)*gclwh4_8*x476))+(((-1.0)*gclwh8_12*x583))+(((-1.0)*gclwh14_8*x550))+x860+x882+(((-0.00518928)*x478))+(((0.0304)*gclwh4_8*x500))+(((0.000221452524)*x566))+(((0.0608)*gclwh14_8*x488))+(((-1.0)*x673)));
op[65]=((-0.0135466825)+(((-1.0)*gclwh12_11*x470))+((gclwh6_3*x520))+(((4.561674317235e-5)*x569))+(((0.01252412)*gclwh3_3*x469))+(((0.0010225625)*gclwh4_3*x500))+(((4.561674317235e-5)*x601))+(((0.01252412)*gclwh1_3*x488))+(((-0.0135466825)*gclwh1_3*x485))+(((-0.0135466825)*gclwh3_3*x470))+(((0.01252412)*gclwh12_3*x469))+(((-1.0)*x893))+(((-1.0)*gclwh4_11*x500))+(((0.01252412)*gclwh4_3*x476))+((gclwh3_3*x474))+(((-1.0)*gclwh4_3*x546))+(((-0.0010225625)*gclwh14_3*x485))+(((0.0010225625)*gclwh12_3*x470))+(((-1.0)*gclwh12_3*x474))+x866+x892+((gclwh14_11*x485))+(((-1.0)*x872))+(((-0.01252412)*gclwh14_3*x488)));
op[66]=((-0.2213801325)+(((0.2068108875)*gclwh5_1*x500))+(((-1.0)*x865))+((gclwh11_1*x570))+(((-0.42819102)*gclwh5_1*x476))+(((-0.00155960496929498)*x484))+(((-1.0)*gclwh15_10*x485))+((gclwh2_1*x509))+(((-1.0)*x891))+(((-0.2213801325)*gclwh0_1*x485))+(((-0.42819102)*gclwh13_1*x469))+(((0.42819102)*gclwh2_1*x469))+((gclwh5_10*x500))+(((0.00155960496929498)*x612))+(((0.42819102)*gclwh15_1*x488))+(((0.2068108875)*gclwh13_1*x470))+(((-0.2213801325)*gclwh2_1*x470))+((gclwh13_10*x470))+x873+x894+(((-1.0)*gclwh7_1*x571))+((gclwh13_1*x509))+(((0.42819102)*gclwh0_1*x488))+(((-0.2068108875)*pp*x484))+((gclwh5_1*x594)));
op[67]=((((0.9138)*gclwh15_9*x488))+((x488*x495))+(((0.00332834402025)*x542))+((gclwh5_15*x557))+(((0.00332834402025)*x491))+(((-1.0)*gclwh9_7*x494))+(((-1.0)*gclwh11_7*x555))+(((0.11235)*gclwh13_15*x470))+((gclwh7_7*x545))+(((-0.9138)*gclwh13_9*x469))+(((0.07799283)*x603))+(((-1.0)*gclwh15_15*x537))+(((-0.07799283)*x614))+(((0.11235)*gclwh5_15*x500))+(((-0.9138)*gclwh5_9*x476))+(((-0.00332834402025)*x521))+(((0.07799283)*x473))+(((-1.0)*x469*x611))+(((-1.0)*x476*x597))+((x491*x560))+(((-0.4569)*gclwh15_9*x485))+(((-0.11235)*gclwh15_15*x485))+(((0.4569)*gclwh13_9*x470))+((gclwh13_15*x561)));
op[68]=((((-0.00310689149625)*x548))+(((-1.0)*x869))+((gclwh15_0*x526))+(((-0.9746)*gclwh5_9*x476))+(((-0.4265)*gclwh13_0*x470))+(((-0.07280355)*x496))+(((-0.00310689149625)*x584))+(((0.4265)*gclwh0_0*x485))+(((0.853)*gclwh5_0*x476))+(((-1.0)*gclwh0_0*x526))+(((0.9746)*gclwh15_9*x488))+(((0.853)*gclwh13_0*x469))+(((-0.4265)*gclwh5_0*x500))+(((-0.853)*gclwh0_0*x488))+(((0.4265)*gclwh2_0*x470))+(((-0.9746)*gclwh13_9*x469))+(((-0.853)*gclwh15_0*x488))+(((0.4873)*pp*x491))+((gclwh7_0*x533))+x880+(((-0.00310689149625)*x576))+(((-0.00354979654425)*x521))+(((0.4873)*gclwh13_9*x470))+(((-0.07280355)*x587))+(((-0.4873)*gclwh15_9*x485))+(((0.00354979654425)*x542))+(((-0.853)*gclwh2_0*x469))+(((0.4265)*gclwh15_0*x485))+(((0.00354979654425)*x491)));
op[69]=((0.053024565)+(((-1.0)*x885))+x878);
op[70]=((0.0135466825)+((gclwh13_1*x474))+(((0.01252412)*gclwh15_1*x488))+(((-1.0)*gclwh7_1*x520))+(((-1.0)*gclwh5_10*x500))+(((-0.01252412)*gclwh13_1*x469))+((gclwh15_10*x485))+(((-1.0)*x891))+(((4.561674317235e-5)*x612))+(((-0.0135466825)*gclwh0_1*x485))+((gclwh11_1*x489))+((gclwh2_1*x474))+(((-0.01252412)*gclwh5_1*x476))+(((-4.561674317235e-5)*x484))+((gclwh5_1*x546))+(((0.0010225625)*pp*x484))+(((-1.0)*gclwh13_10*x470))+(((0.01252412)*gclwh0_1*x488))+x865+x894+(((-0.0135466825)*gclwh2_1*x470))+(((-0.0010225625)*gclwh5_1*x500))+(((-0.0010225625)*gclwh13_1*x470))+(((0.01252412)*gclwh2_1*x469))+(((-1.0)*x873)));
IkReal x895=((0.0304)*pp);
IkReal x896=(gclwh13_9*r21);
IkReal x897=(gclwh5_9*r22);
IkReal x898=((0.0608)*pz);
IkReal x899=(gclwh15_9*r20);
IkReal x900=((0.2247)*pz);
IkReal x901=(gclwh13_15*r21);
IkReal x902=(gclwh15_15*r20);
IkReal x903=((0.11235)*pp);
IkReal x904=(gclwh5_15*r22);
op[71]=((((-1.0)*x903*x904))+(((-0.000221452524)*x897))+(((-0.000221452524)*x896))+(((0.00518928)*gclwh11_13*rxp2_2))+(((-1.0)*gclwh15_9*npx*x898))+(((-0.019178145)*gclwh11_7*rxp2_2))+(((-1.0)*x895*x897))+(((-1.0)*x895*x896))+((x895*x899))+((x902*x903))+(((0.00518928)*gclwh9_13*rxp0_2))+((gclwh5_15*npz*x900))+((gclwh13_15*npy*x900))+(((-0.000818427337875)*x901))+(((-0.000818427337875)*x904))+((gclwh13_9*npy*x898))+(((0.000818427337875)*x902))+(((0.019178145)*gclwh7_7*rxp1_2))+(((0.000221452524)*x899))+(((-1.0)*x901*x903))+(((-0.019178145)*gclwh9_7*rxp0_2))+(((-0.00518928)*gclwh7_13*rxp1_2))+((gclwh5_9*npz*x898))+(((-1.0)*gclwh15_15*npx*x900)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x905=htj1*htj1;
CheckValue<IkReal> x906=IKPowWithIntegerCheck(((1.0)+x905),-1);
if(!x906.valid){
continue;
}
cj1array[numsolutions]=((x906.value)*(((1.0)+(((-1.0)*x905)))));
CheckValue<IkReal> x907=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x907.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x907.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x908=htj2*htj2;
CheckValue<IkReal> x909=IKPowWithIntegerCheck(((1.0)+x908),-1);
if(!x909.valid){
continue;
}
cj2array[numsolutions]=((x909.value)*(((1.0)+(((-1.0)*x908)))));
CheckValue<IkReal> x910=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x910.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x910.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x911=htj3*htj3;
CheckValue<IkReal> x912=IKPowWithIntegerCheck(((1.0)+x911),-1);
if(!x912.valid){
continue;
}
cj3array[numsolutions]=((x912.value)*(((1.0)+(((-1.0)*x911)))));
CheckValue<IkReal> x913=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x913.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x913.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x914=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x914);
rxp1_0=(pz*r11);
rxp1_1=(r01*x914);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x915=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x915);
rxp1_0=(pz*r11);
rxp1_1=(r01*x915);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x916=IKPowWithIntegerCheck(r22,-1);
if(!x916.valid){
continue;
}
CheckValue<IkReal> x917=IKPowWithIntegerCheck(sj3,-1);
if(!x917.valid){
continue;
}
sj4array[0]=((x916.value)*(x917.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x918=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x918);
rxp1_0=(pz*r11);
rxp1_1=(r01*x918);
IkReal x919=((16.0)*sj4);
IkReal x920=(cj1*cj2);
IkReal x921=((4.0)*sj3);
IkReal x922=((8.0)*sj4);
IkReal x923=((4.0)*cj4);
IkReal x924=(sj1*sj2);
IkReal x925=((4.0)*sj4);
IkReal x926=(cj3*r02);
IkReal x927=((16.0)*sj3);
IkReal x928=((8.0)*sj3);
IkReal x929=((12.0)*cj4);
IkReal x930=((12.0)*sj4);
IkReal x931=(cj3*r12);
IkReal x932=(r11*x921);
IkReal x933=(r01*x921);
IkReal x934=(r01*x924);
IkReal x935=(cj3*cj4*r01);
IkReal x936=(cj3*cj4*r11);
IkReal x937=(cj3*r10*x923);
IkReal x938=(x930*x931);
IkReal x939=(cj3*r00*x923);
IkReal x940=(x926*x930);
IkReal x941=(r00*x924*x925);
IkReal x942=(r02*x924*x929);
IkReal x943=(r00*x920*x925);
IkReal x944=(r02*x920*x929);
IkReal x945=(r10*x924*x925);
IkReal x946=(r12*x920*x929);
IkReal x947=(r12*x924*x929);
IkReal x948=(r10*x920*x925);
IkReal x949=(x932+x943);
IkReal x950=(x933+x945);
IkReal x951=(x937+x941);
IkReal x952=(x938+x944);
IkReal x953=(x939+x948);
IkReal x954=(x940+x947);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r11*x919*x920))+(((-16.0)*x935))+((r11*x919*x924))+(((-1.0)*r00*x927)))))))+(IKabs(((((-8.0)*x935))+(((-1.0)*r00*x928))+((r11*x922*x924))+(((-1.0)*r11*x920*x922)))))+(((0.5)*(IKabs(((((-1.0)*r10*x927))+((r01*x919*x920))+(((-1.0)*x919*x934))+(((-16.0)*x936)))))))+(((0.5)*(IKabs(((((-1.0)*x951))+(((-1.0)*x952))+x949+x942)))))+(((0.5)*(IKabs(((((-1.0)*x925*x926))+((r12*x920*x923))+(((-1.0)*r12*x923*x924))+(((-1.0)*x953))+x950)))))+(((0.5)*(IKabs(((((-1.0)*x925*x931))+(((-1.0)*r02*x920*x923))+((r02*x923*x924))+(((-1.0)*x951))+x949)))))+(IKabs(((((-1.0)*r10*x928))+(((-8.0)*x936))+((r01*x920*x922))+(((-1.0)*x922*x934)))))+(((0.5)*(IKabs(((((-1.0)*x954))+(((-1.0)*x950))+x953+x946)))))+(((0.5)*(IKabs(((((-1.0)*x949))+(((-1.0)*x952))+x951+x942)))))+(((0.5)*(IKabs(((((-1.0)*x953))+(((-1.0)*x954))+x950+x946))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x955=(r10*sj3);
IkReal x956=(r01*sj4);
IkReal x957=(cj1*cj2);
IkReal x958=(cj3*cj4);
IkReal x959=(sj1*sj2);
IkReal x960=(cj4*r02);
IkReal x961=((4.0)*r11*sj3);
IkReal x962=(cj3*r12*sj4);
IkReal x963=((4.0)*r00*sj4);
IkReal x964=((4.0)*r10*x958);
IkReal x965=((12.0)*x962);
IkReal x966=((4.0)*x962);
IkReal x967=(x957*x963);
IkReal x968=(x959*x963);
IkReal x969=((12.0)*x959*x960);
IkReal x970=((12.0)*x957*x960);
IkReal x971=((4.0)*x959*x960);
IkReal x972=((4.0)*x957*x960);
IkReal x973=(x961+x967);
IkReal x974=(x964+x968);
IkReal x975=(x972+x966);
IkReal x976=(x970+x965);
IkReal x977=((((-8.0)*x955))+(((8.0)*x956*x957))+(((-8.0)*x956*x959))+(((-8.0)*r11*x958)));
op[0]=(x971+x973+(((-1.0)*x974))+(((-1.0)*x975)));
op[1]=x977;
op[2]=(x973+x969+(((-1.0)*x974))+(((-1.0)*x976)));
op[3]=((((-16.0)*r11*x958))+(((-16.0)*x956*x959))+(((-16.0)*x955))+(((16.0)*x956*x957)));
op[4]=(x974+x969+(((-1.0)*x973))+(((-1.0)*x976)));
op[5]=x977;
op[6]=(x971+x974+(((-1.0)*x975))+(((-1.0)*x973)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x978=(cj1*cj2);
IkReal x979=((4.0)*cj4);
IkReal x980=(sj1*sj2);
IkReal x981=((4.0)*sj4);
IkReal x982=(r00*sj3);
IkReal x983=(cj3*r02);
IkReal x984=((4.0)*r01*sj3);
IkReal x985=((16.0)*r11*sj4);
IkReal x986=(cj3*cj4*r01);
IkReal x987=((12.0)*cj4*r12);
IkReal x988=((8.0)*r11*sj4);
IkReal x989=(cj3*r00*x979);
IkReal x990=((12.0)*sj4*x983);
IkReal x991=(x981*x983);
IkReal x992=(r10*x978*x981);
IkReal x993=(r10*x980*x981);
IkReal x994=(x978*x987);
IkReal x995=(x980*x987);
IkReal x996=(r12*x978*x979);
IkReal x997=(r12*x979*x980);
IkReal x998=(x993+x984);
IkReal x999=(x992+x989);
IkReal x1000=(x991+x997);
IkReal x1001=(x990+x995);
IkReal x1002=((((-1.0)*x978*x988))+(((-8.0)*x982))+(((-8.0)*x986))+((x980*x988)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1000))+(((-1.0)*x999))+x996+x998))))+(((-1.0)*x1000))+(((htj5*htj5)*(((((-1.0)*x1001))+(((-1.0)*x998))+x994+x999))))+(((-1.0)*x998))+((x1002*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1001))+(((-1.0)*x999))+x994+x998))))+((htj5*x1002))+x996+x999+(((htj5*htj5*htj5)*(((((-16.0)*x982))+(((-16.0)*x986))+(((-1.0)*x978*x985))+((x980*x985)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1003=(cj5*sj4);
IkReal x1004=(sj4*sj5);
if( IKabs((((r01*x1004))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1004))+((cj4*r12))+((r10*x1003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1004))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1003))))+IKsqr(((((-1.0)*r11*x1004))+((cj4*r12))+((r10*x1003))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1004))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1003))), ((((-1.0)*r11*x1004))+((cj4*r12))+((r10*x1003))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1005=IKcos(j0);
IkReal x1006=IKsin(j0);
IkReal x1007=(r02*sj4);
IkReal x1008=((1.0)*sj3);
IkReal x1009=(r12*sj4);
IkReal x1010=((0.21325)*cj2);
IkReal x1011=((1.0)*cj3);
IkReal x1012=((1.0)*sj2);
IkReal x1013=(r11*sj5);
IkReal x1014=(cj5*r01);
IkReal x1015=(cj5*r11);
IkReal x1016=(r00*sj5);
IkReal x1017=((1.0)*cj2);
IkReal x1018=(r10*sj5);
IkReal x1019=((1.0)*cj4);
IkReal x1020=(cj1*x1006);
IkReal x1021=(cj4*cj5*r00);
IkReal x1022=(cj1*x1005);
IkReal x1023=(cj4*cj5*r10);
IkReal x1024=(cj4*r01*sj5);
IkReal x1025=((0.21325)*sj1*sj2);
IkReal x1026=(sj1*x1005);
IkReal x1027=((1.0)*cj5*sj4);
IkReal x1028=(sj1*x1006);
evalcond[0]=(x1005+((sj4*x1013))+(((-1.0)*r10*x1027))+(((-1.0)*r12*x1019)));
evalcond[1]=((((-1.0)*x1006))+(((-1.0)*r02*x1019))+((r01*sj4*sj5))+(((-1.0)*r00*x1027)));
evalcond[2]=(((x1010*x1022))+(((-0.11235)*x1006))+(((-1.0)*x1005*x1025))+(((-1.0)*px))+(((0.24365)*x1022))+(((-0.08535)*x1016))+(((-0.08535)*x1014)));
evalcond[3]=(((x1010*x1020))+(((-1.0)*py))+(((0.24365)*x1020))+(((0.11235)*x1005))+(((-0.08535)*x1018))+(((-0.08535)*x1015))+(((-1.0)*x1006*x1025)));
evalcond[4]=(((cj3*x1007))+((sj3*x1014))+((sj3*x1016))+(((-1.0)*x1017*x1022))+(((-1.0)*x1011*x1021))+((cj3*x1024))+((sj2*x1026)));
evalcond[5]=(((cj3*x1009))+((cj3*cj4*x1013))+((sj3*x1015))+((sj3*x1018))+(((-1.0)*x1017*x1020))+(((-1.0)*x1011*x1023))+((sj2*x1028)));
evalcond[6]=(((cj3*x1014))+((cj3*x1016))+(((-1.0)*x1007*x1008))+(((-1.0)*x1008*x1024))+(((-1.0)*x1017*x1026))+((sj3*x1021))+(((-1.0)*x1012*x1022)));
evalcond[7]=((((-1.0)*cj4*x1008*x1013))+(((-1.0)*x1008*x1009))+((cj3*x1018))+((cj3*x1015))+(((-1.0)*x1017*x1028))+((sj3*x1023))+(((-1.0)*x1012*x1020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1029=IKPowWithIntegerCheck(cj3,-1);
if(!x1029.valid){
continue;
}
CheckValue<IkReal> x1030=IKPowWithIntegerCheck(r22,-1);
if(!x1030.valid){
continue;
}
sj4array[0]=((-1.0)*(x1029.value)*(x1030.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1031=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1031);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1031);
IkReal x1032=((16.0)*sj4);
IkReal x1033=(cj1*cj2);
IkReal x1034=((4.0)*sj3);
IkReal x1035=((8.0)*sj4);
IkReal x1036=((4.0)*cj4);
IkReal x1037=(sj1*sj2);
IkReal x1038=((4.0)*sj4);
IkReal x1039=(cj3*r02);
IkReal x1040=((16.0)*sj3);
IkReal x1041=((8.0)*sj3);
IkReal x1042=((12.0)*cj4);
IkReal x1043=((12.0)*sj4);
IkReal x1044=(cj3*r12);
IkReal x1045=(r11*x1034);
IkReal x1046=(r01*x1034);
IkReal x1047=(r01*x1037);
IkReal x1048=(cj3*cj4*r01);
IkReal x1049=(cj3*cj4*r11);
IkReal x1050=(cj3*r10*x1036);
IkReal x1051=(x1043*x1044);
IkReal x1052=(cj3*r00*x1036);
IkReal x1053=(x1039*x1043);
IkReal x1054=(r00*x1037*x1038);
IkReal x1055=(r02*x1037*x1042);
IkReal x1056=(r00*x1033*x1038);
IkReal x1057=(r02*x1033*x1042);
IkReal x1058=(r10*x1037*x1038);
IkReal x1059=(r12*x1033*x1042);
IkReal x1060=(r12*x1037*x1042);
IkReal x1061=(r10*x1033*x1038);
IkReal x1062=(x1056+x1045);
IkReal x1063=(x1058+x1046);
IkReal x1064=(x1050+x1054);
IkReal x1065=(x1051+x1057);
IkReal x1066=(x1052+x1061);
IkReal x1067=(x1053+x1060);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r00*x1040))+((r11*x1032*x1037))+(((-16.0)*x1048))+(((-1.0)*r11*x1032*x1033)))))))+(((0.5)*(IKabs((x1063+(((-1.0)*x1038*x1039))+(((-1.0)*r12*x1036*x1037))+(((-1.0)*x1066))+((r12*x1033*x1036)))))))+(((0.5)*(IKabs(((((-1.0)*x1032*x1047))+(((-1.0)*r10*x1040))+(((-16.0)*x1049))+((r01*x1032*x1033)))))))+(((0.5)*(IKabs((x1059+x1066+(((-1.0)*x1067))+(((-1.0)*x1063)))))))+(((0.5)*(IKabs((x1055+x1064+(((-1.0)*x1065))+(((-1.0)*x1062)))))))+(IKabs(((((-8.0)*x1049))+(((-1.0)*r10*x1041))+(((-1.0)*x1035*x1047))+((r01*x1033*x1035)))))+(((0.5)*(IKabs((x1062+(((-1.0)*x1038*x1044))+(((-1.0)*r02*x1033*x1036))+(((-1.0)*x1064))+((r02*x1036*x1037)))))))+(((0.5)*(IKabs((x1059+x1063+(((-1.0)*x1066))+(((-1.0)*x1067)))))))+(IKabs(((((-1.0)*r00*x1041))+(((-8.0)*x1048))+((r11*x1035*x1037))+(((-1.0)*r11*x1033*x1035)))))+(((0.5)*(IKabs((x1055+x1062+(((-1.0)*x1064))+(((-1.0)*x1065))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1068=(r10*sj3);
IkReal x1069=(r01*sj4);
IkReal x1070=(cj1*cj2);
IkReal x1071=(cj3*cj4);
IkReal x1072=(sj1*sj2);
IkReal x1073=(cj4*r02);
IkReal x1074=((4.0)*r11*sj3);
IkReal x1075=(cj3*r12*sj4);
IkReal x1076=((4.0)*r00*sj4);
IkReal x1077=((4.0)*r10*x1071);
IkReal x1078=((12.0)*x1075);
IkReal x1079=((4.0)*x1075);
IkReal x1080=(x1070*x1076);
IkReal x1081=(x1072*x1076);
IkReal x1082=((12.0)*x1072*x1073);
IkReal x1083=((12.0)*x1070*x1073);
IkReal x1084=((4.0)*x1072*x1073);
IkReal x1085=((4.0)*x1070*x1073);
IkReal x1086=(x1074+x1080);
IkReal x1087=(x1077+x1081);
IkReal x1088=(x1079+x1085);
IkReal x1089=(x1078+x1083);
IkReal x1090=((((8.0)*x1069*x1070))+(((-8.0)*x1069*x1072))+(((-8.0)*x1068))+(((-8.0)*r11*x1071)));
op[0]=(x1086+x1084+(((-1.0)*x1087))+(((-1.0)*x1088)));
op[1]=x1090;
op[2]=(x1086+x1082+(((-1.0)*x1087))+(((-1.0)*x1089)));
op[3]=((((16.0)*x1069*x1070))+(((-16.0)*r11*x1071))+(((-16.0)*x1068))+(((-16.0)*x1069*x1072)));
op[4]=(x1087+x1082+(((-1.0)*x1086))+(((-1.0)*x1089)));
op[5]=x1090;
op[6]=(x1087+x1084+(((-1.0)*x1086))+(((-1.0)*x1088)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1091=(cj1*cj2);
IkReal x1092=((4.0)*cj4);
IkReal x1093=(sj1*sj2);
IkReal x1094=((4.0)*sj4);
IkReal x1095=(r00*sj3);
IkReal x1096=(cj3*r02);
IkReal x1097=((4.0)*r01*sj3);
IkReal x1098=((16.0)*r11*sj4);
IkReal x1099=(cj3*cj4*r01);
IkReal x1100=((12.0)*cj4*r12);
IkReal x1101=((8.0)*r11*sj4);
IkReal x1102=(cj3*r00*x1092);
IkReal x1103=((12.0)*sj4*x1096);
IkReal x1104=(x1094*x1096);
IkReal x1105=(r10*x1091*x1094);
IkReal x1106=(r10*x1093*x1094);
IkReal x1107=(x1091*x1100);
IkReal x1108=(x1093*x1100);
IkReal x1109=(r12*x1091*x1092);
IkReal x1110=(r12*x1092*x1093);
IkReal x1111=(x1106+x1097);
IkReal x1112=(x1105+x1102);
IkReal x1113=(x1104+x1110);
IkReal x1114=(x1103+x1108);
IkReal x1115=((((-1.0)*x1091*x1101))+((x1093*x1101))+(((-8.0)*x1099))+(((-8.0)*x1095)));
j5evalpoly[0]=(x1109+x1112+(((htj5*htj5*htj5)*(((((-1.0)*x1091*x1098))+(((-16.0)*x1095))+(((-16.0)*x1099))+((x1093*x1098))))))+(((htj5*htj5*htj5*htj5)*((x1107+x1111+(((-1.0)*x1114))+(((-1.0)*x1112))))))+(((htj5*htj5)*((x1107+x1112+(((-1.0)*x1114))+(((-1.0)*x1111))))))+((x1115*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1113))+(((-1.0)*x1111))+((htj5*x1115))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1109+x1111+(((-1.0)*x1112))+(((-1.0)*x1113)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1116=(cj5*sj4);
IkReal x1117=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1117))+(((-1.0)*r00*x1116)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1117))+((cj4*r12))+((r10*x1116)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1117))+(((-1.0)*r00*x1116))))+IKsqr(((((-1.0)*r11*x1117))+((cj4*r12))+((r10*x1116))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1117))+(((-1.0)*r00*x1116))), ((((-1.0)*r11*x1117))+((cj4*r12))+((r10*x1116))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1118=IKcos(j0);
IkReal x1119=IKsin(j0);
IkReal x1120=(r02*sj4);
IkReal x1121=((1.0)*sj3);
IkReal x1122=(r12*sj4);
IkReal x1123=((0.21325)*cj2);
IkReal x1124=((1.0)*cj3);
IkReal x1125=((1.0)*sj2);
IkReal x1126=(r11*sj5);
IkReal x1127=(cj5*r01);
IkReal x1128=(cj5*r11);
IkReal x1129=(r00*sj5);
IkReal x1130=((1.0)*cj2);
IkReal x1131=(r10*sj5);
IkReal x1132=((1.0)*cj4);
IkReal x1133=(cj1*x1119);
IkReal x1134=(cj4*cj5*r00);
IkReal x1135=(cj1*x1118);
IkReal x1136=(cj4*cj5*r10);
IkReal x1137=(cj4*r01*sj5);
IkReal x1138=((0.21325)*sj1*sj2);
IkReal x1139=(sj1*x1118);
IkReal x1140=((1.0)*cj5*sj4);
IkReal x1141=(sj1*x1119);
evalcond[0]=(x1118+(((-1.0)*r12*x1132))+((sj4*x1126))+(((-1.0)*r10*x1140)));
evalcond[1]=((((-1.0)*r00*x1140))+(((-1.0)*x1119))+((r01*sj4*sj5))+(((-1.0)*r02*x1132)));
evalcond[2]=((((-0.08535)*x1129))+(((-0.08535)*x1127))+(((0.24365)*x1135))+(((-0.11235)*x1119))+(((-1.0)*px))+(((-1.0)*x1118*x1138))+((x1123*x1135)));
evalcond[3]=((((-0.08535)*x1128))+(((-0.08535)*x1131))+(((0.24365)*x1133))+(((-1.0)*py))+(((0.11235)*x1118))+((x1123*x1133))+(((-1.0)*x1119*x1138)));
evalcond[4]=(((cj3*x1137))+(((-1.0)*x1130*x1135))+((sj2*x1139))+((sj3*x1129))+((sj3*x1127))+(((-1.0)*x1124*x1134))+((cj3*x1120)));
evalcond[5]=(((cj3*cj4*x1126))+(((-1.0)*x1130*x1133))+((sj2*x1141))+((sj3*x1128))+((sj3*x1131))+(((-1.0)*x1124*x1136))+((cj3*x1122)));
evalcond[6]=((((-1.0)*x1121*x1137))+(((-1.0)*x1130*x1139))+(((-1.0)*x1120*x1121))+((sj3*x1134))+(((-1.0)*x1125*x1135))+((cj3*x1127))+((cj3*x1129)));
evalcond[7]=((((-1.0)*cj4*x1121*x1126))+((cj3*x1131))+(((-1.0)*x1121*x1122))+(((-1.0)*x1130*x1141))+((sj3*x1136))+(((-1.0)*x1125*x1133))+((cj3*x1128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1142=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1142);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1142);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1143=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1143);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1143);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1144=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1144);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1144);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1145=IKPowWithIntegerCheck(r22,-1);
if(!x1145.valid){
continue;
}
sj4array[0]=((-1.0)*(x1145.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1146=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1146);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1146);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1148 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1148.valid){
continue;
}
IkReal x1147=x1148.value;
j5array[0]=((-1.0)*x1147);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1147)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1149=(cj5*sj4);
IkReal x1150=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1149))+((r01*x1150)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1150))+((r10*x1149)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1149))+((r01*x1150))))+IKsqr(((((-1.0)*r11*x1150))+((r10*x1149))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1149))+((r01*x1150))), ((((-1.0)*r11*x1150))+((r10*x1149))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1151=IKcos(j0);
IkReal x1152=IKsin(j0);
IkReal x1153=(cj5*r01);
IkReal x1154=(sj4*sj5);
IkReal x1155=(r00*sj5);
IkReal x1156=(cj5*r11);
IkReal x1157=((0.24365)*cj1);
IkReal x1158=(r10*sj5);
IkReal x1159=((1.0)*cj1*sj2);
IkReal x1160=((1.0)*cj2*sj1);
IkReal x1161=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r10*x1161))+x1151+((r11*x1154)));
evalcond[1]=((((-1.0)*x1152))+(((-1.0)*r00*x1161))+((r01*x1154)));
evalcond[2]=(x1155+x1153+(((-1.0)*x1151*x1160))+(((-1.0)*x1151*x1159)));
evalcond[3]=(x1158+x1156+(((-1.0)*x1152*x1160))+(((-1.0)*x1152*x1159)));
evalcond[4]=((((-0.11235)*x1152))+(((-1.0)*px))+((x1151*x1157))+(((-0.08535)*x1155))+(((-0.08535)*x1153)));
evalcond[5]=((((0.11235)*x1151))+((x1152*x1157))+(((-1.0)*py))+(((-0.08535)*x1156))+(((-0.08535)*x1158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1162=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1162);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1162);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1163=IKPowWithIntegerCheck(r22,-1);
if(!x1163.valid){
continue;
}
sj4array[0]=((x1163.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1164=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1164);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1164);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1166 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1166.valid){
continue;
}
IkReal x1165=x1166.value;
j5array[0]=((-1.0)*x1165);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1165)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1167=(cj5*sj4);
IkReal x1168=(sj4*sj5);
if( IKabs((((r01*x1168))+(((-1.0)*r00*x1167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1167))+(((-1.0)*r11*x1168)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1168))+(((-1.0)*r00*x1167))))+IKsqr((((r10*x1167))+(((-1.0)*r11*x1168))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1168))+(((-1.0)*r00*x1167))), (((r10*x1167))+(((-1.0)*r11*x1168))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1169=IKcos(j0);
IkReal x1170=IKsin(j0);
IkReal x1171=(sj4*sj5);
IkReal x1172=(r00*sj5);
IkReal x1173=(cj5*r11);
IkReal x1174=((1.0)*r10);
IkReal x1175=((0.24365)*cj1);
IkReal x1176=(cj5*r01);
IkReal x1177=(cj5*sj4);
IkReal x1178=((1.0)*cj1*sj2);
IkReal x1179=((1.0)*cj2*sj1);
evalcond[0]=(x1169+((r11*x1171))+(((-1.0)*x1174*x1177)));
evalcond[1]=(((r01*x1171))+(((-1.0)*r00*x1177))+(((-1.0)*x1170)));
evalcond[2]=((((-0.08535)*x1176))+(((-0.08535)*x1172))+(((-1.0)*px))+((x1169*x1175))+(((-0.11235)*x1170)));
evalcond[3]=((((-0.08535)*x1173))+(((-1.0)*py))+(((-0.08535)*r10*sj5))+((x1170*x1175))+(((0.11235)*x1169)));
evalcond[4]=((((-1.0)*x1169*x1178))+(((-1.0)*x1169*x1179))+(((-1.0)*x1176))+(((-1.0)*x1172)));
evalcond[5]=((((-1.0)*sj5*x1174))+(((-1.0)*x1170*x1179))+(((-1.0)*x1170*x1178))+(((-1.0)*x1173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1180=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1180);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1180);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1181=IKPowWithIntegerCheck(r22,-1);
if(!x1181.valid){
continue;
}
sj4array[0]=((x1181.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1182=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1182);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1182);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1184 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1184.valid){
continue;
}
IkReal x1183=x1184.value;
j5array[0]=((-1.0)*x1183);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1183)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1185=(cj5*sj4);
IkReal x1186=(sj4*sj5);
if( IKabs((((r01*x1186))+(((-1.0)*r00*x1185)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1185))+(((-1.0)*r11*x1186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1186))+(((-1.0)*r00*x1185))))+IKsqr((((r10*x1185))+(((-1.0)*r11*x1186))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1186))+(((-1.0)*r00*x1185))), (((r10*x1185))+(((-1.0)*r11*x1186))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1187=IKcos(j0);
IkReal x1188=IKsin(j0);
IkReal x1189=(cj5*r01);
IkReal x1190=(sj4*sj5);
IkReal x1191=(r00*sj5);
IkReal x1192=(cj5*r11);
IkReal x1193=(r10*sj5);
IkReal x1194=((0.21325)*cj1*cj2);
IkReal x1195=((1.0)*x1188);
IkReal x1196=(cj1*x1187);
IkReal x1197=((1.0)*cj5*sj4);
IkReal x1198=(sj1*sj2*x1187);
IkReal x1199=(sj1*sj2*x1188);
evalcond[0]=(x1187+(((-1.0)*r10*x1197))+((r11*x1190)));
evalcond[1]=((((-1.0)*r00*x1197))+((r01*x1190))+(((-1.0)*x1195)));
evalcond[2]=(x1189+x1198+x1191+(((-1.0)*cj2*x1196)));
evalcond[3]=(x1199+x1193+x1192+(((-1.0)*cj1*cj2*x1195)));
evalcond[4]=(((x1187*x1194))+(((-0.21325)*x1198))+(((-0.08535)*x1189))+(((-0.08535)*x1191))+(((0.24365)*x1196))+(((-1.0)*px))+(((-0.11235)*x1188)));
evalcond[5]=((((-0.21325)*x1199))+(((-0.08535)*x1193))+(((-0.08535)*x1192))+((x1188*x1194))+(((-1.0)*py))+(((0.11235)*x1187))+(((0.24365)*cj1*x1188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1200=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1200);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1200);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1201=IKPowWithIntegerCheck(r22,-1);
if(!x1201.valid){
continue;
}
sj4array[0]=((-1.0)*(x1201.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1202=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1202);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1202);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1204 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1204.valid){
continue;
}
IkReal x1203=x1204.value;
j5array[0]=((-1.0)*x1203);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1203)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1205=(cj5*sj4);
IkReal x1206=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1205))+((r01*x1206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1205))+(((-1.0)*r11*x1206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1205))+((r01*x1206))))+IKsqr((((r10*x1205))+(((-1.0)*r11*x1206))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1205))+((r01*x1206))), (((r10*x1205))+(((-1.0)*r11*x1206))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1207=IKcos(j0);
IkReal x1208=IKsin(j0);
IkReal x1209=(sj4*sj5);
IkReal x1210=(cj5*r11);
IkReal x1211=(r00*sj5);
IkReal x1212=((1.0)*r10);
IkReal x1213=(cj5*r01);
IkReal x1214=(cj5*sj4);
IkReal x1215=((0.21325)*cj1*cj2);
IkReal x1216=((1.0)*x1208);
IkReal x1217=(cj1*x1207);
IkReal x1218=(sj1*sj2*x1207);
IkReal x1219=(sj1*sj2*x1208);
evalcond[0]=(x1207+((r11*x1209))+(((-1.0)*x1212*x1214)));
evalcond[1]=(((r01*x1209))+(((-1.0)*x1216))+(((-1.0)*r00*x1214)));
evalcond[2]=(x1218+(((-1.0)*cj2*x1217))+(((-1.0)*x1213))+(((-1.0)*x1211)));
evalcond[3]=(x1219+(((-1.0)*cj1*cj2*x1216))+(((-1.0)*sj5*x1212))+(((-1.0)*x1210)));
evalcond[4]=((((-0.21325)*x1218))+((x1207*x1215))+(((-1.0)*px))+(((0.24365)*x1217))+(((-0.08535)*x1213))+(((-0.08535)*x1211))+(((-0.11235)*x1208)));
evalcond[5]=((((-0.21325)*x1219))+(((-1.0)*py))+(((0.11235)*x1207))+(((-0.08535)*r10*sj5))+((x1208*x1215))+(((0.24365)*cj1*x1208))+(((-0.08535)*x1210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1220=IKPowWithIntegerCheck(r22,-1);
if(!x1220.valid){
continue;
}
CheckValue<IkReal> x1221=IKPowWithIntegerCheck(sj3,-1);
if(!x1221.valid){
continue;
}
sj4array[0]=((x1220.value)*(x1221.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1222=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1222);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1222);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1223=((4.0)*r01);
IkReal x1224=((16.0)*r00);
IkReal x1225=(cj3*sj2);
IkReal x1226=((8.0)*r00);
IkReal x1227=(cj2*cj3);
IkReal x1228=(cj4*r01);
IkReal x1229=((16.0)*cj1);
IkReal x1230=((8.0)*sj1);
IkReal x1231=((16.0)*sj1);
IkReal x1232=((8.0)*cj1);
IkReal x1233=(sj2*sj3);
IkReal x1234=(cj2*sj3);
IkReal x1235=(sj1*x1234);
IkReal x1236=((4.0)*cj4*r00);
IkReal x1237=(((sj1*x1233*x1236))+((x1223*x1235))+((sj1*x1223*x1225))+((cj1*x1223*x1233)));
IkReal x1238=(((sj1*x1227*x1236))+((cj1*x1225*x1236))+((cj1*x1223*x1227))+((cj1*x1234*x1236)));
IkReal x1239=(x1238+(((-1.0)*x1237)));
IkReal x1240=(((sj1*x1225*x1226))+((x1227*x1228*x1230))+(((-1.0)*cj1*x1226*x1227))+((x1225*x1228*x1232))+((x1226*x1235))+(((-1.0)*x1228*x1230*x1233))+((x1228*x1232*x1234))+((cj1*x1226*x1233)));
IkReal x1241=(x1237+(((-1.0)*x1238)));
op[0]=x1239;
op[1]=x1240;
op[2]=x1239;
op[3]=(((x1228*x1229*x1234))+((cj1*x1224*x1233))+((x1227*x1228*x1231))+((sj1*x1224*x1225))+((x1225*x1228*x1229))+((x1224*x1235))+(((-1.0)*cj1*x1224*x1227))+(((-1.0)*x1228*x1231*x1233)));
op[4]=x1241;
op[5]=x1240;
op[6]=x1241;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1242=(cj5*sj4);
IkReal x1243=(sj4*sj5);
if( IKabs((((r01*x1243))+(((-1.0)*r00*x1242)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1243))+((r10*x1242)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1243))+(((-1.0)*r00*x1242))))+IKsqr(((((-1.0)*r11*x1243))+((r10*x1242))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1243))+(((-1.0)*r00*x1242))), ((((-1.0)*r11*x1243))+((r10*x1242))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1244=IKcos(j0);
IkReal x1245=IKsin(j0);
IkReal x1246=((0.21325)*cj2);
IkReal x1247=((1.0)*cj3);
IkReal x1248=((1.0)*sj2);
IkReal x1249=(r11*sj5);
IkReal x1250=(cj5*r01);
IkReal x1251=(r01*sj5);
IkReal x1252=((0.21325)*sj2);
IkReal x1253=(cj5*r11);
IkReal x1254=(r00*sj5);
IkReal x1255=(cj3*cj4);
IkReal x1256=((1.0)*cj2);
IkReal x1257=(r10*sj5);
IkReal x1258=(cj1*x1245);
IkReal x1259=(cj4*cj5*r00);
IkReal x1260=(cj1*x1244);
IkReal x1261=(cj4*cj5*r10);
IkReal x1262=((1.0)*cj4*sj3);
IkReal x1263=(sj1*x1244);
IkReal x1264=((1.0)*cj5*sj4);
IkReal x1265=(sj1*x1245);
evalcond[0]=((((-1.0)*r10*x1264))+x1244+((sj4*x1249)));
evalcond[1]=(((sj4*x1251))+(((-1.0)*x1245))+(((-1.0)*r00*x1264)));
evalcond[2]=((((-1.0)*x1247*x1259))+(((-1.0)*x1256*x1260))+((x1251*x1255))+((sj3*x1254))+((sj3*x1250))+((sj2*x1263)));
evalcond[3]=((((-1.0)*x1247*x1261))+(((-1.0)*x1256*x1258))+((x1249*x1255))+((sj3*x1257))+((sj3*x1253))+((sj2*x1265)));
evalcond[4]=(((cj3*x1254))+((cj3*x1250))+(((-1.0)*x1248*x1260))+(((-1.0)*x1256*x1263))+(((-1.0)*x1251*x1262))+((sj3*x1259)));
evalcond[5]=((((-1.0)*x1249*x1262))+((cj3*x1257))+((cj3*x1253))+(((-1.0)*x1248*x1258))+(((-1.0)*x1256*x1265))+((sj3*x1261)));
evalcond[6]=(((x1246*x1260))+(((0.24365)*x1260))+(((-0.11235)*x1245))+(((-0.08535)*x1250))+(((-0.08535)*x1254))+(((-1.0)*x1252*x1263))+(((-1.0)*px)));
evalcond[7]=(((x1246*x1258))+(((0.11235)*x1244))+(((0.24365)*x1258))+(((-0.08535)*x1253))+(((-0.08535)*x1257))+(((-1.0)*x1252*x1265))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1266=IKPowWithIntegerCheck(cj3,-1);
if(!x1266.valid){
continue;
}
CheckValue<IkReal> x1267=IKPowWithIntegerCheck(r22,-1);
if(!x1267.valid){
continue;
}
sj4array[0]=((-1.0)*(x1266.value)*(x1267.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1268=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1268);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1268);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1269=((4.0)*r01);
IkReal x1270=((16.0)*r00);
IkReal x1271=(cj3*sj2);
IkReal x1272=((8.0)*r00);
IkReal x1273=(cj2*cj3);
IkReal x1274=(cj4*r01);
IkReal x1275=((16.0)*cj1);
IkReal x1276=((8.0)*sj1);
IkReal x1277=((16.0)*sj1);
IkReal x1278=((8.0)*cj1);
IkReal x1279=(sj2*sj3);
IkReal x1280=(cj2*sj3);
IkReal x1281=(sj1*x1280);
IkReal x1282=((4.0)*cj4*r00);
IkReal x1283=(((sj1*x1269*x1271))+((cj1*x1269*x1279))+((sj1*x1279*x1282))+((x1269*x1281)));
IkReal x1284=(((cj1*x1280*x1282))+((cj1*x1271*x1282))+((cj1*x1269*x1273))+((sj1*x1273*x1282)));
IkReal x1285=(x1284+(((-1.0)*x1283)));
IkReal x1286=(((sj1*x1271*x1272))+((cj1*x1272*x1279))+(((-1.0)*cj1*x1272*x1273))+((x1271*x1274*x1278))+(((-1.0)*x1274*x1276*x1279))+((x1273*x1274*x1276))+((x1272*x1281))+((x1274*x1278*x1280)));
IkReal x1287=(x1283+(((-1.0)*x1284)));
op[0]=x1285;
op[1]=x1286;
op[2]=x1285;
op[3]=(((x1270*x1281))+(((-1.0)*x1274*x1277*x1279))+((sj1*x1270*x1271))+((x1271*x1274*x1275))+(((-1.0)*cj1*x1270*x1273))+((x1273*x1274*x1277))+((x1274*x1275*x1280))+((cj1*x1270*x1279)));
op[4]=x1287;
op[5]=x1286;
op[6]=x1287;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1288=(cj5*sj4);
IkReal x1289=(sj4*sj5);
if( IKabs((((r01*x1289))+(((-1.0)*r00*x1288)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1288))+(((-1.0)*r11*x1289)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1289))+(((-1.0)*r00*x1288))))+IKsqr((((r10*x1288))+(((-1.0)*r11*x1289))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1289))+(((-1.0)*r00*x1288))), (((r10*x1288))+(((-1.0)*r11*x1289))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1290=IKcos(j0);
IkReal x1291=IKsin(j0);
IkReal x1292=((0.21325)*cj2);
IkReal x1293=((1.0)*cj3);
IkReal x1294=((1.0)*sj2);
IkReal x1295=(r11*sj5);
IkReal x1296=(cj5*r01);
IkReal x1297=(r01*sj5);
IkReal x1298=((0.21325)*sj2);
IkReal x1299=(cj5*r11);
IkReal x1300=(r00*sj5);
IkReal x1301=(cj3*cj4);
IkReal x1302=((1.0)*cj2);
IkReal x1303=(r10*sj5);
IkReal x1304=(cj1*x1291);
IkReal x1305=(cj4*cj5*r00);
IkReal x1306=(cj1*x1290);
IkReal x1307=(cj4*cj5*r10);
IkReal x1308=((1.0)*cj4*sj3);
IkReal x1309=(sj1*x1290);
IkReal x1310=((1.0)*cj5*sj4);
IkReal x1311=(sj1*x1291);
evalcond[0]=(x1290+((sj4*x1295))+(((-1.0)*r10*x1310)));
evalcond[1]=((((-1.0)*r00*x1310))+(((-1.0)*x1291))+((sj4*x1297)));
evalcond[2]=(((sj2*x1309))+((sj3*x1296))+((sj3*x1300))+((x1297*x1301))+(((-1.0)*x1293*x1305))+(((-1.0)*x1302*x1306)));
evalcond[3]=(((sj2*x1311))+((sj3*x1299))+((sj3*x1303))+((x1295*x1301))+(((-1.0)*x1293*x1307))+(((-1.0)*x1302*x1304)));
evalcond[4]=(((cj3*x1296))+((sj3*x1305))+(((-1.0)*x1297*x1308))+(((-1.0)*x1294*x1306))+((cj3*x1300))+(((-1.0)*x1302*x1309)));
evalcond[5]=(((cj3*x1299))+((sj3*x1307))+(((-1.0)*x1294*x1304))+((cj3*x1303))+(((-1.0)*x1295*x1308))+(((-1.0)*x1302*x1311)));
evalcond[6]=(((x1292*x1306))+(((-0.11235)*x1291))+(((-0.08535)*x1296))+(((-1.0)*px))+(((-1.0)*x1298*x1309))+(((-0.08535)*x1300))+(((0.24365)*x1306)));
evalcond[7]=(((x1292*x1304))+(((0.11235)*x1290))+(((-0.08535)*x1299))+(((-1.0)*py))+(((-1.0)*x1298*x1311))+(((-0.08535)*x1303))+(((0.24365)*x1304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1314 = IKatan2WithCheck(IkReal(((-0.08535)*r21)),IkReal(((-0.08535)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1314.valid){
continue;
}
IkReal x1312=((1.0)*(x1314.value));
if((((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1315=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20)))))),-1);
if(!x1315.valid){
continue;
}
if( (((-1.0)*(x1315.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1315.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1313=((-1.0)*(IKasin(((-1.0)*(x1315.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1))))))));
j5array[0]=((((-1.0)*x1312))+(((-1.0)*x1313)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1312))+(((1.0)*x1313)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1316=cj5*cj5;
IkReal x1317=r21*r21;
IkReal x1318=(sj3*x1316);
IkReal x1319=(((sj3*(r22*r22)))+((sj3*x1317))+(((-1.0)*x1317*x1318))+((x1318*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj3*sj5)));
j4eval[0]=x1319;
j4eval[1]=IKsign(x1319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1320=cj5*cj5;
IkReal x1321=r21*r21;
IkReal x1322=((1.0)*cj3);
IkReal x1323=(cj3*x1320);
IkReal x1324=((((-1.0)*x1320*x1322*(r20*r20)))+(((-1.0)*x1321*x1322))+(((-1.0)*x1322*(r22*r22)))+((x1321*x1323))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1324;
j4eval[1]=IKsign(x1324);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1325=cj1*cj1;
IkReal x1326=cj2*cj2;
IkReal x1327=(cj1*sj1*sj2);
IkReal x1328=(cj2*x1325);
IkReal x1329=(x1325*x1326);
j0eval[0]=((4.18279977479812)+(((-7.48153495812743)*x1327))+x1325+(((6.54807030503047)*x1329))+(((7.48153495812743)*x1328))+(((-6.54807030503047)*cj2*x1327))+(((-3.27403515251523)*x1326)));
j0eval[1]=IKsign(((23239234.0)+(((5555904.0)*x1325))+(((-41566690.0)*x1327))+(((41566690.0)*x1328))+(((-18190225.0)*x1326))+(((-36380450.0)*cj2*x1327))+(((36380450.0)*x1329))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1330=((1.0)*cj5);
IkReal x1331=((1.0)*sj5);
IkReal x1332=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1332;
j0eval[1]=((IKabs(((((-1.0)*r10*x1331))+(((-1.0)*r11*x1330)))))+(IKabs(((((-1.0)*r00*x1331))+(((-1.0)*r01*x1330))))));
j0eval[2]=IKsign(x1332);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1333=cj5*cj5;
IkReal x1334=r21*r21;
IkReal x1335=(sj1*sj2);
IkReal x1336=(r21*sj5);
IkReal x1337=(cj5*r20);
IkReal x1338=(cj1*cj2);
IkReal x1339=(x1334+(((-1.0)*x1333*x1334))+(r22*r22)+(((-2.0)*x1336*x1337))+((x1333*(r20*r20))));
j4eval[0]=x1339;
j4eval[1]=IKsign(x1339);
j4eval[2]=((IKabs((((x1337*x1338))+((x1335*x1336))+(((-1.0)*x1335*x1337))+(((-1.0)*x1336*x1338)))))+(IKabs(((((-1.0)*r22*x1338))+((r22*x1335))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1340=IKcos(j0);
IkReal x1341=IKsin(j0);
evalcond[0]=((((0.24365)*x1340))+(((-0.11235)*x1341))+(((-1.0)*px)));
evalcond[1]=((((0.24365)*x1341))+(((0.11235)*x1340))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1342=((1.0)*cj5);
IkReal x1343=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1342)));
j4eval[0]=x1343;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1342))))));
j4eval[2]=IKsign(x1343);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1344=((1.0)*cj5);
IkReal x1345=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1344)));
j4eval[0]=x1345;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1344)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1345);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1346=cj5*cj5;
IkReal x1347=((1.0)*sj5);
IkReal x1348=(cj5*r20);
IkReal x1349=(r11*r21);
IkReal x1350=(x1349+(((-1.0)*cj5*r10*r21*x1347))+(((-1.0)*x1346*x1349))+((r12*r22))+((r10*r20*x1346))+(((-1.0)*r11*x1347*x1348)));
j4eval[0]=x1350;
j4eval[1]=IKsign(x1350);
j4eval[2]=((IKabs((((cj0*x1348))+(((-1.0)*cj0*r21*x1347)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1351=cj5*cj5;
IkReal x1352=((1.0)*sj5);
IkReal x1353=(cj5*r20);
IkReal x1354=(r11*r21);
CheckValue<IkReal> x1355=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1351*x1354))+x1354+((r10*r20*x1351))+(((-1.0)*cj5*r10*r21*x1352))+((r12*r22))+(((-1.0)*r11*x1352*x1353)))),-1);
if(!x1355.valid){
continue;
}
CheckValue<IkReal> x1356 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1352))+((cj0*x1353)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1355.value)))+(x1356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1357=IKsin(j4);
IkReal x1358=IKcos(j4);
IkReal x1359=((1.0)*sj0);
IkReal x1360=(cj5*r00);
IkReal x1361=(r11*sj5);
IkReal x1362=(cj5*r10);
IkReal x1363=(r21*sj5);
IkReal x1364=(cj5*r20);
IkReal x1365=(r01*sj5);
IkReal x1366=((1.0)*x1358);
IkReal x1367=((1.0)*x1357);
evalcond[0]=(((x1357*x1363))+(((-1.0)*x1364*x1367))+(((-1.0)*r22*x1366)));
evalcond[1]=(((x1358*x1364))+(((-1.0)*r22*x1367))+(((-1.0)*x1363*x1366)));
evalcond[2]=(((x1357*x1361))+(((-1.0)*r12*x1366))+cj0+(((-1.0)*x1362*x1367)));
evalcond[3]=(((x1357*x1365))+(((-1.0)*x1359))+(((-1.0)*r02*x1366))+(((-1.0)*x1360*x1367)));
evalcond[4]=((((-1.0)*r02*x1367))+((x1358*x1360))+(((-1.0)*x1365*x1366))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1359))+(((-1.0)*r12*x1367))+((x1358*x1362))+(((-1.0)*x1361*x1366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1368=((1.0)*cj5);
CheckValue<IkReal> x1369 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1369.valid){
continue;
}
CheckValue<IkReal> x1370=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1368))+(((-1.0)*r10*sj5)))),-1);
if(!x1370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1369.value)+(((1.5707963267949)*(x1370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1371=IKsin(j4);
IkReal x1372=IKcos(j4);
IkReal x1373=((1.0)*sj0);
IkReal x1374=(cj5*r00);
IkReal x1375=(r11*sj5);
IkReal x1376=(cj5*r10);
IkReal x1377=(r21*sj5);
IkReal x1378=(cj5*r20);
IkReal x1379=(r01*sj5);
IkReal x1380=((1.0)*x1372);
IkReal x1381=((1.0)*x1371);
evalcond[0]=(((x1371*x1377))+(((-1.0)*r22*x1380))+(((-1.0)*x1378*x1381)));
evalcond[1]=(((x1372*x1378))+(((-1.0)*x1377*x1380))+(((-1.0)*r22*x1381)));
evalcond[2]=((((-1.0)*r12*x1380))+cj0+(((-1.0)*x1376*x1381))+((x1371*x1375)));
evalcond[3]=((((-1.0)*r02*x1380))+(((-1.0)*x1374*x1381))+(((-1.0)*x1373))+((x1371*x1379)));
evalcond[4]=(((x1372*x1374))+(((-1.0)*r02*x1381))+(((-1.0)*x1379*x1380))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1381))+((x1372*x1376))+(((-1.0)*x1375*x1380))+(((-1.0)*x1373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1382=((1.0)*cj5);
CheckValue<IkReal> x1383 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1382))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1383.valid){
continue;
}
CheckValue<IkReal> x1384=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1382)))),-1);
if(!x1384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1383.value)+(((1.5707963267949)*(x1384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1385=IKsin(j4);
IkReal x1386=IKcos(j4);
IkReal x1387=((1.0)*sj0);
IkReal x1388=(cj5*r00);
IkReal x1389=(r11*sj5);
IkReal x1390=(cj5*r10);
IkReal x1391=(r21*sj5);
IkReal x1392=(cj5*r20);
IkReal x1393=(r01*sj5);
IkReal x1394=((1.0)*x1386);
IkReal x1395=((1.0)*x1385);
evalcond[0]=((((-1.0)*x1392*x1395))+(((-1.0)*r22*x1394))+((x1385*x1391)));
evalcond[1]=((((-1.0)*x1391*x1394))+((x1386*x1392))+(((-1.0)*r22*x1395)));
evalcond[2]=((((-1.0)*r12*x1394))+cj0+(((-1.0)*x1390*x1395))+((x1385*x1389)));
evalcond[3]=((((-1.0)*x1387))+(((-1.0)*r02*x1394))+(((-1.0)*x1388*x1395))+((x1385*x1393)));
evalcond[4]=((((-1.0)*r02*x1395))+(((-1.0)*x1393*x1394))+((x1386*x1388))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1387))+(((-1.0)*r12*x1395))+(((-1.0)*x1389*x1394))+((x1386*x1390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1396=IKcos(j0);
IkReal x1397=IKsin(j0);
evalcond[0]=((((-0.11235)*x1397))+(((0.24365)*x1396))+(((-1.0)*px)));
evalcond[1]=((((0.11235)*x1396))+(((0.24365)*x1397))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1398=((1.0)*cj5);
IkReal x1399=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1398)));
j4eval[0]=x1399;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1398))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1400=cj5*cj5;
IkReal x1401=((1.0)*r21);
IkReal x1402=(cj5*sj5);
IkReal x1403=((1.0)*r20);
IkReal x1404=((((-1.0)*r01*x1402*x1403))+(((-1.0)*r01*x1400*x1401))+((r01*r21))+(((-1.0)*r00*x1401*x1402))+((r00*r20*x1400))+((r02*r22)));
j4eval[0]=x1404;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1403)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1405=cj5*cj5;
IkReal x1406=(r21*sj5);
IkReal x1407=(r11*r21);
IkReal x1408=((1.0)*cj5*r20);
IkReal x1409=((((-1.0)*x1405*x1407))+(((-1.0)*cj5*r10*x1406))+(((-1.0)*r11*sj5*x1408))+((r10*r20*x1405))+((r12*r22))+x1407);
j4eval[0]=x1409;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1408))+((sj0*x1406))))));
j4eval[2]=IKsign(x1409);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1410=cj5*cj5;
IkReal x1411=(r21*sj5);
IkReal x1412=(r11*r21);
IkReal x1413=((1.0)*cj5*r20);
CheckValue<IkReal> x1414 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1413))+((sj0*x1411)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1414.valid){
continue;
}
CheckValue<IkReal> x1415=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1410*x1412))+(((-1.0)*cj5*r10*x1411))+((r12*r22))+(((-1.0)*r11*sj5*x1413))+((r10*r20*x1410))+x1412)),-1);
if(!x1415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1414.value)+(((1.5707963267949)*(x1415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1416=IKsin(j4);
IkReal x1417=IKcos(j4);
IkReal x1418=(r11*sj5);
IkReal x1419=(cj5*r00);
IkReal x1420=(cj5*r10);
IkReal x1421=(r21*sj5);
IkReal x1422=(cj5*r20);
IkReal x1423=(r01*sj5);
IkReal x1424=((1.0)*x1417);
IkReal x1425=((1.0)*x1416);
evalcond[0]=((((-1.0)*x1422*x1425))+(((-1.0)*r22*x1424))+((x1416*x1421)));
evalcond[1]=((((-1.0)*x1421*x1424))+(((-1.0)*r22*x1425))+((x1417*x1422)));
evalcond[2]=(cj0+(((-1.0)*x1420*x1425))+((x1416*x1418))+(((-1.0)*r12*x1424)));
evalcond[3]=(cj0+((x1417*x1419))+(((-1.0)*x1423*x1424))+(((-1.0)*r02*x1425)));
evalcond[4]=(sj0+(((-1.0)*x1418*x1424))+(((-1.0)*r12*x1425))+((x1417*x1420)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1419*x1425))+(((-1.0)*r02*x1424))+((x1416*x1423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1426=cj5*cj5;
IkReal x1427=((1.0)*r21);
IkReal x1428=(cj5*sj5);
IkReal x1429=((1.0)*r20);
CheckValue<IkReal> x1430=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1427*x1428))+((r00*r20*x1426))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x1428*x1429))+(((-1.0)*r01*x1426*x1427)))),-1);
if(!x1430.valid){
continue;
}
CheckValue<IkReal> x1431 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1430.value)))+(x1431.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1432=IKsin(j4);
IkReal x1433=IKcos(j4);
IkReal x1434=(r11*sj5);
IkReal x1435=(cj5*r00);
IkReal x1436=(cj5*r10);
IkReal x1437=(r21*sj5);
IkReal x1438=(cj5*r20);
IkReal x1439=(r01*sj5);
IkReal x1440=((1.0)*x1433);
IkReal x1441=((1.0)*x1432);
evalcond[0]=(((x1432*x1437))+(((-1.0)*r22*x1440))+(((-1.0)*x1438*x1441)));
evalcond[1]=((((-1.0)*r22*x1441))+((x1433*x1438))+(((-1.0)*x1437*x1440)));
evalcond[2]=(((x1432*x1434))+cj0+(((-1.0)*r12*x1440))+(((-1.0)*x1436*x1441)));
evalcond[3]=(cj0+((x1433*x1435))+(((-1.0)*x1439*x1440))+(((-1.0)*r02*x1441)));
evalcond[4]=(sj0+((x1433*x1436))+(((-1.0)*r12*x1441))+(((-1.0)*x1434*x1440)));
evalcond[5]=(((x1432*x1439))+(((-1.0)*sj0))+(((-1.0)*x1435*x1441))+(((-1.0)*r02*x1440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1442=((1.0)*cj5);
CheckValue<IkReal> x1443=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1442))+(((-1.0)*r00*sj5)))),-1);
if(!x1443.valid){
continue;
}
CheckValue<IkReal> x1444 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1443.value)))+(x1444.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1445=IKsin(j4);
IkReal x1446=IKcos(j4);
IkReal x1447=(r11*sj5);
IkReal x1448=(cj5*r00);
IkReal x1449=(cj5*r10);
IkReal x1450=(r21*sj5);
IkReal x1451=(cj5*r20);
IkReal x1452=(r01*sj5);
IkReal x1453=((1.0)*x1446);
IkReal x1454=((1.0)*x1445);
evalcond[0]=(((x1445*x1450))+(((-1.0)*r22*x1453))+(((-1.0)*x1451*x1454)));
evalcond[1]=(((x1446*x1451))+(((-1.0)*r22*x1454))+(((-1.0)*x1450*x1453)));
evalcond[2]=(((x1445*x1447))+cj0+(((-1.0)*x1449*x1454))+(((-1.0)*r12*x1453)));
evalcond[3]=(cj0+(((-1.0)*r02*x1454))+(((-1.0)*x1452*x1453))+((x1446*x1448)));
evalcond[4]=((((-1.0)*x1447*x1453))+sj0+((x1446*x1449))+(((-1.0)*r12*x1454)));
evalcond[5]=(((x1445*x1452))+(((-1.0)*sj0))+(((-1.0)*x1448*x1454))+(((-1.0)*r02*x1453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1455=((1.0)*cj5);
IkReal x1456=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1455)));
j4eval[0]=x1456;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1455))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1456);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1457=((1.0)*cj5);
IkReal x1458=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1457)));
j4eval[0]=x1458;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1457))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1459=cj5*cj5;
IkReal x1460=((1.0)*sj5);
IkReal x1461=(cj5*r20);
IkReal x1462=(r11*r21);
IkReal x1463=(((r10*r20*x1459))+(((-1.0)*r11*x1460*x1461))+(((-1.0)*cj5*r10*r21*x1460))+((r12*r22))+x1462+(((-1.0)*x1459*x1462)));
j4eval[0]=x1463;
j4eval[1]=IKsign(x1463);
j4eval[2]=((IKabs((((cj0*x1461))+(((-1.0)*cj0*r21*x1460)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1464=cj5*cj5;
IkReal x1465=((1.0)*sj5);
IkReal x1466=(cj5*r20);
IkReal x1467=(r11*r21);
CheckValue<IkReal> x1468 = IKatan2WithCheck(IkReal((((cj0*x1466))+(((-1.0)*cj0*r21*x1465)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1468.valid){
continue;
}
CheckValue<IkReal> x1469=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1465))+((r12*r22))+((r10*r20*x1464))+x1467+(((-1.0)*x1464*x1467))+(((-1.0)*r11*x1465*x1466)))),-1);
if(!x1469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1468.value)+(((1.5707963267949)*(x1469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1470=IKsin(j4);
IkReal x1471=IKcos(j4);
IkReal x1472=((1.0)*sj0);
IkReal x1473=(cj5*r00);
IkReal x1474=(r11*sj5);
IkReal x1475=(cj5*r10);
IkReal x1476=(r21*sj5);
IkReal x1477=(cj5*r20);
IkReal x1478=(r01*sj5);
IkReal x1479=((1.0)*x1471);
IkReal x1480=((1.0)*x1470);
evalcond[0]=((((-1.0)*r22*x1479))+((x1470*x1476))+(((-1.0)*x1477*x1480)));
evalcond[1]=(((x1471*x1477))+(((-1.0)*x1476*x1479))+(((-1.0)*r22*x1480)));
evalcond[2]=(cj0+(((-1.0)*r12*x1479))+((x1470*x1474))+(((-1.0)*x1475*x1480)));
evalcond[3]=(((x1470*x1478))+(((-1.0)*x1472))+(((-1.0)*r02*x1479))+(((-1.0)*x1473*x1480)));
evalcond[4]=((((-1.0)*x1478*x1479))+((x1471*x1473))+(((-1.0)*r02*x1480))+(((-1.0)*cj0)));
evalcond[5]=(((x1471*x1475))+(((-1.0)*r12*x1480))+(((-1.0)*x1474*x1479))+(((-1.0)*x1472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1481=((1.0)*cj5);
CheckValue<IkReal> x1482=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1481))+(((-1.0)*r10*sj5)))),-1);
if(!x1482.valid){
continue;
}
CheckValue<IkReal> x1483 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1481))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1482.value)))+(x1483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1484=IKsin(j4);
IkReal x1485=IKcos(j4);
IkReal x1486=((1.0)*sj0);
IkReal x1487=(cj5*r00);
IkReal x1488=(r11*sj5);
IkReal x1489=(cj5*r10);
IkReal x1490=(r21*sj5);
IkReal x1491=(cj5*r20);
IkReal x1492=(r01*sj5);
IkReal x1493=((1.0)*x1485);
IkReal x1494=((1.0)*x1484);
evalcond[0]=(((x1484*x1490))+(((-1.0)*x1491*x1494))+(((-1.0)*r22*x1493)));
evalcond[1]=(((x1485*x1491))+(((-1.0)*x1490*x1493))+(((-1.0)*r22*x1494)));
evalcond[2]=((((-1.0)*r12*x1493))+cj0+((x1484*x1488))+(((-1.0)*x1489*x1494)));
evalcond[3]=((((-1.0)*x1487*x1494))+(((-1.0)*x1486))+((x1484*x1492))+(((-1.0)*r02*x1493)));
evalcond[4]=((((-1.0)*x1492*x1493))+(((-1.0)*r02*x1494))+((x1485*x1487))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1494))+(((-1.0)*x1486))+((x1485*x1489))+(((-1.0)*x1488*x1493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1495=((1.0)*cj5);
CheckValue<IkReal> x1496=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1495))+(((-1.0)*r00*sj5)))),-1);
if(!x1496.valid){
continue;
}
CheckValue<IkReal> x1497 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1496.value)))+(x1497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1498=IKsin(j4);
IkReal x1499=IKcos(j4);
IkReal x1500=((1.0)*sj0);
IkReal x1501=(cj5*r00);
IkReal x1502=(r11*sj5);
IkReal x1503=(cj5*r10);
IkReal x1504=(r21*sj5);
IkReal x1505=(cj5*r20);
IkReal x1506=(r01*sj5);
IkReal x1507=((1.0)*x1499);
IkReal x1508=((1.0)*x1498);
evalcond[0]=((((-1.0)*r22*x1507))+((x1498*x1504))+(((-1.0)*x1505*x1508)));
evalcond[1]=(((x1499*x1505))+(((-1.0)*x1504*x1507))+(((-1.0)*r22*x1508)));
evalcond[2]=(((x1498*x1502))+cj0+(((-1.0)*x1503*x1508))+(((-1.0)*r12*x1507)));
evalcond[3]=((((-1.0)*x1500))+((x1498*x1506))+(((-1.0)*x1501*x1508))+(((-1.0)*r02*x1507)));
evalcond[4]=(((x1499*x1501))+(((-1.0)*x1506*x1507))+(((-1.0)*r02*x1508))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1500))+((x1499*x1503))+(((-1.0)*x1502*x1507))+(((-1.0)*r12*x1508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1509=((1.0)*cj5);
IkReal x1510=((((-1.0)*r01*x1509))+(((-1.0)*r00*sj5)));
j4eval[0]=x1510;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1509))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1511=cj5*cj5;
IkReal x1512=((1.0)*r21);
IkReal x1513=(cj5*sj5);
IkReal x1514=((1.0)*r20);
IkReal x1515=((((-1.0)*r00*x1512*x1513))+((r01*r21))+(((-1.0)*r01*x1513*x1514))+(((-1.0)*r01*x1511*x1512))+((r02*r22))+((r00*r20*x1511)));
j4eval[0]=x1515;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1514)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1515);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1516=cj5*cj5;
IkReal x1517=(r21*sj5);
IkReal x1518=(r11*r21);
IkReal x1519=((1.0)*cj5*r20);
IkReal x1520=((((-1.0)*x1516*x1518))+((r12*r22))+(((-1.0)*r11*sj5*x1519))+x1518+((r10*r20*x1516))+(((-1.0)*cj5*r10*x1517)));
j4eval[0]=x1520;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1519))+((sj0*x1517)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1521=cj5*cj5;
IkReal x1522=(r21*sj5);
IkReal x1523=(r11*r21);
IkReal x1524=((1.0)*cj5*r20);
CheckValue<IkReal> x1525 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1524))+((sj0*x1522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1525.valid){
continue;
}
CheckValue<IkReal> x1526=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*r11*sj5*x1524))+(((-1.0)*x1521*x1523))+x1523+(((-1.0)*cj5*r10*x1522))+((r10*r20*x1521)))),-1);
if(!x1526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1525.value)+(((1.5707963267949)*(x1526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1527=IKsin(j4);
IkReal x1528=IKcos(j4);
IkReal x1529=(r11*sj5);
IkReal x1530=(cj5*r00);
IkReal x1531=(cj5*r10);
IkReal x1532=(r21*sj5);
IkReal x1533=(cj5*r20);
IkReal x1534=(r01*sj5);
IkReal x1535=((1.0)*x1528);
IkReal x1536=((1.0)*x1527);
evalcond[0]=((((-1.0)*r22*x1535))+((x1527*x1532))+(((-1.0)*x1533*x1536)));
evalcond[1]=(((x1528*x1533))+(((-1.0)*r22*x1536))+(((-1.0)*x1532*x1535)));
evalcond[2]=((((-1.0)*r12*x1535))+cj0+(((-1.0)*x1531*x1536))+((x1527*x1529)));
evalcond[3]=(cj0+((x1528*x1530))+(((-1.0)*r02*x1536))+(((-1.0)*x1534*x1535)));
evalcond[4]=((((-1.0)*x1529*x1535))+sj0+(((-1.0)*r12*x1536))+((x1528*x1531)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1530*x1536))+(((-1.0)*r02*x1535))+((x1527*x1534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1537=cj5*cj5;
IkReal x1538=((1.0)*r21);
IkReal x1539=(cj5*sj5);
IkReal x1540=((1.0)*r20);
CheckValue<IkReal> x1541 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1541.valid){
continue;
}
CheckValue<IkReal> x1542=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r00*x1538*x1539))+(((-1.0)*r01*x1539*x1540))+(((-1.0)*r01*x1537*x1538))+((r02*r22))+((r00*r20*x1537)))),-1);
if(!x1542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1541.value)+(((1.5707963267949)*(x1542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1543=IKsin(j4);
IkReal x1544=IKcos(j4);
IkReal x1545=(r11*sj5);
IkReal x1546=(cj5*r00);
IkReal x1547=(cj5*r10);
IkReal x1548=(r21*sj5);
IkReal x1549=(cj5*r20);
IkReal x1550=(r01*sj5);
IkReal x1551=((1.0)*x1544);
IkReal x1552=((1.0)*x1543);
evalcond[0]=((((-1.0)*x1549*x1552))+(((-1.0)*r22*x1551))+((x1543*x1548)));
evalcond[1]=(((x1544*x1549))+(((-1.0)*r22*x1552))+(((-1.0)*x1548*x1551)));
evalcond[2]=(cj0+(((-1.0)*r12*x1551))+((x1543*x1545))+(((-1.0)*x1547*x1552)));
evalcond[3]=(cj0+((x1544*x1546))+(((-1.0)*r02*x1552))+(((-1.0)*x1550*x1551)));
evalcond[4]=(sj0+((x1544*x1547))+(((-1.0)*x1545*x1551))+(((-1.0)*r12*x1552)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1546*x1552))+(((-1.0)*r02*x1551))+((x1543*x1550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1553=((1.0)*cj5);
CheckValue<IkReal> x1554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1553)))),-1);
if(!x1554.valid){
continue;
}
CheckValue<IkReal> x1555 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1554.value)))+(x1555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1556=IKsin(j4);
IkReal x1557=IKcos(j4);
IkReal x1558=(r11*sj5);
IkReal x1559=(cj5*r00);
IkReal x1560=(cj5*r10);
IkReal x1561=(r21*sj5);
IkReal x1562=(cj5*r20);
IkReal x1563=(r01*sj5);
IkReal x1564=((1.0)*x1557);
IkReal x1565=((1.0)*x1556);
evalcond[0]=(((x1556*x1561))+(((-1.0)*x1562*x1565))+(((-1.0)*r22*x1564)));
evalcond[1]=((((-1.0)*r22*x1565))+((x1557*x1562))+(((-1.0)*x1561*x1564)));
evalcond[2]=(cj0+((x1556*x1558))+(((-1.0)*x1560*x1565))+(((-1.0)*r12*x1564)));
evalcond[3]=((((-1.0)*r02*x1565))+cj0+((x1557*x1559))+(((-1.0)*x1563*x1564)));
evalcond[4]=(sj0+((x1557*x1560))+(((-1.0)*r12*x1565))+(((-1.0)*x1558*x1564)));
evalcond[5]=((((-1.0)*x1559*x1565))+(((-1.0)*sj0))+((x1556*x1563))+(((-1.0)*r02*x1564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1566=IKcos(j0);
IkReal x1567=IKsin(j0);
evalcond[0]=((((-0.24365)*x1566))+(((-1.0)*px))+(((-0.11235)*x1567)));
evalcond[1]=((((-0.24365)*x1567))+(((0.11235)*x1566))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1568=((1.0)*cj5);
IkReal x1569=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1568)));
j4eval[0]=x1569;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1568)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1569);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1570=cj5*cj5;
IkReal x1571=((1.0)*r21);
IkReal x1572=(cj5*sj5);
IkReal x1573=((1.0)*r20);
IkReal x1574=((((-1.0)*r01*x1570*x1571))+((r01*r21))+((r00*r20*x1570))+(((-1.0)*r00*x1571*x1572))+(((-1.0)*r01*x1572*x1573))+((r02*r22)));
j4eval[0]=x1574;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1573)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1575=cj5*cj5;
IkReal x1576=(r21*sj5);
IkReal x1577=(r11*r21);
IkReal x1578=((1.0)*cj5*r20);
IkReal x1579=((((-1.0)*cj5*r10*x1576))+(((-1.0)*r11*sj5*x1578))+((r12*r22))+x1577+(((-1.0)*x1575*x1577))+((r10*r20*x1575)));
j4eval[0]=x1579;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1576))+(((-1.0)*sj0*x1578))))));
j4eval[2]=IKsign(x1579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1580=cj5*cj5;
IkReal x1581=(r21*sj5);
IkReal x1582=(r11*r21);
IkReal x1583=((1.0)*cj5*r20);
CheckValue<IkReal> x1584 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1583))+((sj0*x1581)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1584.valid){
continue;
}
CheckValue<IkReal> x1585=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1581))+((r10*r20*x1580))+((r12*r22))+(((-1.0)*x1580*x1582))+x1582+(((-1.0)*r11*sj5*x1583)))),-1);
if(!x1585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1584.value)+(((1.5707963267949)*(x1585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1586=IKsin(j4);
IkReal x1587=IKcos(j4);
IkReal x1588=(r11*sj5);
IkReal x1589=(cj5*r00);
IkReal x1590=(cj5*r10);
IkReal x1591=(r21*sj5);
IkReal x1592=(cj5*r20);
IkReal x1593=(r01*sj5);
IkReal x1594=((1.0)*x1587);
IkReal x1595=((1.0)*x1586);
evalcond[0]=(((x1586*x1591))+(((-1.0)*x1592*x1595))+(((-1.0)*r22*x1594)));
evalcond[1]=(((x1587*x1592))+(((-1.0)*x1591*x1594))+(((-1.0)*r22*x1595)));
evalcond[2]=(((x1586*x1588))+cj0+(((-1.0)*x1590*x1595))+(((-1.0)*r12*x1594)));
evalcond[3]=(((x1587*x1589))+cj0+(((-1.0)*x1593*x1594))+(((-1.0)*r02*x1595)));
evalcond[4]=(sj0+((x1587*x1590))+(((-1.0)*x1588*x1594))+(((-1.0)*r12*x1595)));
evalcond[5]=(((x1586*x1593))+(((-1.0)*sj0))+(((-1.0)*r02*x1594))+(((-1.0)*x1589*x1595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1596=cj5*cj5;
IkReal x1597=((1.0)*r21);
IkReal x1598=(cj5*sj5);
IkReal x1599=((1.0)*r20);
CheckValue<IkReal> x1600 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1599)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1600.valid){
continue;
}
CheckValue<IkReal> x1601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1597*x1598))+(((-1.0)*r01*x1596*x1597))+((r01*r21))+((r00*r20*x1596))+((r02*r22))+(((-1.0)*r01*x1598*x1599)))),-1);
if(!x1601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1600.value)+(((1.5707963267949)*(x1601.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1602=IKsin(j4);
IkReal x1603=IKcos(j4);
IkReal x1604=(r11*sj5);
IkReal x1605=(cj5*r00);
IkReal x1606=(cj5*r10);
IkReal x1607=(r21*sj5);
IkReal x1608=(cj5*r20);
IkReal x1609=(r01*sj5);
IkReal x1610=((1.0)*x1603);
IkReal x1611=((1.0)*x1602);
evalcond[0]=((((-1.0)*r22*x1610))+(((-1.0)*x1608*x1611))+((x1602*x1607)));
evalcond[1]=((((-1.0)*r22*x1611))+((x1603*x1608))+(((-1.0)*x1607*x1610)));
evalcond[2]=((((-1.0)*x1606*x1611))+(((-1.0)*r12*x1610))+cj0+((x1602*x1604)));
evalcond[3]=(cj0+(((-1.0)*r02*x1611))+((x1603*x1605))+(((-1.0)*x1609*x1610)));
evalcond[4]=((((-1.0)*r12*x1611))+sj0+((x1603*x1606))+(((-1.0)*x1604*x1610)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1610))+(((-1.0)*x1605*x1611))+((x1602*x1609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1612=((1.0)*cj5);
CheckValue<IkReal> x1613 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1612)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1613.valid){
continue;
}
CheckValue<IkReal> x1614=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1612))+(((-1.0)*r00*sj5)))),-1);
if(!x1614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1613.value)+(((1.5707963267949)*(x1614.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1615=IKsin(j4);
IkReal x1616=IKcos(j4);
IkReal x1617=(r11*sj5);
IkReal x1618=(cj5*r00);
IkReal x1619=(cj5*r10);
IkReal x1620=(r21*sj5);
IkReal x1621=(cj5*r20);
IkReal x1622=(r01*sj5);
IkReal x1623=((1.0)*x1616);
IkReal x1624=((1.0)*x1615);
evalcond[0]=(((x1615*x1620))+(((-1.0)*x1621*x1624))+(((-1.0)*r22*x1623)));
evalcond[1]=((((-1.0)*r22*x1624))+(((-1.0)*x1620*x1623))+((x1616*x1621)));
evalcond[2]=((((-1.0)*r12*x1623))+(((-1.0)*x1619*x1624))+cj0+((x1615*x1617)));
evalcond[3]=(cj0+(((-1.0)*r02*x1624))+(((-1.0)*x1622*x1623))+((x1616*x1618)));
evalcond[4]=((((-1.0)*r12*x1624))+sj0+(((-1.0)*x1617*x1623))+((x1616*x1619)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1623))+((x1615*x1622))+(((-1.0)*x1618*x1624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1625=IKcos(j0);
IkReal x1626=IKsin(j0);
evalcond[0]=((((-0.11235)*x1626))+(((-1.0)*px))+(((-0.24365)*x1625)));
evalcond[1]=((((0.11235)*x1625))+(((-1.0)*py))+(((-0.24365)*x1626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1627=((1.0)*cj5);
IkReal x1628=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1627)));
j4eval[0]=x1628;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1627)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1629=((1.0)*cj5);
IkReal x1630=((((-1.0)*r11*x1629))+(((-1.0)*r10*sj5)));
j4eval[0]=x1630;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1629)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1630);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1631=cj5*cj5;
IkReal x1632=((1.0)*sj5);
IkReal x1633=(cj5*r20);
IkReal x1634=(r11*r21);
IkReal x1635=(x1634+(((-1.0)*cj5*r10*r21*x1632))+((r12*r22))+((r10*r20*x1631))+(((-1.0)*r11*x1632*x1633))+(((-1.0)*x1631*x1634)));
j4eval[0]=x1635;
j4eval[1]=IKsign(x1635);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1632))+((cj0*x1633))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1636=cj5*cj5;
IkReal x1637=((1.0)*sj5);
IkReal x1638=(cj5*r20);
IkReal x1639=(r11*r21);
CheckValue<IkReal> x1640=IKPowWithIntegerCheck(IKsign((x1639+(((-1.0)*cj5*r10*r21*x1637))+((r12*r22))+(((-1.0)*x1636*x1639))+((r10*r20*x1636))+(((-1.0)*r11*x1637*x1638)))),-1);
if(!x1640.valid){
continue;
}
CheckValue<IkReal> x1641 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1637))+((cj0*x1638)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1640.value)))+(x1641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1642=IKsin(j4);
IkReal x1643=IKcos(j4);
IkReal x1644=((1.0)*sj0);
IkReal x1645=(cj5*r00);
IkReal x1646=(r11*sj5);
IkReal x1647=(cj5*r10);
IkReal x1648=(r21*sj5);
IkReal x1649=(cj5*r20);
IkReal x1650=(r01*sj5);
IkReal x1651=((1.0)*x1643);
IkReal x1652=((1.0)*x1642);
evalcond[0]=((((-1.0)*r22*x1651))+((x1642*x1648))+(((-1.0)*x1649*x1652)));
evalcond[1]=((((-1.0)*r22*x1652))+((x1643*x1649))+(((-1.0)*x1648*x1651)));
evalcond[2]=(cj0+(((-1.0)*x1647*x1652))+(((-1.0)*r12*x1651))+((x1642*x1646)));
evalcond[3]=((((-1.0)*x1645*x1652))+(((-1.0)*x1644))+(((-1.0)*r02*x1651))+((x1642*x1650)));
evalcond[4]=((((-1.0)*x1650*x1651))+(((-1.0)*r02*x1652))+((x1643*x1645))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1646*x1651))+(((-1.0)*r12*x1652))+(((-1.0)*x1644))+((x1643*x1647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1653=((1.0)*cj5);
CheckValue<IkReal> x1654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1653)))),-1);
if(!x1654.valid){
continue;
}
CheckValue<IkReal> x1655 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1653))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1654.value)))+(x1655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1656=IKsin(j4);
IkReal x1657=IKcos(j4);
IkReal x1658=((1.0)*sj0);
IkReal x1659=(cj5*r00);
IkReal x1660=(r11*sj5);
IkReal x1661=(cj5*r10);
IkReal x1662=(r21*sj5);
IkReal x1663=(cj5*r20);
IkReal x1664=(r01*sj5);
IkReal x1665=((1.0)*x1657);
IkReal x1666=((1.0)*x1656);
evalcond[0]=((((-1.0)*r22*x1665))+(((-1.0)*x1663*x1666))+((x1656*x1662)));
evalcond[1]=((((-1.0)*x1662*x1665))+(((-1.0)*r22*x1666))+((x1657*x1663)));
evalcond[2]=(cj0+(((-1.0)*x1661*x1666))+(((-1.0)*r12*x1665))+((x1656*x1660)));
evalcond[3]=((((-1.0)*x1658))+(((-1.0)*r02*x1665))+((x1656*x1664))+(((-1.0)*x1659*x1666)));
evalcond[4]=((((-1.0)*r02*x1666))+((x1657*x1659))+(((-1.0)*cj0))+(((-1.0)*x1664*x1665)));
evalcond[5]=((((-1.0)*r12*x1666))+(((-1.0)*x1658))+((x1657*x1661))+(((-1.0)*x1660*x1665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1667=((1.0)*cj5);
CheckValue<IkReal> x1668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1667))+(((-1.0)*r00*sj5)))),-1);
if(!x1668.valid){
continue;
}
CheckValue<IkReal> x1669 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1668.value)))+(x1669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1670=IKsin(j4);
IkReal x1671=IKcos(j4);
IkReal x1672=((1.0)*sj0);
IkReal x1673=(cj5*r00);
IkReal x1674=(r11*sj5);
IkReal x1675=(cj5*r10);
IkReal x1676=(r21*sj5);
IkReal x1677=(cj5*r20);
IkReal x1678=(r01*sj5);
IkReal x1679=((1.0)*x1671);
IkReal x1680=((1.0)*x1670);
evalcond[0]=((((-1.0)*x1677*x1680))+((x1670*x1676))+(((-1.0)*r22*x1679)));
evalcond[1]=((((-1.0)*r22*x1680))+((x1671*x1677))+(((-1.0)*x1676*x1679)));
evalcond[2]=(cj0+(((-1.0)*x1675*x1680))+(((-1.0)*r12*x1679))+((x1670*x1674)));
evalcond[3]=((((-1.0)*r02*x1679))+(((-1.0)*x1673*x1680))+(((-1.0)*x1672))+((x1670*x1678)));
evalcond[4]=((((-1.0)*x1678*x1679))+(((-1.0)*r02*x1680))+((x1671*x1673))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1680))+(((-1.0)*x1674*x1679))+((x1671*x1675))+(((-1.0)*x1672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1681=((1.0)*cj5);
IkReal x1682=((((-1.0)*r01*x1681))+(((-1.0)*r00*sj5)));
j4eval[0]=x1682;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1681)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1682);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1683=cj5*cj5;
IkReal x1684=((1.0)*r21);
IkReal x1685=(cj5*sj5);
IkReal x1686=((1.0)*r20);
IkReal x1687=((((-1.0)*r01*x1685*x1686))+((r01*r21))+(((-1.0)*r01*x1683*x1684))+((r00*r20*x1683))+((r02*r22))+(((-1.0)*r00*x1684*x1685)));
j4eval[0]=x1687;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1686)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1687);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1688=cj5*cj5;
IkReal x1689=(r21*sj5);
IkReal x1690=(r11*r21);
IkReal x1691=((1.0)*cj5*r20);
IkReal x1692=((((-1.0)*cj5*r10*x1689))+x1690+((r12*r22))+(((-1.0)*r11*sj5*x1691))+(((-1.0)*x1688*x1690))+((r10*r20*x1688)));
j4eval[0]=x1692;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1691))+((sj0*x1689))))));
j4eval[2]=IKsign(x1692);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1693=cj5*cj5;
IkReal x1694=(r21*sj5);
IkReal x1695=(r11*r21);
IkReal x1696=((1.0)*cj5*r20);
CheckValue<IkReal> x1697 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1696))+((sj0*x1694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1697.valid){
continue;
}
CheckValue<IkReal> x1698=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1693*x1695))+x1695+((r12*r22))+(((-1.0)*r11*sj5*x1696))+((r10*r20*x1693))+(((-1.0)*cj5*r10*x1694)))),-1);
if(!x1698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1697.value)+(((1.5707963267949)*(x1698.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1699=IKsin(j4);
IkReal x1700=IKcos(j4);
IkReal x1701=(r11*sj5);
IkReal x1702=(cj5*r00);
IkReal x1703=(cj5*r10);
IkReal x1704=(r21*sj5);
IkReal x1705=(cj5*r20);
IkReal x1706=(r01*sj5);
IkReal x1707=((1.0)*x1700);
IkReal x1708=((1.0)*x1699);
evalcond[0]=((((-1.0)*x1705*x1708))+(((-1.0)*r22*x1707))+((x1699*x1704)));
evalcond[1]=(((x1700*x1705))+(((-1.0)*x1704*x1707))+(((-1.0)*r22*x1708)));
evalcond[2]=(cj0+(((-1.0)*x1703*x1708))+((x1699*x1701))+(((-1.0)*r12*x1707)));
evalcond[3]=(cj0+((x1700*x1702))+(((-1.0)*r02*x1708))+(((-1.0)*x1706*x1707)));
evalcond[4]=(sj0+((x1700*x1703))+(((-1.0)*x1701*x1707))+(((-1.0)*r12*x1708)));
evalcond[5]=((((-1.0)*x1702*x1708))+(((-1.0)*sj0))+(((-1.0)*r02*x1707))+((x1699*x1706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1709=cj5*cj5;
IkReal x1710=((1.0)*r21);
IkReal x1711=(cj5*sj5);
IkReal x1712=((1.0)*r20);
CheckValue<IkReal> x1713 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1713.valid){
continue;
}
CheckValue<IkReal> x1714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1711*x1712))+((r01*r21))+((r00*r20*x1709))+(((-1.0)*r00*x1710*x1711))+((r02*r22))+(((-1.0)*r01*x1709*x1710)))),-1);
if(!x1714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1713.value)+(((1.5707963267949)*(x1714.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1715=IKsin(j4);
IkReal x1716=IKcos(j4);
IkReal x1717=(r11*sj5);
IkReal x1718=(cj5*r00);
IkReal x1719=(cj5*r10);
IkReal x1720=(r21*sj5);
IkReal x1721=(cj5*r20);
IkReal x1722=(r01*sj5);
IkReal x1723=((1.0)*x1716);
IkReal x1724=((1.0)*x1715);
evalcond[0]=((((-1.0)*r22*x1723))+((x1715*x1720))+(((-1.0)*x1721*x1724)));
evalcond[1]=((((-1.0)*r22*x1724))+(((-1.0)*x1720*x1723))+((x1716*x1721)));
evalcond[2]=(cj0+(((-1.0)*r12*x1723))+((x1715*x1717))+(((-1.0)*x1719*x1724)));
evalcond[3]=(cj0+(((-1.0)*x1722*x1723))+((x1716*x1718))+(((-1.0)*r02*x1724)));
evalcond[4]=(sj0+(((-1.0)*r12*x1724))+((x1716*x1719))+(((-1.0)*x1717*x1723)));
evalcond[5]=((((-1.0)*sj0))+((x1715*x1722))+(((-1.0)*x1718*x1724))+(((-1.0)*r02*x1723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1725=((1.0)*cj5);
CheckValue<IkReal> x1726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1725))+(((-1.0)*r00*sj5)))),-1);
if(!x1726.valid){
continue;
}
CheckValue<IkReal> x1727 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1726.value)))+(x1727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1728=IKsin(j4);
IkReal x1729=IKcos(j4);
IkReal x1730=(r11*sj5);
IkReal x1731=(cj5*r00);
IkReal x1732=(cj5*r10);
IkReal x1733=(r21*sj5);
IkReal x1734=(cj5*r20);
IkReal x1735=(r01*sj5);
IkReal x1736=((1.0)*x1729);
IkReal x1737=((1.0)*x1728);
evalcond[0]=(((x1728*x1733))+(((-1.0)*x1734*x1737))+(((-1.0)*r22*x1736)));
evalcond[1]=((((-1.0)*x1733*x1736))+((x1729*x1734))+(((-1.0)*r22*x1737)));
evalcond[2]=(((x1728*x1730))+cj0+(((-1.0)*r12*x1736))+(((-1.0)*x1732*x1737)));
evalcond[3]=(cj0+((x1729*x1731))+(((-1.0)*x1735*x1736))+(((-1.0)*r02*x1737)));
evalcond[4]=(sj0+(((-1.0)*r12*x1737))+((x1729*x1732))+(((-1.0)*x1730*x1736)));
evalcond[5]=((((-1.0)*x1731*x1737))+((x1728*x1735))+(((-1.0)*sj0))+(((-1.0)*r02*x1736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1738=((1.0)*cj5);
IkReal x1739=((((-1.0)*r01*x1738))+(((-1.0)*r00*sj5)));
j4eval[0]=x1739;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1738)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1739);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1740=((1.0)*cj5);
IkReal x1741=((((-1.0)*r11*x1740))+(((-1.0)*r10*sj5)));
j4eval[0]=x1741;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1740))))));
j4eval[2]=IKsign(x1741);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1742=cj5*cj5;
IkReal x1743=((1.0)*sj5);
IkReal x1744=(cj5*r20);
IkReal x1745=(r11*r21);
IkReal x1746=(((r10*r20*x1742))+(((-1.0)*cj5*r10*r21*x1743))+x1745+((r12*r22))+(((-1.0)*x1742*x1745))+(((-1.0)*r11*x1743*x1744)));
j4eval[0]=x1746;
j4eval[1]=IKsign(x1746);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1743))+((cj0*x1744)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1747=cj5*cj5;
IkReal x1748=((1.0)*sj5);
IkReal x1749=(cj5*r20);
IkReal x1750=(r11*r21);
CheckValue<IkReal> x1751 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1748))+((cj0*x1749)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1751.valid){
continue;
}
CheckValue<IkReal> x1752=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1747*x1750))+((r10*r20*x1747))+(((-1.0)*cj5*r10*r21*x1748))+x1750+(((-1.0)*r11*x1748*x1749))+((r12*r22)))),-1);
if(!x1752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1751.value)+(((1.5707963267949)*(x1752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1753=IKsin(j4);
IkReal x1754=IKcos(j4);
IkReal x1755=((1.0)*sj0);
IkReal x1756=(cj5*r00);
IkReal x1757=(r11*sj5);
IkReal x1758=(cj5*r10);
IkReal x1759=(r21*sj5);
IkReal x1760=(cj5*r20);
IkReal x1761=(r01*sj5);
IkReal x1762=((1.0)*x1754);
IkReal x1763=((1.0)*x1753);
evalcond[0]=(((x1753*x1759))+(((-1.0)*x1760*x1763))+(((-1.0)*r22*x1762)));
evalcond[1]=((((-1.0)*x1759*x1762))+((x1754*x1760))+(((-1.0)*r22*x1763)));
evalcond[2]=(((x1753*x1757))+cj0+(((-1.0)*r12*x1762))+(((-1.0)*x1758*x1763)));
evalcond[3]=((((-1.0)*r02*x1762))+(((-1.0)*x1756*x1763))+((x1753*x1761))+(((-1.0)*x1755)));
evalcond[4]=(((x1754*x1756))+(((-1.0)*r02*x1763))+(((-1.0)*x1761*x1762))+(((-1.0)*cj0)));
evalcond[5]=(((x1754*x1758))+(((-1.0)*r12*x1763))+(((-1.0)*x1757*x1762))+(((-1.0)*x1755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1764=((1.0)*cj5);
CheckValue<IkReal> x1765=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1764)))),-1);
if(!x1765.valid){
continue;
}
CheckValue<IkReal> x1766 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1764))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1765.value)))+(x1766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1767=IKsin(j4);
IkReal x1768=IKcos(j4);
IkReal x1769=((1.0)*sj0);
IkReal x1770=(cj5*r00);
IkReal x1771=(r11*sj5);
IkReal x1772=(cj5*r10);
IkReal x1773=(r21*sj5);
IkReal x1774=(cj5*r20);
IkReal x1775=(r01*sj5);
IkReal x1776=((1.0)*x1768);
IkReal x1777=((1.0)*x1767);
evalcond[0]=(((x1767*x1773))+(((-1.0)*r22*x1776))+(((-1.0)*x1774*x1777)));
evalcond[1]=((((-1.0)*x1773*x1776))+(((-1.0)*r22*x1777))+((x1768*x1774)));
evalcond[2]=(((x1767*x1771))+(((-1.0)*x1772*x1777))+cj0+(((-1.0)*r12*x1776)));
evalcond[3]=(((x1767*x1775))+(((-1.0)*x1769))+(((-1.0)*r02*x1776))+(((-1.0)*x1770*x1777)));
evalcond[4]=((((-1.0)*r02*x1777))+(((-1.0)*x1775*x1776))+((x1768*x1770))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1769))+(((-1.0)*x1771*x1776))+((x1768*x1772))+(((-1.0)*r12*x1777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1778=((1.0)*cj5);
CheckValue<IkReal> x1779=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1778)))),-1);
if(!x1779.valid){
continue;
}
CheckValue<IkReal> x1780 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1779.value)))+(x1780.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1781=IKsin(j4);
IkReal x1782=IKcos(j4);
IkReal x1783=((1.0)*sj0);
IkReal x1784=(cj5*r00);
IkReal x1785=(r11*sj5);
IkReal x1786=(cj5*r10);
IkReal x1787=(r21*sj5);
IkReal x1788=(cj5*r20);
IkReal x1789=(r01*sj5);
IkReal x1790=((1.0)*x1782);
IkReal x1791=((1.0)*x1781);
evalcond[0]=((((-1.0)*r22*x1790))+(((-1.0)*x1788*x1791))+((x1781*x1787)));
evalcond[1]=(((x1782*x1788))+(((-1.0)*x1787*x1790))+(((-1.0)*r22*x1791)));
evalcond[2]=(cj0+(((-1.0)*r12*x1790))+(((-1.0)*x1786*x1791))+((x1781*x1785)));
evalcond[3]=((((-1.0)*x1783))+(((-1.0)*x1784*x1791))+(((-1.0)*r02*x1790))+((x1781*x1789)));
evalcond[4]=(((x1782*x1784))+(((-1.0)*x1789*x1790))+(((-1.0)*r02*x1791))+(((-1.0)*cj0)));
evalcond[5]=(((x1782*x1786))+(((-1.0)*x1783))+(((-1.0)*r12*x1791))+(((-1.0)*x1785*x1790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1792=(cj5*r01);
IkReal x1793=((4873.0)*cj1);
IkReal x1794=(r00*sj5);
IkReal x1795=(cj1*cj2);
IkReal x1796=((20000.0)*px);
IkReal x1797=(sj1*sj2);
IkReal x1798=((2558.0)*x1797);
CheckValue<IkReal> x1799=IKPowWithIntegerCheck(((((2247.0)*x1797))+(((-2247.0)*x1795))),-1);
if(!x1799.valid){
continue;
}
CheckValue<IkReal> x1800=IKPowWithIntegerCheck((x1797+(((-1.0)*x1795))),-1);
if(!x1800.valid){
continue;
}
if( IKabs(((x1799.value)*(((((-1.0)*x1792*x1793))+(((-1.0)*x1796*x1797))+(((-2558.0)*x1792*x1795))+(((-1.0)*x1793*x1794))+(((-2558.0)*x1794*x1795))+((x1794*x1798))+((x1792*x1798))+((x1795*x1796)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1800.value)*(((((-1.0)*x1794))+(((-1.0)*x1792)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1799.value)*(((((-1.0)*x1792*x1793))+(((-1.0)*x1796*x1797))+(((-2558.0)*x1792*x1795))+(((-1.0)*x1793*x1794))+(((-2558.0)*x1794*x1795))+((x1794*x1798))+((x1792*x1798))+((x1795*x1796))))))+IKsqr(((x1800.value)*(((((-1.0)*x1794))+(((-1.0)*x1792))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1799.value)*(((((-1.0)*x1792*x1793))+(((-1.0)*x1796*x1797))+(((-2558.0)*x1792*x1795))+(((-1.0)*x1793*x1794))+(((-2558.0)*x1794*x1795))+((x1794*x1798))+((x1792*x1798))+((x1795*x1796))))), ((x1800.value)*(((((-1.0)*x1794))+(((-1.0)*x1792))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1801=IKcos(j0);
IkReal x1802=IKsin(j0);
IkReal x1803=(cj5*r01);
IkReal x1804=(r00*sj5);
IkReal x1805=(cj5*r11);
IkReal x1806=((1.0)*cj2);
IkReal x1807=(r10*sj5);
IkReal x1808=((0.21325)*cj1*cj2);
IkReal x1809=(cj1*x1801);
IkReal x1810=(cj1*x1802);
IkReal x1811=(sj1*sj2*x1801);
IkReal x1812=(sj1*sj2*x1802);
evalcond[0]=(x1811+x1804+x1803+(((-1.0)*x1806*x1809)));
evalcond[1]=(x1812+x1807+x1805+(((-1.0)*x1806*x1810)));
evalcond[2]=(((x1801*x1808))+(((0.24365)*x1809))+(((-1.0)*px))+(((-0.11235)*x1802))+(((-0.08535)*x1803))+(((-0.08535)*x1804))+(((-0.21325)*x1811)));
evalcond[3]=(((x1802*x1808))+(((-1.0)*py))+(((0.24365)*x1810))+(((0.11235)*x1801))+(((-0.08535)*x1807))+(((-0.08535)*x1805))+(((-0.21325)*x1812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1813=((1.0)*cj5);
IkReal x1814=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1813)));
j4eval[0]=x1814;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1813))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1815=((1.0)*cj5);
IkReal x1816=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1815)));
j4eval[0]=x1816;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1815))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1817=((1.0)*sj0);
IkReal x1818=((1.0)*cj0);
IkReal x1819=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1819;
j4eval[1]=((IKabs(((((-1.0)*r02*x1818))+(((-1.0)*r12*x1817)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1817))+(((-1.0)*r01*sj5*x1818))))));
j4eval[2]=IKsign(x1819);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1820=((-1.0)*r20);
IkReal x1822 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1822)==0){
continue;
}
IkReal x1821=pow(x1822,-0.5);
CheckValue<IkReal> x1823 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1820),IKFAST_ATAN2_MAGTHRESH);
if(!x1823.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1823.value));
IkReal gconst79=(r21*x1821);
IkReal gconst80=(x1820*x1821);
CheckValue<IkReal> x1824 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1824.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1824.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1825=((-1.0)*r20);
IkReal x1826=x1821;
CheckValue<IkReal> x1828 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1825),IKFAST_ATAN2_MAGTHRESH);
if(!x1828.valid){
continue;
}
IkReal x1827=((-1.0)*(x1828.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1827;
IkReal gconst78=x1827;
IkReal gconst79=(r21*x1826);
IkReal gconst80=(x1825*x1826);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1829=((-1.0)*r20);
IkReal x1830=x1821;
CheckValue<IkReal> x1832 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1829),IKFAST_ATAN2_MAGTHRESH);
if(!x1832.valid){
continue;
}
IkReal x1831=((-1.0)*(x1832.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1831;
IkReal gconst78=x1831;
IkReal gconst79=(r21*x1830);
IkReal gconst80=(x1829*x1830);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1833=((-1.0)*r20);
IkReal x1834=x1821;
CheckValue<IkReal> x1836 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1833),IKFAST_ATAN2_MAGTHRESH);
if(!x1836.valid){
continue;
}
IkReal x1835=((-1.0)*(x1836.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1835;
IkReal gconst78=x1835;
IkReal gconst79=(r21*x1834);
IkReal gconst80=(x1833*x1834);
IkReal x1837=r22*r22;
CheckValue<IkReal> x1840=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1837))),-1);
if(!x1840.valid){
continue;
}
IkReal x1838=x1840.value;
IkReal x1839=((((2.0)*x1838*(r20*r20)*(r21*r21)))+((x1838*(r21*r21*r21*r21)))+((x1838*(r20*r20*r20*r20)))+x1837);
j4eval[0]=x1839;
j4eval[1]=IKsign(x1839);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1841=(sj1*sj2);
IkReal x1842=(gconst80*r20);
IkReal x1843=(gconst79*r21);
IkReal x1844=(cj1*cj2);
CheckValue<IkReal> x1845 = IKatan2WithCheck(IkReal((((r22*x1841))+(((-1.0)*r22*x1844)))),IkReal((((x1842*x1844))+((x1841*x1843))+(((-1.0)*x1841*x1842))+(((-1.0)*x1843*x1844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1845.valid){
continue;
}
CheckValue<IkReal> x1846=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1842*x1843))+(r22*r22)+(x1842*x1842)+(x1843*x1843))),-1);
if(!x1846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1845.value)+(((1.5707963267949)*(x1846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1847=IKsin(j4);
IkReal x1848=IKcos(j4);
IkReal x1849=(gconst79*r01);
IkReal x1850=(gconst79*r21);
IkReal x1851=((1.0)*cj2);
IkReal x1852=(gconst79*r11);
IkReal x1853=((1.0)*sj0);
IkReal x1854=(cj1*sj2);
IkReal x1855=((1.0)*x1848);
IkReal x1856=(gconst80*x1848);
IkReal x1857=((1.0)*x1847);
IkReal x1858=(gconst80*x1857);
evalcond[0]=(((x1847*x1850))+(((-1.0)*r22*x1855))+(((-1.0)*r20*x1858)));
evalcond[1]=(cj0+((x1847*x1852))+(((-1.0)*r12*x1855))+(((-1.0)*r10*x1858)));
evalcond[2]=(((x1847*x1849))+(((-1.0)*r00*x1858))+(((-1.0)*r02*x1855))+(((-1.0)*x1853)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x1857))+(((-1.0)*x1850*x1855))+((r20*x1856))+(((-1.0)*cj1*x1851)));
evalcond[4]=((((-1.0)*x1849*x1855))+((r00*x1856))+(((-1.0)*r02*x1857))+(((-1.0)*cj0*sj1*x1851))+(((-1.0)*cj0*x1854)));
evalcond[5]=((((-1.0)*sj0*sj1*x1851))+((r10*x1856))+(((-1.0)*x1852*x1855))+(((-1.0)*r12*x1857))+(((-1.0)*x1853*x1854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1859=((1.0)*gconst80);
CheckValue<IkReal> x1860 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*r20*sj0*x1859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1860.valid){
continue;
}
CheckValue<IkReal> x1861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1859))+(((-1.0)*gconst79*r10)))),-1);
if(!x1861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1860.value)+(((1.5707963267949)*(x1861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1862=IKsin(j4);
IkReal x1863=IKcos(j4);
IkReal x1864=(gconst79*r01);
IkReal x1865=(gconst79*r21);
IkReal x1866=((1.0)*cj2);
IkReal x1867=(gconst79*r11);
IkReal x1868=((1.0)*sj0);
IkReal x1869=(cj1*sj2);
IkReal x1870=((1.0)*x1863);
IkReal x1871=(gconst80*x1863);
IkReal x1872=((1.0)*x1862);
IkReal x1873=(gconst80*x1872);
evalcond[0]=((((-1.0)*r22*x1870))+((x1862*x1865))+(((-1.0)*r20*x1873)));
evalcond[1]=(cj0+(((-1.0)*r10*x1873))+((x1862*x1867))+(((-1.0)*r12*x1870)));
evalcond[2]=((((-1.0)*r02*x1870))+((x1862*x1864))+(((-1.0)*r00*x1873))+(((-1.0)*x1868)));
evalcond[3]=((((-1.0)*r22*x1872))+((sj1*sj2))+((r20*x1871))+(((-1.0)*cj1*x1866))+(((-1.0)*x1865*x1870)));
evalcond[4]=((((-1.0)*r02*x1872))+(((-1.0)*x1864*x1870))+(((-1.0)*cj0*x1869))+(((-1.0)*cj0*sj1*x1866))+((r00*x1871)));
evalcond[5]=((((-1.0)*x1867*x1870))+(((-1.0)*r12*x1872))+((r10*x1871))+(((-1.0)*x1868*x1869))+(((-1.0)*sj0*sj1*x1866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1874=((1.0)*gconst80);
CheckValue<IkReal> x1875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1874))+(((-1.0)*gconst79*r00)))),-1);
if(!x1875.valid){
continue;
}
CheckValue<IkReal> x1876 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1874))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1875.value)))+(x1876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1877=IKsin(j4);
IkReal x1878=IKcos(j4);
IkReal x1879=(gconst79*r01);
IkReal x1880=(gconst79*r21);
IkReal x1881=((1.0)*cj2);
IkReal x1882=(gconst79*r11);
IkReal x1883=((1.0)*sj0);
IkReal x1884=(cj1*sj2);
IkReal x1885=((1.0)*x1878);
IkReal x1886=(gconst80*x1878);
IkReal x1887=((1.0)*x1877);
IkReal x1888=(gconst80*x1887);
evalcond[0]=(((x1877*x1880))+(((-1.0)*r22*x1885))+(((-1.0)*r20*x1888)));
evalcond[1]=(((x1877*x1882))+cj0+(((-1.0)*r12*x1885))+(((-1.0)*r10*x1888)));
evalcond[2]=(((x1877*x1879))+(((-1.0)*r02*x1885))+(((-1.0)*r00*x1888))+(((-1.0)*x1883)));
evalcond[3]=((((-1.0)*x1880*x1885))+((r20*x1886))+(((-1.0)*cj1*x1881))+(((-1.0)*r22*x1887))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x1879*x1885))+(((-1.0)*cj0*sj1*x1881))+(((-1.0)*cj0*x1884))+(((-1.0)*r02*x1887))+((r00*x1886)));
evalcond[5]=((((-1.0)*x1882*x1885))+(((-1.0)*x1883*x1884))+(((-1.0)*sj0*sj1*x1881))+(((-1.0)*r12*x1887))+((r10*x1886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1889=((-1.0)*r21);
IkReal x1891 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1891)==0){
continue;
}
IkReal x1890=pow(x1891,-0.5);
CheckValue<IkReal> x1892 = IKatan2WithCheck(IkReal(x1889),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1892.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1892.value))));
IkReal gconst82=(x1889*x1890);
IkReal gconst83=((1.0)*r20*x1890);
CheckValue<IkReal> x1893 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1893.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1893.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1894=((-1.0)*r21);
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal(x1894),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
IkReal x1895=((1.0)*(x1897.value));
IkReal x1896=x1890;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1895)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1895)));
IkReal gconst82=(x1894*x1896);
IkReal gconst83=((1.0)*r20*x1896);
IkReal x1898=r22*r22;
IkReal x1899=((1.0)*x1898);
CheckValue<IkReal> x1903=IKPowWithIntegerCheck(((-1.0)+x1898),-1);
if(!x1903.valid){
continue;
}
IkReal x1900=x1903.value;
if((((1.0)+(((-1.0)*x1899)))) < -0.00001)
continue;
IkReal x1901=IKsqrt(((1.0)+(((-1.0)*x1899))));
IkReal x1902=(cj0*x1900*x1901);
j4eval[0]=((IKabs(((((-1.0)*x1899*x1902))+x1902)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1904=((-1.0)*r21);
CheckValue<IkReal> x1907 = IKatan2WithCheck(IkReal(x1904),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1907.valid){
continue;
}
IkReal x1905=((1.0)*(x1907.value));
IkReal x1906=x1890;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1905)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1905)));
IkReal gconst82=(x1904*x1906);
IkReal gconst83=((1.0)*r20*x1906);
IkReal x1908=r22*r22;
IkReal x1909=((1.0)*x1908);
CheckValue<IkReal> x1913=IKPowWithIntegerCheck(((-1.0)+x1908),-1);
if(!x1913.valid){
continue;
}
IkReal x1910=x1913.value;
if((((1.0)+(((-1.0)*x1909)))) < -0.00001)
continue;
IkReal x1911=IKsqrt(((1.0)+(((-1.0)*x1909))));
IkReal x1912=(sj0*x1910*x1911);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1912+(((-1.0)*x1909*x1912))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1914=((-1.0)*r21);
CheckValue<IkReal> x1917 = IKatan2WithCheck(IkReal(x1914),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1917.valid){
continue;
}
IkReal x1915=((1.0)*(x1917.value));
IkReal x1916=x1890;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1915)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1915)));
IkReal gconst82=(x1914*x1916);
IkReal gconst83=((1.0)*r20*x1916);
IkReal x1918=r22*r22;
IkReal x1919=(r12*sj0);
IkReal x1920=(cj0*r02);
CheckValue<IkReal> x1924=IKPowWithIntegerCheck(((-1.0)+x1918),-1);
if(!x1924.valid){
continue;
}
IkReal x1921=x1924.value;
if((((1.0)+(((-1.0)*x1918)))) < -0.00001)
continue;
IkReal x1922=IKsqrt(((1.0)+(((-1.0)*x1918))));
IkReal x1923=(r22*x1921*x1922);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1920))+(((-1.0)*x1919)))))+(IKabs((((x1919*x1923))+((x1920*x1923))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1925=((1.0)*sj0);
IkReal x1926=((1.0)*cj0);
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1927.valid){
continue;
}
CheckValue<IkReal> x1928 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1925))+(((-1.0)*r02*x1926)))),IkReal(((((-1.0)*gconst82*r11*x1925))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*gconst82*r01*x1926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1927.value)))+(x1928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1929=IKsin(j4);
IkReal x1930=IKcos(j4);
IkReal x1931=(gconst82*r11);
IkReal x1932=((1.0)*cj2);
IkReal x1933=((1.0)*sj0);
IkReal x1934=(cj1*sj2);
IkReal x1935=((1.0)*x1930);
IkReal x1936=(gconst83*x1930);
IkReal x1937=(gconst82*x1929);
IkReal x1938=((1.0)*x1929);
evalcond[0]=((((-1.0)*r22*x1935))+((r21*x1937))+(((-1.0)*gconst83*r20*x1938)));
evalcond[1]=(cj0+(((-1.0)*r12*x1935))+((x1929*x1931))+(((-1.0)*gconst83*r10*x1938)));
evalcond[2]=((((-1.0)*gconst83*r00*x1938))+((r01*x1937))+(((-1.0)*r02*x1935))+(((-1.0)*x1933)));
evalcond[3]=((((-1.0)*cj1*x1932))+((sj1*sj2))+(((-1.0)*r22*x1938))+(((-1.0)*gconst82*r21*x1935))+((r20*x1936)));
evalcond[4]=(((r00*x1936))+(((-1.0)*cj0*x1934))+(((-1.0)*gconst82*r01*x1935))+(((-1.0)*cj0*sj1*x1932))+(((-1.0)*r02*x1938)));
evalcond[5]=((((-1.0)*x1933*x1934))+(((-1.0)*r12*x1938))+(((-1.0)*x1931*x1935))+((r10*x1936))+(((-1.0)*sj0*sj1*x1932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1939=((1.0)*gconst83);
CheckValue<IkReal> x1940 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1940.valid){
continue;
}
CheckValue<IkReal> x1941=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1939)))),-1);
if(!x1941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1940.value)+(((1.5707963267949)*(x1941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1942=IKsin(j4);
IkReal x1943=IKcos(j4);
IkReal x1944=(gconst82*r11);
IkReal x1945=((1.0)*cj2);
IkReal x1946=((1.0)*sj0);
IkReal x1947=(cj1*sj2);
IkReal x1948=((1.0)*x1943);
IkReal x1949=(gconst83*x1943);
IkReal x1950=(gconst82*x1942);
IkReal x1951=((1.0)*x1942);
evalcond[0]=((((-1.0)*r22*x1948))+((r21*x1950))+(((-1.0)*gconst83*r20*x1951)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1951))+(((-1.0)*r12*x1948))+((x1942*x1944)));
evalcond[2]=((((-1.0)*x1946))+(((-1.0)*r02*x1948))+((r01*x1950))+(((-1.0)*gconst83*r00*x1951)));
evalcond[3]=((((-1.0)*r22*x1951))+((r20*x1949))+(((-1.0)*gconst82*r21*x1948))+((sj1*sj2))+(((-1.0)*cj1*x1945)));
evalcond[4]=((((-1.0)*cj0*x1947))+(((-1.0)*r02*x1951))+(((-1.0)*gconst82*r01*x1948))+((r00*x1949))+(((-1.0)*cj0*sj1*x1945)));
evalcond[5]=((((-1.0)*sj0*sj1*x1945))+((r10*x1949))+(((-1.0)*x1944*x1948))+(((-1.0)*x1946*x1947))+(((-1.0)*r12*x1951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1952=((1.0)*gconst83);
CheckValue<IkReal> x1953 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1952))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1953.valid){
continue;
}
CheckValue<IkReal> x1954=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x1952)))),-1);
if(!x1954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1953.value)+(((1.5707963267949)*(x1954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1955=IKsin(j4);
IkReal x1956=IKcos(j4);
IkReal x1957=(gconst82*r11);
IkReal x1958=((1.0)*cj2);
IkReal x1959=((1.0)*sj0);
IkReal x1960=(cj1*sj2);
IkReal x1961=((1.0)*x1956);
IkReal x1962=(gconst83*x1956);
IkReal x1963=(gconst82*x1955);
IkReal x1964=((1.0)*x1955);
evalcond[0]=((((-1.0)*r22*x1961))+((r21*x1963))+(((-1.0)*gconst83*r20*x1964)));
evalcond[1]=(cj0+((x1955*x1957))+(((-1.0)*gconst83*r10*x1964))+(((-1.0)*r12*x1961)));
evalcond[2]=((((-1.0)*x1959))+(((-1.0)*r02*x1961))+((r01*x1963))+(((-1.0)*gconst83*r00*x1964)));
evalcond[3]=(((r20*x1962))+(((-1.0)*r22*x1964))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1961))+(((-1.0)*cj1*x1958)));
evalcond[4]=((((-1.0)*cj0*x1960))+(((-1.0)*cj0*sj1*x1958))+(((-1.0)*r02*x1964))+((r00*x1962))+(((-1.0)*gconst82*r01*x1961)));
evalcond[5]=((((-1.0)*x1957*x1961))+(((-1.0)*x1959*x1960))+((r10*x1962))+(((-1.0)*r12*x1964))+(((-1.0)*sj0*sj1*x1958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1965=((-1.0)*r10);
IkReal x1967 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1967)==0){
continue;
}
IkReal x1966=pow(x1967,-0.5);
CheckValue<IkReal> x1968 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1965),IKFAST_ATAN2_MAGTHRESH);
if(!x1968.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1968.value));
IkReal gconst85=(r11*x1966);
IkReal gconst86=(x1965*x1966);
CheckValue<IkReal> x1969 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1969.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1969.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1970=((-1.0)*r10);
IkReal x1971=x1966;
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1970),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
IkReal x1972=((-1.0)*(x1973.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1972;
IkReal gconst84=x1972;
IkReal gconst85=(r11*x1971);
IkReal gconst86=(x1970*x1971);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1974=((1.0)*sj0);
IkReal x1975=((1.0)*gconst85);
CheckValue<IkReal> x1976 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1974)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x1975))+(((-1.0)*gconst85*r11*x1974))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1976.valid){
continue;
}
CheckValue<IkReal> x1977=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1975)))),-1);
if(!x1977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1976.value)+(((1.5707963267949)*(x1977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1978=IKsin(j4);
IkReal x1979=IKcos(j4);
IkReal x1980=(gconst85*r21);
IkReal x1981=(gconst86*r00);
IkReal x1982=(gconst86*r10);
IkReal x1983=((1.0)*cj2);
IkReal x1984=(gconst85*r11);
IkReal x1985=(gconst85*r01);
IkReal x1986=((1.0)*sj0);
IkReal x1987=(gconst86*r20);
IkReal x1988=(cj1*sj2);
IkReal x1989=((1.0)*x1979);
IkReal x1990=((1.0)*x1978);
evalcond[0]=(((x1978*x1980))+(((-1.0)*x1987*x1990))+(((-1.0)*r22*x1989)));
evalcond[1]=(cj0+(((-1.0)*x1982*x1990))+((x1978*x1984))+(((-1.0)*r12*x1989)));
evalcond[2]=((((-1.0)*x1986))+(((-1.0)*r02*x1989))+(((-1.0)*x1981*x1990))+((x1978*x1985)));
evalcond[3]=((((-1.0)*x1980*x1989))+((sj1*sj2))+((x1979*x1987))+(((-1.0)*cj1*x1983))+(((-1.0)*r22*x1990)));
evalcond[4]=((((-1.0)*x1985*x1989))+(((-1.0)*r02*x1990))+((x1979*x1981))+(((-1.0)*cj0*sj1*x1983))+(((-1.0)*cj0*x1988)));
evalcond[5]=((((-1.0)*x1986*x1988))+(((-1.0)*x1984*x1989))+((x1979*x1982))+(((-1.0)*sj0*sj1*x1983))+(((-1.0)*r12*x1990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1991=((1.0)*gconst86);
CheckValue<IkReal> x1992=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1991))+(((-1.0)*gconst85*r00)))),-1);
if(!x1992.valid){
continue;
}
CheckValue<IkReal> x1993 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1991))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1992.value)))+(x1993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1994=IKsin(j4);
IkReal x1995=IKcos(j4);
IkReal x1996=(gconst85*r21);
IkReal x1997=(gconst86*r00);
IkReal x1998=(gconst86*r10);
IkReal x1999=((1.0)*cj2);
IkReal x2000=(gconst85*r11);
IkReal x2001=(gconst85*r01);
IkReal x2002=((1.0)*sj0);
IkReal x2003=(gconst86*r20);
IkReal x2004=(cj1*sj2);
IkReal x2005=((1.0)*x1995);
IkReal x2006=((1.0)*x1994);
evalcond[0]=((((-1.0)*r22*x2005))+(((-1.0)*x2003*x2006))+((x1994*x1996)));
evalcond[1]=((((-1.0)*x1998*x2006))+cj0+(((-1.0)*r12*x2005))+((x1994*x2000)));
evalcond[2]=(((x1994*x2001))+(((-1.0)*r02*x2005))+(((-1.0)*x2002))+(((-1.0)*x1997*x2006)));
evalcond[3]=((((-1.0)*r22*x2006))+((sj1*sj2))+((x1995*x2003))+(((-1.0)*x1996*x2005))+(((-1.0)*cj1*x1999)));
evalcond[4]=((((-1.0)*cj0*sj1*x1999))+((x1995*x1997))+(((-1.0)*x2001*x2005))+(((-1.0)*r02*x2006))+(((-1.0)*cj0*x2004)));
evalcond[5]=((((-1.0)*sj0*sj1*x1999))+(((-1.0)*r12*x2006))+(((-1.0)*x2002*x2004))+((x1995*x1998))+(((-1.0)*x2000*x2005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2007=((-1.0)*r11);
IkReal x2009 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2009)==0){
continue;
}
IkReal x2008=pow(x2009,-0.5);
CheckValue<IkReal> x2010 = IKatan2WithCheck(IkReal(x2007),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2010.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2010.value))));
IkReal gconst88=(x2007*x2008);
IkReal gconst89=((1.0)*r10*x2008);
CheckValue<IkReal> x2011 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2011.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2011.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2012=((-1.0)*r11);
CheckValue<IkReal> x2015 = IKatan2WithCheck(IkReal(x2012),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2015.valid){
continue;
}
IkReal x2013=((1.0)*(x2015.value));
IkReal x2014=x2008;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2013)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2013)));
IkReal gconst88=(x2012*x2014);
IkReal gconst89=((1.0)*r10*x2014);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2016=((-1.0)*r11);
CheckValue<IkReal> x2019 = IKatan2WithCheck(IkReal(x2016),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2019.valid){
continue;
}
IkReal x2017=((1.0)*(x2019.value));
IkReal x2018=x2008;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2017)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2017)));
IkReal gconst88=(x2016*x2018);
IkReal gconst89=((1.0)*r10*x2018);
IkReal x2020=r12*r12;
IkReal x2021=((1.0)*sj0);
IkReal x2022=(cj0*r02);
IkReal x2023=x2008;
j4eval[0]=((IKabs(((((-1.0)*x2021*x2023))+((sj0*x2020*x2023))+((r12*x2022*x2023)))))+(IKabs(((((-1.0)*r12*x2021))+(((-1.0)*x2022))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2024=((-1.0)*r11);
CheckValue<IkReal> x2027 = IKatan2WithCheck(IkReal(x2024),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2027.valid){
continue;
}
IkReal x2025=((1.0)*(x2027.value));
IkReal x2026=x2008;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2025)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2025)));
IkReal gconst88=(x2024*x2026);
IkReal gconst89=((1.0)*r10*x2026);
IkReal x2028=r12*r12;
IkReal x2029=(cj1*cj2*r22);
IkReal x2030=(r22*sj1*sj2);
CheckValue<IkReal> x2034=IKPowWithIntegerCheck(((-1.0)+x2028),-1);
if(!x2034.valid){
continue;
}
IkReal x2031=x2034.value;
if((((1.0)+(((-1.0)*x2028)))) < -0.00001)
continue;
IkReal x2032=IKsqrt(((1.0)+(((-1.0)*x2028))));
IkReal x2033=(r12*x2031*x2032);
j4eval[0]=((IKabs((((x2029*x2033))+(((-1.0)*x2030*x2033)))))+(IKabs((x2030+(((-1.0)*x2029))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2035=(cj1*cj2);
IkReal x2036=(gconst89*r20);
IkReal x2037=(gconst88*r21);
IkReal x2038=(sj1*sj2);
CheckValue<IkReal> x2039=IKPowWithIntegerCheck(IKsign(((x2036*x2036)+(r22*r22)+(((-2.0)*x2036*x2037))+(x2037*x2037))),-1);
if(!x2039.valid){
continue;
}
CheckValue<IkReal> x2040 = IKatan2WithCheck(IkReal((((r22*x2038))+(((-1.0)*r22*x2035)))),IkReal(((((-1.0)*x2035*x2037))+((x2035*x2036))+(((-1.0)*x2036*x2038))+((x2037*x2038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2039.value)))+(x2040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2041=IKsin(j4);
IkReal x2042=IKcos(j4);
IkReal x2043=((1.0)*sj0);
IkReal x2044=((1.0)*cj2);
IkReal x2045=(gconst89*r20);
IkReal x2046=(gconst89*r10);
IkReal x2047=(gconst89*r00);
IkReal x2048=(cj1*sj2);
IkReal x2049=((1.0)*x2042);
IkReal x2050=((1.0)*x2041);
IkReal x2051=(gconst88*x2041);
evalcond[0]=((((-1.0)*r22*x2049))+(((-1.0)*x2045*x2050))+((r21*x2051)));
evalcond[1]=(((r11*x2051))+cj0+(((-1.0)*x2046*x2050))+(((-1.0)*r12*x2049)));
evalcond[2]=(((r01*x2051))+(((-1.0)*x2043))+(((-1.0)*r02*x2049))+(((-1.0)*x2047*x2050)));
evalcond[3]=(((x2042*x2045))+(((-1.0)*r22*x2050))+((sj1*sj2))+(((-1.0)*cj1*x2044))+(((-1.0)*gconst88*r21*x2049)));
evalcond[4]=((((-1.0)*cj0*x2048))+((x2042*x2047))+(((-1.0)*r02*x2050))+(((-1.0)*cj0*sj1*x2044))+(((-1.0)*gconst88*r01*x2049)));
evalcond[5]=((((-1.0)*cj2*sj1*x2043))+((x2042*x2046))+(((-1.0)*r12*x2050))+(((-1.0)*x2043*x2048))+(((-1.0)*gconst88*r11*x2049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2052=((1.0)*sj0);
IkReal x2053=((1.0)*cj0);
CheckValue<IkReal> x2054 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2052))+(((-1.0)*r02*x2053)))),IkReal(((((-1.0)*gconst88*r01*x2053))+(((-1.0)*gconst88*r11*x2052))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2054.valid){
continue;
}
CheckValue<IkReal> x2055=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2054.value)+(((1.5707963267949)*(x2055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2056=IKsin(j4);
IkReal x2057=IKcos(j4);
IkReal x2058=((1.0)*sj0);
IkReal x2059=((1.0)*cj2);
IkReal x2060=(gconst89*r20);
IkReal x2061=(gconst89*r10);
IkReal x2062=(gconst89*r00);
IkReal x2063=(cj1*sj2);
IkReal x2064=((1.0)*x2057);
IkReal x2065=((1.0)*x2056);
IkReal x2066=(gconst88*x2056);
evalcond[0]=(((r21*x2066))+(((-1.0)*r22*x2064))+(((-1.0)*x2060*x2065)));
evalcond[1]=((((-1.0)*r12*x2064))+cj0+((r11*x2066))+(((-1.0)*x2061*x2065)));
evalcond[2]=((((-1.0)*r02*x2064))+(((-1.0)*x2062*x2065))+((r01*x2066))+(((-1.0)*x2058)));
evalcond[3]=((((-1.0)*gconst88*r21*x2064))+(((-1.0)*cj1*x2059))+(((-1.0)*r22*x2065))+((sj1*sj2))+((x2057*x2060)));
evalcond[4]=((((-1.0)*cj0*x2063))+(((-1.0)*r02*x2065))+((x2057*x2062))+(((-1.0)*gconst88*r01*x2064))+(((-1.0)*cj0*sj1*x2059)));
evalcond[5]=((((-1.0)*r12*x2065))+(((-1.0)*x2058*x2063))+(((-1.0)*cj2*sj1*x2058))+((x2057*x2061))+(((-1.0)*gconst88*r11*x2064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2067=((1.0)*gconst89);
CheckValue<IkReal> x2068 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2067))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2068.valid){
continue;
}
CheckValue<IkReal> x2069=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2067))+(((-1.0)*gconst88*r00)))),-1);
if(!x2069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2068.value)+(((1.5707963267949)*(x2069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2070=IKsin(j4);
IkReal x2071=IKcos(j4);
IkReal x2072=((1.0)*sj0);
IkReal x2073=((1.0)*cj2);
IkReal x2074=(gconst89*r20);
IkReal x2075=(gconst89*r10);
IkReal x2076=(gconst89*r00);
IkReal x2077=(cj1*sj2);
IkReal x2078=((1.0)*x2071);
IkReal x2079=((1.0)*x2070);
IkReal x2080=(gconst88*x2070);
evalcond[0]=((((-1.0)*r22*x2078))+(((-1.0)*x2074*x2079))+((r21*x2080)));
evalcond[1]=(cj0+(((-1.0)*r12*x2078))+((r11*x2080))+(((-1.0)*x2075*x2079)));
evalcond[2]=((((-1.0)*r02*x2078))+(((-1.0)*x2076*x2079))+(((-1.0)*x2072))+((r01*x2080)));
evalcond[3]=((((-1.0)*gconst88*r21*x2078))+(((-1.0)*r22*x2079))+((sj1*sj2))+((x2071*x2074))+(((-1.0)*cj1*x2073)));
evalcond[4]=((((-1.0)*r02*x2079))+((x2071*x2076))+(((-1.0)*cj0*sj1*x2073))+(((-1.0)*gconst88*r01*x2078))+(((-1.0)*cj0*x2077)));
evalcond[5]=((((-1.0)*r12*x2079))+((x2071*x2075))+(((-1.0)*gconst88*r11*x2078))+(((-1.0)*x2072*x2077))+(((-1.0)*cj2*sj1*x2072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2081=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2081;
j4eval[1]=IKsign(x2081);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2082=((1.0)*cj5);
IkReal x2083=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2082)));
j4eval[0]=x2083;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2082))+((r21*sj5))))));
j4eval[2]=IKsign(x2083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2084=cj5*cj5;
IkReal x2085=r11*r11;
IkReal x2086=(r11*sj5);
IkReal x2087=(cj5*r10);
IkReal x2088=((r12*r12)+(((-1.0)*x2084*x2085))+x2085+((x2084*(r10*r10)))+(((-2.0)*x2086*x2087)));
j4eval[0]=x2088;
j4eval[1]=IKsign(x2088);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2086))+x2087))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2089=cj5*cj5;
IkReal x2090=r11*r11;
IkReal x2091=(cj5*r10);
IkReal x2092=(r11*sj5);
CheckValue<IkReal> x2093=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2090+((x2089*(r10*r10)))+(((-2.0)*x2091*x2092))+(((-1.0)*x2089*x2090)))),-1);
if(!x2093.valid){
continue;
}
CheckValue<IkReal> x2094 = IKatan2WithCheck(IkReal((x2091+(((-1.0)*x2092)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2093.value)))+(x2094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2095=IKsin(j4);
IkReal x2096=IKcos(j4);
IkReal x2097=(cj5*r10);
IkReal x2098=(r01*sj5);
IkReal x2099=((1.0)*cj2);
IkReal x2100=(cj5*r00);
IkReal x2101=(cj5*r20);
IkReal x2102=((1.0)*x2096);
IkReal x2103=((1.0)*x2095);
IkReal x2104=(sj5*x2095);
evalcond[0]=((((-1.0)*r22*x2102))+((r21*x2104))+(((-1.0)*x2101*x2103)));
evalcond[1]=((((-1.0)*r02*x2102))+(((-1.0)*x2100*x2103))+((x2095*x2098)));
evalcond[2]=((((-1.0)*r12*x2103))+((x2096*x2097))+(((-1.0)*r11*sj5*x2102)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2102))+((r11*x2104))+(((-1.0)*x2097*x2103)));
evalcond[4]=((((-1.0)*r22*x2103))+((sj1*sj2))+(((-1.0)*r21*sj5*x2102))+(((-1.0)*cj1*x2099))+((x2096*x2101)));
evalcond[5]=((((-1.0)*r02*x2103))+(((-1.0)*cj1*sj2))+((x2096*x2100))+(((-1.0)*x2098*x2102))+(((-1.0)*sj1*x2099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2105=((1.0)*cj5);
CheckValue<IkReal> x2106=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2105)))),-1);
if(!x2106.valid){
continue;
}
CheckValue<IkReal> x2107 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2106.value)))+(x2107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2108=IKsin(j4);
IkReal x2109=IKcos(j4);
IkReal x2110=(cj5*r10);
IkReal x2111=(r01*sj5);
IkReal x2112=((1.0)*cj2);
IkReal x2113=(cj5*r00);
IkReal x2114=(cj5*r20);
IkReal x2115=((1.0)*x2109);
IkReal x2116=((1.0)*x2108);
IkReal x2117=(sj5*x2108);
evalcond[0]=((((-1.0)*x2114*x2116))+((r21*x2117))+(((-1.0)*r22*x2115)));
evalcond[1]=((((-1.0)*r02*x2115))+((x2108*x2111))+(((-1.0)*x2113*x2116)));
evalcond[2]=(((x2109*x2110))+(((-1.0)*r11*sj5*x2115))+(((-1.0)*r12*x2116)));
evalcond[3]=((1.0)+(((-1.0)*x2110*x2116))+(((-1.0)*r12*x2115))+((r11*x2117)));
evalcond[4]=(((x2109*x2114))+(((-1.0)*r21*sj5*x2115))+((sj1*sj2))+(((-1.0)*r22*x2116))+(((-1.0)*cj1*x2112)));
evalcond[5]=(((x2109*x2113))+(((-1.0)*sj1*x2112))+(((-1.0)*cj1*sj2))+(((-1.0)*x2111*x2115))+(((-1.0)*r02*x2116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2118=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2118.valid){
continue;
}
CheckValue<IkReal> x2119 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2118.value)))+(x2119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2120=IKsin(j4);
IkReal x2121=IKcos(j4);
IkReal x2122=(cj5*r10);
IkReal x2123=(r01*sj5);
IkReal x2124=((1.0)*cj2);
IkReal x2125=(cj5*r00);
IkReal x2126=(cj5*r20);
IkReal x2127=((1.0)*x2121);
IkReal x2128=((1.0)*x2120);
IkReal x2129=(sj5*x2120);
evalcond[0]=((((-1.0)*r22*x2127))+((r21*x2129))+(((-1.0)*x2126*x2128)));
evalcond[1]=((((-1.0)*x2125*x2128))+(((-1.0)*r02*x2127))+((x2120*x2123)));
evalcond[2]=(((x2121*x2122))+(((-1.0)*r12*x2128))+(((-1.0)*r11*sj5*x2127)));
evalcond[3]=((1.0)+(((-1.0)*x2122*x2128))+((r11*x2129))+(((-1.0)*r12*x2127)));
evalcond[4]=((((-1.0)*r22*x2128))+((sj1*sj2))+(((-1.0)*cj1*x2124))+((x2121*x2126))+(((-1.0)*r21*sj5*x2127)));
evalcond[5]=((((-1.0)*r02*x2128))+(((-1.0)*cj1*sj2))+((x2121*x2125))+(((-1.0)*sj1*x2124))+(((-1.0)*x2123*x2127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2130=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2130;
j4eval[1]=IKsign(x2130);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2131=((1.0)*cj5);
IkReal x2132=((((-1.0)*r21*x2131))+(((-1.0)*r20*sj5)));
j4eval[0]=x2132;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2131))))));
j4eval[2]=IKsign(x2132);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2133=cj5*cj5;
IkReal x2134=r11*r11;
IkReal x2135=(cj5*r10);
IkReal x2136=(r11*sj5);
IkReal x2137=((((2.0)*x2135*x2136))+(((-1.0)*(r12*r12)))+(((-1.0)*x2133*(r10*r10)))+(((-1.0)*x2134))+((x2133*x2134)));
j4eval[0]=x2137;
j4eval[1]=((IKabs(r12))+(IKabs((x2135+(((-1.0)*x2136))))));
j4eval[2]=IKsign(x2137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2138=cj5*cj5;
IkReal x2139=r11*r11;
IkReal x2140=(cj5*r10);
IkReal x2141=(r11*sj5);
CheckValue<IkReal> x2142=IKPowWithIntegerCheck(IKsign(((((2.0)*x2140*x2141))+(((-1.0)*(r12*r12)))+((x2138*x2139))+(((-1.0)*x2139))+(((-1.0)*x2138*(r10*r10))))),-1);
if(!x2142.valid){
continue;
}
CheckValue<IkReal> x2143 = IKatan2WithCheck(IkReal(((((-1.0)*x2141))+x2140)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2142.value)))+(x2143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2144=IKsin(j4);
IkReal x2145=IKcos(j4);
IkReal x2146=(cj5*r10);
IkReal x2147=(r01*sj5);
IkReal x2148=(cj5*r00);
IkReal x2149=(cj5*r20);
IkReal x2150=((1.0)*x2145);
IkReal x2151=((1.0)*x2144);
IkReal x2152=(sj5*x2144);
evalcond[0]=((((-1.0)*x2149*x2151))+(((-1.0)*r22*x2150))+((r21*x2152)));
evalcond[1]=((((-1.0)*x2148*x2151))+(((-1.0)*r02*x2150))+((x2144*x2147)));
evalcond[2]=(((x2145*x2146))+(((-1.0)*r11*sj5*x2150))+(((-1.0)*r12*x2151)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2150))+(((-1.0)*x2146*x2151))+((r11*x2152)));
evalcond[4]=(((cj2*sj1))+((x2145*x2148))+((cj1*sj2))+(((-1.0)*r02*x2151))+(((-1.0)*x2147*x2150)));
evalcond[5]=(((x2145*x2149))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2151))+(((-1.0)*r21*sj5*x2150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2153=((1.0)*cj5);
CheckValue<IkReal> x2154 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2153))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2154.valid){
continue;
}
CheckValue<IkReal> x2155=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2153))+(((-1.0)*r20*sj5)))),-1);
if(!x2155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2154.value)+(((1.5707963267949)*(x2155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2156=IKsin(j4);
IkReal x2157=IKcos(j4);
IkReal x2158=(cj5*r10);
IkReal x2159=(r01*sj5);
IkReal x2160=(cj5*r00);
IkReal x2161=(cj5*r20);
IkReal x2162=((1.0)*x2157);
IkReal x2163=((1.0)*x2156);
IkReal x2164=(sj5*x2156);
evalcond[0]=(((r21*x2164))+(((-1.0)*x2161*x2163))+(((-1.0)*r22*x2162)));
evalcond[1]=((((-1.0)*x2160*x2163))+((x2156*x2159))+(((-1.0)*r02*x2162)));
evalcond[2]=((((-1.0)*r11*sj5*x2162))+(((-1.0)*r12*x2163))+((x2157*x2158)));
evalcond[3]=((-1.0)+(((-1.0)*x2158*x2163))+(((-1.0)*r12*x2162))+((r11*x2164)));
evalcond[4]=(((cj2*sj1))+((x2157*x2160))+((cj1*sj2))+(((-1.0)*x2159*x2162))+(((-1.0)*r02*x2163)));
evalcond[5]=(((x2157*x2161))+(((-1.0)*r21*sj5*x2162))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2165 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2165.valid){
continue;
}
CheckValue<IkReal> x2166=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2165.value)+(((1.5707963267949)*(x2166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2167=IKsin(j4);
IkReal x2168=IKcos(j4);
IkReal x2169=(cj5*r10);
IkReal x2170=(r01*sj5);
IkReal x2171=(cj5*r00);
IkReal x2172=(cj5*r20);
IkReal x2173=((1.0)*x2168);
IkReal x2174=((1.0)*x2167);
IkReal x2175=(sj5*x2167);
evalcond[0]=(((r21*x2175))+(((-1.0)*x2172*x2174))+(((-1.0)*r22*x2173)));
evalcond[1]=((((-1.0)*x2171*x2174))+(((-1.0)*r02*x2173))+((x2167*x2170)));
evalcond[2]=(((x2168*x2169))+(((-1.0)*r11*sj5*x2173))+(((-1.0)*r12*x2174)));
evalcond[3]=((-1.0)+((r11*x2175))+(((-1.0)*x2169*x2174))+(((-1.0)*r12*x2173)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2170*x2173))+((cj1*sj2))+(((-1.0)*r02*x2174))+((x2168*x2171)));
evalcond[5]=((((-1.0)*r21*sj5*x2173))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2168*x2172))+(((-1.0)*r22*x2174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2176=((-1.0)*r00);
IkReal x2178 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2178)==0){
continue;
}
IkReal x2177=pow(x2178,-0.5);
CheckValue<IkReal> x2179 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2176),IKFAST_ATAN2_MAGTHRESH);
if(!x2179.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2179.value));
IkReal gconst91=(r01*x2177);
IkReal gconst92=(x2176*x2177);
CheckValue<IkReal> x2180 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2180.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2180.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2181=((-1.0)*r00);
IkReal x2182=x2177;
CheckValue<IkReal> x2184 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2181),IKFAST_ATAN2_MAGTHRESH);
if(!x2184.valid){
continue;
}
IkReal x2183=((-1.0)*(x2184.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2183;
IkReal gconst90=x2183;
IkReal gconst91=(r01*x2182);
IkReal gconst92=(x2181*x2182);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2185=((1.0)*sj0);
IkReal x2186=((1.0)*cj0);
CheckValue<IkReal> x2187 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2186))+(((-1.0)*r12*x2185)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2185))+(((-1.0)*gconst91*r01*x2186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2187.valid){
continue;
}
CheckValue<IkReal> x2188=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2187.value)+(((1.5707963267949)*(x2188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2189=IKsin(j4);
IkReal x2190=IKcos(j4);
IkReal x2191=((1.0)*cj2);
IkReal x2192=(gconst92*r00);
IkReal x2193=(gconst92*r20);
IkReal x2194=((1.0)*sj0);
IkReal x2195=(gconst92*r10);
IkReal x2196=(cj1*sj2);
IkReal x2197=((1.0)*x2190);
IkReal x2198=(gconst91*x2189);
IkReal x2199=((1.0)*x2189);
evalcond[0]=((((-1.0)*x2193*x2199))+((r21*x2198))+(((-1.0)*r22*x2197)));
evalcond[1]=((((-1.0)*x2195*x2199))+cj0+((r11*x2198))+(((-1.0)*r12*x2197)));
evalcond[2]=((((-1.0)*x2192*x2199))+(((-1.0)*r02*x2197))+(((-1.0)*x2194))+((r01*x2198)));
evalcond[3]=((((-1.0)*gconst91*r21*x2197))+((sj1*sj2))+((x2190*x2193))+(((-1.0)*r22*x2199))+(((-1.0)*cj1*x2191)));
evalcond[4]=((((-1.0)*cj0*sj1*x2191))+((x2190*x2192))+(((-1.0)*r02*x2199))+(((-1.0)*cj0*x2196))+(((-1.0)*gconst91*r01*x2197)));
evalcond[5]=((((-1.0)*sj0*sj1*x2191))+(((-1.0)*x2194*x2196))+((x2190*x2195))+(((-1.0)*r12*x2199))+(((-1.0)*gconst91*r11*x2197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2200=((1.0)*gconst92);
CheckValue<IkReal> x2201 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2200))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2201.valid){
continue;
}
CheckValue<IkReal> x2202=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2200)))),-1);
if(!x2202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2201.value)+(((1.5707963267949)*(x2202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2203=IKsin(j4);
IkReal x2204=IKcos(j4);
IkReal x2205=((1.0)*cj2);
IkReal x2206=(gconst92*r00);
IkReal x2207=(gconst92*r20);
IkReal x2208=((1.0)*sj0);
IkReal x2209=(gconst92*r10);
IkReal x2210=(cj1*sj2);
IkReal x2211=((1.0)*x2204);
IkReal x2212=(gconst91*x2203);
IkReal x2213=((1.0)*x2203);
evalcond[0]=((((-1.0)*x2207*x2213))+(((-1.0)*r22*x2211))+((r21*x2212)));
evalcond[1]=(cj0+(((-1.0)*r12*x2211))+((r11*x2212))+(((-1.0)*x2209*x2213)));
evalcond[2]=(((r01*x2212))+(((-1.0)*x2208))+(((-1.0)*x2206*x2213))+(((-1.0)*r02*x2211)));
evalcond[3]=((((-1.0)*cj1*x2205))+(((-1.0)*r22*x2213))+((sj1*sj2))+((x2204*x2207))+(((-1.0)*gconst91*r21*x2211)));
evalcond[4]=(((x2204*x2206))+(((-1.0)*gconst91*r01*x2211))+(((-1.0)*cj0*sj1*x2205))+(((-1.0)*r02*x2213))+(((-1.0)*cj0*x2210)));
evalcond[5]=((((-1.0)*x2208*x2210))+(((-1.0)*r12*x2213))+((x2204*x2209))+(((-1.0)*gconst91*r11*x2211))+(((-1.0)*sj0*sj1*x2205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2214=((-1.0)*r01);
IkReal x2216 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2216)==0){
continue;
}
IkReal x2215=pow(x2216,-0.5);
CheckValue<IkReal> x2217 = IKatan2WithCheck(IkReal(x2214),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2217.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2217.value))));
IkReal gconst94=(x2214*x2215);
IkReal gconst95=((1.0)*r00*x2215);
CheckValue<IkReal> x2218 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2218.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2218.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2219=((-1.0)*r01);
CheckValue<IkReal> x2222 = IKatan2WithCheck(IkReal(x2219),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2222.valid){
continue;
}
IkReal x2220=((1.0)*(x2222.value));
IkReal x2221=x2215;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2220)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2220)));
IkReal gconst94=(x2219*x2221);
IkReal gconst95=((1.0)*r00*x2221);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2223=((-1.0)*r01);
CheckValue<IkReal> x2226 = IKatan2WithCheck(IkReal(x2223),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2226.valid){
continue;
}
IkReal x2224=((1.0)*(x2226.value));
IkReal x2225=x2215;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2224)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2224)));
IkReal gconst94=(x2223*x2225);
IkReal gconst95=((1.0)*r00*x2225);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2227=((-1.0)*r01);
CheckValue<IkReal> x2230 = IKatan2WithCheck(IkReal(x2227),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2230.valid){
continue;
}
IkReal x2228=((1.0)*(x2230.value));
IkReal x2229=x2215;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2228)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2228)));
IkReal gconst94=(x2227*x2229);
IkReal gconst95=((1.0)*r00*x2229);
IkReal x2231=r02*r02;
IkReal x2232=(r12*sj0);
IkReal x2233=((1.0)*cj0);
IkReal x2234=x2215;
j4eval[0]=((IKabs((((cj0*x2231*x2234))+(((-1.0)*x2233*x2234))+((r02*x2232*x2234)))))+(IKabs(((((-1.0)*r02*x2233))+(((-1.0)*x2232))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2235=((1.0)*sj0);
IkReal x2236=((1.0)*cj0);
CheckValue<IkReal> x2237=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2237.valid){
continue;
}
CheckValue<IkReal> x2238 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2236))+(((-1.0)*r12*x2235)))),IkReal(((((-1.0)*gconst94*r11*x2235))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2236))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2237.value)))+(x2238.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2239=IKsin(j4);
IkReal x2240=IKcos(j4);
IkReal x2241=(gconst94*r11);
IkReal x2242=((1.0)*cj2);
IkReal x2243=(gconst94*r21);
IkReal x2244=((1.0)*sj0);
IkReal x2245=(gconst94*r01);
IkReal x2246=(cj1*sj2);
IkReal x2247=((1.0)*x2240);
IkReal x2248=(gconst95*x2240);
IkReal x2249=((1.0)*x2239);
IkReal x2250=(gconst95*x2249);
evalcond[0]=((((-1.0)*r22*x2247))+((x2239*x2243))+(((-1.0)*r20*x2250)));
evalcond[1]=(cj0+(((-1.0)*r10*x2250))+(((-1.0)*r12*x2247))+((x2239*x2241)));
evalcond[2]=((((-1.0)*r02*x2247))+(((-1.0)*r00*x2250))+(((-1.0)*x2244))+((x2239*x2245)));
evalcond[3]=((((-1.0)*r22*x2249))+((sj1*sj2))+((r20*x2248))+(((-1.0)*x2243*x2247))+(((-1.0)*cj1*x2242)));
evalcond[4]=((((-1.0)*r02*x2249))+(((-1.0)*cj0*x2246))+((r00*x2248))+(((-1.0)*x2245*x2247))+(((-1.0)*cj0*sj1*x2242)));
evalcond[5]=(((r10*x2248))+(((-1.0)*sj0*sj1*x2242))+(((-1.0)*x2241*x2247))+(((-1.0)*x2244*x2246))+(((-1.0)*r12*x2249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2251=((1.0)*gconst95);
CheckValue<IkReal> x2252 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2252.valid){
continue;
}
CheckValue<IkReal> x2253=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2251)))),-1);
if(!x2253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2252.value)+(((1.5707963267949)*(x2253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2254=IKsin(j4);
IkReal x2255=IKcos(j4);
IkReal x2256=(gconst94*r11);
IkReal x2257=((1.0)*cj2);
IkReal x2258=(gconst94*r21);
IkReal x2259=((1.0)*sj0);
IkReal x2260=(gconst94*r01);
IkReal x2261=(cj1*sj2);
IkReal x2262=((1.0)*x2255);
IkReal x2263=(gconst95*x2255);
IkReal x2264=((1.0)*x2254);
IkReal x2265=(gconst95*x2264);
evalcond[0]=(((x2254*x2258))+(((-1.0)*r20*x2265))+(((-1.0)*r22*x2262)));
evalcond[1]=(cj0+((x2254*x2256))+(((-1.0)*r10*x2265))+(((-1.0)*r12*x2262)));
evalcond[2]=((((-1.0)*r00*x2265))+(((-1.0)*x2259))+((x2254*x2260))+(((-1.0)*r02*x2262)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2258*x2262))+(((-1.0)*r22*x2264))+((r20*x2263))+(((-1.0)*cj1*x2257)));
evalcond[4]=(((r00*x2263))+(((-1.0)*x2260*x2262))+(((-1.0)*cj0*sj1*x2257))+(((-1.0)*r02*x2264))+(((-1.0)*cj0*x2261)));
evalcond[5]=((((-1.0)*x2256*x2262))+(((-1.0)*sj0*sj1*x2257))+(((-1.0)*x2259*x2261))+((r10*x2263))+(((-1.0)*r12*x2264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2266=((1.0)*gconst95);
CheckValue<IkReal> x2267=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2266)))),-1);
if(!x2267.valid){
continue;
}
CheckValue<IkReal> x2268 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2266))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2267.value)))+(x2268.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2269=IKsin(j4);
IkReal x2270=IKcos(j4);
IkReal x2271=(gconst94*r11);
IkReal x2272=((1.0)*cj2);
IkReal x2273=(gconst94*r21);
IkReal x2274=((1.0)*sj0);
IkReal x2275=(gconst94*r01);
IkReal x2276=(cj1*sj2);
IkReal x2277=((1.0)*x2270);
IkReal x2278=(gconst95*x2270);
IkReal x2279=((1.0)*x2269);
IkReal x2280=(gconst95*x2279);
evalcond[0]=(((x2269*x2273))+(((-1.0)*r22*x2277))+(((-1.0)*r20*x2280)));
evalcond[1]=(cj0+(((-1.0)*r10*x2280))+((x2269*x2271))+(((-1.0)*r12*x2277)));
evalcond[2]=(((x2269*x2275))+(((-1.0)*r02*x2277))+(((-1.0)*x2274))+(((-1.0)*r00*x2280)));
evalcond[3]=((((-1.0)*cj1*x2272))+(((-1.0)*x2273*x2277))+((sj1*sj2))+(((-1.0)*r22*x2279))+((r20*x2278)));
evalcond[4]=(((r00*x2278))+(((-1.0)*cj0*sj1*x2272))+(((-1.0)*x2275*x2277))+(((-1.0)*r02*x2279))+(((-1.0)*cj0*x2276)));
evalcond[5]=((((-1.0)*x2274*x2276))+(((-1.0)*sj0*sj1*x2272))+((r10*x2278))+(((-1.0)*r12*x2279))+(((-1.0)*x2271*x2277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2281=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2281;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2282=((1.0)*cj5);
IkReal x2283=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2282)));
j4eval[0]=x2283;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2282))))));
j4eval[2]=IKsign(x2283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2284=cj5*cj5;
IkReal x2285=r01*r01;
IkReal x2286=(r01*sj5);
IkReal x2287=(cj5*r00);
IkReal x2288=((((-1.0)*(r02*r02)))+(((-1.0)*x2285))+(((2.0)*x2286*x2287))+(((-1.0)*x2284*(r00*r00)))+((x2284*x2285)));
j4eval[0]=x2288;
j4eval[1]=IKsign(x2288);
j4eval[2]=((IKabs(r02))+(IKabs((x2287+(((-1.0)*x2286))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2289=cj5*cj5;
IkReal x2290=r01*r01;
IkReal x2291=(r01*sj5);
IkReal x2292=(cj5*r00);
CheckValue<IkReal> x2293 = IKatan2WithCheck(IkReal((x2292+(((-1.0)*x2291)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2293.valid){
continue;
}
CheckValue<IkReal> x2294=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2289*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x2290))+((x2289*x2290))+(((2.0)*x2291*x2292)))),-1);
if(!x2294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2293.value)+(((1.5707963267949)*(x2294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2295=IKsin(j4);
IkReal x2296=IKcos(j4);
IkReal x2297=(cj5*r10);
IkReal x2298=(r01*sj5);
IkReal x2299=((1.0)*cj2);
IkReal x2300=(cj5*r00);
IkReal x2301=(cj5*r20);
IkReal x2302=((1.0)*x2296);
IkReal x2303=((1.0)*x2295);
IkReal x2304=(sj5*x2295);
evalcond[0]=((((-1.0)*x2301*x2303))+(((-1.0)*r22*x2302))+((r21*x2304)));
evalcond[1]=(((r11*x2304))+(((-1.0)*x2297*x2303))+(((-1.0)*r12*x2302)));
evalcond[2]=(((x2296*x2300))+(((-1.0)*x2298*x2302))+(((-1.0)*r02*x2303)));
evalcond[3]=((-1.0)+(((-1.0)*x2300*x2303))+((x2295*x2298))+(((-1.0)*r02*x2302)));
evalcond[4]=((((-1.0)*r22*x2303))+((sj1*sj2))+(((-1.0)*r21*sj5*x2302))+((x2296*x2301))+(((-1.0)*cj1*x2299)));
evalcond[5]=(((x2296*x2297))+(((-1.0)*r11*sj5*x2302))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2299))+(((-1.0)*r12*x2303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2305=((1.0)*cj5);
CheckValue<IkReal> x2306 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2305))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2306.valid){
continue;
}
CheckValue<IkReal> x2307=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2305))+(((-1.0)*r10*sj5)))),-1);
if(!x2307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2306.value)+(((1.5707963267949)*(x2307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2308=IKsin(j4);
IkReal x2309=IKcos(j4);
IkReal x2310=(cj5*r10);
IkReal x2311=(r01*sj5);
IkReal x2312=((1.0)*cj2);
IkReal x2313=(cj5*r00);
IkReal x2314=(cj5*r20);
IkReal x2315=((1.0)*x2309);
IkReal x2316=((1.0)*x2308);
IkReal x2317=(sj5*x2308);
evalcond[0]=((((-1.0)*r22*x2315))+((r21*x2317))+(((-1.0)*x2314*x2316)));
evalcond[1]=(((r11*x2317))+(((-1.0)*x2310*x2316))+(((-1.0)*r12*x2315)));
evalcond[2]=((((-1.0)*x2311*x2315))+((x2309*x2313))+(((-1.0)*r02*x2316)));
evalcond[3]=((-1.0)+((x2308*x2311))+(((-1.0)*x2313*x2316))+(((-1.0)*r02*x2315)));
evalcond[4]=((((-1.0)*r22*x2316))+((sj1*sj2))+((x2309*x2314))+(((-1.0)*cj1*x2312))+(((-1.0)*r21*sj5*x2315)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2315))+((x2309*x2310))+(((-1.0)*r12*x2316))+(((-1.0)*sj1*x2312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2318=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2318.valid){
continue;
}
CheckValue<IkReal> x2319 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2318.value)))+(x2319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2320=IKsin(j4);
IkReal x2321=IKcos(j4);
IkReal x2322=(cj5*r10);
IkReal x2323=(r01*sj5);
IkReal x2324=((1.0)*cj2);
IkReal x2325=(cj5*r00);
IkReal x2326=(cj5*r20);
IkReal x2327=((1.0)*x2321);
IkReal x2328=((1.0)*x2320);
IkReal x2329=(sj5*x2320);
evalcond[0]=((((-1.0)*r22*x2327))+((r21*x2329))+(((-1.0)*x2326*x2328)));
evalcond[1]=(((r11*x2329))+(((-1.0)*x2322*x2328))+(((-1.0)*r12*x2327)));
evalcond[2]=(((x2321*x2325))+(((-1.0)*x2323*x2327))+(((-1.0)*r02*x2328)));
evalcond[3]=((-1.0)+((x2320*x2323))+(((-1.0)*x2325*x2328))+(((-1.0)*r02*x2327)));
evalcond[4]=((((-1.0)*r22*x2328))+((x2321*x2326))+((sj1*sj2))+(((-1.0)*cj1*x2324))+(((-1.0)*r21*sj5*x2327)));
evalcond[5]=(((x2321*x2322))+(((-1.0)*r11*sj5*x2327))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2328))+(((-1.0)*sj1*x2324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2330=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2330;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2330);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2331=((1.0)*cj5);
IkReal x2332=((((-1.0)*r21*x2331))+(((-1.0)*r20*sj5)));
j4eval[0]=x2332;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2331))+((r11*sj5))))));
j4eval[2]=IKsign(x2332);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2333=cj5*cj5;
IkReal x2334=r01*r01;
IkReal x2335=(cj5*r00);
IkReal x2336=(r01*sj5);
IkReal x2337=(x2334+((x2333*(r00*r00)))+(((-2.0)*x2335*x2336))+(r02*r02)+(((-1.0)*x2333*x2334)));
j4eval[0]=x2337;
j4eval[1]=((IKabs((x2335+(((-1.0)*x2336)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2337);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2338=cj5*cj5;
IkReal x2339=r01*r01;
IkReal x2340=(r01*sj5);
IkReal x2341=(cj5*r00);
CheckValue<IkReal> x2342=IKPowWithIntegerCheck(IKsign((x2339+(r02*r02)+((x2338*(r00*r00)))+(((-1.0)*x2338*x2339))+(((-2.0)*x2340*x2341)))),-1);
if(!x2342.valid){
continue;
}
CheckValue<IkReal> x2343 = IKatan2WithCheck(IkReal((x2341+(((-1.0)*x2340)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2342.value)))+(x2343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2344=IKsin(j4);
IkReal x2345=IKcos(j4);
IkReal x2346=(cj5*r10);
IkReal x2347=(r01*sj5);
IkReal x2348=(cj5*r00);
IkReal x2349=(cj5*r20);
IkReal x2350=((1.0)*x2345);
IkReal x2351=((1.0)*x2344);
IkReal x2352=(sj5*x2344);
evalcond[0]=((((-1.0)*r22*x2350))+((r21*x2352))+(((-1.0)*x2349*x2351)));
evalcond[1]=((((-1.0)*x2346*x2351))+((r11*x2352))+(((-1.0)*r12*x2350)));
evalcond[2]=((((-1.0)*x2347*x2350))+((x2345*x2348))+(((-1.0)*r02*x2351)));
evalcond[3]=((1.0)+(((-1.0)*x2348*x2351))+((x2344*x2347))+(((-1.0)*r02*x2350)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2350))+((cj1*sj2))+((x2345*x2346))+(((-1.0)*r12*x2351)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2345*x2349))+(((-1.0)*r22*x2351))+(((-1.0)*r21*sj5*x2350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2353=((1.0)*cj5);
CheckValue<IkReal> x2354 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2354.valid){
continue;
}
CheckValue<IkReal> x2355=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2353))+(((-1.0)*r20*sj5)))),-1);
if(!x2355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2354.value)+(((1.5707963267949)*(x2355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2356=IKsin(j4);
IkReal x2357=IKcos(j4);
IkReal x2358=(cj5*r10);
IkReal x2359=(r01*sj5);
IkReal x2360=(cj5*r00);
IkReal x2361=(cj5*r20);
IkReal x2362=((1.0)*x2357);
IkReal x2363=((1.0)*x2356);
IkReal x2364=(sj5*x2356);
evalcond[0]=((((-1.0)*x2361*x2363))+(((-1.0)*r22*x2362))+((r21*x2364)));
evalcond[1]=(((r11*x2364))+(((-1.0)*x2358*x2363))+(((-1.0)*r12*x2362)));
evalcond[2]=((((-1.0)*x2359*x2362))+((x2357*x2360))+(((-1.0)*r02*x2363)));
evalcond[3]=((1.0)+((x2356*x2359))+(((-1.0)*x2360*x2363))+(((-1.0)*r02*x2362)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2362))+((x2357*x2358))+((cj1*sj2))+(((-1.0)*r12*x2363)));
evalcond[5]=((((-1.0)*r21*sj5*x2362))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2363))+((x2357*x2361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2365 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2365.valid){
continue;
}
CheckValue<IkReal> x2366=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2365.value)+(((1.5707963267949)*(x2366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2367=IKsin(j4);
IkReal x2368=IKcos(j4);
IkReal x2369=(cj5*r10);
IkReal x2370=(r01*sj5);
IkReal x2371=(cj5*r00);
IkReal x2372=(cj5*r20);
IkReal x2373=((1.0)*x2368);
IkReal x2374=((1.0)*x2367);
IkReal x2375=(sj5*x2367);
evalcond[0]=((((-1.0)*x2372*x2374))+(((-1.0)*r22*x2373))+((r21*x2375)));
evalcond[1]=((((-1.0)*x2369*x2374))+(((-1.0)*r12*x2373))+((r11*x2375)));
evalcond[2]=(((x2368*x2371))+(((-1.0)*r02*x2374))+(((-1.0)*x2370*x2373)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2373))+((x2367*x2370))+(((-1.0)*x2371*x2374)));
evalcond[4]=((((-1.0)*r11*sj5*x2373))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x2374))+((x2368*x2369)));
evalcond[5]=(((x2368*x2372))+(((-1.0)*r21*sj5*x2373))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2376=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2376);
rxp1_1=(px*r21);
rxp1_2=(r11*x2376);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2377=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2377);
rxp1_1=(px*r21);
rxp1_2=(r11*x2377);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2378=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2378);
rxp1_1=(px*r21);
rxp1_2=(r11*x2378);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2381=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2381.valid){
continue;
}
IkReal x2379=x2381.value;
IkReal x2380=(sj0*x2379);
cj4array[0]=(((cj2*sj1*x2380))+((cj1*sj2*x2380)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2382=IKsin(j4);
IkReal x2383=IKcos(j4);
IkReal x2384=(cj5*r20);
IkReal x2385=(r21*sj5);
IkReal x2386=((1.0)*x2382);
IkReal x2387=((1.0)*x2383);
evalcond[0]=((-1.0)*r02*x2382);
evalcond[1]=((((-1.0)*r02*x2387))+(((-1.0)*sj0)));
evalcond[2]=(((x2382*x2385))+(((-1.0)*x2384*x2386)));
evalcond[3]=(((r11*sj5*x2382))+(((-1.0)*cj5*r10*x2386)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2383*x2384))+(((-1.0)*x2385*x2387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2389=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2389.valid){
continue;
}
IkReal x2388=x2389.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2388))+((cj1*cj2*x2388)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2390=IKsin(j4);
IkReal x2391=IKcos(j4);
IkReal x2392=(r11*sj5);
IkReal x2393=((1.0)*sj0);
IkReal x2394=((1.0)*x2391);
IkReal x2395=((1.0)*cj5*x2390);
evalcond[0]=((-1.0)*r02*x2390);
evalcond[1]=((((-1.0)*r02*x2394))+(((-1.0)*x2393)));
evalcond[2]=((((-1.0)*r20*x2395))+((r21*sj5*x2390)));
evalcond[3]=((((-1.0)*r10*x2395))+((x2390*x2392)));
evalcond[4]=((((-1.0)*cj1*sj2*x2393))+(((-1.0)*cj2*sj1*x2393))+((cj5*r10*x2391))+(((-1.0)*x2392*x2394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2396=IKPowWithIntegerCheck(r02,-1);
if(!x2396.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2396.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2397=IKsin(j4);
IkReal x2398=IKcos(j4);
IkReal x2399=((1.0)*sj0);
IkReal x2400=(cj5*x2398);
IkReal x2401=(sj5*x2397);
IkReal x2402=((1.0)*sj5*x2398);
IkReal x2403=((1.0)*cj5*x2397);
evalcond[0]=((-1.0)*r02*x2397);
evalcond[1]=(((r21*x2401))+(((-1.0)*r20*x2403)));
evalcond[2]=(((r11*x2401))+(((-1.0)*r10*x2403)));
evalcond[3]=(((r20*x2400))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2402)));
evalcond[4]=(((r10*x2400))+(((-1.0)*cj1*sj2*x2399))+(((-1.0)*cj2*sj1*x2399))+(((-1.0)*r11*x2402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2404=((1.0)*sj0);
IkReal x2405=((1.0)*cj0);
CheckValue<IkReal> x2406 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2405))+(((-1.0)*r12*x2404)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2405))+(((-1.0)*r11*sj5*x2404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2406.valid){
continue;
}
CheckValue<IkReal> x2407=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2406.value)+(((1.5707963267949)*(x2407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2408=IKsin(j4);
IkReal x2409=IKcos(j4);
IkReal x2410=(cj5*r10);
IkReal x2411=(r01*sj5);
IkReal x2412=((1.0)*cj2);
IkReal x2413=(cj5*r00);
IkReal x2414=((1.0)*sj0);
IkReal x2415=(cj5*r20);
IkReal x2416=(cj1*sj2);
IkReal x2417=((1.0)*x2409);
IkReal x2418=((1.0)*x2408);
IkReal x2419=(sj5*x2408);
evalcond[0]=(((r21*x2419))+(((-1.0)*x2415*x2418))+(((-1.0)*r22*x2417)));
evalcond[1]=(((r11*x2419))+cj0+(((-1.0)*r12*x2417))+(((-1.0)*x2410*x2418)));
evalcond[2]=(((x2408*x2411))+(((-1.0)*r02*x2417))+(((-1.0)*x2414))+(((-1.0)*x2413*x2418)));
evalcond[3]=(((x2409*x2415))+((sj1*sj2))+(((-1.0)*r21*sj5*x2417))+(((-1.0)*cj1*x2412))+(((-1.0)*r22*x2418)));
evalcond[4]=((((-1.0)*cj0*x2416))+(((-1.0)*cj0*sj1*x2412))+((x2409*x2413))+(((-1.0)*x2411*x2417))+(((-1.0)*r02*x2418)));
evalcond[5]=((((-1.0)*x2414*x2416))+(((-1.0)*r12*x2418))+((x2409*x2410))+(((-1.0)*sj0*sj1*x2412))+(((-1.0)*r11*sj5*x2417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2420=((1.0)*cj5);
CheckValue<IkReal> x2421=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2420)))),-1);
if(!x2421.valid){
continue;
}
CheckValue<IkReal> x2422 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2420))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2421.value)))+(x2422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2423=IKsin(j4);
IkReal x2424=IKcos(j4);
IkReal x2425=(cj5*r10);
IkReal x2426=(r01*sj5);
IkReal x2427=((1.0)*cj2);
IkReal x2428=(cj5*r00);
IkReal x2429=((1.0)*sj0);
IkReal x2430=(cj5*r20);
IkReal x2431=(cj1*sj2);
IkReal x2432=((1.0)*x2424);
IkReal x2433=((1.0)*x2423);
IkReal x2434=(sj5*x2423);
evalcond[0]=((((-1.0)*r22*x2432))+(((-1.0)*x2430*x2433))+((r21*x2434)));
evalcond[1]=((((-1.0)*x2425*x2433))+((r11*x2434))+cj0+(((-1.0)*r12*x2432)));
evalcond[2]=(((x2423*x2426))+(((-1.0)*r02*x2432))+(((-1.0)*x2428*x2433))+(((-1.0)*x2429)));
evalcond[3]=((((-1.0)*r22*x2433))+((x2424*x2430))+(((-1.0)*r21*sj5*x2432))+((sj1*sj2))+(((-1.0)*cj1*x2427)));
evalcond[4]=((((-1.0)*cj0*x2431))+(((-1.0)*x2426*x2432))+(((-1.0)*cj0*sj1*x2427))+(((-1.0)*r02*x2433))+((x2424*x2428)));
evalcond[5]=((((-1.0)*x2429*x2431))+((x2424*x2425))+(((-1.0)*r11*sj5*x2432))+(((-1.0)*sj0*sj1*x2427))+(((-1.0)*r12*x2433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2435=((1.0)*cj5);
CheckValue<IkReal> x2436 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2436.valid){
continue;
}
CheckValue<IkReal> x2437=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2435)))),-1);
if(!x2437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2436.value)+(((1.5707963267949)*(x2437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2438=IKsin(j4);
IkReal x2439=IKcos(j4);
IkReal x2440=(cj5*r10);
IkReal x2441=(r01*sj5);
IkReal x2442=((1.0)*cj2);
IkReal x2443=(cj5*r00);
IkReal x2444=((1.0)*sj0);
IkReal x2445=(cj5*r20);
IkReal x2446=(cj1*sj2);
IkReal x2447=((1.0)*x2439);
IkReal x2448=((1.0)*x2438);
IkReal x2449=(sj5*x2438);
evalcond[0]=((((-1.0)*x2445*x2448))+(((-1.0)*r22*x2447))+((r21*x2449)));
evalcond[1]=(cj0+(((-1.0)*r12*x2447))+((r11*x2449))+(((-1.0)*x2440*x2448)));
evalcond[2]=((((-1.0)*x2443*x2448))+(((-1.0)*x2444))+(((-1.0)*r02*x2447))+((x2438*x2441)));
evalcond[3]=((((-1.0)*r21*sj5*x2447))+((sj1*sj2))+((x2439*x2445))+(((-1.0)*cj1*x2442))+(((-1.0)*r22*x2448)));
evalcond[4]=((((-1.0)*cj0*x2446))+(((-1.0)*cj0*sj1*x2442))+(((-1.0)*x2441*x2447))+((x2439*x2443))+(((-1.0)*r02*x2448)));
evalcond[5]=((((-1.0)*r11*sj5*x2447))+(((-1.0)*x2444*x2446))+(((-1.0)*r12*x2448))+((x2439*x2440))+(((-1.0)*sj0*sj1*x2442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2450=cj5*cj5;
IkReal x2451=r21*r21;
IkReal x2452=(sj1*sj2);
IkReal x2453=(r21*sj5);
IkReal x2454=(cj1*cj2);
IkReal x2455=(cj5*r20);
CheckValue<IkReal> x2456 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2454))+((r22*x2452)))),IkReal(((((-1.0)*x2452*x2455))+(((-1.0)*x2453*x2454))+((x2452*x2453))+((x2454*x2455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2456.valid){
continue;
}
CheckValue<IkReal> x2457=IKPowWithIntegerCheck(IKsign((x2451+(((-1.0)*x2450*x2451))+(r22*r22)+(((-2.0)*x2453*x2455))+((x2450*(r20*r20))))),-1);
if(!x2457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2456.value)+(((1.5707963267949)*(x2457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2458=IKsin(j4);
IkReal x2459=IKcos(j4);
IkReal x2460=(r21*sj5);
IkReal x2461=(cj5*r20);
IkReal x2462=((1.0)*x2459);
IkReal x2463=((1.0)*x2458);
evalcond[0]=(((x2458*x2460))+(((-1.0)*r22*x2462))+(((-1.0)*x2461*x2463)));
evalcond[1]=((((-1.0)*r22*x2463))+((x2459*x2461))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2460*x2462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2464=(cj5*sj4);
IkReal x2465=(sj4*sj5);
if( IKabs((((r01*x2465))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2464)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2465))+((r10*x2464))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2465))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2464))))+IKsqr(((((-1.0)*r11*x2465))+((r10*x2464))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2465))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2464))), ((((-1.0)*r11*x2465))+((r10*x2464))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2466=IKcos(j0);
IkReal x2467=IKsin(j0);
IkReal x2468=(cj4*cj5);
IkReal x2469=((0.21325)*cj2);
IkReal x2470=(cj5*r01);
IkReal x2471=((1.0)*sj2);
IkReal x2472=(r11*sj5);
IkReal x2473=((1.0)*sj4);
IkReal x2474=(r00*sj5);
IkReal x2475=(cj5*r11);
IkReal x2476=((1.0)*cj2);
IkReal x2477=((1.0)*cj4);
IkReal x2478=((0.21325)*sj2);
IkReal x2479=(r01*sj5);
IkReal x2480=(r10*sj5);
IkReal x2481=(cj1*x2467);
IkReal x2482=(cj1*x2466);
IkReal x2483=(sj1*x2466);
IkReal x2484=(sj1*x2467);
evalcond[0]=(x2466+(((-1.0)*cj5*r10*x2473))+(((-1.0)*r12*x2477))+((sj4*x2472)));
evalcond[1]=(((sj4*x2479))+(((-1.0)*x2467))+(((-1.0)*cj5*r00*x2473))+(((-1.0)*r02*x2477)));
evalcond[2]=(x2474+x2470+(((-1.0)*x2476*x2482))+((sj2*x2483)));
evalcond[3]=(x2480+x2475+(((-1.0)*x2476*x2481))+((sj2*x2484)));
evalcond[4]=((((-1.0)*x2477*x2479))+(((-1.0)*x2476*x2483))+(((-1.0)*r02*x2473))+(((-1.0)*x2471*x2482))+((r00*x2468)));
evalcond[5]=((((-1.0)*r12*x2473))+(((-1.0)*x2476*x2484))+(((-1.0)*x2472*x2477))+(((-1.0)*x2471*x2481))+((r10*x2468)));
evalcond[6]=(((x2469*x2482))+(((-0.11235)*x2467))+(((0.24365)*x2482))+(((-1.0)*px))+(((-0.08535)*x2474))+(((-0.08535)*x2470))+(((-1.0)*x2478*x2483)));
evalcond[7]=(((x2469*x2481))+(((0.24365)*x2481))+(((-1.0)*py))+(((-0.08535)*x2480))+(((-0.08535)*x2475))+(((-1.0)*x2478*x2484))+(((0.11235)*x2466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2485=((1.0)*cj5);
IkReal x2486=((1.0)*sj5);
CheckValue<IkReal> x2487 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2486))+(((-1.0)*r11*x2485)))),IkReal(((((-1.0)*r00*x2486))+(((-1.0)*r01*x2485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2487.valid){
continue;
}
CheckValue<IkReal> x2488=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2488.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2487.value)+(((1.5707963267949)*(x2488.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2489=IKcos(j0);
IkReal x2490=IKsin(j0);
IkReal x2491=(cj5*r01);
IkReal x2492=(r00*sj5);
IkReal x2493=(cj5*r11);
IkReal x2494=((1.0)*cj2);
IkReal x2495=(r10*sj5);
IkReal x2496=((0.21325)*cj1*cj2);
IkReal x2497=(cj1*x2489);
IkReal x2498=(cj1*x2490);
IkReal x2499=(sj1*sj2*x2489);
IkReal x2500=(sj1*sj2*x2490);
evalcond[0]=(x2499+x2491+x2492+(((-1.0)*x2494*x2497)));
evalcond[1]=(x2500+x2493+x2495+(((-1.0)*x2494*x2498)));
evalcond[2]=((((0.24365)*x2497))+(((-0.21325)*x2499))+(((-0.11235)*x2490))+(((-1.0)*px))+(((-0.08535)*x2492))+(((-0.08535)*x2491))+((x2489*x2496)));
evalcond[3]=((((-0.21325)*x2500))+(((0.24365)*x2498))+((x2490*x2496))+(((-1.0)*py))+(((0.11235)*x2489))+(((-0.08535)*x2493))+(((-0.08535)*x2495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2501=((1.0)*cj5);
IkReal x2502=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2501)));
j4eval[0]=x2502;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2501))))));
j4eval[2]=IKsign(x2502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2503=((1.0)*cj5);
IkReal x2504=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2503)));
j4eval[0]=x2504;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x2503))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2504);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2505=((1.0)*sj0);
IkReal x2506=((1.0)*cj0);
IkReal x2507=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2507;
j4eval[1]=((IKabs(((((-1.0)*r02*x2506))+(((-1.0)*r12*x2505)))))+(IKabs(((((-1.0)*r01*sj5*x2506))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2505))))));
j4eval[2]=IKsign(x2507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2508=((-1.0)*r20);
IkReal x2510 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2510)==0){
continue;
}
IkReal x2509=pow(x2510,-0.5);
CheckValue<IkReal> x2511 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2508),IKFAST_ATAN2_MAGTHRESH);
if(!x2511.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2511.value));
IkReal gconst79=(r21*x2509);
IkReal gconst80=(x2508*x2509);
CheckValue<IkReal> x2512 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2512.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2512.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2513=((-1.0)*r20);
IkReal x2514=x2509;
CheckValue<IkReal> x2516 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2513),IKFAST_ATAN2_MAGTHRESH);
if(!x2516.valid){
continue;
}
IkReal x2515=((-1.0)*(x2516.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2515;
IkReal gconst78=x2515;
IkReal gconst79=(r21*x2514);
IkReal gconst80=(x2513*x2514);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2517=((-1.0)*r20);
IkReal x2518=x2509;
CheckValue<IkReal> x2520 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2517),IKFAST_ATAN2_MAGTHRESH);
if(!x2520.valid){
continue;
}
IkReal x2519=((-1.0)*(x2520.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2519;
IkReal gconst78=x2519;
IkReal gconst79=(r21*x2518);
IkReal gconst80=(x2517*x2518);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2521=((-1.0)*r20);
IkReal x2522=x2509;
CheckValue<IkReal> x2524 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2521),IKFAST_ATAN2_MAGTHRESH);
if(!x2524.valid){
continue;
}
IkReal x2523=((-1.0)*(x2524.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2523;
IkReal gconst78=x2523;
IkReal gconst79=(r21*x2522);
IkReal gconst80=(x2521*x2522);
IkReal x2525=r22*r22;
CheckValue<IkReal> x2528=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2525))),-1);
if(!x2528.valid){
continue;
}
IkReal x2526=x2528.value;
IkReal x2527=(x2525+((x2526*(r21*r21*r21*r21)))+(((2.0)*x2526*(r20*r20)*(r21*r21)))+((x2526*(r20*r20*r20*r20))));
j4eval[0]=x2527;
j4eval[1]=IKsign(x2527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2529=(sj1*sj2);
IkReal x2530=(gconst80*r20);
IkReal x2531=(gconst79*r21);
IkReal x2532=(cj1*cj2);
CheckValue<IkReal> x2533=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2530*x2531))+(x2530*x2530)+(x2531*x2531))),-1);
if(!x2533.valid){
continue;
}
CheckValue<IkReal> x2534 = IKatan2WithCheck(IkReal((((r22*x2529))+(((-1.0)*r22*x2532)))),IkReal((((x2530*x2532))+(((-1.0)*x2529*x2530))+(((-1.0)*x2531*x2532))+((x2529*x2531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2533.value)))+(x2534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2535=IKsin(j4);
IkReal x2536=IKcos(j4);
IkReal x2537=(gconst79*r01);
IkReal x2538=(gconst79*r21);
IkReal x2539=((1.0)*cj2);
IkReal x2540=(gconst79*r11);
IkReal x2541=((1.0)*sj0);
IkReal x2542=(cj1*sj2);
IkReal x2543=((1.0)*x2536);
IkReal x2544=(gconst80*x2536);
IkReal x2545=((1.0)*x2535);
IkReal x2546=(gconst80*x2545);
evalcond[0]=((((-1.0)*r20*x2546))+(((-1.0)*r22*x2543))+((x2535*x2538)));
evalcond[1]=((((-1.0)*r12*x2543))+(((-1.0)*r10*x2546))+cj0+((x2535*x2540)));
evalcond[2]=((((-1.0)*r00*x2546))+(((-1.0)*x2541))+(((-1.0)*r02*x2543))+((x2535*x2537)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2538*x2543))+((r20*x2544))+(((-1.0)*r22*x2545))+(((-1.0)*cj1*x2539)));
evalcond[4]=((((-1.0)*cj0*sj1*x2539))+((r00*x2544))+(((-1.0)*cj0*x2542))+(((-1.0)*r02*x2545))+(((-1.0)*x2537*x2543)));
evalcond[5]=((((-1.0)*r12*x2545))+(((-1.0)*x2541*x2542))+(((-1.0)*sj0*sj1*x2539))+(((-1.0)*x2540*x2543))+((r10*x2544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2547=((1.0)*gconst80);
CheckValue<IkReal> x2548=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2547))+(((-1.0)*gconst79*r10)))),-1);
if(!x2548.valid){
continue;
}
CheckValue<IkReal> x2549 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*r20*sj0*x2547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2548.value)))+(x2549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2550=IKsin(j4);
IkReal x2551=IKcos(j4);
IkReal x2552=(gconst79*r01);
IkReal x2553=(gconst79*r21);
IkReal x2554=((1.0)*cj2);
IkReal x2555=(gconst79*r11);
IkReal x2556=((1.0)*sj0);
IkReal x2557=(cj1*sj2);
IkReal x2558=((1.0)*x2551);
IkReal x2559=(gconst80*x2551);
IkReal x2560=((1.0)*x2550);
IkReal x2561=(gconst80*x2560);
evalcond[0]=((((-1.0)*r20*x2561))+((x2550*x2553))+(((-1.0)*r22*x2558)));
evalcond[1]=(cj0+(((-1.0)*r12*x2558))+((x2550*x2555))+(((-1.0)*r10*x2561)));
evalcond[2]=((((-1.0)*r00*x2561))+((x2550*x2552))+(((-1.0)*r02*x2558))+(((-1.0)*x2556)));
evalcond[3]=((((-1.0)*r22*x2560))+((sj1*sj2))+(((-1.0)*cj1*x2554))+((r20*x2559))+(((-1.0)*x2553*x2558)));
evalcond[4]=((((-1.0)*cj0*sj1*x2554))+(((-1.0)*r02*x2560))+(((-1.0)*cj0*x2557))+((r00*x2559))+(((-1.0)*x2552*x2558)));
evalcond[5]=((((-1.0)*x2556*x2557))+(((-1.0)*x2555*x2558))+(((-1.0)*sj0*sj1*x2554))+(((-1.0)*r12*x2560))+((r10*x2559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2562=((1.0)*gconst80);
CheckValue<IkReal> x2563=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2562))+(((-1.0)*gconst79*r00)))),-1);
if(!x2563.valid){
continue;
}
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2562)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2563.value)))+(x2564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2565=IKsin(j4);
IkReal x2566=IKcos(j4);
IkReal x2567=(gconst79*r01);
IkReal x2568=(gconst79*r21);
IkReal x2569=((1.0)*cj2);
IkReal x2570=(gconst79*r11);
IkReal x2571=((1.0)*sj0);
IkReal x2572=(cj1*sj2);
IkReal x2573=((1.0)*x2566);
IkReal x2574=(gconst80*x2566);
IkReal x2575=((1.0)*x2565);
IkReal x2576=(gconst80*x2575);
evalcond[0]=(((x2565*x2568))+(((-1.0)*r20*x2576))+(((-1.0)*r22*x2573)));
evalcond[1]=((((-1.0)*r10*x2576))+(((-1.0)*r12*x2573))+cj0+((x2565*x2570)));
evalcond[2]=(((x2565*x2567))+(((-1.0)*x2571))+(((-1.0)*r02*x2573))+(((-1.0)*r00*x2576)));
evalcond[3]=((((-1.0)*cj1*x2569))+(((-1.0)*x2568*x2573))+((sj1*sj2))+((r20*x2574))+(((-1.0)*r22*x2575)));
evalcond[4]=((((-1.0)*x2567*x2573))+(((-1.0)*cj0*x2572))+(((-1.0)*cj0*sj1*x2569))+((r00*x2574))+(((-1.0)*r02*x2575)));
evalcond[5]=(((r10*x2574))+(((-1.0)*r12*x2575))+(((-1.0)*x2571*x2572))+(((-1.0)*x2570*x2573))+(((-1.0)*sj0*sj1*x2569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2577=((-1.0)*r21);
IkReal x2579 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2579)==0){
continue;
}
IkReal x2578=pow(x2579,-0.5);
CheckValue<IkReal> x2580 = IKatan2WithCheck(IkReal(x2577),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2580.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2580.value))));
IkReal gconst82=(x2577*x2578);
IkReal gconst83=((1.0)*r20*x2578);
CheckValue<IkReal> x2581 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2581.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2581.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2582=((-1.0)*r21);
CheckValue<IkReal> x2585 = IKatan2WithCheck(IkReal(x2582),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2585.valid){
continue;
}
IkReal x2583=((1.0)*(x2585.value));
IkReal x2584=x2578;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2583)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2583)));
IkReal gconst82=(x2582*x2584);
IkReal gconst83=((1.0)*r20*x2584);
IkReal x2586=r22*r22;
IkReal x2587=((1.0)*x2586);
CheckValue<IkReal> x2591=IKPowWithIntegerCheck(((-1.0)+x2586),-1);
if(!x2591.valid){
continue;
}
IkReal x2588=x2591.value;
if((((1.0)+(((-1.0)*x2587)))) < -0.00001)
continue;
IkReal x2589=IKsqrt(((1.0)+(((-1.0)*x2587))));
IkReal x2590=(cj0*x2588*x2589);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x2590+(((-1.0)*x2587*x2590))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2592=((-1.0)*r21);
CheckValue<IkReal> x2595 = IKatan2WithCheck(IkReal(x2592),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2595.valid){
continue;
}
IkReal x2593=((1.0)*(x2595.value));
IkReal x2594=x2578;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2593)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2593)));
IkReal gconst82=(x2592*x2594);
IkReal gconst83=((1.0)*r20*x2594);
IkReal x2596=r22*r22;
IkReal x2597=((1.0)*x2596);
CheckValue<IkReal> x2601=IKPowWithIntegerCheck(((-1.0)+x2596),-1);
if(!x2601.valid){
continue;
}
IkReal x2598=x2601.value;
if((((1.0)+(((-1.0)*x2597)))) < -0.00001)
continue;
IkReal x2599=IKsqrt(((1.0)+(((-1.0)*x2597))));
IkReal x2600=(sj0*x2598*x2599);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2597*x2600))+x2600))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2602=((-1.0)*r21);
CheckValue<IkReal> x2605 = IKatan2WithCheck(IkReal(x2602),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2605.valid){
continue;
}
IkReal x2603=((1.0)*(x2605.value));
IkReal x2604=x2578;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2603)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2603)));
IkReal gconst82=(x2602*x2604);
IkReal gconst83=((1.0)*r20*x2604);
IkReal x2606=r22*r22;
IkReal x2607=(r12*sj0);
IkReal x2608=(cj0*r02);
CheckValue<IkReal> x2612=IKPowWithIntegerCheck(((-1.0)+x2606),-1);
if(!x2612.valid){
continue;
}
IkReal x2609=x2612.value;
if((((1.0)+(((-1.0)*x2606)))) < -0.00001)
continue;
IkReal x2610=IKsqrt(((1.0)+(((-1.0)*x2606))));
IkReal x2611=(r22*x2609*x2610);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2607))+(((-1.0)*x2608)))))+(IKabs((((x2608*x2611))+((x2607*x2611))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2613=((1.0)*sj0);
IkReal x2614=((1.0)*cj0);
CheckValue<IkReal> x2615=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2615.valid){
continue;
}
CheckValue<IkReal> x2616 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2613))+(((-1.0)*r02*x2614)))),IkReal(((((-1.0)*gconst82*r01*x2614))+(((-1.0)*gconst82*r11*x2613))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2615.value)))+(x2616.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2617=IKsin(j4);
IkReal x2618=IKcos(j4);
IkReal x2619=(gconst82*r11);
IkReal x2620=((1.0)*cj2);
IkReal x2621=((1.0)*sj0);
IkReal x2622=(cj1*sj2);
IkReal x2623=((1.0)*x2618);
IkReal x2624=(gconst83*x2618);
IkReal x2625=(gconst82*x2617);
IkReal x2626=((1.0)*x2617);
evalcond[0]=((((-1.0)*gconst83*r20*x2626))+(((-1.0)*r22*x2623))+((r21*x2625)));
evalcond[1]=((((-1.0)*gconst83*r10*x2626))+cj0+(((-1.0)*r12*x2623))+((x2617*x2619)));
evalcond[2]=(((r01*x2625))+(((-1.0)*gconst83*r00*x2626))+(((-1.0)*r02*x2623))+(((-1.0)*x2621)));
evalcond[3]=(((r20*x2624))+(((-1.0)*gconst82*r21*x2623))+((sj1*sj2))+(((-1.0)*r22*x2626))+(((-1.0)*cj1*x2620)));
evalcond[4]=(((r00*x2624))+(((-1.0)*gconst82*r01*x2623))+(((-1.0)*cj0*x2622))+(((-1.0)*r02*x2626))+(((-1.0)*cj0*sj1*x2620)));
evalcond[5]=((((-1.0)*x2619*x2623))+(((-1.0)*r12*x2626))+(((-1.0)*sj0*sj1*x2620))+((r10*x2624))+(((-1.0)*x2621*x2622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2627=((1.0)*gconst83);
CheckValue<IkReal> x2628=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2627))+(((-1.0)*gconst82*r10)))),-1);
if(!x2628.valid){
continue;
}
CheckValue<IkReal> x2629 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2627))+((gconst82*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2628.value)))+(x2629.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2630=IKsin(j4);
IkReal x2631=IKcos(j4);
IkReal x2632=(gconst82*r11);
IkReal x2633=((1.0)*cj2);
IkReal x2634=((1.0)*sj0);
IkReal x2635=(cj1*sj2);
IkReal x2636=((1.0)*x2631);
IkReal x2637=(gconst83*x2631);
IkReal x2638=(gconst82*x2630);
IkReal x2639=((1.0)*x2630);
evalcond[0]=(((r21*x2638))+(((-1.0)*gconst83*r20*x2639))+(((-1.0)*r22*x2636)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2639))+(((-1.0)*r12*x2636))+((x2630*x2632)));
evalcond[2]=((((-1.0)*r02*x2636))+(((-1.0)*gconst83*r00*x2639))+(((-1.0)*x2634))+((r01*x2638)));
evalcond[3]=((((-1.0)*cj1*x2633))+((sj1*sj2))+((r20*x2637))+(((-1.0)*gconst82*r21*x2636))+(((-1.0)*r22*x2639)));
evalcond[4]=((((-1.0)*cj0*sj1*x2633))+(((-1.0)*r02*x2639))+(((-1.0)*gconst82*r01*x2636))+((r00*x2637))+(((-1.0)*cj0*x2635)));
evalcond[5]=((((-1.0)*sj0*sj1*x2633))+((r10*x2637))+(((-1.0)*x2632*x2636))+(((-1.0)*x2634*x2635))+(((-1.0)*r12*x2639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2640=((1.0)*gconst83);
CheckValue<IkReal> x2641 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2641.valid){
continue;
}
CheckValue<IkReal> x2642=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2640))+(((-1.0)*gconst82*r00)))),-1);
if(!x2642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2641.value)+(((1.5707963267949)*(x2642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2643=IKsin(j4);
IkReal x2644=IKcos(j4);
IkReal x2645=(gconst82*r11);
IkReal x2646=((1.0)*cj2);
IkReal x2647=((1.0)*sj0);
IkReal x2648=(cj1*sj2);
IkReal x2649=((1.0)*x2644);
IkReal x2650=(gconst83*x2644);
IkReal x2651=(gconst82*x2643);
IkReal x2652=((1.0)*x2643);
evalcond[0]=((((-1.0)*gconst83*r20*x2652))+(((-1.0)*r22*x2649))+((r21*x2651)));
evalcond[1]=((((-1.0)*r12*x2649))+cj0+(((-1.0)*gconst83*r10*x2652))+((x2643*x2645)));
evalcond[2]=((((-1.0)*r02*x2649))+((r01*x2651))+(((-1.0)*x2647))+(((-1.0)*gconst83*r00*x2652)));
evalcond[3]=((((-1.0)*r22*x2652))+(((-1.0)*cj1*x2646))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2649))+((r20*x2650)));
evalcond[4]=((((-1.0)*r02*x2652))+(((-1.0)*cj0*sj1*x2646))+(((-1.0)*gconst82*r01*x2649))+((r00*x2650))+(((-1.0)*cj0*x2648)));
evalcond[5]=((((-1.0)*r12*x2652))+(((-1.0)*x2647*x2648))+(((-1.0)*x2645*x2649))+((r10*x2650))+(((-1.0)*sj0*sj1*x2646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2653=((-1.0)*r10);
IkReal x2655 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2655)==0){
continue;
}
IkReal x2654=pow(x2655,-0.5);
CheckValue<IkReal> x2656 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2653),IKFAST_ATAN2_MAGTHRESH);
if(!x2656.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2656.value));
IkReal gconst85=(r11*x2654);
IkReal gconst86=(x2653*x2654);
CheckValue<IkReal> x2657 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2657.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2657.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2658=((-1.0)*r10);
IkReal x2659=x2654;
CheckValue<IkReal> x2661 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2658),IKFAST_ATAN2_MAGTHRESH);
if(!x2661.valid){
continue;
}
IkReal x2660=((-1.0)*(x2661.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2660;
IkReal gconst84=x2660;
IkReal gconst85=(r11*x2659);
IkReal gconst86=(x2658*x2659);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2662=((1.0)*sj0);
IkReal x2663=((1.0)*gconst85);
CheckValue<IkReal> x2664=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2663)))),-1);
if(!x2664.valid){
continue;
}
CheckValue<IkReal> x2665 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2662))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2663))+(((-1.0)*gconst85*r11*x2662))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2664.value)))+(x2665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2666=IKsin(j4);
IkReal x2667=IKcos(j4);
IkReal x2668=(gconst85*r21);
IkReal x2669=(gconst86*r00);
IkReal x2670=(gconst86*r10);
IkReal x2671=((1.0)*cj2);
IkReal x2672=(gconst85*r11);
IkReal x2673=(gconst85*r01);
IkReal x2674=((1.0)*sj0);
IkReal x2675=(gconst86*r20);
IkReal x2676=(cj1*sj2);
IkReal x2677=((1.0)*x2667);
IkReal x2678=((1.0)*x2666);
evalcond[0]=((((-1.0)*x2675*x2678))+((x2666*x2668))+(((-1.0)*r22*x2677)));
evalcond[1]=((((-1.0)*r12*x2677))+cj0+(((-1.0)*x2670*x2678))+((x2666*x2672)));
evalcond[2]=(((x2666*x2673))+(((-1.0)*r02*x2677))+(((-1.0)*x2674))+(((-1.0)*x2669*x2678)));
evalcond[3]=(((x2667*x2675))+(((-1.0)*cj1*x2671))+((sj1*sj2))+(((-1.0)*r22*x2678))+(((-1.0)*x2668*x2677)));
evalcond[4]=((((-1.0)*cj0*x2676))+(((-1.0)*cj0*sj1*x2671))+((x2667*x2669))+(((-1.0)*x2673*x2677))+(((-1.0)*r02*x2678)));
evalcond[5]=((((-1.0)*r12*x2678))+((x2667*x2670))+(((-1.0)*sj0*sj1*x2671))+(((-1.0)*x2674*x2676))+(((-1.0)*x2672*x2677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2679=((1.0)*gconst86);
CheckValue<IkReal> x2680=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2679))+(((-1.0)*gconst85*r00)))),-1);
if(!x2680.valid){
continue;
}
CheckValue<IkReal> x2681 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2679)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2680.value)))+(x2681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2682=IKsin(j4);
IkReal x2683=IKcos(j4);
IkReal x2684=(gconst85*r21);
IkReal x2685=(gconst86*r00);
IkReal x2686=(gconst86*r10);
IkReal x2687=((1.0)*cj2);
IkReal x2688=(gconst85*r11);
IkReal x2689=(gconst85*r01);
IkReal x2690=((1.0)*sj0);
IkReal x2691=(gconst86*r20);
IkReal x2692=(cj1*sj2);
IkReal x2693=((1.0)*x2683);
IkReal x2694=((1.0)*x2682);
evalcond[0]=((((-1.0)*x2691*x2694))+(((-1.0)*r22*x2693))+((x2682*x2684)));
evalcond[1]=(cj0+(((-1.0)*x2686*x2694))+((x2682*x2688))+(((-1.0)*r12*x2693)));
evalcond[2]=((((-1.0)*r02*x2693))+(((-1.0)*x2690))+((x2682*x2689))+(((-1.0)*x2685*x2694)));
evalcond[3]=((((-1.0)*cj1*x2687))+((sj1*sj2))+(((-1.0)*x2684*x2693))+(((-1.0)*r22*x2694))+((x2683*x2691)));
evalcond[4]=((((-1.0)*cj0*x2692))+(((-1.0)*r02*x2694))+((x2683*x2685))+(((-1.0)*x2689*x2693))+(((-1.0)*cj0*sj1*x2687)));
evalcond[5]=((((-1.0)*x2688*x2693))+((x2683*x2686))+(((-1.0)*r12*x2694))+(((-1.0)*x2690*x2692))+(((-1.0)*sj0*sj1*x2687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2695=((-1.0)*r11);
IkReal x2697 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2697)==0){
continue;
}
IkReal x2696=pow(x2697,-0.5);
CheckValue<IkReal> x2698 = IKatan2WithCheck(IkReal(x2695),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2698.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2698.value))));
IkReal gconst88=(x2695*x2696);
IkReal gconst89=((1.0)*r10*x2696);
CheckValue<IkReal> x2699 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2699.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2699.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2700=((-1.0)*r11);
CheckValue<IkReal> x2703 = IKatan2WithCheck(IkReal(x2700),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2703.valid){
continue;
}
IkReal x2701=((1.0)*(x2703.value));
IkReal x2702=x2696;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2701)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2701)));
IkReal gconst88=(x2700*x2702);
IkReal gconst89=((1.0)*r10*x2702);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2704=((-1.0)*r11);
CheckValue<IkReal> x2707 = IKatan2WithCheck(IkReal(x2704),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2707.valid){
continue;
}
IkReal x2705=((1.0)*(x2707.value));
IkReal x2706=x2696;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2705)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2705)));
IkReal gconst88=(x2704*x2706);
IkReal gconst89=((1.0)*r10*x2706);
IkReal x2708=r12*r12;
IkReal x2709=((1.0)*sj0);
IkReal x2710=(cj0*r02);
IkReal x2711=x2696;
j4eval[0]=((IKabs(((((-1.0)*x2710))+(((-1.0)*r12*x2709)))))+(IKabs((((r12*x2710*x2711))+(((-1.0)*x2709*x2711))+((sj0*x2708*x2711))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2712=((-1.0)*r11);
CheckValue<IkReal> x2715 = IKatan2WithCheck(IkReal(x2712),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2715.valid){
continue;
}
IkReal x2713=((1.0)*(x2715.value));
IkReal x2714=x2696;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2713)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2713)));
IkReal gconst88=(x2712*x2714);
IkReal gconst89=((1.0)*r10*x2714);
IkReal x2716=r12*r12;
IkReal x2717=(cj1*cj2*r22);
IkReal x2718=(r22*sj1*sj2);
CheckValue<IkReal> x2722=IKPowWithIntegerCheck(((-1.0)+x2716),-1);
if(!x2722.valid){
continue;
}
IkReal x2719=x2722.value;
if((((1.0)+(((-1.0)*x2716)))) < -0.00001)
continue;
IkReal x2720=IKsqrt(((1.0)+(((-1.0)*x2716))));
IkReal x2721=(r12*x2719*x2720);
j4eval[0]=((IKabs((((x2717*x2721))+(((-1.0)*x2718*x2721)))))+(IKabs((x2718+(((-1.0)*x2717))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2723=(cj1*cj2);
IkReal x2724=(gconst89*r20);
IkReal x2725=(gconst88*r21);
IkReal x2726=(sj1*sj2);
CheckValue<IkReal> x2727=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2724*x2725))+(x2725*x2725)+(r22*r22)+(x2724*x2724))),-1);
if(!x2727.valid){
continue;
}
CheckValue<IkReal> x2728 = IKatan2WithCheck(IkReal((((r22*x2726))+(((-1.0)*r22*x2723)))),IkReal(((((-1.0)*x2723*x2725))+((x2725*x2726))+(((-1.0)*x2724*x2726))+((x2723*x2724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2727.value)))+(x2728.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2729=IKsin(j4);
IkReal x2730=IKcos(j4);
IkReal x2731=((1.0)*sj0);
IkReal x2732=((1.0)*cj2);
IkReal x2733=(gconst89*r20);
IkReal x2734=(gconst89*r10);
IkReal x2735=(gconst89*r00);
IkReal x2736=(cj1*sj2);
IkReal x2737=((1.0)*x2730);
IkReal x2738=((1.0)*x2729);
IkReal x2739=(gconst88*x2729);
evalcond[0]=((((-1.0)*x2733*x2738))+((r21*x2739))+(((-1.0)*r22*x2737)));
evalcond[1]=(cj0+(((-1.0)*x2734*x2738))+(((-1.0)*r12*x2737))+((r11*x2739)));
evalcond[2]=(((r01*x2739))+(((-1.0)*x2735*x2738))+(((-1.0)*r02*x2737))+(((-1.0)*x2731)));
evalcond[3]=(((sj1*sj2))+((x2730*x2733))+(((-1.0)*r22*x2738))+(((-1.0)*gconst88*r21*x2737))+(((-1.0)*cj1*x2732)));
evalcond[4]=((((-1.0)*cj0*sj1*x2732))+(((-1.0)*cj0*x2736))+(((-1.0)*r02*x2738))+((x2730*x2735))+(((-1.0)*gconst88*r01*x2737)));
evalcond[5]=((((-1.0)*cj2*sj1*x2731))+(((-1.0)*x2731*x2736))+((x2730*x2734))+(((-1.0)*r12*x2738))+(((-1.0)*gconst88*r11*x2737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2740=((1.0)*sj0);
IkReal x2741=((1.0)*cj0);
CheckValue<IkReal> x2742 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2740))+(((-1.0)*r02*x2741)))),IkReal(((((-1.0)*gconst88*r11*x2740))+((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2741))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2742.valid){
continue;
}
CheckValue<IkReal> x2743=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2742.value)+(((1.5707963267949)*(x2743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2744=IKsin(j4);
IkReal x2745=IKcos(j4);
IkReal x2746=((1.0)*sj0);
IkReal x2747=((1.0)*cj2);
IkReal x2748=(gconst89*r20);
IkReal x2749=(gconst89*r10);
IkReal x2750=(gconst89*r00);
IkReal x2751=(cj1*sj2);
IkReal x2752=((1.0)*x2745);
IkReal x2753=((1.0)*x2744);
IkReal x2754=(gconst88*x2744);
evalcond[0]=((((-1.0)*r22*x2752))+((r21*x2754))+(((-1.0)*x2748*x2753)));
evalcond[1]=(((r11*x2754))+cj0+(((-1.0)*r12*x2752))+(((-1.0)*x2749*x2753)));
evalcond[2]=((((-1.0)*x2750*x2753))+((r01*x2754))+(((-1.0)*x2746))+(((-1.0)*r02*x2752)));
evalcond[3]=((((-1.0)*r22*x2753))+(((-1.0)*gconst88*r21*x2752))+((sj1*sj2))+((x2745*x2748))+(((-1.0)*cj1*x2747)));
evalcond[4]=((((-1.0)*gconst88*r01*x2752))+((x2745*x2750))+(((-1.0)*cj0*x2751))+(((-1.0)*r02*x2753))+(((-1.0)*cj0*sj1*x2747)));
evalcond[5]=((((-1.0)*gconst88*r11*x2752))+(((-1.0)*cj2*sj1*x2746))+((x2745*x2749))+(((-1.0)*r12*x2753))+(((-1.0)*x2746*x2751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2755=((1.0)*gconst89);
CheckValue<IkReal> x2756 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2755))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2756.valid){
continue;
}
CheckValue<IkReal> x2757=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2755))+(((-1.0)*gconst88*r00)))),-1);
if(!x2757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2756.value)+(((1.5707963267949)*(x2757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2758=IKsin(j4);
IkReal x2759=IKcos(j4);
IkReal x2760=((1.0)*sj0);
IkReal x2761=((1.0)*cj2);
IkReal x2762=(gconst89*r20);
IkReal x2763=(gconst89*r10);
IkReal x2764=(gconst89*r00);
IkReal x2765=(cj1*sj2);
IkReal x2766=((1.0)*x2759);
IkReal x2767=((1.0)*x2758);
IkReal x2768=(gconst88*x2758);
evalcond[0]=((((-1.0)*x2762*x2767))+((r21*x2768))+(((-1.0)*r22*x2766)));
evalcond[1]=(cj0+(((-1.0)*r12*x2766))+((r11*x2768))+(((-1.0)*x2763*x2767)));
evalcond[2]=((((-1.0)*x2764*x2767))+((r01*x2768))+(((-1.0)*x2760))+(((-1.0)*r02*x2766)));
evalcond[3]=(((x2759*x2762))+(((-1.0)*gconst88*r21*x2766))+((sj1*sj2))+(((-1.0)*cj1*x2761))+(((-1.0)*r22*x2767)));
evalcond[4]=(((x2759*x2764))+(((-1.0)*cj0*x2765))+(((-1.0)*gconst88*r01*x2766))+(((-1.0)*r02*x2767))+(((-1.0)*cj0*sj1*x2761)));
evalcond[5]=(((x2759*x2763))+(((-1.0)*r12*x2767))+(((-1.0)*x2760*x2765))+(((-1.0)*cj2*sj1*x2760))+(((-1.0)*gconst88*r11*x2766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2769=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2769;
j4eval[1]=IKsign(x2769);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2770=((1.0)*cj5);
IkReal x2771=((((-1.0)*r01*x2770))+(((-1.0)*r00*sj5)));
j4eval[0]=x2771;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2770))))));
j4eval[2]=IKsign(x2771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2772=cj5*cj5;
IkReal x2773=r11*r11;
IkReal x2774=(r11*sj5);
IkReal x2775=(cj5*r10);
IkReal x2776=(x2773+(r12*r12)+(((-1.0)*x2772*x2773))+((x2772*(r10*r10)))+(((-2.0)*x2774*x2775)));
j4eval[0]=x2776;
j4eval[1]=IKsign(x2776);
j4eval[2]=((IKabs(r12))+(IKabs((x2775+(((-1.0)*x2774))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2777=cj5*cj5;
IkReal x2778=r11*r11;
IkReal x2779=(cj5*r10);
IkReal x2780=(r11*sj5);
CheckValue<IkReal> x2781=IKPowWithIntegerCheck(IKsign((x2778+(r12*r12)+(((-1.0)*x2777*x2778))+((x2777*(r10*r10)))+(((-2.0)*x2779*x2780)))),-1);
if(!x2781.valid){
continue;
}
CheckValue<IkReal> x2782 = IKatan2WithCheck(IkReal((x2779+(((-1.0)*x2780)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2781.value)))+(x2782.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2783=IKsin(j4);
IkReal x2784=IKcos(j4);
IkReal x2785=(cj5*r10);
IkReal x2786=(r01*sj5);
IkReal x2787=((1.0)*cj2);
IkReal x2788=(cj5*r00);
IkReal x2789=(cj5*r20);
IkReal x2790=((1.0)*x2784);
IkReal x2791=((1.0)*x2783);
IkReal x2792=(sj5*x2783);
evalcond[0]=(((r21*x2792))+(((-1.0)*x2789*x2791))+(((-1.0)*r22*x2790)));
evalcond[1]=(((x2783*x2786))+(((-1.0)*x2788*x2791))+(((-1.0)*r02*x2790)));
evalcond[2]=(((x2784*x2785))+(((-1.0)*r11*sj5*x2790))+(((-1.0)*r12*x2791)));
evalcond[3]=((1.0)+(((-1.0)*x2785*x2791))+((r11*x2792))+(((-1.0)*r12*x2790)));
evalcond[4]=((((-1.0)*cj1*x2787))+((x2784*x2789))+(((-1.0)*r21*sj5*x2790))+((sj1*sj2))+(((-1.0)*r22*x2791)));
evalcond[5]=((((-1.0)*x2786*x2790))+(((-1.0)*sj1*x2787))+((x2784*x2788))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2793=((1.0)*cj5);
CheckValue<IkReal> x2794 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2793))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2794.valid){
continue;
}
CheckValue<IkReal> x2795=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2793)))),-1);
if(!x2795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2794.value)+(((1.5707963267949)*(x2795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2796=IKsin(j4);
IkReal x2797=IKcos(j4);
IkReal x2798=(cj5*r10);
IkReal x2799=(r01*sj5);
IkReal x2800=((1.0)*cj2);
IkReal x2801=(cj5*r00);
IkReal x2802=(cj5*r20);
IkReal x2803=((1.0)*x2797);
IkReal x2804=((1.0)*x2796);
IkReal x2805=(sj5*x2796);
evalcond[0]=((((-1.0)*x2802*x2804))+(((-1.0)*r22*x2803))+((r21*x2805)));
evalcond[1]=(((x2796*x2799))+(((-1.0)*r02*x2803))+(((-1.0)*x2801*x2804)));
evalcond[2]=(((x2797*x2798))+(((-1.0)*r12*x2804))+(((-1.0)*r11*sj5*x2803)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2803))+(((-1.0)*x2798*x2804))+((r11*x2805)));
evalcond[4]=(((x2797*x2802))+(((-1.0)*r21*sj5*x2803))+(((-1.0)*cj1*x2800))+((sj1*sj2))+(((-1.0)*r22*x2804)));
evalcond[5]=((((-1.0)*sj1*x2800))+((x2797*x2801))+(((-1.0)*cj1*sj2))+(((-1.0)*x2799*x2803))+(((-1.0)*r02*x2804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2806=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2806.valid){
continue;
}
CheckValue<IkReal> x2807 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2806.value)))+(x2807.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2808=IKsin(j4);
IkReal x2809=IKcos(j4);
IkReal x2810=(cj5*r10);
IkReal x2811=(r01*sj5);
IkReal x2812=((1.0)*cj2);
IkReal x2813=(cj5*r00);
IkReal x2814=(cj5*r20);
IkReal x2815=((1.0)*x2809);
IkReal x2816=((1.0)*x2808);
IkReal x2817=(sj5*x2808);
evalcond[0]=(((r21*x2817))+(((-1.0)*r22*x2815))+(((-1.0)*x2814*x2816)));
evalcond[1]=((((-1.0)*r02*x2815))+(((-1.0)*x2813*x2816))+((x2808*x2811)));
evalcond[2]=((((-1.0)*r12*x2816))+((x2809*x2810))+(((-1.0)*r11*sj5*x2815)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2815))+(((-1.0)*x2810*x2816))+((r11*x2817)));
evalcond[4]=(((x2809*x2814))+(((-1.0)*cj1*x2812))+((sj1*sj2))+(((-1.0)*r22*x2816))+(((-1.0)*r21*sj5*x2815)));
evalcond[5]=(((x2809*x2813))+(((-1.0)*r02*x2816))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2812))+(((-1.0)*x2811*x2815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2818=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2818;
j4eval[1]=IKsign(x2818);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2819=((1.0)*cj5);
IkReal x2820=((((-1.0)*r21*x2819))+(((-1.0)*r20*sj5)));
j4eval[0]=x2820;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2819))))));
j4eval[2]=IKsign(x2820);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2821=cj5*cj5;
IkReal x2822=r11*r11;
IkReal x2823=(cj5*r10);
IkReal x2824=(r11*sj5);
IkReal x2825=(((x2821*x2822))+(((-1.0)*x2822))+(((-1.0)*x2821*(r10*r10)))+(((2.0)*x2823*x2824))+(((-1.0)*(r12*r12))));
j4eval[0]=x2825;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2824))+x2823))));
j4eval[2]=IKsign(x2825);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2826=cj5*cj5;
IkReal x2827=r11*r11;
IkReal x2828=(cj5*r10);
IkReal x2829=(r11*sj5);
CheckValue<IkReal> x2830=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2826*(r10*r10)))+(((-1.0)*x2827))+(((-1.0)*(r12*r12)))+(((2.0)*x2828*x2829))+((x2826*x2827)))),-1);
if(!x2830.valid){
continue;
}
CheckValue<IkReal> x2831 = IKatan2WithCheck(IkReal(((((-1.0)*x2829))+x2828)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2830.value)))+(x2831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2832=IKsin(j4);
IkReal x2833=IKcos(j4);
IkReal x2834=(cj5*r10);
IkReal x2835=(r01*sj5);
IkReal x2836=(cj5*r00);
IkReal x2837=(cj5*r20);
IkReal x2838=((1.0)*x2833);
IkReal x2839=((1.0)*x2832);
IkReal x2840=(sj5*x2832);
evalcond[0]=(((r21*x2840))+(((-1.0)*r22*x2838))+(((-1.0)*x2837*x2839)));
evalcond[1]=((((-1.0)*x2836*x2839))+(((-1.0)*r02*x2838))+((x2832*x2835)));
evalcond[2]=((((-1.0)*r12*x2839))+(((-1.0)*r11*sj5*x2838))+((x2833*x2834)));
evalcond[3]=((-1.0)+((r11*x2840))+(((-1.0)*x2834*x2839))+(((-1.0)*r12*x2838)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2835*x2838))+((x2833*x2836))+(((-1.0)*r02*x2839)));
evalcond[5]=((((-1.0)*r21*sj5*x2838))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2839))+((x2833*x2837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2841=((1.0)*cj5);
CheckValue<IkReal> x2842=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2841))+(((-1.0)*r20*sj5)))),-1);
if(!x2842.valid){
continue;
}
CheckValue<IkReal> x2843 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2842.value)))+(x2843.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2844=IKsin(j4);
IkReal x2845=IKcos(j4);
IkReal x2846=(cj5*r10);
IkReal x2847=(r01*sj5);
IkReal x2848=(cj5*r00);
IkReal x2849=(cj5*r20);
IkReal x2850=((1.0)*x2845);
IkReal x2851=((1.0)*x2844);
IkReal x2852=(sj5*x2844);
evalcond[0]=(((r21*x2852))+(((-1.0)*x2849*x2851))+(((-1.0)*r22*x2850)));
evalcond[1]=(((x2844*x2847))+(((-1.0)*r02*x2850))+(((-1.0)*x2848*x2851)));
evalcond[2]=((((-1.0)*r11*sj5*x2850))+(((-1.0)*r12*x2851))+((x2845*x2846)));
evalcond[3]=((-1.0)+((r11*x2852))+(((-1.0)*r12*x2850))+(((-1.0)*x2846*x2851)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2851))+((x2845*x2848))+(((-1.0)*x2847*x2850)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2845*x2849))+(((-1.0)*r22*x2851))+(((-1.0)*r21*sj5*x2850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2853 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2853.valid){
continue;
}
CheckValue<IkReal> x2854=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2853.value)+(((1.5707963267949)*(x2854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2855=IKsin(j4);
IkReal x2856=IKcos(j4);
IkReal x2857=(cj5*r10);
IkReal x2858=(r01*sj5);
IkReal x2859=(cj5*r00);
IkReal x2860=(cj5*r20);
IkReal x2861=((1.0)*x2856);
IkReal x2862=((1.0)*x2855);
IkReal x2863=(sj5*x2855);
evalcond[0]=(((r21*x2863))+(((-1.0)*r22*x2861))+(((-1.0)*x2860*x2862)));
evalcond[1]=(((x2855*x2858))+(((-1.0)*r02*x2861))+(((-1.0)*x2859*x2862)));
evalcond[2]=((((-1.0)*r12*x2862))+(((-1.0)*r11*sj5*x2861))+((x2856*x2857)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2861))+(((-1.0)*x2857*x2862))+((r11*x2863)));
evalcond[4]=((((-1.0)*r02*x2862))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2858*x2861))+((x2856*x2859)));
evalcond[5]=(((x2856*x2860))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2862))+(((-1.0)*r21*sj5*x2861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2864=((-1.0)*r00);
IkReal x2866 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2866)==0){
continue;
}
IkReal x2865=pow(x2866,-0.5);
CheckValue<IkReal> x2867 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2864),IKFAST_ATAN2_MAGTHRESH);
if(!x2867.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2867.value));
IkReal gconst91=(r01*x2865);
IkReal gconst92=(x2864*x2865);
CheckValue<IkReal> x2868 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2868.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2868.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2869=((-1.0)*r00);
IkReal x2870=x2865;
CheckValue<IkReal> x2872 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2869),IKFAST_ATAN2_MAGTHRESH);
if(!x2872.valid){
continue;
}
IkReal x2871=((-1.0)*(x2872.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2871;
IkReal gconst90=x2871;
IkReal gconst91=(r01*x2870);
IkReal gconst92=(x2869*x2870);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2873=((1.0)*sj0);
IkReal x2874=((1.0)*cj0);
CheckValue<IkReal> x2875 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2874))+(((-1.0)*r12*x2873)))),IkReal(((((-1.0)*gconst91*r11*x2873))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2875.valid){
continue;
}
CheckValue<IkReal> x2876=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2875.value)+(((1.5707963267949)*(x2876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2877=IKsin(j4);
IkReal x2878=IKcos(j4);
IkReal x2879=((1.0)*cj2);
IkReal x2880=(gconst92*r00);
IkReal x2881=(gconst92*r20);
IkReal x2882=((1.0)*sj0);
IkReal x2883=(gconst92*r10);
IkReal x2884=(cj1*sj2);
IkReal x2885=((1.0)*x2878);
IkReal x2886=(gconst91*x2877);
IkReal x2887=((1.0)*x2877);
evalcond[0]=((((-1.0)*r22*x2885))+((r21*x2886))+(((-1.0)*x2881*x2887)));
evalcond[1]=((((-1.0)*x2883*x2887))+cj0+((r11*x2886))+(((-1.0)*r12*x2885)));
evalcond[2]=((((-1.0)*r02*x2885))+((r01*x2886))+(((-1.0)*x2882))+(((-1.0)*x2880*x2887)));
evalcond[3]=((((-1.0)*gconst91*r21*x2885))+(((-1.0)*r22*x2887))+(((-1.0)*cj1*x2879))+((sj1*sj2))+((x2878*x2881)));
evalcond[4]=((((-1.0)*cj0*sj1*x2879))+(((-1.0)*r02*x2887))+(((-1.0)*cj0*x2884))+((x2878*x2880))+(((-1.0)*gconst91*r01*x2885)));
evalcond[5]=((((-1.0)*sj0*sj1*x2879))+(((-1.0)*gconst91*r11*x2885))+(((-1.0)*x2882*x2884))+((x2878*x2883))+(((-1.0)*r12*x2887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2888=((1.0)*gconst92);
CheckValue<IkReal> x2889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2888))+(((-1.0)*gconst91*r10)))),-1);
if(!x2889.valid){
continue;
}
CheckValue<IkReal> x2890 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2888))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2889.value)))+(x2890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2891=IKsin(j4);
IkReal x2892=IKcos(j4);
IkReal x2893=((1.0)*cj2);
IkReal x2894=(gconst92*r00);
IkReal x2895=(gconst92*r20);
IkReal x2896=((1.0)*sj0);
IkReal x2897=(gconst92*r10);
IkReal x2898=(cj1*sj2);
IkReal x2899=((1.0)*x2892);
IkReal x2900=(gconst91*x2891);
IkReal x2901=((1.0)*x2891);
evalcond[0]=((((-1.0)*r22*x2899))+((r21*x2900))+(((-1.0)*x2895*x2901)));
evalcond[1]=(cj0+(((-1.0)*x2897*x2901))+((r11*x2900))+(((-1.0)*r12*x2899)));
evalcond[2]=((((-1.0)*r02*x2899))+(((-1.0)*x2894*x2901))+((r01*x2900))+(((-1.0)*x2896)));
evalcond[3]=((((-1.0)*gconst91*r21*x2899))+((x2892*x2895))+((sj1*sj2))+(((-1.0)*cj1*x2893))+(((-1.0)*r22*x2901)));
evalcond[4]=((((-1.0)*r02*x2901))+((x2892*x2894))+(((-1.0)*cj0*sj1*x2893))+(((-1.0)*cj0*x2898))+(((-1.0)*gconst91*r01*x2899)));
evalcond[5]=((((-1.0)*sj0*sj1*x2893))+(((-1.0)*gconst91*r11*x2899))+((x2892*x2897))+(((-1.0)*x2896*x2898))+(((-1.0)*r12*x2901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2902=((-1.0)*r01);
IkReal x2904 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2904)==0){
continue;
}
IkReal x2903=pow(x2904,-0.5);
CheckValue<IkReal> x2905 = IKatan2WithCheck(IkReal(x2902),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2905.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2905.value))));
IkReal gconst94=(x2902*x2903);
IkReal gconst95=((1.0)*r00*x2903);
CheckValue<IkReal> x2906 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2906.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2906.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2907=((-1.0)*r01);
CheckValue<IkReal> x2910 = IKatan2WithCheck(IkReal(x2907),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2910.valid){
continue;
}
IkReal x2908=((1.0)*(x2910.value));
IkReal x2909=x2903;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2908)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2908)));
IkReal gconst94=(x2907*x2909);
IkReal gconst95=((1.0)*r00*x2909);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2911=((-1.0)*r01);
CheckValue<IkReal> x2914 = IKatan2WithCheck(IkReal(x2911),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2914.valid){
continue;
}
IkReal x2912=((1.0)*(x2914.value));
IkReal x2913=x2903;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2912)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2912)));
IkReal gconst94=(x2911*x2913);
IkReal gconst95=((1.0)*r00*x2913);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2915=((-1.0)*r01);
CheckValue<IkReal> x2918 = IKatan2WithCheck(IkReal(x2915),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2918.valid){
continue;
}
IkReal x2916=((1.0)*(x2918.value));
IkReal x2917=x2903;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2916)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2916)));
IkReal gconst94=(x2915*x2917);
IkReal gconst95=((1.0)*r00*x2917);
IkReal x2919=r02*r02;
IkReal x2920=(r12*sj0);
IkReal x2921=((1.0)*cj0);
IkReal x2922=x2903;
j4eval[0]=((IKabs(((((-1.0)*r02*x2921))+(((-1.0)*x2920)))))+(IKabs((((r02*x2920*x2922))+(((-1.0)*x2921*x2922))+((cj0*x2919*x2922))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2923=((1.0)*sj0);
IkReal x2924=((1.0)*cj0);
CheckValue<IkReal> x2925 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2924))+(((-1.0)*r12*x2923)))),IkReal(((((-1.0)*gconst94*r01*x2924))+(((-1.0)*gconst94*r11*x2923))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2925.valid){
continue;
}
CheckValue<IkReal> x2926=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2925.value)+(((1.5707963267949)*(x2926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2927=IKsin(j4);
IkReal x2928=IKcos(j4);
IkReal x2929=(gconst94*r11);
IkReal x2930=((1.0)*cj2);
IkReal x2931=(gconst94*r21);
IkReal x2932=((1.0)*sj0);
IkReal x2933=(gconst94*r01);
IkReal x2934=(cj1*sj2);
IkReal x2935=((1.0)*x2928);
IkReal x2936=(gconst95*x2928);
IkReal x2937=((1.0)*x2927);
IkReal x2938=(gconst95*x2937);
evalcond[0]=((((-1.0)*r20*x2938))+(((-1.0)*r22*x2935))+((x2927*x2931)));
evalcond[1]=(cj0+(((-1.0)*r12*x2935))+(((-1.0)*r10*x2938))+((x2927*x2929)));
evalcond[2]=((((-1.0)*x2932))+(((-1.0)*r00*x2938))+((x2927*x2933))+(((-1.0)*r02*x2935)));
evalcond[3]=((((-1.0)*x2931*x2935))+((sj1*sj2))+(((-1.0)*cj1*x2930))+((r20*x2936))+(((-1.0)*r22*x2937)));
evalcond[4]=((((-1.0)*x2933*x2935))+(((-1.0)*cj0*x2934))+((r00*x2936))+(((-1.0)*cj0*sj1*x2930))+(((-1.0)*r02*x2937)));
evalcond[5]=(((r10*x2936))+(((-1.0)*x2932*x2934))+(((-1.0)*sj0*sj1*x2930))+(((-1.0)*x2929*x2935))+(((-1.0)*r12*x2937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2939=((1.0)*gconst95);
CheckValue<IkReal> x2940 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2940.valid){
continue;
}
CheckValue<IkReal> x2941=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2939)))),-1);
if(!x2941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2940.value)+(((1.5707963267949)*(x2941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2942=IKsin(j4);
IkReal x2943=IKcos(j4);
IkReal x2944=(gconst94*r11);
IkReal x2945=((1.0)*cj2);
IkReal x2946=(gconst94*r21);
IkReal x2947=((1.0)*sj0);
IkReal x2948=(gconst94*r01);
IkReal x2949=(cj1*sj2);
IkReal x2950=((1.0)*x2943);
IkReal x2951=(gconst95*x2943);
IkReal x2952=((1.0)*x2942);
IkReal x2953=(gconst95*x2952);
evalcond[0]=((((-1.0)*r20*x2953))+(((-1.0)*r22*x2950))+((x2942*x2946)));
evalcond[1]=((((-1.0)*r10*x2953))+cj0+(((-1.0)*r12*x2950))+((x2942*x2944)));
evalcond[2]=((((-1.0)*r02*x2950))+(((-1.0)*x2947))+(((-1.0)*r00*x2953))+((x2942*x2948)));
evalcond[3]=(((sj1*sj2))+((r20*x2951))+(((-1.0)*cj1*x2945))+(((-1.0)*r22*x2952))+(((-1.0)*x2946*x2950)));
evalcond[4]=((((-1.0)*r02*x2952))+(((-1.0)*x2948*x2950))+(((-1.0)*cj0*x2949))+((r00*x2951))+(((-1.0)*cj0*sj1*x2945)));
evalcond[5]=(((r10*x2951))+(((-1.0)*x2944*x2950))+(((-1.0)*x2947*x2949))+(((-1.0)*r12*x2952))+(((-1.0)*sj0*sj1*x2945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2954=((1.0)*gconst95);
CheckValue<IkReal> x2955=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2954)))),-1);
if(!x2955.valid){
continue;
}
CheckValue<IkReal> x2956 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2954))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2955.value)))+(x2956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2957=IKsin(j4);
IkReal x2958=IKcos(j4);
IkReal x2959=(gconst94*r11);
IkReal x2960=((1.0)*cj2);
IkReal x2961=(gconst94*r21);
IkReal x2962=((1.0)*sj0);
IkReal x2963=(gconst94*r01);
IkReal x2964=(cj1*sj2);
IkReal x2965=((1.0)*x2958);
IkReal x2966=(gconst95*x2958);
IkReal x2967=((1.0)*x2957);
IkReal x2968=(gconst95*x2967);
evalcond[0]=((((-1.0)*r20*x2968))+((x2957*x2961))+(((-1.0)*r22*x2965)));
evalcond[1]=(cj0+((x2957*x2959))+(((-1.0)*r10*x2968))+(((-1.0)*r12*x2965)));
evalcond[2]=((((-1.0)*r00*x2968))+(((-1.0)*r02*x2965))+(((-1.0)*x2962))+((x2957*x2963)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2967))+(((-1.0)*x2961*x2965))+((r20*x2966))+(((-1.0)*cj1*x2960)));
evalcond[4]=((((-1.0)*x2963*x2965))+(((-1.0)*r02*x2967))+(((-1.0)*cj0*x2964))+(((-1.0)*cj0*sj1*x2960))+((r00*x2966)));
evalcond[5]=(((r10*x2966))+(((-1.0)*x2959*x2965))+(((-1.0)*x2962*x2964))+(((-1.0)*sj0*sj1*x2960))+(((-1.0)*r12*x2967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2969=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2969;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2970=((1.0)*cj5);
IkReal x2971=((((-1.0)*r11*x2970))+(((-1.0)*r10*sj5)));
j4eval[0]=x2971;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2970)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2971);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2972=cj5*cj5;
IkReal x2973=r01*r01;
IkReal x2974=(r01*sj5);
IkReal x2975=(cj5*r00);
IkReal x2976=((((-1.0)*x2973))+(((-1.0)*(r02*r02)))+(((2.0)*x2974*x2975))+(((-1.0)*x2972*(r00*r00)))+((x2972*x2973)));
j4eval[0]=x2976;
j4eval[1]=IKsign(x2976);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2974))+x2975))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2977=cj5*cj5;
IkReal x2978=r01*r01;
IkReal x2979=(r01*sj5);
IkReal x2980=(cj5*r00);
CheckValue<IkReal> x2981=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2977*(r00*r00)))+((x2977*x2978))+(((-1.0)*x2978))+(((-1.0)*(r02*r02)))+(((2.0)*x2979*x2980)))),-1);
if(!x2981.valid){
continue;
}
CheckValue<IkReal> x2982 = IKatan2WithCheck(IkReal(((((-1.0)*x2979))+x2980)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2981.value)))+(x2982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2983=IKsin(j4);
IkReal x2984=IKcos(j4);
IkReal x2985=(cj5*r10);
IkReal x2986=(r01*sj5);
IkReal x2987=((1.0)*cj2);
IkReal x2988=(cj5*r00);
IkReal x2989=(cj5*r20);
IkReal x2990=((1.0)*x2984);
IkReal x2991=((1.0)*x2983);
IkReal x2992=(sj5*x2983);
evalcond[0]=((((-1.0)*r22*x2990))+(((-1.0)*x2989*x2991))+((r21*x2992)));
evalcond[1]=((((-1.0)*x2985*x2991))+(((-1.0)*r12*x2990))+((r11*x2992)));
evalcond[2]=(((x2984*x2988))+(((-1.0)*x2986*x2990))+(((-1.0)*r02*x2991)));
evalcond[3]=((-1.0)+((x2983*x2986))+(((-1.0)*x2988*x2991))+(((-1.0)*r02*x2990)));
evalcond[4]=((((-1.0)*r22*x2991))+((x2984*x2989))+(((-1.0)*cj1*x2987))+((sj1*sj2))+(((-1.0)*r21*sj5*x2990)));
evalcond[5]=(((x2984*x2985))+(((-1.0)*r12*x2991))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2987))+(((-1.0)*r11*sj5*x2990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2993=((1.0)*cj5);
CheckValue<IkReal> x2994 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2994.valid){
continue;
}
CheckValue<IkReal> x2995=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2993)))),-1);
if(!x2995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2994.value)+(((1.5707963267949)*(x2995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2996=IKsin(j4);
IkReal x2997=IKcos(j4);
IkReal x2998=(cj5*r10);
IkReal x2999=(r01*sj5);
IkReal x3000=((1.0)*cj2);
IkReal x3001=(cj5*r00);
IkReal x3002=(cj5*r20);
IkReal x3003=((1.0)*x2997);
IkReal x3004=((1.0)*x2996);
IkReal x3005=(sj5*x2996);
evalcond[0]=((((-1.0)*r22*x3003))+(((-1.0)*x3002*x3004))+((r21*x3005)));
evalcond[1]=((((-1.0)*x2998*x3004))+(((-1.0)*r12*x3003))+((r11*x3005)));
evalcond[2]=((((-1.0)*r02*x3004))+(((-1.0)*x2999*x3003))+((x2997*x3001)));
evalcond[3]=((-1.0)+((x2996*x2999))+(((-1.0)*r02*x3003))+(((-1.0)*x3001*x3004)));
evalcond[4]=((((-1.0)*r22*x3004))+(((-1.0)*r21*sj5*x3003))+((sj1*sj2))+(((-1.0)*cj1*x3000))+((x2997*x3002)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3003))+((x2997*x2998))+(((-1.0)*r12*x3004))+(((-1.0)*sj1*x3000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3006=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3006.valid){
continue;
}
CheckValue<IkReal> x3007 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3006.value)))+(x3007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3008=IKsin(j4);
IkReal x3009=IKcos(j4);
IkReal x3010=(cj5*r10);
IkReal x3011=(r01*sj5);
IkReal x3012=((1.0)*cj2);
IkReal x3013=(cj5*r00);
IkReal x3014=(cj5*r20);
IkReal x3015=((1.0)*x3009);
IkReal x3016=((1.0)*x3008);
IkReal x3017=(sj5*x3008);
evalcond[0]=((((-1.0)*r22*x3015))+(((-1.0)*x3014*x3016))+((r21*x3017)));
evalcond[1]=((((-1.0)*r12*x3015))+(((-1.0)*x3010*x3016))+((r11*x3017)));
evalcond[2]=(((x3009*x3013))+(((-1.0)*r02*x3016))+(((-1.0)*x3011*x3015)));
evalcond[3]=((-1.0)+((x3008*x3011))+(((-1.0)*r02*x3015))+(((-1.0)*x3013*x3016)));
evalcond[4]=(((x3009*x3014))+(((-1.0)*r22*x3016))+(((-1.0)*r21*sj5*x3015))+((sj1*sj2))+(((-1.0)*cj1*x3012)));
evalcond[5]=(((x3009*x3010))+(((-1.0)*r11*sj5*x3015))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3016))+(((-1.0)*sj1*x3012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3018=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3018;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3018);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3019=((1.0)*cj5);
IkReal x3020=((((-1.0)*r21*x3019))+(((-1.0)*r20*sj5)));
j4eval[0]=x3020;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3019))+((r11*sj5))))));
j4eval[2]=IKsign(x3020);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3021=cj5*cj5;
IkReal x3022=r01*r01;
IkReal x3023=(cj5*r00);
IkReal x3024=(r01*sj5);
IkReal x3025=(x3022+(((-1.0)*x3021*x3022))+(((-2.0)*x3023*x3024))+(r02*r02)+((x3021*(r00*r00))));
j4eval[0]=x3025;
j4eval[1]=((IKabs((x3023+(((-1.0)*x3024)))))+(IKabs(r02)));
j4eval[2]=IKsign(x3025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3026=cj5*cj5;
IkReal x3027=r01*r01;
IkReal x3028=(r01*sj5);
IkReal x3029=(cj5*r00);
CheckValue<IkReal> x3030=IKPowWithIntegerCheck(IKsign((((x3026*(r00*r00)))+(((-2.0)*x3028*x3029))+x3027+(((-1.0)*x3026*x3027))+(r02*r02))),-1);
if(!x3030.valid){
continue;
}
CheckValue<IkReal> x3031 = IKatan2WithCheck(IkReal((x3029+(((-1.0)*x3028)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3030.value)))+(x3031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3032=IKsin(j4);
IkReal x3033=IKcos(j4);
IkReal x3034=(cj5*r10);
IkReal x3035=(r01*sj5);
IkReal x3036=(cj5*r00);
IkReal x3037=(cj5*r20);
IkReal x3038=((1.0)*x3033);
IkReal x3039=((1.0)*x3032);
IkReal x3040=(sj5*x3032);
evalcond[0]=(((r21*x3040))+(((-1.0)*x3037*x3039))+(((-1.0)*r22*x3038)));
evalcond[1]=((((-1.0)*r12*x3038))+(((-1.0)*x3034*x3039))+((r11*x3040)));
evalcond[2]=((((-1.0)*x3035*x3038))+(((-1.0)*r02*x3039))+((x3033*x3036)));
evalcond[3]=((1.0)+(((-1.0)*x3036*x3039))+(((-1.0)*r02*x3038))+((x3032*x3035)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3033*x3034))+(((-1.0)*r12*x3039))+(((-1.0)*r11*sj5*x3038)));
evalcond[5]=((((-1.0)*r21*sj5*x3038))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3033*x3037))+(((-1.0)*r22*x3039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3041=((1.0)*cj5);
CheckValue<IkReal> x3042=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3041))+(((-1.0)*r20*sj5)))),-1);
if(!x3042.valid){
continue;
}
CheckValue<IkReal> x3043 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3041))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3042.value)))+(x3043.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3044=IKsin(j4);
IkReal x3045=IKcos(j4);
IkReal x3046=(cj5*r10);
IkReal x3047=(r01*sj5);
IkReal x3048=(cj5*r00);
IkReal x3049=(cj5*r20);
IkReal x3050=((1.0)*x3045);
IkReal x3051=((1.0)*x3044);
IkReal x3052=(sj5*x3044);
evalcond[0]=(((r21*x3052))+(((-1.0)*r22*x3050))+(((-1.0)*x3049*x3051)));
evalcond[1]=(((r11*x3052))+(((-1.0)*x3046*x3051))+(((-1.0)*r12*x3050)));
evalcond[2]=((((-1.0)*x3047*x3050))+(((-1.0)*r02*x3051))+((x3045*x3048)));
evalcond[3]=((1.0)+(((-1.0)*x3048*x3051))+(((-1.0)*r02*x3050))+((x3044*x3047)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3045*x3046))+(((-1.0)*r12*x3051))+(((-1.0)*r11*sj5*x3050)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3050))+((x3045*x3049))+(((-1.0)*r22*x3051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3053 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3053.valid){
continue;
}
CheckValue<IkReal> x3054=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3053.value)+(((1.5707963267949)*(x3054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3055=IKsin(j4);
IkReal x3056=IKcos(j4);
IkReal x3057=(cj5*r10);
IkReal x3058=(r01*sj5);
IkReal x3059=(cj5*r00);
IkReal x3060=(cj5*r20);
IkReal x3061=((1.0)*x3056);
IkReal x3062=((1.0)*x3055);
IkReal x3063=(sj5*x3055);
evalcond[0]=((((-1.0)*r22*x3061))+(((-1.0)*x3060*x3062))+((r21*x3063)));
evalcond[1]=((((-1.0)*r12*x3061))+((r11*x3063))+(((-1.0)*x3057*x3062)));
evalcond[2]=((((-1.0)*x3058*x3061))+((x3056*x3059))+(((-1.0)*r02*x3062)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3061))+((x3055*x3058))+(((-1.0)*x3059*x3062)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3061))+((cj1*sj2))+((x3056*x3057))+(((-1.0)*r12*x3062)));
evalcond[5]=((((-1.0)*r21*sj5*x3061))+(((-1.0)*r22*x3062))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3056*x3060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3064=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3064);
rxp1_1=(px*r21);
rxp1_2=(r11*x3064);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3065=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3065);
rxp1_1=(px*r21);
rxp1_2=(r11*x3065);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3066=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3066);
rxp1_1=(px*r21);
rxp1_2=(r11*x3066);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3069=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3069.valid){
continue;
}
IkReal x3067=x3069.value;
IkReal x3068=(sj0*x3067);
cj4array[0]=(((cj2*sj1*x3068))+((cj1*sj2*x3068)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3070=IKsin(j4);
IkReal x3071=IKcos(j4);
IkReal x3072=(cj5*r20);
IkReal x3073=(r21*sj5);
IkReal x3074=((1.0)*x3070);
IkReal x3075=((1.0)*x3071);
evalcond[0]=((-1.0)*r02*x3070);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3075)));
evalcond[2]=((((-1.0)*x3072*x3074))+((x3070*x3073)));
evalcond[3]=((((-1.0)*cj5*r10*x3074))+((r11*sj5*x3070)));
evalcond[4]=((((-1.0)*x3073*x3075))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3071*x3072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3077=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3077.valid){
continue;
}
IkReal x3076=x3077.value;
cj4array[0]=(((cj1*cj2*x3076))+(((-1.0)*sj1*sj2*x3076)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3078=IKsin(j4);
IkReal x3079=IKcos(j4);
IkReal x3080=(r11*sj5);
IkReal x3081=((1.0)*sj0);
IkReal x3082=((1.0)*x3079);
IkReal x3083=((1.0)*cj5*x3078);
evalcond[0]=((-1.0)*r02*x3078);
evalcond[1]=((((-1.0)*x3081))+(((-1.0)*r02*x3082)));
evalcond[2]=((((-1.0)*r20*x3083))+((r21*sj5*x3078)));
evalcond[3]=((((-1.0)*r10*x3083))+((x3078*x3080)));
evalcond[4]=((((-1.0)*x3080*x3082))+(((-1.0)*cj1*sj2*x3081))+(((-1.0)*cj2*sj1*x3081))+((cj5*r10*x3079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3084=IKPowWithIntegerCheck(r02,-1);
if(!x3084.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3084.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3085=IKsin(j4);
IkReal x3086=IKcos(j4);
IkReal x3087=((1.0)*sj0);
IkReal x3088=(cj5*x3086);
IkReal x3089=(sj5*x3085);
IkReal x3090=((1.0)*sj5*x3086);
IkReal x3091=((1.0)*cj5*x3085);
evalcond[0]=((-1.0)*r02*x3085);
evalcond[1]=(((r21*x3089))+(((-1.0)*r20*x3091)));
evalcond[2]=(((r11*x3089))+(((-1.0)*r10*x3091)));
evalcond[3]=(((r20*x3088))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x3090)));
evalcond[4]=((((-1.0)*r11*x3090))+((r10*x3088))+(((-1.0)*cj1*sj2*x3087))+(((-1.0)*cj2*sj1*x3087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3092=((1.0)*sj0);
IkReal x3093=((1.0)*cj0);
CheckValue<IkReal> x3094 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3093))+(((-1.0)*r12*x3092)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3093))+(((-1.0)*r11*sj5*x3092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3094.valid){
continue;
}
CheckValue<IkReal> x3095=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3094.value)+(((1.5707963267949)*(x3095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3096=IKsin(j4);
IkReal x3097=IKcos(j4);
IkReal x3098=(cj5*r10);
IkReal x3099=(r01*sj5);
IkReal x3100=((1.0)*cj2);
IkReal x3101=(cj5*r00);
IkReal x3102=((1.0)*sj0);
IkReal x3103=(cj5*r20);
IkReal x3104=(cj1*sj2);
IkReal x3105=((1.0)*x3097);
IkReal x3106=((1.0)*x3096);
IkReal x3107=(sj5*x3096);
evalcond[0]=((((-1.0)*x3103*x3106))+((r21*x3107))+(((-1.0)*r22*x3105)));
evalcond[1]=(((r11*x3107))+cj0+(((-1.0)*r12*x3105))+(((-1.0)*x3098*x3106)));
evalcond[2]=((((-1.0)*x3102))+((x3096*x3099))+(((-1.0)*x3101*x3106))+(((-1.0)*r02*x3105)));
evalcond[3]=(((x3097*x3103))+(((-1.0)*cj1*x3100))+((sj1*sj2))+(((-1.0)*r22*x3106))+(((-1.0)*r21*sj5*x3105)));
evalcond[4]=(((x3097*x3101))+(((-1.0)*x3099*x3105))+(((-1.0)*r02*x3106))+(((-1.0)*cj0*x3104))+(((-1.0)*cj0*sj1*x3100)));
evalcond[5]=((((-1.0)*r12*x3106))+(((-1.0)*x3102*x3104))+(((-1.0)*sj0*sj1*x3100))+(((-1.0)*r11*sj5*x3105))+((x3097*x3098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3108=((1.0)*cj5);
CheckValue<IkReal> x3109 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3108))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3109.valid){
continue;
}
CheckValue<IkReal> x3110=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3108)))),-1);
if(!x3110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3109.value)+(((1.5707963267949)*(x3110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3111=IKsin(j4);
IkReal x3112=IKcos(j4);
IkReal x3113=(cj5*r10);
IkReal x3114=(r01*sj5);
IkReal x3115=((1.0)*cj2);
IkReal x3116=(cj5*r00);
IkReal x3117=((1.0)*sj0);
IkReal x3118=(cj5*r20);
IkReal x3119=(cj1*sj2);
IkReal x3120=((1.0)*x3112);
IkReal x3121=((1.0)*x3111);
IkReal x3122=(sj5*x3111);
evalcond[0]=(((r21*x3122))+(((-1.0)*r22*x3120))+(((-1.0)*x3118*x3121)));
evalcond[1]=(cj0+(((-1.0)*x3113*x3121))+(((-1.0)*r12*x3120))+((r11*x3122)));
evalcond[2]=((((-1.0)*r02*x3120))+(((-1.0)*x3116*x3121))+((x3111*x3114))+(((-1.0)*x3117)));
evalcond[3]=(((x3112*x3118))+(((-1.0)*r21*sj5*x3120))+(((-1.0)*cj1*x3115))+((sj1*sj2))+(((-1.0)*r22*x3121)));
evalcond[4]=((((-1.0)*cj0*x3119))+(((-1.0)*x3114*x3120))+(((-1.0)*r02*x3121))+((x3112*x3116))+(((-1.0)*cj0*sj1*x3115)));
evalcond[5]=((((-1.0)*x3117*x3119))+((x3112*x3113))+(((-1.0)*sj0*sj1*x3115))+(((-1.0)*r12*x3121))+(((-1.0)*r11*sj5*x3120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3123=((1.0)*cj5);
CheckValue<IkReal> x3124=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3123)))),-1);
if(!x3124.valid){
continue;
}
CheckValue<IkReal> x3125 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3123))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3124.value)))+(x3125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3126=IKsin(j4);
IkReal x3127=IKcos(j4);
IkReal x3128=(cj5*r10);
IkReal x3129=(r01*sj5);
IkReal x3130=((1.0)*cj2);
IkReal x3131=(cj5*r00);
IkReal x3132=((1.0)*sj0);
IkReal x3133=(cj5*r20);
IkReal x3134=(cj1*sj2);
IkReal x3135=((1.0)*x3127);
IkReal x3136=((1.0)*x3126);
IkReal x3137=(sj5*x3126);
evalcond[0]=((((-1.0)*x3133*x3136))+((r21*x3137))+(((-1.0)*r22*x3135)));
evalcond[1]=(cj0+(((-1.0)*x3128*x3136))+(((-1.0)*r12*x3135))+((r11*x3137)));
evalcond[2]=((((-1.0)*x3131*x3136))+(((-1.0)*r02*x3135))+((x3126*x3129))+(((-1.0)*x3132)));
evalcond[3]=((((-1.0)*r21*sj5*x3135))+((sj1*sj2))+((x3127*x3133))+(((-1.0)*cj1*x3130))+(((-1.0)*r22*x3136)));
evalcond[4]=((((-1.0)*cj0*sj1*x3130))+(((-1.0)*r02*x3136))+(((-1.0)*cj0*x3134))+((x3127*x3131))+(((-1.0)*x3129*x3135)));
evalcond[5]=((((-1.0)*x3132*x3134))+((x3127*x3128))+(((-1.0)*r12*x3136))+(((-1.0)*r11*sj5*x3135))+(((-1.0)*sj0*sj1*x3130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3138=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3138;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3138);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3139=r21*r21;
IkReal x3140=cj5*cj5;
IkReal x3141=(sj1*sj2);
IkReal x3142=(r21*sj5);
IkReal x3143=(cj5*r20);
IkReal x3144=(cj1*cj2);
IkReal x3145=((((-1.0)*x3139))+(((2.0)*x3142*x3143))+(((-1.0)*(r22*r22)))+((x3139*x3140))+(((-1.0)*x3140*(r20*r20))));
j4eval[0]=x3145;
j4eval[1]=((IKabs(((((-1.0)*r22*x3144))+((r22*x3141)))))+(IKabs(((((-1.0)*x3141*x3143))+((x3143*x3144))+(((-1.0)*x3142*x3144))+((x3141*x3142))))));
j4eval[2]=IKsign(x3145);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3146=IKcos(j0);
IkReal x3147=IKsin(j0);
evalcond[0]=((((0.24365)*x3146))+(((-1.0)*px))+(((-0.11235)*x3147)));
evalcond[1]=((((0.11235)*x3146))+(((0.24365)*x3147))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3148=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3148;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3148);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3149=((1.0)*cj5);
IkReal x3150=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3149)));
j4eval[0]=x3150;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3149))))));
j4eval[2]=IKsign(x3150);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3151=((1.0)*cj5);
IkReal x3152=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3151)));
j4eval[0]=x3152;
j4eval[1]=IKsign(x3152);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3151))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3153=((1.0)*cj5);
CheckValue<IkReal> x3154 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3153)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3154.valid){
continue;
}
CheckValue<IkReal> x3155=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3153)))),-1);
if(!x3155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3154.value)+(((1.5707963267949)*(x3155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3156=IKcos(j4);
IkReal x3157=IKsin(j4);
IkReal x3158=((1.0)*sj0);
IkReal x3159=(cj5*r00);
IkReal x3160=(cj5*r10);
IkReal x3161=(cj5*r20);
IkReal x3162=((1.0)*x3156);
IkReal x3163=((1.0)*x3157);
IkReal x3164=(sj5*x3156);
IkReal x3165=(sj5*x3157);
evalcond[0]=((((-1.0)*x3161*x3162))+((r22*x3157))+((r21*x3164)));
evalcond[1]=((((-1.0)*x3161*x3163))+((r21*x3165))+(((-1.0)*r22*x3162)));
evalcond[2]=((((-1.0)*r12*x3162))+cj0+(((-1.0)*x3160*x3163))+((r11*x3165)));
evalcond[3]=(((r02*x3157))+((r01*x3164))+(((-1.0)*x3159*x3162))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3158))+(((-1.0)*x3160*x3162))+((r11*x3164))+((r12*x3157)));
evalcond[5]=((((-1.0)*x3158))+((r01*x3165))+(((-1.0)*r02*x3162))+(((-1.0)*x3159*x3163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3166=((1.0)*cj5);
CheckValue<IkReal> x3167 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3167.valid){
continue;
}
CheckValue<IkReal> x3168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3166)))),-1);
if(!x3168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3167.value)+(((1.5707963267949)*(x3168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3169=IKcos(j4);
IkReal x3170=IKsin(j4);
IkReal x3171=((1.0)*sj0);
IkReal x3172=(cj5*r00);
IkReal x3173=(cj5*r10);
IkReal x3174=(cj5*r20);
IkReal x3175=((1.0)*x3169);
IkReal x3176=((1.0)*x3170);
IkReal x3177=(sj5*x3169);
IkReal x3178=(sj5*x3170);
evalcond[0]=((((-1.0)*x3174*x3175))+((r22*x3170))+((r21*x3177)));
evalcond[1]=((((-1.0)*x3174*x3176))+((r21*x3178))+(((-1.0)*r22*x3175)));
evalcond[2]=(((r11*x3178))+cj0+(((-1.0)*r12*x3175))+(((-1.0)*x3173*x3176)));
evalcond[3]=(((r02*x3170))+(((-1.0)*x3172*x3175))+((r01*x3177))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3177))+(((-1.0)*x3171))+(((-1.0)*x3173*x3175))+((r12*x3170)));
evalcond[5]=((((-1.0)*x3171))+(((-1.0)*x3172*x3176))+((r01*x3178))+(((-1.0)*r02*x3175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3179 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3179.valid){
continue;
}
CheckValue<IkReal> x3180=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3179.value)+(((1.5707963267949)*(x3180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3181=IKcos(j4);
IkReal x3182=IKsin(j4);
IkReal x3183=((1.0)*sj0);
IkReal x3184=(cj5*r00);
IkReal x3185=(cj5*r10);
IkReal x3186=(cj5*r20);
IkReal x3187=((1.0)*x3181);
IkReal x3188=((1.0)*x3182);
IkReal x3189=(sj5*x3181);
IkReal x3190=(sj5*x3182);
evalcond[0]=(((r22*x3182))+(((-1.0)*x3186*x3187))+((r21*x3189)));
evalcond[1]=(((r21*x3190))+(((-1.0)*r22*x3187))+(((-1.0)*x3186*x3188)));
evalcond[2]=(cj0+(((-1.0)*x3185*x3188))+((r11*x3190))+(((-1.0)*r12*x3187)));
evalcond[3]=((((-1.0)*x3184*x3187))+((r01*x3189))+(((-1.0)*cj0))+((r02*x3182)));
evalcond[4]=((((-1.0)*x3185*x3187))+((r12*x3182))+((r11*x3189))+(((-1.0)*x3183)));
evalcond[5]=((((-1.0)*x3184*x3188))+(((-1.0)*r02*x3187))+((r01*x3190))+(((-1.0)*x3183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3191=IKcos(j0);
IkReal x3192=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.11235)*x3192))+(((0.24365)*x3191)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x3191))+(((0.24365)*x3192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3193=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3193;
j4eval[1]=IKsign(x3193);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3194=((1.0)*cj5);
IkReal x3195=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3194)));
j4eval[0]=x3195;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3194)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3195);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3196=cj5*cj5;
IkReal x3197=((1.0)*r20);
IkReal x3198=(r01*r21);
IkReal x3199=(r21*sj5);
IkReal x3200=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3199))+((x3196*x3198))+(((-1.0)*r00*x3196*x3197))+(((-1.0)*x3198)));
j4eval[0]=x3200;
j4eval[1]=((IKabs((((cj0*x3199))+(((-1.0)*cj0*cj5*x3197)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3201=cj5*cj5;
IkReal x3202=((1.0)*r20);
IkReal x3203=(r01*r21);
IkReal x3204=(r21*sj5);
CheckValue<IkReal> x3205=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3203))+((x3201*x3203))+(((-1.0)*r00*x3201*x3202))+((cj5*r00*x3204)))),-1);
if(!x3205.valid){
continue;
}
CheckValue<IkReal> x3206 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3204))+(((-1.0)*cj0*cj5*x3202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3205.value)))+(x3206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3207=IKcos(j4);
IkReal x3208=IKsin(j4);
IkReal x3209=(cj5*r00);
IkReal x3210=(cj5*r10);
IkReal x3211=(cj5*r20);
IkReal x3212=((1.0)*x3207);
IkReal x3213=((1.0)*x3208);
IkReal x3214=(sj5*x3207);
IkReal x3215=(sj5*x3208);
evalcond[0]=((((-1.0)*x3211*x3212))+((r22*x3208))+((r21*x3214)));
evalcond[1]=((((-1.0)*x3211*x3213))+((r21*x3215))+(((-1.0)*r22*x3212)));
evalcond[2]=(cj0+((r01*x3214))+(((-1.0)*x3209*x3212))+((r02*x3208)));
evalcond[3]=(sj0+(((-1.0)*x3210*x3212))+((r12*x3208))+((r11*x3214)));
evalcond[4]=(cj0+(((-1.0)*x3210*x3213))+((r11*x3215))+(((-1.0)*r12*x3212)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3215))+(((-1.0)*x3209*x3213))+(((-1.0)*r02*x3212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3216=((1.0)*cj5);
CheckValue<IkReal> x3217=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3216)))),-1);
if(!x3217.valid){
continue;
}
CheckValue<IkReal> x3218 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3216)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3217.value)))+(x3218.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3219=IKcos(j4);
IkReal x3220=IKsin(j4);
IkReal x3221=(cj5*r00);
IkReal x3222=(cj5*r10);
IkReal x3223=(cj5*r20);
IkReal x3224=((1.0)*x3219);
IkReal x3225=((1.0)*x3220);
IkReal x3226=(sj5*x3219);
IkReal x3227=(sj5*x3220);
evalcond[0]=(((r21*x3226))+((r22*x3220))+(((-1.0)*x3223*x3224)));
evalcond[1]=(((r21*x3227))+(((-1.0)*r22*x3224))+(((-1.0)*x3223*x3225)));
evalcond[2]=(cj0+((r02*x3220))+((r01*x3226))+(((-1.0)*x3221*x3224)));
evalcond[3]=(((r12*x3220))+sj0+((r11*x3226))+(((-1.0)*x3222*x3224)));
evalcond[4]=(cj0+((r11*x3227))+(((-1.0)*x3222*x3225))+(((-1.0)*r12*x3224)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3224))+((r01*x3227))+(((-1.0)*x3221*x3225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3228 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3228.valid){
continue;
}
CheckValue<IkReal> x3229=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3228.value)+(((1.5707963267949)*(x3229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3230=IKcos(j4);
IkReal x3231=IKsin(j4);
IkReal x3232=(cj5*r00);
IkReal x3233=(cj5*r10);
IkReal x3234=(cj5*r20);
IkReal x3235=((1.0)*x3230);
IkReal x3236=((1.0)*x3231);
IkReal x3237=(sj5*x3230);
IkReal x3238=(sj5*x3231);
evalcond[0]=(((r22*x3231))+(((-1.0)*x3234*x3235))+((r21*x3237)));
evalcond[1]=((((-1.0)*r22*x3235))+(((-1.0)*x3234*x3236))+((r21*x3238)));
evalcond[2]=(cj0+((r01*x3237))+(((-1.0)*x3232*x3235))+((r02*x3231)));
evalcond[3]=(sj0+((r11*x3237))+(((-1.0)*x3233*x3235))+((r12*x3231)));
evalcond[4]=(cj0+((r11*x3238))+(((-1.0)*x3233*x3236))+(((-1.0)*r12*x3235)));
evalcond[5]=((((-1.0)*r02*x3235))+(((-1.0)*sj0))+((r01*x3238))+(((-1.0)*x3232*x3236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3239=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3239;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3239);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3240=((1.0)*cj5);
IkReal x3241=((((-1.0)*r01*x3240))+(((-1.0)*r00*sj5)));
j4eval[0]=x3241;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3240)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3241);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3242=((1.0)*cj5);
IkReal x3243=((((-1.0)*r01*x3242))+(((-1.0)*r00*sj5)));
j4eval[0]=x3243;
j4eval[1]=IKsign(x3243);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3242))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3244=((1.0)*cj5);
CheckValue<IkReal> x3245=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3244))+(((-1.0)*r00*sj5)))),-1);
if(!x3245.valid){
continue;
}
CheckValue<IkReal> x3246 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3244)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3245.value)))+(x3246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3247=IKcos(j4);
IkReal x3248=IKsin(j4);
IkReal x3249=((1.0)*sj0);
IkReal x3250=(cj5*r00);
IkReal x3251=(cj5*r10);
IkReal x3252=(cj5*r20);
IkReal x3253=((1.0)*x3247);
IkReal x3254=((1.0)*x3248);
IkReal x3255=(sj5*x3247);
IkReal x3256=(sj5*x3248);
evalcond[0]=(((r22*x3248))+((r21*x3255))+(((-1.0)*x3252*x3253)));
evalcond[1]=(((r21*x3256))+(((-1.0)*r22*x3253))+(((-1.0)*x3252*x3254)));
evalcond[2]=(cj0+((r11*x3256))+(((-1.0)*x3251*x3254))+(((-1.0)*r12*x3253)));
evalcond[3]=(((r01*x3255))+(((-1.0)*x3250*x3253))+((r02*x3248))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3255))+(((-1.0)*x3249))+((r12*x3248))+(((-1.0)*x3251*x3253)));
evalcond[5]=((((-1.0)*r02*x3253))+((r01*x3256))+(((-1.0)*x3249))+(((-1.0)*x3250*x3254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3257=((1.0)*cj5);
CheckValue<IkReal> x3258 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3258.valid){
continue;
}
CheckValue<IkReal> x3259=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3257)))),-1);
if(!x3259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3258.value)+(((1.5707963267949)*(x3259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3260=IKcos(j4);
IkReal x3261=IKsin(j4);
IkReal x3262=((1.0)*sj0);
IkReal x3263=(cj5*r00);
IkReal x3264=(cj5*r10);
IkReal x3265=(cj5*r20);
IkReal x3266=((1.0)*x3260);
IkReal x3267=((1.0)*x3261);
IkReal x3268=(sj5*x3260);
IkReal x3269=(sj5*x3261);
evalcond[0]=(((r21*x3268))+(((-1.0)*x3265*x3266))+((r22*x3261)));
evalcond[1]=(((r21*x3269))+(((-1.0)*x3265*x3267))+(((-1.0)*r22*x3266)));
evalcond[2]=(cj0+(((-1.0)*r12*x3266))+(((-1.0)*x3264*x3267))+((r11*x3269)));
evalcond[3]=(((r01*x3268))+((r02*x3261))+(((-1.0)*x3263*x3266))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3262))+(((-1.0)*x3264*x3266))+((r11*x3268))+((r12*x3261)));
evalcond[5]=(((r01*x3269))+(((-1.0)*x3262))+(((-1.0)*x3263*x3267))+(((-1.0)*r02*x3266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3270 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3270.valid){
continue;
}
CheckValue<IkReal> x3271=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3270.value)+(((1.5707963267949)*(x3271.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3272=IKcos(j4);
IkReal x3273=IKsin(j4);
IkReal x3274=((1.0)*sj0);
IkReal x3275=(cj5*r00);
IkReal x3276=(cj5*r10);
IkReal x3277=(cj5*r20);
IkReal x3278=((1.0)*x3272);
IkReal x3279=((1.0)*x3273);
IkReal x3280=(sj5*x3272);
IkReal x3281=(sj5*x3273);
evalcond[0]=(((r21*x3280))+(((-1.0)*x3277*x3278))+((r22*x3273)));
evalcond[1]=(((r21*x3281))+(((-1.0)*x3277*x3279))+(((-1.0)*r22*x3278)));
evalcond[2]=((((-1.0)*x3276*x3279))+(((-1.0)*r12*x3278))+cj0+((r11*x3281)));
evalcond[3]=((((-1.0)*x3275*x3278))+((r02*x3273))+(((-1.0)*cj0))+((r01*x3280)));
evalcond[4]=((((-1.0)*x3276*x3278))+(((-1.0)*x3274))+((r12*x3273))+((r11*x3280)));
evalcond[5]=((((-1.0)*x3275*x3279))+(((-1.0)*x3274))+(((-1.0)*r02*x3278))+((r01*x3281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3282=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3282;
j4eval[1]=IKsign(x3282);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3283=((1.0)*cj5);
IkReal x3284=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3283)));
j4eval[0]=x3284;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3283))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3285=cj5*cj5;
IkReal x3286=((1.0)*r20);
IkReal x3287=(r01*r21);
IkReal x3288=(r21*sj5);
IkReal x3289=(((cj5*r01*r20*sj5))+((x3285*x3287))+(((-1.0)*r02*r22))+((cj5*r00*x3288))+(((-1.0)*r00*x3285*x3286))+(((-1.0)*x3287)));
j4eval[0]=x3289;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3286))+((cj0*x3288)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3290=cj5*cj5;
IkReal x3291=((1.0)*r20);
IkReal x3292=(r01*r21);
IkReal x3293=(r21*sj5);
CheckValue<IkReal> x3294=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3290*x3291))+(((-1.0)*r02*r22))+((x3290*x3292))+((cj5*r00*x3293))+(((-1.0)*x3292)))),-1);
if(!x3294.valid){
continue;
}
CheckValue<IkReal> x3295 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3291))+((cj0*x3293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3294.value)))+(x3295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3296=IKcos(j4);
IkReal x3297=IKsin(j4);
IkReal x3298=(cj5*r00);
IkReal x3299=(cj5*r10);
IkReal x3300=(cj5*r20);
IkReal x3301=((1.0)*x3296);
IkReal x3302=((1.0)*x3297);
IkReal x3303=(sj5*x3296);
IkReal x3304=(sj5*x3297);
evalcond[0]=(((r21*x3303))+((r22*x3297))+(((-1.0)*x3300*x3301)));
evalcond[1]=(((r21*x3304))+(((-1.0)*r22*x3301))+(((-1.0)*x3300*x3302)));
evalcond[2]=(cj0+((r02*x3297))+(((-1.0)*x3298*x3301))+((r01*x3303)));
evalcond[3]=(sj0+((r11*x3303))+(((-1.0)*x3299*x3301))+((r12*x3297)));
evalcond[4]=(cj0+((r11*x3304))+(((-1.0)*r12*x3301))+(((-1.0)*x3299*x3302)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3298*x3302))+(((-1.0)*r02*x3301))+((r01*x3304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3305=((1.0)*cj5);
CheckValue<IkReal> x3306=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3305)))),-1);
if(!x3306.valid){
continue;
}
CheckValue<IkReal> x3307 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3305)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3306.value)))+(x3307.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3308=IKcos(j4);
IkReal x3309=IKsin(j4);
IkReal x3310=(cj5*r00);
IkReal x3311=(cj5*r10);
IkReal x3312=(cj5*r20);
IkReal x3313=((1.0)*x3308);
IkReal x3314=((1.0)*x3309);
IkReal x3315=(sj5*x3308);
IkReal x3316=(sj5*x3309);
evalcond[0]=(((r21*x3315))+((r22*x3309))+(((-1.0)*x3312*x3313)));
evalcond[1]=(((r21*x3316))+(((-1.0)*r22*x3313))+(((-1.0)*x3312*x3314)));
evalcond[2]=(cj0+((r02*x3309))+(((-1.0)*x3310*x3313))+((r01*x3315)));
evalcond[3]=(sj0+((r11*x3315))+((r12*x3309))+(((-1.0)*x3311*x3313)));
evalcond[4]=(cj0+((r11*x3316))+(((-1.0)*x3311*x3314))+(((-1.0)*r12*x3313)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3313))+(((-1.0)*x3310*x3314))+((r01*x3316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3317 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3317.valid){
continue;
}
CheckValue<IkReal> x3318=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3317.value)+(((1.5707963267949)*(x3318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3319=IKcos(j4);
IkReal x3320=IKsin(j4);
IkReal x3321=(cj5*r00);
IkReal x3322=(cj5*r10);
IkReal x3323=(cj5*r20);
IkReal x3324=((1.0)*x3319);
IkReal x3325=((1.0)*x3320);
IkReal x3326=(sj5*x3319);
IkReal x3327=(sj5*x3320);
evalcond[0]=(((r22*x3320))+((r21*x3326))+(((-1.0)*x3323*x3324)));
evalcond[1]=(((r21*x3327))+(((-1.0)*x3323*x3325))+(((-1.0)*r22*x3324)));
evalcond[2]=(cj0+((r01*x3326))+(((-1.0)*x3321*x3324))+((r02*x3320)));
evalcond[3]=(((r12*x3320))+sj0+((r11*x3326))+(((-1.0)*x3322*x3324)));
evalcond[4]=(cj0+((r11*x3327))+(((-1.0)*x3322*x3325))+(((-1.0)*r12*x3324)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3324))+((r01*x3327))+(((-1.0)*x3321*x3325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3328=IKcos(j0);
IkReal x3329=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.24365)*x3328))+(((-0.11235)*x3329)));
evalcond[1]=((((0.11235)*x3328))+(((-1.0)*py))+(((-0.24365)*x3329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3330=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3330;
j4eval[1]=IKsign(x3330);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3331=((1.0)*cj5);
IkReal x3332=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3331)));
j4eval[0]=x3332;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3331)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3332);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3333=cj5*cj5;
IkReal x3334=((1.0)*r20);
IkReal x3335=(r01*r21);
IkReal x3336=(r21*sj5);
IkReal x3337=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3333*x3335))+((cj5*r00*x3336))+(((-1.0)*x3335))+(((-1.0)*r00*x3333*x3334)));
j4eval[0]=x3337;
j4eval[1]=((IKabs((((cj0*x3336))+(((-1.0)*cj0*cj5*x3334)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3337);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3338=cj5*cj5;
IkReal x3339=((1.0)*r20);
IkReal x3340=(r01*r21);
IkReal x3341=(r21*sj5);
CheckValue<IkReal> x3342 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3341))+(((-1.0)*cj0*cj5*x3339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3342.valid){
continue;
}
CheckValue<IkReal> x3343=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3340))+(((-1.0)*r00*x3338*x3339))+(((-1.0)*r02*r22))+((cj5*r00*x3341))+((x3338*x3340)))),-1);
if(!x3343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3342.value)+(((1.5707963267949)*(x3343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3344=IKcos(j4);
IkReal x3345=IKsin(j4);
IkReal x3346=(cj5*r00);
IkReal x3347=(cj5*r10);
IkReal x3348=(cj5*r20);
IkReal x3349=((1.0)*x3344);
IkReal x3350=((1.0)*x3345);
IkReal x3351=(sj5*x3344);
IkReal x3352=(sj5*x3345);
evalcond[0]=((((-1.0)*x3348*x3349))+((r22*x3345))+((r21*x3351)));
evalcond[1]=((((-1.0)*x3348*x3350))+((r21*x3352))+(((-1.0)*r22*x3349)));
evalcond[2]=(cj0+((r01*x3351))+(((-1.0)*x3346*x3349))+((r02*x3345)));
evalcond[3]=((((-1.0)*x3347*x3349))+sj0+((r11*x3351))+((r12*x3345)));
evalcond[4]=(cj0+((r11*x3352))+(((-1.0)*x3347*x3350))+(((-1.0)*r12*x3349)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3346*x3350))+((r01*x3352))+(((-1.0)*r02*x3349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3353=((1.0)*cj5);
CheckValue<IkReal> x3354=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3353)))),-1);
if(!x3354.valid){
continue;
}
CheckValue<IkReal> x3355 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3353)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3354.value)))+(x3355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3356=IKcos(j4);
IkReal x3357=IKsin(j4);
IkReal x3358=(cj5*r00);
IkReal x3359=(cj5*r10);
IkReal x3360=(cj5*r20);
IkReal x3361=((1.0)*x3356);
IkReal x3362=((1.0)*x3357);
IkReal x3363=(sj5*x3356);
IkReal x3364=(sj5*x3357);
evalcond[0]=((((-1.0)*x3360*x3361))+((r21*x3363))+((r22*x3357)));
evalcond[1]=((((-1.0)*x3360*x3362))+((r21*x3364))+(((-1.0)*r22*x3361)));
evalcond[2]=(cj0+((r01*x3363))+((r02*x3357))+(((-1.0)*x3358*x3361)));
evalcond[3]=((((-1.0)*x3359*x3361))+((r12*x3357))+sj0+((r11*x3363)));
evalcond[4]=((((-1.0)*x3359*x3362))+(((-1.0)*r12*x3361))+cj0+((r11*x3364)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3364))+(((-1.0)*r02*x3361))+(((-1.0)*x3358*x3362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3365 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3365.valid){
continue;
}
CheckValue<IkReal> x3366=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3365.value)+(((1.5707963267949)*(x3366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3367=IKcos(j4);
IkReal x3368=IKsin(j4);
IkReal x3369=(cj5*r00);
IkReal x3370=(cj5*r10);
IkReal x3371=(cj5*r20);
IkReal x3372=((1.0)*x3367);
IkReal x3373=((1.0)*x3368);
IkReal x3374=(sj5*x3367);
IkReal x3375=(sj5*x3368);
evalcond[0]=(((r22*x3368))+(((-1.0)*x3371*x3372))+((r21*x3374)));
evalcond[1]=((((-1.0)*r22*x3372))+(((-1.0)*x3371*x3373))+((r21*x3375)));
evalcond[2]=(((r01*x3374))+((r02*x3368))+cj0+(((-1.0)*x3369*x3372)));
evalcond[3]=(sj0+(((-1.0)*x3370*x3372))+((r12*x3368))+((r11*x3374)));
evalcond[4]=(cj0+(((-1.0)*x3370*x3373))+(((-1.0)*r12*x3372))+((r11*x3375)));
evalcond[5]=(((r01*x3375))+(((-1.0)*sj0))+(((-1.0)*r02*x3372))+(((-1.0)*x3369*x3373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3376=IKcos(j0);
IkReal x3377=IKsin(j0);
evalcond[0]=((((-0.11235)*x3377))+(((-1.0)*px))+(((-0.24365)*x3376)));
evalcond[1]=((((0.11235)*x3376))+(((-1.0)*py))+(((-0.24365)*x3377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3378=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3378;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3378);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3379=((1.0)*cj5);
IkReal x3380=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3379)));
j4eval[0]=x3380;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3379)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3380);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3381=((1.0)*cj5);
IkReal x3382=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3381)));
j4eval[0]=x3382;
j4eval[1]=IKsign(x3382);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3381)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3383=((1.0)*cj5);
CheckValue<IkReal> x3384 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3383)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3384.valid){
continue;
}
CheckValue<IkReal> x3385=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3383)))),-1);
if(!x3385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3384.value)+(((1.5707963267949)*(x3385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3386=IKcos(j4);
IkReal x3387=IKsin(j4);
IkReal x3388=((1.0)*sj0);
IkReal x3389=(cj5*r00);
IkReal x3390=(cj5*r10);
IkReal x3391=(cj5*r20);
IkReal x3392=((1.0)*x3386);
IkReal x3393=((1.0)*x3387);
IkReal x3394=(sj5*x3386);
IkReal x3395=(sj5*x3387);
evalcond[0]=(((r21*x3394))+((r22*x3387))+(((-1.0)*x3391*x3392)));
evalcond[1]=((((-1.0)*r22*x3392))+((r21*x3395))+(((-1.0)*x3391*x3393)));
evalcond[2]=(cj0+((r11*x3395))+(((-1.0)*r12*x3392))+(((-1.0)*x3390*x3393)));
evalcond[3]=(((r01*x3394))+(((-1.0)*x3389*x3392))+((r02*x3387))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3394))+((r12*x3387))+(((-1.0)*x3388))+(((-1.0)*x3390*x3392)));
evalcond[5]=(((r01*x3395))+(((-1.0)*x3389*x3393))+(((-1.0)*r02*x3392))+(((-1.0)*x3388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3396=((1.0)*cj5);
CheckValue<IkReal> x3397=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3396))+(((-1.0)*r00*sj5)))),-1);
if(!x3397.valid){
continue;
}
CheckValue<IkReal> x3398 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3397.value)))+(x3398.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3399=IKcos(j4);
IkReal x3400=IKsin(j4);
IkReal x3401=((1.0)*sj0);
IkReal x3402=(cj5*r00);
IkReal x3403=(cj5*r10);
IkReal x3404=(cj5*r20);
IkReal x3405=((1.0)*x3399);
IkReal x3406=((1.0)*x3400);
IkReal x3407=(sj5*x3399);
IkReal x3408=(sj5*x3400);
evalcond[0]=(((r22*x3400))+(((-1.0)*x3404*x3405))+((r21*x3407)));
evalcond[1]=((((-1.0)*x3404*x3406))+((r21*x3408))+(((-1.0)*r22*x3405)));
evalcond[2]=(cj0+((r11*x3408))+(((-1.0)*r12*x3405))+(((-1.0)*x3403*x3406)));
evalcond[3]=(((r02*x3400))+(((-1.0)*x3402*x3405))+((r01*x3407))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3407))+((r12*x3400))+(((-1.0)*x3403*x3405))+(((-1.0)*x3401)));
evalcond[5]=((((-1.0)*x3402*x3406))+(((-1.0)*r02*x3405))+((r01*x3408))+(((-1.0)*x3401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3409 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3409.valid){
continue;
}
CheckValue<IkReal> x3410=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3409.value)+(((1.5707963267949)*(x3410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3411=IKcos(j4);
IkReal x3412=IKsin(j4);
IkReal x3413=((1.0)*sj0);
IkReal x3414=(cj5*r00);
IkReal x3415=(cj5*r10);
IkReal x3416=(cj5*r20);
IkReal x3417=((1.0)*x3411);
IkReal x3418=((1.0)*x3412);
IkReal x3419=(sj5*x3411);
IkReal x3420=(sj5*x3412);
evalcond[0]=(((r22*x3412))+((r21*x3419))+(((-1.0)*x3416*x3417)));
evalcond[1]=((((-1.0)*r22*x3417))+((r21*x3420))+(((-1.0)*x3416*x3418)));
evalcond[2]=((((-1.0)*x3415*x3418))+cj0+(((-1.0)*r12*x3417))+((r11*x3420)));
evalcond[3]=(((r02*x3412))+(((-1.0)*x3414*x3417))+((r01*x3419))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3415*x3417))+((r12*x3412))+((r11*x3419))+(((-1.0)*x3413)));
evalcond[5]=((((-1.0)*x3414*x3418))+(((-1.0)*r02*x3417))+((r01*x3420))+(((-1.0)*x3413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3421=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3421;
j4eval[1]=IKsign(x3421);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3422=((1.0)*cj5);
IkReal x3423=((((-1.0)*r11*x3422))+(((-1.0)*r10*sj5)));
j4eval[0]=x3423;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3422)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3423);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3424=cj5*cj5;
IkReal x3425=((1.0)*r20);
IkReal x3426=(r01*r21);
IkReal x3427=(r21*sj5);
IkReal x3428=(((cj5*r01*r20*sj5))+((x3424*x3426))+(((-1.0)*r02*r22))+((cj5*r00*x3427))+(((-1.0)*r00*x3424*x3425))+(((-1.0)*x3426)));
j4eval[0]=x3428;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3425))+((cj0*x3427)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3428);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3429=cj5*cj5;
IkReal x3430=((1.0)*r20);
IkReal x3431=(r01*r21);
IkReal x3432=(r21*sj5);
CheckValue<IkReal> x3433 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3432))+(((-1.0)*cj0*cj5*x3430)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3433.valid){
continue;
}
CheckValue<IkReal> x3434=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x3429*x3431))+(((-1.0)*r02*r22))+((cj5*r00*x3432))+(((-1.0)*x3431))+(((-1.0)*r00*x3429*x3430)))),-1);
if(!x3434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3433.value)+(((1.5707963267949)*(x3434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3435=IKcos(j4);
IkReal x3436=IKsin(j4);
IkReal x3437=(cj5*r00);
IkReal x3438=(cj5*r10);
IkReal x3439=(cj5*r20);
IkReal x3440=((1.0)*x3435);
IkReal x3441=((1.0)*x3436);
IkReal x3442=(sj5*x3435);
IkReal x3443=(sj5*x3436);
evalcond[0]=(((r21*x3442))+(((-1.0)*x3439*x3440))+((r22*x3436)));
evalcond[1]=(((r21*x3443))+(((-1.0)*x3439*x3441))+(((-1.0)*r22*x3440)));
evalcond[2]=(cj0+(((-1.0)*x3437*x3440))+((r01*x3442))+((r02*x3436)));
evalcond[3]=(((r11*x3442))+sj0+(((-1.0)*x3438*x3440))+((r12*x3436)));
evalcond[4]=(((r11*x3443))+cj0+(((-1.0)*x3438*x3441))+(((-1.0)*r12*x3440)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3437*x3441))+(((-1.0)*r02*x3440))+((r01*x3443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3444=((1.0)*cj5);
CheckValue<IkReal> x3445 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3444))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3445.valid){
continue;
}
CheckValue<IkReal> x3446=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3444)))),-1);
if(!x3446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3445.value)+(((1.5707963267949)*(x3446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3447=IKcos(j4);
IkReal x3448=IKsin(j4);
IkReal x3449=(cj5*r00);
IkReal x3450=(cj5*r10);
IkReal x3451=(cj5*r20);
IkReal x3452=((1.0)*x3447);
IkReal x3453=((1.0)*x3448);
IkReal x3454=(sj5*x3447);
IkReal x3455=(sj5*x3448);
evalcond[0]=((((-1.0)*x3451*x3452))+((r21*x3454))+((r22*x3448)));
evalcond[1]=((((-1.0)*x3451*x3453))+((r21*x3455))+(((-1.0)*r22*x3452)));
evalcond[2]=(cj0+((r02*x3448))+(((-1.0)*x3449*x3452))+((r01*x3454)));
evalcond[3]=(sj0+((r12*x3448))+(((-1.0)*x3450*x3452))+((r11*x3454)));
evalcond[4]=(cj0+(((-1.0)*r12*x3452))+(((-1.0)*x3450*x3453))+((r11*x3455)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3452))+(((-1.0)*x3449*x3453))+((r01*x3455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3456 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3456.valid){
continue;
}
CheckValue<IkReal> x3457=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3456.value)+(((1.5707963267949)*(x3457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3458=IKcos(j4);
IkReal x3459=IKsin(j4);
IkReal x3460=(cj5*r00);
IkReal x3461=(cj5*r10);
IkReal x3462=(cj5*r20);
IkReal x3463=((1.0)*x3458);
IkReal x3464=((1.0)*x3459);
IkReal x3465=(sj5*x3458);
IkReal x3466=(sj5*x3459);
evalcond[0]=((((-1.0)*x3462*x3463))+((r22*x3459))+((r21*x3465)));
evalcond[1]=((((-1.0)*x3462*x3464))+(((-1.0)*r22*x3463))+((r21*x3466)));
evalcond[2]=(cj0+(((-1.0)*x3460*x3463))+((r01*x3465))+((r02*x3459)));
evalcond[3]=(sj0+((r12*x3459))+(((-1.0)*x3461*x3463))+((r11*x3465)));
evalcond[4]=(cj0+(((-1.0)*x3461*x3464))+(((-1.0)*r12*x3463))+((r11*x3466)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3463))+(((-1.0)*x3460*x3464))+((r01*x3466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3467=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3467;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3467);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3468=((1.0)*cj5);
IkReal x3469=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3468)));
j4eval[0]=x3469;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3468))))));
j4eval[2]=IKsign(x3469);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3470=((1.0)*cj5);
IkReal x3471=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3470)));
j4eval[0]=x3471;
j4eval[1]=IKsign(x3471);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3470))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3472=((1.0)*cj5);
CheckValue<IkReal> x3473 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3472))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3473.valid){
continue;
}
CheckValue<IkReal> x3474=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3472)))),-1);
if(!x3474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3473.value)+(((1.5707963267949)*(x3474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3475=IKcos(j4);
IkReal x3476=IKsin(j4);
IkReal x3477=((1.0)*sj0);
IkReal x3478=(cj5*r00);
IkReal x3479=(cj5*r10);
IkReal x3480=(cj5*r20);
IkReal x3481=((1.0)*x3475);
IkReal x3482=((1.0)*x3476);
IkReal x3483=(sj5*x3475);
IkReal x3484=(sj5*x3476);
evalcond[0]=(((r21*x3483))+((r22*x3476))+(((-1.0)*x3480*x3481)));
evalcond[1]=((((-1.0)*r22*x3481))+((r21*x3484))+(((-1.0)*x3480*x3482)));
evalcond[2]=(cj0+(((-1.0)*r12*x3481))+(((-1.0)*x3479*x3482))+((r11*x3484)));
evalcond[3]=(((r01*x3483))+((r02*x3476))+(((-1.0)*cj0))+(((-1.0)*x3478*x3481)));
evalcond[4]=((((-1.0)*x3479*x3481))+((r12*x3476))+((r11*x3483))+(((-1.0)*x3477)));
evalcond[5]=((((-1.0)*r02*x3481))+((r01*x3484))+(((-1.0)*x3477))+(((-1.0)*x3478*x3482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3485=((1.0)*cj5);
CheckValue<IkReal> x3486 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3486.valid){
continue;
}
CheckValue<IkReal> x3487=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3485))+(((-1.0)*r00*sj5)))),-1);
if(!x3487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3486.value)+(((1.5707963267949)*(x3487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3488=IKcos(j4);
IkReal x3489=IKsin(j4);
IkReal x3490=((1.0)*sj0);
IkReal x3491=(cj5*r00);
IkReal x3492=(cj5*r10);
IkReal x3493=(cj5*r20);
IkReal x3494=((1.0)*x3488);
IkReal x3495=((1.0)*x3489);
IkReal x3496=(sj5*x3488);
IkReal x3497=(sj5*x3489);
evalcond[0]=((((-1.0)*x3493*x3494))+((r21*x3496))+((r22*x3489)));
evalcond[1]=((((-1.0)*r22*x3494))+(((-1.0)*x3493*x3495))+((r21*x3497)));
evalcond[2]=((((-1.0)*r12*x3494))+cj0+(((-1.0)*x3492*x3495))+((r11*x3497)));
evalcond[3]=(((r01*x3496))+((r02*x3489))+(((-1.0)*x3491*x3494))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3490))+((r12*x3489))+(((-1.0)*x3492*x3494))+((r11*x3496)));
evalcond[5]=((((-1.0)*r02*x3494))+((r01*x3497))+(((-1.0)*x3490))+(((-1.0)*x3491*x3495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3498 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3498.valid){
continue;
}
CheckValue<IkReal> x3499=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3498.value)+(((1.5707963267949)*(x3499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3500=IKcos(j4);
IkReal x3501=IKsin(j4);
IkReal x3502=((1.0)*sj0);
IkReal x3503=(cj5*r00);
IkReal x3504=(cj5*r10);
IkReal x3505=(cj5*r20);
IkReal x3506=((1.0)*x3500);
IkReal x3507=((1.0)*x3501);
IkReal x3508=(sj5*x3500);
IkReal x3509=(sj5*x3501);
evalcond[0]=(((r22*x3501))+(((-1.0)*x3505*x3506))+((r21*x3508)));
evalcond[1]=((((-1.0)*r22*x3506))+(((-1.0)*x3505*x3507))+((r21*x3509)));
evalcond[2]=((((-1.0)*r12*x3506))+cj0+((r11*x3509))+(((-1.0)*x3504*x3507)));
evalcond[3]=(((r01*x3508))+((r02*x3501))+(((-1.0)*x3503*x3506))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3502))+((r12*x3501))+((r11*x3508))+(((-1.0)*x3504*x3506)));
evalcond[5]=(((r01*x3509))+(((-1.0)*x3502))+(((-1.0)*r02*x3506))+(((-1.0)*x3503*x3507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3510=((4873.0)*cj1);
IkReal x3511=(cj5*r01);
IkReal x3512=(r00*sj5);
IkReal x3513=(cj1*cj2);
IkReal x3514=((20000.0)*px);
IkReal x3515=(sj1*sj2);
IkReal x3516=((5972.0)*x3515);
CheckValue<IkReal> x3517=IKPowWithIntegerCheck(((((2247.0)*x3515))+(((-2247.0)*x3513))),-1);
if(!x3517.valid){
continue;
}
CheckValue<IkReal> x3518=IKPowWithIntegerCheck((x3515+(((-1.0)*x3513))),-1);
if(!x3518.valid){
continue;
}
if( IKabs(((x3517.value)*(((((-1.0)*x3514*x3515))+(((-1.0)*x3512*x3516))+((x3510*x3511))+((x3510*x3512))+(((-1.0)*x3511*x3516))+(((5972.0)*x3512*x3513))+(((5972.0)*x3511*x3513))+((x3513*x3514)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3518.value)*((x3512+x3511)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3517.value)*(((((-1.0)*x3514*x3515))+(((-1.0)*x3512*x3516))+((x3510*x3511))+((x3510*x3512))+(((-1.0)*x3511*x3516))+(((5972.0)*x3512*x3513))+(((5972.0)*x3511*x3513))+((x3513*x3514))))))+IKsqr(((x3518.value)*((x3512+x3511))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3517.value)*(((((-1.0)*x3514*x3515))+(((-1.0)*x3512*x3516))+((x3510*x3511))+((x3510*x3512))+(((-1.0)*x3511*x3516))+(((5972.0)*x3512*x3513))+(((5972.0)*x3511*x3513))+((x3513*x3514))))), ((x3518.value)*((x3512+x3511))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3519=IKcos(j0);
IkReal x3520=IKsin(j0);
IkReal x3521=(cj1*cj2);
IkReal x3522=((1.0)*cj5);
IkReal x3523=(sj1*sj2);
IkReal x3524=(r00*sj5);
IkReal x3525=(r10*sj5);
IkReal x3526=((0.24365)*cj1);
IkReal x3527=((0.08535)*cj5);
IkReal x3528=((0.21325)*x3520);
IkReal x3529=((0.21325)*x3519);
evalcond[0]=((((-1.0)*x3524))+(((-1.0)*r01*x3522))+((x3519*x3523))+(((-1.0)*x3519*x3521)));
evalcond[1]=((((-1.0)*x3525))+(((-1.0)*x3520*x3521))+((x3520*x3523))+(((-1.0)*r11*x3522)));
evalcond[2]=((((-0.11235)*x3520))+(((-1.0)*px))+(((-1.0)*r01*x3527))+(((-0.08535)*x3524))+((x3521*x3529))+(((-1.0)*x3523*x3529))+((x3519*x3526)));
evalcond[3]=((((-1.0)*py))+((x3520*x3526))+(((-0.08535)*x3525))+(((-1.0)*r11*x3527))+((x3521*x3528))+(((0.11235)*x3519))+(((-1.0)*x3523*x3528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3530=((1.0)*cj5);
IkReal x3531=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3530)));
j4eval[0]=x3531;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3530)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3532=((1.0)*cj5);
IkReal x3533=((((-1.0)*r11*x3532))+(((-1.0)*r10*sj5)));
j4eval[0]=x3533;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3532))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3534=((1.0)*sj0);
IkReal x3535=((1.0)*cj0);
IkReal x3536=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3536;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x3535))+(((-1.0)*r11*sj5*x3534))+((cj0*cj5*r00))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r12*x3534))+(((-1.0)*r02*x3535))))));
j4eval[2]=IKsign(x3536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3537=((-1.0)*r20);
IkReal x3539 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3539)==0){
continue;
}
IkReal x3538=pow(x3539,-0.5);
CheckValue<IkReal> x3540 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3537),IKFAST_ATAN2_MAGTHRESH);
if(!x3540.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3540.value));
IkReal gconst97=(r21*x3538);
IkReal gconst98=(x3537*x3538);
CheckValue<IkReal> x3541 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3541.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3541.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3542=((-1.0)*r20);
IkReal x3543=x3538;
CheckValue<IkReal> x3545 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3542),IKFAST_ATAN2_MAGTHRESH);
if(!x3545.valid){
continue;
}
IkReal x3544=((-1.0)*(x3545.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3544;
IkReal gconst96=x3544;
IkReal gconst97=(r21*x3543);
IkReal gconst98=(x3542*x3543);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3546=((-1.0)*r20);
IkReal x3547=x3538;
CheckValue<IkReal> x3549 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3546),IKFAST_ATAN2_MAGTHRESH);
if(!x3549.valid){
continue;
}
IkReal x3548=((-1.0)*(x3549.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3548;
IkReal gconst96=x3548;
IkReal gconst97=(r21*x3547);
IkReal gconst98=(x3546*x3547);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3550=((-1.0)*r20);
IkReal x3551=x3538;
CheckValue<IkReal> x3553 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3550),IKFAST_ATAN2_MAGTHRESH);
if(!x3553.valid){
continue;
}
IkReal x3552=((-1.0)*(x3553.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3552;
IkReal gconst96=x3552;
IkReal gconst97=(r21*x3551);
IkReal gconst98=(x3550*x3551);
IkReal x3554=((1.0)*(r22*r22));
CheckValue<IkReal> x3558=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3554))),-1);
if(!x3558.valid){
continue;
}
IkReal x3555=x3558.value;
IkReal x3556=((1.0)*x3555);
IkReal x3557=((((-1.0)*x3556*(r21*r21*r21*r21)))+(((-1.0)*x3556*(r20*r20*r20*r20)))+(((-1.0)*x3554))+(((-2.0)*x3555*(r20*r20)*(r21*r21))));
j4eval[0]=x3557;
j4eval[1]=IKsign(x3557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3559=(cj1*cj2);
IkReal x3560=(gconst98*r20);
IkReal x3561=(sj1*sj2);
IkReal x3562=(gconst97*r21);
CheckValue<IkReal> x3563 = IKatan2WithCheck(IkReal((((r22*x3561))+(((-1.0)*r22*x3559)))),IkReal((((x3559*x3560))+(((-1.0)*x3560*x3561))+(((-1.0)*x3559*x3562))+((x3561*x3562)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3563.valid){
continue;
}
CheckValue<IkReal> x3564=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3562*x3562)))+(((-1.0)*(x3560*x3560)))+(((-1.0)*(r22*r22)))+(((2.0)*x3560*x3562)))),-1);
if(!x3564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3563.value)+(((1.5707963267949)*(x3564.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3565=IKsin(j4);
IkReal x3566=IKcos(j4);
IkReal x3567=(gconst98*r10);
IkReal x3568=(gconst97*r21);
IkReal x3569=(gconst98*r20);
IkReal x3570=((1.0)*cj2);
IkReal x3571=((1.0)*sj0);
IkReal x3572=(gconst98*r00);
IkReal x3573=(cj1*sj2);
IkReal x3574=((1.0)*x3566);
IkReal x3575=((1.0)*x3565);
IkReal x3576=(gconst97*x3565);
IkReal x3577=(gconst97*x3566);
evalcond[0]=(((x3565*x3568))+(((-1.0)*x3569*x3575))+(((-1.0)*r22*x3574)));
evalcond[1]=(cj0+((r11*x3576))+(((-1.0)*x3567*x3575))+(((-1.0)*r12*x3574)));
evalcond[2]=(((r01*x3576))+(((-1.0)*x3571))+(((-1.0)*x3572*x3575))+(((-1.0)*r02*x3574)));
evalcond[3]=(((x3566*x3568))+((sj1*sj2))+((r22*x3565))+(((-1.0)*x3569*x3574))+(((-1.0)*cj1*x3570)));
evalcond[4]=(((r01*x3577))+(((-1.0)*cj0*x3573))+(((-1.0)*x3572*x3574))+((r02*x3565))+(((-1.0)*cj0*sj1*x3570)));
evalcond[5]=((((-1.0)*sj0*sj1*x3570))+(((-1.0)*x3571*x3573))+((r11*x3577))+((r12*x3565))+(((-1.0)*x3567*x3574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3578=((1.0)*gconst98);
CheckValue<IkReal> x3579=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3578))+(((-1.0)*gconst97*r10)))),-1);
if(!x3579.valid){
continue;
}
CheckValue<IkReal> x3580 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3579.value)))+(x3580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3581=IKsin(j4);
IkReal x3582=IKcos(j4);
IkReal x3583=(gconst98*r10);
IkReal x3584=(gconst97*r21);
IkReal x3585=(gconst98*r20);
IkReal x3586=((1.0)*cj2);
IkReal x3587=((1.0)*sj0);
IkReal x3588=(gconst98*r00);
IkReal x3589=(cj1*sj2);
IkReal x3590=((1.0)*x3582);
IkReal x3591=((1.0)*x3581);
IkReal x3592=(gconst97*x3581);
IkReal x3593=(gconst97*x3582);
evalcond[0]=((((-1.0)*r22*x3590))+(((-1.0)*x3585*x3591))+((x3581*x3584)));
evalcond[1]=(cj0+((r11*x3592))+(((-1.0)*x3583*x3591))+(((-1.0)*r12*x3590)));
evalcond[2]=((((-1.0)*r02*x3590))+((r01*x3592))+(((-1.0)*x3587))+(((-1.0)*x3588*x3591)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3585*x3590))+((x3582*x3584))+(((-1.0)*cj1*x3586))+((r22*x3581)));
evalcond[4]=((((-1.0)*cj0*x3589))+(((-1.0)*cj0*sj1*x3586))+((r02*x3581))+((r01*x3593))+(((-1.0)*x3588*x3590)));
evalcond[5]=((((-1.0)*x3587*x3589))+((r12*x3581))+((r11*x3593))+(((-1.0)*x3583*x3590))+(((-1.0)*sj0*sj1*x3586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3594=((1.0)*gconst98);
CheckValue<IkReal> x3595=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3594))+(((-1.0)*gconst97*r00)))),-1);
if(!x3595.valid){
continue;
}
CheckValue<IkReal> x3596 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3594))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3595.value)))+(x3596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3597=IKsin(j4);
IkReal x3598=IKcos(j4);
IkReal x3599=(gconst98*r10);
IkReal x3600=(gconst97*r21);
IkReal x3601=(gconst98*r20);
IkReal x3602=((1.0)*cj2);
IkReal x3603=((1.0)*sj0);
IkReal x3604=(gconst98*r00);
IkReal x3605=(cj1*sj2);
IkReal x3606=((1.0)*x3598);
IkReal x3607=((1.0)*x3597);
IkReal x3608=(gconst97*x3597);
IkReal x3609=(gconst97*x3598);
evalcond[0]=((((-1.0)*x3601*x3607))+(((-1.0)*r22*x3606))+((x3597*x3600)));
evalcond[1]=(((r11*x3608))+cj0+(((-1.0)*r12*x3606))+(((-1.0)*x3599*x3607)));
evalcond[2]=((((-1.0)*r02*x3606))+((r01*x3608))+(((-1.0)*x3603))+(((-1.0)*x3604*x3607)));
evalcond[3]=(((x3598*x3600))+((sj1*sj2))+(((-1.0)*x3601*x3606))+((r22*x3597))+(((-1.0)*cj1*x3602)));
evalcond[4]=(((r02*x3597))+((r01*x3609))+(((-1.0)*cj0*x3605))+(((-1.0)*cj0*sj1*x3602))+(((-1.0)*x3604*x3606)));
evalcond[5]=(((r11*x3609))+((r12*x3597))+(((-1.0)*x3603*x3605))+(((-1.0)*sj0*sj1*x3602))+(((-1.0)*x3599*x3606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3610=((-1.0)*r21);
IkReal x3612 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3612)==0){
continue;
}
IkReal x3611=pow(x3612,-0.5);
CheckValue<IkReal> x3613 = IKatan2WithCheck(IkReal(x3610),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3613.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3613.value))));
IkReal gconst100=(x3610*x3611);
IkReal gconst101=((1.0)*r20*x3611);
CheckValue<IkReal> x3614 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3614.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3614.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3615=((-1.0)*r21);
CheckValue<IkReal> x3618 = IKatan2WithCheck(IkReal(x3615),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3618.valid){
continue;
}
IkReal x3616=((1.0)*(x3618.value));
IkReal x3617=x3611;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3616)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3616)));
IkReal gconst100=(x3615*x3617);
IkReal gconst101=((1.0)*r20*x3617);
IkReal x3619=r22*r22;
IkReal x3620=((1.0)*x3619);
CheckValue<IkReal> x3624=IKPowWithIntegerCheck(((-1.0)+x3619),-1);
if(!x3624.valid){
continue;
}
IkReal x3621=x3624.value;
if((((1.0)+(((-1.0)*x3620)))) < -0.00001)
continue;
IkReal x3622=IKsqrt(((1.0)+(((-1.0)*x3620))));
IkReal x3623=(cj0*x3621*x3622);
j4eval[0]=((IKabs((x3623+(((-1.0)*x3620*x3623)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3625=((-1.0)*r21);
CheckValue<IkReal> x3628 = IKatan2WithCheck(IkReal(x3625),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3628.valid){
continue;
}
IkReal x3626=((1.0)*(x3628.value));
IkReal x3627=x3611;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3626)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3626)));
IkReal gconst100=(x3625*x3627);
IkReal gconst101=((1.0)*r20*x3627);
IkReal x3629=r22*r22;
IkReal x3630=((1.0)*x3629);
CheckValue<IkReal> x3634=IKPowWithIntegerCheck(((-1.0)+x3629),-1);
if(!x3634.valid){
continue;
}
IkReal x3631=x3634.value;
if((((1.0)+(((-1.0)*x3630)))) < -0.00001)
continue;
IkReal x3632=IKsqrt(((1.0)+(((-1.0)*x3630))));
IkReal x3633=(sj0*x3631*x3632);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3630*x3633))+x3633))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3635=((-1.0)*r21);
CheckValue<IkReal> x3638 = IKatan2WithCheck(IkReal(x3635),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3638.valid){
continue;
}
IkReal x3636=((1.0)*(x3638.value));
IkReal x3637=x3611;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3636)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3636)));
IkReal gconst100=(x3635*x3637);
IkReal gconst101=((1.0)*r20*x3637);
IkReal x3639=r22*r22;
IkReal x3640=(r12*sj0);
IkReal x3641=(cj0*r02);
CheckValue<IkReal> x3645=IKPowWithIntegerCheck(((-1.0)+x3639),-1);
if(!x3645.valid){
continue;
}
IkReal x3642=x3645.value;
if((((1.0)+(((-1.0)*x3639)))) < -0.00001)
continue;
IkReal x3643=IKsqrt(((1.0)+(((-1.0)*x3639))));
IkReal x3644=(r22*x3642*x3643);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3641*x3644))+((x3640*x3644)))))+(IKabs(((((-1.0)*x3641))+(((-1.0)*x3640))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3646=((1.0)*sj0);
IkReal x3647=((1.0)*gconst100);
CheckValue<IkReal> x3648=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3647))+(((-1.0)*gconst101*r21)))),-1);
if(!x3648.valid){
continue;
}
CheckValue<IkReal> x3649 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3646))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3646))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3648.value)))+(x3649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3650=IKsin(j4);
IkReal x3651=IKcos(j4);
IkReal x3652=(gconst101*r20);
IkReal x3653=(gconst101*r10);
IkReal x3654=((1.0)*cj2);
IkReal x3655=(gconst101*r00);
IkReal x3656=((1.0)*sj0);
IkReal x3657=(cj1*sj2);
IkReal x3658=((1.0)*x3651);
IkReal x3659=((1.0)*x3650);
IkReal x3660=(gconst100*x3650);
IkReal x3661=(gconst100*x3651);
evalcond[0]=((((-1.0)*r22*x3658))+(((-1.0)*x3652*x3659))+((r21*x3660)));
evalcond[1]=(cj0+(((-1.0)*x3653*x3659))+((r11*x3660))+(((-1.0)*r12*x3658)));
evalcond[2]=(((r01*x3660))+(((-1.0)*r02*x3658))+(((-1.0)*x3655*x3659))+(((-1.0)*x3656)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3654))+(((-1.0)*x3652*x3658))+((r21*x3661))+((r22*x3650)));
evalcond[4]=((((-1.0)*cj0*x3657))+((r01*x3661))+((r02*x3650))+(((-1.0)*x3655*x3658))+(((-1.0)*cj0*sj1*x3654)));
evalcond[5]=((((-1.0)*sj0*sj1*x3654))+((r12*x3650))+(((-1.0)*x3653*x3658))+((r11*x3661))+(((-1.0)*x3656*x3657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3662=((1.0)*gconst101);
CheckValue<IkReal> x3663 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3662))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3663.valid){
continue;
}
CheckValue<IkReal> x3664=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3662)))),-1);
if(!x3664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3663.value)+(((1.5707963267949)*(x3664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3665=IKsin(j4);
IkReal x3666=IKcos(j4);
IkReal x3667=(gconst101*r20);
IkReal x3668=(gconst101*r10);
IkReal x3669=((1.0)*cj2);
IkReal x3670=(gconst101*r00);
IkReal x3671=((1.0)*sj0);
IkReal x3672=(cj1*sj2);
IkReal x3673=((1.0)*x3666);
IkReal x3674=((1.0)*x3665);
IkReal x3675=(gconst100*x3665);
IkReal x3676=(gconst100*x3666);
evalcond[0]=(((r21*x3675))+(((-1.0)*r22*x3673))+(((-1.0)*x3667*x3674)));
evalcond[1]=(cj0+((r11*x3675))+(((-1.0)*r12*x3673))+(((-1.0)*x3668*x3674)));
evalcond[2]=(((r01*x3675))+(((-1.0)*x3670*x3674))+(((-1.0)*r02*x3673))+(((-1.0)*x3671)));
evalcond[3]=(((r22*x3665))+((sj1*sj2))+((r21*x3676))+(((-1.0)*x3667*x3673))+(((-1.0)*cj1*x3669)));
evalcond[4]=(((r01*x3676))+(((-1.0)*cj0*sj1*x3669))+(((-1.0)*x3670*x3673))+(((-1.0)*cj0*x3672))+((r02*x3665)));
evalcond[5]=((((-1.0)*x3671*x3672))+((r11*x3676))+(((-1.0)*sj0*sj1*x3669))+((r12*x3665))+(((-1.0)*x3668*x3673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3677=((1.0)*gconst101);
CheckValue<IkReal> x3678=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3677)))),-1);
if(!x3678.valid){
continue;
}
CheckValue<IkReal> x3679 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3678.value)))+(x3679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3680=IKsin(j4);
IkReal x3681=IKcos(j4);
IkReal x3682=(gconst101*r20);
IkReal x3683=(gconst101*r10);
IkReal x3684=((1.0)*cj2);
IkReal x3685=(gconst101*r00);
IkReal x3686=((1.0)*sj0);
IkReal x3687=(cj1*sj2);
IkReal x3688=((1.0)*x3681);
IkReal x3689=((1.0)*x3680);
IkReal x3690=(gconst100*x3680);
IkReal x3691=(gconst100*x3681);
evalcond[0]=((((-1.0)*r22*x3688))+((r21*x3690))+(((-1.0)*x3682*x3689)));
evalcond[1]=(cj0+(((-1.0)*x3683*x3689))+(((-1.0)*r12*x3688))+((r11*x3690)));
evalcond[2]=(((r01*x3690))+(((-1.0)*x3686))+(((-1.0)*x3685*x3689))+(((-1.0)*r02*x3688)));
evalcond[3]=(((sj1*sj2))+((r21*x3691))+(((-1.0)*cj1*x3684))+(((-1.0)*x3682*x3688))+((r22*x3680)));
evalcond[4]=(((r01*x3691))+(((-1.0)*cj0*x3687))+(((-1.0)*x3685*x3688))+((r02*x3680))+(((-1.0)*cj0*sj1*x3684)));
evalcond[5]=((((-1.0)*sj0*sj1*x3684))+(((-1.0)*x3683*x3688))+(((-1.0)*x3686*x3687))+((r12*x3680))+((r11*x3691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3692=((-1.0)*r10);
IkReal x3694 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3694)==0){
continue;
}
IkReal x3693=pow(x3694,-0.5);
CheckValue<IkReal> x3695 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3692),IKFAST_ATAN2_MAGTHRESH);
if(!x3695.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3695.value));
IkReal gconst103=(r11*x3693);
IkReal gconst104=(x3692*x3693);
CheckValue<IkReal> x3696 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3696.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3696.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3697=((-1.0)*r10);
IkReal x3698=x3693;
CheckValue<IkReal> x3700 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3697),IKFAST_ATAN2_MAGTHRESH);
if(!x3700.valid){
continue;
}
IkReal x3699=((-1.0)*(x3700.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3699;
IkReal gconst102=x3699;
IkReal gconst103=(r11*x3698);
IkReal gconst104=(x3697*x3698);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3701=((1.0)*sj0);
IkReal x3702=((1.0)*gconst103);
CheckValue<IkReal> x3703 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3701)))),IkReal(((((-1.0)*gconst103*r11*x3701))+(((-1.0)*cj0*r01*x3702))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3703.valid){
continue;
}
CheckValue<IkReal> x3704=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3702)))),-1);
if(!x3704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3703.value)+(((1.5707963267949)*(x3704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3705=IKsin(j4);
IkReal x3706=IKcos(j4);
IkReal x3707=(gconst103*r11);
IkReal x3708=((1.0)*cj2);
IkReal x3709=((1.0)*sj0);
IkReal x3710=(cj1*sj2);
IkReal x3711=((1.0)*x3706);
IkReal x3712=(gconst103*x3706);
IkReal x3713=(gconst103*x3705);
IkReal x3714=((1.0)*gconst104*x3705);
evalcond[0]=((((-1.0)*r20*x3714))+((r21*x3713))+(((-1.0)*r22*x3711)));
evalcond[1]=(cj0+(((-1.0)*r10*x3714))+(((-1.0)*r12*x3711))+((x3705*x3707)));
evalcond[2]=((((-1.0)*r00*x3714))+(((-1.0)*r02*x3711))+(((-1.0)*x3709))+((r01*x3713)));
evalcond[3]=((((-1.0)*gconst104*r20*x3711))+(((-1.0)*cj1*x3708))+((sj1*sj2))+((r21*x3712))+((r22*x3705)));
evalcond[4]=((((-1.0)*cj0*sj1*x3708))+(((-1.0)*cj0*x3710))+((r01*x3712))+(((-1.0)*gconst104*r00*x3711))+((r02*x3705)));
evalcond[5]=(((r12*x3705))+(((-1.0)*sj0*sj1*x3708))+(((-1.0)*x3709*x3710))+(((-1.0)*gconst104*r10*x3711))+((x3706*x3707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3715=((1.0)*gconst104);
CheckValue<IkReal> x3716 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3715))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3716.valid){
continue;
}
CheckValue<IkReal> x3717=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3715)))),-1);
if(!x3717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3716.value)+(((1.5707963267949)*(x3717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3718=IKsin(j4);
IkReal x3719=IKcos(j4);
IkReal x3720=(gconst103*r11);
IkReal x3721=((1.0)*cj2);
IkReal x3722=((1.0)*sj0);
IkReal x3723=(cj1*sj2);
IkReal x3724=((1.0)*x3719);
IkReal x3725=(gconst103*x3719);
IkReal x3726=(gconst103*x3718);
IkReal x3727=((1.0)*gconst104*x3718);
evalcond[0]=((((-1.0)*r22*x3724))+(((-1.0)*r20*x3727))+((r21*x3726)));
evalcond[1]=(cj0+(((-1.0)*r12*x3724))+((x3718*x3720))+(((-1.0)*r10*x3727)));
evalcond[2]=((((-1.0)*x3722))+((r01*x3726))+(((-1.0)*r00*x3727))+(((-1.0)*r02*x3724)));
evalcond[3]=((((-1.0)*cj1*x3721))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3724))+((r22*x3718))+((r21*x3725)));
evalcond[4]=((((-1.0)*cj0*x3723))+(((-1.0)*gconst104*r00*x3724))+((r01*x3725))+(((-1.0)*cj0*sj1*x3721))+((r02*x3718)));
evalcond[5]=((((-1.0)*gconst104*r10*x3724))+((x3719*x3720))+(((-1.0)*sj0*sj1*x3721))+((r12*x3718))+(((-1.0)*x3722*x3723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3728=((-1.0)*r11);
IkReal x3730 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3730)==0){
continue;
}
IkReal x3729=pow(x3730,-0.5);
CheckValue<IkReal> x3731 = IKatan2WithCheck(IkReal(x3728),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3731.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3731.value))));
IkReal gconst106=(x3728*x3729);
IkReal gconst107=((1.0)*r10*x3729);
CheckValue<IkReal> x3732 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3732.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3732.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3733=((-1.0)*r11);
CheckValue<IkReal> x3736 = IKatan2WithCheck(IkReal(x3733),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3736.valid){
continue;
}
IkReal x3734=((1.0)*(x3736.value));
IkReal x3735=x3729;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3734)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3734)));
IkReal gconst106=(x3733*x3735);
IkReal gconst107=((1.0)*r10*x3735);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3737=((-1.0)*r11);
CheckValue<IkReal> x3740 = IKatan2WithCheck(IkReal(x3737),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3740.valid){
continue;
}
IkReal x3738=((1.0)*(x3740.value));
IkReal x3739=x3729;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3738)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3738)));
IkReal gconst106=(x3737*x3739);
IkReal gconst107=((1.0)*r10*x3739);
IkReal x3741=r12*r12;
IkReal x3742=((1.0)*sj0);
IkReal x3743=(cj0*r02);
IkReal x3744=x3729;
j4eval[0]=((IKabs(((((-1.0)*r12*x3742))+(((-1.0)*x3743)))))+(IKabs(((((-1.0)*x3742*x3744))+((sj0*x3741*x3744))+((r12*x3743*x3744))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3745=((-1.0)*r11);
CheckValue<IkReal> x3748 = IKatan2WithCheck(IkReal(x3745),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3748.valid){
continue;
}
IkReal x3746=((1.0)*(x3748.value));
IkReal x3747=x3729;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3746)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3746)));
IkReal gconst106=(x3745*x3747);
IkReal gconst107=((1.0)*r10*x3747);
IkReal x3749=r12*r12;
IkReal x3750=((1.0)+(((-1.0)*x3749)));
IkReal x3751=(r22*sj1*sj2);
IkReal x3752=(cj1*cj2*r22);
CheckValue<IkReal> x3759=IKPowWithIntegerCheck(x3750,-1);
if(!x3759.valid){
continue;
}
IkReal x3753=x3759.value;
CheckValue<IkReal> x3760=IKPowWithIntegerCheck(((-1.0)+x3749),-1);
if(!x3760.valid){
continue;
}
IkReal x3754=x3760.value;
IkReal x3755=((1.0)*x3753);
if((x3750) < -0.00001)
continue;
IkReal x3756=IKsqrt(x3750);
IkReal x3757=(r12*x3754*x3756);
IkReal x3758=((((-2.0)*r10*r11*r20*r21*x3753))+(((-1.0)*x3755*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3755*(r10*r10)*(r20*r20))));
j4eval[0]=x3758;
j4eval[1]=((IKabs((x3751+(((-1.0)*x3752)))))+(IKabs((((x3752*x3757))+(((-1.0)*x3751*x3757))))));
j4eval[2]=IKsign(x3758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3761=(sj1*sj2);
IkReal x3762=(gconst106*r21);
IkReal x3763=(gconst107*r20);
IkReal x3764=(cj1*cj2);
CheckValue<IkReal> x3765=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((-1.0)*(x3762*x3762)))+(((-1.0)*(x3763*x3763)))+(((2.0)*x3762*x3763)))),-1);
if(!x3765.valid){
continue;
}
CheckValue<IkReal> x3766 = IKatan2WithCheck(IkReal((((r22*x3761))+(((-1.0)*r22*x3764)))),IkReal(((((-1.0)*x3762*x3764))+((x3761*x3762))+((x3763*x3764))+(((-1.0)*x3761*x3763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3765.value)))+(x3766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3767=IKsin(j4);
IkReal x3768=IKcos(j4);
IkReal x3769=(gconst107*r10);
IkReal x3770=(gconst107*r00);
IkReal x3771=((1.0)*cj2);
IkReal x3772=(gconst107*r20);
IkReal x3773=((1.0)*sj0);
IkReal x3774=(cj1*sj2);
IkReal x3775=((1.0)*x3768);
IkReal x3776=(gconst106*x3768);
IkReal x3777=(gconst106*x3767);
IkReal x3778=((1.0)*x3767);
evalcond[0]=(((r21*x3777))+(((-1.0)*r22*x3775))+(((-1.0)*x3772*x3778)));
evalcond[1]=(cj0+((r11*x3777))+(((-1.0)*x3769*x3778))+(((-1.0)*r12*x3775)));
evalcond[2]=((((-1.0)*r02*x3775))+(((-1.0)*x3770*x3778))+(((-1.0)*x3773))+((r01*x3777)));
evalcond[3]=(((r22*x3767))+((r21*x3776))+((sj1*sj2))+(((-1.0)*x3772*x3775))+(((-1.0)*cj1*x3771)));
evalcond[4]=(((r02*x3767))+(((-1.0)*cj0*sj1*x3771))+(((-1.0)*x3770*x3775))+(((-1.0)*cj0*x3774))+((r01*x3776)));
evalcond[5]=((((-1.0)*x3773*x3774))+((r11*x3776))+(((-1.0)*x3769*x3775))+(((-1.0)*sj0*sj1*x3771))+((r12*x3767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3779=((1.0)*sj0);
IkReal x3780=((1.0)*gconst106);
CheckValue<IkReal> x3781=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3780)))),-1);
if(!x3781.valid){
continue;
}
CheckValue<IkReal> x3782 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3779)))),IkReal(((((-1.0)*cj0*r01*x3780))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3779))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3781.value)))+(x3782.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3783=IKsin(j4);
IkReal x3784=IKcos(j4);
IkReal x3785=(gconst107*r10);
IkReal x3786=(gconst107*r00);
IkReal x3787=((1.0)*cj2);
IkReal x3788=(gconst107*r20);
IkReal x3789=((1.0)*sj0);
IkReal x3790=(cj1*sj2);
IkReal x3791=((1.0)*x3784);
IkReal x3792=(gconst106*x3784);
IkReal x3793=(gconst106*x3783);
IkReal x3794=((1.0)*x3783);
evalcond[0]=(((r21*x3793))+(((-1.0)*r22*x3791))+(((-1.0)*x3788*x3794)));
evalcond[1]=((((-1.0)*r12*x3791))+cj0+((r11*x3793))+(((-1.0)*x3785*x3794)));
evalcond[2]=((((-1.0)*x3786*x3794))+(((-1.0)*x3789))+(((-1.0)*r02*x3791))+((r01*x3793)));
evalcond[3]=(((r21*x3792))+((r22*x3783))+((sj1*sj2))+(((-1.0)*cj1*x3787))+(((-1.0)*x3788*x3791)));
evalcond[4]=(((r02*x3783))+(((-1.0)*x3786*x3791))+(((-1.0)*cj0*x3790))+((r01*x3792))+(((-1.0)*cj0*sj1*x3787)));
evalcond[5]=(((r12*x3783))+(((-1.0)*sj0*sj1*x3787))+(((-1.0)*x3789*x3790))+((r11*x3792))+(((-1.0)*x3785*x3791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3795=((1.0)*gconst107);
CheckValue<IkReal> x3796 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3796.valid){
continue;
}
CheckValue<IkReal> x3797=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3795)))),-1);
if(!x3797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3796.value)+(((1.5707963267949)*(x3797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3798=IKsin(j4);
IkReal x3799=IKcos(j4);
IkReal x3800=(gconst107*r10);
IkReal x3801=(gconst107*r00);
IkReal x3802=((1.0)*cj2);
IkReal x3803=(gconst107*r20);
IkReal x3804=((1.0)*sj0);
IkReal x3805=(cj1*sj2);
IkReal x3806=((1.0)*x3799);
IkReal x3807=(gconst106*x3799);
IkReal x3808=(gconst106*x3798);
IkReal x3809=((1.0)*x3798);
evalcond[0]=(((r21*x3808))+(((-1.0)*x3803*x3809))+(((-1.0)*r22*x3806)));
evalcond[1]=(((r11*x3808))+cj0+(((-1.0)*x3800*x3809))+(((-1.0)*r12*x3806)));
evalcond[2]=(((r01*x3808))+(((-1.0)*x3801*x3809))+(((-1.0)*x3804))+(((-1.0)*r02*x3806)));
evalcond[3]=(((r22*x3798))+((r21*x3807))+((sj1*sj2))+(((-1.0)*cj1*x3802))+(((-1.0)*x3803*x3806)));
evalcond[4]=(((r01*x3807))+(((-1.0)*x3801*x3806))+((r02*x3798))+(((-1.0)*cj0*x3805))+(((-1.0)*cj0*sj1*x3802)));
evalcond[5]=((((-1.0)*sj0*sj1*x3802))+((r11*x3807))+(((-1.0)*x3800*x3806))+((r12*x3798))+(((-1.0)*x3804*x3805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3810=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3810;
j4eval[1]=IKsign(x3810);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3811=((1.0)*cj5);
IkReal x3812=((((-1.0)*r01*x3811))+(((-1.0)*r00*sj5)));
j4eval[0]=x3812;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3811))))));
j4eval[2]=IKsign(x3812);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3813=(sj1*sj2);
IkReal x3814=(cj5*r10);
IkReal x3815=(r11*sj5);
IkReal x3816=(cj1*cj2);
IkReal x3817=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3817;
j4eval[1]=((IKabs((((r12*x3816))+(((-1.0)*r12*x3813)))))+(IKabs(((((-1.0)*x3813*x3814))+((x3813*x3815))+((x3814*x3816))+(((-1.0)*x3815*x3816))))));
j4eval[2]=IKsign(x3817);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3818=(sj1*sj2);
IkReal x3819=(cj5*r10);
IkReal x3820=(r11*sj5);
IkReal x3821=(cj1*cj2);
CheckValue<IkReal> x3822=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3822.valid){
continue;
}
CheckValue<IkReal> x3823 = IKatan2WithCheck(IkReal((((x3819*x3821))+((x3818*x3820))+(((-1.0)*x3818*x3819))+(((-1.0)*x3820*x3821)))),IkReal((((r12*x3821))+(((-1.0)*r12*x3818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3822.value)))+(x3823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3824=IKcos(j4);
IkReal x3825=IKsin(j4);
IkReal x3826=(cj5*r00);
IkReal x3827=(cj5*r10);
IkReal x3828=(r21*sj5);
IkReal x3829=((1.0)*cj2);
IkReal x3830=(cj5*r20);
IkReal x3831=((1.0)*x3824);
IkReal x3832=((1.0)*x3825);
IkReal x3833=(sj5*x3825);
IkReal x3834=(sj5*x3824);
evalcond[0]=(((r12*x3825))+((r11*x3834))+(((-1.0)*x3827*x3831)));
evalcond[1]=((((-1.0)*x3830*x3832))+((x3825*x3828))+(((-1.0)*r22*x3831)));
evalcond[2]=(((r01*x3833))+(((-1.0)*r02*x3831))+(((-1.0)*x3826*x3832)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3831))+((r11*x3833))+(((-1.0)*x3827*x3832)));
evalcond[4]=((((-1.0)*x3830*x3831))+((sj1*sj2))+(((-1.0)*cj1*x3829))+((r22*x3825))+((x3824*x3828)));
evalcond[5]=((((-1.0)*sj1*x3829))+((r01*x3834))+(((-1.0)*cj1*sj2))+((r02*x3825))+(((-1.0)*x3826*x3831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3835=((1.0)*cj5);
CheckValue<IkReal> x3836 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3835))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3836.valid){
continue;
}
CheckValue<IkReal> x3837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3835)))),-1);
if(!x3837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3836.value)+(((1.5707963267949)*(x3837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3838=IKcos(j4);
IkReal x3839=IKsin(j4);
IkReal x3840=(cj5*r00);
IkReal x3841=(cj5*r10);
IkReal x3842=(r21*sj5);
IkReal x3843=((1.0)*cj2);
IkReal x3844=(cj5*r20);
IkReal x3845=((1.0)*x3838);
IkReal x3846=((1.0)*x3839);
IkReal x3847=(sj5*x3839);
IkReal x3848=(sj5*x3838);
evalcond[0]=((((-1.0)*x3841*x3845))+((r12*x3839))+((r11*x3848)));
evalcond[1]=((((-1.0)*x3844*x3846))+((x3839*x3842))+(((-1.0)*r22*x3845)));
evalcond[2]=((((-1.0)*r02*x3845))+(((-1.0)*x3840*x3846))+((r01*x3847)));
evalcond[3]=((1.0)+(((-1.0)*x3841*x3846))+(((-1.0)*r12*x3845))+((r11*x3847)));
evalcond[4]=((((-1.0)*x3844*x3845))+((x3838*x3842))+((sj1*sj2))+(((-1.0)*cj1*x3843))+((r22*x3839)));
evalcond[5]=(((r02*x3839))+(((-1.0)*x3840*x3845))+(((-1.0)*sj1*x3843))+(((-1.0)*cj1*sj2))+((r01*x3848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3849=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3849.valid){
continue;
}
CheckValue<IkReal> x3850 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3849.value)))+(x3850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3851=IKcos(j4);
IkReal x3852=IKsin(j4);
IkReal x3853=(cj5*r00);
IkReal x3854=(cj5*r10);
IkReal x3855=(r21*sj5);
IkReal x3856=((1.0)*cj2);
IkReal x3857=(cj5*r20);
IkReal x3858=((1.0)*x3851);
IkReal x3859=((1.0)*x3852);
IkReal x3860=(sj5*x3852);
IkReal x3861=(sj5*x3851);
evalcond[0]=(((r11*x3861))+(((-1.0)*x3854*x3858))+((r12*x3852)));
evalcond[1]=(((x3852*x3855))+(((-1.0)*x3857*x3859))+(((-1.0)*r22*x3858)));
evalcond[2]=(((r01*x3860))+(((-1.0)*x3853*x3859))+(((-1.0)*r02*x3858)));
evalcond[3]=((1.0)+((r11*x3860))+(((-1.0)*x3854*x3859))+(((-1.0)*r12*x3858)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x3857*x3858))+(((-1.0)*cj1*x3856))+((x3851*x3855))+((r22*x3852)));
evalcond[5]=(((r02*x3852))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3856))+((r01*x3861))+(((-1.0)*x3853*x3858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3862=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3862;
j4eval[1]=IKsign(x3862);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3863=((1.0)*cj5);
IkReal x3864=((((-1.0)*r21*x3863))+(((-1.0)*r20*sj5)));
j4eval[0]=x3864;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3863))))));
j4eval[2]=IKsign(x3864);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3865=cj5*cj5;
IkReal x3866=r11*r11;
IkReal x3867=(r11*sj5);
IkReal x3868=(cj5*r10);
IkReal x3869=((((-2.0)*x3867*x3868))+(r12*r12)+(((-1.0)*x3865*x3866))+x3866+((x3865*(r10*r10))));
j4eval[0]=x3869;
j4eval[1]=IKsign(x3869);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3868))+x3867))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3870=cj5*cj5;
IkReal x3871=r11*r11;
IkReal x3872=(cj5*r10);
IkReal x3873=(r11*sj5);
CheckValue<IkReal> x3874=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3870*x3871))+(r12*r12)+x3871+((x3870*(r10*r10)))+(((-2.0)*x3872*x3873)))),-1);
if(!x3874.valid){
continue;
}
CheckValue<IkReal> x3875 = IKatan2WithCheck(IkReal((x3873+(((-1.0)*x3872)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3874.value)))+(x3875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3876=IKcos(j4);
IkReal x3877=IKsin(j4);
IkReal x3878=(cj5*r00);
IkReal x3879=(cj5*r10);
IkReal x3880=(r21*sj5);
IkReal x3881=(cj5*r20);
IkReal x3882=((1.0)*x3876);
IkReal x3883=((1.0)*x3877);
IkReal x3884=(sj5*x3877);
IkReal x3885=(sj5*x3876);
evalcond[0]=((((-1.0)*x3879*x3882))+((r11*x3885))+((r12*x3877)));
evalcond[1]=(((x3877*x3880))+(((-1.0)*r22*x3882))+(((-1.0)*x3881*x3883)));
evalcond[2]=((((-1.0)*r02*x3882))+(((-1.0)*x3878*x3883))+((r01*x3884)));
evalcond[3]=((-1.0)+(((-1.0)*x3879*x3883))+((r11*x3884))+(((-1.0)*r12*x3882)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3878*x3882))+((r01*x3885))+((r02*x3877)));
evalcond[5]=(((x3876*x3880))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3877))+(((-1.0)*x3881*x3882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3886=((1.0)*cj5);
CheckValue<IkReal> x3887 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3887.valid){
continue;
}
CheckValue<IkReal> x3888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3886))+(((-1.0)*r20*sj5)))),-1);
if(!x3888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3887.value)+(((1.5707963267949)*(x3888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3889=IKcos(j4);
IkReal x3890=IKsin(j4);
IkReal x3891=(cj5*r00);
IkReal x3892=(cj5*r10);
IkReal x3893=(r21*sj5);
IkReal x3894=(cj5*r20);
IkReal x3895=((1.0)*x3889);
IkReal x3896=((1.0)*x3890);
IkReal x3897=(sj5*x3890);
IkReal x3898=(sj5*x3889);
evalcond[0]=((((-1.0)*x3892*x3895))+((r11*x3898))+((r12*x3890)));
evalcond[1]=(((x3890*x3893))+(((-1.0)*r22*x3895))+(((-1.0)*x3894*x3896)));
evalcond[2]=(((r01*x3897))+(((-1.0)*x3891*x3896))+(((-1.0)*r02*x3895)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3895))+(((-1.0)*x3892*x3896))+((r11*x3897)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x3898))+(((-1.0)*x3891*x3895))+((r02*x3890)));
evalcond[5]=(((x3889*x3893))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3894*x3895))+((r22*x3890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3899 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3899.valid){
continue;
}
CheckValue<IkReal> x3900=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3899.value)+(((1.5707963267949)*(x3900.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3901=IKcos(j4);
IkReal x3902=IKsin(j4);
IkReal x3903=(cj5*r00);
IkReal x3904=(cj5*r10);
IkReal x3905=(r21*sj5);
IkReal x3906=(cj5*r20);
IkReal x3907=((1.0)*x3901);
IkReal x3908=((1.0)*x3902);
IkReal x3909=(sj5*x3902);
IkReal x3910=(sj5*x3901);
evalcond[0]=((((-1.0)*x3904*x3907))+((r12*x3902))+((r11*x3910)));
evalcond[1]=((((-1.0)*x3906*x3908))+((x3902*x3905))+(((-1.0)*r22*x3907)));
evalcond[2]=((((-1.0)*x3903*x3908))+((r01*x3909))+(((-1.0)*r02*x3907)));
evalcond[3]=((-1.0)+(((-1.0)*x3904*x3908))+(((-1.0)*r12*x3907))+((r11*x3909)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3903*x3907))+((cj1*sj2))+((r01*x3910))+((r02*x3902)));
evalcond[5]=(((x3901*x3905))+(((-1.0)*x3906*x3907))+((r22*x3902))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3911=((-1.0)*r00);
IkReal x3913 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3913)==0){
continue;
}
IkReal x3912=pow(x3913,-0.5);
CheckValue<IkReal> x3914 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3911),IKFAST_ATAN2_MAGTHRESH);
if(!x3914.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3914.value));
IkReal gconst109=(r01*x3912);
IkReal gconst110=(x3911*x3912);
CheckValue<IkReal> x3915 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3915.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3915.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3916=((-1.0)*r00);
IkReal x3917=x3912;
CheckValue<IkReal> x3919 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3916),IKFAST_ATAN2_MAGTHRESH);
if(!x3919.valid){
continue;
}
IkReal x3918=((-1.0)*(x3919.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3918;
IkReal gconst108=x3918;
IkReal gconst109=(r01*x3917);
IkReal gconst110=(x3916*x3917);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3920=((1.0)*sj0);
IkReal x3921=((1.0)*gconst109);
CheckValue<IkReal> x3922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3921))+(((-1.0)*gconst110*r21)))),-1);
if(!x3922.valid){
continue;
}
CheckValue<IkReal> x3923 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3920))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst110*r00))+(((-1.0)*cj0*r01*x3921))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3922.value)))+(x3923.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3924=IKsin(j4);
IkReal x3925=IKcos(j4);
IkReal x3926=(gconst109*r21);
IkReal x3927=((1.0)*cj2);
IkReal x3928=((1.0)*sj0);
IkReal x3929=(cj1*sj2);
IkReal x3930=((1.0)*x3925);
IkReal x3931=(gconst109*x3924);
IkReal x3932=(gconst109*x3925);
IkReal x3933=((1.0)*gconst110*x3924);
evalcond[0]=((((-1.0)*r22*x3930))+(((-1.0)*r20*x3933))+((x3924*x3926)));
evalcond[1]=(cj0+(((-1.0)*r12*x3930))+(((-1.0)*r10*x3933))+((r11*x3931)));
evalcond[2]=(((r01*x3931))+(((-1.0)*x3928))+(((-1.0)*r00*x3933))+(((-1.0)*r02*x3930)));
evalcond[3]=((((-1.0)*cj1*x3927))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3930))+((r22*x3924))+((x3925*x3926)));
evalcond[4]=((((-1.0)*cj0*x3929))+((r01*x3932))+((r02*x3924))+(((-1.0)*gconst110*r00*x3930))+(((-1.0)*cj0*sj1*x3927)));
evalcond[5]=(((r12*x3924))+(((-1.0)*sj0*sj1*x3927))+(((-1.0)*x3928*x3929))+(((-1.0)*gconst110*r10*x3930))+((r11*x3932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3934=((1.0)*gconst110);
CheckValue<IkReal> x3935=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3934)))),-1);
if(!x3935.valid){
continue;
}
CheckValue<IkReal> x3936 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3934))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3935.value)))+(x3936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3937=IKsin(j4);
IkReal x3938=IKcos(j4);
IkReal x3939=(gconst109*r21);
IkReal x3940=((1.0)*cj2);
IkReal x3941=((1.0)*sj0);
IkReal x3942=(cj1*sj2);
IkReal x3943=((1.0)*x3938);
IkReal x3944=(gconst109*x3937);
IkReal x3945=(gconst109*x3938);
IkReal x3946=((1.0)*gconst110*x3937);
evalcond[0]=((((-1.0)*r22*x3943))+((x3937*x3939))+(((-1.0)*r20*x3946)));
evalcond[1]=(cj0+(((-1.0)*r10*x3946))+(((-1.0)*r12*x3943))+((r11*x3944)));
evalcond[2]=(((r01*x3944))+(((-1.0)*r00*x3946))+(((-1.0)*r02*x3943))+(((-1.0)*x3941)));
evalcond[3]=(((r22*x3937))+(((-1.0)*cj1*x3940))+((sj1*sj2))+((x3938*x3939))+(((-1.0)*gconst110*r20*x3943)));
evalcond[4]=(((r01*x3945))+(((-1.0)*cj0*x3942))+(((-1.0)*cj0*sj1*x3940))+(((-1.0)*gconst110*r00*x3943))+((r02*x3937)));
evalcond[5]=((((-1.0)*x3941*x3942))+(((-1.0)*sj0*sj1*x3940))+(((-1.0)*gconst110*r10*x3943))+((r12*x3937))+((r11*x3945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3947=((-1.0)*r01);
IkReal x3949 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3949)==0){
continue;
}
IkReal x3948=pow(x3949,-0.5);
CheckValue<IkReal> x3950 = IKatan2WithCheck(IkReal(x3947),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3950.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3950.value))));
IkReal gconst112=(x3947*x3948);
IkReal gconst113=((1.0)*r00*x3948);
CheckValue<IkReal> x3951 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3951.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3951.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3952=((-1.0)*r01);
CheckValue<IkReal> x3955 = IKatan2WithCheck(IkReal(x3952),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3955.valid){
continue;
}
IkReal x3953=((1.0)*(x3955.value));
IkReal x3954=x3948;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3953)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3953)));
IkReal gconst112=(x3952*x3954);
IkReal gconst113=((1.0)*r00*x3954);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3956=((-1.0)*r01);
CheckValue<IkReal> x3959 = IKatan2WithCheck(IkReal(x3956),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3959.valid){
continue;
}
IkReal x3957=((1.0)*(x3959.value));
IkReal x3958=x3948;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3957)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3957)));
IkReal gconst112=(x3956*x3958);
IkReal gconst113=((1.0)*r00*x3958);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3960=((-1.0)*r01);
CheckValue<IkReal> x3963 = IKatan2WithCheck(IkReal(x3960),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3963.valid){
continue;
}
IkReal x3961=((1.0)*(x3963.value));
IkReal x3962=x3948;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3961)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3961)));
IkReal gconst112=(x3960*x3962);
IkReal gconst113=((1.0)*r00*x3962);
IkReal x3964=r02*r02;
IkReal x3965=(r12*sj0);
IkReal x3966=((1.0)*cj0);
IkReal x3967=x3948;
j4eval[0]=((IKabs(((((-1.0)*r02*x3966))+(((-1.0)*x3965)))))+(IKabs((((r02*x3965*x3967))+(((-1.0)*x3966*x3967))+((cj0*x3964*x3967))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3968=((1.0)*sj0);
IkReal x3969=((1.0)*gconst112);
CheckValue<IkReal> x3970=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3969))+(((-1.0)*gconst113*r21)))),-1);
if(!x3970.valid){
continue;
}
CheckValue<IkReal> x3971 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3968)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x3969))+(((-1.0)*gconst112*r11*x3968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3970.value)))+(x3971.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3972=IKsin(j4);
IkReal x3973=IKcos(j4);
IkReal x3974=(gconst113*r20);
IkReal x3975=(gconst112*r21);
IkReal x3976=((1.0)*cj2);
IkReal x3977=(gconst113*r00);
IkReal x3978=(gconst113*r10);
IkReal x3979=((1.0)*sj0);
IkReal x3980=(cj1*sj2);
IkReal x3981=((1.0)*x3973);
IkReal x3982=((1.0)*x3972);
IkReal x3983=(gconst112*x3973);
IkReal x3984=(gconst112*x3972);
evalcond[0]=((((-1.0)*r22*x3981))+((x3972*x3975))+(((-1.0)*x3974*x3982)));
evalcond[1]=((((-1.0)*r12*x3981))+((r11*x3984))+cj0+(((-1.0)*x3978*x3982)));
evalcond[2]=((((-1.0)*x3979))+(((-1.0)*x3977*x3982))+((r01*x3984))+(((-1.0)*r02*x3981)));
evalcond[3]=((((-1.0)*cj1*x3976))+((x3973*x3975))+((sj1*sj2))+((r22*x3972))+(((-1.0)*x3974*x3981)));
evalcond[4]=((((-1.0)*x3977*x3981))+((r02*x3972))+((r01*x3983))+(((-1.0)*cj0*x3980))+(((-1.0)*cj0*sj1*x3976)));
evalcond[5]=(((r11*x3983))+((r12*x3972))+(((-1.0)*x3979*x3980))+(((-1.0)*x3978*x3981))+(((-1.0)*sj0*sj1*x3976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3985=((1.0)*gconst113);
CheckValue<IkReal> x3986 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3986.valid){
continue;
}
CheckValue<IkReal> x3987=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3985))+(((-1.0)*gconst112*r10)))),-1);
if(!x3987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3986.value)+(((1.5707963267949)*(x3987.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3988=IKsin(j4);
IkReal x3989=IKcos(j4);
IkReal x3990=(gconst113*r20);
IkReal x3991=(gconst112*r21);
IkReal x3992=((1.0)*cj2);
IkReal x3993=(gconst113*r00);
IkReal x3994=(gconst113*r10);
IkReal x3995=((1.0)*sj0);
IkReal x3996=(cj1*sj2);
IkReal x3997=((1.0)*x3989);
IkReal x3998=((1.0)*x3988);
IkReal x3999=(gconst112*x3989);
IkReal x4000=(gconst112*x3988);
evalcond[0]=((((-1.0)*x3990*x3998))+((x3988*x3991))+(((-1.0)*r22*x3997)));
evalcond[1]=(cj0+(((-1.0)*r12*x3997))+(((-1.0)*x3994*x3998))+((r11*x4000)));
evalcond[2]=((((-1.0)*x3993*x3998))+(((-1.0)*x3995))+((r01*x4000))+(((-1.0)*r02*x3997)));
evalcond[3]=(((x3989*x3991))+(((-1.0)*x3990*x3997))+((sj1*sj2))+((r22*x3988))+(((-1.0)*cj1*x3992)));
evalcond[4]=((((-1.0)*x3993*x3997))+(((-1.0)*cj0*sj1*x3992))+(((-1.0)*cj0*x3996))+((r01*x3999))+((r02*x3988)));
evalcond[5]=((((-1.0)*x3995*x3996))+((r11*x3999))+(((-1.0)*sj0*sj1*x3992))+(((-1.0)*x3994*x3997))+((r12*x3988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4001=((1.0)*gconst113);
CheckValue<IkReal> x4002 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4001))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4002.valid){
continue;
}
CheckValue<IkReal> x4003=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4001))+(((-1.0)*gconst112*r00)))),-1);
if(!x4003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4002.value)+(((1.5707963267949)*(x4003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4004=IKsin(j4);
IkReal x4005=IKcos(j4);
IkReal x4006=(gconst113*r20);
IkReal x4007=(gconst112*r21);
IkReal x4008=((1.0)*cj2);
IkReal x4009=(gconst113*r00);
IkReal x4010=(gconst113*r10);
IkReal x4011=((1.0)*sj0);
IkReal x4012=(cj1*sj2);
IkReal x4013=((1.0)*x4005);
IkReal x4014=((1.0)*x4004);
IkReal x4015=(gconst112*x4005);
IkReal x4016=(gconst112*x4004);
evalcond[0]=((((-1.0)*r22*x4013))+((x4004*x4007))+(((-1.0)*x4006*x4014)));
evalcond[1]=((((-1.0)*r12*x4013))+cj0+((r11*x4016))+(((-1.0)*x4010*x4014)));
evalcond[2]=((((-1.0)*r02*x4013))+((r01*x4016))+(((-1.0)*x4011))+(((-1.0)*x4009*x4014)));
evalcond[3]=(((sj1*sj2))+((x4005*x4007))+((r22*x4004))+(((-1.0)*cj1*x4008))+(((-1.0)*x4006*x4013)));
evalcond[4]=((((-1.0)*cj0*x4012))+((r01*x4015))+((r02*x4004))+(((-1.0)*x4009*x4013))+(((-1.0)*cj0*sj1*x4008)));
evalcond[5]=(((r12*x4004))+(((-1.0)*x4011*x4012))+(((-1.0)*sj0*sj1*x4008))+((r11*x4015))+(((-1.0)*x4010*x4013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4017=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4017;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4017);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4018=((1.0)*cj5);
IkReal x4019=((((-1.0)*r11*x4018))+(((-1.0)*r10*sj5)));
j4eval[0]=x4019;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4018)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4019);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4020=cj5*cj5;
IkReal x4021=r01*r01;
IkReal x4022=(cj5*r00);
IkReal x4023=(r01*sj5);
IkReal x4024=(((x4020*(r00*r00)))+x4021+(((-1.0)*x4020*x4021))+(r02*r02)+(((-2.0)*x4022*x4023)));
j4eval[0]=x4024;
j4eval[1]=IKsign(x4024);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4022))+x4023))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4025=cj5*cj5;
IkReal x4026=r01*r01;
IkReal x4027=(r01*sj5);
IkReal x4028=(cj5*r00);
CheckValue<IkReal> x4029=IKPowWithIntegerCheck(IKsign((x4026+(((-1.0)*x4025*x4026))+((x4025*(r00*r00)))+(r02*r02)+(((-2.0)*x4027*x4028)))),-1);
if(!x4029.valid){
continue;
}
CheckValue<IkReal> x4030 = IKatan2WithCheck(IkReal(((((-1.0)*x4028))+x4027)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4029.value)))+(x4030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4031=IKcos(j4);
IkReal x4032=IKsin(j4);
IkReal x4033=(cj5*r00);
IkReal x4034=(cj5*r10);
IkReal x4035=(r21*sj5);
IkReal x4036=((1.0)*cj2);
IkReal x4037=(cj5*r20);
IkReal x4038=((1.0)*x4031);
IkReal x4039=((1.0)*x4032);
IkReal x4040=(sj5*x4032);
IkReal x4041=(sj5*x4031);
evalcond[0]=(((r02*x4032))+((r01*x4041))+(((-1.0)*x4033*x4038)));
evalcond[1]=(((x4032*x4035))+(((-1.0)*x4037*x4039))+(((-1.0)*r22*x4038)));
evalcond[2]=((((-1.0)*x4034*x4039))+(((-1.0)*r12*x4038))+((r11*x4040)));
evalcond[3]=((-1.0)+((r01*x4040))+(((-1.0)*x4033*x4039))+(((-1.0)*r02*x4038)));
evalcond[4]=((((-1.0)*x4037*x4038))+(((-1.0)*cj1*x4036))+((sj1*sj2))+((x4031*x4035))+((r22*x4032)));
evalcond[5]=((((-1.0)*x4034*x4038))+(((-1.0)*cj1*sj2))+((r11*x4041))+((r12*x4032))+(((-1.0)*sj1*x4036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4042=((1.0)*cj5);
CheckValue<IkReal> x4043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4042)))),-1);
if(!x4043.valid){
continue;
}
CheckValue<IkReal> x4044 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4042))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4043.value)))+(x4044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4045=IKcos(j4);
IkReal x4046=IKsin(j4);
IkReal x4047=(cj5*r00);
IkReal x4048=(cj5*r10);
IkReal x4049=(r21*sj5);
IkReal x4050=((1.0)*cj2);
IkReal x4051=(cj5*r20);
IkReal x4052=((1.0)*x4045);
IkReal x4053=((1.0)*x4046);
IkReal x4054=(sj5*x4046);
IkReal x4055=(sj5*x4045);
evalcond[0]=(((r02*x4046))+(((-1.0)*x4047*x4052))+((r01*x4055)));
evalcond[1]=((((-1.0)*x4051*x4053))+((x4046*x4049))+(((-1.0)*r22*x4052)));
evalcond[2]=((((-1.0)*r12*x4052))+((r11*x4054))+(((-1.0)*x4048*x4053)));
evalcond[3]=((-1.0)+(((-1.0)*x4047*x4053))+(((-1.0)*r02*x4052))+((r01*x4054)));
evalcond[4]=(((r22*x4046))+((x4045*x4049))+(((-1.0)*x4051*x4052))+((sj1*sj2))+(((-1.0)*cj1*x4050)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4055))+((r12*x4046))+(((-1.0)*x4048*x4052))+(((-1.0)*sj1*x4050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4056=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4056.valid){
continue;
}
CheckValue<IkReal> x4057 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4056.value)))+(x4057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4058=IKcos(j4);
IkReal x4059=IKsin(j4);
IkReal x4060=(cj5*r00);
IkReal x4061=(cj5*r10);
IkReal x4062=(r21*sj5);
IkReal x4063=((1.0)*cj2);
IkReal x4064=(cj5*r20);
IkReal x4065=((1.0)*x4058);
IkReal x4066=((1.0)*x4059);
IkReal x4067=(sj5*x4059);
IkReal x4068=(sj5*x4058);
evalcond[0]=((((-1.0)*x4060*x4065))+((r02*x4059))+((r01*x4068)));
evalcond[1]=(((x4059*x4062))+(((-1.0)*x4064*x4066))+(((-1.0)*r22*x4065)));
evalcond[2]=((((-1.0)*x4061*x4066))+(((-1.0)*r12*x4065))+((r11*x4067)));
evalcond[3]=((-1.0)+(((-1.0)*x4060*x4066))+(((-1.0)*r02*x4065))+((r01*x4067)));
evalcond[4]=((((-1.0)*x4064*x4065))+((sj1*sj2))+(((-1.0)*cj1*x4063))+((r22*x4059))+((x4058*x4062)));
evalcond[5]=((((-1.0)*x4061*x4065))+(((-1.0)*cj1*sj2))+((r11*x4068))+((r12*x4059))+(((-1.0)*sj1*x4063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4069=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4069;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4070=((1.0)*cj5);
IkReal x4071=((((-1.0)*r21*x4070))+(((-1.0)*r20*sj5)));
j4eval[0]=x4071;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4070))+((r11*sj5))))));
j4eval[2]=IKsign(x4071);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4072=cj5*cj5;
IkReal x4073=r01*r01;
IkReal x4074=(r01*sj5);
IkReal x4075=(cj5*r00);
IkReal x4076=((((-1.0)*x4073))+(((-1.0)*(r02*r02)))+((x4072*x4073))+(((-1.0)*x4072*(r00*r00)))+(((2.0)*x4074*x4075)));
j4eval[0]=x4076;
j4eval[1]=IKsign(x4076);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4075))+x4074))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4077=cj5*cj5;
IkReal x4078=r01*r01;
IkReal x4079=(r01*sj5);
IkReal x4080=(cj5*r00);
CheckValue<IkReal> x4081=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4078))+((x4077*x4078))+(((-1.0)*(r02*r02)))+(((-1.0)*x4077*(r00*r00)))+(((2.0)*x4079*x4080)))),-1);
if(!x4081.valid){
continue;
}
CheckValue<IkReal> x4082 = IKatan2WithCheck(IkReal((x4079+(((-1.0)*x4080)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4081.value)))+(x4082.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4083=IKcos(j4);
IkReal x4084=IKsin(j4);
IkReal x4085=(cj5*r00);
IkReal x4086=(cj5*r10);
IkReal x4087=(r21*sj5);
IkReal x4088=(cj5*r20);
IkReal x4089=((1.0)*x4083);
IkReal x4090=((1.0)*x4084);
IkReal x4091=(sj5*x4084);
IkReal x4092=(sj5*x4083);
evalcond[0]=(((r01*x4092))+(((-1.0)*x4085*x4089))+((r02*x4084)));
evalcond[1]=(((x4084*x4087))+(((-1.0)*r22*x4089))+(((-1.0)*x4088*x4090)));
evalcond[2]=((((-1.0)*r12*x4089))+((r11*x4091))+(((-1.0)*x4086*x4090)));
evalcond[3]=((1.0)+((r01*x4091))+(((-1.0)*r02*x4089))+(((-1.0)*x4085*x4090)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4092))+((r12*x4084))+(((-1.0)*x4086*x4089)));
evalcond[5]=(((x4083*x4087))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4088*x4089))+((r22*x4084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4093=((1.0)*cj5);
CheckValue<IkReal> x4094 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4093))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4094.valid){
continue;
}
CheckValue<IkReal> x4095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4093))+(((-1.0)*r20*sj5)))),-1);
if(!x4095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4094.value)+(((1.5707963267949)*(x4095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4096=IKcos(j4);
IkReal x4097=IKsin(j4);
IkReal x4098=(cj5*r00);
IkReal x4099=(cj5*r10);
IkReal x4100=(r21*sj5);
IkReal x4101=(cj5*r20);
IkReal x4102=((1.0)*x4096);
IkReal x4103=((1.0)*x4097);
IkReal x4104=(sj5*x4097);
IkReal x4105=(sj5*x4096);
evalcond[0]=((((-1.0)*x4098*x4102))+((r02*x4097))+((r01*x4105)));
evalcond[1]=((((-1.0)*r22*x4102))+((x4097*x4100))+(((-1.0)*x4101*x4103)));
evalcond[2]=((((-1.0)*r12*x4102))+((r11*x4104))+(((-1.0)*x4099*x4103)));
evalcond[3]=((1.0)+(((-1.0)*x4098*x4103))+((r01*x4104))+(((-1.0)*r02*x4102)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4097))+((r11*x4105))+(((-1.0)*x4099*x4102)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4097))+(((-1.0)*x4101*x4102))+((x4096*x4100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4106 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4106.valid){
continue;
}
CheckValue<IkReal> x4107=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4106.value)+(((1.5707963267949)*(x4107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4108=IKcos(j4);
IkReal x4109=IKsin(j4);
IkReal x4110=(cj5*r00);
IkReal x4111=(cj5*r10);
IkReal x4112=(r21*sj5);
IkReal x4113=(cj5*r20);
IkReal x4114=((1.0)*x4108);
IkReal x4115=((1.0)*x4109);
IkReal x4116=(sj5*x4109);
IkReal x4117=(sj5*x4108);
evalcond[0]=((((-1.0)*x4110*x4114))+((r02*x4109))+((r01*x4117)));
evalcond[1]=((((-1.0)*r22*x4114))+((x4109*x4112))+(((-1.0)*x4113*x4115)));
evalcond[2]=((((-1.0)*r12*x4114))+(((-1.0)*x4111*x4115))+((r11*x4116)));
evalcond[3]=((1.0)+(((-1.0)*x4110*x4115))+(((-1.0)*r02*x4114))+((r01*x4116)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4111*x4114))+((cj1*sj2))+((r12*x4109))+((r11*x4117)));
evalcond[5]=(((x4108*x4112))+((r22*x4109))+(((-1.0)*x4113*x4114))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4118=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4118);
rxp1_1=(px*r21);
rxp1_2=(r11*x4118);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4119=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4119);
rxp1_1=(px*r21);
rxp1_2=(r11*x4119);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4120=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4120);
rxp1_1=(px*r21);
rxp1_2=(r11*x4120);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4123=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4123.valid){
continue;
}
IkReal x4121=x4123.value;
IkReal x4122=(sj0*x4121);
cj4array[0]=(((cj1*sj2*x4122))+((cj2*sj1*x4122)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4124=IKsin(j4);
IkReal x4125=IKcos(j4);
IkReal x4126=(r21*sj5);
IkReal x4127=((1.0)*cj5*r20);
evalcond[0]=(r02*x4124);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4125)));
evalcond[2]=((((-1.0)*x4124*x4127))+((x4124*x4126)));
evalcond[3]=(((r11*sj5*x4124))+(((-1.0)*cj5*r10*x4124)));
evalcond[4]=(((x4125*x4126))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4125*x4127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4129=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4129.valid){
continue;
}
IkReal x4128=x4129.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4128))+((cj1*cj2*x4128)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4130=IKsin(j4);
IkReal x4131=IKcos(j4);
IkReal x4132=((1.0)*sj0);
IkReal x4133=((1.0)*cj5);
IkReal x4134=(sj5*x4130);
evalcond[0]=(r02*x4130);
evalcond[1]=((((-1.0)*x4132))+(((-1.0)*r02*x4131)));
evalcond[2]=(((r21*x4134))+(((-1.0)*r20*x4130*x4133)));
evalcond[3]=((((-1.0)*r10*x4130*x4133))+((r11*x4134)));
evalcond[4]=((((-1.0)*cj2*sj1*x4132))+((r11*sj5*x4131))+(((-1.0)*r10*x4131*x4133))+(((-1.0)*cj1*sj2*x4132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4135=IKPowWithIntegerCheck(r02,-1);
if(!x4135.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4135.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4136=IKsin(j4);
IkReal x4137=IKcos(j4);
IkReal x4138=((1.0)*cj1);
IkReal x4139=(r21*sj5);
IkReal x4140=((1.0)*cj5);
IkReal x4141=(r11*sj5);
evalcond[0]=(r02*x4136);
evalcond[1]=(((x4136*x4139))+(((-1.0)*r20*x4136*x4140)));
evalcond[2]=(((x4136*x4141))+(((-1.0)*r10*x4136*x4140)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x4137*x4140))+(((-1.0)*cj2*x4138))+((x4137*x4139)));
evalcond[4]=(((x4137*x4141))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4137*x4140))+(((-1.0)*sj0*sj2*x4138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4142=((1.0)*sj0);
IkReal x4143=((1.0)*cj0);
CheckValue<IkReal> x4144 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4143))+(((-1.0)*r12*x4142)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4143))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4144.valid){
continue;
}
CheckValue<IkReal> x4145=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4144.value)+(((1.5707963267949)*(x4145.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4146=IKsin(j4);
IkReal x4147=IKcos(j4);
IkReal x4148=(cj5*r00);
IkReal x4149=(cj5*r10);
IkReal x4150=(r21*sj5);
IkReal x4151=((1.0)*cj2);
IkReal x4152=((1.0)*sj0);
IkReal x4153=(cj1*sj2);
IkReal x4154=(cj5*r20);
IkReal x4155=((1.0)*x4147);
IkReal x4156=((1.0)*x4146);
IkReal x4157=(sj5*x4146);
IkReal x4158=(sj5*x4147);
evalcond[0]=((((-1.0)*x4154*x4156))+((x4146*x4150))+(((-1.0)*r22*x4155)));
evalcond[1]=(cj0+((r11*x4157))+(((-1.0)*r12*x4155))+(((-1.0)*x4149*x4156)));
evalcond[2]=(((r01*x4157))+(((-1.0)*r02*x4155))+(((-1.0)*x4148*x4156))+(((-1.0)*x4152)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4151))+((r22*x4146))+(((-1.0)*x4154*x4155))+((x4147*x4150)));
evalcond[4]=(((r02*x4146))+((r01*x4158))+(((-1.0)*x4148*x4155))+(((-1.0)*cj0*sj1*x4151))+(((-1.0)*cj0*x4153)));
evalcond[5]=(((r12*x4146))+((r11*x4158))+(((-1.0)*x4152*x4153))+(((-1.0)*sj0*sj1*x4151))+(((-1.0)*x4149*x4155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4159=((1.0)*cj5);
CheckValue<IkReal> x4160 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4160.valid){
continue;
}
CheckValue<IkReal> x4161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4159)))),-1);
if(!x4161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4160.value)+(((1.5707963267949)*(x4161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4162=IKsin(j4);
IkReal x4163=IKcos(j4);
IkReal x4164=(cj5*r00);
IkReal x4165=(cj5*r10);
IkReal x4166=(r21*sj5);
IkReal x4167=((1.0)*cj2);
IkReal x4168=((1.0)*sj0);
IkReal x4169=(cj1*sj2);
IkReal x4170=(cj5*r20);
IkReal x4171=((1.0)*x4163);
IkReal x4172=((1.0)*x4162);
IkReal x4173=(sj5*x4162);
IkReal x4174=(sj5*x4163);
evalcond[0]=((((-1.0)*x4170*x4172))+(((-1.0)*r22*x4171))+((x4162*x4166)));
evalcond[1]=(((r11*x4173))+(((-1.0)*x4165*x4172))+cj0+(((-1.0)*r12*x4171)));
evalcond[2]=((((-1.0)*x4168))+(((-1.0)*x4164*x4172))+((r01*x4173))+(((-1.0)*r02*x4171)));
evalcond[3]=(((r22*x4162))+(((-1.0)*x4170*x4171))+(((-1.0)*cj1*x4167))+((sj1*sj2))+((x4163*x4166)));
evalcond[4]=((((-1.0)*x4164*x4171))+(((-1.0)*cj0*sj1*x4167))+((r02*x4162))+(((-1.0)*cj0*x4169))+((r01*x4174)));
evalcond[5]=(((r11*x4174))+(((-1.0)*x4165*x4171))+((r12*x4162))+(((-1.0)*x4168*x4169))+(((-1.0)*sj0*sj1*x4167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4175=((1.0)*cj5);
CheckValue<IkReal> x4176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4175))+(((-1.0)*r00*sj5)))),-1);
if(!x4176.valid){
continue;
}
CheckValue<IkReal> x4177 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4175)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4176.value)))+(x4177.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4178=IKsin(j4);
IkReal x4179=IKcos(j4);
IkReal x4180=(cj5*r00);
IkReal x4181=(cj5*r10);
IkReal x4182=(r21*sj5);
IkReal x4183=((1.0)*cj2);
IkReal x4184=((1.0)*sj0);
IkReal x4185=(cj1*sj2);
IkReal x4186=(cj5*r20);
IkReal x4187=((1.0)*x4179);
IkReal x4188=((1.0)*x4178);
IkReal x4189=(sj5*x4178);
IkReal x4190=(sj5*x4179);
evalcond[0]=(((x4178*x4182))+(((-1.0)*x4186*x4188))+(((-1.0)*r22*x4187)));
evalcond[1]=((((-1.0)*x4181*x4188))+(((-1.0)*r12*x4187))+cj0+((r11*x4189)));
evalcond[2]=((((-1.0)*x4184))+(((-1.0)*x4180*x4188))+(((-1.0)*r02*x4187))+((r01*x4189)));
evalcond[3]=((((-1.0)*cj1*x4183))+((x4179*x4182))+((r22*x4178))+((sj1*sj2))+(((-1.0)*x4186*x4187)));
evalcond[4]=((((-1.0)*cj0*sj1*x4183))+(((-1.0)*x4180*x4187))+(((-1.0)*cj0*x4185))+((r01*x4190))+((r02*x4178)));
evalcond[5]=((((-1.0)*x4181*x4187))+((r11*x4190))+((r12*x4178))+(((-1.0)*x4184*x4185))+(((-1.0)*sj0*sj1*x4183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4191=r21*r21;
IkReal x4192=cj5*cj5;
IkReal x4193=(sj1*sj2);
IkReal x4194=(r21*sj5);
IkReal x4195=(cj1*cj2);
IkReal x4196=(cj5*r20);
CheckValue<IkReal> x4197 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4195))+((r22*x4193)))),IkReal(((((-1.0)*x4193*x4196))+((x4193*x4194))+((x4195*x4196))+(((-1.0)*x4194*x4195)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4197.valid){
continue;
}
CheckValue<IkReal> x4198=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4192*(r20*r20)))+(((-1.0)*x4191))+((x4191*x4192))+(((2.0)*x4194*x4196))+(((-1.0)*(r22*r22))))),-1);
if(!x4198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4197.value)+(((1.5707963267949)*(x4198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4199=IKsin(j4);
IkReal x4200=IKcos(j4);
IkReal x4201=(r21*sj5);
IkReal x4202=(cj5*r20);
IkReal x4203=((1.0)*x4200);
evalcond[0]=(((x4199*x4201))+(((-1.0)*r22*x4203))+(((-1.0)*x4199*x4202)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4199))+((x4200*x4201))+(((-1.0)*x4202*x4203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4204=(cj5*sj4);
IkReal x4205=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4204))+((r01*x4205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4204))+(((-1.0)*r11*x4205))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4204))+((r01*x4205))))+IKsqr((((r10*x4204))+(((-1.0)*r11*x4205))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4204))+((r01*x4205))), (((r10*x4204))+(((-1.0)*r11*x4205))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4206=IKcos(j0);
IkReal x4207=IKsin(j0);
IkReal x4208=((0.21325)*cj2);
IkReal x4209=((1.0)*sj2);
IkReal x4210=(r11*sj5);
IkReal x4211=(r00*sj5);
IkReal x4212=(cj5*r11);
IkReal x4213=((0.21325)*sj2);
IkReal x4214=((1.0)*r10);
IkReal x4215=((1.0)*cj2);
IkReal x4216=(cj5*r01);
IkReal x4217=(cj5*sj4);
IkReal x4218=((1.0)*cj4);
IkReal x4219=(r01*sj5);
IkReal x4220=(cj1*x4207);
IkReal x4221=(cj1*x4206);
IkReal x4222=(cj5*x4218);
IkReal x4223=(sj1*x4206);
IkReal x4224=(sj1*x4207);
evalcond[0]=((((-1.0)*r12*x4218))+x4206+(((-1.0)*x4214*x4217))+((sj4*x4210)));
evalcond[1]=((((-1.0)*r00*x4217))+(((-1.0)*r02*x4218))+(((-1.0)*x4207))+((sj4*x4219)));
evalcond[2]=((((-1.0)*x4215*x4221))+((sj2*x4223))+(((-1.0)*x4216))+(((-1.0)*x4211)));
evalcond[3]=((((-1.0)*x4215*x4220))+((sj2*x4224))+(((-1.0)*x4212))+(((-1.0)*sj5*x4214)));
evalcond[4]=(((cj4*x4219))+(((-1.0)*x4215*x4223))+((r02*sj4))+(((-1.0)*x4209*x4221))+(((-1.0)*r00*x4222)));
evalcond[5]=((((-1.0)*cj4*cj5*x4214))+((cj4*x4210))+(((-1.0)*x4215*x4224))+(((-1.0)*x4209*x4220))+((r12*sj4)));
evalcond[6]=(((x4208*x4221))+(((-1.0)*px))+(((0.24365)*x4221))+(((-0.08535)*x4216))+(((-0.08535)*x4211))+(((-1.0)*x4213*x4223))+(((-0.11235)*x4207)));
evalcond[7]=(((x4208*x4220))+(((0.11235)*x4206))+(((-1.0)*py))+(((-0.08535)*r10*sj5))+(((0.24365)*x4220))+(((-0.08535)*x4212))+(((-1.0)*x4213*x4224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4225 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4225.valid){
continue;
}
CheckValue<IkReal> x4226=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4226.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4225.value)+(((1.5707963267949)*(x4226.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4227=IKcos(j0);
IkReal x4228=IKsin(j0);
IkReal x4229=(cj1*cj2);
IkReal x4230=((1.0)*cj5);
IkReal x4231=(sj1*sj2);
IkReal x4232=(r00*sj5);
IkReal x4233=(r10*sj5);
IkReal x4234=((0.24365)*cj1);
IkReal x4235=((0.08535)*cj5);
IkReal x4236=((0.21325)*x4228);
IkReal x4237=((0.21325)*x4227);
evalcond[0]=((((-1.0)*x4232))+(((-1.0)*x4227*x4229))+(((-1.0)*r01*x4230))+((x4227*x4231)));
evalcond[1]=((((-1.0)*r11*x4230))+(((-1.0)*x4228*x4229))+(((-1.0)*x4233))+((x4228*x4231)));
evalcond[2]=((((-1.0)*x4231*x4237))+(((-0.11235)*x4228))+(((-0.08535)*x4232))+(((-1.0)*r01*x4235))+((x4227*x4234))+(((-1.0)*px))+((x4229*x4237)));
evalcond[3]=((((-1.0)*x4231*x4236))+(((-0.08535)*x4233))+(((0.11235)*x4227))+(((-1.0)*r11*x4235))+(((-1.0)*py))+((x4229*x4236))+((x4228*x4234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4238=((1.0)*cj5);
IkReal x4239=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4238)));
j4eval[0]=x4239;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4238)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4239);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4240=((1.0)*cj5);
IkReal x4241=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4240)));
j4eval[0]=x4241;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4240))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4241);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4242=((1.0)*sj0);
IkReal x4243=((1.0)*cj0);
IkReal x4244=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4244;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x4243))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4242)))))+(IKabs(((((-1.0)*r12*x4242))+(((-1.0)*r02*x4243))))));
j4eval[2]=IKsign(x4244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4245=((-1.0)*r20);
IkReal x4247 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4247)==0){
continue;
}
IkReal x4246=pow(x4247,-0.5);
CheckValue<IkReal> x4248 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4245),IKFAST_ATAN2_MAGTHRESH);
if(!x4248.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4248.value));
IkReal gconst97=(r21*x4246);
IkReal gconst98=(x4245*x4246);
CheckValue<IkReal> x4249 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4249.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4249.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4250=((-1.0)*r20);
IkReal x4251=x4246;
CheckValue<IkReal> x4253 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4250),IKFAST_ATAN2_MAGTHRESH);
if(!x4253.valid){
continue;
}
IkReal x4252=((-1.0)*(x4253.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4252;
IkReal gconst96=x4252;
IkReal gconst97=(r21*x4251);
IkReal gconst98=(x4250*x4251);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4254=((-1.0)*r20);
IkReal x4255=x4246;
CheckValue<IkReal> x4257 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4254),IKFAST_ATAN2_MAGTHRESH);
if(!x4257.valid){
continue;
}
IkReal x4256=((-1.0)*(x4257.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4256;
IkReal gconst96=x4256;
IkReal gconst97=(r21*x4255);
IkReal gconst98=(x4254*x4255);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4258=((-1.0)*r20);
IkReal x4259=x4246;
CheckValue<IkReal> x4261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4258),IKFAST_ATAN2_MAGTHRESH);
if(!x4261.valid){
continue;
}
IkReal x4260=((-1.0)*(x4261.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4260;
IkReal gconst96=x4260;
IkReal gconst97=(r21*x4259);
IkReal gconst98=(x4258*x4259);
IkReal x4262=((1.0)*(r22*r22));
CheckValue<IkReal> x4266=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4262))),-1);
if(!x4266.valid){
continue;
}
IkReal x4263=x4266.value;
IkReal x4264=((1.0)*x4263);
IkReal x4265=((((-2.0)*x4263*(r20*r20)*(r21*r21)))+(((-1.0)*x4264*(r21*r21*r21*r21)))+(((-1.0)*x4264*(r20*r20*r20*r20)))+(((-1.0)*x4262)));
j4eval[0]=x4265;
j4eval[1]=IKsign(x4265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4267=(cj1*cj2);
IkReal x4268=(gconst98*r20);
IkReal x4269=(sj1*sj2);
IkReal x4270=(gconst97*r21);
CheckValue<IkReal> x4271=IKPowWithIntegerCheck(IKsign(((((2.0)*x4268*x4270))+(((-1.0)*(x4268*x4268)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4270*x4270))))),-1);
if(!x4271.valid){
continue;
}
CheckValue<IkReal> x4272 = IKatan2WithCheck(IkReal((((r22*x4269))+(((-1.0)*r22*x4267)))),IkReal((((x4267*x4268))+(((-1.0)*x4268*x4269))+(((-1.0)*x4267*x4270))+((x4269*x4270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4271.value)))+(x4272.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4273=IKsin(j4);
IkReal x4274=IKcos(j4);
IkReal x4275=(gconst98*r10);
IkReal x4276=(gconst97*r21);
IkReal x4277=(gconst98*r20);
IkReal x4278=((1.0)*cj2);
IkReal x4279=((1.0)*sj0);
IkReal x4280=(gconst98*r00);
IkReal x4281=(cj1*sj2);
IkReal x4282=((1.0)*x4274);
IkReal x4283=((1.0)*x4273);
IkReal x4284=(gconst97*x4273);
IkReal x4285=(gconst97*x4274);
evalcond[0]=((((-1.0)*r22*x4282))+(((-1.0)*x4277*x4283))+((x4273*x4276)));
evalcond[1]=((((-1.0)*x4275*x4283))+cj0+((r11*x4284))+(((-1.0)*r12*x4282)));
evalcond[2]=((((-1.0)*x4280*x4283))+(((-1.0)*r02*x4282))+(((-1.0)*x4279))+((r01*x4284)));
evalcond[3]=((((-1.0)*cj1*x4278))+((x4274*x4276))+((sj1*sj2))+(((-1.0)*x4277*x4282))+((r22*x4273)));
evalcond[4]=(((r02*x4273))+(((-1.0)*cj0*x4281))+(((-1.0)*x4280*x4282))+(((-1.0)*cj0*sj1*x4278))+((r01*x4285)));
evalcond[5]=((((-1.0)*x4275*x4282))+((r11*x4285))+((r12*x4273))+(((-1.0)*sj0*sj1*x4278))+(((-1.0)*x4279*x4281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4286=((1.0)*gconst98);
CheckValue<IkReal> x4287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4286))+(((-1.0)*gconst97*r10)))),-1);
if(!x4287.valid){
continue;
}
CheckValue<IkReal> x4288 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4287.value)))+(x4288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4289=IKsin(j4);
IkReal x4290=IKcos(j4);
IkReal x4291=(gconst98*r10);
IkReal x4292=(gconst97*r21);
IkReal x4293=(gconst98*r20);
IkReal x4294=((1.0)*cj2);
IkReal x4295=((1.0)*sj0);
IkReal x4296=(gconst98*r00);
IkReal x4297=(cj1*sj2);
IkReal x4298=((1.0)*x4290);
IkReal x4299=((1.0)*x4289);
IkReal x4300=(gconst97*x4289);
IkReal x4301=(gconst97*x4290);
evalcond[0]=((((-1.0)*r22*x4298))+((x4289*x4292))+(((-1.0)*x4293*x4299)));
evalcond[1]=(((r11*x4300))+cj0+(((-1.0)*x4291*x4299))+(((-1.0)*r12*x4298)));
evalcond[2]=((((-1.0)*x4296*x4299))+(((-1.0)*x4295))+((r01*x4300))+(((-1.0)*r02*x4298)));
evalcond[3]=(((r22*x4289))+((sj1*sj2))+((x4290*x4292))+(((-1.0)*x4293*x4298))+(((-1.0)*cj1*x4294)));
evalcond[4]=((((-1.0)*x4296*x4298))+(((-1.0)*cj0*sj1*x4294))+((r02*x4289))+(((-1.0)*cj0*x4297))+((r01*x4301)));
evalcond[5]=(((r11*x4301))+((r12*x4289))+(((-1.0)*x4291*x4298))+(((-1.0)*x4295*x4297))+(((-1.0)*sj0*sj1*x4294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4302=((1.0)*gconst98);
CheckValue<IkReal> x4303=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4302))+(((-1.0)*gconst97*r00)))),-1);
if(!x4303.valid){
continue;
}
CheckValue<IkReal> x4304 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x4302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4303.value)))+(x4304.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4305=IKsin(j4);
IkReal x4306=IKcos(j4);
IkReal x4307=(gconst98*r10);
IkReal x4308=(gconst97*r21);
IkReal x4309=(gconst98*r20);
IkReal x4310=((1.0)*cj2);
IkReal x4311=((1.0)*sj0);
IkReal x4312=(gconst98*r00);
IkReal x4313=(cj1*sj2);
IkReal x4314=((1.0)*x4306);
IkReal x4315=((1.0)*x4305);
IkReal x4316=(gconst97*x4305);
IkReal x4317=(gconst97*x4306);
evalcond[0]=((((-1.0)*r22*x4314))+(((-1.0)*x4309*x4315))+((x4305*x4308)));
evalcond[1]=((((-1.0)*x4307*x4315))+cj0+((r11*x4316))+(((-1.0)*r12*x4314)));
evalcond[2]=((((-1.0)*x4312*x4315))+(((-1.0)*x4311))+((r01*x4316))+(((-1.0)*r02*x4314)));
evalcond[3]=(((r22*x4305))+(((-1.0)*cj1*x4310))+((sj1*sj2))+(((-1.0)*x4309*x4314))+((x4306*x4308)));
evalcond[4]=((((-1.0)*x4312*x4314))+((r02*x4305))+(((-1.0)*cj0*x4313))+((r01*x4317))+(((-1.0)*cj0*sj1*x4310)));
evalcond[5]=(((r12*x4305))+(((-1.0)*x4307*x4314))+(((-1.0)*x4311*x4313))+((r11*x4317))+(((-1.0)*sj0*sj1*x4310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4318=((-1.0)*r21);
IkReal x4320 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4320)==0){
continue;
}
IkReal x4319=pow(x4320,-0.5);
CheckValue<IkReal> x4321 = IKatan2WithCheck(IkReal(x4318),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4321.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4321.value))));
IkReal gconst100=(x4318*x4319);
IkReal gconst101=((1.0)*r20*x4319);
CheckValue<IkReal> x4322 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4322.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4322.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4323=((-1.0)*r21);
CheckValue<IkReal> x4326 = IKatan2WithCheck(IkReal(x4323),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4326.valid){
continue;
}
IkReal x4324=((1.0)*(x4326.value));
IkReal x4325=x4319;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4324)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4324)));
IkReal gconst100=(x4323*x4325);
IkReal gconst101=((1.0)*r20*x4325);
IkReal x4327=r22*r22;
IkReal x4328=((1.0)*x4327);
CheckValue<IkReal> x4332=IKPowWithIntegerCheck(((-1.0)+x4327),-1);
if(!x4332.valid){
continue;
}
IkReal x4329=x4332.value;
if((((1.0)+(((-1.0)*x4328)))) < -0.00001)
continue;
IkReal x4330=IKsqrt(((1.0)+(((-1.0)*x4328))));
IkReal x4331=(cj0*x4329*x4330);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x4331+(((-1.0)*x4328*x4331))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4333=((-1.0)*r21);
CheckValue<IkReal> x4336 = IKatan2WithCheck(IkReal(x4333),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4336.valid){
continue;
}
IkReal x4334=((1.0)*(x4336.value));
IkReal x4335=x4319;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4334)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4334)));
IkReal gconst100=(x4333*x4335);
IkReal gconst101=((1.0)*r20*x4335);
IkReal x4337=r22*r22;
IkReal x4338=((1.0)*x4337);
CheckValue<IkReal> x4342=IKPowWithIntegerCheck(((-1.0)+x4337),-1);
if(!x4342.valid){
continue;
}
IkReal x4339=x4342.value;
if((((1.0)+(((-1.0)*x4338)))) < -0.00001)
continue;
IkReal x4340=IKsqrt(((1.0)+(((-1.0)*x4338))));
IkReal x4341=(sj0*x4339*x4340);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4338*x4341))+x4341))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4343=((-1.0)*r21);
CheckValue<IkReal> x4346 = IKatan2WithCheck(IkReal(x4343),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4346.valid){
continue;
}
IkReal x4344=((1.0)*(x4346.value));
IkReal x4345=x4319;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4344)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4344)));
IkReal gconst100=(x4343*x4345);
IkReal gconst101=((1.0)*r20*x4345);
IkReal x4347=r22*r22;
IkReal x4348=(r12*sj0);
IkReal x4349=(cj0*r02);
CheckValue<IkReal> x4353=IKPowWithIntegerCheck(((-1.0)+x4347),-1);
if(!x4353.valid){
continue;
}
IkReal x4350=x4353.value;
if((((1.0)+(((-1.0)*x4347)))) < -0.00001)
continue;
IkReal x4351=IKsqrt(((1.0)+(((-1.0)*x4347))));
IkReal x4352=(r22*x4350*x4351);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4349))+(((-1.0)*x4348)))))+(IKabs((((x4348*x4352))+((x4349*x4352))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4354=((1.0)*sj0);
IkReal x4355=((1.0)*gconst100);
CheckValue<IkReal> x4356 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4354))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4355))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4356.valid){
continue;
}
CheckValue<IkReal> x4357=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x4355)))),-1);
if(!x4357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4356.value)+(((1.5707963267949)*(x4357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4358=IKsin(j4);
IkReal x4359=IKcos(j4);
IkReal x4360=(gconst101*r20);
IkReal x4361=(gconst101*r10);
IkReal x4362=((1.0)*cj2);
IkReal x4363=(gconst101*r00);
IkReal x4364=((1.0)*sj0);
IkReal x4365=(cj1*sj2);
IkReal x4366=((1.0)*x4359);
IkReal x4367=((1.0)*x4358);
IkReal x4368=(gconst100*x4358);
IkReal x4369=(gconst100*x4359);
evalcond[0]=((((-1.0)*r22*x4366))+(((-1.0)*x4360*x4367))+((r21*x4368)));
evalcond[1]=((((-1.0)*x4361*x4367))+cj0+((r11*x4368))+(((-1.0)*r12*x4366)));
evalcond[2]=((((-1.0)*x4364))+((r01*x4368))+(((-1.0)*r02*x4366))+(((-1.0)*x4363*x4367)));
evalcond[3]=((((-1.0)*cj1*x4362))+(((-1.0)*x4360*x4366))+((r21*x4369))+((r22*x4358))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x4365))+((r01*x4369))+((r02*x4358))+(((-1.0)*cj0*sj1*x4362))+(((-1.0)*x4363*x4366)));
evalcond[5]=((((-1.0)*x4361*x4366))+((r11*x4369))+(((-1.0)*x4364*x4365))+(((-1.0)*sj0*sj1*x4362))+((r12*x4358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4370=((1.0)*gconst101);
CheckValue<IkReal> x4371=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4370)))),-1);
if(!x4371.valid){
continue;
}
CheckValue<IkReal> x4372 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4370))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4371.value)))+(x4372.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4373=IKsin(j4);
IkReal x4374=IKcos(j4);
IkReal x4375=(gconst101*r20);
IkReal x4376=(gconst101*r10);
IkReal x4377=((1.0)*cj2);
IkReal x4378=(gconst101*r00);
IkReal x4379=((1.0)*sj0);
IkReal x4380=(cj1*sj2);
IkReal x4381=((1.0)*x4374);
IkReal x4382=((1.0)*x4373);
IkReal x4383=(gconst100*x4373);
IkReal x4384=(gconst100*x4374);
evalcond[0]=((((-1.0)*r22*x4381))+((r21*x4383))+(((-1.0)*x4375*x4382)));
evalcond[1]=((((-1.0)*r12*x4381))+cj0+((r11*x4383))+(((-1.0)*x4376*x4382)));
evalcond[2]=((((-1.0)*r02*x4381))+(((-1.0)*x4379))+(((-1.0)*x4378*x4382))+((r01*x4383)));
evalcond[3]=(((r22*x4373))+((sj1*sj2))+((r21*x4384))+(((-1.0)*x4375*x4381))+(((-1.0)*cj1*x4377)));
evalcond[4]=((((-1.0)*cj0*sj1*x4377))+((r02*x4373))+(((-1.0)*x4378*x4381))+(((-1.0)*cj0*x4380))+((r01*x4384)));
evalcond[5]=((((-1.0)*x4379*x4380))+((r12*x4373))+(((-1.0)*sj0*sj1*x4377))+((r11*x4384))+(((-1.0)*x4376*x4381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4385=((1.0)*gconst101);
CheckValue<IkReal> x4386=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4385)))),-1);
if(!x4386.valid){
continue;
}
CheckValue<IkReal> x4387 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4386.value)))+(x4387.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4388=IKsin(j4);
IkReal x4389=IKcos(j4);
IkReal x4390=(gconst101*r20);
IkReal x4391=(gconst101*r10);
IkReal x4392=((1.0)*cj2);
IkReal x4393=(gconst101*r00);
IkReal x4394=((1.0)*sj0);
IkReal x4395=(cj1*sj2);
IkReal x4396=((1.0)*x4389);
IkReal x4397=((1.0)*x4388);
IkReal x4398=(gconst100*x4388);
IkReal x4399=(gconst100*x4389);
evalcond[0]=((((-1.0)*x4390*x4397))+(((-1.0)*r22*x4396))+((r21*x4398)));
evalcond[1]=((((-1.0)*r12*x4396))+cj0+(((-1.0)*x4391*x4397))+((r11*x4398)));
evalcond[2]=((((-1.0)*x4394))+((r01*x4398))+(((-1.0)*r02*x4396))+(((-1.0)*x4393*x4397)));
evalcond[3]=(((r22*x4388))+((sj1*sj2))+(((-1.0)*x4390*x4396))+(((-1.0)*cj1*x4392))+((r21*x4399)));
evalcond[4]=(((r01*x4399))+(((-1.0)*cj0*sj1*x4392))+((r02*x4388))+(((-1.0)*x4393*x4396))+(((-1.0)*cj0*x4395)));
evalcond[5]=((((-1.0)*sj0*sj1*x4392))+(((-1.0)*x4394*x4395))+(((-1.0)*x4391*x4396))+((r11*x4399))+((r12*x4388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4400=((-1.0)*r10);
IkReal x4402 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4402)==0){
continue;
}
IkReal x4401=pow(x4402,-0.5);
CheckValue<IkReal> x4403 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4400),IKFAST_ATAN2_MAGTHRESH);
if(!x4403.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4403.value));
IkReal gconst103=(r11*x4401);
IkReal gconst104=(x4400*x4401);
CheckValue<IkReal> x4404 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4404.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4404.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4405=((-1.0)*r10);
IkReal x4406=x4401;
CheckValue<IkReal> x4408 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4405),IKFAST_ATAN2_MAGTHRESH);
if(!x4408.valid){
continue;
}
IkReal x4407=((-1.0)*(x4408.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4407;
IkReal gconst102=x4407;
IkReal gconst103=(r11*x4406);
IkReal gconst104=(x4405*x4406);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4409=((1.0)*sj0);
IkReal x4410=((1.0)*gconst103);
CheckValue<IkReal> x4411 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4409))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4410))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x4409))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4411.valid){
continue;
}
CheckValue<IkReal> x4412=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4410)))),-1);
if(!x4412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4411.value)+(((1.5707963267949)*(x4412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4413=IKsin(j4);
IkReal x4414=IKcos(j4);
IkReal x4415=(gconst103*r11);
IkReal x4416=((1.0)*cj2);
IkReal x4417=((1.0)*sj0);
IkReal x4418=(cj1*sj2);
IkReal x4419=((1.0)*x4414);
IkReal x4420=(gconst103*x4414);
IkReal x4421=(gconst103*x4413);
IkReal x4422=((1.0)*gconst104*x4413);
evalcond[0]=((((-1.0)*r22*x4419))+(((-1.0)*r20*x4422))+((r21*x4421)));
evalcond[1]=(cj0+((x4413*x4415))+(((-1.0)*r12*x4419))+(((-1.0)*r10*x4422)));
evalcond[2]=((((-1.0)*r02*x4419))+(((-1.0)*x4417))+((r01*x4421))+(((-1.0)*r00*x4422)));
evalcond[3]=(((r22*x4413))+((sj1*sj2))+((r21*x4420))+(((-1.0)*cj1*x4416))+(((-1.0)*gconst104*r20*x4419)));
evalcond[4]=((((-1.0)*cj0*sj1*x4416))+(((-1.0)*cj0*x4418))+(((-1.0)*gconst104*r00*x4419))+((r01*x4420))+((r02*x4413)));
evalcond[5]=(((x4414*x4415))+((r12*x4413))+(((-1.0)*x4417*x4418))+(((-1.0)*sj0*sj1*x4416))+(((-1.0)*gconst104*r10*x4419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4423=((1.0)*gconst104);
CheckValue<IkReal> x4424 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4423))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4424.valid){
continue;
}
CheckValue<IkReal> x4425=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4423))+(((-1.0)*gconst103*r00)))),-1);
if(!x4425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4424.value)+(((1.5707963267949)*(x4425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4426=IKsin(j4);
IkReal x4427=IKcos(j4);
IkReal x4428=(gconst103*r11);
IkReal x4429=((1.0)*cj2);
IkReal x4430=((1.0)*sj0);
IkReal x4431=(cj1*sj2);
IkReal x4432=((1.0)*x4427);
IkReal x4433=(gconst103*x4427);
IkReal x4434=(gconst103*x4426);
IkReal x4435=((1.0)*gconst104*x4426);
evalcond[0]=((((-1.0)*r22*x4432))+(((-1.0)*r20*x4435))+((r21*x4434)));
evalcond[1]=(cj0+((x4426*x4428))+(((-1.0)*r10*x4435))+(((-1.0)*r12*x4432)));
evalcond[2]=((((-1.0)*r02*x4432))+(((-1.0)*x4430))+(((-1.0)*r00*x4435))+((r01*x4434)));
evalcond[3]=(((sj1*sj2))+((r22*x4426))+(((-1.0)*cj1*x4429))+(((-1.0)*gconst104*r20*x4432))+((r21*x4433)));
evalcond[4]=(((r02*x4426))+(((-1.0)*cj0*x4431))+(((-1.0)*cj0*sj1*x4429))+(((-1.0)*gconst104*r00*x4432))+((r01*x4433)));
evalcond[5]=((((-1.0)*x4430*x4431))+(((-1.0)*sj0*sj1*x4429))+((x4427*x4428))+(((-1.0)*gconst104*r10*x4432))+((r12*x4426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4436=((-1.0)*r11);
IkReal x4438 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4438)==0){
continue;
}
IkReal x4437=pow(x4438,-0.5);
CheckValue<IkReal> x4439 = IKatan2WithCheck(IkReal(x4436),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4439.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4439.value))));
IkReal gconst106=(x4436*x4437);
IkReal gconst107=((1.0)*r10*x4437);
CheckValue<IkReal> x4440 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4440.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4440.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4441=((-1.0)*r11);
CheckValue<IkReal> x4444 = IKatan2WithCheck(IkReal(x4441),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4444.valid){
continue;
}
IkReal x4442=((1.0)*(x4444.value));
IkReal x4443=x4437;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4442)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4442)));
IkReal gconst106=(x4441*x4443);
IkReal gconst107=((1.0)*r10*x4443);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4445=((-1.0)*r11);
CheckValue<IkReal> x4448 = IKatan2WithCheck(IkReal(x4445),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4448.valid){
continue;
}
IkReal x4446=((1.0)*(x4448.value));
IkReal x4447=x4437;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4446)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4446)));
IkReal gconst106=(x4445*x4447);
IkReal gconst107=((1.0)*r10*x4447);
IkReal x4449=r12*r12;
IkReal x4450=((1.0)*sj0);
IkReal x4451=(cj0*r02);
IkReal x4452=x4437;
j4eval[0]=((IKabs((((sj0*x4449*x4452))+((r12*x4451*x4452))+(((-1.0)*x4450*x4452)))))+(IKabs(((((-1.0)*r12*x4450))+(((-1.0)*x4451))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4453=((-1.0)*r11);
CheckValue<IkReal> x4456 = IKatan2WithCheck(IkReal(x4453),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4456.valid){
continue;
}
IkReal x4454=((1.0)*(x4456.value));
IkReal x4455=x4437;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4454)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4454)));
IkReal gconst106=(x4453*x4455);
IkReal gconst107=((1.0)*r10*x4455);
IkReal x4457=r12*r12;
IkReal x4458=((1.0)+(((-1.0)*x4457)));
IkReal x4459=(r22*sj1*sj2);
IkReal x4460=(cj1*cj2*r22);
CheckValue<IkReal> x4467=IKPowWithIntegerCheck(x4458,-1);
if(!x4467.valid){
continue;
}
IkReal x4461=x4467.value;
CheckValue<IkReal> x4468=IKPowWithIntegerCheck(((-1.0)+x4457),-1);
if(!x4468.valid){
continue;
}
IkReal x4462=x4468.value;
IkReal x4463=((1.0)*x4461);
if((x4458) < -0.00001)
continue;
IkReal x4464=IKsqrt(x4458);
IkReal x4465=(r12*x4462*x4464);
IkReal x4466=((((-2.0)*r10*r11*r20*r21*x4461))+(((-1.0)*x4463*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4463*(r11*r11)*(r21*r21))));
j4eval[0]=x4466;
j4eval[1]=((IKabs(((((-1.0)*x4459*x4465))+((x4460*x4465)))))+(IKabs((x4459+(((-1.0)*x4460))))));
j4eval[2]=IKsign(x4466);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4469=(sj1*sj2);
IkReal x4470=(gconst106*r21);
IkReal x4471=(gconst107*r20);
IkReal x4472=(cj1*cj2);
CheckValue<IkReal> x4473=IKPowWithIntegerCheck(IKsign(((((2.0)*x4470*x4471))+(((-1.0)*(x4471*x4471)))+(((-1.0)*(x4470*x4470)))+(((-1.0)*(r22*r22))))),-1);
if(!x4473.valid){
continue;
}
CheckValue<IkReal> x4474 = IKatan2WithCheck(IkReal((((r22*x4469))+(((-1.0)*r22*x4472)))),IkReal((((x4471*x4472))+(((-1.0)*x4469*x4471))+((x4469*x4470))+(((-1.0)*x4470*x4472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4473.value)))+(x4474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4475=IKsin(j4);
IkReal x4476=IKcos(j4);
IkReal x4477=(gconst107*r10);
IkReal x4478=(gconst107*r00);
IkReal x4479=((1.0)*cj2);
IkReal x4480=(gconst107*r20);
IkReal x4481=((1.0)*sj0);
IkReal x4482=(cj1*sj2);
IkReal x4483=((1.0)*x4476);
IkReal x4484=(gconst106*x4476);
IkReal x4485=(gconst106*x4475);
IkReal x4486=((1.0)*x4475);
evalcond[0]=(((r21*x4485))+(((-1.0)*x4480*x4486))+(((-1.0)*r22*x4483)));
evalcond[1]=(((r11*x4485))+(((-1.0)*r12*x4483))+cj0+(((-1.0)*x4477*x4486)));
evalcond[2]=((((-1.0)*x4478*x4486))+((r01*x4485))+(((-1.0)*r02*x4483))+(((-1.0)*x4481)));
evalcond[3]=((((-1.0)*cj1*x4479))+((r21*x4484))+((sj1*sj2))+(((-1.0)*x4480*x4483))+((r22*x4475)));
evalcond[4]=((((-1.0)*cj0*x4482))+(((-1.0)*cj0*sj1*x4479))+(((-1.0)*x4478*x4483))+((r02*x4475))+((r01*x4484)));
evalcond[5]=((((-1.0)*x4481*x4482))+((r11*x4484))+(((-1.0)*sj0*sj1*x4479))+(((-1.0)*x4477*x4483))+((r12*x4475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4487=((1.0)*sj0);
IkReal x4488=((1.0)*gconst106);
CheckValue<IkReal> x4489=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4488)))),-1);
if(!x4489.valid){
continue;
}
CheckValue<IkReal> x4490 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4487))+(((-1.0)*cj0*r02)))),IkReal((((gconst107*r10*sj0))+(((-1.0)*cj0*r01*x4488))+(((-1.0)*gconst106*r11*x4487))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4489.value)))+(x4490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4491=IKsin(j4);
IkReal x4492=IKcos(j4);
IkReal x4493=(gconst107*r10);
IkReal x4494=(gconst107*r00);
IkReal x4495=((1.0)*cj2);
IkReal x4496=(gconst107*r20);
IkReal x4497=((1.0)*sj0);
IkReal x4498=(cj1*sj2);
IkReal x4499=((1.0)*x4492);
IkReal x4500=(gconst106*x4492);
IkReal x4501=(gconst106*x4491);
IkReal x4502=((1.0)*x4491);
evalcond[0]=(((r21*x4501))+(((-1.0)*x4496*x4502))+(((-1.0)*r22*x4499)));
evalcond[1]=(cj0+((r11*x4501))+(((-1.0)*x4493*x4502))+(((-1.0)*r12*x4499)));
evalcond[2]=((((-1.0)*x4494*x4502))+(((-1.0)*r02*x4499))+((r01*x4501))+(((-1.0)*x4497)));
evalcond[3]=((((-1.0)*cj1*x4495))+(((-1.0)*x4496*x4499))+((r21*x4500))+((sj1*sj2))+((r22*x4491)));
evalcond[4]=((((-1.0)*cj0*x4498))+((r02*x4491))+((r01*x4500))+(((-1.0)*x4494*x4499))+(((-1.0)*cj0*sj1*x4495)));
evalcond[5]=(((r12*x4491))+((r11*x4500))+(((-1.0)*sj0*sj1*x4495))+(((-1.0)*x4497*x4498))+(((-1.0)*x4493*x4499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4503=((1.0)*gconst107);
CheckValue<IkReal> x4504=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4503)))),-1);
if(!x4504.valid){
continue;
}
CheckValue<IkReal> x4505 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4503))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4504.value)))+(x4505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4506=IKsin(j4);
IkReal x4507=IKcos(j4);
IkReal x4508=(gconst107*r10);
IkReal x4509=(gconst107*r00);
IkReal x4510=((1.0)*cj2);
IkReal x4511=(gconst107*r20);
IkReal x4512=((1.0)*sj0);
IkReal x4513=(cj1*sj2);
IkReal x4514=((1.0)*x4507);
IkReal x4515=(gconst106*x4507);
IkReal x4516=(gconst106*x4506);
IkReal x4517=((1.0)*x4506);
evalcond[0]=((((-1.0)*x4511*x4517))+((r21*x4516))+(((-1.0)*r22*x4514)));
evalcond[1]=(cj0+(((-1.0)*r12*x4514))+((r11*x4516))+(((-1.0)*x4508*x4517)));
evalcond[2]=((((-1.0)*r02*x4514))+((r01*x4516))+(((-1.0)*x4512))+(((-1.0)*x4509*x4517)));
evalcond[3]=((((-1.0)*cj1*x4510))+((r22*x4506))+((sj1*sj2))+(((-1.0)*x4511*x4514))+((r21*x4515)));
evalcond[4]=((((-1.0)*cj0*x4513))+(((-1.0)*cj0*sj1*x4510))+((r02*x4506))+((r01*x4515))+(((-1.0)*x4509*x4514)));
evalcond[5]=((((-1.0)*x4512*x4513))+((r12*x4506))+(((-1.0)*sj0*sj1*x4510))+((r11*x4515))+(((-1.0)*x4508*x4514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4518=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4518;
j4eval[1]=IKsign(x4518);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4519=((1.0)*cj5);
IkReal x4520=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4519)));
j4eval[0]=x4520;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4519))))));
j4eval[2]=IKsign(x4520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4521=(sj1*sj2);
IkReal x4522=(cj5*r10);
IkReal x4523=(r11*sj5);
IkReal x4524=(cj1*cj2);
IkReal x4525=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4525;
j4eval[1]=((IKabs((((r12*x4524))+(((-1.0)*r12*x4521)))))+(IKabs(((((-1.0)*x4521*x4522))+((x4521*x4523))+(((-1.0)*x4523*x4524))+((x4522*x4524))))));
j4eval[2]=IKsign(x4525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4526=(sj1*sj2);
IkReal x4527=(cj5*r10);
IkReal x4528=(r11*sj5);
IkReal x4529=(cj1*cj2);
CheckValue<IkReal> x4530=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4530.valid){
continue;
}
CheckValue<IkReal> x4531 = IKatan2WithCheck(IkReal((((x4526*x4528))+((x4527*x4529))+(((-1.0)*x4528*x4529))+(((-1.0)*x4526*x4527)))),IkReal((((r12*x4529))+(((-1.0)*r12*x4526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4530.value)))+(x4531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4532=IKcos(j4);
IkReal x4533=IKsin(j4);
IkReal x4534=(cj5*r00);
IkReal x4535=(cj5*r10);
IkReal x4536=(r21*sj5);
IkReal x4537=((1.0)*cj2);
IkReal x4538=(cj5*r20);
IkReal x4539=((1.0)*x4532);
IkReal x4540=((1.0)*x4533);
IkReal x4541=(sj5*x4533);
IkReal x4542=(sj5*x4532);
evalcond[0]=(((r12*x4533))+((r11*x4542))+(((-1.0)*x4535*x4539)));
evalcond[1]=((((-1.0)*r22*x4539))+((x4533*x4536))+(((-1.0)*x4538*x4540)));
evalcond[2]=((((-1.0)*x4534*x4540))+((r01*x4541))+(((-1.0)*r02*x4539)));
evalcond[3]=((1.0)+(((-1.0)*x4535*x4540))+((r11*x4541))+(((-1.0)*r12*x4539)));
evalcond[4]=((((-1.0)*x4538*x4539))+(((-1.0)*cj1*x4537))+((sj1*sj2))+((r22*x4533))+((x4532*x4536)));
evalcond[5]=((((-1.0)*sj1*x4537))+(((-1.0)*cj1*sj2))+((r01*x4542))+((r02*x4533))+(((-1.0)*x4534*x4539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4543=((1.0)*cj5);
CheckValue<IkReal> x4544=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4543)))),-1);
if(!x4544.valid){
continue;
}
CheckValue<IkReal> x4545 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4544.value)))+(x4545.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4546=IKcos(j4);
IkReal x4547=IKsin(j4);
IkReal x4548=(cj5*r00);
IkReal x4549=(cj5*r10);
IkReal x4550=(r21*sj5);
IkReal x4551=((1.0)*cj2);
IkReal x4552=(cj5*r20);
IkReal x4553=((1.0)*x4546);
IkReal x4554=((1.0)*x4547);
IkReal x4555=(sj5*x4547);
IkReal x4556=(sj5*x4546);
evalcond[0]=(((r11*x4556))+(((-1.0)*x4549*x4553))+((r12*x4547)));
evalcond[1]=(((x4547*x4550))+(((-1.0)*x4552*x4554))+(((-1.0)*r22*x4553)));
evalcond[2]=(((r01*x4555))+(((-1.0)*x4548*x4554))+(((-1.0)*r02*x4553)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4553))+((r11*x4555))+(((-1.0)*x4549*x4554)));
evalcond[4]=(((r22*x4547))+((x4546*x4550))+(((-1.0)*cj1*x4551))+(((-1.0)*x4552*x4553))+((sj1*sj2)));
evalcond[5]=(((r01*x4556))+((r02*x4547))+(((-1.0)*cj1*sj2))+(((-1.0)*x4548*x4553))+(((-1.0)*sj1*x4551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4557=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4557.valid){
continue;
}
CheckValue<IkReal> x4558 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4557.value)))+(x4558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4559=IKcos(j4);
IkReal x4560=IKsin(j4);
IkReal x4561=(cj5*r00);
IkReal x4562=(cj5*r10);
IkReal x4563=(r21*sj5);
IkReal x4564=((1.0)*cj2);
IkReal x4565=(cj5*r20);
IkReal x4566=((1.0)*x4559);
IkReal x4567=((1.0)*x4560);
IkReal x4568=(sj5*x4560);
IkReal x4569=(sj5*x4559);
evalcond[0]=(((r11*x4569))+((r12*x4560))+(((-1.0)*x4562*x4566)));
evalcond[1]=((((-1.0)*r22*x4566))+((x4560*x4563))+(((-1.0)*x4565*x4567)));
evalcond[2]=((((-1.0)*r02*x4566))+(((-1.0)*x4561*x4567))+((r01*x4568)));
evalcond[3]=((1.0)+((r11*x4568))+(((-1.0)*r12*x4566))+(((-1.0)*x4562*x4567)));
evalcond[4]=(((r22*x4560))+(((-1.0)*cj1*x4564))+((sj1*sj2))+((x4559*x4563))+(((-1.0)*x4565*x4566)));
evalcond[5]=((((-1.0)*sj1*x4564))+((r02*x4560))+(((-1.0)*cj1*sj2))+(((-1.0)*x4561*x4566))+((r01*x4569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4570=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4570;
j4eval[1]=IKsign(x4570);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4571=((1.0)*cj5);
IkReal x4572=((((-1.0)*r21*x4571))+(((-1.0)*r20*sj5)));
j4eval[0]=x4572;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4571))+((r01*sj5))))));
j4eval[2]=IKsign(x4572);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4573=cj5*cj5;
IkReal x4574=r11*r11;
IkReal x4575=(r11*sj5);
IkReal x4576=(cj5*r10);
IkReal x4577=((r12*r12)+x4574+(((-2.0)*x4575*x4576))+(((-1.0)*x4573*x4574))+((x4573*(r10*r10))));
j4eval[0]=x4577;
j4eval[1]=IKsign(x4577);
j4eval[2]=((IKabs(r12))+(IKabs((x4575+(((-1.0)*x4576))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4578=cj5*cj5;
IkReal x4579=r11*r11;
IkReal x4580=(cj5*r10);
IkReal x4581=(r11*sj5);
CheckValue<IkReal> x4582 = IKatan2WithCheck(IkReal((x4581+(((-1.0)*x4580)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4582.valid){
continue;
}
CheckValue<IkReal> x4583=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4579+((x4578*(r10*r10)))+(((-2.0)*x4580*x4581))+(((-1.0)*x4578*x4579)))),-1);
if(!x4583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4582.value)+(((1.5707963267949)*(x4583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4584=IKcos(j4);
IkReal x4585=IKsin(j4);
IkReal x4586=(cj5*r00);
IkReal x4587=(cj5*r10);
IkReal x4588=(r21*sj5);
IkReal x4589=(cj5*r20);
IkReal x4590=((1.0)*x4584);
IkReal x4591=((1.0)*x4585);
IkReal x4592=(sj5*x4585);
IkReal x4593=(sj5*x4584);
evalcond[0]=((((-1.0)*x4587*x4590))+((r11*x4593))+((r12*x4585)));
evalcond[1]=((((-1.0)*r22*x4590))+(((-1.0)*x4589*x4591))+((x4585*x4588)));
evalcond[2]=((((-1.0)*x4586*x4591))+(((-1.0)*r02*x4590))+((r01*x4592)));
evalcond[3]=((-1.0)+(((-1.0)*x4587*x4591))+((r11*x4592))+(((-1.0)*r12*x4590)));
evalcond[4]=(((cj2*sj1))+((r02*x4585))+((cj1*sj2))+(((-1.0)*x4586*x4590))+((r01*x4593)));
evalcond[5]=(((r22*x4585))+(((-1.0)*x4589*x4590))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4584*x4588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4594=((1.0)*cj5);
CheckValue<IkReal> x4595=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4594))+(((-1.0)*r20*sj5)))),-1);
if(!x4595.valid){
continue;
}
CheckValue<IkReal> x4596 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4595.value)))+(x4596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4597=IKcos(j4);
IkReal x4598=IKsin(j4);
IkReal x4599=(cj5*r00);
IkReal x4600=(cj5*r10);
IkReal x4601=(r21*sj5);
IkReal x4602=(cj5*r20);
IkReal x4603=((1.0)*x4597);
IkReal x4604=((1.0)*x4598);
IkReal x4605=(sj5*x4598);
IkReal x4606=(sj5*x4597);
evalcond[0]=(((r11*x4606))+(((-1.0)*x4600*x4603))+((r12*x4598)));
evalcond[1]=((((-1.0)*x4602*x4604))+((x4598*x4601))+(((-1.0)*r22*x4603)));
evalcond[2]=(((r01*x4605))+(((-1.0)*r02*x4603))+(((-1.0)*x4599*x4604)));
evalcond[3]=((-1.0)+((r11*x4605))+(((-1.0)*x4600*x4604))+(((-1.0)*r12*x4603)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4606))+((r02*x4598))+(((-1.0)*x4599*x4603)));
evalcond[5]=(((r22*x4598))+((x4597*x4601))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4602*x4603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4607 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4607.valid){
continue;
}
CheckValue<IkReal> x4608=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4607.value)+(((1.5707963267949)*(x4608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4609=IKcos(j4);
IkReal x4610=IKsin(j4);
IkReal x4611=(cj5*r00);
IkReal x4612=(cj5*r10);
IkReal x4613=(r21*sj5);
IkReal x4614=(cj5*r20);
IkReal x4615=((1.0)*x4609);
IkReal x4616=((1.0)*x4610);
IkReal x4617=(sj5*x4610);
IkReal x4618=(sj5*x4609);
evalcond[0]=((((-1.0)*x4612*x4615))+((r12*x4610))+((r11*x4618)));
evalcond[1]=((((-1.0)*x4614*x4616))+((x4610*x4613))+(((-1.0)*r22*x4615)));
evalcond[2]=((((-1.0)*r02*x4615))+((r01*x4617))+(((-1.0)*x4611*x4616)));
evalcond[3]=((-1.0)+(((-1.0)*x4612*x4616))+((r11*x4617))+(((-1.0)*r12*x4615)));
evalcond[4]=(((cj2*sj1))+((r02*x4610))+((cj1*sj2))+((r01*x4618))+(((-1.0)*x4611*x4615)));
evalcond[5]=(((x4609*x4613))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4610))+(((-1.0)*x4614*x4615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4619=((-1.0)*r00);
IkReal x4621 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4621)==0){
continue;
}
IkReal x4620=pow(x4621,-0.5);
CheckValue<IkReal> x4622 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4619),IKFAST_ATAN2_MAGTHRESH);
if(!x4622.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4622.value));
IkReal gconst109=(r01*x4620);
IkReal gconst110=(x4619*x4620);
CheckValue<IkReal> x4623 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4623.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4623.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4624=((-1.0)*r00);
IkReal x4625=x4620;
CheckValue<IkReal> x4627 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4624),IKFAST_ATAN2_MAGTHRESH);
if(!x4627.valid){
continue;
}
IkReal x4626=((-1.0)*(x4627.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4626;
IkReal gconst108=x4626;
IkReal gconst109=(r01*x4625);
IkReal gconst110=(x4624*x4625);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4628=((1.0)*sj0);
IkReal x4629=((1.0)*gconst109);
CheckValue<IkReal> x4630=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4629))+(((-1.0)*gconst110*r21)))),-1);
if(!x4630.valid){
continue;
}
CheckValue<IkReal> x4631 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4628)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4628))+(((-1.0)*cj0*r01*x4629)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4630.value)))+(x4631.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4632=IKsin(j4);
IkReal x4633=IKcos(j4);
IkReal x4634=(gconst109*r21);
IkReal x4635=((1.0)*cj2);
IkReal x4636=((1.0)*sj0);
IkReal x4637=(cj1*sj2);
IkReal x4638=((1.0)*x4633);
IkReal x4639=(gconst109*x4632);
IkReal x4640=(gconst109*x4633);
IkReal x4641=((1.0)*gconst110*x4632);
evalcond[0]=((((-1.0)*r20*x4641))+((x4632*x4634))+(((-1.0)*r22*x4638)));
evalcond[1]=(cj0+((r11*x4639))+(((-1.0)*r10*x4641))+(((-1.0)*r12*x4638)));
evalcond[2]=(((r01*x4639))+(((-1.0)*x4636))+(((-1.0)*r02*x4638))+(((-1.0)*r00*x4641)));
evalcond[3]=((((-1.0)*gconst110*r20*x4638))+(((-1.0)*cj1*x4635))+((x4633*x4634))+((sj1*sj2))+((r22*x4632)));
evalcond[4]=((((-1.0)*gconst110*r00*x4638))+(((-1.0)*cj0*sj1*x4635))+(((-1.0)*cj0*x4637))+((r01*x4640))+((r02*x4632)));
evalcond[5]=(((r12*x4632))+(((-1.0)*gconst110*r10*x4638))+((r11*x4640))+(((-1.0)*sj0*sj1*x4635))+(((-1.0)*x4636*x4637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4642=((1.0)*gconst110);
CheckValue<IkReal> x4643=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4642))+(((-1.0)*gconst109*r10)))),-1);
if(!x4643.valid){
continue;
}
CheckValue<IkReal> x4644 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x4642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4643.value)))+(x4644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4645=IKsin(j4);
IkReal x4646=IKcos(j4);
IkReal x4647=(gconst109*r21);
IkReal x4648=((1.0)*cj2);
IkReal x4649=((1.0)*sj0);
IkReal x4650=(cj1*sj2);
IkReal x4651=((1.0)*x4646);
IkReal x4652=(gconst109*x4645);
IkReal x4653=(gconst109*x4646);
IkReal x4654=((1.0)*gconst110*x4645);
evalcond[0]=((((-1.0)*r22*x4651))+(((-1.0)*r20*x4654))+((x4645*x4647)));
evalcond[1]=(((r11*x4652))+cj0+(((-1.0)*r12*x4651))+(((-1.0)*r10*x4654)));
evalcond[2]=((((-1.0)*r00*x4654))+(((-1.0)*r02*x4651))+(((-1.0)*x4649))+((r01*x4652)));
evalcond[3]=((((-1.0)*cj1*x4648))+((x4646*x4647))+((sj1*sj2))+((r22*x4645))+(((-1.0)*gconst110*r20*x4651)));
evalcond[4]=(((r02*x4645))+(((-1.0)*gconst110*r00*x4651))+(((-1.0)*cj0*x4650))+(((-1.0)*cj0*sj1*x4648))+((r01*x4653)));
evalcond[5]=(((r11*x4653))+(((-1.0)*x4649*x4650))+(((-1.0)*sj0*sj1*x4648))+((r12*x4645))+(((-1.0)*gconst110*r10*x4651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4655=((-1.0)*r01);
IkReal x4657 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4657)==0){
continue;
}
IkReal x4656=pow(x4657,-0.5);
CheckValue<IkReal> x4658 = IKatan2WithCheck(IkReal(x4655),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4658.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4658.value))));
IkReal gconst112=(x4655*x4656);
IkReal gconst113=((1.0)*r00*x4656);
CheckValue<IkReal> x4659 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4659.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4659.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4660=((-1.0)*r01);
CheckValue<IkReal> x4663 = IKatan2WithCheck(IkReal(x4660),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4663.valid){
continue;
}
IkReal x4661=((1.0)*(x4663.value));
IkReal x4662=x4656;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4661)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4661)));
IkReal gconst112=(x4660*x4662);
IkReal gconst113=((1.0)*r00*x4662);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4664=((-1.0)*r01);
CheckValue<IkReal> x4667 = IKatan2WithCheck(IkReal(x4664),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4667.valid){
continue;
}
IkReal x4665=((1.0)*(x4667.value));
IkReal x4666=x4656;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4665)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4665)));
IkReal gconst112=(x4664*x4666);
IkReal gconst113=((1.0)*r00*x4666);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4668=((-1.0)*r01);
CheckValue<IkReal> x4671 = IKatan2WithCheck(IkReal(x4668),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4671.valid){
continue;
}
IkReal x4669=((1.0)*(x4671.value));
IkReal x4670=x4656;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4669)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4669)));
IkReal gconst112=(x4668*x4670);
IkReal gconst113=((1.0)*r00*x4670);
IkReal x4672=r02*r02;
IkReal x4673=(r12*sj0);
IkReal x4674=((1.0)*cj0);
IkReal x4675=x4656;
j4eval[0]=((IKabs((((cj0*x4672*x4675))+(((-1.0)*x4674*x4675))+((r02*x4673*x4675)))))+(IKabs(((((-1.0)*r02*x4674))+(((-1.0)*x4673))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4676=((1.0)*sj0);
IkReal x4677=((1.0)*gconst112);
CheckValue<IkReal> x4678=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4677))+(((-1.0)*gconst113*r21)))),-1);
if(!x4678.valid){
continue;
}
CheckValue<IkReal> x4679 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4676))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4677))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x4676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4678.value)))+(x4679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4680=IKsin(j4);
IkReal x4681=IKcos(j4);
IkReal x4682=(gconst113*r20);
IkReal x4683=(gconst112*r21);
IkReal x4684=((1.0)*cj2);
IkReal x4685=(gconst113*r00);
IkReal x4686=(gconst113*r10);
IkReal x4687=((1.0)*sj0);
IkReal x4688=(cj1*sj2);
IkReal x4689=((1.0)*x4681);
IkReal x4690=((1.0)*x4680);
IkReal x4691=(gconst112*x4681);
IkReal x4692=(gconst112*x4680);
evalcond[0]=(((x4680*x4683))+(((-1.0)*x4682*x4690))+(((-1.0)*r22*x4689)));
evalcond[1]=(cj0+(((-1.0)*x4686*x4690))+((r11*x4692))+(((-1.0)*r12*x4689)));
evalcond[2]=(((r01*x4692))+(((-1.0)*r02*x4689))+(((-1.0)*x4685*x4690))+(((-1.0)*x4687)));
evalcond[3]=((((-1.0)*cj1*x4684))+(((-1.0)*x4682*x4689))+((sj1*sj2))+((r22*x4680))+((x4681*x4683)));
evalcond[4]=(((r02*x4680))+(((-1.0)*cj0*sj1*x4684))+(((-1.0)*cj0*x4688))+((r01*x4691))+(((-1.0)*x4685*x4689)));
evalcond[5]=((((-1.0)*x4686*x4689))+(((-1.0)*x4687*x4688))+(((-1.0)*sj0*sj1*x4684))+((r12*x4680))+((r11*x4691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4693=((1.0)*gconst113);
CheckValue<IkReal> x4694=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r10))+(((-1.0)*r11*x4693)))),-1);
if(!x4694.valid){
continue;
}
CheckValue<IkReal> x4695 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4694.value)))+(x4695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4696=IKsin(j4);
IkReal x4697=IKcos(j4);
IkReal x4698=(gconst113*r20);
IkReal x4699=(gconst112*r21);
IkReal x4700=((1.0)*cj2);
IkReal x4701=(gconst113*r00);
IkReal x4702=(gconst113*r10);
IkReal x4703=((1.0)*sj0);
IkReal x4704=(cj1*sj2);
IkReal x4705=((1.0)*x4697);
IkReal x4706=((1.0)*x4696);
IkReal x4707=(gconst112*x4697);
IkReal x4708=(gconst112*x4696);
evalcond[0]=(((x4696*x4699))+(((-1.0)*r22*x4705))+(((-1.0)*x4698*x4706)));
evalcond[1]=(cj0+(((-1.0)*x4702*x4706))+(((-1.0)*r12*x4705))+((r11*x4708)));
evalcond[2]=((((-1.0)*r02*x4705))+((r01*x4708))+(((-1.0)*x4703))+(((-1.0)*x4701*x4706)));
evalcond[3]=(((x4697*x4699))+((sj1*sj2))+((r22*x4696))+(((-1.0)*x4698*x4705))+(((-1.0)*cj1*x4700)));
evalcond[4]=(((r02*x4696))+(((-1.0)*cj0*sj1*x4700))+(((-1.0)*cj0*x4704))+((r01*x4707))+(((-1.0)*x4701*x4705)));
evalcond[5]=((((-1.0)*sj0*sj1*x4700))+(((-1.0)*x4702*x4705))+(((-1.0)*x4703*x4704))+((r12*x4696))+((r11*x4707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4709=((1.0)*gconst113);
CheckValue<IkReal> x4710=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4709))+(((-1.0)*gconst112*r00)))),-1);
if(!x4710.valid){
continue;
}
CheckValue<IkReal> x4711 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4710.value)))+(x4711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4712=IKsin(j4);
IkReal x4713=IKcos(j4);
IkReal x4714=(gconst113*r20);
IkReal x4715=(gconst112*r21);
IkReal x4716=((1.0)*cj2);
IkReal x4717=(gconst113*r00);
IkReal x4718=(gconst113*r10);
IkReal x4719=((1.0)*sj0);
IkReal x4720=(cj1*sj2);
IkReal x4721=((1.0)*x4713);
IkReal x4722=((1.0)*x4712);
IkReal x4723=(gconst112*x4713);
IkReal x4724=(gconst112*x4712);
evalcond[0]=((((-1.0)*x4714*x4722))+((x4712*x4715))+(((-1.0)*r22*x4721)));
evalcond[1]=(((r11*x4724))+cj0+(((-1.0)*r12*x4721))+(((-1.0)*x4718*x4722)));
evalcond[2]=((((-1.0)*x4717*x4722))+((r01*x4724))+(((-1.0)*r02*x4721))+(((-1.0)*x4719)));
evalcond[3]=(((r22*x4712))+(((-1.0)*x4714*x4721))+((sj1*sj2))+(((-1.0)*cj1*x4716))+((x4713*x4715)));
evalcond[4]=((((-1.0)*x4717*x4721))+(((-1.0)*cj0*sj1*x4716))+(((-1.0)*cj0*x4720))+((r01*x4723))+((r02*x4712)));
evalcond[5]=(((r11*x4723))+(((-1.0)*sj0*sj1*x4716))+(((-1.0)*x4719*x4720))+(((-1.0)*x4718*x4721))+((r12*x4712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4725=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4725;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4726=((1.0)*cj5);
IkReal x4727=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4726)));
j4eval[0]=x4727;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4726))))));
j4eval[2]=IKsign(x4727);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4728=cj5*cj5;
IkReal x4729=r01*r01;
IkReal x4730=(cj5*r00);
IkReal x4731=(r01*sj5);
IkReal x4732=(x4729+(((-1.0)*x4728*x4729))+(((-2.0)*x4730*x4731))+(r02*r02)+((x4728*(r00*r00))));
j4eval[0]=x4732;
j4eval[1]=IKsign(x4732);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4730))+x4731))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4733=cj5*cj5;
IkReal x4734=r01*r01;
IkReal x4735=(r01*sj5);
IkReal x4736=(cj5*r00);
CheckValue<IkReal> x4737 = IKatan2WithCheck(IkReal(((((-1.0)*x4736))+x4735)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4737.valid){
continue;
}
CheckValue<IkReal> x4738=IKPowWithIntegerCheck(IKsign((((x4733*(r00*r00)))+(((-1.0)*x4733*x4734))+x4734+(((-2.0)*x4735*x4736))+(r02*r02))),-1);
if(!x4738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4737.value)+(((1.5707963267949)*(x4738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4739=IKcos(j4);
IkReal x4740=IKsin(j4);
IkReal x4741=(cj5*r00);
IkReal x4742=(cj5*r10);
IkReal x4743=(r21*sj5);
IkReal x4744=((1.0)*cj2);
IkReal x4745=(cj5*r20);
IkReal x4746=((1.0)*x4739);
IkReal x4747=((1.0)*x4740);
IkReal x4748=(sj5*x4740);
IkReal x4749=(sj5*x4739);
evalcond[0]=(((r01*x4749))+((r02*x4740))+(((-1.0)*x4741*x4746)));
evalcond[1]=(((x4740*x4743))+(((-1.0)*r22*x4746))+(((-1.0)*x4745*x4747)));
evalcond[2]=(((r11*x4748))+(((-1.0)*r12*x4746))+(((-1.0)*x4742*x4747)));
evalcond[3]=((-1.0)+((r01*x4748))+(((-1.0)*x4741*x4747))+(((-1.0)*r02*x4746)));
evalcond[4]=((((-1.0)*cj1*x4744))+((sj1*sj2))+(((-1.0)*x4745*x4746))+((r22*x4740))+((x4739*x4743)));
evalcond[5]=(((r11*x4749))+(((-1.0)*sj1*x4744))+((r12*x4740))+(((-1.0)*cj1*sj2))+(((-1.0)*x4742*x4746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4750=((1.0)*cj5);
CheckValue<IkReal> x4751=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4750)))),-1);
if(!x4751.valid){
continue;
}
CheckValue<IkReal> x4752 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4750))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4751.value)))+(x4752.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4753=IKcos(j4);
IkReal x4754=IKsin(j4);
IkReal x4755=(cj5*r00);
IkReal x4756=(cj5*r10);
IkReal x4757=(r21*sj5);
IkReal x4758=((1.0)*cj2);
IkReal x4759=(cj5*r20);
IkReal x4760=((1.0)*x4753);
IkReal x4761=((1.0)*x4754);
IkReal x4762=(sj5*x4754);
IkReal x4763=(sj5*x4753);
evalcond[0]=((((-1.0)*x4755*x4760))+((r01*x4763))+((r02*x4754)));
evalcond[1]=((((-1.0)*r22*x4760))+((x4754*x4757))+(((-1.0)*x4759*x4761)));
evalcond[2]=((((-1.0)*x4756*x4761))+(((-1.0)*r12*x4760))+((r11*x4762)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4760))+(((-1.0)*x4755*x4761))+((r01*x4762)));
evalcond[4]=((((-1.0)*cj1*x4758))+((x4753*x4757))+((sj1*sj2))+(((-1.0)*x4759*x4760))+((r22*x4754)));
evalcond[5]=(((r12*x4754))+(((-1.0)*sj1*x4758))+(((-1.0)*cj1*sj2))+(((-1.0)*x4756*x4760))+((r11*x4763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4764=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4764.valid){
continue;
}
CheckValue<IkReal> x4765 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4764.value)))+(x4765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4766=IKcos(j4);
IkReal x4767=IKsin(j4);
IkReal x4768=(cj5*r00);
IkReal x4769=(cj5*r10);
IkReal x4770=(r21*sj5);
IkReal x4771=((1.0)*cj2);
IkReal x4772=(cj5*r20);
IkReal x4773=((1.0)*x4766);
IkReal x4774=((1.0)*x4767);
IkReal x4775=(sj5*x4767);
IkReal x4776=(sj5*x4766);
evalcond[0]=(((r02*x4767))+((r01*x4776))+(((-1.0)*x4768*x4773)));
evalcond[1]=((((-1.0)*r22*x4773))+((x4767*x4770))+(((-1.0)*x4772*x4774)));
evalcond[2]=((((-1.0)*x4769*x4774))+((r11*x4775))+(((-1.0)*r12*x4773)));
evalcond[3]=((-1.0)+((r01*x4775))+(((-1.0)*x4768*x4774))+(((-1.0)*r02*x4773)));
evalcond[4]=(((r22*x4767))+(((-1.0)*cj1*x4771))+((x4766*x4770))+((sj1*sj2))+(((-1.0)*x4772*x4773)));
evalcond[5]=((((-1.0)*x4769*x4773))+((r11*x4776))+(((-1.0)*sj1*x4771))+(((-1.0)*cj1*sj2))+((r12*x4767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4777=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4777;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4778=((1.0)*cj5);
IkReal x4779=((((-1.0)*r21*x4778))+(((-1.0)*r20*sj5)));
j4eval[0]=x4779;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4778))))));
j4eval[2]=IKsign(x4779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4780=cj5*cj5;
IkReal x4781=r01*r01;
IkReal x4782=(r01*sj5);
IkReal x4783=(cj5*r00);
IkReal x4784=(((x4780*x4781))+(((-1.0)*(r02*r02)))+(((-1.0)*x4781))+(((-1.0)*x4780*(r00*r00)))+(((2.0)*x4782*x4783)));
j4eval[0]=x4784;
j4eval[1]=IKsign(x4784);
j4eval[2]=((IKabs((x4782+(((-1.0)*x4783)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4785=cj5*cj5;
IkReal x4786=r01*r01;
IkReal x4787=(r01*sj5);
IkReal x4788=(cj5*r00);
CheckValue<IkReal> x4789=IKPowWithIntegerCheck(IKsign((((x4785*x4786))+(((-1.0)*(r02*r02)))+(((-1.0)*x4786))+(((2.0)*x4787*x4788))+(((-1.0)*x4785*(r00*r00))))),-1);
if(!x4789.valid){
continue;
}
CheckValue<IkReal> x4790 = IKatan2WithCheck(IkReal((x4787+(((-1.0)*x4788)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4789.value)))+(x4790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4791=IKcos(j4);
IkReal x4792=IKsin(j4);
IkReal x4793=(cj5*r00);
IkReal x4794=(cj5*r10);
IkReal x4795=(r21*sj5);
IkReal x4796=(cj5*r20);
IkReal x4797=((1.0)*x4791);
IkReal x4798=((1.0)*x4792);
IkReal x4799=(sj5*x4792);
IkReal x4800=(sj5*x4791);
evalcond[0]=(((r01*x4800))+((r02*x4792))+(((-1.0)*x4793*x4797)));
evalcond[1]=((((-1.0)*r22*x4797))+((x4792*x4795))+(((-1.0)*x4796*x4798)));
evalcond[2]=((((-1.0)*x4794*x4798))+(((-1.0)*r12*x4797))+((r11*x4799)));
evalcond[3]=((1.0)+((r01*x4799))+(((-1.0)*r02*x4797))+(((-1.0)*x4793*x4798)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4794*x4797))+((r12*x4792))+((r11*x4800)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4791*x4795))+(((-1.0)*x4796*x4797))+((r22*x4792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4801=((1.0)*cj5);
CheckValue<IkReal> x4802 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4802.valid){
continue;
}
CheckValue<IkReal> x4803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4801))+(((-1.0)*r20*sj5)))),-1);
if(!x4803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4802.value)+(((1.5707963267949)*(x4803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4804=IKcos(j4);
IkReal x4805=IKsin(j4);
IkReal x4806=(cj5*r00);
IkReal x4807=(cj5*r10);
IkReal x4808=(r21*sj5);
IkReal x4809=(cj5*r20);
IkReal x4810=((1.0)*x4804);
IkReal x4811=((1.0)*x4805);
IkReal x4812=(sj5*x4805);
IkReal x4813=(sj5*x4804);
evalcond[0]=(((r02*x4805))+(((-1.0)*x4806*x4810))+((r01*x4813)));
evalcond[1]=((((-1.0)*x4809*x4811))+((x4805*x4808))+(((-1.0)*r22*x4810)));
evalcond[2]=(((r11*x4812))+(((-1.0)*x4807*x4811))+(((-1.0)*r12*x4810)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4810))+(((-1.0)*x4806*x4811))+((r01*x4812)));
evalcond[4]=(((cj2*sj1))+((r11*x4813))+((cj1*sj2))+(((-1.0)*x4807*x4810))+((r12*x4805)));
evalcond[5]=((((-1.0)*x4809*x4810))+(((-1.0)*cj1*cj2))+((x4804*x4808))+((sj1*sj2))+((r22*x4805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4814 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4814.valid){
continue;
}
CheckValue<IkReal> x4815=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4814.value)+(((1.5707963267949)*(x4815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4816=IKcos(j4);
IkReal x4817=IKsin(j4);
IkReal x4818=(cj5*r00);
IkReal x4819=(cj5*r10);
IkReal x4820=(r21*sj5);
IkReal x4821=(cj5*r20);
IkReal x4822=((1.0)*x4816);
IkReal x4823=((1.0)*x4817);
IkReal x4824=(sj5*x4817);
IkReal x4825=(sj5*x4816);
evalcond[0]=(((r02*x4817))+(((-1.0)*x4818*x4822))+((r01*x4825)));
evalcond[1]=(((x4817*x4820))+(((-1.0)*r22*x4822))+(((-1.0)*x4821*x4823)));
evalcond[2]=(((r11*x4824))+(((-1.0)*x4819*x4823))+(((-1.0)*r12*x4822)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4822))+(((-1.0)*x4818*x4823))+((r01*x4824)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4825))+(((-1.0)*x4819*x4822))+((r12*x4817)));
evalcond[5]=(((x4816*x4820))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4821*x4822))+((r22*x4817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4826=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4826);
rxp1_1=(px*r21);
rxp1_2=(r11*x4826);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4827=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4827);
rxp1_1=(px*r21);
rxp1_2=(r11*x4827);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4828=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4828);
rxp1_1=(px*r21);
rxp1_2=(r11*x4828);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4831=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4831.valid){
continue;
}
IkReal x4829=x4831.value;
IkReal x4830=(sj0*x4829);
cj4array[0]=(((cj1*sj2*x4830))+((cj2*sj1*x4830)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4832=IKsin(j4);
IkReal x4833=IKcos(j4);
IkReal x4834=(r21*sj5);
IkReal x4835=((1.0)*cj5*r20);
evalcond[0]=(r02*x4832);
evalcond[1]=((((-1.0)*r02*x4833))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x4832*x4835))+((x4832*x4834)));
evalcond[3]=(((r11*sj5*x4832))+(((-1.0)*cj5*r10*x4832)));
evalcond[4]=((((-1.0)*x4833*x4835))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4833*x4834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4837=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4837.valid){
continue;
}
IkReal x4836=x4837.value;
cj4array[0]=(((cj1*cj2*x4836))+(((-1.0)*sj1*sj2*x4836)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4838=IKsin(j4);
IkReal x4839=IKcos(j4);
IkReal x4840=((1.0)*sj0);
IkReal x4841=((1.0)*cj5);
IkReal x4842=(sj5*x4838);
evalcond[0]=(r02*x4838);
evalcond[1]=((((-1.0)*r02*x4839))+(((-1.0)*x4840)));
evalcond[2]=((((-1.0)*r20*x4838*x4841))+((r21*x4842)));
evalcond[3]=(((r11*x4842))+(((-1.0)*r10*x4838*x4841)));
evalcond[4]=(((r11*sj5*x4839))+(((-1.0)*r10*x4839*x4841))+(((-1.0)*cj2*sj1*x4840))+(((-1.0)*cj1*sj2*x4840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4843=IKPowWithIntegerCheck(r02,-1);
if(!x4843.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4843.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4844=IKsin(j4);
IkReal x4845=IKcos(j4);
IkReal x4846=((1.0)*cj1);
IkReal x4847=(r21*sj5);
IkReal x4848=((1.0)*cj5);
IkReal x4849=(r11*sj5);
evalcond[0]=(r02*x4844);
evalcond[1]=(((x4844*x4847))+(((-1.0)*r20*x4844*x4848)));
evalcond[2]=(((x4844*x4849))+(((-1.0)*r10*x4844*x4848)));
evalcond[3]=((((-1.0)*cj2*x4846))+((sj1*sj2))+((x4845*x4847))+(((-1.0)*r20*x4845*x4848)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x4845*x4849))+(((-1.0)*r10*x4845*x4848))+(((-1.0)*sj0*sj2*x4846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4850=((1.0)*sj0);
IkReal x4851=((1.0)*cj0);
CheckValue<IkReal> x4852 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4850))+(((-1.0)*r02*x4851)))),IkReal(((((-1.0)*r11*sj5*x4850))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4851))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4852.valid){
continue;
}
CheckValue<IkReal> x4853=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4852.value)+(((1.5707963267949)*(x4853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4854=IKsin(j4);
IkReal x4855=IKcos(j4);
IkReal x4856=(cj5*r00);
IkReal x4857=(cj5*r10);
IkReal x4858=(r21*sj5);
IkReal x4859=((1.0)*cj2);
IkReal x4860=((1.0)*sj0);
IkReal x4861=(cj1*sj2);
IkReal x4862=(cj5*r20);
IkReal x4863=((1.0)*x4855);
IkReal x4864=((1.0)*x4854);
IkReal x4865=(sj5*x4854);
IkReal x4866=(sj5*x4855);
evalcond[0]=((((-1.0)*x4862*x4864))+(((-1.0)*r22*x4863))+((x4854*x4858)));
evalcond[1]=(((r11*x4865))+cj0+(((-1.0)*r12*x4863))+(((-1.0)*x4857*x4864)));
evalcond[2]=((((-1.0)*x4856*x4864))+((r01*x4865))+(((-1.0)*x4860))+(((-1.0)*r02*x4863)));
evalcond[3]=((((-1.0)*x4862*x4863))+((r22*x4854))+((sj1*sj2))+((x4855*x4858))+(((-1.0)*cj1*x4859)));
evalcond[4]=((((-1.0)*x4856*x4863))+((r01*x4866))+(((-1.0)*cj0*x4861))+((r02*x4854))+(((-1.0)*cj0*sj1*x4859)));
evalcond[5]=(((r11*x4866))+((r12*x4854))+(((-1.0)*sj0*sj1*x4859))+(((-1.0)*x4857*x4863))+(((-1.0)*x4860*x4861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4867=((1.0)*cj5);
CheckValue<IkReal> x4868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4867)))),-1);
if(!x4868.valid){
continue;
}
CheckValue<IkReal> x4869 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4867))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4868.value)))+(x4869.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4870=IKsin(j4);
IkReal x4871=IKcos(j4);
IkReal x4872=(cj5*r00);
IkReal x4873=(cj5*r10);
IkReal x4874=(r21*sj5);
IkReal x4875=((1.0)*cj2);
IkReal x4876=((1.0)*sj0);
IkReal x4877=(cj1*sj2);
IkReal x4878=(cj5*r20);
IkReal x4879=((1.0)*x4871);
IkReal x4880=((1.0)*x4870);
IkReal x4881=(sj5*x4870);
IkReal x4882=(sj5*x4871);
evalcond[0]=((((-1.0)*r22*x4879))+((x4870*x4874))+(((-1.0)*x4878*x4880)));
evalcond[1]=(((r11*x4881))+cj0+(((-1.0)*x4873*x4880))+(((-1.0)*r12*x4879)));
evalcond[2]=((((-1.0)*x4872*x4880))+((r01*x4881))+(((-1.0)*r02*x4879))+(((-1.0)*x4876)));
evalcond[3]=(((sj1*sj2))+((r22*x4870))+(((-1.0)*x4878*x4879))+((x4871*x4874))+(((-1.0)*cj1*x4875)));
evalcond[4]=(((r02*x4870))+(((-1.0)*cj0*sj1*x4875))+((r01*x4882))+(((-1.0)*x4872*x4879))+(((-1.0)*cj0*x4877)));
evalcond[5]=((((-1.0)*x4876*x4877))+((r11*x4882))+(((-1.0)*sj0*sj1*x4875))+((r12*x4870))+(((-1.0)*x4873*x4879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4883=((1.0)*cj5);
CheckValue<IkReal> x4884 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4884.valid){
continue;
}
CheckValue<IkReal> x4885=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4883)))),-1);
if(!x4885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4884.value)+(((1.5707963267949)*(x4885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4886=IKsin(j4);
IkReal x4887=IKcos(j4);
IkReal x4888=(cj5*r00);
IkReal x4889=(cj5*r10);
IkReal x4890=(r21*sj5);
IkReal x4891=((1.0)*cj2);
IkReal x4892=((1.0)*sj0);
IkReal x4893=(cj1*sj2);
IkReal x4894=(cj5*r20);
IkReal x4895=((1.0)*x4887);
IkReal x4896=((1.0)*x4886);
IkReal x4897=(sj5*x4886);
IkReal x4898=(sj5*x4887);
evalcond[0]=((((-1.0)*x4894*x4896))+(((-1.0)*r22*x4895))+((x4886*x4890)));
evalcond[1]=(((r11*x4897))+(((-1.0)*r12*x4895))+cj0+(((-1.0)*x4889*x4896)));
evalcond[2]=((((-1.0)*x4892))+(((-1.0)*x4888*x4896))+(((-1.0)*r02*x4895))+((r01*x4897)));
evalcond[3]=(((x4887*x4890))+(((-1.0)*cj1*x4891))+((sj1*sj2))+(((-1.0)*x4894*x4895))+((r22*x4886)));
evalcond[4]=((((-1.0)*cj0*x4893))+(((-1.0)*cj0*sj1*x4891))+(((-1.0)*x4888*x4895))+((r02*x4886))+((r01*x4898)));
evalcond[5]=(((r11*x4898))+((r12*x4886))+(((-1.0)*sj0*sj1*x4891))+(((-1.0)*x4892*x4893))+(((-1.0)*x4889*x4895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4899=((1.0)*cj5);
IkReal x4900=((1.0)*sj5);
IkReal x4901=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4901;
j0eval[1]=((IKabs(((((-1.0)*r01*x4899))+(((-1.0)*r00*x4900)))))+(IKabs(((((-1.0)*r11*x4899))+(((-1.0)*r10*x4900))))));
j0eval[2]=IKsign(x4901);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4902=r21*r21;
IkReal x4903=cj5*cj5;
IkReal x4904=(cj2*sj1);
IkReal x4905=(cj1*sj2);
IkReal x4906=(r21*sj5);
IkReal x4907=((1.0)*cj5*r20);
IkReal x4908=((((-1.0)*x4902))+((x4902*x4903))+(((2.0)*cj5*r20*x4906))+(((-1.0)*(r22*r22)))+(((-1.0)*x4903*(r20*r20))));
j4eval[0]=x4908;
j4eval[1]=((IKabs(((((-1.0)*x4905*x4907))+((x4905*x4906))+(((-1.0)*x4904*x4907))+((x4904*x4906)))))+(IKabs((((r22*x4905))+((r22*x4904))))));
j4eval[2]=IKsign(x4908);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4909=cj1*cj1;
IkReal x4910=(cj2*sj2);
IkReal x4911=(cj2*sj1);
IkReal x4912=(cj1*sj1);
j0eval[0]=(x4912+x4910+(((-1.14255568581477)*cj1*x4911))+(((-1.14255568581477)*sj2*x4909))+(((-2.0)*x4909*x4910))+(((-2.0)*cj1*cj2*x4911)));
j0eval[1]=((((-1.0)*x4911))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.06387083990023)*py))+(((-0.507498115261088)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.06387083990023)*py))+(((-0.507498115261088)*px))))+IKsqr(((((2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.06387083990023)*py))+(((-0.507498115261088)*px))), ((((2.06387083990023)*px))+(((0.507498115261088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4913=IKsin(j0);
IkReal x4914=IKcos(j0);
evalcond[0]=((((-0.11235)*x4913))+(((-1.0)*px))+(((0.4569)*x4914)));
evalcond[1]=((((-1.0)*py))+(((0.4569)*x4913))+(((0.11235)*x4914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4915=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4915;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4915);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4916=((1.0)*cj5);
IkReal x4917=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4916)));
j4eval[0]=x4917;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x4916))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4918=((1.0)*cj5);
IkReal x4919=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4918)));
j4eval[0]=x4919;
j4eval[1]=IKsign(x4919);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4918))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4920=((1.0)*cj5);
CheckValue<IkReal> x4921=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4920))+(((-1.0)*r00*sj5)))),-1);
if(!x4921.valid){
continue;
}
CheckValue<IkReal> x4922 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4920)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4921.value)))+(x4922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4923=IKcos(j4);
IkReal x4924=IKsin(j4);
IkReal x4925=((1.0)*sj0);
IkReal x4926=(cj5*r00);
IkReal x4927=(cj5*r10);
IkReal x4928=(cj5*r20);
IkReal x4929=((1.0)*x4923);
IkReal x4930=((1.0)*x4924);
IkReal x4931=(sj5*x4923);
IkReal x4932=(sj5*x4924);
evalcond[0]=(((r22*x4924))+((r21*x4931))+(((-1.0)*x4928*x4929)));
evalcond[1]=(((r21*x4932))+(((-1.0)*r22*x4929))+(((-1.0)*x4928*x4930)));
evalcond[2]=(cj0+(((-1.0)*x4927*x4930))+(((-1.0)*r12*x4929))+((r11*x4932)));
evalcond[3]=((((-1.0)*x4926*x4929))+((r01*x4931))+((r02*x4924))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4927*x4929))+((r11*x4931))+(((-1.0)*x4925))+((r12*x4924)));
evalcond[5]=((((-1.0)*r02*x4929))+(((-1.0)*x4926*x4930))+((r01*x4932))+(((-1.0)*x4925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4933=((1.0)*cj5);
CheckValue<IkReal> x4934 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4934.valid){
continue;
}
CheckValue<IkReal> x4935=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4933))+(((-1.0)*r00*sj5)))),-1);
if(!x4935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4934.value)+(((1.5707963267949)*(x4935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4936=IKcos(j4);
IkReal x4937=IKsin(j4);
IkReal x4938=((1.0)*sj0);
IkReal x4939=(cj5*r00);
IkReal x4940=(cj5*r10);
IkReal x4941=(cj5*r20);
IkReal x4942=((1.0)*x4936);
IkReal x4943=((1.0)*x4937);
IkReal x4944=(sj5*x4936);
IkReal x4945=(sj5*x4937);
evalcond[0]=(((r21*x4944))+(((-1.0)*x4941*x4942))+((r22*x4937)));
evalcond[1]=(((r21*x4945))+(((-1.0)*x4941*x4943))+(((-1.0)*r22*x4942)));
evalcond[2]=(cj0+(((-1.0)*x4940*x4943))+((r11*x4945))+(((-1.0)*r12*x4942)));
evalcond[3]=(((r01*x4944))+(((-1.0)*x4939*x4942))+((r02*x4937))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4937))+(((-1.0)*x4940*x4942))+((r11*x4944))+(((-1.0)*x4938)));
evalcond[5]=(((r01*x4945))+(((-1.0)*x4939*x4943))+(((-1.0)*r02*x4942))+(((-1.0)*x4938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4946 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4946.valid){
continue;
}
CheckValue<IkReal> x4947=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4946.value)+(((1.5707963267949)*(x4947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4948=IKcos(j4);
IkReal x4949=IKsin(j4);
IkReal x4950=((1.0)*sj0);
IkReal x4951=(cj5*r00);
IkReal x4952=(cj5*r10);
IkReal x4953=(cj5*r20);
IkReal x4954=((1.0)*x4948);
IkReal x4955=((1.0)*x4949);
IkReal x4956=(sj5*x4948);
IkReal x4957=(sj5*x4949);
evalcond[0]=(((r21*x4956))+(((-1.0)*x4953*x4954))+((r22*x4949)));
evalcond[1]=((((-1.0)*r22*x4954))+((r21*x4957))+(((-1.0)*x4953*x4955)));
evalcond[2]=(cj0+((r11*x4957))+(((-1.0)*r12*x4954))+(((-1.0)*x4952*x4955)));
evalcond[3]=(((r02*x4949))+((r01*x4956))+(((-1.0)*cj0))+(((-1.0)*x4951*x4954)));
evalcond[4]=((((-1.0)*x4950))+((r12*x4949))+((r11*x4956))+(((-1.0)*x4952*x4954)));
evalcond[5]=((((-1.0)*x4950))+(((-1.0)*r02*x4954))+((r01*x4957))+(((-1.0)*x4951*x4955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.29354345611924)*px))+(((2.24409186529617)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.29354345611924)*px))+(((2.24409186529617)*py))))+IKsqr(((((2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.29354345611924)*px))+(((2.24409186529617)*py))), ((((2.24409186529617)*px))+(((8.29354345611924)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4958=IKsin(j0);
IkReal x4959=IKcos(j0);
evalcond[0]=((((0.0304)*x4959))+(((-1.0)*px))+(((-0.11235)*x4958)));
evalcond[1]=((((0.11235)*x4959))+(((0.0304)*x4958))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4960=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4960;
j4eval[1]=IKsign(x4960);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4961=((1.0)*cj5);
IkReal x4962=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4961)));
j4eval[0]=x4962;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4961)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4962);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4963=cj5*cj5;
IkReal x4964=((1.0)*r20);
IkReal x4965=(r01*r21);
IkReal x4966=(r21*sj5);
IkReal x4967=(((cj5*r01*r20*sj5))+((x4963*x4965))+(((-1.0)*r02*r22))+((cj5*r00*x4966))+(((-1.0)*x4965))+(((-1.0)*r00*x4963*x4964)));
j4eval[0]=x4967;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4964))+((cj0*x4966)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4968=cj5*cj5;
IkReal x4969=((1.0)*r20);
IkReal x4970=(r01*r21);
IkReal x4971=(r21*sj5);
CheckValue<IkReal> x4972 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4969))+((cj0*x4971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4972.valid){
continue;
}
CheckValue<IkReal> x4973=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4971))+(((-1.0)*x4970))+((x4968*x4970))+(((-1.0)*r00*x4968*x4969)))),-1);
if(!x4973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4972.value)+(((1.5707963267949)*(x4973.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4974=IKcos(j4);
IkReal x4975=IKsin(j4);
IkReal x4976=(cj5*r00);
IkReal x4977=(cj5*r10);
IkReal x4978=(cj5*r20);
IkReal x4979=((1.0)*x4974);
IkReal x4980=((1.0)*x4975);
IkReal x4981=(sj5*x4974);
IkReal x4982=(sj5*x4975);
evalcond[0]=(((r22*x4975))+(((-1.0)*x4978*x4979))+((r21*x4981)));
evalcond[1]=(((r21*x4982))+(((-1.0)*r22*x4979))+(((-1.0)*x4978*x4980)));
evalcond[2]=(((r01*x4981))+cj0+(((-1.0)*x4976*x4979))+((r02*x4975)));
evalcond[3]=(sj0+((r11*x4981))+((r12*x4975))+(((-1.0)*x4977*x4979)));
evalcond[4]=((((-1.0)*x4977*x4980))+cj0+((r11*x4982))+(((-1.0)*r12*x4979)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4982))+(((-1.0)*r02*x4979))+(((-1.0)*x4976*x4980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4983=((1.0)*cj5);
CheckValue<IkReal> x4984=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4983)))),-1);
if(!x4984.valid){
continue;
}
CheckValue<IkReal> x4985 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4983)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4984.value)))+(x4985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4986=IKcos(j4);
IkReal x4987=IKsin(j4);
IkReal x4988=(cj5*r00);
IkReal x4989=(cj5*r10);
IkReal x4990=(cj5*r20);
IkReal x4991=((1.0)*x4986);
IkReal x4992=((1.0)*x4987);
IkReal x4993=(sj5*x4986);
IkReal x4994=(sj5*x4987);
evalcond[0]=((((-1.0)*x4990*x4991))+((r22*x4987))+((r21*x4993)));
evalcond[1]=((((-1.0)*r22*x4991))+(((-1.0)*x4990*x4992))+((r21*x4994)));
evalcond[2]=(cj0+(((-1.0)*x4988*x4991))+((r01*x4993))+((r02*x4987)));
evalcond[3]=(sj0+((r12*x4987))+((r11*x4993))+(((-1.0)*x4989*x4991)));
evalcond[4]=(cj0+(((-1.0)*r12*x4991))+((r11*x4994))+(((-1.0)*x4989*x4992)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4991))+(((-1.0)*x4988*x4992))+((r01*x4994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4995 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4995.valid){
continue;
}
CheckValue<IkReal> x4996=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4995.value)+(((1.5707963267949)*(x4996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4997=IKcos(j4);
IkReal x4998=IKsin(j4);
IkReal x4999=(cj5*r00);
IkReal x5000=(cj5*r10);
IkReal x5001=(cj5*r20);
IkReal x5002=((1.0)*x4997);
IkReal x5003=((1.0)*x4998);
IkReal x5004=(sj5*x4997);
IkReal x5005=(sj5*x4998);
evalcond[0]=(((r22*x4998))+(((-1.0)*x5001*x5002))+((r21*x5004)));
evalcond[1]=((((-1.0)*x5001*x5003))+((r21*x5005))+(((-1.0)*r22*x5002)));
evalcond[2]=(cj0+((r02*x4998))+((r01*x5004))+(((-1.0)*x4999*x5002)));
evalcond[3]=(sj0+((r11*x5004))+((r12*x4998))+(((-1.0)*x5000*x5002)));
evalcond[4]=(((r11*x5005))+cj0+(((-1.0)*r12*x5002))+(((-1.0)*x5000*x5003)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5005))+(((-1.0)*x4999*x5003))+(((-1.0)*r02*x5002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5006=IKsin(j0);
IkReal x5007=IKcos(j0);
IkReal x5008=(r00*sj5);
IkReal x5009=(r10*sj5);
IkReal x5010=(cj5*r11);
IkReal x5011=(cj5*r01);
evalcond[0]=((((-1.0)*x5007))+x5008+x5011);
evalcond[1]=((((-1.0)*x5006))+x5009+x5010);
evalcond[2]=((((-0.11235)*x5006))+(((-0.08535)*x5008))+(((-1.0)*px))+(((-0.08535)*x5011)));
evalcond[3]=((((-0.08535)*x5009))+(((0.11235)*x5007))+(((-1.0)*py))+(((-0.08535)*x5010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5012=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5012;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5012);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5013=((1.0)*cj5);
IkReal x5014=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5013)));
j4eval[0]=x5014;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5013))+((r11*sj5))))));
j4eval[2]=IKsign(x5014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5015=cj5*cj5;
IkReal x5016=(r01*r11);
IkReal x5017=((1.0)*r00);
IkReal x5018=(r01*sj5);
IkReal x5019=((((-1.0)*r02*r12))+(((-1.0)*r10*x5015*x5017))+((cj5*r10*x5018))+(((-1.0)*x5016))+((x5015*x5016))+((cj5*r00*r11*sj5)));
j4eval[0]=x5019;
j4eval[1]=IKsign(x5019);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5018))+(((-1.0)*cj0*cj5*x5017))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5020=cj5*cj5;
IkReal x5021=(r01*r11);
IkReal x5022=(cj5*r00);
IkReal x5023=(r01*sj5);
CheckValue<IkReal> x5024 = IKatan2WithCheck(IkReal((((cj0*x5023))+(((-1.0)*cj0*x5022)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5024.valid){
continue;
}
CheckValue<IkReal> x5025=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5023))+(((-1.0)*r02*r12))+((x5020*x5021))+((r11*sj5*x5022))+(((-1.0)*x5021))+(((-1.0)*r00*r10*x5020)))),-1);
if(!x5025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5024.value)+(((1.5707963267949)*(x5025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5026=IKcos(j4);
IkReal x5027=IKsin(j4);
IkReal x5028=(cj5*r00);
IkReal x5029=(r01*sj5);
IkReal x5030=(cj5*r10);
IkReal x5031=(cj5*r20);
IkReal x5032=((1.0)*x5026);
IkReal x5033=((1.0)*x5027);
IkReal x5034=(sj5*x5027);
IkReal x5035=(sj5*x5026);
evalcond[0]=((((-1.0)*x5028*x5032))+((r02*x5027))+((x5026*x5029)));
evalcond[1]=((((-1.0)*x5030*x5032))+((r12*x5027))+((r11*x5035)));
evalcond[2]=((((-1.0)*x5031*x5033))+((r21*x5034))+(((-1.0)*r22*x5032)));
evalcond[3]=((1.0)+(((-1.0)*x5031*x5032))+((r22*x5027))+((r21*x5035)));
evalcond[4]=(cj0+(((-1.0)*x5030*x5033))+((r11*x5034))+(((-1.0)*r12*x5032)));
evalcond[5]=((((-1.0)*x5028*x5033))+(((-1.0)*sj0))+((x5027*x5029))+(((-1.0)*r02*x5032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5036=((1.0)*cj5);
CheckValue<IkReal> x5037 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5036)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5037.valid){
continue;
}
CheckValue<IkReal> x5038=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5036)))),-1);
if(!x5038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5037.value)+(((1.5707963267949)*(x5038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5039=IKcos(j4);
IkReal x5040=IKsin(j4);
IkReal x5041=(cj5*r00);
IkReal x5042=(r01*sj5);
IkReal x5043=(cj5*r10);
IkReal x5044=(cj5*r20);
IkReal x5045=((1.0)*x5039);
IkReal x5046=((1.0)*x5040);
IkReal x5047=(sj5*x5040);
IkReal x5048=(sj5*x5039);
evalcond[0]=((((-1.0)*x5041*x5045))+((x5039*x5042))+((r02*x5040)));
evalcond[1]=((((-1.0)*x5043*x5045))+((r12*x5040))+((r11*x5048)));
evalcond[2]=(((r21*x5047))+(((-1.0)*r22*x5045))+(((-1.0)*x5044*x5046)));
evalcond[3]=((1.0)+((r21*x5048))+(((-1.0)*x5044*x5045))+((r22*x5040)));
evalcond[4]=((((-1.0)*x5043*x5046))+cj0+(((-1.0)*r12*x5045))+((r11*x5047)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5045))+((x5040*x5042))+(((-1.0)*x5041*x5046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5049 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5049.valid){
continue;
}
CheckValue<IkReal> x5050=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5049.value)+(((1.5707963267949)*(x5050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5051=IKcos(j4);
IkReal x5052=IKsin(j4);
IkReal x5053=(cj5*r00);
IkReal x5054=(r01*sj5);
IkReal x5055=(cj5*r10);
IkReal x5056=(cj5*r20);
IkReal x5057=((1.0)*x5051);
IkReal x5058=((1.0)*x5052);
IkReal x5059=(sj5*x5052);
IkReal x5060=(sj5*x5051);
evalcond[0]=((((-1.0)*x5053*x5057))+((x5051*x5054))+((r02*x5052)));
evalcond[1]=(((r12*x5052))+(((-1.0)*x5055*x5057))+((r11*x5060)));
evalcond[2]=(((r21*x5059))+(((-1.0)*r22*x5057))+(((-1.0)*x5056*x5058)));
evalcond[3]=((1.0)+((r22*x5052))+((r21*x5060))+(((-1.0)*x5056*x5057)));
evalcond[4]=(cj0+(((-1.0)*x5055*x5058))+(((-1.0)*r12*x5057))+((r11*x5059)));
evalcond[5]=((((-1.0)*sj0))+((x5052*x5054))+(((-1.0)*x5053*x5058))+(((-1.0)*r02*x5057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5061=IKcos(j0);
IkReal x5062=IKsin(j0);
evalcond[0]=((((-0.21325)*x5061))+(((-1.0)*px))+(((-0.11235)*x5062)));
evalcond[1]=((((-0.21325)*x5062))+(((0.11235)*x5061))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5063=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5063;
j4eval[1]=IKsign(x5063);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5064=((1.0)*cj5);
IkReal x5065=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5064)));
j4eval[0]=x5065;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5064)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5065);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5066=cj5*cj5;
IkReal x5067=((1.0)*r20);
IkReal x5068=(r01*r21);
IkReal x5069=(r21*sj5);
IkReal x5070=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5066*x5068))+(((-1.0)*r00*x5066*x5067))+(((-1.0)*x5068))+((cj5*r00*x5069)));
j4eval[0]=x5070;
j4eval[1]=((IKabs((((cj0*x5069))+(((-1.0)*cj0*cj5*x5067)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5071=cj5*cj5;
IkReal x5072=((1.0)*r20);
IkReal x5073=(r01*r21);
IkReal x5074=(r21*sj5);
CheckValue<IkReal> x5075 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5074))+(((-1.0)*cj0*cj5*x5072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5075.valid){
continue;
}
CheckValue<IkReal> x5076=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x5071*x5072))+(((-1.0)*r02*r22))+((cj5*r00*x5074))+((x5071*x5073))+(((-1.0)*x5073)))),-1);
if(!x5076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5075.value)+(((1.5707963267949)*(x5076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5077=IKcos(j4);
IkReal x5078=IKsin(j4);
IkReal x5079=(cj5*r00);
IkReal x5080=(cj5*r10);
IkReal x5081=(cj5*r20);
IkReal x5082=((1.0)*x5077);
IkReal x5083=((1.0)*x5078);
IkReal x5084=(sj5*x5077);
IkReal x5085=(sj5*x5078);
evalcond[0]=(((r21*x5084))+(((-1.0)*x5081*x5082))+((r22*x5078)));
evalcond[1]=(((r21*x5085))+(((-1.0)*x5081*x5083))+(((-1.0)*r22*x5082)));
evalcond[2]=(cj0+((r01*x5084))+(((-1.0)*x5079*x5082))+((r02*x5078)));
evalcond[3]=((((-1.0)*x5080*x5082))+sj0+((r11*x5084))+((r12*x5078)));
evalcond[4]=((((-1.0)*r12*x5082))+(((-1.0)*x5080*x5083))+cj0+((r11*x5085)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5085))+(((-1.0)*x5079*x5083))+(((-1.0)*r02*x5082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5086=((1.0)*cj5);
CheckValue<IkReal> x5087 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5086)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5087.valid){
continue;
}
CheckValue<IkReal> x5088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5086))+(((-1.0)*r10*sj5)))),-1);
if(!x5088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5087.value)+(((1.5707963267949)*(x5088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5089=IKcos(j4);
IkReal x5090=IKsin(j4);
IkReal x5091=(cj5*r00);
IkReal x5092=(cj5*r10);
IkReal x5093=(cj5*r20);
IkReal x5094=((1.0)*x5089);
IkReal x5095=((1.0)*x5090);
IkReal x5096=(sj5*x5089);
IkReal x5097=(sj5*x5090);
evalcond[0]=((((-1.0)*x5093*x5094))+((r21*x5096))+((r22*x5090)));
evalcond[1]=((((-1.0)*r22*x5094))+(((-1.0)*x5093*x5095))+((r21*x5097)));
evalcond[2]=(cj0+(((-1.0)*x5091*x5094))+((r01*x5096))+((r02*x5090)));
evalcond[3]=(sj0+((r11*x5096))+((r12*x5090))+(((-1.0)*x5092*x5094)));
evalcond[4]=(cj0+((r11*x5097))+(((-1.0)*x5092*x5095))+(((-1.0)*r12*x5094)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5091*x5095))+((r01*x5097))+(((-1.0)*r02*x5094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5098 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5098.valid){
continue;
}
CheckValue<IkReal> x5099=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5098.value)+(((1.5707963267949)*(x5099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5100=IKcos(j4);
IkReal x5101=IKsin(j4);
IkReal x5102=(cj5*r00);
IkReal x5103=(cj5*r10);
IkReal x5104=(cj5*r20);
IkReal x5105=((1.0)*x5100);
IkReal x5106=((1.0)*x5101);
IkReal x5107=(sj5*x5100);
IkReal x5108=(sj5*x5101);
evalcond[0]=(((r22*x5101))+((r21*x5107))+(((-1.0)*x5104*x5105)));
evalcond[1]=((((-1.0)*r22*x5105))+((r21*x5108))+(((-1.0)*x5104*x5106)));
evalcond[2]=(((r01*x5107))+cj0+((r02*x5101))+(((-1.0)*x5102*x5105)));
evalcond[3]=(((r12*x5101))+sj0+(((-1.0)*x5103*x5105))+((r11*x5107)));
evalcond[4]=(cj0+(((-1.0)*x5103*x5106))+((r11*x5108))+(((-1.0)*r12*x5105)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5108))+(((-1.0)*r02*x5105))+(((-1.0)*x5102*x5106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5109=((1.0)*sj5);
IkReal x5110=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5109))+(((-1.0)*r11*x5110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5109))+(((-1.0)*r01*x5110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5109))+(((-1.0)*r11*x5110))))+IKsqr(((((-1.0)*r00*x5109))+(((-1.0)*r01*x5110))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5109))+(((-1.0)*r11*x5110))), ((((-1.0)*r00*x5109))+(((-1.0)*r01*x5110))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5111=IKsin(j0);
IkReal x5112=IKcos(j0);
IkReal x5113=(r00*sj5);
IkReal x5114=(r10*sj5);
IkReal x5115=(cj5*r11);
IkReal x5116=(cj5*r01);
evalcond[0]=(x5116+x5113+x5112);
evalcond[1]=(x5115+x5114+x5111);
evalcond[2]=((((-1.0)*px))+(((-0.11235)*x5111))+(((-0.08535)*x5113))+(((-0.08535)*x5116)));
evalcond[3]=((((-1.0)*py))+(((0.11235)*x5112))+(((-0.08535)*x5115))+(((-0.08535)*x5114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5117=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5117;
j4eval[1]=IKsign(x5117);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5118=((1.0)*cj5);
IkReal x5119=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5118)));
j4eval[0]=x5119;
j4eval[1]=IKsign(x5119);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5118))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5120=cj5*cj5;
IkReal x5121=(r01*r11);
IkReal x5122=((1.0)*r00);
IkReal x5123=(r01*sj5);
IkReal x5124=((((-1.0)*r02*r12))+((cj5*r10*x5123))+(((-1.0)*x5121))+((x5120*x5121))+(((-1.0)*r10*x5120*x5122))+((cj5*r00*r11*sj5)));
j4eval[0]=x5124;
j4eval[1]=IKsign(x5124);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5123))+(((-1.0)*cj0*cj5*x5122))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5125=cj5*cj5;
IkReal x5126=(r01*r11);
IkReal x5127=(cj5*r00);
IkReal x5128=(r01*sj5);
CheckValue<IkReal> x5129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((x5125*x5126))+((cj5*r10*x5128))+(((-1.0)*r00*r10*x5125))+(((-1.0)*x5126))+((r11*sj5*x5127)))),-1);
if(!x5129.valid){
continue;
}
CheckValue<IkReal> x5130 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5127))+((cj0*x5128)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5129.value)))+(x5130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5131=IKcos(j4);
IkReal x5132=IKsin(j4);
IkReal x5133=(cj5*r00);
IkReal x5134=(r01*sj5);
IkReal x5135=(cj5*r10);
IkReal x5136=(cj5*r20);
IkReal x5137=((1.0)*x5131);
IkReal x5138=((1.0)*x5132);
IkReal x5139=(sj5*x5132);
IkReal x5140=(sj5*x5131);
evalcond[0]=(((x5131*x5134))+((r02*x5132))+(((-1.0)*x5133*x5137)));
evalcond[1]=(((r12*x5132))+(((-1.0)*x5135*x5137))+((r11*x5140)));
evalcond[2]=((((-1.0)*x5136*x5138))+((r21*x5139))+(((-1.0)*r22*x5137)));
evalcond[3]=((-1.0)+((r21*x5140))+((r22*x5132))+(((-1.0)*x5136*x5137)));
evalcond[4]=(cj0+(((-1.0)*x5135*x5138))+((r11*x5139))+(((-1.0)*r12*x5137)));
evalcond[5]=(((x5132*x5134))+(((-1.0)*sj0))+(((-1.0)*r02*x5137))+(((-1.0)*x5133*x5138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5141=((1.0)*cj5);
CheckValue<IkReal> x5142 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5141)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5142.valid){
continue;
}
CheckValue<IkReal> x5143=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5141)))),-1);
if(!x5143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5142.value)+(((1.5707963267949)*(x5143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5144=IKcos(j4);
IkReal x5145=IKsin(j4);
IkReal x5146=(cj5*r00);
IkReal x5147=(r01*sj5);
IkReal x5148=(cj5*r10);
IkReal x5149=(cj5*r20);
IkReal x5150=((1.0)*x5144);
IkReal x5151=((1.0)*x5145);
IkReal x5152=(sj5*x5145);
IkReal x5153=(sj5*x5144);
evalcond[0]=(((x5144*x5147))+(((-1.0)*x5146*x5150))+((r02*x5145)));
evalcond[1]=(((r11*x5153))+((r12*x5145))+(((-1.0)*x5148*x5150)));
evalcond[2]=(((r21*x5152))+(((-1.0)*r22*x5150))+(((-1.0)*x5149*x5151)));
evalcond[3]=((-1.0)+((r21*x5153))+(((-1.0)*x5149*x5150))+((r22*x5145)));
evalcond[4]=(((r11*x5152))+cj0+(((-1.0)*r12*x5150))+(((-1.0)*x5148*x5151)));
evalcond[5]=((((-1.0)*sj0))+((x5145*x5147))+(((-1.0)*x5146*x5151))+(((-1.0)*r02*x5150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5154=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5154.valid){
continue;
}
CheckValue<IkReal> x5155 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5154.value)))+(x5155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5156=IKcos(j4);
IkReal x5157=IKsin(j4);
IkReal x5158=(cj5*r00);
IkReal x5159=(r01*sj5);
IkReal x5160=(cj5*r10);
IkReal x5161=(cj5*r20);
IkReal x5162=((1.0)*x5156);
IkReal x5163=((1.0)*x5157);
IkReal x5164=(sj5*x5157);
IkReal x5165=(sj5*x5156);
evalcond[0]=(((r02*x5157))+(((-1.0)*x5158*x5162))+((x5156*x5159)));
evalcond[1]=((((-1.0)*x5160*x5162))+((r12*x5157))+((r11*x5165)));
evalcond[2]=((((-1.0)*r22*x5162))+((r21*x5164))+(((-1.0)*x5161*x5163)));
evalcond[3]=((-1.0)+((r21*x5165))+(((-1.0)*x5161*x5162))+((r22*x5157)));
evalcond[4]=(cj0+(((-1.0)*x5160*x5163))+(((-1.0)*r12*x5162))+((r11*x5164)));
evalcond[5]=((((-1.0)*sj0))+((x5157*x5159))+(((-1.0)*r02*x5162))+(((-1.0)*x5158*x5163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5166=IKcos(j0);
IkReal x5167=IKsin(j0);
evalcond[0]=((((-0.11235)*x5167))+(((0.21325)*x5166))+(((-1.0)*px)));
evalcond[1]=((((0.21325)*x5167))+(((-1.0)*py))+(((0.11235)*x5166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5168=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5168;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5169=((1.0)*cj5);
IkReal x5170=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5169)));
j4eval[0]=x5170;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5169)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5170);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5171=((1.0)*cj5);
IkReal x5172=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5171)));
j4eval[0]=x5172;
j4eval[1]=IKsign(x5172);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x5171))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5173=((1.0)*cj5);
CheckValue<IkReal> x5174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5173)))),-1);
if(!x5174.valid){
continue;
}
CheckValue<IkReal> x5175 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5173))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5174.value)))+(x5175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5176=IKcos(j4);
IkReal x5177=IKsin(j4);
IkReal x5178=((1.0)*sj0);
IkReal x5179=(cj5*r00);
IkReal x5180=(cj5*r10);
IkReal x5181=(cj5*r20);
IkReal x5182=((1.0)*x5176);
IkReal x5183=((1.0)*x5177);
IkReal x5184=(sj5*x5176);
IkReal x5185=(sj5*x5177);
evalcond[0]=(((r21*x5184))+((r22*x5177))+(((-1.0)*x5181*x5182)));
evalcond[1]=((((-1.0)*r22*x5182))+((r21*x5185))+(((-1.0)*x5181*x5183)));
evalcond[2]=(cj0+(((-1.0)*r12*x5182))+((r11*x5185))+(((-1.0)*x5180*x5183)));
evalcond[3]=(((r01*x5184))+((r02*x5177))+(((-1.0)*x5179*x5182))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5178))+((r12*x5177))+((r11*x5184))+(((-1.0)*x5180*x5182)));
evalcond[5]=((((-1.0)*r02*x5182))+((r01*x5185))+(((-1.0)*x5178))+(((-1.0)*x5179*x5183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5186=((1.0)*cj5);
CheckValue<IkReal> x5187 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5187.valid){
continue;
}
CheckValue<IkReal> x5188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5186)))),-1);
if(!x5188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5187.value)+(((1.5707963267949)*(x5188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5189=IKcos(j4);
IkReal x5190=IKsin(j4);
IkReal x5191=((1.0)*sj0);
IkReal x5192=(cj5*r00);
IkReal x5193=(cj5*r10);
IkReal x5194=(cj5*r20);
IkReal x5195=((1.0)*x5189);
IkReal x5196=((1.0)*x5190);
IkReal x5197=(sj5*x5189);
IkReal x5198=(sj5*x5190);
evalcond[0]=(((r21*x5197))+((r22*x5190))+(((-1.0)*x5194*x5195)));
evalcond[1]=(((r21*x5198))+(((-1.0)*r22*x5195))+(((-1.0)*x5194*x5196)));
evalcond[2]=((((-1.0)*r12*x5195))+cj0+((r11*x5198))+(((-1.0)*x5193*x5196)));
evalcond[3]=(((r02*x5190))+(((-1.0)*x5192*x5195))+((r01*x5197))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5197))+(((-1.0)*x5191))+(((-1.0)*x5193*x5195))+((r12*x5190)));
evalcond[5]=((((-1.0)*x5191))+(((-1.0)*x5192*x5196))+(((-1.0)*r02*x5195))+((r01*x5198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5199 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5199.valid){
continue;
}
CheckValue<IkReal> x5200=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5199.value)+(((1.5707963267949)*(x5200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5201=IKcos(j4);
IkReal x5202=IKsin(j4);
IkReal x5203=((1.0)*sj0);
IkReal x5204=(cj5*r00);
IkReal x5205=(cj5*r10);
IkReal x5206=(cj5*r20);
IkReal x5207=((1.0)*x5201);
IkReal x5208=((1.0)*x5202);
IkReal x5209=(sj5*x5201);
IkReal x5210=(sj5*x5202);
evalcond[0]=((((-1.0)*x5206*x5207))+((r22*x5202))+((r21*x5209)));
evalcond[1]=((((-1.0)*x5206*x5208))+(((-1.0)*r22*x5207))+((r21*x5210)));
evalcond[2]=(cj0+((r11*x5210))+(((-1.0)*x5205*x5208))+(((-1.0)*r12*x5207)));
evalcond[3]=(((r01*x5209))+((r02*x5202))+(((-1.0)*x5204*x5207))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5203))+((r11*x5209))+(((-1.0)*x5205*x5207))+((r12*x5202)));
evalcond[5]=((((-1.0)*x5203))+((r01*x5210))+(((-1.0)*r02*x5207))+(((-1.0)*x5204*x5208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.507498115261088)*px))+(((-2.06387083990023)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))))+IKsqr(((((-2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))), ((((-2.06387083990023)*px))+(((0.507498115261088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5211=IKcos(j0);
IkReal x5212=IKsin(j0);
evalcond[0]=((((-0.4569)*x5211))+(((-0.11235)*x5212))+(((-1.0)*px)));
evalcond[1]=((((-0.4569)*x5212))+(((-1.0)*py))+(((0.11235)*x5211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5213=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5213;
j4eval[1]=IKsign(x5213);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5214=((1.0)*cj5);
IkReal x5215=((((-1.0)*r11*x5214))+(((-1.0)*r10*sj5)));
j4eval[0]=x5215;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5214)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5215);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5216=cj5*cj5;
IkReal x5217=((1.0)*r20);
IkReal x5218=(r01*r21);
IkReal x5219=(r21*sj5);
IkReal x5220=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5216*x5218))+(((-1.0)*r00*x5216*x5217))+((cj5*r00*x5219))+(((-1.0)*x5218)));
j4eval[0]=x5220;
j4eval[1]=((IKabs((((cj0*x5219))+(((-1.0)*cj0*cj5*x5217)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5220);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5221=cj5*cj5;
IkReal x5222=((1.0)*r20);
IkReal x5223=(r01*r21);
IkReal x5224=(r21*sj5);
CheckValue<IkReal> x5225=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5224))+((x5221*x5223))+(((-1.0)*r00*x5221*x5222))+(((-1.0)*x5223)))),-1);
if(!x5225.valid){
continue;
}
CheckValue<IkReal> x5226 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5222))+((cj0*x5224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5225.value)))+(x5226.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5227=IKcos(j4);
IkReal x5228=IKsin(j4);
IkReal x5229=(cj5*r00);
IkReal x5230=(cj5*r10);
IkReal x5231=(cj5*r20);
IkReal x5232=((1.0)*x5227);
IkReal x5233=((1.0)*x5228);
IkReal x5234=(sj5*x5227);
IkReal x5235=(sj5*x5228);
evalcond[0]=(((r22*x5228))+(((-1.0)*x5231*x5232))+((r21*x5234)));
evalcond[1]=((((-1.0)*r22*x5232))+(((-1.0)*x5231*x5233))+((r21*x5235)));
evalcond[2]=(cj0+((r02*x5228))+((r01*x5234))+(((-1.0)*x5229*x5232)));
evalcond[3]=(sj0+((r11*x5234))+((r12*x5228))+(((-1.0)*x5230*x5232)));
evalcond[4]=(cj0+((r11*x5235))+(((-1.0)*r12*x5232))+(((-1.0)*x5230*x5233)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5232))+((r01*x5235))+(((-1.0)*x5229*x5233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5236=((1.0)*cj5);
CheckValue<IkReal> x5237 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5236))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5237.valid){
continue;
}
CheckValue<IkReal> x5238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5236))+(((-1.0)*r10*sj5)))),-1);
if(!x5238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5237.value)+(((1.5707963267949)*(x5238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5239=IKcos(j4);
IkReal x5240=IKsin(j4);
IkReal x5241=(cj5*r00);
IkReal x5242=(cj5*r10);
IkReal x5243=(cj5*r20);
IkReal x5244=((1.0)*x5239);
IkReal x5245=((1.0)*x5240);
IkReal x5246=(sj5*x5239);
IkReal x5247=(sj5*x5240);
evalcond[0]=((((-1.0)*x5243*x5244))+((r21*x5246))+((r22*x5240)));
evalcond[1]=((((-1.0)*x5243*x5245))+(((-1.0)*r22*x5244))+((r21*x5247)));
evalcond[2]=(cj0+((r01*x5246))+(((-1.0)*x5241*x5244))+((r02*x5240)));
evalcond[3]=(sj0+((r11*x5246))+(((-1.0)*x5242*x5244))+((r12*x5240)));
evalcond[4]=((((-1.0)*r12*x5244))+((r11*x5247))+cj0+(((-1.0)*x5242*x5245)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5247))+(((-1.0)*r02*x5244))+(((-1.0)*x5241*x5245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5248 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5248.valid){
continue;
}
CheckValue<IkReal> x5249=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5248.value)+(((1.5707963267949)*(x5249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5250=IKcos(j4);
IkReal x5251=IKsin(j4);
IkReal x5252=(cj5*r00);
IkReal x5253=(cj5*r10);
IkReal x5254=(cj5*r20);
IkReal x5255=((1.0)*x5250);
IkReal x5256=((1.0)*x5251);
IkReal x5257=(sj5*x5250);
IkReal x5258=(sj5*x5251);
evalcond[0]=(((r22*x5251))+(((-1.0)*x5254*x5255))+((r21*x5257)));
evalcond[1]=((((-1.0)*x5254*x5256))+((r21*x5258))+(((-1.0)*r22*x5255)));
evalcond[2]=(((r01*x5257))+cj0+(((-1.0)*x5252*x5255))+((r02*x5251)));
evalcond[3]=(sj0+((r12*x5251))+((r11*x5257))+(((-1.0)*x5253*x5255)));
evalcond[4]=(cj0+(((-1.0)*r12*x5255))+((r11*x5258))+(((-1.0)*x5253*x5256)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5255))+((r01*x5258))+(((-1.0)*x5252*x5256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.24409186529617)*py))+(((-8.29354345611924)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))))+IKsqr(((((-2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))), ((((-2.24409186529617)*px))+(((8.29354345611924)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5259=IKcos(j0);
IkReal x5260=IKsin(j0);
evalcond[0]=((((-0.11235)*x5260))+(((-0.0304)*x5259))+(((-1.0)*px)));
evalcond[1]=((((0.11235)*x5259))+(((-1.0)*py))+(((-0.0304)*x5260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5261=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5261;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5262=((1.0)*cj5);
IkReal x5263=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5262)));
j4eval[0]=x5263;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5262))))));
j4eval[2]=IKsign(x5263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5264=((1.0)*cj5);
IkReal x5265=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5264)));
j4eval[0]=x5265;
j4eval[1]=IKsign(x5265);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5264))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5266=((1.0)*cj5);
CheckValue<IkReal> x5267 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5266))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5267.valid){
continue;
}
CheckValue<IkReal> x5268=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5266)))),-1);
if(!x5268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5267.value)+(((1.5707963267949)*(x5268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5269=IKcos(j4);
IkReal x5270=IKsin(j4);
IkReal x5271=((1.0)*sj0);
IkReal x5272=(cj5*r00);
IkReal x5273=(cj5*r10);
IkReal x5274=(cj5*r20);
IkReal x5275=((1.0)*x5269);
IkReal x5276=((1.0)*x5270);
IkReal x5277=(sj5*x5269);
IkReal x5278=(sj5*x5270);
evalcond[0]=(((r22*x5270))+(((-1.0)*x5274*x5275))+((r21*x5277)));
evalcond[1]=((((-1.0)*x5274*x5276))+((r21*x5278))+(((-1.0)*r22*x5275)));
evalcond[2]=(cj0+(((-1.0)*r12*x5275))+((r11*x5278))+(((-1.0)*x5273*x5276)));
evalcond[3]=((((-1.0)*x5272*x5275))+((r02*x5270))+((r01*x5277))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5271))+((r11*x5277))+(((-1.0)*x5273*x5275))+((r12*x5270)));
evalcond[5]=((((-1.0)*x5272*x5276))+(((-1.0)*x5271))+((r01*x5278))+(((-1.0)*r02*x5275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5279=((1.0)*cj5);
CheckValue<IkReal> x5280=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5279))+(((-1.0)*r00*sj5)))),-1);
if(!x5280.valid){
continue;
}
CheckValue<IkReal> x5281 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5280.value)))+(x5281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5282=IKcos(j4);
IkReal x5283=IKsin(j4);
IkReal x5284=((1.0)*sj0);
IkReal x5285=(cj5*r00);
IkReal x5286=(cj5*r10);
IkReal x5287=(cj5*r20);
IkReal x5288=((1.0)*x5282);
IkReal x5289=((1.0)*x5283);
IkReal x5290=(sj5*x5282);
IkReal x5291=(sj5*x5283);
evalcond[0]=((((-1.0)*x5287*x5288))+((r22*x5283))+((r21*x5290)));
evalcond[1]=((((-1.0)*r22*x5288))+(((-1.0)*x5287*x5289))+((r21*x5291)));
evalcond[2]=(cj0+(((-1.0)*x5286*x5289))+(((-1.0)*r12*x5288))+((r11*x5291)));
evalcond[3]=(((r02*x5283))+((r01*x5290))+(((-1.0)*cj0))+(((-1.0)*x5285*x5288)));
evalcond[4]=(((r12*x5283))+(((-1.0)*x5286*x5288))+(((-1.0)*x5284))+((r11*x5290)));
evalcond[5]=((((-1.0)*x5284))+(((-1.0)*r02*x5288))+((r01*x5291))+(((-1.0)*x5285*x5289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5292 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5292.valid){
continue;
}
CheckValue<IkReal> x5293=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5292.value)+(((1.5707963267949)*(x5293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5294=IKcos(j4);
IkReal x5295=IKsin(j4);
IkReal x5296=((1.0)*sj0);
IkReal x5297=(cj5*r00);
IkReal x5298=(cj5*r10);
IkReal x5299=(cj5*r20);
IkReal x5300=((1.0)*x5294);
IkReal x5301=((1.0)*x5295);
IkReal x5302=(sj5*x5294);
IkReal x5303=(sj5*x5295);
evalcond[0]=(((r21*x5302))+((r22*x5295))+(((-1.0)*x5299*x5300)));
evalcond[1]=((((-1.0)*r22*x5300))+((r21*x5303))+(((-1.0)*x5299*x5301)));
evalcond[2]=(cj0+(((-1.0)*r12*x5300))+(((-1.0)*x5298*x5301))+((r11*x5303)));
evalcond[3]=((((-1.0)*x5297*x5300))+((r02*x5295))+((r01*x5302))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5295))+(((-1.0)*x5296))+(((-1.0)*x5298*x5300))+((r11*x5302)));
evalcond[5]=((((-1.0)*x5297*x5301))+(((-1.0)*x5296))+(((-1.0)*r02*x5300))+((r01*x5303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5304=((1.0)*sj5);
IkReal x5305=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5305))+(((-1.0)*r10*x5304)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5305))+(((-1.0)*r00*x5304)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5305))+(((-1.0)*r10*x5304))))+IKsqr(((((-1.0)*r01*x5305))+(((-1.0)*r00*x5304))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5305))+(((-1.0)*r10*x5304))), ((((-1.0)*r01*x5305))+(((-1.0)*r00*x5304))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5306=IKsin(j0);
IkReal x5307=IKcos(j0);
IkReal x5308=(r00*sj5);
IkReal x5309=(r10*sj5);
IkReal x5310=(cj5*r11);
IkReal x5311=(cj5*r01);
evalcond[0]=(x5308+x5307+x5311);
evalcond[1]=(x5309+x5306+x5310);
evalcond[2]=((((-0.11235)*x5306))+(((-1.0)*px))+(((-0.08535)*x5308))+(((-0.08535)*x5311)));
evalcond[3]=((((-1.0)*py))+(((-0.08535)*x5309))+(((-0.08535)*x5310))+(((0.11235)*x5307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5312=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5312;
j4eval[1]=IKsign(x5312);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5313=((1.0)*cj5);
IkReal x5314=((((-1.0)*r11*x5313))+(((-1.0)*r10*sj5)));
j4eval[0]=x5314;
j4eval[1]=IKsign(x5314);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5313))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5315=cj5*cj5;
IkReal x5316=(r01*r11);
IkReal x5317=((1.0)*r00);
IkReal x5318=(r01*sj5);
IkReal x5319=(((cj5*r10*x5318))+(((-1.0)*r02*r12))+((x5315*x5316))+(((-1.0)*r10*x5315*x5317))+(((-1.0)*x5316))+((cj5*r00*r11*sj5)));
j4eval[0]=x5319;
j4eval[1]=IKsign(x5319);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5318))+(((-1.0)*cj0*cj5*x5317))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5320=cj5*cj5;
IkReal x5321=(r01*r11);
IkReal x5322=(cj5*r00);
IkReal x5323=(r01*sj5);
CheckValue<IkReal> x5324=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5321))+(((-1.0)*r00*r10*x5320))+(((-1.0)*r02*r12))+((x5320*x5321))+((r11*sj5*x5322))+((cj5*r10*x5323)))),-1);
if(!x5324.valid){
continue;
}
CheckValue<IkReal> x5325 = IKatan2WithCheck(IkReal((((cj0*x5323))+(((-1.0)*cj0*x5322)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5324.value)))+(x5325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5326=IKcos(j4);
IkReal x5327=IKsin(j4);
IkReal x5328=(cj5*r00);
IkReal x5329=(r01*sj5);
IkReal x5330=(cj5*r10);
IkReal x5331=(cj5*r20);
IkReal x5332=((1.0)*x5326);
IkReal x5333=((1.0)*x5327);
IkReal x5334=(sj5*x5327);
IkReal x5335=(sj5*x5326);
evalcond[0]=(((x5326*x5329))+(((-1.0)*x5328*x5332))+((r02*x5327)));
evalcond[1]=((((-1.0)*x5330*x5332))+((r11*x5335))+((r12*x5327)));
evalcond[2]=((((-1.0)*x5331*x5333))+(((-1.0)*r22*x5332))+((r21*x5334)));
evalcond[3]=((-1.0)+(((-1.0)*x5331*x5332))+((r22*x5327))+((r21*x5335)));
evalcond[4]=((((-1.0)*x5330*x5333))+cj0+((r11*x5334))+(((-1.0)*r12*x5332)));
evalcond[5]=((((-1.0)*sj0))+((x5327*x5329))+(((-1.0)*r02*x5332))+(((-1.0)*x5328*x5333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5336=((1.0)*cj5);
CheckValue<IkReal> x5337=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5336)))),-1);
if(!x5337.valid){
continue;
}
CheckValue<IkReal> x5338 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x5336))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5337.value)))+(x5338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5339=IKcos(j4);
IkReal x5340=IKsin(j4);
IkReal x5341=(cj5*r00);
IkReal x5342=(r01*sj5);
IkReal x5343=(cj5*r10);
IkReal x5344=(cj5*r20);
IkReal x5345=((1.0)*x5339);
IkReal x5346=((1.0)*x5340);
IkReal x5347=(sj5*x5340);
IkReal x5348=(sj5*x5339);
evalcond[0]=(((x5339*x5342))+(((-1.0)*x5341*x5345))+((r02*x5340)));
evalcond[1]=(((r12*x5340))+((r11*x5348))+(((-1.0)*x5343*x5345)));
evalcond[2]=((((-1.0)*x5344*x5346))+(((-1.0)*r22*x5345))+((r21*x5347)));
evalcond[3]=((-1.0)+(((-1.0)*x5344*x5345))+((r22*x5340))+((r21*x5348)));
evalcond[4]=(cj0+((r11*x5347))+(((-1.0)*r12*x5345))+(((-1.0)*x5343*x5346)));
evalcond[5]=((((-1.0)*r02*x5345))+(((-1.0)*sj0))+(((-1.0)*x5341*x5346))+((x5340*x5342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5349=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5349.valid){
continue;
}
CheckValue<IkReal> x5350 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5349.value)))+(x5350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5351=IKcos(j4);
IkReal x5352=IKsin(j4);
IkReal x5353=(cj5*r00);
IkReal x5354=(r01*sj5);
IkReal x5355=(cj5*r10);
IkReal x5356=(cj5*r20);
IkReal x5357=((1.0)*x5351);
IkReal x5358=((1.0)*x5352);
IkReal x5359=(sj5*x5352);
IkReal x5360=(sj5*x5351);
evalcond[0]=((((-1.0)*x5353*x5357))+((x5351*x5354))+((r02*x5352)));
evalcond[1]=((((-1.0)*x5355*x5357))+((r12*x5352))+((r11*x5360)));
evalcond[2]=((((-1.0)*x5356*x5358))+(((-1.0)*r22*x5357))+((r21*x5359)));
evalcond[3]=((-1.0)+(((-1.0)*x5356*x5357))+((r22*x5352))+((r21*x5360)));
evalcond[4]=((((-1.0)*x5355*x5358))+cj0+((r11*x5359))+(((-1.0)*r12*x5357)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5357))+(((-1.0)*x5353*x5358))+((x5352*x5354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5361=IKcos(j0);
IkReal x5362=IKsin(j0);
evalcond[0]=((((-0.11235)*x5362))+(((-1.0)*px))+(((0.21325)*x5361)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x5361))+(((0.21325)*x5362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5363=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5363;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5363);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5364=((1.0)*cj5);
IkReal x5365=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5364)));
j4eval[0]=x5365;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5364)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5366=((1.0)*cj5);
IkReal x5367=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5366)));
j4eval[0]=x5367;
j4eval[1]=IKsign(x5367);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5366)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5368=((1.0)*cj5);
CheckValue<IkReal> x5369 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5368)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5369.valid){
continue;
}
CheckValue<IkReal> x5370=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5368)))),-1);
if(!x5370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5369.value)+(((1.5707963267949)*(x5370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5371=IKcos(j4);
IkReal x5372=IKsin(j4);
IkReal x5373=((1.0)*sj0);
IkReal x5374=(cj5*r00);
IkReal x5375=(cj5*r10);
IkReal x5376=(cj5*r20);
IkReal x5377=((1.0)*x5371);
IkReal x5378=((1.0)*x5372);
IkReal x5379=(sj5*x5371);
IkReal x5380=(sj5*x5372);
evalcond[0]=(((r21*x5379))+(((-1.0)*x5376*x5377))+((r22*x5372)));
evalcond[1]=((((-1.0)*r22*x5377))+(((-1.0)*x5376*x5378))+((r21*x5380)));
evalcond[2]=(cj0+(((-1.0)*r12*x5377))+((r11*x5380))+(((-1.0)*x5375*x5378)));
evalcond[3]=(((r02*x5372))+(((-1.0)*x5374*x5377))+((r01*x5379))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5373))+((r12*x5372))+(((-1.0)*x5375*x5377))+((r11*x5379)));
evalcond[5]=((((-1.0)*x5373))+(((-1.0)*r02*x5377))+((r01*x5380))+(((-1.0)*x5374*x5378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5381=((1.0)*cj5);
CheckValue<IkReal> x5382 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5382.valid){
continue;
}
CheckValue<IkReal> x5383=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5381)))),-1);
if(!x5383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5382.value)+(((1.5707963267949)*(x5383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5384=IKcos(j4);
IkReal x5385=IKsin(j4);
IkReal x5386=((1.0)*sj0);
IkReal x5387=(cj5*r00);
IkReal x5388=(cj5*r10);
IkReal x5389=(cj5*r20);
IkReal x5390=((1.0)*x5384);
IkReal x5391=((1.0)*x5385);
IkReal x5392=(sj5*x5384);
IkReal x5393=(sj5*x5385);
evalcond[0]=((((-1.0)*x5389*x5390))+((r21*x5392))+((r22*x5385)));
evalcond[1]=((((-1.0)*x5389*x5391))+(((-1.0)*r22*x5390))+((r21*x5393)));
evalcond[2]=((((-1.0)*x5388*x5391))+cj0+((r11*x5393))+(((-1.0)*r12*x5390)));
evalcond[3]=(((r02*x5385))+(((-1.0)*x5387*x5390))+((r01*x5392))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5388*x5390))+((r11*x5392))+((r12*x5385))+(((-1.0)*x5386)));
evalcond[5]=((((-1.0)*r02*x5390))+(((-1.0)*x5387*x5391))+((r01*x5393))+(((-1.0)*x5386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5394 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5394.valid){
continue;
}
CheckValue<IkReal> x5395=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5394.value)+(((1.5707963267949)*(x5395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5396=IKcos(j4);
IkReal x5397=IKsin(j4);
IkReal x5398=((1.0)*sj0);
IkReal x5399=(cj5*r00);
IkReal x5400=(cj5*r10);
IkReal x5401=(cj5*r20);
IkReal x5402=((1.0)*x5396);
IkReal x5403=((1.0)*x5397);
IkReal x5404=(sj5*x5396);
IkReal x5405=(sj5*x5397);
evalcond[0]=(((r21*x5404))+((r22*x5397))+(((-1.0)*x5401*x5402)));
evalcond[1]=(((r21*x5405))+(((-1.0)*r22*x5402))+(((-1.0)*x5401*x5403)));
evalcond[2]=((((-1.0)*x5400*x5403))+cj0+(((-1.0)*r12*x5402))+((r11*x5405)));
evalcond[3]=(((r02*x5397))+(((-1.0)*x5399*x5402))+((r01*x5404))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5400*x5402))+((r12*x5397))+(((-1.0)*x5398))+((r11*x5404)));
evalcond[5]=((((-1.0)*r02*x5402))+(((-1.0)*x5399*x5403))+(((-1.0)*x5398))+((r01*x5405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5406=IKsin(j0);
IkReal x5407=IKcos(j0);
IkReal x5408=(r00*sj5);
IkReal x5409=(r10*sj5);
IkReal x5410=(cj5*r11);
IkReal x5411=(cj5*r01);
evalcond[0]=((((-1.0)*x5407))+x5411+x5408);
evalcond[1]=((((-1.0)*x5406))+x5410+x5409);
evalcond[2]=((((-0.11235)*x5406))+(((-0.08535)*x5411))+(((-0.08535)*x5408))+(((-1.0)*px)));
evalcond[3]=((((0.11235)*x5407))+(((-0.08535)*x5410))+(((-0.08535)*x5409))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5412=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5412;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5413=((1.0)*cj5);
IkReal x5414=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5413)));
j4eval[0]=x5414;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5413))+((r11*sj5))))));
j4eval[2]=IKsign(x5414);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5415=cj5*cj5;
IkReal x5416=(r01*r11);
IkReal x5417=((1.0)*r00);
IkReal x5418=(r01*sj5);
IkReal x5419=((((-1.0)*x5416))+((cj5*r10*x5418))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5415*x5417))+((x5415*x5416))+((cj5*r00*r11*sj5)));
j4eval[0]=x5419;
j4eval[1]=IKsign(x5419);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5417))+((cj0*x5418))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5420=cj5*cj5;
IkReal x5421=(r01*r11);
IkReal x5422=(cj5*r00);
IkReal x5423=(r01*sj5);
CheckValue<IkReal> x5424 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5422))+((cj0*x5423)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5424.valid){
continue;
}
CheckValue<IkReal> x5425=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5422))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x5420))+((cj5*r10*x5423))+((x5420*x5421))+(((-1.0)*x5421)))),-1);
if(!x5425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5424.value)+(((1.5707963267949)*(x5425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5426=IKcos(j4);
IkReal x5427=IKsin(j4);
IkReal x5428=(cj5*r00);
IkReal x5429=(r01*sj5);
IkReal x5430=(cj5*r10);
IkReal x5431=(cj5*r20);
IkReal x5432=((1.0)*x5426);
IkReal x5433=((1.0)*x5427);
IkReal x5434=(sj5*x5427);
IkReal x5435=(sj5*x5426);
evalcond[0]=((((-1.0)*x5428*x5432))+((x5426*x5429))+((r02*x5427)));
evalcond[1]=(((r12*x5427))+(((-1.0)*x5430*x5432))+((r11*x5435)));
evalcond[2]=((((-1.0)*x5431*x5433))+(((-1.0)*r22*x5432))+((r21*x5434)));
evalcond[3]=((1.0)+(((-1.0)*x5431*x5432))+((r22*x5427))+((r21*x5435)));
evalcond[4]=(cj0+(((-1.0)*r12*x5432))+(((-1.0)*x5430*x5433))+((r11*x5434)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5428*x5433))+(((-1.0)*r02*x5432))+((x5427*x5429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5436=((1.0)*cj5);
CheckValue<IkReal> x5437 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5436)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5437.valid){
continue;
}
CheckValue<IkReal> x5438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5436))+(((-1.0)*r00*sj5)))),-1);
if(!x5438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5437.value)+(((1.5707963267949)*(x5438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5439=IKcos(j4);
IkReal x5440=IKsin(j4);
IkReal x5441=(cj5*r00);
IkReal x5442=(r01*sj5);
IkReal x5443=(cj5*r10);
IkReal x5444=(cj5*r20);
IkReal x5445=((1.0)*x5439);
IkReal x5446=((1.0)*x5440);
IkReal x5447=(sj5*x5440);
IkReal x5448=(sj5*x5439);
evalcond[0]=(((x5439*x5442))+(((-1.0)*x5441*x5445))+((r02*x5440)));
evalcond[1]=((((-1.0)*x5443*x5445))+((r12*x5440))+((r11*x5448)));
evalcond[2]=((((-1.0)*x5444*x5446))+(((-1.0)*r22*x5445))+((r21*x5447)));
evalcond[3]=((1.0)+(((-1.0)*x5444*x5445))+((r22*x5440))+((r21*x5448)));
evalcond[4]=(cj0+(((-1.0)*r12*x5445))+(((-1.0)*x5443*x5446))+((r11*x5447)));
evalcond[5]=(((x5440*x5442))+(((-1.0)*sj0))+(((-1.0)*x5441*x5446))+(((-1.0)*r02*x5445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5449 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5449.valid){
continue;
}
CheckValue<IkReal> x5450=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5449.value)+(((1.5707963267949)*(x5450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5451=IKcos(j4);
IkReal x5452=IKsin(j4);
IkReal x5453=(cj5*r00);
IkReal x5454=(r01*sj5);
IkReal x5455=(cj5*r10);
IkReal x5456=(cj5*r20);
IkReal x5457=((1.0)*x5451);
IkReal x5458=((1.0)*x5452);
IkReal x5459=(sj5*x5452);
IkReal x5460=(sj5*x5451);
evalcond[0]=(((r02*x5452))+(((-1.0)*x5453*x5457))+((x5451*x5454)));
evalcond[1]=((((-1.0)*x5455*x5457))+((r12*x5452))+((r11*x5460)));
evalcond[2]=(((r21*x5459))+(((-1.0)*x5456*x5458))+(((-1.0)*r22*x5457)));
evalcond[3]=((1.0)+((r22*x5452))+(((-1.0)*x5456*x5457))+((r21*x5460)));
evalcond[4]=((((-1.0)*r12*x5457))+(((-1.0)*x5455*x5458))+cj0+((r11*x5459)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5457))+((x5452*x5454))+(((-1.0)*x5453*x5458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5461=IKcos(j0);
IkReal x5462=IKsin(j0);
evalcond[0]=((((-0.21325)*x5461))+(((-1.0)*px))+(((-0.11235)*x5462)));
evalcond[1]=((((-0.21325)*x5462))+(((-1.0)*py))+(((0.11235)*x5461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5463=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5463;
j4eval[1]=IKsign(x5463);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5464=((1.0)*cj5);
IkReal x5465=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5464)));
j4eval[0]=x5465;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5464))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5465);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5466=cj5*cj5;
IkReal x5467=((1.0)*r20);
IkReal x5468=(r01*r21);
IkReal x5469=(r21*sj5);
IkReal x5470=(((cj5*r01*r20*sj5))+((x5466*x5468))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5466*x5467))+(((-1.0)*x5468))+((cj5*r00*x5469)));
j4eval[0]=x5470;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5467))+((cj0*x5469)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5470);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5471=cj5*cj5;
IkReal x5472=((1.0)*r20);
IkReal x5473=(r01*r21);
IkReal x5474=(r21*sj5);
CheckValue<IkReal> x5475=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x5473))+(((-1.0)*r00*x5471*x5472))+(((-1.0)*r02*r22))+((x5471*x5473))+((cj5*r00*x5474)))),-1);
if(!x5475.valid){
continue;
}
CheckValue<IkReal> x5476 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5472))+((cj0*x5474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5475.value)))+(x5476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5477=IKcos(j4);
IkReal x5478=IKsin(j4);
IkReal x5479=(cj5*r00);
IkReal x5480=(cj5*r10);
IkReal x5481=(cj5*r20);
IkReal x5482=((1.0)*x5477);
IkReal x5483=((1.0)*x5478);
IkReal x5484=(sj5*x5477);
IkReal x5485=(sj5*x5478);
evalcond[0]=((((-1.0)*x5481*x5482))+((r21*x5484))+((r22*x5478)));
evalcond[1]=((((-1.0)*x5481*x5483))+(((-1.0)*r22*x5482))+((r21*x5485)));
evalcond[2]=((((-1.0)*x5479*x5482))+cj0+((r01*x5484))+((r02*x5478)));
evalcond[3]=(sj0+((r11*x5484))+((r12*x5478))+(((-1.0)*x5480*x5482)));
evalcond[4]=((((-1.0)*r12*x5482))+cj0+((r11*x5485))+(((-1.0)*x5480*x5483)));
evalcond[5]=((((-1.0)*x5479*x5483))+(((-1.0)*sj0))+((r01*x5485))+(((-1.0)*r02*x5482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5486=((1.0)*cj5);
CheckValue<IkReal> x5487 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5486)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5487.valid){
continue;
}
CheckValue<IkReal> x5488=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5486))+(((-1.0)*r10*sj5)))),-1);
if(!x5488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5487.value)+(((1.5707963267949)*(x5488.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5489=IKcos(j4);
IkReal x5490=IKsin(j4);
IkReal x5491=(cj5*r00);
IkReal x5492=(cj5*r10);
IkReal x5493=(cj5*r20);
IkReal x5494=((1.0)*x5489);
IkReal x5495=((1.0)*x5490);
IkReal x5496=(sj5*x5489);
IkReal x5497=(sj5*x5490);
evalcond[0]=(((r21*x5496))+(((-1.0)*x5493*x5494))+((r22*x5490)));
evalcond[1]=(((r21*x5497))+(((-1.0)*r22*x5494))+(((-1.0)*x5493*x5495)));
evalcond[2]=(((r01*x5496))+cj0+(((-1.0)*x5491*x5494))+((r02*x5490)));
evalcond[3]=(sj0+((r12*x5490))+((r11*x5496))+(((-1.0)*x5492*x5494)));
evalcond[4]=(cj0+(((-1.0)*r12*x5494))+((r11*x5497))+(((-1.0)*x5492*x5495)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5497))+(((-1.0)*x5491*x5495))+(((-1.0)*r02*x5494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5498 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5498.valid){
continue;
}
CheckValue<IkReal> x5499=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5498.value)+(((1.5707963267949)*(x5499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5500=IKcos(j4);
IkReal x5501=IKsin(j4);
IkReal x5502=(cj5*r00);
IkReal x5503=(cj5*r10);
IkReal x5504=(cj5*r20);
IkReal x5505=((1.0)*x5500);
IkReal x5506=((1.0)*x5501);
IkReal x5507=(sj5*x5500);
IkReal x5508=(sj5*x5501);
evalcond[0]=(((r21*x5507))+((r22*x5501))+(((-1.0)*x5504*x5505)));
evalcond[1]=((((-1.0)*r22*x5505))+((r21*x5508))+(((-1.0)*x5504*x5506)));
evalcond[2]=((((-1.0)*x5502*x5505))+cj0+((r02*x5501))+((r01*x5507)));
evalcond[3]=((((-1.0)*x5503*x5505))+sj0+((r12*x5501))+((r11*x5507)));
evalcond[4]=((((-1.0)*x5503*x5506))+cj0+(((-1.0)*r12*x5505))+((r11*x5508)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5502*x5506))+(((-1.0)*r02*x5505))+((r01*x5508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5509=cj1*cj1;
IkReal x5510=(cj2*sj1);
IkReal x5511=(cj1*sj1);
IkReal x5512=(cj5*r01);
IkReal x5513=(cj1*sj2);
IkReal x5514=((20000.0)*py);
IkReal x5515=(r00*sj5);
IkReal x5516=((1707.0)*cj5*r11);
IkReal x5517=(sj2*x5509);
IkReal x5518=((1707.0)*r10*sj5);
CheckValue<IkReal> x5519=IKPowWithIntegerCheck(((((4265.0)*cj2*sj2))+(((-8530.0)*cj2*x5517))+(((-8530.0)*cj1*cj2*x5510))+(((4265.0)*x5511))+(((-4873.0)*x5517))+(((-4873.0)*cj1*x5510))),-1);
if(!x5519.valid){
continue;
}
CheckValue<IkReal> x5520=IKPowWithIntegerCheck(((((-1.0)*x5510))+(((-1.0)*x5513))),-1);
if(!x5520.valid){
continue;
}
if( IKabs(((x5519.value)*(((((2247.0)*x5515))+(((2247.0)*x5512))+(((-1.0)*x5510*x5518))+(((-1.0)*x5510*x5516))+(((-1.0)*x5510*x5514))+(((-1.0)*x5513*x5518))+(((-1.0)*x5513*x5516))+(((-1.0)*x5513*x5514)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5520.value)*(((((-1.0)*x5512))+(((-1.0)*x5515)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5519.value)*(((((2247.0)*x5515))+(((2247.0)*x5512))+(((-1.0)*x5510*x5518))+(((-1.0)*x5510*x5516))+(((-1.0)*x5510*x5514))+(((-1.0)*x5513*x5518))+(((-1.0)*x5513*x5516))+(((-1.0)*x5513*x5514))))))+IKsqr(((x5520.value)*(((((-1.0)*x5512))+(((-1.0)*x5515))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5519.value)*(((((2247.0)*x5515))+(((2247.0)*x5512))+(((-1.0)*x5510*x5518))+(((-1.0)*x5510*x5516))+(((-1.0)*x5510*x5514))+(((-1.0)*x5513*x5518))+(((-1.0)*x5513*x5516))+(((-1.0)*x5513*x5514))))), ((x5520.value)*(((((-1.0)*x5512))+(((-1.0)*x5515))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5521=IKcos(j0);
IkReal x5522=IKsin(j0);
IkReal x5523=((0.21325)*cj2);
IkReal x5524=(cj5*r01);
IkReal x5525=((1.0)*sj2);
IkReal x5526=(r00*sj5);
IkReal x5527=(cj5*r11);
IkReal x5528=(r10*sj5);
IkReal x5529=(cj1*x5522);
IkReal x5530=(cj1*x5521);
IkReal x5531=((0.21325)*sj1*sj2);
IkReal x5532=((1.0)*cj2*sj1);
evalcond[0]=(x5524+x5526+(((-1.0)*x5521*x5532))+(((-1.0)*x5525*x5530)));
evalcond[1]=(x5527+x5528+(((-1.0)*x5522*x5532))+(((-1.0)*x5525*x5529)));
evalcond[2]=((((0.24365)*x5530))+(((-1.0)*px))+(((-1.0)*x5521*x5531))+(((-0.11235)*x5522))+(((-0.08535)*x5526))+(((-0.08535)*x5524))+((x5523*x5530)));
evalcond[3]=(((x5523*x5529))+(((0.24365)*x5529))+(((0.11235)*x5521))+(((-1.0)*py))+(((-1.0)*x5522*x5531))+(((-0.08535)*x5527))+(((-0.08535)*x5528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5533=((1.0)*cj5);
IkReal x5534=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5533)));
j4eval[0]=x5534;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5533)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5534);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5535=((1.0)*cj5);
IkReal x5536=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5535)));
j4eval[0]=x5536;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5535))))));
j4eval[2]=IKsign(x5536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5537=((1.0)*sj0);
IkReal x5538=((1.0)*cj0);
IkReal x5539=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5539;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x5538))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5537)))))+(IKabs(((((-1.0)*r02*x5538))+(((-1.0)*r12*x5537))))));
j4eval[2]=IKsign(x5539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5540=((-1.0)*r20);
IkReal x5542 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5542)==0){
continue;
}
IkReal x5541=pow(x5542,-0.5);
CheckValue<IkReal> x5543 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5540),IKFAST_ATAN2_MAGTHRESH);
if(!x5543.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5543.value));
IkReal gconst115=(r21*x5541);
IkReal gconst116=(x5540*x5541);
CheckValue<IkReal> x5544 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5544.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5544.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5545=((-1.0)*r20);
IkReal x5546=x5541;
CheckValue<IkReal> x5548 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5545),IKFAST_ATAN2_MAGTHRESH);
if(!x5548.valid){
continue;
}
IkReal x5547=((-1.0)*(x5548.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5547;
IkReal gconst114=x5547;
IkReal gconst115=(r21*x5546);
IkReal gconst116=(x5545*x5546);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5549=((-1.0)*r20);
IkReal x5550=x5541;
CheckValue<IkReal> x5552 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5549),IKFAST_ATAN2_MAGTHRESH);
if(!x5552.valid){
continue;
}
IkReal x5551=((-1.0)*(x5552.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5551;
IkReal gconst114=x5551;
IkReal gconst115=(r21*x5550);
IkReal gconst116=(x5549*x5550);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5553=((-1.0)*r20);
IkReal x5554=x5541;
CheckValue<IkReal> x5556 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5553),IKFAST_ATAN2_MAGTHRESH);
if(!x5556.valid){
continue;
}
IkReal x5555=((-1.0)*(x5556.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5555;
IkReal gconst114=x5555;
IkReal gconst115=(r21*x5554);
IkReal gconst116=(x5553*x5554);
IkReal x5557=((1.0)*(r22*r22));
CheckValue<IkReal> x5561=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5557))),-1);
if(!x5561.valid){
continue;
}
IkReal x5558=x5561.value;
IkReal x5559=((1.0)*x5558);
IkReal x5560=((((-1.0)*x5559*(r20*r20*r20*r20)))+(((-2.0)*x5558*(r20*r20)*(r21*r21)))+(((-1.0)*x5559*(r21*r21*r21*r21)))+(((-1.0)*x5557)));
j4eval[0]=x5560;
j4eval[1]=IKsign(x5560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5562=(cj2*sj1);
IkReal x5563=(gconst115*r21);
IkReal x5564=(cj1*sj2);
IkReal x5565=((1.0)*gconst116*r20);
CheckValue<IkReal> x5566=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5563*x5563)))+(((-1.0)*gconst116*r20*x5565))+(((2.0)*gconst116*r20*x5563))+(((-1.0)*(r22*r22))))),-1);
if(!x5566.valid){
continue;
}
CheckValue<IkReal> x5567 = IKatan2WithCheck(IkReal((((r22*x5564))+((r22*x5562)))),IkReal(((((-1.0)*x5564*x5565))+((x5562*x5563))+((x5563*x5564))+(((-1.0)*x5562*x5565)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5566.value)))+(x5567.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5568=IKsin(j4);
IkReal x5569=IKcos(j4);
IkReal x5570=(sj1*sj2);
IkReal x5571=((1.0)*x5569);
IkReal x5572=((1.0)*cj1*cj2);
IkReal x5573=(gconst115*x5568);
IkReal x5574=(gconst115*x5569);
IkReal x5575=((1.0)*gconst116*x5568);
evalcond[0]=(((r21*x5573))+(((-1.0)*r20*x5575))+(((-1.0)*r22*x5571)));
evalcond[1]=(cj0+(((-1.0)*r10*x5575))+(((-1.0)*r12*x5571))+((r11*x5573)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5571))+(((-1.0)*r00*x5575))+((r01*x5573)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5568))+((r21*x5574))+(((-1.0)*gconst116*r20*x5571)));
evalcond[4]=(((cj0*x5570))+((r02*x5568))+(((-1.0)*gconst116*r00*x5571))+(((-1.0)*cj0*x5572))+((r01*x5574)));
evalcond[5]=((((-1.0)*sj0*x5572))+((r11*x5574))+((sj0*x5570))+(((-1.0)*gconst116*r10*x5571))+((r12*x5568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5576=((1.0)*gconst116);
CheckValue<IkReal> x5577 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5577.valid){
continue;
}
CheckValue<IkReal> x5578=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5576))+(((-1.0)*gconst115*r10)))),-1);
if(!x5578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5577.value)+(((1.5707963267949)*(x5578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5579=IKsin(j4);
IkReal x5580=IKcos(j4);
IkReal x5581=(sj1*sj2);
IkReal x5582=((1.0)*x5580);
IkReal x5583=((1.0)*cj1*cj2);
IkReal x5584=(gconst115*x5579);
IkReal x5585=(gconst115*x5580);
IkReal x5586=((1.0)*gconst116*x5579);
evalcond[0]=(((r21*x5584))+(((-1.0)*r20*x5586))+(((-1.0)*r22*x5582)));
evalcond[1]=((((-1.0)*r12*x5582))+cj0+((r11*x5584))+(((-1.0)*r10*x5586)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5582))+(((-1.0)*r00*x5586))+((r01*x5584)));
evalcond[3]=(((cj2*sj1))+((r21*x5585))+((cj1*sj2))+((r22*x5579))+(((-1.0)*gconst116*r20*x5582)));
evalcond[4]=(((r02*x5579))+(((-1.0)*cj0*x5583))+((cj0*x5581))+(((-1.0)*gconst116*r00*x5582))+((r01*x5585)));
evalcond[5]=(((r11*x5585))+((sj0*x5581))+(((-1.0)*gconst116*r10*x5582))+((r12*x5579))+(((-1.0)*sj0*x5583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5587=((1.0)*gconst116);
CheckValue<IkReal> x5588 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5588.valid){
continue;
}
CheckValue<IkReal> x5589=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5587)))),-1);
if(!x5589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5588.value)+(((1.5707963267949)*(x5589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5590=IKsin(j4);
IkReal x5591=IKcos(j4);
IkReal x5592=(sj1*sj2);
IkReal x5593=((1.0)*x5591);
IkReal x5594=((1.0)*cj1*cj2);
IkReal x5595=(gconst115*x5590);
IkReal x5596=(gconst115*x5591);
IkReal x5597=((1.0)*gconst116*x5590);
evalcond[0]=(((r21*x5595))+(((-1.0)*r20*x5597))+(((-1.0)*r22*x5593)));
evalcond[1]=((((-1.0)*r12*x5593))+cj0+((r11*x5595))+(((-1.0)*r10*x5597)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5593))+(((-1.0)*r00*x5597))+((r01*x5595)));
evalcond[3]=(((r21*x5596))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5593))+((r22*x5590)));
evalcond[4]=((((-1.0)*cj0*x5594))+((cj0*x5592))+((r02*x5590))+(((-1.0)*gconst116*r00*x5593))+((r01*x5596)));
evalcond[5]=(((sj0*x5592))+((r11*x5596))+((r12*x5590))+(((-1.0)*gconst116*r10*x5593))+(((-1.0)*sj0*x5594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5598=((-1.0)*r21);
IkReal x5600 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5600)==0){
continue;
}
IkReal x5599=pow(x5600,-0.5);
CheckValue<IkReal> x5601 = IKatan2WithCheck(IkReal(x5598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5601.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5601.value))));
IkReal gconst118=(x5598*x5599);
IkReal gconst119=((1.0)*r20*x5599);
CheckValue<IkReal> x5602 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5602.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5602.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5603=((-1.0)*r21);
CheckValue<IkReal> x5606 = IKatan2WithCheck(IkReal(x5603),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5606.valid){
continue;
}
IkReal x5604=((1.0)*(x5606.value));
IkReal x5605=x5599;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5604)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5604)));
IkReal gconst118=(x5603*x5605);
IkReal gconst119=((1.0)*r20*x5605);
IkReal x5607=r22*r22;
IkReal x5608=((1.0)*x5607);
CheckValue<IkReal> x5612=IKPowWithIntegerCheck(((-1.0)+x5607),-1);
if(!x5612.valid){
continue;
}
IkReal x5609=x5612.value;
if((((1.0)+(((-1.0)*x5608)))) < -0.00001)
continue;
IkReal x5610=IKsqrt(((1.0)+(((-1.0)*x5608))));
IkReal x5611=(cj0*x5609*x5610);
j4eval[0]=((IKabs((x5611+(((-1.0)*x5608*x5611)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5613=((-1.0)*r21);
CheckValue<IkReal> x5616 = IKatan2WithCheck(IkReal(x5613),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5616.valid){
continue;
}
IkReal x5614=((1.0)*(x5616.value));
IkReal x5615=x5599;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5614)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5614)));
IkReal gconst118=(x5613*x5615);
IkReal gconst119=((1.0)*r20*x5615);
IkReal x5617=r22*r22;
IkReal x5618=((1.0)*x5617);
CheckValue<IkReal> x5622=IKPowWithIntegerCheck(((-1.0)+x5617),-1);
if(!x5622.valid){
continue;
}
IkReal x5619=x5622.value;
if((((1.0)+(((-1.0)*x5618)))) < -0.00001)
continue;
IkReal x5620=IKsqrt(((1.0)+(((-1.0)*x5618))));
IkReal x5621=(sj0*x5619*x5620);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5621+(((-1.0)*x5618*x5621))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5623=((-1.0)*r21);
CheckValue<IkReal> x5626 = IKatan2WithCheck(IkReal(x5623),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5626.valid){
continue;
}
IkReal x5624=((1.0)*(x5626.value));
IkReal x5625=x5599;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5624)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5624)));
IkReal gconst118=(x5623*x5625);
IkReal gconst119=((1.0)*r20*x5625);
IkReal x5627=r22*r22;
IkReal x5628=(r12*sj0);
IkReal x5629=(cj0*r02);
CheckValue<IkReal> x5633=IKPowWithIntegerCheck(((-1.0)+x5627),-1);
if(!x5633.valid){
continue;
}
IkReal x5630=x5633.value;
if((((1.0)+(((-1.0)*x5627)))) < -0.00001)
continue;
IkReal x5631=IKsqrt(((1.0)+(((-1.0)*x5627))));
IkReal x5632=(r22*x5630*x5631);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5629))+(((-1.0)*x5628)))))+(IKabs((((x5629*x5632))+((x5628*x5632))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5634=((1.0)*sj0);
IkReal x5635=((1.0)*gconst118);
CheckValue<IkReal> x5636 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5634))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x5634))+(((-1.0)*cj0*r01*x5635))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5636.valid){
continue;
}
CheckValue<IkReal> x5637=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5635)))),-1);
if(!x5637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5636.value)+(((1.5707963267949)*(x5637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5638=IKsin(j4);
IkReal x5639=IKcos(j4);
IkReal x5640=(gconst118*r01);
IkReal x5641=(sj1*sj2);
IkReal x5642=(gconst119*r20);
IkReal x5643=(gconst119*r10);
IkReal x5644=(gconst119*r00);
IkReal x5645=(gconst118*r21);
IkReal x5646=(gconst118*r11);
IkReal x5647=((1.0)*x5639);
IkReal x5648=((1.0)*cj1*cj2);
IkReal x5649=((1.0)*x5638);
evalcond[0]=((((-1.0)*r22*x5647))+(((-1.0)*x5642*x5649))+((x5638*x5645)));
evalcond[1]=(cj0+(((-1.0)*r12*x5647))+((x5638*x5646))+(((-1.0)*x5643*x5649)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5644*x5649))+(((-1.0)*r02*x5647))+((x5638*x5640)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5642*x5647))+((x5639*x5645))+((cj1*sj2))+((r22*x5638)));
evalcond[4]=(((cj0*x5641))+((x5639*x5640))+(((-1.0)*x5644*x5647))+(((-1.0)*cj0*x5648))+((r02*x5638)));
evalcond[5]=(((r12*x5638))+((x5639*x5646))+(((-1.0)*sj0*x5648))+((sj0*x5641))+(((-1.0)*x5643*x5647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5650=((1.0)*gconst119);
CheckValue<IkReal> x5651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5650))+(((-1.0)*gconst118*r10)))),-1);
if(!x5651.valid){
continue;
}
CheckValue<IkReal> x5652 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x5650)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5651.value)))+(x5652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5653=IKsin(j4);
IkReal x5654=IKcos(j4);
IkReal x5655=(gconst118*r01);
IkReal x5656=(sj1*sj2);
IkReal x5657=(gconst119*r20);
IkReal x5658=(gconst119*r10);
IkReal x5659=(gconst119*r00);
IkReal x5660=(gconst118*r21);
IkReal x5661=(gconst118*r11);
IkReal x5662=((1.0)*x5654);
IkReal x5663=((1.0)*cj1*cj2);
IkReal x5664=((1.0)*x5653);
evalcond[0]=((((-1.0)*r22*x5662))+(((-1.0)*x5657*x5664))+((x5653*x5660)));
evalcond[1]=(cj0+(((-1.0)*r12*x5662))+((x5653*x5661))+(((-1.0)*x5658*x5664)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5662))+(((-1.0)*x5659*x5664))+((x5653*x5655)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5657*x5662))+((cj1*sj2))+((r22*x5653))+((x5654*x5660)));
evalcond[4]=(((cj0*x5656))+((x5654*x5655))+(((-1.0)*x5659*x5662))+(((-1.0)*cj0*x5663))+((r02*x5653)));
evalcond[5]=(((sj0*x5656))+((r12*x5653))+(((-1.0)*sj0*x5663))+((x5654*x5661))+(((-1.0)*x5658*x5662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5665=((1.0)*gconst119);
CheckValue<IkReal> x5666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5665))+(((-1.0)*gconst118*r00)))),-1);
if(!x5666.valid){
continue;
}
CheckValue<IkReal> x5667 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5666.value)))+(x5667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5668=IKsin(j4);
IkReal x5669=IKcos(j4);
IkReal x5670=(gconst118*r01);
IkReal x5671=(sj1*sj2);
IkReal x5672=(gconst119*r20);
IkReal x5673=(gconst119*r10);
IkReal x5674=(gconst119*r00);
IkReal x5675=(gconst118*r21);
IkReal x5676=(gconst118*r11);
IkReal x5677=((1.0)*x5669);
IkReal x5678=((1.0)*cj1*cj2);
IkReal x5679=((1.0)*x5668);
evalcond[0]=((((-1.0)*x5672*x5679))+((x5668*x5675))+(((-1.0)*r22*x5677)));
evalcond[1]=(((x5668*x5676))+cj0+(((-1.0)*r12*x5677))+(((-1.0)*x5673*x5679)));
evalcond[2]=(((x5668*x5670))+(((-1.0)*sj0))+(((-1.0)*x5674*x5679))+(((-1.0)*r02*x5677)));
evalcond[3]=((((-1.0)*x5672*x5677))+((cj2*sj1))+((r22*x5668))+((cj1*sj2))+((x5669*x5675)));
evalcond[4]=(((cj0*x5671))+((r02*x5668))+(((-1.0)*cj0*x5678))+((x5669*x5670))+(((-1.0)*x5674*x5677)));
evalcond[5]=(((sj0*x5671))+((x5669*x5676))+((r12*x5668))+(((-1.0)*x5673*x5677))+(((-1.0)*sj0*x5678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5680=((-1.0)*r10);
IkReal x5682 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5682)==0){
continue;
}
IkReal x5681=pow(x5682,-0.5);
CheckValue<IkReal> x5683 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5680),IKFAST_ATAN2_MAGTHRESH);
if(!x5683.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5683.value));
IkReal gconst121=(r11*x5681);
IkReal gconst122=(x5680*x5681);
CheckValue<IkReal> x5684 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5684.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5684.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5685=((-1.0)*r10);
IkReal x5686=x5681;
CheckValue<IkReal> x5688 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5685),IKFAST_ATAN2_MAGTHRESH);
if(!x5688.valid){
continue;
}
IkReal x5687=((-1.0)*(x5688.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5687;
IkReal gconst120=x5687;
IkReal gconst121=(r11*x5686);
IkReal gconst122=(x5685*x5686);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5689=((1.0)*sj0);
IkReal x5690=((1.0)*gconst121);
CheckValue<IkReal> x5691=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5690)))),-1);
if(!x5691.valid){
continue;
}
CheckValue<IkReal> x5692 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5689)))),IkReal(((((-1.0)*cj0*r01*x5690))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5689))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5691.value)))+(x5692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5693=IKsin(j4);
IkReal x5694=IKcos(j4);
IkReal x5695=(gconst121*r11);
IkReal x5696=(sj1*sj2);
IkReal x5697=(gconst122*r00);
IkReal x5698=(gconst122*r10);
IkReal x5699=(gconst122*r20);
IkReal x5700=((1.0)*x5694);
IkReal x5701=((1.0)*cj1*cj2);
IkReal x5702=((1.0)*x5693);
IkReal x5703=(gconst121*x5693);
IkReal x5704=(gconst121*x5694);
evalcond[0]=((((-1.0)*r22*x5700))+(((-1.0)*x5699*x5702))+((r21*x5703)));
evalcond[1]=((((-1.0)*r12*x5700))+((x5693*x5695))+cj0+(((-1.0)*x5698*x5702)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5697*x5702))+((r01*x5703))+(((-1.0)*r02*x5700)));
evalcond[3]=(((cj2*sj1))+((r22*x5693))+((cj1*sj2))+(((-1.0)*x5699*x5700))+((r21*x5704)));
evalcond[4]=((((-1.0)*x5697*x5700))+((r02*x5693))+((r01*x5704))+(((-1.0)*cj0*x5701))+((cj0*x5696)));
evalcond[5]=(((x5694*x5695))+(((-1.0)*x5698*x5700))+((sj0*x5696))+(((-1.0)*sj0*x5701))+((r12*x5693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5705=((1.0)*gconst122);
CheckValue<IkReal> x5706=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5705)))),-1);
if(!x5706.valid){
continue;
}
CheckValue<IkReal> x5707 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5705))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5706.value)))+(x5707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5708=IKsin(j4);
IkReal x5709=IKcos(j4);
IkReal x5710=(gconst121*r11);
IkReal x5711=(sj1*sj2);
IkReal x5712=(gconst122*r00);
IkReal x5713=(gconst122*r10);
IkReal x5714=(gconst122*r20);
IkReal x5715=((1.0)*x5709);
IkReal x5716=((1.0)*cj1*cj2);
IkReal x5717=((1.0)*x5708);
IkReal x5718=(gconst121*x5708);
IkReal x5719=(gconst121*x5709);
evalcond[0]=((((-1.0)*r22*x5715))+(((-1.0)*x5714*x5717))+((r21*x5718)));
evalcond[1]=(cj0+(((-1.0)*x5713*x5717))+(((-1.0)*r12*x5715))+((x5708*x5710)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5712*x5717))+((r01*x5718))+(((-1.0)*r02*x5715)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5714*x5715))+((cj1*sj2))+((r22*x5708))+((r21*x5719)));
evalcond[4]=((((-1.0)*cj0*x5716))+((r02*x5708))+((cj0*x5711))+(((-1.0)*x5712*x5715))+((r01*x5719)));
evalcond[5]=((((-1.0)*x5713*x5715))+((r12*x5708))+((sj0*x5711))+(((-1.0)*sj0*x5716))+((x5709*x5710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5720=((-1.0)*r11);
IkReal x5722 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5722)==0){
continue;
}
IkReal x5721=pow(x5722,-0.5);
CheckValue<IkReal> x5723 = IKatan2WithCheck(IkReal(x5720),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5723.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5723.value))));
IkReal gconst124=(x5720*x5721);
IkReal gconst125=((1.0)*r10*x5721);
CheckValue<IkReal> x5724 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5724.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5724.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5725=((-1.0)*r11);
CheckValue<IkReal> x5728 = IKatan2WithCheck(IkReal(x5725),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5728.valid){
continue;
}
IkReal x5726=((1.0)*(x5728.value));
IkReal x5727=x5721;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5726)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5726)));
IkReal gconst124=(x5725*x5727);
IkReal gconst125=((1.0)*r10*x5727);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5729=((-1.0)*r11);
CheckValue<IkReal> x5732 = IKatan2WithCheck(IkReal(x5729),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5732.valid){
continue;
}
IkReal x5730=((1.0)*(x5732.value));
IkReal x5731=x5721;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5730)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5730)));
IkReal gconst124=(x5729*x5731);
IkReal gconst125=((1.0)*r10*x5731);
IkReal x5733=r12*r12;
IkReal x5734=((1.0)*sj0);
IkReal x5735=(cj0*r02);
IkReal x5736=x5721;
j4eval[0]=((IKabs(((((-1.0)*x5734*x5736))+((sj0*x5733*x5736))+((r12*x5735*x5736)))))+(IKabs(((((-1.0)*r12*x5734))+(((-1.0)*x5735))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5737=((-1.0)*r11);
CheckValue<IkReal> x5740 = IKatan2WithCheck(IkReal(x5737),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5740.valid){
continue;
}
IkReal x5738=((1.0)*(x5740.value));
IkReal x5739=x5721;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5738)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5738)));
IkReal gconst124=(x5737*x5739);
IkReal gconst125=((1.0)*r10*x5739);
IkReal x5741=r12*r12;
IkReal x5742=((1.0)+(((-1.0)*x5741)));
IkReal x5743=(cj2*r22*sj1);
IkReal x5744=(cj1*r22*sj2);
CheckValue<IkReal> x5751=IKPowWithIntegerCheck(x5742,-1);
if(!x5751.valid){
continue;
}
IkReal x5745=x5751.value;
CheckValue<IkReal> x5752=IKPowWithIntegerCheck(((-1.0)+x5741),-1);
if(!x5752.valid){
continue;
}
IkReal x5746=x5752.value;
IkReal x5747=((1.0)*x5745);
if((x5742) < -0.00001)
continue;
IkReal x5748=IKsqrt(x5742);
IkReal x5749=((1.0)*r12*x5746*x5748);
IkReal x5750=((((-2.0)*r10*r11*r20*r21*x5745))+(((-1.0)*x5747*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5747*(r10*r10)*(r20*r20))));
j4eval[0]=x5750;
j4eval[1]=IKsign(x5750);
j4eval[2]=((IKabs((x5743+x5744)))+(IKabs(((((-1.0)*x5744*x5749))+(((-1.0)*x5743*x5749))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5753=(gconst124*r21);
IkReal x5754=(cj1*sj2);
IkReal x5755=(cj2*sj1);
IkReal x5756=(gconst125*r20);
CheckValue<IkReal> x5757=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5756*x5756)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5753*x5753)))+(((2.0)*x5753*x5756)))),-1);
if(!x5757.valid){
continue;
}
CheckValue<IkReal> x5758 = IKatan2WithCheck(IkReal((((r22*x5755))+((r22*x5754)))),IkReal(((((-1.0)*x5754*x5756))+(((-1.0)*x5755*x5756))+((x5753*x5755))+((x5753*x5754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5757.value)))+(x5758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5759=IKsin(j4);
IkReal x5760=IKcos(j4);
IkReal x5761=(sj1*sj2);
IkReal x5762=(gconst125*r20);
IkReal x5763=(gconst124*r01);
IkReal x5764=(gconst125*r00);
IkReal x5765=(gconst125*r10);
IkReal x5766=((1.0)*x5760);
IkReal x5767=((1.0)*cj1*cj2);
IkReal x5768=((1.0)*x5759);
IkReal x5769=(gconst124*x5759);
IkReal x5770=(gconst124*x5760);
evalcond[0]=(((r21*x5769))+(((-1.0)*x5762*x5768))+(((-1.0)*r22*x5766)));
evalcond[1]=(cj0+(((-1.0)*r12*x5766))+((r11*x5769))+(((-1.0)*x5765*x5768)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5766))+(((-1.0)*x5764*x5768))+((x5759*x5763)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5770))+(((-1.0)*x5762*x5766))+((r22*x5759)));
evalcond[4]=((((-1.0)*cj0*x5767))+((cj0*x5761))+((x5760*x5763))+((r02*x5759))+(((-1.0)*x5764*x5766)));
evalcond[5]=((((-1.0)*sj0*x5767))+((r11*x5770))+(((-1.0)*x5765*x5766))+((r12*x5759))+((sj0*x5761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5771=((1.0)*sj0);
IkReal x5772=((1.0)*cj0);
CheckValue<IkReal> x5773 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5771))+(((-1.0)*r02*x5772)))),IkReal(((((-1.0)*gconst124*r11*x5771))+((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5772))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5773.valid){
continue;
}
CheckValue<IkReal> x5774=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5773.value)+(((1.5707963267949)*(x5774.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5775=IKsin(j4);
IkReal x5776=IKcos(j4);
IkReal x5777=(sj1*sj2);
IkReal x5778=(gconst125*r20);
IkReal x5779=(gconst124*r01);
IkReal x5780=(gconst125*r00);
IkReal x5781=(gconst125*r10);
IkReal x5782=((1.0)*x5776);
IkReal x5783=((1.0)*cj1*cj2);
IkReal x5784=((1.0)*x5775);
IkReal x5785=(gconst124*x5775);
IkReal x5786=(gconst124*x5776);
evalcond[0]=(((r21*x5785))+(((-1.0)*x5778*x5784))+(((-1.0)*r22*x5782)));
evalcond[1]=(cj0+((r11*x5785))+(((-1.0)*r12*x5782))+(((-1.0)*x5781*x5784)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5780*x5784))+((x5775*x5779))+(((-1.0)*r02*x5782)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5786))+((r22*x5775))+(((-1.0)*x5778*x5782)));
evalcond[4]=(((x5776*x5779))+((cj0*x5777))+(((-1.0)*x5780*x5782))+((r02*x5775))+(((-1.0)*cj0*x5783)));
evalcond[5]=(((r11*x5786))+((r12*x5775))+(((-1.0)*x5781*x5782))+(((-1.0)*sj0*x5783))+((sj0*x5777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5787=((1.0)*gconst125);
CheckValue<IkReal> x5788 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5787))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5788.valid){
continue;
}
CheckValue<IkReal> x5789=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5787)))),-1);
if(!x5789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5788.value)+(((1.5707963267949)*(x5789.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5790=IKsin(j4);
IkReal x5791=IKcos(j4);
IkReal x5792=(sj1*sj2);
IkReal x5793=(gconst125*r20);
IkReal x5794=(gconst124*r01);
IkReal x5795=(gconst125*r00);
IkReal x5796=(gconst125*r10);
IkReal x5797=((1.0)*x5791);
IkReal x5798=((1.0)*cj1*cj2);
IkReal x5799=((1.0)*x5790);
IkReal x5800=(gconst124*x5790);
IkReal x5801=(gconst124*x5791);
evalcond[0]=((((-1.0)*x5793*x5799))+((r21*x5800))+(((-1.0)*r22*x5797)));
evalcond[1]=(cj0+((r11*x5800))+(((-1.0)*x5796*x5799))+(((-1.0)*r12*x5797)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5795*x5799))+(((-1.0)*r02*x5797))+((x5790*x5794)));
evalcond[3]=((((-1.0)*x5793*x5797))+((cj2*sj1))+((cj1*sj2))+((r21*x5801))+((r22*x5790)));
evalcond[4]=(((x5791*x5794))+(((-1.0)*x5795*x5797))+(((-1.0)*cj0*x5798))+((cj0*x5792))+((r02*x5790)));
evalcond[5]=(((r12*x5790))+((r11*x5801))+((sj0*x5792))+(((-1.0)*x5796*x5797))+(((-1.0)*sj0*x5798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5802=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5802;
j4eval[1]=IKsign(x5802);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5803=((1.0)*cj5);
IkReal x5804=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5803)));
j4eval[0]=x5804;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5803))+((r21*sj5))))));
j4eval[2]=IKsign(x5804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5805=cj5*cj5;
IkReal x5806=r11*r11;
IkReal x5807=(cj5*r10);
IkReal x5808=(r11*sj5);
IkReal x5809=(((x5805*x5806))+(((-1.0)*x5805*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x5807*x5808))+(((-1.0)*x5806)));
j4eval[0]=x5809;
j4eval[1]=IKsign(x5809);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5807))+x5808))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5810=cj5*cj5;
IkReal x5811=r11*r11;
IkReal x5812=(cj5*r10);
IkReal x5813=(r11*sj5);
CheckValue<IkReal> x5814 = IKatan2WithCheck(IkReal(((((-1.0)*x5812))+x5813)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5814.valid){
continue;
}
CheckValue<IkReal> x5815=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5811))+((x5810*x5811))+(((-1.0)*(r12*r12)))+(((-1.0)*x5810*(r10*r10)))+(((2.0)*x5812*x5813)))),-1);
if(!x5815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5814.value)+(((1.5707963267949)*(x5815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5816=IKcos(j4);
IkReal x5817=IKsin(j4);
IkReal x5818=(cj5*r00);
IkReal x5819=(cj5*r10);
IkReal x5820=(r21*sj5);
IkReal x5821=(cj5*r20);
IkReal x5822=((1.0)*x5816);
IkReal x5823=((1.0)*x5817);
IkReal x5824=(sj5*x5817);
IkReal x5825=(sj5*x5816);
evalcond[0]=(((r11*x5825))+((r12*x5817))+(((-1.0)*x5819*x5822)));
evalcond[1]=((((-1.0)*r22*x5822))+(((-1.0)*x5821*x5823))+((x5817*x5820)));
evalcond[2]=((((-1.0)*r02*x5822))+(((-1.0)*x5818*x5823))+((r01*x5824)));
evalcond[3]=((1.0)+((r11*x5824))+(((-1.0)*r12*x5822))+(((-1.0)*x5819*x5823)));
evalcond[4]=(((cj2*sj1))+((x5816*x5820))+((r22*x5817))+(((-1.0)*x5821*x5822))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x5818*x5822))+((r02*x5817))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5826=((1.0)*cj5);
CheckValue<IkReal> x5827 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5826))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5827.valid){
continue;
}
CheckValue<IkReal> x5828=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5826))+(((-1.0)*r00*sj5)))),-1);
if(!x5828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5827.value)+(((1.5707963267949)*(x5828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5829=IKcos(j4);
IkReal x5830=IKsin(j4);
IkReal x5831=(cj5*r00);
IkReal x5832=(cj5*r10);
IkReal x5833=(r21*sj5);
IkReal x5834=(cj5*r20);
IkReal x5835=((1.0)*x5829);
IkReal x5836=((1.0)*x5830);
IkReal x5837=(sj5*x5830);
IkReal x5838=(sj5*x5829);
evalcond[0]=((((-1.0)*x5832*x5835))+((r12*x5830))+((r11*x5838)));
evalcond[1]=((((-1.0)*r22*x5835))+((x5830*x5833))+(((-1.0)*x5834*x5836)));
evalcond[2]=((((-1.0)*r02*x5835))+(((-1.0)*x5831*x5836))+((r01*x5837)));
evalcond[3]=((1.0)+(((-1.0)*x5832*x5836))+((r11*x5837))+(((-1.0)*r12*x5835)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5829*x5833))+((r22*x5830))+(((-1.0)*x5834*x5835)));
evalcond[5]=(((r02*x5830))+(((-1.0)*x5831*x5835))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5839=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5839.valid){
continue;
}
CheckValue<IkReal> x5840 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5839.value)))+(x5840.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5841=IKcos(j4);
IkReal x5842=IKsin(j4);
IkReal x5843=(cj5*r00);
IkReal x5844=(cj5*r10);
IkReal x5845=(r21*sj5);
IkReal x5846=(cj5*r20);
IkReal x5847=((1.0)*x5841);
IkReal x5848=((1.0)*x5842);
IkReal x5849=(sj5*x5842);
IkReal x5850=(sj5*x5841);
evalcond[0]=(((r11*x5850))+((r12*x5842))+(((-1.0)*x5844*x5847)));
evalcond[1]=(((x5842*x5845))+(((-1.0)*x5846*x5848))+(((-1.0)*r22*x5847)));
evalcond[2]=((((-1.0)*r02*x5847))+((r01*x5849))+(((-1.0)*x5843*x5848)));
evalcond[3]=((1.0)+((r11*x5849))+(((-1.0)*x5844*x5848))+(((-1.0)*r12*x5847)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5841*x5845))+(((-1.0)*x5846*x5847))+((r22*x5842)));
evalcond[5]=(((r01*x5850))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5843*x5847))+((r02*x5842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5851=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5851;
j4eval[1]=IKsign(x5851);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5852=((1.0)*cj5);
IkReal x5853=((((-1.0)*r21*x5852))+(((-1.0)*r20*sj5)));
j4eval[0]=x5853;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x5852)))))+(IKabs(r02)));
j4eval[2]=IKsign(x5853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5854=cj5*cj5;
IkReal x5855=r11*r11;
IkReal x5856=(r11*sj5);
IkReal x5857=(cj5*r10);
IkReal x5858=((r12*r12)+((x5854*(r10*r10)))+(((-1.0)*x5854*x5855))+(((-2.0)*x5856*x5857))+x5855);
j4eval[0]=x5858;
j4eval[1]=IKsign(x5858);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5857))+x5856))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5859=cj5*cj5;
IkReal x5860=r11*r11;
IkReal x5861=(cj5*r10);
IkReal x5862=(r11*sj5);
CheckValue<IkReal> x5863=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5859*x5860))+(((-2.0)*x5861*x5862))+((x5859*(r10*r10)))+x5860)),-1);
if(!x5863.valid){
continue;
}
CheckValue<IkReal> x5864 = IKatan2WithCheck(IkReal(((((-1.0)*x5861))+x5862)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5863.value)))+(x5864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5865=IKcos(j4);
IkReal x5866=IKsin(j4);
IkReal x5867=(cj5*r00);
IkReal x5868=(cj5*r10);
IkReal x5869=(r21*sj5);
IkReal x5870=(cj5*r20);
IkReal x5871=((1.0)*x5865);
IkReal x5872=((1.0)*x5866);
IkReal x5873=(sj5*x5866);
IkReal x5874=(sj5*x5865);
evalcond[0]=(((r11*x5874))+((r12*x5866))+(((-1.0)*x5868*x5871)));
evalcond[1]=((((-1.0)*r22*x5871))+((x5866*x5869))+(((-1.0)*x5870*x5872)));
evalcond[2]=((((-1.0)*r02*x5871))+((r01*x5873))+(((-1.0)*x5867*x5872)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5871))+((r11*x5873))+(((-1.0)*x5868*x5872)));
evalcond[4]=(((cj2*sj1))+((r22*x5866))+((cj1*sj2))+(((-1.0)*x5870*x5871))+((x5865*x5869)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5866))+((cj1*cj2))+((r01*x5874))+(((-1.0)*x5867*x5871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5875=((1.0)*cj5);
CheckValue<IkReal> x5876 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5875)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5876.valid){
continue;
}
CheckValue<IkReal> x5877=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5875))+(((-1.0)*r20*sj5)))),-1);
if(!x5877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5876.value)+(((1.5707963267949)*(x5877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5878=IKcos(j4);
IkReal x5879=IKsin(j4);
IkReal x5880=(cj5*r00);
IkReal x5881=(cj5*r10);
IkReal x5882=(r21*sj5);
IkReal x5883=(cj5*r20);
IkReal x5884=((1.0)*x5878);
IkReal x5885=((1.0)*x5879);
IkReal x5886=(sj5*x5879);
IkReal x5887=(sj5*x5878);
evalcond[0]=(((r11*x5887))+((r12*x5879))+(((-1.0)*x5881*x5884)));
evalcond[1]=((((-1.0)*x5883*x5885))+((x5879*x5882))+(((-1.0)*r22*x5884)));
evalcond[2]=(((r01*x5886))+(((-1.0)*x5880*x5885))+(((-1.0)*r02*x5884)));
evalcond[3]=((-1.0)+((r11*x5886))+(((-1.0)*r12*x5884))+(((-1.0)*x5881*x5885)));
evalcond[4]=((((-1.0)*x5883*x5884))+((cj2*sj1))+((cj1*sj2))+((r22*x5879))+((x5878*x5882)));
evalcond[5]=(((r01*x5887))+(((-1.0)*sj1*sj2))+(((-1.0)*x5880*x5884))+((r02*x5879))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5888 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5888.valid){
continue;
}
CheckValue<IkReal> x5889=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5888.value)+(((1.5707963267949)*(x5889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5890=IKcos(j4);
IkReal x5891=IKsin(j4);
IkReal x5892=(cj5*r00);
IkReal x5893=(cj5*r10);
IkReal x5894=(r21*sj5);
IkReal x5895=(cj5*r20);
IkReal x5896=((1.0)*x5890);
IkReal x5897=((1.0)*x5891);
IkReal x5898=(sj5*x5891);
IkReal x5899=(sj5*x5890);
evalcond[0]=((((-1.0)*x5893*x5896))+((r12*x5891))+((r11*x5899)));
evalcond[1]=((((-1.0)*r22*x5896))+(((-1.0)*x5895*x5897))+((x5891*x5894)));
evalcond[2]=((((-1.0)*x5892*x5897))+(((-1.0)*r02*x5896))+((r01*x5898)));
evalcond[3]=((-1.0)+(((-1.0)*x5893*x5897))+(((-1.0)*r12*x5896))+((r11*x5898)));
evalcond[4]=(((r22*x5891))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5895*x5896))+((x5890*x5894)));
evalcond[5]=((((-1.0)*x5892*x5896))+(((-1.0)*sj1*sj2))+((r02*x5891))+((r01*x5899))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5900=((-1.0)*r00);
IkReal x5902 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5902)==0){
continue;
}
IkReal x5901=pow(x5902,-0.5);
CheckValue<IkReal> x5903 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5900),IKFAST_ATAN2_MAGTHRESH);
if(!x5903.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5903.value));
IkReal gconst127=(r01*x5901);
IkReal gconst128=(x5900*x5901);
CheckValue<IkReal> x5904 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5904.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5904.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5905=((-1.0)*r00);
IkReal x5906=x5901;
CheckValue<IkReal> x5908 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5905),IKFAST_ATAN2_MAGTHRESH);
if(!x5908.valid){
continue;
}
IkReal x5907=((-1.0)*(x5908.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5907;
IkReal gconst126=x5907;
IkReal gconst127=(r01*x5906);
IkReal gconst128=(x5905*x5906);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5909=((1.0)*sj0);
IkReal x5910=((1.0)*gconst127);
CheckValue<IkReal> x5911 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5909))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5910))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5911.valid){
continue;
}
CheckValue<IkReal> x5912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5910))+(((-1.0)*gconst128*r21)))),-1);
if(!x5912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5911.value)+(((1.5707963267949)*(x5912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5913=IKsin(j4);
IkReal x5914=IKcos(j4);
IkReal x5915=(gconst127*r01);
IkReal x5916=(sj1*sj2);
IkReal x5917=(gconst128*r10);
IkReal x5918=(gconst128*r00);
IkReal x5919=(gconst128*r20);
IkReal x5920=((1.0)*x5914);
IkReal x5921=((1.0)*cj1*cj2);
IkReal x5922=((1.0)*x5913);
IkReal x5923=(gconst127*x5914);
IkReal x5924=(gconst127*x5913);
evalcond[0]=((((-1.0)*r22*x5920))+((r21*x5924))+(((-1.0)*x5919*x5922)));
evalcond[1]=(cj0+((r11*x5924))+(((-1.0)*x5917*x5922))+(((-1.0)*r12*x5920)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5918*x5922))+(((-1.0)*r02*x5920))+((x5913*x5915)));
evalcond[3]=(((cj2*sj1))+((r22*x5913))+((cj1*sj2))+((r21*x5923))+(((-1.0)*x5919*x5920)));
evalcond[4]=((((-1.0)*x5918*x5920))+((r02*x5913))+((x5914*x5915))+(((-1.0)*cj0*x5921))+((cj0*x5916)));
evalcond[5]=(((r12*x5913))+((sj0*x5916))+(((-1.0)*sj0*x5921))+((r11*x5923))+(((-1.0)*x5917*x5920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5925=((1.0)*gconst128);
CheckValue<IkReal> x5926 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5925))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5926.valid){
continue;
}
CheckValue<IkReal> x5927=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5925))+(((-1.0)*gconst127*r10)))),-1);
if(!x5927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5926.value)+(((1.5707963267949)*(x5927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5928=IKsin(j4);
IkReal x5929=IKcos(j4);
IkReal x5930=(gconst127*r01);
IkReal x5931=(sj1*sj2);
IkReal x5932=(gconst128*r10);
IkReal x5933=(gconst128*r00);
IkReal x5934=(gconst128*r20);
IkReal x5935=((1.0)*x5929);
IkReal x5936=((1.0)*cj1*cj2);
IkReal x5937=((1.0)*x5928);
IkReal x5938=(gconst127*x5929);
IkReal x5939=(gconst127*x5928);
evalcond[0]=((((-1.0)*x5934*x5937))+((r21*x5939))+(((-1.0)*r22*x5935)));
evalcond[1]=(cj0+((r11*x5939))+(((-1.0)*x5932*x5937))+(((-1.0)*r12*x5935)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5935))+(((-1.0)*x5933*x5937))+((x5928*x5930)));
evalcond[3]=((((-1.0)*x5934*x5935))+((cj2*sj1))+((cj1*sj2))+((r22*x5928))+((r21*x5938)));
evalcond[4]=(((x5929*x5930))+((cj0*x5931))+(((-1.0)*x5933*x5935))+(((-1.0)*cj0*x5936))+((r02*x5928)));
evalcond[5]=((((-1.0)*sj0*x5936))+((r11*x5938))+(((-1.0)*x5932*x5935))+((r12*x5928))+((sj0*x5931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5940=((-1.0)*r01);
IkReal x5942 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5942)==0){
continue;
}
IkReal x5941=pow(x5942,-0.5);
CheckValue<IkReal> x5943 = IKatan2WithCheck(IkReal(x5940),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5943.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5943.value))));
IkReal gconst130=(x5940*x5941);
IkReal gconst131=((1.0)*r00*x5941);
CheckValue<IkReal> x5944 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5944.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5944.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5945=((-1.0)*r01);
CheckValue<IkReal> x5948 = IKatan2WithCheck(IkReal(x5945),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5948.valid){
continue;
}
IkReal x5946=((1.0)*(x5948.value));
IkReal x5947=x5941;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5946)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5946)));
IkReal gconst130=(x5945*x5947);
IkReal gconst131=((1.0)*r00*x5947);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5949=((-1.0)*r01);
CheckValue<IkReal> x5952 = IKatan2WithCheck(IkReal(x5949),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5952.valid){
continue;
}
IkReal x5950=((1.0)*(x5952.value));
IkReal x5951=x5941;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5950)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5950)));
IkReal gconst130=(x5949*x5951);
IkReal gconst131=((1.0)*r00*x5951);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5953=((-1.0)*r01);
CheckValue<IkReal> x5956 = IKatan2WithCheck(IkReal(x5953),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5956.valid){
continue;
}
IkReal x5954=((1.0)*(x5956.value));
IkReal x5955=x5941;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5954)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5954)));
IkReal gconst130=(x5953*x5955);
IkReal gconst131=((1.0)*r00*x5955);
IkReal x5957=r02*r02;
IkReal x5958=(r12*sj0);
IkReal x5959=((1.0)*cj0);
IkReal x5960=x5941;
j4eval[0]=((IKabs(((((-1.0)*r02*x5959))+(((-1.0)*x5958)))))+(IKabs((((r02*x5958*x5960))+(((-1.0)*x5959*x5960))+((cj0*x5957*x5960))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5961=((1.0)*sj0);
IkReal x5962=((1.0)*gconst130);
CheckValue<IkReal> x5963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5962))+(((-1.0)*gconst131*r21)))),-1);
if(!x5963.valid){
continue;
}
CheckValue<IkReal> x5964 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5961)))),IkReal(((((-1.0)*gconst130*r11*x5961))+(((-1.0)*cj0*r01*x5962))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5963.value)))+(x5964.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5965=IKsin(j4);
IkReal x5966=IKcos(j4);
IkReal x5967=(gconst131*r10);
IkReal x5968=(sj1*sj2);
IkReal x5969=(gconst131*r20);
IkReal x5970=(gconst131*r00);
IkReal x5971=((1.0)*x5966);
IkReal x5972=((1.0)*cj1*cj2);
IkReal x5973=(gconst130*x5965);
IkReal x5974=((1.0)*x5965);
IkReal x5975=(gconst130*x5966);
evalcond[0]=((((-1.0)*r22*x5971))+((r21*x5973))+(((-1.0)*x5969*x5974)));
evalcond[1]=(cj0+(((-1.0)*r12*x5971))+((r11*x5973))+(((-1.0)*x5967*x5974)));
evalcond[2]=((((-1.0)*r02*x5971))+(((-1.0)*sj0))+((r01*x5973))+(((-1.0)*x5970*x5974)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5965))+((r21*x5975))+(((-1.0)*x5969*x5971)));
evalcond[4]=(((r02*x5965))+((cj0*x5968))+((r01*x5975))+(((-1.0)*cj0*x5972))+(((-1.0)*x5970*x5971)));
evalcond[5]=((((-1.0)*sj0*x5972))+((r11*x5975))+((r12*x5965))+((sj0*x5968))+(((-1.0)*x5967*x5971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5976=((1.0)*gconst131);
CheckValue<IkReal> x5977=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5976))+(((-1.0)*gconst130*r10)))),-1);
if(!x5977.valid){
continue;
}
CheckValue<IkReal> x5978 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5976))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5977.value)))+(x5978.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5979=IKsin(j4);
IkReal x5980=IKcos(j4);
IkReal x5981=(gconst131*r10);
IkReal x5982=(sj1*sj2);
IkReal x5983=(gconst131*r20);
IkReal x5984=(gconst131*r00);
IkReal x5985=((1.0)*x5980);
IkReal x5986=((1.0)*cj1*cj2);
IkReal x5987=(gconst130*x5979);
IkReal x5988=((1.0)*x5979);
IkReal x5989=(gconst130*x5980);
evalcond[0]=(((r21*x5987))+(((-1.0)*r22*x5985))+(((-1.0)*x5983*x5988)));
evalcond[1]=((((-1.0)*r12*x5985))+cj0+((r11*x5987))+(((-1.0)*x5981*x5988)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5984*x5988))+(((-1.0)*r02*x5985))+((r01*x5987)));
evalcond[3]=(((cj2*sj1))+((r21*x5989))+((cj1*sj2))+((r22*x5979))+(((-1.0)*x5983*x5985)));
evalcond[4]=((((-1.0)*x5984*x5985))+((cj0*x5982))+(((-1.0)*cj0*x5986))+((r02*x5979))+((r01*x5989)));
evalcond[5]=(((r11*x5989))+((sj0*x5982))+(((-1.0)*sj0*x5986))+(((-1.0)*x5981*x5985))+((r12*x5979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5990=((1.0)*gconst131);
CheckValue<IkReal> x5991=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x5990)))),-1);
if(!x5991.valid){
continue;
}
CheckValue<IkReal> x5992 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5990)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5991.value)))+(x5992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5993=IKsin(j4);
IkReal x5994=IKcos(j4);
IkReal x5995=(gconst131*r10);
IkReal x5996=(sj1*sj2);
IkReal x5997=(gconst131*r20);
IkReal x5998=(gconst131*r00);
IkReal x5999=((1.0)*x5994);
IkReal x6000=((1.0)*cj1*cj2);
IkReal x6001=(gconst130*x5993);
IkReal x6002=((1.0)*x5993);
IkReal x6003=(gconst130*x5994);
evalcond[0]=(((r21*x6001))+(((-1.0)*x5997*x6002))+(((-1.0)*r22*x5999)));
evalcond[1]=((((-1.0)*r12*x5999))+cj0+((r11*x6001))+(((-1.0)*x5995*x6002)));
evalcond[2]=((((-1.0)*x5998*x6002))+(((-1.0)*sj0))+(((-1.0)*r02*x5999))+((r01*x6001)));
evalcond[3]=(((r21*x6003))+((cj2*sj1))+(((-1.0)*x5997*x5999))+((cj1*sj2))+((r22*x5993)));
evalcond[4]=(((r02*x5993))+(((-1.0)*cj0*x6000))+(((-1.0)*x5998*x5999))+((cj0*x5996))+((r01*x6003)));
evalcond[5]=(((r12*x5993))+(((-1.0)*sj0*x6000))+((sj0*x5996))+((r11*x6003))+(((-1.0)*x5995*x5999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6004=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6004;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6004);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6005=((1.0)*cj5);
IkReal x6006=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6005)));
j4eval[0]=x6006;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6005)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6007=cj5*cj5;
IkReal x6008=r01*r01;
IkReal x6009=(cj5*r00);
IkReal x6010=(r01*sj5);
IkReal x6011=(((x6007*(r00*r00)))+x6008+(((-2.0)*x6009*x6010))+(((-1.0)*x6007*x6008))+(r02*r02));
j4eval[0]=x6011;
j4eval[1]=IKsign(x6011);
j4eval[2]=((IKabs(r02))+(IKabs((x6010+(((-1.0)*x6009))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6012=cj5*cj5;
IkReal x6013=r01*r01;
IkReal x6014=(r01*sj5);
IkReal x6015=(cj5*r00);
CheckValue<IkReal> x6016=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6014*x6015))+x6013+((x6012*(r00*r00)))+(((-1.0)*x6012*x6013))+(r02*r02))),-1);
if(!x6016.valid){
continue;
}
CheckValue<IkReal> x6017 = IKatan2WithCheck(IkReal(((((-1.0)*x6015))+x6014)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6016.value)))+(x6017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6018=IKcos(j4);
IkReal x6019=IKsin(j4);
IkReal x6020=(cj5*r00);
IkReal x6021=(cj5*r10);
IkReal x6022=(r21*sj5);
IkReal x6023=(cj5*r20);
IkReal x6024=((1.0)*x6018);
IkReal x6025=((1.0)*x6019);
IkReal x6026=(sj5*x6019);
IkReal x6027=(sj5*x6018);
evalcond[0]=((((-1.0)*x6020*x6024))+((r01*x6027))+((r02*x6019)));
evalcond[1]=((((-1.0)*x6023*x6025))+(((-1.0)*r22*x6024))+((x6019*x6022)));
evalcond[2]=((((-1.0)*x6021*x6025))+((r11*x6026))+(((-1.0)*r12*x6024)));
evalcond[3]=((-1.0)+(((-1.0)*x6020*x6025))+((r01*x6026))+(((-1.0)*r02*x6024)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6023*x6024))+((cj1*sj2))+((x6018*x6022))+((r22*x6019)));
evalcond[5]=((((-1.0)*x6021*x6024))+((r12*x6019))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6028=((1.0)*cj5);
CheckValue<IkReal> x6029 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6029.valid){
continue;
}
CheckValue<IkReal> x6030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6028))+(((-1.0)*r10*sj5)))),-1);
if(!x6030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6029.value)+(((1.5707963267949)*(x6030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6031=IKcos(j4);
IkReal x6032=IKsin(j4);
IkReal x6033=(cj5*r00);
IkReal x6034=(cj5*r10);
IkReal x6035=(r21*sj5);
IkReal x6036=(cj5*r20);
IkReal x6037=((1.0)*x6031);
IkReal x6038=((1.0)*x6032);
IkReal x6039=(sj5*x6032);
IkReal x6040=(sj5*x6031);
evalcond[0]=(((r02*x6032))+(((-1.0)*x6033*x6037))+((r01*x6040)));
evalcond[1]=((((-1.0)*x6036*x6038))+((x6032*x6035))+(((-1.0)*r22*x6037)));
evalcond[2]=(((r11*x6039))+(((-1.0)*r12*x6037))+(((-1.0)*x6034*x6038)));
evalcond[3]=((-1.0)+(((-1.0)*x6033*x6038))+((r01*x6039))+(((-1.0)*r02*x6037)));
evalcond[4]=(((r22*x6032))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6036*x6037))+((x6031*x6035)));
evalcond[5]=(((r11*x6040))+((r12*x6032))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6034*x6037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6041=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6041.valid){
continue;
}
CheckValue<IkReal> x6042 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6041.value)))+(x6042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6043=IKcos(j4);
IkReal x6044=IKsin(j4);
IkReal x6045=(cj5*r00);
IkReal x6046=(cj5*r10);
IkReal x6047=(r21*sj5);
IkReal x6048=(cj5*r20);
IkReal x6049=((1.0)*x6043);
IkReal x6050=((1.0)*x6044);
IkReal x6051=(sj5*x6044);
IkReal x6052=(sj5*x6043);
evalcond[0]=(((r01*x6052))+(((-1.0)*x6045*x6049))+((r02*x6044)));
evalcond[1]=((((-1.0)*x6048*x6050))+(((-1.0)*r22*x6049))+((x6044*x6047)));
evalcond[2]=((((-1.0)*x6046*x6050))+(((-1.0)*r12*x6049))+((r11*x6051)));
evalcond[3]=((-1.0)+((r01*x6051))+(((-1.0)*r02*x6049))+(((-1.0)*x6045*x6050)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6044))+((x6043*x6047))+(((-1.0)*x6048*x6049)));
evalcond[5]=((((-1.0)*x6046*x6049))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6044))+((r11*x6052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6053=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6053;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6054=((1.0)*cj5);
IkReal x6055=((((-1.0)*r21*x6054))+(((-1.0)*r20*sj5)));
j4eval[0]=x6055;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6054))+((r11*sj5))))));
j4eval[2]=IKsign(x6055);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6056=(r01*sj5);
IkReal x6057=(cj1*sj2);
IkReal x6058=(cj2*sj1);
IkReal x6059=((1.0)*r02);
IkReal x6060=((1.0)*cj5*r00);
IkReal x6061=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6061;
j4eval[1]=((IKabs(((((-1.0)*x6057*x6060))+((x6056*x6057))+((x6056*x6058))+(((-1.0)*x6058*x6060)))))+(IKabs(((((-1.0)*x6058*x6059))+(((-1.0)*x6057*x6059))))));
j4eval[2]=IKsign(x6061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6062=(r01*sj5);
IkReal x6063=(cj1*sj2);
IkReal x6064=(cj2*sj1);
IkReal x6065=((1.0)*r02);
IkReal x6066=((1.0)*cj5*r00);
CheckValue<IkReal> x6067 = IKatan2WithCheck(IkReal(((((-1.0)*x6064*x6066))+((x6062*x6063))+((x6062*x6064))+(((-1.0)*x6063*x6066)))),IkReal(((((-1.0)*x6064*x6065))+(((-1.0)*x6063*x6065)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6067.valid){
continue;
}
CheckValue<IkReal> x6068=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6067.value)+(((1.5707963267949)*(x6068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6069=IKcos(j4);
IkReal x6070=IKsin(j4);
IkReal x6071=(cj5*r00);
IkReal x6072=(cj5*r10);
IkReal x6073=(r21*sj5);
IkReal x6074=(cj5*r20);
IkReal x6075=((1.0)*x6069);
IkReal x6076=((1.0)*x6070);
IkReal x6077=(sj5*x6070);
IkReal x6078=(sj5*x6069);
evalcond[0]=(((r01*x6078))+((r02*x6070))+(((-1.0)*x6071*x6075)));
evalcond[1]=(((x6070*x6073))+(((-1.0)*x6074*x6076))+(((-1.0)*r22*x6075)));
evalcond[2]=(((r11*x6077))+(((-1.0)*x6072*x6076))+(((-1.0)*r12*x6075)));
evalcond[3]=((1.0)+((r01*x6077))+(((-1.0)*r02*x6075))+(((-1.0)*x6071*x6076)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6070))+(((-1.0)*x6074*x6075))+((x6069*x6073)));
evalcond[5]=(((r11*x6078))+(((-1.0)*sj1*sj2))+(((-1.0)*x6072*x6075))+((cj1*cj2))+((r12*x6070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6079=((1.0)*cj5);
CheckValue<IkReal> x6080=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6079))+(((-1.0)*r20*sj5)))),-1);
if(!x6080.valid){
continue;
}
CheckValue<IkReal> x6081 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6079))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6080.value)))+(x6081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6082=IKcos(j4);
IkReal x6083=IKsin(j4);
IkReal x6084=(cj5*r00);
IkReal x6085=(cj5*r10);
IkReal x6086=(r21*sj5);
IkReal x6087=(cj5*r20);
IkReal x6088=((1.0)*x6082);
IkReal x6089=((1.0)*x6083);
IkReal x6090=(sj5*x6083);
IkReal x6091=(sj5*x6082);
evalcond[0]=(((r01*x6091))+(((-1.0)*x6084*x6088))+((r02*x6083)));
evalcond[1]=((((-1.0)*r22*x6088))+((x6083*x6086))+(((-1.0)*x6087*x6089)));
evalcond[2]=((((-1.0)*x6085*x6089))+(((-1.0)*r12*x6088))+((r11*x6090)));
evalcond[3]=((1.0)+((r01*x6090))+(((-1.0)*r02*x6088))+(((-1.0)*x6084*x6089)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6083))+((x6082*x6086))+(((-1.0)*x6087*x6088)));
evalcond[5]=((((-1.0)*x6085*x6088))+(((-1.0)*sj1*sj2))+((r12*x6083))+((r11*x6091))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6092 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6092.valid){
continue;
}
CheckValue<IkReal> x6093=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6092.value)+(((1.5707963267949)*(x6093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6094=IKcos(j4);
IkReal x6095=IKsin(j4);
IkReal x6096=(cj5*r00);
IkReal x6097=(cj5*r10);
IkReal x6098=(r21*sj5);
IkReal x6099=(cj5*r20);
IkReal x6100=((1.0)*x6094);
IkReal x6101=((1.0)*x6095);
IkReal x6102=(sj5*x6095);
IkReal x6103=(sj5*x6094);
evalcond[0]=((((-1.0)*x6096*x6100))+((r01*x6103))+((r02*x6095)));
evalcond[1]=(((x6095*x6098))+(((-1.0)*x6099*x6101))+(((-1.0)*r22*x6100)));
evalcond[2]=(((r11*x6102))+(((-1.0)*r12*x6100))+(((-1.0)*x6097*x6101)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6100))+(((-1.0)*x6096*x6101))+((r01*x6102)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6099*x6100))+((x6094*x6098))+((r22*x6095)));
evalcond[5]=(((r11*x6103))+(((-1.0)*sj1*sj2))+((r12*x6095))+((cj1*cj2))+(((-1.0)*x6097*x6100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6104=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6104);
rxp1_1=(px*r21);
rxp1_2=(r11*x6104);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6105=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6105);
rxp1_1=(px*r21);
rxp1_2=(r11*x6105);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6106=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6106);
rxp1_1=(px*r21);
rxp1_2=(r11*x6106);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6109=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6109.valid){
continue;
}
IkReal x6107=x6109.value;
IkReal x6108=(sj0*x6107);
cj4array[0]=(((cj1*cj2*x6108))+(((-1.0)*sj1*sj2*x6108)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6110=IKsin(j4);
IkReal x6111=IKcos(j4);
IkReal x6112=(r21*sj5);
IkReal x6113=((1.0)*cj5*r20);
evalcond[0]=(r02*x6110);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6111)));
evalcond[2]=(((x6110*x6112))+(((-1.0)*x6110*x6113)));
evalcond[3]=(((r11*sj5*x6110))+(((-1.0)*cj5*r10*x6110)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6111*x6112))+(((-1.0)*x6111*x6113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6116=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6116.valid){
continue;
}
IkReal x6114=x6116.value;
IkReal x6115=((1.0)*x6114);
cj4array[0]=((((-1.0)*cj1*sj2*x6115))+(((-1.0)*cj2*sj1*x6115)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6117=IKsin(j4);
IkReal x6118=IKcos(j4);
IkReal x6119=((1.0)*sj0);
IkReal x6120=((1.0)*cj5);
IkReal x6121=(sj5*x6117);
evalcond[0]=(r02*x6117);
evalcond[1]=((((-1.0)*x6119))+(((-1.0)*r02*x6118)));
evalcond[2]=((((-1.0)*r20*x6117*x6120))+((r21*x6121)));
evalcond[3]=((((-1.0)*r10*x6117*x6120))+((r11*x6121)));
evalcond[4]=(((r11*sj5*x6118))+(((-1.0)*r10*x6118*x6120))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6122=IKPowWithIntegerCheck(r02,-1);
if(!x6122.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6122.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6123=IKsin(j4);
IkReal x6124=IKcos(j4);
IkReal x6125=(r21*sj5);
IkReal x6126=((1.0)*cj5);
IkReal x6127=(r11*sj5);
evalcond[0]=(r02*x6123);
evalcond[1]=(((x6123*x6125))+(((-1.0)*r20*x6123*x6126)));
evalcond[2]=((((-1.0)*r10*x6123*x6126))+((x6123*x6127)));
evalcond[3]=(((cj2*sj1))+((x6124*x6125))+(((-1.0)*r20*x6124*x6126))+((cj1*sj2)));
evalcond[4]=(((x6124*x6127))+(((-1.0)*r10*x6124*x6126))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6128=((1.0)*sj0);
IkReal x6129=((1.0)*cj0);
CheckValue<IkReal> x6130 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6129))+(((-1.0)*r12*x6128)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6129))+(((-1.0)*r11*sj5*x6128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6130.valid){
continue;
}
CheckValue<IkReal> x6131=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6130.value)+(((1.5707963267949)*(x6131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6132=IKsin(j4);
IkReal x6133=IKcos(j4);
IkReal x6134=(cj5*r00);
IkReal x6135=(cj5*r10);
IkReal x6136=(r21*sj5);
IkReal x6137=(sj1*sj2);
IkReal x6138=(cj5*r20);
IkReal x6139=((1.0)*x6133);
IkReal x6140=((1.0)*cj1*cj2);
IkReal x6141=((1.0)*x6132);
IkReal x6142=(sj5*x6132);
IkReal x6143=(sj5*x6133);
evalcond[0]=((((-1.0)*r22*x6139))+(((-1.0)*x6138*x6141))+((x6132*x6136)));
evalcond[1]=(cj0+((r11*x6142))+(((-1.0)*x6135*x6141))+(((-1.0)*r12*x6139)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6142))+(((-1.0)*x6134*x6141))+(((-1.0)*r02*x6139)));
evalcond[3]=(((cj2*sj1))+((r22*x6132))+((cj1*sj2))+((x6133*x6136))+(((-1.0)*x6138*x6139)));
evalcond[4]=(((cj0*x6137))+(((-1.0)*x6134*x6139))+((r01*x6143))+((r02*x6132))+(((-1.0)*cj0*x6140)));
evalcond[5]=((((-1.0)*sj0*x6140))+((r11*x6143))+((r12*x6132))+(((-1.0)*x6135*x6139))+((sj0*x6137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6144=((1.0)*cj5);
CheckValue<IkReal> x6145=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6144)))),-1);
if(!x6145.valid){
continue;
}
CheckValue<IkReal> x6146 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6144))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6145.value)))+(x6146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6147=IKsin(j4);
IkReal x6148=IKcos(j4);
IkReal x6149=(cj5*r00);
IkReal x6150=(cj5*r10);
IkReal x6151=(r21*sj5);
IkReal x6152=(sj1*sj2);
IkReal x6153=(cj5*r20);
IkReal x6154=((1.0)*x6148);
IkReal x6155=((1.0)*cj1*cj2);
IkReal x6156=((1.0)*x6147);
IkReal x6157=(sj5*x6147);
IkReal x6158=(sj5*x6148);
evalcond[0]=((((-1.0)*r22*x6154))+((x6147*x6151))+(((-1.0)*x6153*x6156)));
evalcond[1]=(cj0+(((-1.0)*x6150*x6156))+(((-1.0)*r12*x6154))+((r11*x6157)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6154))+(((-1.0)*x6149*x6156))+((r01*x6157)));
evalcond[3]=(((cj2*sj1))+((x6148*x6151))+((cj1*sj2))+((r22*x6147))+(((-1.0)*x6153*x6154)));
evalcond[4]=(((cj0*x6152))+(((-1.0)*cj0*x6155))+(((-1.0)*x6149*x6154))+((r02*x6147))+((r01*x6158)));
evalcond[5]=(((sj0*x6152))+(((-1.0)*x6150*x6154))+((r12*x6147))+((r11*x6158))+(((-1.0)*sj0*x6155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6159=((1.0)*cj5);
CheckValue<IkReal> x6160 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6160.valid){
continue;
}
CheckValue<IkReal> x6161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6159)))),-1);
if(!x6161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6160.value)+(((1.5707963267949)*(x6161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6162=IKsin(j4);
IkReal x6163=IKcos(j4);
IkReal x6164=(cj5*r00);
IkReal x6165=(cj5*r10);
IkReal x6166=(r21*sj5);
IkReal x6167=(sj1*sj2);
IkReal x6168=(cj5*r20);
IkReal x6169=((1.0)*x6163);
IkReal x6170=((1.0)*cj1*cj2);
IkReal x6171=((1.0)*x6162);
IkReal x6172=(sj5*x6162);
IkReal x6173=(sj5*x6163);
evalcond[0]=((((-1.0)*x6168*x6171))+((x6162*x6166))+(((-1.0)*r22*x6169)));
evalcond[1]=(cj0+((r11*x6172))+(((-1.0)*r12*x6169))+(((-1.0)*x6165*x6171)));
evalcond[2]=((((-1.0)*x6164*x6171))+(((-1.0)*sj0))+((r01*x6172))+(((-1.0)*r02*x6169)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6168*x6169))+((cj1*sj2))+((x6163*x6166))+((r22*x6162)));
evalcond[4]=((((-1.0)*cj0*x6170))+((r02*x6162))+((r01*x6173))+((cj0*x6167))+(((-1.0)*x6164*x6169)));
evalcond[5]=((((-1.0)*sj0*x6170))+((sj0*x6167))+((r12*x6162))+((r11*x6173))+(((-1.0)*x6165*x6169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6174=r21*r21;
IkReal x6175=cj5*cj5;
IkReal x6176=(cj2*sj1);
IkReal x6177=(cj1*sj2);
IkReal x6178=(r21*sj5);
IkReal x6179=((1.0)*cj5*r20);
CheckValue<IkReal> x6180=IKPowWithIntegerCheck(IKsign((((x6174*x6175))+(((2.0)*cj5*r20*x6178))+(((-1.0)*x6174))+(((-1.0)*(r22*r22)))+(((-1.0)*x6175*(r20*r20))))),-1);
if(!x6180.valid){
continue;
}
CheckValue<IkReal> x6181 = IKatan2WithCheck(IkReal((((r22*x6176))+((r22*x6177)))),IkReal(((((-1.0)*x6176*x6179))+(((-1.0)*x6177*x6179))+((x6176*x6178))+((x6177*x6178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6180.value)))+(x6181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6182=IKsin(j4);
IkReal x6183=IKcos(j4);
IkReal x6184=(r21*sj5);
IkReal x6185=(cj5*r20);
IkReal x6186=((1.0)*x6183);
evalcond[0]=((((-1.0)*r22*x6186))+(((-1.0)*x6182*x6185))+((x6182*x6184)));
evalcond[1]=(((cj2*sj1))+((r22*x6182))+(((-1.0)*x6185*x6186))+((cj1*sj2))+((x6183*x6184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6187=(cj5*sj4);
IkReal x6188=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6188))+(((-1.0)*r00*x6187)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6187))+(((-1.0)*r11*x6188))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6188))+(((-1.0)*r00*x6187))))+IKsqr((((r10*x6187))+(((-1.0)*r11*x6188))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6188))+(((-1.0)*r00*x6187))), (((r10*x6187))+(((-1.0)*r11*x6188))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6189=IKcos(j0);
IkReal x6190=IKsin(j0);
IkReal x6191=((0.21325)*cj2);
IkReal x6192=(cj5*r01);
IkReal x6193=((1.0)*sj2);
IkReal x6194=(r11*sj5);
IkReal x6195=((0.21325)*sj2);
IkReal x6196=(r00*sj5);
IkReal x6197=(cj5*r11);
IkReal x6198=((1.0)*cj2);
IkReal x6199=((1.0)*cj4);
IkReal x6200=(r01*sj5);
IkReal x6201=(r10*sj5);
IkReal x6202=(cj1*x6190);
IkReal x6203=(cj1*x6189);
IkReal x6204=(cj5*x6199);
IkReal x6205=(sj1*x6189);
IkReal x6206=((1.0)*cj5*sj4);
IkReal x6207=(sj1*x6190);
evalcond[0]=((((-1.0)*r12*x6199))+x6189+((sj4*x6194))+(((-1.0)*r10*x6206)));
evalcond[1]=((((-1.0)*r00*x6206))+(((-1.0)*x6190))+(((-1.0)*r02*x6199))+((sj4*x6200)));
evalcond[2]=((((-1.0)*x6198*x6205))+(((-1.0)*x6193*x6203))+x6196+x6192);
evalcond[3]=(x6201+(((-1.0)*x6198*x6207))+(((-1.0)*x6193*x6202))+x6197);
evalcond[4]=((((-1.0)*r00*x6204))+(((-1.0)*x6198*x6203))+((sj2*x6205))+((r02*sj4))+((cj4*x6200)));
evalcond[5]=((((-1.0)*x6198*x6202))+((sj2*x6207))+((r12*sj4))+((cj4*x6194))+(((-1.0)*r10*x6204)));
evalcond[6]=((((-1.0)*x6195*x6205))+((x6191*x6203))+(((-0.08535)*x6196))+(((-0.08535)*x6192))+(((-0.11235)*x6190))+(((-1.0)*px))+(((0.24365)*x6203)));
evalcond[7]=((((-0.08535)*x6201))+(((-1.0)*x6195*x6207))+((x6191*x6202))+(((-0.08535)*x6197))+(((0.11235)*x6189))+(((-1.0)*py))+(((0.24365)*x6202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6208=((1.0)*cj5);
IkReal x6209=((1.0)*sj5);
CheckValue<IkReal> x6210 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6208))+(((-1.0)*r10*x6209)))),IkReal(((((-1.0)*r00*x6209))+(((-1.0)*r01*x6208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6210.valid){
continue;
}
CheckValue<IkReal> x6211=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6211.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6210.value)+(((1.5707963267949)*(x6211.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6212=IKcos(j0);
IkReal x6213=IKsin(j0);
IkReal x6214=((0.21325)*cj2);
IkReal x6215=(cj5*r01);
IkReal x6216=((1.0)*sj2);
IkReal x6217=(r00*sj5);
IkReal x6218=(cj5*r11);
IkReal x6219=(r10*sj5);
IkReal x6220=(cj1*x6213);
IkReal x6221=(cj1*x6212);
IkReal x6222=((0.21325)*sj1*sj2);
IkReal x6223=((1.0)*cj2*sj1);
evalcond[0]=(x6217+x6215+(((-1.0)*x6216*x6221))+(((-1.0)*x6212*x6223)));
evalcond[1]=(x6219+x6218+(((-1.0)*x6213*x6223))+(((-1.0)*x6216*x6220)));
evalcond[2]=((((0.24365)*x6221))+(((-0.08535)*x6217))+(((-0.08535)*x6215))+(((-0.11235)*x6213))+(((-1.0)*px))+(((-1.0)*x6212*x6222))+((x6214*x6221)));
evalcond[3]=((((0.24365)*x6220))+(((-0.08535)*x6218))+(((-0.08535)*x6219))+(((-1.0)*x6213*x6222))+(((-1.0)*py))+((x6214*x6220))+(((0.11235)*x6212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6224=((1.0)*cj5);
IkReal x6225=((((-1.0)*r01*x6224))+(((-1.0)*r00*sj5)));
j4eval[0]=x6225;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6224))))));
j4eval[2]=IKsign(x6225);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6226=((1.0)*cj5);
IkReal x6227=((((-1.0)*r11*x6226))+(((-1.0)*r10*sj5)));
j4eval[0]=x6227;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6226))))));
j4eval[2]=IKsign(x6227);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6228=((1.0)*sj0);
IkReal x6229=((1.0)*cj0);
IkReal x6230=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6230;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6229))+(((-1.0)*r11*sj5*x6228)))))+(IKabs(((((-1.0)*r12*x6228))+(((-1.0)*r02*x6229))))));
j4eval[2]=IKsign(x6230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6231=((-1.0)*r20);
IkReal x6233 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6233)==0){
continue;
}
IkReal x6232=pow(x6233,-0.5);
CheckValue<IkReal> x6234 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6231),IKFAST_ATAN2_MAGTHRESH);
if(!x6234.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6234.value));
IkReal gconst115=(r21*x6232);
IkReal gconst116=(x6231*x6232);
CheckValue<IkReal> x6235 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6235.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6235.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6236=((-1.0)*r20);
IkReal x6237=x6232;
CheckValue<IkReal> x6239 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6236),IKFAST_ATAN2_MAGTHRESH);
if(!x6239.valid){
continue;
}
IkReal x6238=((-1.0)*(x6239.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6238;
IkReal gconst114=x6238;
IkReal gconst115=(r21*x6237);
IkReal gconst116=(x6236*x6237);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6240=((-1.0)*r20);
IkReal x6241=x6232;
CheckValue<IkReal> x6243 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6240),IKFAST_ATAN2_MAGTHRESH);
if(!x6243.valid){
continue;
}
IkReal x6242=((-1.0)*(x6243.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6242;
IkReal gconst114=x6242;
IkReal gconst115=(r21*x6241);
IkReal gconst116=(x6240*x6241);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6244=((-1.0)*r20);
IkReal x6245=x6232;
CheckValue<IkReal> x6247 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6244),IKFAST_ATAN2_MAGTHRESH);
if(!x6247.valid){
continue;
}
IkReal x6246=((-1.0)*(x6247.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6246;
IkReal gconst114=x6246;
IkReal gconst115=(r21*x6245);
IkReal gconst116=(x6244*x6245);
IkReal x6248=((1.0)*(r22*r22));
CheckValue<IkReal> x6252=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6248))),-1);
if(!x6252.valid){
continue;
}
IkReal x6249=x6252.value;
IkReal x6250=((1.0)*x6249);
IkReal x6251=((((-1.0)*x6248))+(((-2.0)*x6249*(r20*r20)*(r21*r21)))+(((-1.0)*x6250*(r20*r20*r20*r20)))+(((-1.0)*x6250*(r21*r21*r21*r21))));
j4eval[0]=x6251;
j4eval[1]=IKsign(x6251);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6253=(cj2*sj1);
IkReal x6254=(gconst115*r21);
IkReal x6255=(cj1*sj2);
IkReal x6256=((1.0)*gconst116*r20);
CheckValue<IkReal> x6257=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x6254))+(((-1.0)*gconst116*r20*x6256))+(((-1.0)*(x6254*x6254))))),-1);
if(!x6257.valid){
continue;
}
CheckValue<IkReal> x6258 = IKatan2WithCheck(IkReal((((r22*x6253))+((r22*x6255)))),IkReal((((x6254*x6255))+((x6253*x6254))+(((-1.0)*x6255*x6256))+(((-1.0)*x6253*x6256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6257.value)))+(x6258.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6259=IKsin(j4);
IkReal x6260=IKcos(j4);
IkReal x6261=(sj1*sj2);
IkReal x6262=((1.0)*x6260);
IkReal x6263=((1.0)*cj1*cj2);
IkReal x6264=(gconst115*x6259);
IkReal x6265=(gconst115*x6260);
IkReal x6266=((1.0)*gconst116*x6259);
evalcond[0]=(((r21*x6264))+(((-1.0)*r22*x6262))+(((-1.0)*r20*x6266)));
evalcond[1]=(cj0+(((-1.0)*r10*x6266))+(((-1.0)*r12*x6262))+((r11*x6264)));
evalcond[2]=(((r01*x6264))+(((-1.0)*sj0))+(((-1.0)*r02*x6262))+(((-1.0)*r00*x6266)));
evalcond[3]=(((cj2*sj1))+((r22*x6259))+((cj1*sj2))+((r21*x6265))+(((-1.0)*gconst116*r20*x6262)));
evalcond[4]=(((r01*x6265))+(((-1.0)*gconst116*r00*x6262))+(((-1.0)*cj0*x6263))+((r02*x6259))+((cj0*x6261)));
evalcond[5]=((((-1.0)*gconst116*r10*x6262))+((sj0*x6261))+(((-1.0)*sj0*x6263))+((r12*x6259))+((r11*x6265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6267=((1.0)*gconst116);
CheckValue<IkReal> x6268 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6267))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6268.valid){
continue;
}
CheckValue<IkReal> x6269=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6267)))),-1);
if(!x6269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6268.value)+(((1.5707963267949)*(x6269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6270=IKsin(j4);
IkReal x6271=IKcos(j4);
IkReal x6272=(sj1*sj2);
IkReal x6273=((1.0)*x6271);
IkReal x6274=((1.0)*cj1*cj2);
IkReal x6275=(gconst115*x6270);
IkReal x6276=(gconst115*x6271);
IkReal x6277=((1.0)*gconst116*x6270);
evalcond[0]=((((-1.0)*r20*x6277))+((r21*x6275))+(((-1.0)*r22*x6273)));
evalcond[1]=((((-1.0)*r10*x6277))+cj0+(((-1.0)*r12*x6273))+((r11*x6275)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6275))+(((-1.0)*r02*x6273))+(((-1.0)*r00*x6277)));
evalcond[3]=(((r22*x6270))+((cj2*sj1))+((cj1*sj2))+((r21*x6276))+(((-1.0)*gconst116*r20*x6273)));
evalcond[4]=(((r01*x6276))+((r02*x6270))+(((-1.0)*gconst116*r00*x6273))+(((-1.0)*cj0*x6274))+((cj0*x6272)));
evalcond[5]=(((r12*x6270))+(((-1.0)*sj0*x6274))+(((-1.0)*gconst116*r10*x6273))+((sj0*x6272))+((r11*x6276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6278=((1.0)*gconst116);
CheckValue<IkReal> x6279 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6279.valid){
continue;
}
CheckValue<IkReal> x6280=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6278))+(((-1.0)*gconst115*r00)))),-1);
if(!x6280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6279.value)+(((1.5707963267949)*(x6280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6281=IKsin(j4);
IkReal x6282=IKcos(j4);
IkReal x6283=(sj1*sj2);
IkReal x6284=((1.0)*x6282);
IkReal x6285=((1.0)*cj1*cj2);
IkReal x6286=(gconst115*x6281);
IkReal x6287=(gconst115*x6282);
IkReal x6288=((1.0)*gconst116*x6281);
evalcond[0]=((((-1.0)*r20*x6288))+(((-1.0)*r22*x6284))+((r21*x6286)));
evalcond[1]=(cj0+(((-1.0)*r10*x6288))+((r11*x6286))+(((-1.0)*r12*x6284)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6284))+(((-1.0)*r00*x6288))+((r01*x6286)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6284))+((r22*x6281))+((cj1*sj2))+((r21*x6287)));
evalcond[4]=((((-1.0)*gconst116*r00*x6284))+((cj0*x6283))+(((-1.0)*cj0*x6285))+((r02*x6281))+((r01*x6287)));
evalcond[5]=(((r12*x6281))+(((-1.0)*gconst116*r10*x6284))+((r11*x6287))+((sj0*x6283))+(((-1.0)*sj0*x6285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6289=((-1.0)*r21);
IkReal x6291 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6291)==0){
continue;
}
IkReal x6290=pow(x6291,-0.5);
CheckValue<IkReal> x6292 = IKatan2WithCheck(IkReal(x6289),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6292.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6292.value))));
IkReal gconst118=(x6289*x6290);
IkReal gconst119=((1.0)*r20*x6290);
CheckValue<IkReal> x6293 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6293.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6293.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6294=((-1.0)*r21);
CheckValue<IkReal> x6297 = IKatan2WithCheck(IkReal(x6294),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6297.valid){
continue;
}
IkReal x6295=((1.0)*(x6297.value));
IkReal x6296=x6290;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6295)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6295)));
IkReal gconst118=(x6294*x6296);
IkReal gconst119=((1.0)*r20*x6296);
IkReal x6298=r22*r22;
IkReal x6299=((1.0)*x6298);
CheckValue<IkReal> x6303=IKPowWithIntegerCheck(((-1.0)+x6298),-1);
if(!x6303.valid){
continue;
}
IkReal x6300=x6303.value;
if((((1.0)+(((-1.0)*x6299)))) < -0.00001)
continue;
IkReal x6301=IKsqrt(((1.0)+(((-1.0)*x6299))));
IkReal x6302=(cj0*x6300*x6301);
j4eval[0]=((IKabs((x6302+(((-1.0)*x6299*x6302)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6304=((-1.0)*r21);
CheckValue<IkReal> x6307 = IKatan2WithCheck(IkReal(x6304),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6307.valid){
continue;
}
IkReal x6305=((1.0)*(x6307.value));
IkReal x6306=x6290;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6305)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6305)));
IkReal gconst118=(x6304*x6306);
IkReal gconst119=((1.0)*r20*x6306);
IkReal x6308=r22*r22;
IkReal x6309=((1.0)*x6308);
CheckValue<IkReal> x6313=IKPowWithIntegerCheck(((-1.0)+x6308),-1);
if(!x6313.valid){
continue;
}
IkReal x6310=x6313.value;
if((((1.0)+(((-1.0)*x6309)))) < -0.00001)
continue;
IkReal x6311=IKsqrt(((1.0)+(((-1.0)*x6309))));
IkReal x6312=(sj0*x6310*x6311);
j4eval[0]=((IKabs((x6312+(((-1.0)*x6309*x6312)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6314=((-1.0)*r21);
CheckValue<IkReal> x6317 = IKatan2WithCheck(IkReal(x6314),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6317.valid){
continue;
}
IkReal x6315=((1.0)*(x6317.value));
IkReal x6316=x6290;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6315)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6315)));
IkReal gconst118=(x6314*x6316);
IkReal gconst119=((1.0)*r20*x6316);
IkReal x6318=r22*r22;
IkReal x6319=(r12*sj0);
IkReal x6320=(cj0*r02);
CheckValue<IkReal> x6324=IKPowWithIntegerCheck(((-1.0)+x6318),-1);
if(!x6324.valid){
continue;
}
IkReal x6321=x6324.value;
if((((1.0)+(((-1.0)*x6318)))) < -0.00001)
continue;
IkReal x6322=IKsqrt(((1.0)+(((-1.0)*x6318))));
IkReal x6323=(r22*x6321*x6322);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6320))+(((-1.0)*x6319)))))+(IKabs((((x6319*x6323))+((x6320*x6323))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6325=((1.0)*sj0);
IkReal x6326=((1.0)*gconst118);
CheckValue<IkReal> x6327 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6325)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x6326))+(((-1.0)*gconst118*r11*x6325))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6327.valid){
continue;
}
CheckValue<IkReal> x6328=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6326)))),-1);
if(!x6328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6327.value)+(((1.5707963267949)*(x6328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6329=IKsin(j4);
IkReal x6330=IKcos(j4);
IkReal x6331=(gconst118*r01);
IkReal x6332=(sj1*sj2);
IkReal x6333=(gconst119*r20);
IkReal x6334=(gconst119*r10);
IkReal x6335=(gconst119*r00);
IkReal x6336=(gconst118*r21);
IkReal x6337=(gconst118*r11);
IkReal x6338=((1.0)*x6330);
IkReal x6339=((1.0)*cj1*cj2);
IkReal x6340=((1.0)*x6329);
evalcond[0]=((((-1.0)*x6333*x6340))+((x6329*x6336))+(((-1.0)*r22*x6338)));
evalcond[1]=((((-1.0)*r12*x6338))+cj0+((x6329*x6337))+(((-1.0)*x6334*x6340)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6338))+((x6329*x6331))+(((-1.0)*x6335*x6340)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6333*x6338))+((x6330*x6336))+((cj1*sj2))+((r22*x6329)));
evalcond[4]=(((r02*x6329))+(((-1.0)*cj0*x6339))+((x6330*x6331))+(((-1.0)*x6335*x6338))+((cj0*x6332)));
evalcond[5]=(((sj0*x6332))+((x6330*x6337))+((r12*x6329))+(((-1.0)*x6334*x6338))+(((-1.0)*sj0*x6339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6341=((1.0)*gconst119);
CheckValue<IkReal> x6342 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x6341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6342.valid){
continue;
}
CheckValue<IkReal> x6343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6341))+(((-1.0)*gconst118*r10)))),-1);
if(!x6343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6342.value)+(((1.5707963267949)*(x6343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6344=IKsin(j4);
IkReal x6345=IKcos(j4);
IkReal x6346=(gconst118*r01);
IkReal x6347=(sj1*sj2);
IkReal x6348=(gconst119*r20);
IkReal x6349=(gconst119*r10);
IkReal x6350=(gconst119*r00);
IkReal x6351=(gconst118*r21);
IkReal x6352=(gconst118*r11);
IkReal x6353=((1.0)*x6345);
IkReal x6354=((1.0)*cj1*cj2);
IkReal x6355=((1.0)*x6344);
evalcond[0]=(((x6344*x6351))+(((-1.0)*r22*x6353))+(((-1.0)*x6348*x6355)));
evalcond[1]=((((-1.0)*x6349*x6355))+cj0+(((-1.0)*r12*x6353))+((x6344*x6352)));
evalcond[2]=(((x6344*x6346))+(((-1.0)*sj0))+(((-1.0)*x6350*x6355))+(((-1.0)*r02*x6353)));
evalcond[3]=(((cj2*sj1))+((x6345*x6351))+((r22*x6344))+((cj1*sj2))+(((-1.0)*x6348*x6353)));
evalcond[4]=((((-1.0)*cj0*x6354))+((cj0*x6347))+((x6345*x6346))+(((-1.0)*x6350*x6353))+((r02*x6344)));
evalcond[5]=(((x6345*x6352))+((sj0*x6347))+(((-1.0)*x6349*x6353))+((r12*x6344))+(((-1.0)*sj0*x6354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6356=((1.0)*gconst119);
CheckValue<IkReal> x6357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6356))+(((-1.0)*gconst118*r00)))),-1);
if(!x6357.valid){
continue;
}
CheckValue<IkReal> x6358 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6356))+((cj0*gconst118*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6357.value)))+(x6358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6359=IKsin(j4);
IkReal x6360=IKcos(j4);
IkReal x6361=(gconst118*r01);
IkReal x6362=(sj1*sj2);
IkReal x6363=(gconst119*r20);
IkReal x6364=(gconst119*r10);
IkReal x6365=(gconst119*r00);
IkReal x6366=(gconst118*r21);
IkReal x6367=(gconst118*r11);
IkReal x6368=((1.0)*x6360);
IkReal x6369=((1.0)*cj1*cj2);
IkReal x6370=((1.0)*x6359);
evalcond[0]=(((x6359*x6366))+(((-1.0)*r22*x6368))+(((-1.0)*x6363*x6370)));
evalcond[1]=(((x6359*x6367))+cj0+(((-1.0)*x6364*x6370))+(((-1.0)*r12*x6368)));
evalcond[2]=(((x6359*x6361))+(((-1.0)*sj0))+(((-1.0)*x6365*x6370))+(((-1.0)*r02*x6368)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6360*x6366))+((r22*x6359))+(((-1.0)*x6363*x6368)));
evalcond[4]=((((-1.0)*x6365*x6368))+((x6360*x6361))+((cj0*x6362))+((r02*x6359))+(((-1.0)*cj0*x6369)));
evalcond[5]=((((-1.0)*sj0*x6369))+((sj0*x6362))+((x6360*x6367))+((r12*x6359))+(((-1.0)*x6364*x6368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6371=((-1.0)*r10);
IkReal x6373 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6373)==0){
continue;
}
IkReal x6372=pow(x6373,-0.5);
CheckValue<IkReal> x6374 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6371),IKFAST_ATAN2_MAGTHRESH);
if(!x6374.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6374.value));
IkReal gconst121=(r11*x6372);
IkReal gconst122=(x6371*x6372);
CheckValue<IkReal> x6375 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6375.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6375.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6376=((-1.0)*r10);
IkReal x6377=x6372;
CheckValue<IkReal> x6379 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6376),IKFAST_ATAN2_MAGTHRESH);
if(!x6379.valid){
continue;
}
IkReal x6378=((-1.0)*(x6379.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6378;
IkReal gconst120=x6378;
IkReal gconst121=(r11*x6377);
IkReal gconst122=(x6376*x6377);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6380=((1.0)*sj0);
IkReal x6381=((1.0)*gconst121);
CheckValue<IkReal> x6382=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6381))+(((-1.0)*gconst122*r21)))),-1);
if(!x6382.valid){
continue;
}
CheckValue<IkReal> x6383 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6380))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst121*r11*x6380))+(((-1.0)*cj0*r01*x6381))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6382.value)))+(x6383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6384=IKsin(j4);
IkReal x6385=IKcos(j4);
IkReal x6386=(gconst121*r11);
IkReal x6387=(sj1*sj2);
IkReal x6388=(gconst122*r00);
IkReal x6389=(gconst122*r10);
IkReal x6390=(gconst122*r20);
IkReal x6391=((1.0)*x6385);
IkReal x6392=((1.0)*cj1*cj2);
IkReal x6393=((1.0)*x6384);
IkReal x6394=(gconst121*x6384);
IkReal x6395=(gconst121*x6385);
evalcond[0]=((((-1.0)*r22*x6391))+((r21*x6394))+(((-1.0)*x6390*x6393)));
evalcond[1]=(cj0+((x6384*x6386))+(((-1.0)*r12*x6391))+(((-1.0)*x6389*x6393)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6388*x6393))+((r01*x6394))+(((-1.0)*r02*x6391)));
evalcond[3]=(((cj2*sj1))+((r22*x6384))+((cj1*sj2))+((r21*x6395))+(((-1.0)*x6390*x6391)));
evalcond[4]=(((cj0*x6387))+(((-1.0)*cj0*x6392))+(((-1.0)*x6388*x6391))+((r02*x6384))+((r01*x6395)));
evalcond[5]=((((-1.0)*sj0*x6392))+((sj0*x6387))+((x6385*x6386))+((r12*x6384))+(((-1.0)*x6389*x6391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6396=((1.0)*gconst122);
CheckValue<IkReal> x6397=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6396)))),-1);
if(!x6397.valid){
continue;
}
CheckValue<IkReal> x6398 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6396))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6397.value)))+(x6398.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6399=IKsin(j4);
IkReal x6400=IKcos(j4);
IkReal x6401=(gconst121*r11);
IkReal x6402=(sj1*sj2);
IkReal x6403=(gconst122*r00);
IkReal x6404=(gconst122*r10);
IkReal x6405=(gconst122*r20);
IkReal x6406=((1.0)*x6400);
IkReal x6407=((1.0)*cj1*cj2);
IkReal x6408=((1.0)*x6399);
IkReal x6409=(gconst121*x6399);
IkReal x6410=(gconst121*x6400);
evalcond[0]=(((r21*x6409))+(((-1.0)*r22*x6406))+(((-1.0)*x6405*x6408)));
evalcond[1]=(cj0+((x6399*x6401))+(((-1.0)*r12*x6406))+(((-1.0)*x6404*x6408)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6403*x6408))+((r01*x6409))+(((-1.0)*r02*x6406)));
evalcond[3]=(((cj2*sj1))+((r21*x6410))+((cj1*sj2))+((r22*x6399))+(((-1.0)*x6405*x6406)));
evalcond[4]=((((-1.0)*x6403*x6406))+((r01*x6410))+((cj0*x6402))+(((-1.0)*cj0*x6407))+((r02*x6399)));
evalcond[5]=(((sj0*x6402))+((r12*x6399))+(((-1.0)*sj0*x6407))+(((-1.0)*x6404*x6406))+((x6400*x6401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6411=((-1.0)*r11);
IkReal x6413 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6413)==0){
continue;
}
IkReal x6412=pow(x6413,-0.5);
CheckValue<IkReal> x6414 = IKatan2WithCheck(IkReal(x6411),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6414.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6414.value))));
IkReal gconst124=(x6411*x6412);
IkReal gconst125=((1.0)*r10*x6412);
CheckValue<IkReal> x6415 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6415.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6415.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6416=((-1.0)*r11);
CheckValue<IkReal> x6419 = IKatan2WithCheck(IkReal(x6416),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6419.valid){
continue;
}
IkReal x6417=((1.0)*(x6419.value));
IkReal x6418=x6412;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6417)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6417)));
IkReal gconst124=(x6416*x6418);
IkReal gconst125=((1.0)*r10*x6418);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6420=((-1.0)*r11);
CheckValue<IkReal> x6423 = IKatan2WithCheck(IkReal(x6420),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6423.valid){
continue;
}
IkReal x6421=((1.0)*(x6423.value));
IkReal x6422=x6412;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6421)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6421)));
IkReal gconst124=(x6420*x6422);
IkReal gconst125=((1.0)*r10*x6422);
IkReal x6424=r12*r12;
IkReal x6425=((1.0)*sj0);
IkReal x6426=(cj0*r02);
IkReal x6427=x6412;
j4eval[0]=((IKabs(((((-1.0)*x6426))+(((-1.0)*r12*x6425)))))+(IKabs((((sj0*x6424*x6427))+(((-1.0)*x6425*x6427))+((r12*x6426*x6427))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6428=((-1.0)*r11);
CheckValue<IkReal> x6431 = IKatan2WithCheck(IkReal(x6428),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6431.valid){
continue;
}
IkReal x6429=((1.0)*(x6431.value));
IkReal x6430=x6412;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6429)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6429)));
IkReal gconst124=(x6428*x6430);
IkReal gconst125=((1.0)*r10*x6430);
IkReal x6432=r12*r12;
IkReal x6433=((1.0)+(((-1.0)*x6432)));
IkReal x6434=(cj2*r22*sj1);
IkReal x6435=(cj1*r22*sj2);
CheckValue<IkReal> x6442=IKPowWithIntegerCheck(x6433,-1);
if(!x6442.valid){
continue;
}
IkReal x6436=x6442.value;
CheckValue<IkReal> x6443=IKPowWithIntegerCheck(((-1.0)+x6432),-1);
if(!x6443.valid){
continue;
}
IkReal x6437=x6443.value;
IkReal x6438=((1.0)*x6436);
if((x6433) < -0.00001)
continue;
IkReal x6439=IKsqrt(x6433);
IkReal x6440=((1.0)*r12*x6437*x6439);
IkReal x6441=((((-1.0)*x6438*(r11*r11)*(r21*r21)))+(((-1.0)*x6438*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x6436))+(((-1.0)*(r22*r22))));
j4eval[0]=x6441;
j4eval[1]=IKsign(x6441);
j4eval[2]=((IKabs(((((-1.0)*x6435*x6440))+(((-1.0)*x6434*x6440)))))+(IKabs((x6435+x6434))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6444=(gconst124*r21);
IkReal x6445=(cj1*sj2);
IkReal x6446=(cj2*sj1);
IkReal x6447=(gconst125*r20);
CheckValue<IkReal> x6448 = IKatan2WithCheck(IkReal((((r22*x6446))+((r22*x6445)))),IkReal(((((-1.0)*x6445*x6447))+((x6444*x6445))+((x6444*x6446))+(((-1.0)*x6446*x6447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6448.valid){
continue;
}
CheckValue<IkReal> x6449=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6447*x6447)))+(((-1.0)*(x6444*x6444)))+(((-1.0)*(r22*r22)))+(((2.0)*x6444*x6447)))),-1);
if(!x6449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6448.value)+(((1.5707963267949)*(x6449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6450=IKsin(j4);
IkReal x6451=IKcos(j4);
IkReal x6452=(sj1*sj2);
IkReal x6453=(gconst125*r20);
IkReal x6454=(gconst124*r01);
IkReal x6455=(gconst125*r00);
IkReal x6456=(gconst125*r10);
IkReal x6457=((1.0)*x6451);
IkReal x6458=((1.0)*cj1*cj2);
IkReal x6459=((1.0)*x6450);
IkReal x6460=(gconst124*x6450);
IkReal x6461=(gconst124*x6451);
evalcond[0]=(((r21*x6460))+(((-1.0)*x6453*x6459))+(((-1.0)*r22*x6457)));
evalcond[1]=(cj0+(((-1.0)*x6456*x6459))+(((-1.0)*r12*x6457))+((r11*x6460)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6457))+((x6450*x6454))+(((-1.0)*x6455*x6459)));
evalcond[3]=(((cj2*sj1))+((r21*x6461))+((cj1*sj2))+(((-1.0)*x6453*x6457))+((r22*x6450)));
evalcond[4]=(((x6451*x6454))+((cj0*x6452))+(((-1.0)*cj0*x6458))+(((-1.0)*x6455*x6457))+((r02*x6450)));
evalcond[5]=((((-1.0)*sj0*x6458))+(((-1.0)*x6456*x6457))+((sj0*x6452))+((r11*x6461))+((r12*x6450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6462=((1.0)*sj0);
IkReal x6463=((1.0)*cj0);
CheckValue<IkReal> x6464=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6464.valid){
continue;
}
CheckValue<IkReal> x6465 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6463))+(((-1.0)*r12*x6462)))),IkReal((((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x6463))+(((-1.0)*gconst124*r11*x6462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6464.value)))+(x6465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6466=IKsin(j4);
IkReal x6467=IKcos(j4);
IkReal x6468=(sj1*sj2);
IkReal x6469=(gconst125*r20);
IkReal x6470=(gconst124*r01);
IkReal x6471=(gconst125*r00);
IkReal x6472=(gconst125*r10);
IkReal x6473=((1.0)*x6467);
IkReal x6474=((1.0)*cj1*cj2);
IkReal x6475=((1.0)*x6466);
IkReal x6476=(gconst124*x6466);
IkReal x6477=(gconst124*x6467);
evalcond[0]=((((-1.0)*r22*x6473))+(((-1.0)*x6469*x6475))+((r21*x6476)));
evalcond[1]=((((-1.0)*r12*x6473))+cj0+(((-1.0)*x6472*x6475))+((r11*x6476)));
evalcond[2]=((((-1.0)*sj0))+((x6466*x6470))+(((-1.0)*x6471*x6475))+(((-1.0)*r02*x6473)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6466))+(((-1.0)*x6469*x6473))+((r21*x6477)));
evalcond[4]=((((-1.0)*cj0*x6474))+((x6467*x6470))+((cj0*x6468))+(((-1.0)*x6471*x6473))+((r02*x6466)));
evalcond[5]=(((sj0*x6468))+(((-1.0)*x6472*x6473))+(((-1.0)*sj0*x6474))+((r11*x6477))+((r12*x6466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6478=((1.0)*gconst125);
CheckValue<IkReal> x6479=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6478)))),-1);
if(!x6479.valid){
continue;
}
CheckValue<IkReal> x6480 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6478))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6479.value)))+(x6480.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6481=IKsin(j4);
IkReal x6482=IKcos(j4);
IkReal x6483=(sj1*sj2);
IkReal x6484=(gconst125*r20);
IkReal x6485=(gconst124*r01);
IkReal x6486=(gconst125*r00);
IkReal x6487=(gconst125*r10);
IkReal x6488=((1.0)*x6482);
IkReal x6489=((1.0)*cj1*cj2);
IkReal x6490=((1.0)*x6481);
IkReal x6491=(gconst124*x6481);
IkReal x6492=(gconst124*x6482);
evalcond[0]=((((-1.0)*r22*x6488))+((r21*x6491))+(((-1.0)*x6484*x6490)));
evalcond[1]=((((-1.0)*x6487*x6490))+cj0+(((-1.0)*r12*x6488))+((r11*x6491)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6486*x6490))+(((-1.0)*r02*x6488))+((x6481*x6485)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6481))+(((-1.0)*x6484*x6488))+((r21*x6492)));
evalcond[4]=(((x6482*x6485))+(((-1.0)*x6486*x6488))+((cj0*x6483))+((r02*x6481))+(((-1.0)*cj0*x6489)));
evalcond[5]=((((-1.0)*x6487*x6488))+((r11*x6492))+((r12*x6481))+(((-1.0)*sj0*x6489))+((sj0*x6483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6493=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6493;
j4eval[1]=IKsign(x6493);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6494=((1.0)*cj5);
IkReal x6495=((((-1.0)*r01*x6494))+(((-1.0)*r00*sj5)));
j4eval[0]=x6495;
j4eval[1]=((IKabs(((((-1.0)*r20*x6494))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6496=cj5*cj5;
IkReal x6497=r11*r11;
IkReal x6498=(cj5*r10);
IkReal x6499=(r11*sj5);
IkReal x6500=(((x6496*x6497))+(((-1.0)*x6497))+(((-1.0)*x6496*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x6498*x6499)));
j4eval[0]=x6500;
j4eval[1]=IKsign(x6500);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6498))+x6499))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6501=cj5*cj5;
IkReal x6502=r11*r11;
IkReal x6503=(cj5*r10);
IkReal x6504=(r11*sj5);
CheckValue<IkReal> x6505=IKPowWithIntegerCheck(IKsign(((((2.0)*x6503*x6504))+(((-1.0)*x6501*(r10*r10)))+(((-1.0)*x6502))+(((-1.0)*(r12*r12)))+((x6501*x6502)))),-1);
if(!x6505.valid){
continue;
}
CheckValue<IkReal> x6506 = IKatan2WithCheck(IkReal(((((-1.0)*x6503))+x6504)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6505.value)))+(x6506.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6507=IKcos(j4);
IkReal x6508=IKsin(j4);
IkReal x6509=(cj5*r00);
IkReal x6510=(cj5*r10);
IkReal x6511=(r21*sj5);
IkReal x6512=(cj5*r20);
IkReal x6513=((1.0)*x6507);
IkReal x6514=((1.0)*x6508);
IkReal x6515=(sj5*x6508);
IkReal x6516=(sj5*x6507);
evalcond[0]=(((r12*x6508))+((r11*x6516))+(((-1.0)*x6510*x6513)));
evalcond[1]=(((x6508*x6511))+(((-1.0)*x6512*x6514))+(((-1.0)*r22*x6513)));
evalcond[2]=((((-1.0)*r02*x6513))+((r01*x6515))+(((-1.0)*x6509*x6514)));
evalcond[3]=((1.0)+((r11*x6515))+(((-1.0)*r12*x6513))+(((-1.0)*x6510*x6514)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6512*x6513))+((cj1*sj2))+((r22*x6508))+((x6507*x6511)));
evalcond[5]=(((r02*x6508))+((r01*x6516))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6509*x6513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6517=((1.0)*cj5);
CheckValue<IkReal> x6518=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6517)))),-1);
if(!x6518.valid){
continue;
}
CheckValue<IkReal> x6519 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6518.value)))+(x6519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6520=IKcos(j4);
IkReal x6521=IKsin(j4);
IkReal x6522=(cj5*r00);
IkReal x6523=(cj5*r10);
IkReal x6524=(r21*sj5);
IkReal x6525=(cj5*r20);
IkReal x6526=((1.0)*x6520);
IkReal x6527=((1.0)*x6521);
IkReal x6528=(sj5*x6521);
IkReal x6529=(sj5*x6520);
evalcond[0]=(((r12*x6521))+((r11*x6529))+(((-1.0)*x6523*x6526)));
evalcond[1]=(((x6521*x6524))+(((-1.0)*r22*x6526))+(((-1.0)*x6525*x6527)));
evalcond[2]=((((-1.0)*x6522*x6527))+(((-1.0)*r02*x6526))+((r01*x6528)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6526))+((r11*x6528))+(((-1.0)*x6523*x6527)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6520*x6524))+(((-1.0)*x6525*x6526))+((r22*x6521)));
evalcond[5]=((((-1.0)*x6522*x6526))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6521))+((r01*x6529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6530=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6530.valid){
continue;
}
CheckValue<IkReal> x6531 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6530.value)))+(x6531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6532=IKcos(j4);
IkReal x6533=IKsin(j4);
IkReal x6534=(cj5*r00);
IkReal x6535=(cj5*r10);
IkReal x6536=(r21*sj5);
IkReal x6537=(cj5*r20);
IkReal x6538=((1.0)*x6532);
IkReal x6539=((1.0)*x6533);
IkReal x6540=(sj5*x6533);
IkReal x6541=(sj5*x6532);
evalcond[0]=((((-1.0)*x6535*x6538))+((r11*x6541))+((r12*x6533)));
evalcond[1]=(((x6533*x6536))+(((-1.0)*x6537*x6539))+(((-1.0)*r22*x6538)));
evalcond[2]=((((-1.0)*x6534*x6539))+(((-1.0)*r02*x6538))+((r01*x6540)));
evalcond[3]=((1.0)+(((-1.0)*x6535*x6539))+(((-1.0)*r12*x6538))+((r11*x6540)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6537*x6538))+((cj1*sj2))+((r22*x6533))+((x6532*x6536)));
evalcond[5]=(((r02*x6533))+(((-1.0)*x6534*x6538))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6542=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6542;
j4eval[1]=IKsign(x6542);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6543=((1.0)*cj5);
IkReal x6544=((((-1.0)*r21*x6543))+(((-1.0)*r20*sj5)));
j4eval[0]=x6544;
j4eval[1]=((IKabs(((((-1.0)*r00*x6543))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x6544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6545=cj5*cj5;
IkReal x6546=r11*r11;
IkReal x6547=(r11*sj5);
IkReal x6548=(cj5*r10);
IkReal x6549=((((-2.0)*x6547*x6548))+(r12*r12)+(((-1.0)*x6545*x6546))+x6546+((x6545*(r10*r10))));
j4eval[0]=x6549;
j4eval[1]=IKsign(x6549);
j4eval[2]=((IKabs((x6547+(((-1.0)*x6548)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6550=cj5*cj5;
IkReal x6551=r11*r11;
IkReal x6552=(cj5*r10);
IkReal x6553=(r11*sj5);
CheckValue<IkReal> x6554=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6552*x6553))+(r12*r12)+(((-1.0)*x6550*x6551))+x6551+((x6550*(r10*r10))))),-1);
if(!x6554.valid){
continue;
}
CheckValue<IkReal> x6555 = IKatan2WithCheck(IkReal((x6553+(((-1.0)*x6552)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6554.value)))+(x6555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6556=IKcos(j4);
IkReal x6557=IKsin(j4);
IkReal x6558=(cj5*r00);
IkReal x6559=(cj5*r10);
IkReal x6560=(r21*sj5);
IkReal x6561=(cj5*r20);
IkReal x6562=((1.0)*x6556);
IkReal x6563=((1.0)*x6557);
IkReal x6564=(sj5*x6557);
IkReal x6565=(sj5*x6556);
evalcond[0]=(((r11*x6565))+((r12*x6557))+(((-1.0)*x6559*x6562)));
evalcond[1]=((((-1.0)*r22*x6562))+(((-1.0)*x6561*x6563))+((x6557*x6560)));
evalcond[2]=((((-1.0)*x6558*x6563))+(((-1.0)*r02*x6562))+((r01*x6564)));
evalcond[3]=((-1.0)+((r11*x6564))+(((-1.0)*x6559*x6563))+(((-1.0)*r12*x6562)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6561*x6562))+((r22*x6557))+((x6556*x6560)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x6557))+((cj1*cj2))+(((-1.0)*x6558*x6562))+((r01*x6565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6566=((1.0)*cj5);
CheckValue<IkReal> x6567=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6566))+(((-1.0)*r20*sj5)))),-1);
if(!x6567.valid){
continue;
}
CheckValue<IkReal> x6568 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6567.value)))+(x6568.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6569=IKcos(j4);
IkReal x6570=IKsin(j4);
IkReal x6571=(cj5*r00);
IkReal x6572=(cj5*r10);
IkReal x6573=(r21*sj5);
IkReal x6574=(cj5*r20);
IkReal x6575=((1.0)*x6569);
IkReal x6576=((1.0)*x6570);
IkReal x6577=(sj5*x6570);
IkReal x6578=(sj5*x6569);
evalcond[0]=((((-1.0)*x6572*x6575))+((r12*x6570))+((r11*x6578)));
evalcond[1]=((((-1.0)*r22*x6575))+(((-1.0)*x6574*x6576))+((x6570*x6573)));
evalcond[2]=((((-1.0)*x6571*x6576))+((r01*x6577))+(((-1.0)*r02*x6575)));
evalcond[3]=((-1.0)+(((-1.0)*x6572*x6576))+((r11*x6577))+(((-1.0)*r12*x6575)));
evalcond[4]=(((r22*x6570))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6574*x6575))+((x6569*x6573)));
evalcond[5]=((((-1.0)*x6571*x6575))+((r01*x6578))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x6570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6579 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6579.valid){
continue;
}
CheckValue<IkReal> x6580=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6579.value)+(((1.5707963267949)*(x6580.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6581=IKcos(j4);
IkReal x6582=IKsin(j4);
IkReal x6583=(cj5*r00);
IkReal x6584=(cj5*r10);
IkReal x6585=(r21*sj5);
IkReal x6586=(cj5*r20);
IkReal x6587=((1.0)*x6581);
IkReal x6588=((1.0)*x6582);
IkReal x6589=(sj5*x6582);
IkReal x6590=(sj5*x6581);
evalcond[0]=((((-1.0)*x6584*x6587))+((r11*x6590))+((r12*x6582)));
evalcond[1]=((((-1.0)*r22*x6587))+((x6582*x6585))+(((-1.0)*x6586*x6588)));
evalcond[2]=((((-1.0)*r02*x6587))+((r01*x6589))+(((-1.0)*x6583*x6588)));
evalcond[3]=((-1.0)+(((-1.0)*x6584*x6588))+((r11*x6589))+(((-1.0)*r12*x6587)));
evalcond[4]=(((cj2*sj1))+((r22*x6582))+((cj1*sj2))+((x6581*x6585))+(((-1.0)*x6586*x6587)));
evalcond[5]=(((r02*x6582))+(((-1.0)*sj1*sj2))+((r01*x6590))+((cj1*cj2))+(((-1.0)*x6583*x6587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6591=((-1.0)*r00);
IkReal x6593 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6593)==0){
continue;
}
IkReal x6592=pow(x6593,-0.5);
CheckValue<IkReal> x6594 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6591),IKFAST_ATAN2_MAGTHRESH);
if(!x6594.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6594.value));
IkReal gconst127=(r01*x6592);
IkReal gconst128=(x6591*x6592);
CheckValue<IkReal> x6595 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6595.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6595.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6596=((-1.0)*r00);
IkReal x6597=x6592;
CheckValue<IkReal> x6599 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6596),IKFAST_ATAN2_MAGTHRESH);
if(!x6599.valid){
continue;
}
IkReal x6598=((-1.0)*(x6599.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6598;
IkReal gconst126=x6598;
IkReal gconst127=(r01*x6597);
IkReal gconst128=(x6596*x6597);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6600=((1.0)*sj0);
IkReal x6601=((1.0)*gconst127);
CheckValue<IkReal> x6602=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6601)))),-1);
if(!x6602.valid){
continue;
}
CheckValue<IkReal> x6603 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6600)))),IkReal((((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x6600))+(((-1.0)*cj0*r01*x6601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6602.value)))+(x6603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6604=IKsin(j4);
IkReal x6605=IKcos(j4);
IkReal x6606=(gconst127*r01);
IkReal x6607=(sj1*sj2);
IkReal x6608=(gconst128*r10);
IkReal x6609=(gconst128*r00);
IkReal x6610=(gconst128*r20);
IkReal x6611=((1.0)*x6605);
IkReal x6612=((1.0)*cj1*cj2);
IkReal x6613=((1.0)*x6604);
IkReal x6614=(gconst127*x6605);
IkReal x6615=(gconst127*x6604);
evalcond[0]=(((r21*x6615))+(((-1.0)*r22*x6611))+(((-1.0)*x6610*x6613)));
evalcond[1]=((((-1.0)*r12*x6611))+cj0+(((-1.0)*x6608*x6613))+((r11*x6615)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6609*x6613))+(((-1.0)*r02*x6611))+((x6604*x6606)));
evalcond[3]=(((cj2*sj1))+((r21*x6614))+((r22*x6604))+((cj1*sj2))+(((-1.0)*x6610*x6611)));
evalcond[4]=(((x6605*x6606))+(((-1.0)*x6609*x6611))+(((-1.0)*cj0*x6612))+((r02*x6604))+((cj0*x6607)));
evalcond[5]=(((sj0*x6607))+(((-1.0)*x6608*x6611))+((r11*x6614))+(((-1.0)*sj0*x6612))+((r12*x6604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6616=((1.0)*gconst128);
CheckValue<IkReal> x6617 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6617.valid){
continue;
}
CheckValue<IkReal> x6618=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6616))+(((-1.0)*gconst127*r10)))),-1);
if(!x6618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6617.value)+(((1.5707963267949)*(x6618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6619=IKsin(j4);
IkReal x6620=IKcos(j4);
IkReal x6621=(gconst127*r01);
IkReal x6622=(sj1*sj2);
IkReal x6623=(gconst128*r10);
IkReal x6624=(gconst128*r00);
IkReal x6625=(gconst128*r20);
IkReal x6626=((1.0)*x6620);
IkReal x6627=((1.0)*cj1*cj2);
IkReal x6628=((1.0)*x6619);
IkReal x6629=(gconst127*x6620);
IkReal x6630=(gconst127*x6619);
evalcond[0]=(((r21*x6630))+(((-1.0)*r22*x6626))+(((-1.0)*x6625*x6628)));
evalcond[1]=((((-1.0)*r12*x6626))+cj0+((r11*x6630))+(((-1.0)*x6623*x6628)));
evalcond[2]=((((-1.0)*sj0))+((x6619*x6621))+(((-1.0)*r02*x6626))+(((-1.0)*x6624*x6628)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6619))+(((-1.0)*x6625*x6626))+((r21*x6629)));
evalcond[4]=(((r02*x6619))+(((-1.0)*cj0*x6627))+((x6620*x6621))+((cj0*x6622))+(((-1.0)*x6624*x6626)));
evalcond[5]=(((r12*x6619))+(((-1.0)*sj0*x6627))+((r11*x6629))+((sj0*x6622))+(((-1.0)*x6623*x6626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6631=((-1.0)*r01);
IkReal x6633 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6633)==0){
continue;
}
IkReal x6632=pow(x6633,-0.5);
CheckValue<IkReal> x6634 = IKatan2WithCheck(IkReal(x6631),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6634.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6634.value))));
IkReal gconst130=(x6631*x6632);
IkReal gconst131=((1.0)*r00*x6632);
CheckValue<IkReal> x6635 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6635.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6635.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6636=((-1.0)*r01);
CheckValue<IkReal> x6639 = IKatan2WithCheck(IkReal(x6636),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6639.valid){
continue;
}
IkReal x6637=((1.0)*(x6639.value));
IkReal x6638=x6632;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6637)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6637)));
IkReal gconst130=(x6636*x6638);
IkReal gconst131=((1.0)*r00*x6638);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6640=((-1.0)*r01);
CheckValue<IkReal> x6643 = IKatan2WithCheck(IkReal(x6640),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6643.valid){
continue;
}
IkReal x6641=((1.0)*(x6643.value));
IkReal x6642=x6632;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6641)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6641)));
IkReal gconst130=(x6640*x6642);
IkReal gconst131=((1.0)*r00*x6642);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6644=((-1.0)*r01);
CheckValue<IkReal> x6647 = IKatan2WithCheck(IkReal(x6644),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6647.valid){
continue;
}
IkReal x6645=((1.0)*(x6647.value));
IkReal x6646=x6632;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6645)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6645)));
IkReal gconst130=(x6644*x6646);
IkReal gconst131=((1.0)*r00*x6646);
IkReal x6648=r02*r02;
IkReal x6649=(r12*sj0);
IkReal x6650=((1.0)*cj0);
IkReal x6651=x6632;
j4eval[0]=((IKabs(((((-1.0)*x6649))+(((-1.0)*r02*x6650)))))+(IKabs((((cj0*x6648*x6651))+((r02*x6649*x6651))+(((-1.0)*x6650*x6651))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6652=((1.0)*sj0);
IkReal x6653=((1.0)*gconst130);
CheckValue<IkReal> x6654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6653))+(((-1.0)*gconst131*r21)))),-1);
if(!x6654.valid){
continue;
}
CheckValue<IkReal> x6655 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6652))+(((-1.0)*cj0*r02)))),IkReal((((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6653))+((cj0*gconst131*r00))+(((-1.0)*gconst130*r11*x6652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6654.value)))+(x6655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6656=IKsin(j4);
IkReal x6657=IKcos(j4);
IkReal x6658=(gconst131*r10);
IkReal x6659=(sj1*sj2);
IkReal x6660=(gconst131*r20);
IkReal x6661=(gconst131*r00);
IkReal x6662=((1.0)*x6657);
IkReal x6663=((1.0)*cj1*cj2);
IkReal x6664=(gconst130*x6656);
IkReal x6665=((1.0)*x6656);
IkReal x6666=(gconst130*x6657);
evalcond[0]=((((-1.0)*x6660*x6665))+((r21*x6664))+(((-1.0)*r22*x6662)));
evalcond[1]=(cj0+(((-1.0)*x6658*x6665))+((r11*x6664))+(((-1.0)*r12*x6662)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6661*x6665))+((r01*x6664))+(((-1.0)*r02*x6662)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6660*x6662))+((r21*x6666))+((r22*x6656)));
evalcond[4]=((((-1.0)*x6661*x6662))+((r02*x6656))+((r01*x6666))+(((-1.0)*cj0*x6663))+((cj0*x6659)));
evalcond[5]=((((-1.0)*x6658*x6662))+((r12*x6656))+(((-1.0)*sj0*x6663))+((r11*x6666))+((sj0*x6659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6667=((1.0)*gconst131);
CheckValue<IkReal> x6668 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6667))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6668.valid){
continue;
}
CheckValue<IkReal> x6669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6667))+(((-1.0)*gconst130*r10)))),-1);
if(!x6669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6668.value)+(((1.5707963267949)*(x6669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6670=IKsin(j4);
IkReal x6671=IKcos(j4);
IkReal x6672=(gconst131*r10);
IkReal x6673=(sj1*sj2);
IkReal x6674=(gconst131*r20);
IkReal x6675=(gconst131*r00);
IkReal x6676=((1.0)*x6671);
IkReal x6677=((1.0)*cj1*cj2);
IkReal x6678=(gconst130*x6670);
IkReal x6679=((1.0)*x6670);
IkReal x6680=(gconst130*x6671);
evalcond[0]=((((-1.0)*x6674*x6679))+(((-1.0)*r22*x6676))+((r21*x6678)));
evalcond[1]=((((-1.0)*x6672*x6679))+((r11*x6678))+cj0+(((-1.0)*r12*x6676)));
evalcond[2]=((((-1.0)*r02*x6676))+(((-1.0)*sj0))+((r01*x6678))+(((-1.0)*x6675*x6679)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6680))+(((-1.0)*x6674*x6676))+((r22*x6670)));
evalcond[4]=(((cj0*x6673))+((r02*x6670))+((r01*x6680))+(((-1.0)*x6675*x6676))+(((-1.0)*cj0*x6677)));
evalcond[5]=((((-1.0)*x6672*x6676))+((r11*x6680))+((r12*x6670))+(((-1.0)*sj0*x6677))+((sj0*x6673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6681=((1.0)*gconst131);
CheckValue<IkReal> x6682=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6681))+(((-1.0)*gconst130*r00)))),-1);
if(!x6682.valid){
continue;
}
CheckValue<IkReal> x6683 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6682.value)))+(x6683.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6684=IKsin(j4);
IkReal x6685=IKcos(j4);
IkReal x6686=(gconst131*r10);
IkReal x6687=(sj1*sj2);
IkReal x6688=(gconst131*r20);
IkReal x6689=(gconst131*r00);
IkReal x6690=((1.0)*x6685);
IkReal x6691=((1.0)*cj1*cj2);
IkReal x6692=(gconst130*x6684);
IkReal x6693=((1.0)*x6684);
IkReal x6694=(gconst130*x6685);
evalcond[0]=((((-1.0)*x6688*x6693))+((r21*x6692))+(((-1.0)*r22*x6690)));
evalcond[1]=(((r11*x6692))+(((-1.0)*x6686*x6693))+cj0+(((-1.0)*r12*x6690)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6690))+(((-1.0)*x6689*x6693))+((r01*x6692)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6688*x6690))+((r22*x6684))+((r21*x6694)));
evalcond[4]=(((r02*x6684))+(((-1.0)*x6689*x6690))+(((-1.0)*cj0*x6691))+((r01*x6694))+((cj0*x6687)));
evalcond[5]=(((r12*x6684))+((r11*x6694))+(((-1.0)*x6686*x6690))+((sj0*x6687))+(((-1.0)*sj0*x6691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6695=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6695;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6696=((1.0)*cj5);
IkReal x6697=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6696)));
j4eval[0]=x6697;
j4eval[1]=((IKabs(((((-1.0)*r20*x6696))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6698=cj5*cj5;
IkReal x6699=r01*r01;
IkReal x6700=(cj5*r00);
IkReal x6701=(r01*sj5);
IkReal x6702=(((x6698*(r00*r00)))+x6699+(r02*r02)+(((-1.0)*x6698*x6699))+(((-2.0)*x6700*x6701)));
j4eval[0]=x6702;
j4eval[1]=IKsign(x6702);
j4eval[2]=((IKabs(r02))+(IKabs((x6701+(((-1.0)*x6700))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6703=cj5*cj5;
IkReal x6704=r01*r01;
IkReal x6705=(r01*sj5);
IkReal x6706=(cj5*r00);
CheckValue<IkReal> x6707 = IKatan2WithCheck(IkReal((x6705+(((-1.0)*x6706)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6707.valid){
continue;
}
CheckValue<IkReal> x6708=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6703*x6704))+x6704+((x6703*(r00*r00)))+(r02*r02)+(((-2.0)*x6705*x6706)))),-1);
if(!x6708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6707.value)+(((1.5707963267949)*(x6708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6709=IKcos(j4);
IkReal x6710=IKsin(j4);
IkReal x6711=(cj5*r00);
IkReal x6712=(cj5*r10);
IkReal x6713=(r21*sj5);
IkReal x6714=(cj5*r20);
IkReal x6715=((1.0)*x6709);
IkReal x6716=((1.0)*x6710);
IkReal x6717=(sj5*x6710);
IkReal x6718=(sj5*x6709);
evalcond[0]=((((-1.0)*x6711*x6715))+((r02*x6710))+((r01*x6718)));
evalcond[1]=((((-1.0)*x6714*x6716))+((x6710*x6713))+(((-1.0)*r22*x6715)));
evalcond[2]=(((r11*x6717))+(((-1.0)*x6712*x6716))+(((-1.0)*r12*x6715)));
evalcond[3]=((-1.0)+(((-1.0)*x6711*x6716))+(((-1.0)*r02*x6715))+((r01*x6717)));
evalcond[4]=(((cj2*sj1))+((x6709*x6713))+((cj1*sj2))+((r22*x6710))+(((-1.0)*x6714*x6715)));
evalcond[5]=(((r11*x6718))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6712*x6715))+((r12*x6710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6719=((1.0)*cj5);
CheckValue<IkReal> x6720 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6719))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6720.valid){
continue;
}
CheckValue<IkReal> x6721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6719)))),-1);
if(!x6721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6720.value)+(((1.5707963267949)*(x6721.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6722=IKcos(j4);
IkReal x6723=IKsin(j4);
IkReal x6724=(cj5*r00);
IkReal x6725=(cj5*r10);
IkReal x6726=(r21*sj5);
IkReal x6727=(cj5*r20);
IkReal x6728=((1.0)*x6722);
IkReal x6729=((1.0)*x6723);
IkReal x6730=(sj5*x6723);
IkReal x6731=(sj5*x6722);
evalcond[0]=((((-1.0)*x6724*x6728))+((r02*x6723))+((r01*x6731)));
evalcond[1]=((((-1.0)*r22*x6728))+((x6723*x6726))+(((-1.0)*x6727*x6729)));
evalcond[2]=(((r11*x6730))+(((-1.0)*r12*x6728))+(((-1.0)*x6725*x6729)));
evalcond[3]=((-1.0)+(((-1.0)*x6724*x6729))+(((-1.0)*r02*x6728))+((r01*x6730)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6723))+((x6722*x6726))+(((-1.0)*x6727*x6728)));
evalcond[5]=(((r12*x6723))+((r11*x6731))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6725*x6728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6732=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6732.valid){
continue;
}
CheckValue<IkReal> x6733 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6732.value)))+(x6733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6734=IKcos(j4);
IkReal x6735=IKsin(j4);
IkReal x6736=(cj5*r00);
IkReal x6737=(cj5*r10);
IkReal x6738=(r21*sj5);
IkReal x6739=(cj5*r20);
IkReal x6740=((1.0)*x6734);
IkReal x6741=((1.0)*x6735);
IkReal x6742=(sj5*x6735);
IkReal x6743=(sj5*x6734);
evalcond[0]=((((-1.0)*x6736*x6740))+((r01*x6743))+((r02*x6735)));
evalcond[1]=((((-1.0)*r22*x6740))+((x6735*x6738))+(((-1.0)*x6739*x6741)));
evalcond[2]=((((-1.0)*r12*x6740))+((r11*x6742))+(((-1.0)*x6737*x6741)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6740))+(((-1.0)*x6736*x6741))+((r01*x6742)));
evalcond[4]=(((r22*x6735))+((cj2*sj1))+((x6734*x6738))+((cj1*sj2))+(((-1.0)*x6739*x6740)));
evalcond[5]=(((r11*x6743))+((r12*x6735))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6737*x6740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6744=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6744;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6744);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6745=((1.0)*cj5);
IkReal x6746=((((-1.0)*r21*x6745))+(((-1.0)*r20*sj5)));
j4eval[0]=x6746;
j4eval[1]=((IKabs(((((-1.0)*r10*x6745))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6747=(r01*sj5);
IkReal x6748=(cj1*sj2);
IkReal x6749=(cj2*sj1);
IkReal x6750=((1.0)*r02);
IkReal x6751=((1.0)*cj5*r00);
IkReal x6752=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6752;
j4eval[1]=((IKabs((((x6747*x6748))+((x6747*x6749))+(((-1.0)*x6748*x6751))+(((-1.0)*x6749*x6751)))))+(IKabs(((((-1.0)*x6748*x6750))+(((-1.0)*x6749*x6750))))));
j4eval[2]=IKsign(x6752);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6753=(r01*sj5);
IkReal x6754=(cj1*sj2);
IkReal x6755=(cj2*sj1);
IkReal x6756=((1.0)*r02);
IkReal x6757=((1.0)*cj5*r00);
CheckValue<IkReal> x6758 = IKatan2WithCheck(IkReal(((((-1.0)*x6755*x6757))+((x6753*x6755))+((x6753*x6754))+(((-1.0)*x6754*x6757)))),IkReal(((((-1.0)*x6755*x6756))+(((-1.0)*x6754*x6756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6758.valid){
continue;
}
CheckValue<IkReal> x6759=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6758.value)+(((1.5707963267949)*(x6759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6760=IKcos(j4);
IkReal x6761=IKsin(j4);
IkReal x6762=(cj5*r00);
IkReal x6763=(cj5*r10);
IkReal x6764=(r21*sj5);
IkReal x6765=(cj5*r20);
IkReal x6766=((1.0)*x6760);
IkReal x6767=((1.0)*x6761);
IkReal x6768=(sj5*x6761);
IkReal x6769=(sj5*x6760);
evalcond[0]=((((-1.0)*x6762*x6766))+((r01*x6769))+((r02*x6761)));
evalcond[1]=((((-1.0)*r22*x6766))+(((-1.0)*x6765*x6767))+((x6761*x6764)));
evalcond[2]=(((r11*x6768))+(((-1.0)*r12*x6766))+(((-1.0)*x6763*x6767)));
evalcond[3]=((1.0)+(((-1.0)*x6762*x6767))+((r01*x6768))+(((-1.0)*r02*x6766)));
evalcond[4]=(((cj2*sj1))+((r22*x6761))+((cj1*sj2))+(((-1.0)*x6765*x6766))+((x6760*x6764)));
evalcond[5]=(((r12*x6761))+(((-1.0)*sj1*sj2))+((r11*x6769))+((cj1*cj2))+(((-1.0)*x6763*x6766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6770=((1.0)*cj5);
CheckValue<IkReal> x6771 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6771.valid){
continue;
}
CheckValue<IkReal> x6772=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6770))+(((-1.0)*r20*sj5)))),-1);
if(!x6772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6771.value)+(((1.5707963267949)*(x6772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6773=IKcos(j4);
IkReal x6774=IKsin(j4);
IkReal x6775=(cj5*r00);
IkReal x6776=(cj5*r10);
IkReal x6777=(r21*sj5);
IkReal x6778=(cj5*r20);
IkReal x6779=((1.0)*x6773);
IkReal x6780=((1.0)*x6774);
IkReal x6781=(sj5*x6774);
IkReal x6782=(sj5*x6773);
evalcond[0]=(((r02*x6774))+(((-1.0)*x6775*x6779))+((r01*x6782)));
evalcond[1]=((((-1.0)*r22*x6779))+(((-1.0)*x6778*x6780))+((x6774*x6777)));
evalcond[2]=(((r11*x6781))+(((-1.0)*r12*x6779))+(((-1.0)*x6776*x6780)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6779))+((r01*x6781))+(((-1.0)*x6775*x6780)));
evalcond[4]=((((-1.0)*x6778*x6779))+((cj2*sj1))+((cj1*sj2))+((r22*x6774))+((x6773*x6777)));
evalcond[5]=(((r12*x6774))+((r11*x6782))+(((-1.0)*sj1*sj2))+(((-1.0)*x6776*x6779))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6783 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6783.valid){
continue;
}
CheckValue<IkReal> x6784=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6783.value)+(((1.5707963267949)*(x6784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6785=IKcos(j4);
IkReal x6786=IKsin(j4);
IkReal x6787=(cj5*r00);
IkReal x6788=(cj5*r10);
IkReal x6789=(r21*sj5);
IkReal x6790=(cj5*r20);
IkReal x6791=((1.0)*x6785);
IkReal x6792=((1.0)*x6786);
IkReal x6793=(sj5*x6786);
IkReal x6794=(sj5*x6785);
evalcond[0]=(((r01*x6794))+((r02*x6786))+(((-1.0)*x6787*x6791)));
evalcond[1]=((((-1.0)*r22*x6791))+(((-1.0)*x6790*x6792))+((x6786*x6789)));
evalcond[2]=((((-1.0)*x6788*x6792))+((r11*x6793))+(((-1.0)*r12*x6791)));
evalcond[3]=((1.0)+((r01*x6793))+(((-1.0)*x6787*x6792))+(((-1.0)*r02*x6791)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6786))+((x6785*x6789))+(((-1.0)*x6790*x6791)));
evalcond[5]=(((r12*x6786))+(((-1.0)*sj1*sj2))+(((-1.0)*x6788*x6791))+((r11*x6794))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6795=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6795);
rxp1_1=(px*r21);
rxp1_2=(r11*x6795);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6796=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6796);
rxp1_1=(px*r21);
rxp1_2=(r11*x6796);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6797=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6797);
rxp1_1=(px*r21);
rxp1_2=(r11*x6797);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6800=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6800.valid){
continue;
}
IkReal x6798=x6800.value;
IkReal x6799=(sj0*x6798);
cj4array[0]=(((cj1*cj2*x6799))+(((-1.0)*sj1*sj2*x6799)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6801=IKsin(j4);
IkReal x6802=IKcos(j4);
IkReal x6803=(r21*sj5);
IkReal x6804=((1.0)*cj5*r20);
evalcond[0]=(r02*x6801);
evalcond[1]=((((-1.0)*r02*x6802))+(((-1.0)*sj0)));
evalcond[2]=(((x6801*x6803))+(((-1.0)*x6801*x6804)));
evalcond[3]=(((r11*sj5*x6801))+(((-1.0)*cj5*r10*x6801)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6802*x6804))+((x6802*x6803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6807=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6807.valid){
continue;
}
IkReal x6805=x6807.value;
IkReal x6806=((1.0)*x6805);
cj4array[0]=((((-1.0)*cj2*sj1*x6806))+(((-1.0)*cj1*sj2*x6806)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6808=IKsin(j4);
IkReal x6809=IKcos(j4);
IkReal x6810=((1.0)*sj0);
IkReal x6811=((1.0)*cj5);
IkReal x6812=(sj5*x6808);
evalcond[0]=(r02*x6808);
evalcond[1]=((((-1.0)*r02*x6809))+(((-1.0)*x6810)));
evalcond[2]=(((r21*x6812))+(((-1.0)*r20*x6808*x6811)));
evalcond[3]=(((r11*x6812))+(((-1.0)*r10*x6808*x6811)));
evalcond[4]=(((r11*sj5*x6809))+(((-1.0)*r10*x6809*x6811))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6813=IKPowWithIntegerCheck(r02,-1);
if(!x6813.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6813.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6814=IKsin(j4);
IkReal x6815=IKcos(j4);
IkReal x6816=(r21*sj5);
IkReal x6817=((1.0)*cj5);
IkReal x6818=(r11*sj5);
evalcond[0]=(r02*x6814);
evalcond[1]=((((-1.0)*r20*x6814*x6817))+((x6814*x6816)));
evalcond[2]=(((x6814*x6818))+(((-1.0)*r10*x6814*x6817)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6815*x6817))+((x6815*x6816)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x6815*x6818))+((sj0*sj1*sj2))+(((-1.0)*r10*x6815*x6817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6819=((1.0)*sj0);
IkReal x6820=((1.0)*cj0);
CheckValue<IkReal> x6821 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6820))+(((-1.0)*r12*x6819)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x6819))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6821.valid){
continue;
}
CheckValue<IkReal> x6822=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6821.value)+(((1.5707963267949)*(x6822.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6823=IKsin(j4);
IkReal x6824=IKcos(j4);
IkReal x6825=(cj5*r00);
IkReal x6826=(cj5*r10);
IkReal x6827=(r21*sj5);
IkReal x6828=(sj1*sj2);
IkReal x6829=(cj5*r20);
IkReal x6830=((1.0)*x6824);
IkReal x6831=((1.0)*cj1*cj2);
IkReal x6832=((1.0)*x6823);
IkReal x6833=(sj5*x6823);
IkReal x6834=(sj5*x6824);
evalcond[0]=((((-1.0)*r22*x6830))+((x6823*x6827))+(((-1.0)*x6829*x6832)));
evalcond[1]=((((-1.0)*x6826*x6832))+cj0+(((-1.0)*r12*x6830))+((r11*x6833)));
evalcond[2]=((((-1.0)*x6825*x6832))+(((-1.0)*sj0))+(((-1.0)*r02*x6830))+((r01*x6833)));
evalcond[3]=(((cj2*sj1))+((r22*x6823))+((x6824*x6827))+((cj1*sj2))+(((-1.0)*x6829*x6830)));
evalcond[4]=((((-1.0)*x6825*x6830))+((r02*x6823))+((r01*x6834))+(((-1.0)*cj0*x6831))+((cj0*x6828)));
evalcond[5]=(((sj0*x6828))+(((-1.0)*x6826*x6830))+(((-1.0)*sj0*x6831))+((r11*x6834))+((r12*x6823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6835=((1.0)*cj5);
CheckValue<IkReal> x6836 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6835))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6836.valid){
continue;
}
CheckValue<IkReal> x6837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6835)))),-1);
if(!x6837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6836.value)+(((1.5707963267949)*(x6837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6838=IKsin(j4);
IkReal x6839=IKcos(j4);
IkReal x6840=(cj5*r00);
IkReal x6841=(cj5*r10);
IkReal x6842=(r21*sj5);
IkReal x6843=(sj1*sj2);
IkReal x6844=(cj5*r20);
IkReal x6845=((1.0)*x6839);
IkReal x6846=((1.0)*cj1*cj2);
IkReal x6847=((1.0)*x6838);
IkReal x6848=(sj5*x6838);
IkReal x6849=(sj5*x6839);
evalcond[0]=(((x6838*x6842))+(((-1.0)*r22*x6845))+(((-1.0)*x6844*x6847)));
evalcond[1]=(cj0+((r11*x6848))+(((-1.0)*x6841*x6847))+(((-1.0)*r12*x6845)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6845))+((r01*x6848))+(((-1.0)*x6840*x6847)));
evalcond[3]=(((cj2*sj1))+((r22*x6838))+((cj1*sj2))+((x6839*x6842))+(((-1.0)*x6844*x6845)));
evalcond[4]=(((r02*x6838))+((cj0*x6843))+((r01*x6849))+(((-1.0)*cj0*x6846))+(((-1.0)*x6840*x6845)));
evalcond[5]=(((r11*x6849))+(((-1.0)*x6841*x6845))+((r12*x6838))+(((-1.0)*sj0*x6846))+((sj0*x6843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6850=((1.0)*cj5);
CheckValue<IkReal> x6851=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6850)))),-1);
if(!x6851.valid){
continue;
}
CheckValue<IkReal> x6852 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6850))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6851.value)))+(x6852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6853=IKsin(j4);
IkReal x6854=IKcos(j4);
IkReal x6855=(cj5*r00);
IkReal x6856=(cj5*r10);
IkReal x6857=(r21*sj5);
IkReal x6858=(sj1*sj2);
IkReal x6859=(cj5*r20);
IkReal x6860=((1.0)*x6854);
IkReal x6861=((1.0)*cj1*cj2);
IkReal x6862=((1.0)*x6853);
IkReal x6863=(sj5*x6853);
IkReal x6864=(sj5*x6854);
evalcond[0]=(((x6853*x6857))+(((-1.0)*r22*x6860))+(((-1.0)*x6859*x6862)));
evalcond[1]=(((r11*x6863))+cj0+(((-1.0)*r12*x6860))+(((-1.0)*x6856*x6862)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6855*x6862))+(((-1.0)*r02*x6860))+((r01*x6863)));
evalcond[3]=(((cj2*sj1))+((r22*x6853))+((cj1*sj2))+(((-1.0)*x6859*x6860))+((x6854*x6857)));
evalcond[4]=(((r02*x6853))+(((-1.0)*x6855*x6860))+((cj0*x6858))+((r01*x6864))+(((-1.0)*cj0*x6861)));
evalcond[5]=(((sj0*x6858))+((r11*x6864))+((r12*x6853))+(((-1.0)*sj0*x6861))+(((-1.0)*x6856*x6860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6865=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6865;
j0eval[1]=IKsign(x6865);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6866=cj5*cj5;
IkReal x6867=r21*r21;
IkReal x6868=(cj2*sj1);
IkReal x6869=(cj1*sj2);
IkReal x6870=(r21*sj5);
IkReal x6871=((1.0)*cj5*r20);
IkReal x6872=((((-1.0)*x6866*x6867))+(r22*r22)+x6867+((x6866*(r20*r20)))+(((-2.0)*cj5*r20*x6870)));
j4eval[0]=x6872;
j4eval[1]=IKsign(x6872);
j4eval[2]=((IKabs(((((-1.0)*x6868*x6871))+(((-1.0)*x6869*x6871))+((x6868*x6870))+((x6869*x6870)))))+(IKabs((((r22*x6868))+((r22*x6869))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6873=cj1*cj1;
IkReal x6874=(cj2*sj2);
IkReal x6875=(cj2*sj1);
IkReal x6876=(cj1*sj1);
j0eval[0]=((((-2.0)*x6873*x6874))+(((-2.0)*cj1*cj2*x6875))+(((-1.14255568581477)*cj1*x6875))+x6876+x6874+(((-1.14255568581477)*sj2*x6873)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6875)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.06387083990023)*py))+(((-0.507498115261088)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.06387083990023)*py))+(((-0.507498115261088)*px))))+IKsqr(((((2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.06387083990023)*py))+(((-0.507498115261088)*px))), ((((2.06387083990023)*px))+(((0.507498115261088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6877=IKsin(j0);
IkReal x6878=IKcos(j0);
evalcond[0]=((((-0.11235)*x6877))+(((0.4569)*x6878))+(((-1.0)*px)));
evalcond[1]=((((0.4569)*x6877))+(((-1.0)*py))+(((0.11235)*x6878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6879=((1.0)*cj5);
IkReal x6880=((((-1.0)*r01*x6879))+(((-1.0)*r00*sj5)));
j4eval[0]=x6880;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6879))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6880);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6881=((1.0)*cj5);
IkReal x6882=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6881)));
j4eval[0]=x6882;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6881))))));
j4eval[2]=IKsign(x6882);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6883=cj5*cj5;
IkReal x6884=((1.0)*sj5);
IkReal x6885=(cj5*r20);
IkReal x6886=(r11*r21);
IkReal x6887=((((-1.0)*x6883*x6886))+((r10*r20*x6883))+((r12*r22))+x6886+(((-1.0)*r11*x6884*x6885))+(((-1.0)*cj5*r10*r21*x6884)));
j4eval[0]=x6887;
j4eval[1]=IKsign(x6887);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x6885))+(((-1.0)*cj0*r21*x6884))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6888=cj5*cj5;
IkReal x6889=((1.0)*sj5);
IkReal x6890=(cj5*r20);
IkReal x6891=(r11*r21);
CheckValue<IkReal> x6892=IKPowWithIntegerCheck(IKsign((((r10*r20*x6888))+((r12*r22))+(((-1.0)*r11*x6889*x6890))+(((-1.0)*x6888*x6891))+x6891+(((-1.0)*cj5*r10*r21*x6889)))),-1);
if(!x6892.valid){
continue;
}
CheckValue<IkReal> x6893 = IKatan2WithCheck(IkReal((((cj0*x6890))+(((-1.0)*cj0*r21*x6889)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6892.value)))+(x6893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6894=IKsin(j4);
IkReal x6895=IKcos(j4);
IkReal x6896=((1.0)*sj0);
IkReal x6897=(cj5*r00);
IkReal x6898=(r11*sj5);
IkReal x6899=(cj5*r10);
IkReal x6900=(r21*sj5);
IkReal x6901=(cj5*r20);
IkReal x6902=(r01*sj5);
IkReal x6903=((1.0)*x6895);
IkReal x6904=((1.0)*x6894);
evalcond[0]=((((-1.0)*r22*x6903))+((x6894*x6900))+(((-1.0)*x6901*x6904)));
evalcond[1]=((((-1.0)*x6900*x6903))+(((-1.0)*r22*x6904))+((x6895*x6901)));
evalcond[2]=(((x6894*x6898))+cj0+(((-1.0)*r12*x6903))+(((-1.0)*x6899*x6904)));
evalcond[3]=((((-1.0)*r02*x6903))+((x6894*x6902))+(((-1.0)*x6896))+(((-1.0)*x6897*x6904)));
evalcond[4]=(((x6895*x6897))+(((-1.0)*r02*x6904))+(((-1.0)*cj0))+(((-1.0)*x6902*x6903)));
evalcond[5]=(((x6895*x6899))+(((-1.0)*r12*x6904))+(((-1.0)*x6898*x6903))+(((-1.0)*x6896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6905=((1.0)*cj5);
CheckValue<IkReal> x6906=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6905)))),-1);
if(!x6906.valid){
continue;
}
CheckValue<IkReal> x6907 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6905))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6906.value)))+(x6907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6908=IKsin(j4);
IkReal x6909=IKcos(j4);
IkReal x6910=((1.0)*sj0);
IkReal x6911=(cj5*r00);
IkReal x6912=(r11*sj5);
IkReal x6913=(cj5*r10);
IkReal x6914=(r21*sj5);
IkReal x6915=(cj5*r20);
IkReal x6916=(r01*sj5);
IkReal x6917=((1.0)*x6909);
IkReal x6918=((1.0)*x6908);
evalcond[0]=((((-1.0)*r22*x6917))+((x6908*x6914))+(((-1.0)*x6915*x6918)));
evalcond[1]=(((x6909*x6915))+(((-1.0)*r22*x6918))+(((-1.0)*x6914*x6917)));
evalcond[2]=(cj0+(((-1.0)*r12*x6917))+((x6908*x6912))+(((-1.0)*x6913*x6918)));
evalcond[3]=((((-1.0)*x6911*x6918))+(((-1.0)*x6910))+((x6908*x6916))+(((-1.0)*r02*x6917)));
evalcond[4]=(((x6909*x6911))+(((-1.0)*x6916*x6917))+(((-1.0)*r02*x6918))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6912*x6917))+((x6909*x6913))+(((-1.0)*r12*x6918))+(((-1.0)*x6910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6919=((1.0)*cj5);
CheckValue<IkReal> x6920=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6919)))),-1);
if(!x6920.valid){
continue;
}
CheckValue<IkReal> x6921 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6920.value)))+(x6921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6922=IKsin(j4);
IkReal x6923=IKcos(j4);
IkReal x6924=((1.0)*sj0);
IkReal x6925=(cj5*r00);
IkReal x6926=(r11*sj5);
IkReal x6927=(cj5*r10);
IkReal x6928=(r21*sj5);
IkReal x6929=(cj5*r20);
IkReal x6930=(r01*sj5);
IkReal x6931=((1.0)*x6923);
IkReal x6932=((1.0)*x6922);
evalcond[0]=(((x6922*x6928))+(((-1.0)*r22*x6931))+(((-1.0)*x6929*x6932)));
evalcond[1]=(((x6923*x6929))+(((-1.0)*r22*x6932))+(((-1.0)*x6928*x6931)));
evalcond[2]=(cj0+((x6922*x6926))+(((-1.0)*r12*x6931))+(((-1.0)*x6927*x6932)));
evalcond[3]=(((x6922*x6930))+(((-1.0)*x6925*x6932))+(((-1.0)*r02*x6931))+(((-1.0)*x6924)));
evalcond[4]=(((x6923*x6925))+(((-1.0)*x6930*x6931))+(((-1.0)*r02*x6932))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6926*x6931))+((x6923*x6927))+(((-1.0)*r12*x6932))+(((-1.0)*x6924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.29354345611924)*px))+(((2.24409186529617)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.29354345611924)*px))+(((2.24409186529617)*py))))+IKsqr(((((2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.29354345611924)*px))+(((2.24409186529617)*py))), ((((2.24409186529617)*px))+(((8.29354345611924)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6933=IKsin(j0);
IkReal x6934=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.11235)*x6933))+(((0.0304)*x6934)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x6934))+(((0.0304)*x6933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6935=((1.0)*cj5);
IkReal x6936=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6935)));
j4eval[0]=x6936;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6935))))));
j4eval[2]=IKsign(x6936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6937=cj5*cj5;
IkReal x6938=((1.0)*r21);
IkReal x6939=(cj5*sj5);
IkReal x6940=((1.0)*r20);
IkReal x6941=((((-1.0)*r01*x6939*x6940))+(((-1.0)*r00*x6938*x6939))+((r01*r21))+(((-1.0)*r01*x6937*x6938))+((r00*r20*x6937))+((r02*r22)));
j4eval[0]=x6941;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6940))))));
j4eval[2]=IKsign(x6941);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6942=cj5*cj5;
IkReal x6943=(r21*sj5);
IkReal x6944=(r11*r21);
IkReal x6945=((1.0)*cj5*r20);
IkReal x6946=((((-1.0)*x6942*x6944))+(((-1.0)*cj5*r10*x6943))+((r12*r22))+(((-1.0)*r11*sj5*x6945))+x6944+((r10*r20*x6942)));
j4eval[0]=x6946;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6945))+((sj0*x6943))))));
j4eval[2]=IKsign(x6946);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6947=cj5*cj5;
IkReal x6948=(r21*sj5);
IkReal x6949=(r11*r21);
IkReal x6950=((1.0)*cj5*r20);
CheckValue<IkReal> x6951=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x6948))+(((-1.0)*x6947*x6949))+((r12*r22))+(((-1.0)*r11*sj5*x6950))+x6949+((r10*r20*x6947)))),-1);
if(!x6951.valid){
continue;
}
CheckValue<IkReal> x6952 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6950))+((sj0*x6948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6951.value)))+(x6952.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6953=IKsin(j4);
IkReal x6954=IKcos(j4);
IkReal x6955=(r11*sj5);
IkReal x6956=(cj5*r00);
IkReal x6957=(cj5*r10);
IkReal x6958=(r21*sj5);
IkReal x6959=(cj5*r20);
IkReal x6960=(r01*sj5);
IkReal x6961=((1.0)*x6954);
IkReal x6962=((1.0)*x6953);
evalcond[0]=((((-1.0)*x6959*x6962))+(((-1.0)*r22*x6961))+((x6953*x6958)));
evalcond[1]=((((-1.0)*x6958*x6961))+(((-1.0)*r22*x6962))+((x6954*x6959)));
evalcond[2]=(cj0+(((-1.0)*r12*x6961))+(((-1.0)*x6957*x6962))+((x6953*x6955)));
evalcond[3]=((((-1.0)*r02*x6962))+cj0+(((-1.0)*x6960*x6961))+((x6954*x6956)));
evalcond[4]=(sj0+(((-1.0)*r12*x6962))+((x6954*x6957))+(((-1.0)*x6955*x6961)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6961))+((x6953*x6960))+(((-1.0)*x6956*x6962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6963=cj5*cj5;
IkReal x6964=((1.0)*r21);
IkReal x6965=(cj5*sj5);
IkReal x6966=((1.0)*r20);
CheckValue<IkReal> x6967 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6967.valid){
continue;
}
CheckValue<IkReal> x6968=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6965*x6966))+(((-1.0)*r01*x6963*x6964))+((r01*r21))+((r00*r20*x6963))+(((-1.0)*r00*x6964*x6965))+((r02*r22)))),-1);
if(!x6968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6967.value)+(((1.5707963267949)*(x6968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6969=IKsin(j4);
IkReal x6970=IKcos(j4);
IkReal x6971=(r11*sj5);
IkReal x6972=(cj5*r00);
IkReal x6973=(cj5*r10);
IkReal x6974=(r21*sj5);
IkReal x6975=(cj5*r20);
IkReal x6976=(r01*sj5);
IkReal x6977=((1.0)*x6970);
IkReal x6978=((1.0)*x6969);
evalcond[0]=(((x6969*x6974))+(((-1.0)*x6975*x6978))+(((-1.0)*r22*x6977)));
evalcond[1]=((((-1.0)*x6974*x6977))+(((-1.0)*r22*x6978))+((x6970*x6975)));
evalcond[2]=(((x6969*x6971))+cj0+(((-1.0)*r12*x6977))+(((-1.0)*x6973*x6978)));
evalcond[3]=((((-1.0)*r02*x6978))+cj0+(((-1.0)*x6976*x6977))+((x6970*x6972)));
evalcond[4]=(sj0+(((-1.0)*r12*x6978))+(((-1.0)*x6971*x6977))+((x6970*x6973)));
evalcond[5]=(((x6969*x6976))+(((-1.0)*sj0))+(((-1.0)*r02*x6977))+(((-1.0)*x6972*x6978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6979=((1.0)*cj5);
CheckValue<IkReal> x6980 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6979))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6980.valid){
continue;
}
CheckValue<IkReal> x6981=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6979)))),-1);
if(!x6981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6980.value)+(((1.5707963267949)*(x6981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6982=IKsin(j4);
IkReal x6983=IKcos(j4);
IkReal x6984=(r11*sj5);
IkReal x6985=(cj5*r00);
IkReal x6986=(cj5*r10);
IkReal x6987=(r21*sj5);
IkReal x6988=(cj5*r20);
IkReal x6989=(r01*sj5);
IkReal x6990=((1.0)*x6983);
IkReal x6991=((1.0)*x6982);
evalcond[0]=(((x6982*x6987))+(((-1.0)*r22*x6990))+(((-1.0)*x6988*x6991)));
evalcond[1]=(((x6983*x6988))+(((-1.0)*r22*x6991))+(((-1.0)*x6987*x6990)));
evalcond[2]=((((-1.0)*r12*x6990))+cj0+((x6982*x6984))+(((-1.0)*x6986*x6991)));
evalcond[3]=(cj0+((x6983*x6985))+(((-1.0)*r02*x6991))+(((-1.0)*x6989*x6990)));
evalcond[4]=((((-1.0)*r12*x6991))+sj0+(((-1.0)*x6984*x6990))+((x6983*x6986)));
evalcond[5]=((((-1.0)*sj0))+((x6982*x6989))+(((-1.0)*x6985*x6991))+(((-1.0)*r02*x6990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6992=((1.0)*sj5);
IkReal x6993=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x6993))+(((-1.0)*r10*x6992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6992))+(((-1.0)*r01*x6993)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x6993))+(((-1.0)*r10*x6992))))+IKsqr(((((-1.0)*r00*x6992))+(((-1.0)*r01*x6993))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x6993))+(((-1.0)*r10*x6992))), ((((-1.0)*r00*x6992))+(((-1.0)*r01*x6993))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6994=IKsin(j0);
IkReal x6995=IKcos(j0);
IkReal x6996=((1.0)*cj5);
IkReal x6997=((0.08535)*sj5);
IkReal x6998=((0.08535)*cj5);
IkReal x6999=((1.0)*sj5);
evalcond[0]=((((-1.0)*r00*x6999))+(((-1.0)*x6995))+(((-1.0)*r01*x6996)));
evalcond[1]=((((-1.0)*r11*x6996))+(((-1.0)*x6994))+(((-1.0)*r10*x6999)));
evalcond[2]=((((-0.11235)*x6994))+(((-1.0)*r00*x6997))+(((-1.0)*px))+(((-1.0)*r01*x6998)));
evalcond[3]=((((-1.0)*r11*x6998))+(((0.11235)*x6995))+(((-1.0)*r10*x6997))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7000=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7000;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7000);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7001=((1.0)*cj5);
IkReal x7002=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7001)));
j4eval[0]=x7002;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7001))))));
j4eval[2]=IKsign(x7002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7003=cj5*cj5;
IkReal x7004=r21*r21;
IkReal x7005=(r21*sj5);
IkReal x7006=(cj5*r20);
IkReal x7007=(x7004+(r22*r22)+(((-2.0)*x7005*x7006))+(((-1.0)*x7003*x7004))+((x7003*(r20*r20))));
j4eval[0]=x7007;
j4eval[1]=IKsign(x7007);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7006))+x7005))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7008=cj5*cj5;
IkReal x7009=r21*r21;
IkReal x7010=(r21*sj5);
IkReal x7011=(cj5*r20);
CheckValue<IkReal> x7012 = IKatan2WithCheck(IkReal(r22),IkReal((x7010+(((-1.0)*x7011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7012.valid){
continue;
}
CheckValue<IkReal> x7013=IKPowWithIntegerCheck(IKsign((x7009+(r22*r22)+((x7008*(r20*r20)))+(((-1.0)*x7008*x7009))+(((-2.0)*x7010*x7011)))),-1);
if(!x7013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7012.value)+(((1.5707963267949)*(x7013.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7014=IKsin(j4);
IkReal x7015=IKcos(j4);
IkReal x7016=(r11*sj5);
IkReal x7017=(r21*sj5);
IkReal x7018=(cj5*r00);
IkReal x7019=(cj5*r20);
IkReal x7020=(r01*sj5);
IkReal x7021=(cj5*r10);
IkReal x7022=((1.0)*x7015);
IkReal x7023=((1.0)*x7014);
evalcond[0]=((((-1.0)*r22*x7022))+(((-1.0)*x7019*x7023))+((x7014*x7017)));
evalcond[1]=(((x7015*x7018))+(((-1.0)*r02*x7023))+(((-1.0)*x7020*x7022)));
evalcond[2]=((((-1.0)*r12*x7023))+(((-1.0)*x7016*x7022))+((x7015*x7021)));
evalcond[3]=((((-1.0)*r12*x7022))+(((-1.0)*x7021*x7023))+cj0+((x7014*x7016)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7023))+((x7015*x7019))+(((-1.0)*x7017*x7022)));
evalcond[5]=((((-1.0)*sj0))+((x7014*x7020))+(((-1.0)*x7018*x7023))+(((-1.0)*r02*x7022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7024=((1.0)*cj5);
CheckValue<IkReal> x7025 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7025.valid){
continue;
}
CheckValue<IkReal> x7026=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7024)))),-1);
if(!x7026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7025.value)+(((1.5707963267949)*(x7026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7027=IKsin(j4);
IkReal x7028=IKcos(j4);
IkReal x7029=(r11*sj5);
IkReal x7030=(r21*sj5);
IkReal x7031=(cj5*r00);
IkReal x7032=(cj5*r20);
IkReal x7033=(r01*sj5);
IkReal x7034=(cj5*r10);
IkReal x7035=((1.0)*x7028);
IkReal x7036=((1.0)*x7027);
evalcond[0]=(((x7027*x7030))+(((-1.0)*r22*x7035))+(((-1.0)*x7032*x7036)));
evalcond[1]=((((-1.0)*r02*x7036))+(((-1.0)*x7033*x7035))+((x7028*x7031)));
evalcond[2]=((((-1.0)*r12*x7036))+((x7028*x7034))+(((-1.0)*x7029*x7035)));
evalcond[3]=((((-1.0)*x7034*x7036))+cj0+((x7027*x7029))+(((-1.0)*r12*x7035)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7036))+((x7028*x7032))+(((-1.0)*x7030*x7035)));
evalcond[5]=(((x7027*x7033))+(((-1.0)*sj0))+(((-1.0)*x7031*x7036))+(((-1.0)*r02*x7035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7037 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7037.valid){
continue;
}
CheckValue<IkReal> x7038=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7037.value)+(((1.5707963267949)*(x7038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7039=IKsin(j4);
IkReal x7040=IKcos(j4);
IkReal x7041=(r11*sj5);
IkReal x7042=(r21*sj5);
IkReal x7043=(cj5*r00);
IkReal x7044=(cj5*r20);
IkReal x7045=(r01*sj5);
IkReal x7046=(cj5*r10);
IkReal x7047=((1.0)*x7040);
IkReal x7048=((1.0)*x7039);
evalcond[0]=(((x7039*x7042))+(((-1.0)*r22*x7047))+(((-1.0)*x7044*x7048)));
evalcond[1]=((((-1.0)*r02*x7048))+(((-1.0)*x7045*x7047))+((x7040*x7043)));
evalcond[2]=((((-1.0)*r12*x7048))+(((-1.0)*x7041*x7047))+((x7040*x7046)));
evalcond[3]=(((x7039*x7041))+cj0+(((-1.0)*r12*x7047))+(((-1.0)*x7046*x7048)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7048))+(((-1.0)*x7042*x7047))+((x7040*x7044)));
evalcond[5]=(((x7039*x7045))+(((-1.0)*sj0))+(((-1.0)*r02*x7047))+(((-1.0)*x7043*x7048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7049=IKcos(j0);
IkReal x7050=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.11235)*x7050))+(((-0.21325)*x7049)));
evalcond[1]=((((-0.21325)*x7050))+(((0.11235)*x7049))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7051=((1.0)*cj5);
IkReal x7052=((((-1.0)*r01*x7051))+(((-1.0)*r00*sj5)));
j4eval[0]=x7052;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x7051))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x7052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7053=cj5*cj5;
IkReal x7054=((1.0)*r21);
IkReal x7055=(cj5*sj5);
IkReal x7056=((1.0)*r20);
IkReal x7057=(((r00*r20*x7053))+(((-1.0)*r01*x7053*x7054))+((r01*r21))+(((-1.0)*r00*x7054*x7055))+(((-1.0)*r01*x7055*x7056))+((r02*r22)));
j4eval[0]=x7057;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7056))))));
j4eval[2]=IKsign(x7057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7058=cj5*cj5;
IkReal x7059=(r21*sj5);
IkReal x7060=(r11*r21);
IkReal x7061=((1.0)*cj5*r20);
IkReal x7062=(x7060+((r10*r20*x7058))+(((-1.0)*x7058*x7060))+((r12*r22))+(((-1.0)*cj5*r10*x7059))+(((-1.0)*r11*sj5*x7061)));
j4eval[0]=x7062;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7061))+((sj0*x7059))))));
j4eval[2]=IKsign(x7062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7063=cj5*cj5;
IkReal x7064=(r21*sj5);
IkReal x7065=(r11*r21);
IkReal x7066=((1.0)*cj5*r20);
CheckValue<IkReal> x7067 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7066))+((sj0*x7064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7067.valid){
continue;
}
CheckValue<IkReal> x7068=IKPowWithIntegerCheck(IKsign((x7065+(((-1.0)*x7063*x7065))+((r12*r22))+(((-1.0)*r11*sj5*x7066))+(((-1.0)*cj5*r10*x7064))+((r10*r20*x7063)))),-1);
if(!x7068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7067.value)+(((1.5707963267949)*(x7068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7069=IKsin(j4);
IkReal x7070=IKcos(j4);
IkReal x7071=(r11*sj5);
IkReal x7072=(cj5*r00);
IkReal x7073=(cj5*r10);
IkReal x7074=(r21*sj5);
IkReal x7075=(cj5*r20);
IkReal x7076=(r01*sj5);
IkReal x7077=((1.0)*x7070);
IkReal x7078=((1.0)*x7069);
evalcond[0]=(((x7069*x7074))+(((-1.0)*x7075*x7078))+(((-1.0)*r22*x7077)));
evalcond[1]=(((x7070*x7075))+(((-1.0)*x7074*x7077))+(((-1.0)*r22*x7078)));
evalcond[2]=(cj0+(((-1.0)*x7073*x7078))+(((-1.0)*r12*x7077))+((x7069*x7071)));
evalcond[3]=(cj0+(((-1.0)*x7076*x7077))+((x7070*x7072))+(((-1.0)*r02*x7078)));
evalcond[4]=(sj0+((x7070*x7073))+(((-1.0)*x7071*x7077))+(((-1.0)*r12*x7078)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7072*x7078))+(((-1.0)*r02*x7077))+((x7069*x7076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7079=cj5*cj5;
IkReal x7080=((1.0)*r21);
IkReal x7081=(cj5*sj5);
IkReal x7082=((1.0)*r20);
CheckValue<IkReal> x7083=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x7081*x7082))+((r02*r22))+(((-1.0)*r00*x7080*x7081))+(((-1.0)*r01*x7079*x7080))+((r00*r20*x7079)))),-1);
if(!x7083.valid){
continue;
}
CheckValue<IkReal> x7084 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7083.value)))+(x7084.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7085=IKsin(j4);
IkReal x7086=IKcos(j4);
IkReal x7087=(r11*sj5);
IkReal x7088=(cj5*r00);
IkReal x7089=(cj5*r10);
IkReal x7090=(r21*sj5);
IkReal x7091=(cj5*r20);
IkReal x7092=(r01*sj5);
IkReal x7093=((1.0)*x7086);
IkReal x7094=((1.0)*x7085);
evalcond[0]=(((x7085*x7090))+(((-1.0)*r22*x7093))+(((-1.0)*x7091*x7094)));
evalcond[1]=(((x7086*x7091))+(((-1.0)*r22*x7094))+(((-1.0)*x7090*x7093)));
evalcond[2]=(cj0+(((-1.0)*x7089*x7094))+((x7085*x7087))+(((-1.0)*r12*x7093)));
evalcond[3]=(cj0+(((-1.0)*x7092*x7093))+((x7086*x7088))+(((-1.0)*r02*x7094)));
evalcond[4]=(sj0+(((-1.0)*x7087*x7093))+(((-1.0)*r12*x7094))+((x7086*x7089)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7088*x7094))+((x7085*x7092))+(((-1.0)*r02*x7093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7095=((1.0)*cj5);
CheckValue<IkReal> x7096 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7096.valid){
continue;
}
CheckValue<IkReal> x7097=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7095))+(((-1.0)*r00*sj5)))),-1);
if(!x7097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7096.value)+(((1.5707963267949)*(x7097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7098=IKsin(j4);
IkReal x7099=IKcos(j4);
IkReal x7100=(r11*sj5);
IkReal x7101=(cj5*r00);
IkReal x7102=(cj5*r10);
IkReal x7103=(r21*sj5);
IkReal x7104=(cj5*r20);
IkReal x7105=(r01*sj5);
IkReal x7106=((1.0)*x7099);
IkReal x7107=((1.0)*x7098);
evalcond[0]=((((-1.0)*r22*x7106))+((x7098*x7103))+(((-1.0)*x7104*x7107)));
evalcond[1]=((((-1.0)*x7103*x7106))+((x7099*x7104))+(((-1.0)*r22*x7107)));
evalcond[2]=((((-1.0)*x7102*x7107))+cj0+(((-1.0)*r12*x7106))+((x7098*x7100)));
evalcond[3]=(cj0+((x7099*x7101))+(((-1.0)*r02*x7107))+(((-1.0)*x7105*x7106)));
evalcond[4]=(sj0+(((-1.0)*r12*x7107))+((x7099*x7102))+(((-1.0)*x7100*x7106)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7101*x7107))+(((-1.0)*r02*x7106))+((x7098*x7105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7108=IKsin(j0);
IkReal x7109=IKcos(j0);
IkReal x7110=((1.0)*cj5);
IkReal x7111=((0.08535)*sj5);
IkReal x7112=((0.08535)*cj5);
IkReal x7113=((1.0)*sj5);
evalcond[0]=(x7109+(((-1.0)*r01*x7110))+(((-1.0)*r00*x7113)));
evalcond[1]=(x7108+(((-1.0)*r11*x7110))+(((-1.0)*r10*x7113)));
evalcond[2]=((((-0.11235)*x7108))+(((-1.0)*px))+(((-1.0)*r01*x7112))+(((-1.0)*r00*x7111)));
evalcond[3]=((((-1.0)*r11*x7112))+(((-1.0)*r10*x7111))+(((0.11235)*x7109))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7114=((1.0)*sj5);
IkReal x7115=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7114)));
j4eval[0]=x7115;
j4eval[1]=IKsign(x7115);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7114))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7116=((1.0)*cj5);
IkReal x7117=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7116)));
j4eval[0]=x7117;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7116)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7117);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7118=r21*r21;
IkReal x7119=cj5*cj5;
IkReal x7120=(r21*sj5);
IkReal x7121=(cj5*r20);
IkReal x7122=((((-1.0)*x7119*(r20*r20)))+((x7118*x7119))+(((-1.0)*x7118))+(((2.0)*x7120*x7121))+(((-1.0)*(r22*r22))));
j4eval[0]=x7122;
j4eval[1]=((IKabs(r22))+(IKabs((x7120+(((-1.0)*x7121))))));
j4eval[2]=IKsign(x7122);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7123=r21*r21;
IkReal x7124=cj5*cj5;
IkReal x7125=(r21*sj5);
IkReal x7126=(cj5*r20);
CheckValue<IkReal> x7127 = IKatan2WithCheck(IkReal(r22),IkReal((x7125+(((-1.0)*x7126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7127.valid){
continue;
}
CheckValue<IkReal> x7128=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7124*(r20*r20)))+((x7123*x7124))+(((-1.0)*x7123))+(((2.0)*x7125*x7126))+(((-1.0)*(r22*r22))))),-1);
if(!x7128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7127.value)+(((1.5707963267949)*(x7128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7129=IKsin(j4);
IkReal x7130=IKcos(j4);
IkReal x7131=(r11*sj5);
IkReal x7132=(r21*sj5);
IkReal x7133=(cj5*r00);
IkReal x7134=(cj5*r20);
IkReal x7135=(r01*sj5);
IkReal x7136=(cj5*r10);
IkReal x7137=((1.0)*x7130);
IkReal x7138=((1.0)*x7129);
evalcond[0]=((((-1.0)*r22*x7137))+((x7129*x7132))+(((-1.0)*x7134*x7138)));
evalcond[1]=(((x7130*x7133))+(((-1.0)*x7135*x7137))+(((-1.0)*r02*x7138)));
evalcond[2]=((((-1.0)*r12*x7138))+((x7130*x7136))+(((-1.0)*x7131*x7137)));
evalcond[3]=((((-1.0)*r12*x7137))+cj0+(((-1.0)*x7136*x7138))+((x7129*x7131)));
evalcond[4]=((-1.0)+(((-1.0)*x7132*x7137))+(((-1.0)*r22*x7138))+((x7130*x7134)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7133*x7138))+((x7129*x7135))+(((-1.0)*r02*x7137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7139=((1.0)*cj5);
CheckValue<IkReal> x7140 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7140.valid){
continue;
}
CheckValue<IkReal> x7141=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7139))+(((-1.0)*r00*sj5)))),-1);
if(!x7141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7140.value)+(((1.5707963267949)*(x7141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7142=IKsin(j4);
IkReal x7143=IKcos(j4);
IkReal x7144=(r11*sj5);
IkReal x7145=(r21*sj5);
IkReal x7146=(cj5*r00);
IkReal x7147=(cj5*r20);
IkReal x7148=(r01*sj5);
IkReal x7149=(cj5*r10);
IkReal x7150=((1.0)*x7143);
IkReal x7151=((1.0)*x7142);
evalcond[0]=((((-1.0)*r22*x7150))+((x7142*x7145))+(((-1.0)*x7147*x7151)));
evalcond[1]=((((-1.0)*x7148*x7150))+(((-1.0)*r02*x7151))+((x7143*x7146)));
evalcond[2]=((((-1.0)*r12*x7151))+(((-1.0)*x7144*x7150))+((x7143*x7149)));
evalcond[3]=((((-1.0)*r12*x7150))+cj0+(((-1.0)*x7149*x7151))+((x7142*x7144)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7151))+(((-1.0)*x7145*x7150))+((x7143*x7147)));
evalcond[5]=((((-1.0)*x7146*x7151))+(((-1.0)*sj0))+(((-1.0)*r02*x7150))+((x7142*x7148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7152=((1.0)*sj5);
CheckValue<IkReal> x7153 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7152))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7153.valid){
continue;
}
CheckValue<IkReal> x7154=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7152)))),-1);
if(!x7154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7153.value)+(((1.5707963267949)*(x7154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7155=IKsin(j4);
IkReal x7156=IKcos(j4);
IkReal x7157=(r11*sj5);
IkReal x7158=(r21*sj5);
IkReal x7159=(cj5*r00);
IkReal x7160=(cj5*r20);
IkReal x7161=(r01*sj5);
IkReal x7162=(cj5*r10);
IkReal x7163=((1.0)*x7156);
IkReal x7164=((1.0)*x7155);
evalcond[0]=((((-1.0)*r22*x7163))+(((-1.0)*x7160*x7164))+((x7155*x7158)));
evalcond[1]=((((-1.0)*r02*x7164))+(((-1.0)*x7161*x7163))+((x7156*x7159)));
evalcond[2]=((((-1.0)*x7157*x7163))+(((-1.0)*r12*x7164))+((x7156*x7162)));
evalcond[3]=(cj0+(((-1.0)*r12*x7163))+((x7155*x7157))+(((-1.0)*x7162*x7164)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7164))+(((-1.0)*x7158*x7163))+((x7156*x7160)));
evalcond[5]=((((-1.0)*r02*x7163))+(((-1.0)*sj0))+(((-1.0)*x7159*x7164))+((x7155*x7161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7165=IKcos(j0);
IkReal x7166=IKsin(j0);
evalcond[0]=((((0.21325)*x7165))+(((-1.0)*px))+(((-0.11235)*x7166)));
evalcond[1]=((((0.21325)*x7166))+(((-1.0)*py))+(((0.11235)*x7165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7167=((1.0)*cj5);
IkReal x7168=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7167)));
j4eval[0]=x7168;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7167))))));
j4eval[2]=IKsign(x7168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7169=((1.0)*cj5);
IkReal x7170=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7169)));
j4eval[0]=x7170;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7169))))));
j4eval[2]=IKsign(x7170);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7171=cj5*cj5;
IkReal x7172=((1.0)*sj5);
IkReal x7173=(cj5*r20);
IkReal x7174=(r11*r21);
IkReal x7175=(x7174+(((-1.0)*cj5*r10*r21*x7172))+(((-1.0)*r11*x7172*x7173))+((r12*r22))+(((-1.0)*x7171*x7174))+((r10*r20*x7171)));
j4eval[0]=x7175;
j4eval[1]=IKsign(x7175);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7172))+((cj0*x7173))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7176=cj5*cj5;
IkReal x7177=((1.0)*sj5);
IkReal x7178=(cj5*r20);
IkReal x7179=(r11*r21);
CheckValue<IkReal> x7180 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7177))+((cj0*x7178)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7180.valid){
continue;
}
CheckValue<IkReal> x7181=IKPowWithIntegerCheck(IKsign((x7179+(((-1.0)*cj5*r10*r21*x7177))+((r12*r22))+((r10*r20*x7176))+(((-1.0)*r11*x7177*x7178))+(((-1.0)*x7176*x7179)))),-1);
if(!x7181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7180.value)+(((1.5707963267949)*(x7181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7182=IKsin(j4);
IkReal x7183=IKcos(j4);
IkReal x7184=((1.0)*sj0);
IkReal x7185=(cj5*r00);
IkReal x7186=(r11*sj5);
IkReal x7187=(cj5*r10);
IkReal x7188=(r21*sj5);
IkReal x7189=(cj5*r20);
IkReal x7190=(r01*sj5);
IkReal x7191=((1.0)*x7183);
IkReal x7192=((1.0)*x7182);
evalcond[0]=((((-1.0)*x7189*x7192))+((x7182*x7188))+(((-1.0)*r22*x7191)));
evalcond[1]=(((x7183*x7189))+(((-1.0)*x7188*x7191))+(((-1.0)*r22*x7192)));
evalcond[2]=(cj0+(((-1.0)*x7187*x7192))+((x7182*x7186))+(((-1.0)*r12*x7191)));
evalcond[3]=(((x7182*x7190))+(((-1.0)*x7185*x7192))+(((-1.0)*x7184))+(((-1.0)*r02*x7191)));
evalcond[4]=(((x7183*x7185))+(((-1.0)*x7190*x7191))+(((-1.0)*r02*x7192))+(((-1.0)*cj0)));
evalcond[5]=(((x7183*x7187))+(((-1.0)*x7186*x7191))+(((-1.0)*x7184))+(((-1.0)*r12*x7192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7193=((1.0)*cj5);
CheckValue<IkReal> x7194=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7193)))),-1);
if(!x7194.valid){
continue;
}
CheckValue<IkReal> x7195 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7194.value)))+(x7195.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7196=IKsin(j4);
IkReal x7197=IKcos(j4);
IkReal x7198=((1.0)*sj0);
IkReal x7199=(cj5*r00);
IkReal x7200=(r11*sj5);
IkReal x7201=(cj5*r10);
IkReal x7202=(r21*sj5);
IkReal x7203=(cj5*r20);
IkReal x7204=(r01*sj5);
IkReal x7205=((1.0)*x7197);
IkReal x7206=((1.0)*x7196);
evalcond[0]=((((-1.0)*x7203*x7206))+((x7196*x7202))+(((-1.0)*r22*x7205)));
evalcond[1]=((((-1.0)*x7202*x7205))+((x7197*x7203))+(((-1.0)*r22*x7206)));
evalcond[2]=(cj0+((x7196*x7200))+(((-1.0)*x7201*x7206))+(((-1.0)*r12*x7205)));
evalcond[3]=((((-1.0)*x7198))+(((-1.0)*x7199*x7206))+((x7196*x7204))+(((-1.0)*r02*x7205)));
evalcond[4]=((((-1.0)*x7204*x7205))+((x7197*x7199))+(((-1.0)*cj0))+(((-1.0)*r02*x7206)));
evalcond[5]=((((-1.0)*x7198))+((x7197*x7201))+(((-1.0)*r12*x7206))+(((-1.0)*x7200*x7205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7207=((1.0)*cj5);
CheckValue<IkReal> x7208=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7207)))),-1);
if(!x7208.valid){
continue;
}
CheckValue<IkReal> x7209 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7207))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7208.value)))+(x7209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7210=IKsin(j4);
IkReal x7211=IKcos(j4);
IkReal x7212=((1.0)*sj0);
IkReal x7213=(cj5*r00);
IkReal x7214=(r11*sj5);
IkReal x7215=(cj5*r10);
IkReal x7216=(r21*sj5);
IkReal x7217=(cj5*r20);
IkReal x7218=(r01*sj5);
IkReal x7219=((1.0)*x7211);
IkReal x7220=((1.0)*x7210);
evalcond[0]=((((-1.0)*x7217*x7220))+((x7210*x7216))+(((-1.0)*r22*x7219)));
evalcond[1]=(((x7211*x7217))+(((-1.0)*r22*x7220))+(((-1.0)*x7216*x7219)));
evalcond[2]=(cj0+((x7210*x7214))+(((-1.0)*r12*x7219))+(((-1.0)*x7215*x7220)));
evalcond[3]=(((x7210*x7218))+(((-1.0)*x7212))+(((-1.0)*x7213*x7220))+(((-1.0)*r02*x7219)));
evalcond[4]=((((-1.0)*r02*x7220))+((x7211*x7213))+(((-1.0)*x7218*x7219))+(((-1.0)*cj0)));
evalcond[5]=(((x7211*x7215))+(((-1.0)*x7212))+(((-1.0)*x7214*x7219))+(((-1.0)*r12*x7220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.507498115261088)*px))+(((-2.06387083990023)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))))+IKsqr(((((-2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))), ((((-2.06387083990023)*px))+(((0.507498115261088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7221=IKcos(j0);
IkReal x7222=IKsin(j0);
evalcond[0]=((((-0.11235)*x7222))+(((-1.0)*px))+(((-0.4569)*x7221)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x7221))+(((-0.4569)*x7222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7223=((1.0)*cj5);
IkReal x7224=((((-1.0)*r01*x7223))+(((-1.0)*r00*sj5)));
j4eval[0]=x7224;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7223)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7224);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7225=cj5*cj5;
IkReal x7226=((1.0)*r21);
IkReal x7227=(cj5*sj5);
IkReal x7228=((1.0)*r20);
IkReal x7229=(((r01*r21))+(((-1.0)*r00*x7226*x7227))+(((-1.0)*r01*x7227*x7228))+(((-1.0)*r01*x7225*x7226))+((r02*r22))+((r00*r20*x7225)));
j4eval[0]=x7229;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7228))))));
j4eval[2]=IKsign(x7229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7230=cj5*cj5;
IkReal x7231=(r21*sj5);
IkReal x7232=(r11*r21);
IkReal x7233=((1.0)*cj5*r20);
IkReal x7234=((((-1.0)*r11*sj5*x7233))+(((-1.0)*cj5*r10*x7231))+((r10*r20*x7230))+x7232+((r12*r22))+(((-1.0)*x7230*x7232)));
j4eval[0]=x7234;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7233))+((sj0*x7231))))));
j4eval[2]=IKsign(x7234);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7235=cj5*cj5;
IkReal x7236=(r21*sj5);
IkReal x7237=(r11*r21);
IkReal x7238=((1.0)*cj5*r20);
CheckValue<IkReal> x7239=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7238))+(((-1.0)*cj5*r10*x7236))+((r10*r20*x7235))+x7237+((r12*r22))+(((-1.0)*x7235*x7237)))),-1);
if(!x7239.valid){
continue;
}
CheckValue<IkReal> x7240 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7238))+((sj0*x7236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7239.value)))+(x7240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7241=IKsin(j4);
IkReal x7242=IKcos(j4);
IkReal x7243=(r11*sj5);
IkReal x7244=(cj5*r00);
IkReal x7245=(cj5*r10);
IkReal x7246=(r21*sj5);
IkReal x7247=(cj5*r20);
IkReal x7248=(r01*sj5);
IkReal x7249=((1.0)*x7242);
IkReal x7250=((1.0)*x7241);
evalcond[0]=((((-1.0)*x7247*x7250))+(((-1.0)*r22*x7249))+((x7241*x7246)));
evalcond[1]=((((-1.0)*x7246*x7249))+((x7242*x7247))+(((-1.0)*r22*x7250)));
evalcond[2]=((((-1.0)*r12*x7249))+cj0+((x7241*x7243))+(((-1.0)*x7245*x7250)));
evalcond[3]=(cj0+((x7242*x7244))+(((-1.0)*x7248*x7249))+(((-1.0)*r02*x7250)));
evalcond[4]=(sj0+((x7242*x7245))+(((-1.0)*r12*x7250))+(((-1.0)*x7243*x7249)));
evalcond[5]=((((-1.0)*x7244*x7250))+(((-1.0)*sj0))+(((-1.0)*r02*x7249))+((x7241*x7248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7251=cj5*cj5;
IkReal x7252=((1.0)*r21);
IkReal x7253=(cj5*sj5);
IkReal x7254=((1.0)*r20);
CheckValue<IkReal> x7255 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7255.valid){
continue;
}
CheckValue<IkReal> x7256=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7251*x7252))+((r01*r21))+(((-1.0)*r01*x7253*x7254))+(((-1.0)*r00*x7252*x7253))+((r02*r22))+((r00*r20*x7251)))),-1);
if(!x7256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7255.value)+(((1.5707963267949)*(x7256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7257=IKsin(j4);
IkReal x7258=IKcos(j4);
IkReal x7259=(r11*sj5);
IkReal x7260=(cj5*r00);
IkReal x7261=(cj5*r10);
IkReal x7262=(r21*sj5);
IkReal x7263=(cj5*r20);
IkReal x7264=(r01*sj5);
IkReal x7265=((1.0)*x7258);
IkReal x7266=((1.0)*x7257);
evalcond[0]=((((-1.0)*r22*x7265))+((x7257*x7262))+(((-1.0)*x7263*x7266)));
evalcond[1]=(((x7258*x7263))+(((-1.0)*r22*x7266))+(((-1.0)*x7262*x7265)));
evalcond[2]=(((x7257*x7259))+cj0+(((-1.0)*x7261*x7266))+(((-1.0)*r12*x7265)));
evalcond[3]=((((-1.0)*x7264*x7265))+((x7258*x7260))+cj0+(((-1.0)*r02*x7266)));
evalcond[4]=(((x7258*x7261))+sj0+(((-1.0)*x7259*x7265))+(((-1.0)*r12*x7266)));
evalcond[5]=((((-1.0)*sj0))+((x7257*x7264))+(((-1.0)*x7260*x7266))+(((-1.0)*r02*x7265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7267=((1.0)*cj5);
CheckValue<IkReal> x7268=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7267))+(((-1.0)*r00*sj5)))),-1);
if(!x7268.valid){
continue;
}
CheckValue<IkReal> x7269 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7268.value)))+(x7269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7270=IKsin(j4);
IkReal x7271=IKcos(j4);
IkReal x7272=(r11*sj5);
IkReal x7273=(cj5*r00);
IkReal x7274=(cj5*r10);
IkReal x7275=(r21*sj5);
IkReal x7276=(cj5*r20);
IkReal x7277=(r01*sj5);
IkReal x7278=((1.0)*x7271);
IkReal x7279=((1.0)*x7270);
evalcond[0]=((((-1.0)*r22*x7278))+((x7270*x7275))+(((-1.0)*x7276*x7279)));
evalcond[1]=(((x7271*x7276))+(((-1.0)*r22*x7279))+(((-1.0)*x7275*x7278)));
evalcond[2]=(cj0+(((-1.0)*r12*x7278))+(((-1.0)*x7274*x7279))+((x7270*x7272)));
evalcond[3]=(((x7271*x7273))+cj0+(((-1.0)*r02*x7279))+(((-1.0)*x7277*x7278)));
evalcond[4]=(((x7271*x7274))+sj0+(((-1.0)*r12*x7279))+(((-1.0)*x7272*x7278)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7273*x7279))+(((-1.0)*r02*x7278))+((x7270*x7277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.24409186529617)*py))+(((-8.29354345611924)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))))+IKsqr(((((-2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))), ((((-2.24409186529617)*px))+(((8.29354345611924)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7280=IKcos(j0);
IkReal x7281=IKsin(j0);
evalcond[0]=((((-0.0304)*x7280))+(((-1.0)*px))+(((-0.11235)*x7281)));
evalcond[1]=((((-0.0304)*x7281))+(((0.11235)*x7280))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7282=((1.0)*cj5);
IkReal x7283=((((-1.0)*r01*x7282))+(((-1.0)*r00*sj5)));
j4eval[0]=x7283;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7282))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7284=((1.0)*cj5);
IkReal x7285=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7284)));
j4eval[0]=x7285;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7284))))));
j4eval[2]=IKsign(x7285);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7286=cj5*cj5;
IkReal x7287=((1.0)*sj5);
IkReal x7288=(cj5*r20);
IkReal x7289=(r11*r21);
IkReal x7290=(x7289+(((-1.0)*x7286*x7289))+(((-1.0)*cj5*r10*r21*x7287))+((r10*r20*x7286))+((r12*r22))+(((-1.0)*r11*x7287*x7288)));
j4eval[0]=x7290;
j4eval[1]=IKsign(x7290);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7287))+((cj0*x7288)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7291=cj5*cj5;
IkReal x7292=((1.0)*sj5);
IkReal x7293=(cj5*r20);
IkReal x7294=(r11*r21);
CheckValue<IkReal> x7295 = IKatan2WithCheck(IkReal((((cj0*x7293))+(((-1.0)*cj0*r21*x7292)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7295.valid){
continue;
}
CheckValue<IkReal> x7296=IKPowWithIntegerCheck(IKsign((x7294+(((-1.0)*cj5*r10*r21*x7292))+(((-1.0)*r11*x7292*x7293))+((r10*r20*x7291))+((r12*r22))+(((-1.0)*x7291*x7294)))),-1);
if(!x7296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7295.value)+(((1.5707963267949)*(x7296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7297=IKsin(j4);
IkReal x7298=IKcos(j4);
IkReal x7299=((1.0)*sj0);
IkReal x7300=(cj5*r00);
IkReal x7301=(r11*sj5);
IkReal x7302=(cj5*r10);
IkReal x7303=(r21*sj5);
IkReal x7304=(cj5*r20);
IkReal x7305=(r01*sj5);
IkReal x7306=((1.0)*x7298);
IkReal x7307=((1.0)*x7297);
evalcond[0]=((((-1.0)*r22*x7306))+((x7297*x7303))+(((-1.0)*x7304*x7307)));
evalcond[1]=((((-1.0)*x7303*x7306))+(((-1.0)*r22*x7307))+((x7298*x7304)));
evalcond[2]=(cj0+(((-1.0)*x7302*x7307))+(((-1.0)*r12*x7306))+((x7297*x7301)));
evalcond[3]=((((-1.0)*r02*x7306))+(((-1.0)*x7299))+(((-1.0)*x7300*x7307))+((x7297*x7305)));
evalcond[4]=((((-1.0)*r02*x7307))+((x7298*x7300))+(((-1.0)*cj0))+(((-1.0)*x7305*x7306)));
evalcond[5]=((((-1.0)*x7299))+(((-1.0)*x7301*x7306))+(((-1.0)*r12*x7307))+((x7298*x7302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7308=((1.0)*cj5);
CheckValue<IkReal> x7309 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7308))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7309.valid){
continue;
}
CheckValue<IkReal> x7310=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7308)))),-1);
if(!x7310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7309.value)+(((1.5707963267949)*(x7310.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7311=IKsin(j4);
IkReal x7312=IKcos(j4);
IkReal x7313=((1.0)*sj0);
IkReal x7314=(cj5*r00);
IkReal x7315=(r11*sj5);
IkReal x7316=(cj5*r10);
IkReal x7317=(r21*sj5);
IkReal x7318=(cj5*r20);
IkReal x7319=(r01*sj5);
IkReal x7320=((1.0)*x7312);
IkReal x7321=((1.0)*x7311);
evalcond[0]=((((-1.0)*r22*x7320))+(((-1.0)*x7318*x7321))+((x7311*x7317)));
evalcond[1]=((((-1.0)*x7317*x7320))+((x7312*x7318))+(((-1.0)*r22*x7321)));
evalcond[2]=(cj0+(((-1.0)*x7316*x7321))+(((-1.0)*r12*x7320))+((x7311*x7315)));
evalcond[3]=((((-1.0)*x7313))+(((-1.0)*x7314*x7321))+((x7311*x7319))+(((-1.0)*r02*x7320)));
evalcond[4]=(((x7312*x7314))+(((-1.0)*x7319*x7320))+(((-1.0)*cj0))+(((-1.0)*r02*x7321)));
evalcond[5]=(((x7312*x7316))+(((-1.0)*x7315*x7320))+(((-1.0)*x7313))+(((-1.0)*r12*x7321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7322=((1.0)*cj5);
CheckValue<IkReal> x7323 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7323.valid){
continue;
}
CheckValue<IkReal> x7324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7322)))),-1);
if(!x7324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7323.value)+(((1.5707963267949)*(x7324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7325=IKsin(j4);
IkReal x7326=IKcos(j4);
IkReal x7327=((1.0)*sj0);
IkReal x7328=(cj5*r00);
IkReal x7329=(r11*sj5);
IkReal x7330=(cj5*r10);
IkReal x7331=(r21*sj5);
IkReal x7332=(cj5*r20);
IkReal x7333=(r01*sj5);
IkReal x7334=((1.0)*x7326);
IkReal x7335=((1.0)*x7325);
evalcond[0]=(((x7325*x7331))+(((-1.0)*x7332*x7335))+(((-1.0)*r22*x7334)));
evalcond[1]=(((x7326*x7332))+(((-1.0)*x7331*x7334))+(((-1.0)*r22*x7335)));
evalcond[2]=(cj0+(((-1.0)*r12*x7334))+((x7325*x7329))+(((-1.0)*x7330*x7335)));
evalcond[3]=((((-1.0)*r02*x7334))+((x7325*x7333))+(((-1.0)*x7327))+(((-1.0)*x7328*x7335)));
evalcond[4]=((((-1.0)*r02*x7335))+((x7326*x7328))+(((-1.0)*x7333*x7334))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7335))+(((-1.0)*x7327))+(((-1.0)*x7329*x7334))+((x7326*x7330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7336=IKsin(j0);
IkReal x7337=IKcos(j0);
IkReal x7338=((1.0)*cj5);
IkReal x7339=((0.08535)*sj5);
IkReal x7340=((0.08535)*cj5);
IkReal x7341=((1.0)*sj5);
evalcond[0]=(x7337+(((-1.0)*r00*x7341))+(((-1.0)*r01*x7338)));
evalcond[1]=(x7336+(((-1.0)*r10*x7341))+(((-1.0)*r11*x7338)));
evalcond[2]=((((-0.11235)*x7336))+(((-1.0)*r01*x7340))+(((-1.0)*px))+(((-1.0)*r00*x7339)));
evalcond[3]=((((-1.0)*r11*x7340))+(((-1.0)*py))+(((0.11235)*x7337))+(((-1.0)*r10*x7339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7342=((1.0)*sj5);
IkReal x7343=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7342)));
j4eval[0]=x7343;
j4eval[1]=IKsign(x7343);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7342))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7344=((1.0)*cj5);
IkReal x7345=((((-1.0)*r01*x7344))+(((-1.0)*r00*sj5)));
j4eval[0]=x7345;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7344))))));
j4eval[2]=IKsign(x7345);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7346=r21*r21;
IkReal x7347=cj5*cj5;
IkReal x7348=(r21*sj5);
IkReal x7349=(cj5*r20);
IkReal x7350=((((2.0)*x7348*x7349))+(((-1.0)*x7347*(r20*r20)))+((x7346*x7347))+(((-1.0)*(r22*r22)))+(((-1.0)*x7346)));
j4eval[0]=x7350;
j4eval[1]=((IKabs(r22))+(IKabs((x7348+(((-1.0)*x7349))))));
j4eval[2]=IKsign(x7350);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7351=r21*r21;
IkReal x7352=cj5*cj5;
IkReal x7353=(r21*sj5);
IkReal x7354=(cj5*r20);
CheckValue<IkReal> x7355 = IKatan2WithCheck(IkReal(r22),IkReal((x7353+(((-1.0)*x7354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7355.valid){
continue;
}
CheckValue<IkReal> x7356=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7352*(r20*r20)))+(((2.0)*x7353*x7354))+(((-1.0)*(r22*r22)))+(((-1.0)*x7351))+((x7351*x7352)))),-1);
if(!x7356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7355.value)+(((1.5707963267949)*(x7356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7357=IKsin(j4);
IkReal x7358=IKcos(j4);
IkReal x7359=(r11*sj5);
IkReal x7360=(r21*sj5);
IkReal x7361=(cj5*r00);
IkReal x7362=(cj5*r20);
IkReal x7363=(r01*sj5);
IkReal x7364=(cj5*r10);
IkReal x7365=((1.0)*x7358);
IkReal x7366=((1.0)*x7357);
evalcond[0]=((((-1.0)*r22*x7365))+((x7357*x7360))+(((-1.0)*x7362*x7366)));
evalcond[1]=((((-1.0)*x7363*x7365))+((x7358*x7361))+(((-1.0)*r02*x7366)));
evalcond[2]=(((x7358*x7364))+(((-1.0)*r12*x7366))+(((-1.0)*x7359*x7365)));
evalcond[3]=(cj0+(((-1.0)*x7364*x7366))+(((-1.0)*r12*x7365))+((x7357*x7359)));
evalcond[4]=((-1.0)+((x7358*x7362))+(((-1.0)*r22*x7366))+(((-1.0)*x7360*x7365)));
evalcond[5]=((((-1.0)*sj0))+((x7357*x7363))+(((-1.0)*r02*x7365))+(((-1.0)*x7361*x7366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7367=((1.0)*cj5);
CheckValue<IkReal> x7368=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7367)))),-1);
if(!x7368.valid){
continue;
}
CheckValue<IkReal> x7369 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7367))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7368.value)))+(x7369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7370=IKsin(j4);
IkReal x7371=IKcos(j4);
IkReal x7372=(r11*sj5);
IkReal x7373=(r21*sj5);
IkReal x7374=(cj5*r00);
IkReal x7375=(cj5*r20);
IkReal x7376=(r01*sj5);
IkReal x7377=(cj5*r10);
IkReal x7378=((1.0)*x7371);
IkReal x7379=((1.0)*x7370);
evalcond[0]=((((-1.0)*r22*x7378))+((x7370*x7373))+(((-1.0)*x7375*x7379)));
evalcond[1]=((((-1.0)*x7376*x7378))+(((-1.0)*r02*x7379))+((x7371*x7374)));
evalcond[2]=((((-1.0)*r12*x7379))+(((-1.0)*x7372*x7378))+((x7371*x7377)));
evalcond[3]=(cj0+((x7370*x7372))+(((-1.0)*r12*x7378))+(((-1.0)*x7377*x7379)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7379))+(((-1.0)*x7373*x7378))+((x7371*x7375)));
evalcond[5]=((((-1.0)*x7374*x7379))+(((-1.0)*sj0))+((x7370*x7376))+(((-1.0)*r02*x7378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7380=((1.0)*sj5);
CheckValue<IkReal> x7381=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7380)))),-1);
if(!x7381.valid){
continue;
}
CheckValue<IkReal> x7382 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7380))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7381.value)))+(x7382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7383=IKsin(j4);
IkReal x7384=IKcos(j4);
IkReal x7385=(r11*sj5);
IkReal x7386=(r21*sj5);
IkReal x7387=(cj5*r00);
IkReal x7388=(cj5*r20);
IkReal x7389=(r01*sj5);
IkReal x7390=(cj5*r10);
IkReal x7391=((1.0)*x7384);
IkReal x7392=((1.0)*x7383);
evalcond[0]=((((-1.0)*r22*x7391))+(((-1.0)*x7388*x7392))+((x7383*x7386)));
evalcond[1]=((((-1.0)*r02*x7392))+((x7384*x7387))+(((-1.0)*x7389*x7391)));
evalcond[2]=((((-1.0)*r12*x7392))+((x7384*x7390))+(((-1.0)*x7385*x7391)));
evalcond[3]=((((-1.0)*r12*x7391))+cj0+(((-1.0)*x7390*x7392))+((x7383*x7385)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7392))+((x7384*x7388))+(((-1.0)*x7386*x7391)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7391))+(((-1.0)*x7387*x7392))+((x7383*x7389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7393=IKcos(j0);
IkReal x7394=IKsin(j0);
evalcond[0]=((((-0.11235)*x7394))+(((0.21325)*x7393))+(((-1.0)*px)));
evalcond[1]=((((0.11235)*x7393))+(((0.21325)*x7394))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7395=((1.0)*cj5);
IkReal x7396=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7395)));
j4eval[0]=x7396;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7395)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7396);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7397=((1.0)*cj5);
IkReal x7398=((((-1.0)*r11*x7397))+(((-1.0)*r10*sj5)));
j4eval[0]=x7398;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7397))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7398);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7399=cj5*cj5;
IkReal x7400=((1.0)*sj5);
IkReal x7401=(cj5*r20);
IkReal x7402=(r11*r21);
IkReal x7403=((((-1.0)*r11*x7400*x7401))+(((-1.0)*x7399*x7402))+((r10*r20*x7399))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7400))+x7402);
j4eval[0]=x7403;
j4eval[1]=IKsign(x7403);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7400))+((cj0*x7401)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7404=cj5*cj5;
IkReal x7405=((1.0)*sj5);
IkReal x7406=(cj5*r20);
IkReal x7407=(r11*r21);
CheckValue<IkReal> x7408 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7405))+((cj0*x7406)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7408.valid){
continue;
}
CheckValue<IkReal> x7409=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*r11*x7405*x7406))+(((-1.0)*cj5*r10*r21*x7405))+(((-1.0)*x7404*x7407))+x7407+((r10*r20*x7404)))),-1);
if(!x7409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7408.value)+(((1.5707963267949)*(x7409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7410=IKsin(j4);
IkReal x7411=IKcos(j4);
IkReal x7412=((1.0)*sj0);
IkReal x7413=(cj5*r00);
IkReal x7414=(r11*sj5);
IkReal x7415=(cj5*r10);
IkReal x7416=(r21*sj5);
IkReal x7417=(cj5*r20);
IkReal x7418=(r01*sj5);
IkReal x7419=((1.0)*x7411);
IkReal x7420=((1.0)*x7410);
evalcond[0]=(((x7410*x7416))+(((-1.0)*r22*x7419))+(((-1.0)*x7417*x7420)));
evalcond[1]=((((-1.0)*r22*x7420))+(((-1.0)*x7416*x7419))+((x7411*x7417)));
evalcond[2]=((((-1.0)*r12*x7419))+((x7410*x7414))+(((-1.0)*x7415*x7420))+cj0);
evalcond[3]=(((x7410*x7418))+(((-1.0)*x7412))+(((-1.0)*x7413*x7420))+(((-1.0)*r02*x7419)));
evalcond[4]=((((-1.0)*x7418*x7419))+(((-1.0)*r02*x7420))+((x7411*x7413))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7414*x7419))+(((-1.0)*r12*x7420))+(((-1.0)*x7412))+((x7411*x7415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7421=((1.0)*cj5);
CheckValue<IkReal> x7422 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7421))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7422.valid){
continue;
}
CheckValue<IkReal> x7423=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7421)))),-1);
if(!x7423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7422.value)+(((1.5707963267949)*(x7423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7424=IKsin(j4);
IkReal x7425=IKcos(j4);
IkReal x7426=((1.0)*sj0);
IkReal x7427=(cj5*r00);
IkReal x7428=(r11*sj5);
IkReal x7429=(cj5*r10);
IkReal x7430=(r21*sj5);
IkReal x7431=(cj5*r20);
IkReal x7432=(r01*sj5);
IkReal x7433=((1.0)*x7425);
IkReal x7434=((1.0)*x7424);
evalcond[0]=((((-1.0)*r22*x7433))+((x7424*x7430))+(((-1.0)*x7431*x7434)));
evalcond[1]=((((-1.0)*x7430*x7433))+(((-1.0)*r22*x7434))+((x7425*x7431)));
evalcond[2]=(cj0+((x7424*x7428))+(((-1.0)*x7429*x7434))+(((-1.0)*r12*x7433)));
evalcond[3]=(((x7424*x7432))+(((-1.0)*r02*x7433))+(((-1.0)*x7427*x7434))+(((-1.0)*x7426)));
evalcond[4]=((((-1.0)*r02*x7434))+((x7425*x7427))+(((-1.0)*cj0))+(((-1.0)*x7432*x7433)));
evalcond[5]=((((-1.0)*r12*x7434))+((x7425*x7429))+(((-1.0)*x7426))+(((-1.0)*x7428*x7433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7435=((1.0)*cj5);
CheckValue<IkReal> x7436 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7436.valid){
continue;
}
CheckValue<IkReal> x7437=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7435))+(((-1.0)*r00*sj5)))),-1);
if(!x7437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7436.value)+(((1.5707963267949)*(x7437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7438=IKsin(j4);
IkReal x7439=IKcos(j4);
IkReal x7440=((1.0)*sj0);
IkReal x7441=(cj5*r00);
IkReal x7442=(r11*sj5);
IkReal x7443=(cj5*r10);
IkReal x7444=(r21*sj5);
IkReal x7445=(cj5*r20);
IkReal x7446=(r01*sj5);
IkReal x7447=((1.0)*x7439);
IkReal x7448=((1.0)*x7438);
evalcond[0]=(((x7438*x7444))+(((-1.0)*x7445*x7448))+(((-1.0)*r22*x7447)));
evalcond[1]=(((x7439*x7445))+(((-1.0)*x7444*x7447))+(((-1.0)*r22*x7448)));
evalcond[2]=(cj0+((x7438*x7442))+(((-1.0)*r12*x7447))+(((-1.0)*x7443*x7448)));
evalcond[3]=((((-1.0)*x7440))+((x7438*x7446))+(((-1.0)*r02*x7447))+(((-1.0)*x7441*x7448)));
evalcond[4]=((((-1.0)*x7446*x7447))+(((-1.0)*r02*x7448))+((x7439*x7441))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7440))+(((-1.0)*x7442*x7447))+((x7439*x7443))+(((-1.0)*r12*x7448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7449=((1.0)*sj5);
IkReal x7450=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7449))+(((-1.0)*r11*x7450)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7449))+(((-1.0)*r01*x7450)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7449))+(((-1.0)*r11*x7450))))+IKsqr(((((-1.0)*r00*x7449))+(((-1.0)*r01*x7450))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7449))+(((-1.0)*r11*x7450))), ((((-1.0)*r00*x7449))+(((-1.0)*r01*x7450))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7451=IKsin(j0);
IkReal x7452=IKcos(j0);
IkReal x7453=((1.0)*cj5);
IkReal x7454=((0.08535)*sj5);
IkReal x7455=((0.08535)*cj5);
IkReal x7456=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7452))+(((-1.0)*r00*x7456))+(((-1.0)*r01*x7453)));
evalcond[1]=((((-1.0)*r10*x7456))+(((-1.0)*x7451))+(((-1.0)*r11*x7453)));
evalcond[2]=((((-0.11235)*x7451))+(((-1.0)*r00*x7454))+(((-1.0)*r01*x7455))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*r10*x7454))+(((0.11235)*x7452))+(((-1.0)*py))+(((-1.0)*r11*x7455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7457=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7457;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7457);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7458=((1.0)*cj5);
IkReal x7459=((((-1.0)*r01*x7458))+(((-1.0)*r00*sj5)));
j4eval[0]=x7459;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7458))))));
j4eval[2]=IKsign(x7459);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7460=cj5*cj5;
IkReal x7461=r21*r21;
IkReal x7462=(r21*sj5);
IkReal x7463=(cj5*r20);
IkReal x7464=((r22*r22)+(((-2.0)*x7462*x7463))+x7461+(((-1.0)*x7460*x7461))+((x7460*(r20*r20))));
j4eval[0]=x7464;
j4eval[1]=IKsign(x7464);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7463))+x7462))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7465=cj5*cj5;
IkReal x7466=r21*r21;
IkReal x7467=(r21*sj5);
IkReal x7468=(cj5*r20);
CheckValue<IkReal> x7469 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7468))+x7467)),IKFAST_ATAN2_MAGTHRESH);
if(!x7469.valid){
continue;
}
CheckValue<IkReal> x7470=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7467*x7468))+(r22*r22)+((x7465*(r20*r20)))+(((-1.0)*x7465*x7466))+x7466)),-1);
if(!x7470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7469.value)+(((1.5707963267949)*(x7470.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7471=IKsin(j4);
IkReal x7472=IKcos(j4);
IkReal x7473=(r11*sj5);
IkReal x7474=(r21*sj5);
IkReal x7475=(cj5*r00);
IkReal x7476=(cj5*r20);
IkReal x7477=(r01*sj5);
IkReal x7478=(cj5*r10);
IkReal x7479=((1.0)*x7472);
IkReal x7480=((1.0)*x7471);
evalcond[0]=((((-1.0)*x7476*x7480))+((x7471*x7474))+(((-1.0)*r22*x7479)));
evalcond[1]=((((-1.0)*x7477*x7479))+((x7472*x7475))+(((-1.0)*r02*x7480)));
evalcond[2]=(((x7472*x7478))+(((-1.0)*x7473*x7479))+(((-1.0)*r12*x7480)));
evalcond[3]=(cj0+(((-1.0)*x7478*x7480))+((x7471*x7473))+(((-1.0)*r12*x7479)));
evalcond[4]=((1.0)+((x7472*x7476))+(((-1.0)*x7474*x7479))+(((-1.0)*r22*x7480)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7479))+(((-1.0)*x7475*x7480))+((x7471*x7477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7481=((1.0)*cj5);
CheckValue<IkReal> x7482=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7481)))),-1);
if(!x7482.valid){
continue;
}
CheckValue<IkReal> x7483 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7482.value)))+(x7483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7484=IKsin(j4);
IkReal x7485=IKcos(j4);
IkReal x7486=(r11*sj5);
IkReal x7487=(r21*sj5);
IkReal x7488=(cj5*r00);
IkReal x7489=(cj5*r20);
IkReal x7490=(r01*sj5);
IkReal x7491=(cj5*r10);
IkReal x7492=((1.0)*x7485);
IkReal x7493=((1.0)*x7484);
evalcond[0]=(((x7484*x7487))+(((-1.0)*x7489*x7493))+(((-1.0)*r22*x7492)));
evalcond[1]=((((-1.0)*x7490*x7492))+((x7485*x7488))+(((-1.0)*r02*x7493)));
evalcond[2]=((((-1.0)*x7486*x7492))+(((-1.0)*r12*x7493))+((x7485*x7491)));
evalcond[3]=(((x7484*x7486))+cj0+(((-1.0)*x7491*x7493))+(((-1.0)*r12*x7492)));
evalcond[4]=((1.0)+(((-1.0)*x7487*x7492))+(((-1.0)*r22*x7493))+((x7485*x7489)));
evalcond[5]=((((-1.0)*sj0))+((x7484*x7490))+(((-1.0)*x7488*x7493))+(((-1.0)*r02*x7492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7494 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7494.valid){
continue;
}
CheckValue<IkReal> x7495=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7494.value)+(((1.5707963267949)*(x7495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7496=IKsin(j4);
IkReal x7497=IKcos(j4);
IkReal x7498=(r11*sj5);
IkReal x7499=(r21*sj5);
IkReal x7500=(cj5*r00);
IkReal x7501=(cj5*r20);
IkReal x7502=(r01*sj5);
IkReal x7503=(cj5*r10);
IkReal x7504=((1.0)*x7497);
IkReal x7505=((1.0)*x7496);
evalcond[0]=((((-1.0)*x7501*x7505))+(((-1.0)*r22*x7504))+((x7496*x7499)));
evalcond[1]=((((-1.0)*x7502*x7504))+(((-1.0)*r02*x7505))+((x7497*x7500)));
evalcond[2]=((((-1.0)*x7498*x7504))+((x7497*x7503))+(((-1.0)*r12*x7505)));
evalcond[3]=(((x7496*x7498))+(((-1.0)*x7503*x7505))+cj0+(((-1.0)*r12*x7504)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7505))+(((-1.0)*x7499*x7504))+((x7497*x7501)));
evalcond[5]=((((-1.0)*x7500*x7505))+(((-1.0)*sj0))+(((-1.0)*r02*x7504))+((x7496*x7502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7506=IKcos(j0);
IkReal x7507=IKsin(j0);
evalcond[0]=((((-0.21325)*x7506))+(((-1.0)*px))+(((-0.11235)*x7507)));
evalcond[1]=((((-0.21325)*x7507))+(((-1.0)*py))+(((0.11235)*x7506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7508=((1.0)*cj5);
IkReal x7509=((((-1.0)*r01*x7508))+(((-1.0)*r00*sj5)));
j4eval[0]=x7509;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7508)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7510=cj5*cj5;
IkReal x7511=((1.0)*r21);
IkReal x7512=(cj5*sj5);
IkReal x7513=((1.0)*r20);
IkReal x7514=((((-1.0)*r00*x7511*x7512))+((r00*r20*x7510))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x7510*x7511))+(((-1.0)*r01*x7512*x7513)));
j4eval[0]=x7514;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7513)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7514);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7515=cj5*cj5;
IkReal x7516=(r21*sj5);
IkReal x7517=(r11*r21);
IkReal x7518=((1.0)*cj5*r20);
IkReal x7519=(((r12*r22))+(((-1.0)*r11*sj5*x7518))+(((-1.0)*cj5*r10*x7516))+x7517+((r10*r20*x7515))+(((-1.0)*x7515*x7517)));
j4eval[0]=x7519;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7516))+(((-1.0)*sj0*x7518))))));
j4eval[2]=IKsign(x7519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7520=cj5*cj5;
IkReal x7521=(r21*sj5);
IkReal x7522=(r11*r21);
IkReal x7523=((1.0)*cj5*r20);
CheckValue<IkReal> x7524=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7520*x7522))+((r12*r22))+(((-1.0)*cj5*r10*x7521))+(((-1.0)*r11*sj5*x7523))+((r10*r20*x7520))+x7522)),-1);
if(!x7524.valid){
continue;
}
CheckValue<IkReal> x7525 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7521))+(((-1.0)*sj0*x7523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7524.value)))+(x7525.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7526=IKsin(j4);
IkReal x7527=IKcos(j4);
IkReal x7528=(r11*sj5);
IkReal x7529=(cj5*r00);
IkReal x7530=(cj5*r10);
IkReal x7531=(r21*sj5);
IkReal x7532=(cj5*r20);
IkReal x7533=(r01*sj5);
IkReal x7534=((1.0)*x7527);
IkReal x7535=((1.0)*x7526);
evalcond[0]=((((-1.0)*x7532*x7535))+(((-1.0)*r22*x7534))+((x7526*x7531)));
evalcond[1]=((((-1.0)*r22*x7535))+(((-1.0)*x7531*x7534))+((x7527*x7532)));
evalcond[2]=(((x7526*x7528))+cj0+(((-1.0)*r12*x7534))+(((-1.0)*x7530*x7535)));
evalcond[3]=(cj0+((x7527*x7529))+(((-1.0)*x7533*x7534))+(((-1.0)*r02*x7535)));
evalcond[4]=(sj0+(((-1.0)*r12*x7535))+(((-1.0)*x7528*x7534))+((x7527*x7530)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7529*x7535))+((x7526*x7533))+(((-1.0)*r02*x7534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7536=cj5*cj5;
IkReal x7537=((1.0)*r21);
IkReal x7538=(cj5*sj5);
IkReal x7539=((1.0)*r20);
CheckValue<IkReal> x7540 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7540.valid){
continue;
}
CheckValue<IkReal> x7541=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7537*x7538))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x7536*x7537))+((r00*r20*x7536))+(((-1.0)*r01*x7538*x7539)))),-1);
if(!x7541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7540.value)+(((1.5707963267949)*(x7541.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7542=IKsin(j4);
IkReal x7543=IKcos(j4);
IkReal x7544=(r11*sj5);
IkReal x7545=(cj5*r00);
IkReal x7546=(cj5*r10);
IkReal x7547=(r21*sj5);
IkReal x7548=(cj5*r20);
IkReal x7549=(r01*sj5);
IkReal x7550=((1.0)*x7543);
IkReal x7551=((1.0)*x7542);
evalcond[0]=((((-1.0)*r22*x7550))+((x7542*x7547))+(((-1.0)*x7548*x7551)));
evalcond[1]=((((-1.0)*r22*x7551))+((x7543*x7548))+(((-1.0)*x7547*x7550)));
evalcond[2]=(cj0+((x7542*x7544))+(((-1.0)*r12*x7550))+(((-1.0)*x7546*x7551)));
evalcond[3]=(cj0+((x7543*x7545))+(((-1.0)*r02*x7551))+(((-1.0)*x7549*x7550)));
evalcond[4]=(sj0+(((-1.0)*x7544*x7550))+((x7543*x7546))+(((-1.0)*r12*x7551)));
evalcond[5]=((((-1.0)*sj0))+((x7542*x7549))+(((-1.0)*x7545*x7551))+(((-1.0)*r02*x7550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7552=((1.0)*cj5);
CheckValue<IkReal> x7553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7552)))),-1);
if(!x7553.valid){
continue;
}
CheckValue<IkReal> x7554 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7553.value)))+(x7554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7555=IKsin(j4);
IkReal x7556=IKcos(j4);
IkReal x7557=(r11*sj5);
IkReal x7558=(cj5*r00);
IkReal x7559=(cj5*r10);
IkReal x7560=(r21*sj5);
IkReal x7561=(cj5*r20);
IkReal x7562=(r01*sj5);
IkReal x7563=((1.0)*x7556);
IkReal x7564=((1.0)*x7555);
evalcond[0]=((((-1.0)*r22*x7563))+(((-1.0)*x7561*x7564))+((x7555*x7560)));
evalcond[1]=((((-1.0)*r22*x7564))+((x7556*x7561))+(((-1.0)*x7560*x7563)));
evalcond[2]=(cj0+(((-1.0)*x7559*x7564))+(((-1.0)*r12*x7563))+((x7555*x7557)));
evalcond[3]=((((-1.0)*x7562*x7563))+(((-1.0)*r02*x7564))+cj0+((x7556*x7558)));
evalcond[4]=(sj0+(((-1.0)*x7557*x7563))+((x7556*x7559))+(((-1.0)*r12*x7564)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7563))+(((-1.0)*x7558*x7564))+((x7555*x7562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7565=cj1*cj1;
IkReal x7566=(cj2*sj1);
IkReal x7567=(cj1*sj1);
IkReal x7568=(cj1*sj2);
IkReal x7569=((20000.0)*py);
IkReal x7570=(r00*sj5);
IkReal x7571=(cj5*r01);
IkReal x7572=((1707.0)*cj5*r11);
IkReal x7573=(sj2*x7565);
IkReal x7574=((1707.0)*r10*sj5);
CheckValue<IkReal> x7575=IKPowWithIntegerCheck(((((-8530.0)*cj1*cj2*x7566))+(((-4873.0)*x7573))+(((4265.0)*cj2*sj2))+(((4265.0)*x7567))+(((-4873.0)*cj1*x7566))+(((-8530.0)*cj2*x7573))),-1);
if(!x7575.valid){
continue;
}
CheckValue<IkReal> x7576=IKPowWithIntegerCheck(((((-1.0)*x7568))+(((-1.0)*x7566))),-1);
if(!x7576.valid){
continue;
}
if( IKabs(((x7575.value)*(((((-1.0)*x7568*x7569))+(((-1.0)*x7566*x7572))+(((-1.0)*x7566*x7574))+(((-1.0)*x7566*x7569))+(((-1.0)*x7568*x7574))+(((-1.0)*x7568*x7572))+(((-2247.0)*x7571))+(((-2247.0)*x7570)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7576.value)*((x7571+x7570)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7575.value)*(((((-1.0)*x7568*x7569))+(((-1.0)*x7566*x7572))+(((-1.0)*x7566*x7574))+(((-1.0)*x7566*x7569))+(((-1.0)*x7568*x7574))+(((-1.0)*x7568*x7572))+(((-2247.0)*x7571))+(((-2247.0)*x7570))))))+IKsqr(((x7576.value)*((x7571+x7570))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7575.value)*(((((-1.0)*x7568*x7569))+(((-1.0)*x7566*x7572))+(((-1.0)*x7566*x7574))+(((-1.0)*x7566*x7569))+(((-1.0)*x7568*x7574))+(((-1.0)*x7568*x7572))+(((-2247.0)*x7571))+(((-2247.0)*x7570))))), ((x7576.value)*((x7571+x7570))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7577=IKcos(j0);
IkReal x7578=IKsin(j0);
IkReal x7579=((0.21325)*cj2);
IkReal x7580=((1.0)*sj2);
IkReal x7581=(r00*sj5);
IkReal x7582=((1.0)*cj5);
IkReal x7583=(r10*sj5);
IkReal x7584=((0.08535)*cj5);
IkReal x7585=(cj1*x7578);
IkReal x7586=(cj1*x7577);
IkReal x7587=((0.21325)*sj1*sj2);
IkReal x7588=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*r01*x7582))+(((-1.0)*x7581))+(((-1.0)*x7580*x7586))+(((-1.0)*x7577*x7588)));
evalcond[1]=((((-1.0)*x7583))+(((-1.0)*x7580*x7585))+(((-1.0)*r11*x7582))+(((-1.0)*x7578*x7588)));
evalcond[2]=((((-1.0)*r01*x7584))+(((-0.11235)*x7578))+(((0.24365)*x7586))+((x7579*x7586))+(((-1.0)*px))+(((-0.08535)*x7581))+(((-1.0)*x7577*x7587)));
evalcond[3]=((((0.24365)*x7585))+((x7579*x7585))+(((-1.0)*py))+(((-0.08535)*x7583))+(((0.11235)*x7577))+(((-1.0)*r11*x7584))+(((-1.0)*x7578*x7587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7589=((1.0)*cj5);
IkReal x7590=((((-1.0)*r01*x7589))+(((-1.0)*r00*sj5)));
j4eval[0]=x7590;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7589))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7591=((1.0)*cj5);
IkReal x7592=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7591)));
j4eval[0]=x7592;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7591))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7593=((1.0)*sj0);
IkReal x7594=((1.0)*cj0);
IkReal x7595=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7595;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7594))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x7593)))))+(IKabs(((((-1.0)*r12*x7593))+(((-1.0)*r02*x7594))))));
j4eval[2]=IKsign(x7595);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7596=((-1.0)*r20);
IkReal x7598 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7598)==0){
continue;
}
IkReal x7597=pow(x7598,-0.5);
CheckValue<IkReal> x7599 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7596),IKFAST_ATAN2_MAGTHRESH);
if(!x7599.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7599.value));
IkReal gconst133=(r21*x7597);
IkReal gconst134=(x7596*x7597);
CheckValue<IkReal> x7600 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7600.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7600.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7601=((-1.0)*r20);
IkReal x7602=x7597;
CheckValue<IkReal> x7604 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7601),IKFAST_ATAN2_MAGTHRESH);
if(!x7604.valid){
continue;
}
IkReal x7603=((-1.0)*(x7604.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7603;
IkReal gconst132=x7603;
IkReal gconst133=(r21*x7602);
IkReal gconst134=(x7601*x7602);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7605=((-1.0)*r20);
IkReal x7606=x7597;
CheckValue<IkReal> x7608 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7605),IKFAST_ATAN2_MAGTHRESH);
if(!x7608.valid){
continue;
}
IkReal x7607=((-1.0)*(x7608.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7607;
IkReal gconst132=x7607;
IkReal gconst133=(r21*x7606);
IkReal gconst134=(x7605*x7606);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7609=((-1.0)*r20);
IkReal x7610=x7597;
CheckValue<IkReal> x7612 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7609),IKFAST_ATAN2_MAGTHRESH);
if(!x7612.valid){
continue;
}
IkReal x7611=((-1.0)*(x7612.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7611;
IkReal gconst132=x7611;
IkReal gconst133=(r21*x7610);
IkReal gconst134=(x7609*x7610);
IkReal x7613=r22*r22;
CheckValue<IkReal> x7616=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7613))),-1);
if(!x7616.valid){
continue;
}
IkReal x7614=x7616.value;
IkReal x7615=((((2.0)*x7614*(r20*r20)*(r21*r21)))+((x7614*(r20*r20*r20*r20)))+x7613+((x7614*(r21*r21*r21*r21))));
j4eval[0]=x7615;
j4eval[1]=IKsign(x7615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7617=(gconst133*r21);
IkReal x7618=(cj1*sj2);
IkReal x7619=(gconst134*r20);
IkReal x7620=(cj2*sj1);
CheckValue<IkReal> x7621=IKPowWithIntegerCheck(IKsign(((x7619*x7619)+(r22*r22)+(((-2.0)*x7617*x7619))+(x7617*x7617))),-1);
if(!x7621.valid){
continue;
}
CheckValue<IkReal> x7622 = IKatan2WithCheck(IkReal((((r22*x7618))+((r22*x7620)))),IkReal((((x7617*x7620))+(((-1.0)*x7618*x7619))+((x7617*x7618))+(((-1.0)*x7619*x7620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7621.value)))+(x7622.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7623=IKsin(j4);
IkReal x7624=IKcos(j4);
IkReal x7625=(sj1*sj2);
IkReal x7626=(gconst133*r11);
IkReal x7627=(gconst133*r21);
IkReal x7628=(gconst133*r01);
IkReal x7629=((1.0)*x7624);
IkReal x7630=(gconst134*x7624);
IkReal x7631=((1.0)*x7623);
IkReal x7632=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7631))+(((-1.0)*r22*x7629))+((x7623*x7627)));
evalcond[1]=((((-1.0)*gconst134*r10*x7631))+cj0+(((-1.0)*r12*x7629))+((x7623*x7626)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7631))+(((-1.0)*r02*x7629))+((x7623*x7628)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7631))+((cj1*sj2))+(((-1.0)*x7627*x7629))+((r20*x7630)));
evalcond[4]=((((-1.0)*cj0*x7632))+((r00*x7630))+(((-1.0)*r02*x7631))+(((-1.0)*x7628*x7629))+((cj0*x7625)));
evalcond[5]=((((-1.0)*x7626*x7629))+((sj0*x7625))+((r10*x7630))+(((-1.0)*r12*x7631))+(((-1.0)*sj0*x7632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7633=((1.0)*gconst134);
CheckValue<IkReal> x7634 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst133*r21*sj0))+(((-1.0)*r20*sj0*x7633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7634.valid){
continue;
}
CheckValue<IkReal> x7635=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7633)))),-1);
if(!x7635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7634.value)+(((1.5707963267949)*(x7635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7636=IKsin(j4);
IkReal x7637=IKcos(j4);
IkReal x7638=(sj1*sj2);
IkReal x7639=(gconst133*r11);
IkReal x7640=(gconst133*r21);
IkReal x7641=(gconst133*r01);
IkReal x7642=((1.0)*x7637);
IkReal x7643=(gconst134*x7637);
IkReal x7644=((1.0)*x7636);
IkReal x7645=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7642))+((x7636*x7640))+(((-1.0)*gconst134*r20*x7644)));
evalcond[1]=(cj0+(((-1.0)*r12*x7642))+(((-1.0)*gconst134*r10*x7644))+((x7636*x7639)));
evalcond[2]=((((-1.0)*sj0))+((x7636*x7641))+(((-1.0)*r02*x7642))+(((-1.0)*gconst134*r00*x7644)));
evalcond[3]=((((-1.0)*r22*x7644))+((cj2*sj1))+((cj1*sj2))+((r20*x7643))+(((-1.0)*x7640*x7642)));
evalcond[4]=((((-1.0)*r02*x7644))+(((-1.0)*cj0*x7645))+((cj0*x7638))+((r00*x7643))+(((-1.0)*x7641*x7642)));
evalcond[5]=((((-1.0)*x7639*x7642))+(((-1.0)*sj0*x7645))+(((-1.0)*r12*x7644))+((r10*x7643))+((sj0*x7638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7646=((1.0)*gconst134);
CheckValue<IkReal> x7647 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7646))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7647.valid){
continue;
}
CheckValue<IkReal> x7648=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7646)))),-1);
if(!x7648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7647.value)+(((1.5707963267949)*(x7648.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7649=IKsin(j4);
IkReal x7650=IKcos(j4);
IkReal x7651=(sj1*sj2);
IkReal x7652=(gconst133*r11);
IkReal x7653=(gconst133*r21);
IkReal x7654=(gconst133*r01);
IkReal x7655=((1.0)*x7650);
IkReal x7656=(gconst134*x7650);
IkReal x7657=((1.0)*x7649);
IkReal x7658=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7655))+((x7649*x7653))+(((-1.0)*gconst134*r20*x7657)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7657))+((x7649*x7652))+(((-1.0)*r12*x7655)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7655))+(((-1.0)*gconst134*r00*x7657))+((x7649*x7654)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7657))+((cj1*sj2))+(((-1.0)*x7653*x7655))+((r20*x7656)));
evalcond[4]=((((-1.0)*r02*x7657))+(((-1.0)*cj0*x7658))+(((-1.0)*x7654*x7655))+((cj0*x7651))+((r00*x7656)));
evalcond[5]=((((-1.0)*sj0*x7658))+((r10*x7656))+(((-1.0)*r12*x7657))+(((-1.0)*x7652*x7655))+((sj0*x7651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7659=((-1.0)*r21);
IkReal x7661 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7661)==0){
continue;
}
IkReal x7660=pow(x7661,-0.5);
CheckValue<IkReal> x7662 = IKatan2WithCheck(IkReal(x7659),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7662.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7662.value))));
IkReal gconst136=(x7659*x7660);
IkReal gconst137=((1.0)*r20*x7660);
CheckValue<IkReal> x7663 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7663.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7663.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7664=((-1.0)*r21);
CheckValue<IkReal> x7667 = IKatan2WithCheck(IkReal(x7664),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7667.valid){
continue;
}
IkReal x7665=((1.0)*(x7667.value));
IkReal x7666=x7660;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7665)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7665)));
IkReal gconst136=(x7664*x7666);
IkReal gconst137=((1.0)*r20*x7666);
IkReal x7668=r22*r22;
IkReal x7669=((1.0)*x7668);
CheckValue<IkReal> x7673=IKPowWithIntegerCheck(((-1.0)+x7668),-1);
if(!x7673.valid){
continue;
}
IkReal x7670=x7673.value;
if((((1.0)+(((-1.0)*x7669)))) < -0.00001)
continue;
IkReal x7671=IKsqrt(((1.0)+(((-1.0)*x7669))));
IkReal x7672=(cj0*x7670*x7671);
j4eval[0]=((IKabs(((((-1.0)*x7669*x7672))+x7672)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7674=((-1.0)*r21);
CheckValue<IkReal> x7677 = IKatan2WithCheck(IkReal(x7674),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7677.valid){
continue;
}
IkReal x7675=((1.0)*(x7677.value));
IkReal x7676=x7660;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7675)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7675)));
IkReal gconst136=(x7674*x7676);
IkReal gconst137=((1.0)*r20*x7676);
IkReal x7678=r22*r22;
IkReal x7679=((1.0)*x7678);
CheckValue<IkReal> x7683=IKPowWithIntegerCheck(((-1.0)+x7678),-1);
if(!x7683.valid){
continue;
}
IkReal x7680=x7683.value;
if((((1.0)+(((-1.0)*x7679)))) < -0.00001)
continue;
IkReal x7681=IKsqrt(((1.0)+(((-1.0)*x7679))));
IkReal x7682=(sj0*x7680*x7681);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7679*x7682))+x7682))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7684=((-1.0)*r21);
CheckValue<IkReal> x7687 = IKatan2WithCheck(IkReal(x7684),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7687.valid){
continue;
}
IkReal x7685=((1.0)*(x7687.value));
IkReal x7686=x7660;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7685)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7685)));
IkReal gconst136=(x7684*x7686);
IkReal gconst137=((1.0)*r20*x7686);
IkReal x7688=r22*r22;
IkReal x7689=(r12*sj0);
IkReal x7690=(cj0*r02);
CheckValue<IkReal> x7694=IKPowWithIntegerCheck(((-1.0)+x7688),-1);
if(!x7694.valid){
continue;
}
IkReal x7691=x7694.value;
if((((1.0)+(((-1.0)*x7688)))) < -0.00001)
continue;
IkReal x7692=IKsqrt(((1.0)+(((-1.0)*x7688))));
IkReal x7693=(r22*x7691*x7692);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7689*x7693))+((x7690*x7693)))))+(IKabs(((((-1.0)*x7690))+(((-1.0)*x7689))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7695=((1.0)*sj0);
IkReal x7696=((1.0)*cj0);
CheckValue<IkReal> x7697=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7697.valid){
continue;
}
CheckValue<IkReal> x7698 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7696))+(((-1.0)*r12*x7695)))),IkReal(((((-1.0)*gconst136*r01*x7696))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7695))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7697.value)))+(x7698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7699=IKsin(j4);
IkReal x7700=IKcos(j4);
IkReal x7701=(gconst136*r01);
IkReal x7702=(gconst137*r10);
IkReal x7703=(sj1*sj2);
IkReal x7704=(gconst137*r20);
IkReal x7705=(gconst136*r11);
IkReal x7706=(gconst136*r21);
IkReal x7707=(gconst137*r00);
IkReal x7708=((1.0)*x7700);
IkReal x7709=((1.0)*cj1*cj2);
IkReal x7710=((1.0)*x7699);
evalcond[0]=((((-1.0)*r22*x7708))+(((-1.0)*x7704*x7710))+((x7699*x7706)));
evalcond[1]=(cj0+(((-1.0)*r12*x7708))+(((-1.0)*x7702*x7710))+((x7699*x7705)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7707*x7710))+(((-1.0)*r02*x7708))+((x7699*x7701)));
evalcond[3]=(((cj2*sj1))+((x7700*x7704))+(((-1.0)*r22*x7710))+((cj1*sj2))+(((-1.0)*x7706*x7708)));
evalcond[4]=(((x7700*x7707))+((cj0*x7703))+(((-1.0)*x7701*x7708))+(((-1.0)*r02*x7710))+(((-1.0)*cj0*x7709)));
evalcond[5]=(((x7700*x7702))+(((-1.0)*r12*x7710))+((sj0*x7703))+(((-1.0)*x7705*x7708))+(((-1.0)*sj0*x7709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7711=((1.0)*gconst137);
CheckValue<IkReal> x7712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7711))+(((-1.0)*gconst136*r10)))),-1);
if(!x7712.valid){
continue;
}
CheckValue<IkReal> x7713 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7711))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7712.value)))+(x7713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7714=IKsin(j4);
IkReal x7715=IKcos(j4);
IkReal x7716=(gconst136*r01);
IkReal x7717=(gconst137*r10);
IkReal x7718=(sj1*sj2);
IkReal x7719=(gconst137*r20);
IkReal x7720=(gconst136*r11);
IkReal x7721=(gconst136*r21);
IkReal x7722=(gconst137*r00);
IkReal x7723=((1.0)*x7715);
IkReal x7724=((1.0)*cj1*cj2);
IkReal x7725=((1.0)*x7714);
evalcond[0]=((((-1.0)*x7719*x7725))+((x7714*x7721))+(((-1.0)*r22*x7723)));
evalcond[1]=(cj0+(((-1.0)*x7717*x7725))+((x7714*x7720))+(((-1.0)*r12*x7723)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7723))+((x7714*x7716))+(((-1.0)*x7722*x7725)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7715*x7719))+(((-1.0)*r22*x7725))+(((-1.0)*x7721*x7723)));
evalcond[4]=(((x7715*x7722))+(((-1.0)*x7716*x7723))+((cj0*x7718))+(((-1.0)*r02*x7725))+(((-1.0)*cj0*x7724)));
evalcond[5]=((((-1.0)*sj0*x7724))+((sj0*x7718))+((x7715*x7717))+(((-1.0)*x7720*x7723))+(((-1.0)*r12*x7725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7726=((1.0)*gconst137);
CheckValue<IkReal> x7727=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7726))+(((-1.0)*gconst136*r00)))),-1);
if(!x7727.valid){
continue;
}
CheckValue<IkReal> x7728 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7726))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7727.value)))+(x7728.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7729=IKsin(j4);
IkReal x7730=IKcos(j4);
IkReal x7731=(gconst136*r01);
IkReal x7732=(gconst137*r10);
IkReal x7733=(sj1*sj2);
IkReal x7734=(gconst137*r20);
IkReal x7735=(gconst136*r11);
IkReal x7736=(gconst136*r21);
IkReal x7737=(gconst137*r00);
IkReal x7738=((1.0)*x7730);
IkReal x7739=((1.0)*cj1*cj2);
IkReal x7740=((1.0)*x7729);
evalcond[0]=(((x7729*x7736))+(((-1.0)*r22*x7738))+(((-1.0)*x7734*x7740)));
evalcond[1]=(cj0+((x7729*x7735))+(((-1.0)*r12*x7738))+(((-1.0)*x7732*x7740)));
evalcond[2]=((((-1.0)*sj0))+((x7729*x7731))+(((-1.0)*x7737*x7740))+(((-1.0)*r02*x7738)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7740))+(((-1.0)*x7736*x7738))+((cj1*sj2))+((x7730*x7734)));
evalcond[4]=((((-1.0)*cj0*x7739))+(((-1.0)*x7731*x7738))+(((-1.0)*r02*x7740))+((cj0*x7733))+((x7730*x7737)));
evalcond[5]=(((x7730*x7732))+(((-1.0)*r12*x7740))+(((-1.0)*x7735*x7738))+((sj0*x7733))+(((-1.0)*sj0*x7739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7741=((-1.0)*r10);
IkReal x7743 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7743)==0){
continue;
}
IkReal x7742=pow(x7743,-0.5);
CheckValue<IkReal> x7744 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7741),IKFAST_ATAN2_MAGTHRESH);
if(!x7744.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7744.value));
IkReal gconst139=(r11*x7742);
IkReal gconst140=(x7741*x7742);
CheckValue<IkReal> x7745 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7745.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7745.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7746=((-1.0)*r10);
IkReal x7747=x7742;
CheckValue<IkReal> x7749 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7746),IKFAST_ATAN2_MAGTHRESH);
if(!x7749.valid){
continue;
}
IkReal x7748=((-1.0)*(x7749.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7748;
IkReal gconst138=x7748;
IkReal gconst139=(r11*x7747);
IkReal gconst140=(x7746*x7747);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7750=((1.0)*sj0);
IkReal x7751=((1.0)*gconst139);
CheckValue<IkReal> x7752 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7750)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7750))+(((-1.0)*cj0*r01*x7751))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7752.valid){
continue;
}
CheckValue<IkReal> x7753=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7751)))),-1);
if(!x7753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7752.value)+(((1.5707963267949)*(x7753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7754=IKsin(j4);
IkReal x7755=IKcos(j4);
IkReal x7756=(gconst140*r00);
IkReal x7757=(sj1*sj2);
IkReal x7758=(gconst139*r11);
IkReal x7759=(gconst139*r01);
IkReal x7760=(gconst139*r21);
IkReal x7761=((1.0)*x7755);
IkReal x7762=((1.0)*x7754);
IkReal x7763=((1.0)*cj1*cj2);
IkReal x7764=(gconst140*x7755);
evalcond[0]=((((-1.0)*r22*x7761))+((x7754*x7760))+(((-1.0)*gconst140*r20*x7762)));
evalcond[1]=(cj0+(((-1.0)*r12*x7761))+((x7754*x7758))+(((-1.0)*gconst140*r10*x7762)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7761))+(((-1.0)*x7756*x7762))+((x7754*x7759)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7760*x7761))+(((-1.0)*r22*x7762))+((cj1*sj2))+((r20*x7764)));
evalcond[4]=((((-1.0)*r02*x7762))+(((-1.0)*cj0*x7763))+((x7755*x7756))+(((-1.0)*x7759*x7761))+((cj0*x7757)));
evalcond[5]=(((sj0*x7757))+(((-1.0)*x7758*x7761))+(((-1.0)*sj0*x7763))+(((-1.0)*r12*x7762))+((r10*x7764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7765=((1.0)*gconst140);
CheckValue<IkReal> x7766 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7765)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7766.valid){
continue;
}
CheckValue<IkReal> x7767=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7765))+(((-1.0)*gconst139*r00)))),-1);
if(!x7767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7766.value)+(((1.5707963267949)*(x7767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7768=IKsin(j4);
IkReal x7769=IKcos(j4);
IkReal x7770=(gconst140*r00);
IkReal x7771=(sj1*sj2);
IkReal x7772=(gconst139*r11);
IkReal x7773=(gconst139*r01);
IkReal x7774=(gconst139*r21);
IkReal x7775=((1.0)*x7769);
IkReal x7776=((1.0)*x7768);
IkReal x7777=((1.0)*cj1*cj2);
IkReal x7778=(gconst140*x7769);
evalcond[0]=((((-1.0)*r22*x7775))+((x7768*x7774))+(((-1.0)*gconst140*r20*x7776)));
evalcond[1]=(cj0+((x7768*x7772))+(((-1.0)*r12*x7775))+(((-1.0)*gconst140*r10*x7776)));
evalcond[2]=((((-1.0)*r02*x7775))+(((-1.0)*sj0))+((x7768*x7773))+(((-1.0)*x7770*x7776)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7776))+((cj1*sj2))+((r20*x7778))+(((-1.0)*x7774*x7775)));
evalcond[4]=((((-1.0)*r02*x7776))+(((-1.0)*cj0*x7777))+((x7769*x7770))+((cj0*x7771))+(((-1.0)*x7773*x7775)));
evalcond[5]=((((-1.0)*x7772*x7775))+((sj0*x7771))+(((-1.0)*sj0*x7777))+(((-1.0)*r12*x7776))+((r10*x7778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7779=((-1.0)*r11);
IkReal x7781 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7781)==0){
continue;
}
IkReal x7780=pow(x7781,-0.5);
CheckValue<IkReal> x7782 = IKatan2WithCheck(IkReal(x7779),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7782.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7782.value))));
IkReal gconst142=(x7779*x7780);
IkReal gconst143=((1.0)*r10*x7780);
CheckValue<IkReal> x7783 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7783.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7783.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7784=((-1.0)*r11);
CheckValue<IkReal> x7787 = IKatan2WithCheck(IkReal(x7784),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7787.valid){
continue;
}
IkReal x7785=((1.0)*(x7787.value));
IkReal x7786=x7780;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7785)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7785)));
IkReal gconst142=(x7784*x7786);
IkReal gconst143=((1.0)*r10*x7786);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7788=((-1.0)*r11);
CheckValue<IkReal> x7791 = IKatan2WithCheck(IkReal(x7788),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7791.valid){
continue;
}
IkReal x7789=((1.0)*(x7791.value));
IkReal x7790=x7780;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7789)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7789)));
IkReal gconst142=(x7788*x7790);
IkReal gconst143=((1.0)*r10*x7790);
IkReal x7792=r12*r12;
IkReal x7793=((1.0)*sj0);
IkReal x7794=(cj0*r02);
IkReal x7795=x7780;
j4eval[0]=((IKabs(((((-1.0)*r12*x7793))+(((-1.0)*x7794)))))+(IKabs((((r12*x7794*x7795))+(((-1.0)*x7793*x7795))+((sj0*x7792*x7795))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7796=((-1.0)*r11);
CheckValue<IkReal> x7799 = IKatan2WithCheck(IkReal(x7796),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7799.valid){
continue;
}
IkReal x7797=((1.0)*(x7799.value));
IkReal x7798=x7780;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7797)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7797)));
IkReal gconst142=(x7796*x7798);
IkReal gconst143=((1.0)*r10*x7798);
IkReal x7800=r12*r12;
IkReal x7801=(cj1*r22*sj2);
IkReal x7802=(cj2*r22*sj1);
CheckValue<IkReal> x7806=IKPowWithIntegerCheck(((-1.0)+x7800),-1);
if(!x7806.valid){
continue;
}
IkReal x7803=x7806.value;
if((((1.0)+(((-1.0)*x7800)))) < -0.00001)
continue;
IkReal x7804=IKsqrt(((1.0)+(((-1.0)*x7800))));
IkReal x7805=((1.0)*r12*x7803*x7804);
j4eval[0]=((IKabs((x7801+x7802)))+(IKabs(((((-1.0)*x7801*x7805))+(((-1.0)*x7802*x7805))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7807=(gconst142*r21);
IkReal x7808=(cj1*sj2);
IkReal x7809=(cj2*sj1);
IkReal x7810=(gconst143*r20);
CheckValue<IkReal> x7811 = IKatan2WithCheck(IkReal((((r22*x7809))+((r22*x7808)))),IkReal(((((-1.0)*x7808*x7810))+(((-1.0)*x7809*x7810))+((x7807*x7808))+((x7807*x7809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7811.valid){
continue;
}
CheckValue<IkReal> x7812=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7810*x7810)+(((-2.0)*x7807*x7810))+(x7807*x7807))),-1);
if(!x7812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7811.value)+(((1.5707963267949)*(x7812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7813=IKsin(j4);
IkReal x7814=IKcos(j4);
IkReal x7815=(sj1*sj2);
IkReal x7816=(gconst143*r20);
IkReal x7817=((1.0)*x7814);
IkReal x7818=((1.0)*cj1*cj2);
IkReal x7819=((1.0)*x7813);
IkReal x7820=(gconst142*x7813);
IkReal x7821=(gconst143*x7814);
evalcond[0]=(((r21*x7820))+(((-1.0)*r22*x7817))+(((-1.0)*x7816*x7819)));
evalcond[1]=(cj0+((r11*x7820))+(((-1.0)*r12*x7817))+(((-1.0)*gconst143*r10*x7819)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7817))+((r01*x7820))+(((-1.0)*gconst143*r00*x7819)));
evalcond[3]=(((cj2*sj1))+((x7814*x7816))+((cj1*sj2))+(((-1.0)*r22*x7819))+(((-1.0)*gconst142*r21*x7817)));
evalcond[4]=((((-1.0)*gconst142*r01*x7817))+(((-1.0)*r02*x7819))+((r00*x7821))+(((-1.0)*cj0*x7818))+((cj0*x7815)));
evalcond[5]=(((r10*x7821))+(((-1.0)*gconst142*r11*x7817))+((sj0*x7815))+(((-1.0)*r12*x7819))+(((-1.0)*sj0*x7818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7822=((1.0)*sj0);
IkReal x7823=((1.0)*gconst142);
CheckValue<IkReal> x7824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7823))+(((-1.0)*gconst143*r21)))),-1);
if(!x7824.valid){
continue;
}
CheckValue<IkReal> x7825 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7822)))),IkReal(((((-1.0)*gconst142*r11*x7822))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7823))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7824.value)))+(x7825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7826=IKsin(j4);
IkReal x7827=IKcos(j4);
IkReal x7828=(sj1*sj2);
IkReal x7829=(gconst143*r20);
IkReal x7830=((1.0)*x7827);
IkReal x7831=((1.0)*cj1*cj2);
IkReal x7832=((1.0)*x7826);
IkReal x7833=(gconst142*x7826);
IkReal x7834=(gconst143*x7827);
evalcond[0]=(((r21*x7833))+(((-1.0)*x7829*x7832))+(((-1.0)*r22*x7830)));
evalcond[1]=((((-1.0)*gconst143*r10*x7832))+cj0+(((-1.0)*r12*x7830))+((r11*x7833)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7832))+(((-1.0)*r02*x7830))+((r01*x7833)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7832))+((cj1*sj2))+((x7827*x7829))+(((-1.0)*gconst142*r21*x7830)));
evalcond[4]=((((-1.0)*cj0*x7831))+(((-1.0)*gconst142*r01*x7830))+(((-1.0)*r02*x7832))+((r00*x7834))+((cj0*x7828)));
evalcond[5]=(((r10*x7834))+((sj0*x7828))+(((-1.0)*r12*x7832))+(((-1.0)*sj0*x7831))+(((-1.0)*gconst142*r11*x7830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7835=((1.0)*gconst143);
CheckValue<IkReal> x7836=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7835)))),-1);
if(!x7836.valid){
continue;
}
CheckValue<IkReal> x7837 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7835))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7836.value)))+(x7837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7838=IKsin(j4);
IkReal x7839=IKcos(j4);
IkReal x7840=(sj1*sj2);
IkReal x7841=(gconst143*r20);
IkReal x7842=((1.0)*x7839);
IkReal x7843=((1.0)*cj1*cj2);
IkReal x7844=((1.0)*x7838);
IkReal x7845=(gconst142*x7838);
IkReal x7846=(gconst143*x7839);
evalcond[0]=(((r21*x7845))+(((-1.0)*r22*x7842))+(((-1.0)*x7841*x7844)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x7844))+(((-1.0)*r12*x7842))+((r11*x7845)));
evalcond[2]=((((-1.0)*gconst143*r00*x7844))+(((-1.0)*sj0))+(((-1.0)*r02*x7842))+((r01*x7845)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7844))+((cj1*sj2))+((x7839*x7841))+(((-1.0)*gconst142*r21*x7842)));
evalcond[4]=((((-1.0)*cj0*x7843))+(((-1.0)*gconst142*r01*x7842))+((cj0*x7840))+((r00*x7846))+(((-1.0)*r02*x7844)));
evalcond[5]=((((-1.0)*gconst142*r11*x7842))+((r10*x7846))+(((-1.0)*r12*x7844))+(((-1.0)*sj0*x7843))+((sj0*x7840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7847=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7847;
j4eval[1]=IKsign(x7847);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7848=((1.0)*cj5);
IkReal x7849=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7848)));
j4eval[0]=x7849;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7848))))));
j4eval[2]=IKsign(x7849);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7850=cj5*cj5;
IkReal x7851=r11*r11;
IkReal x7852=(r11*sj5);
IkReal x7853=(cj5*r10);
IkReal x7854=((r12*r12)+((x7850*(r10*r10)))+x7851+(((-2.0)*x7852*x7853))+(((-1.0)*x7850*x7851)));
j4eval[0]=x7854;
j4eval[1]=IKsign(x7854);
j4eval[2]=((IKabs(r12))+(IKabs((x7853+(((-1.0)*x7852))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7855=cj5*cj5;
IkReal x7856=r11*r11;
IkReal x7857=(cj5*r10);
IkReal x7858=(r11*sj5);
CheckValue<IkReal> x7859=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x7857*x7858))+((x7855*(r10*r10)))+(((-1.0)*x7855*x7856))+x7856)),-1);
if(!x7859.valid){
continue;
}
CheckValue<IkReal> x7860 = IKatan2WithCheck(IkReal((x7857+(((-1.0)*x7858)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7859.value)))+(x7860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7861=IKsin(j4);
IkReal x7862=IKcos(j4);
IkReal x7863=(cj5*r10);
IkReal x7864=(r01*sj5);
IkReal x7865=(cj5*r00);
IkReal x7866=(cj5*r20);
IkReal x7867=((1.0)*x7862);
IkReal x7868=((1.0)*x7861);
IkReal x7869=(sj5*x7861);
evalcond[0]=(((r21*x7869))+(((-1.0)*x7866*x7868))+(((-1.0)*r22*x7867)));
evalcond[1]=(((x7861*x7864))+(((-1.0)*r02*x7867))+(((-1.0)*x7865*x7868)));
evalcond[2]=((((-1.0)*r11*sj5*x7867))+(((-1.0)*r12*x7868))+((x7862*x7863)));
evalcond[3]=((1.0)+(((-1.0)*x7863*x7868))+((r11*x7869))+(((-1.0)*r12*x7867)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7862*x7866))+(((-1.0)*r21*sj5*x7867))+(((-1.0)*r22*x7868)));
evalcond[5]=((((-1.0)*x7864*x7867))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7868))+((x7862*x7865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7870=((1.0)*cj5);
CheckValue<IkReal> x7871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7870))+(((-1.0)*r00*sj5)))),-1);
if(!x7871.valid){
continue;
}
CheckValue<IkReal> x7872 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7871.value)))+(x7872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7873=IKsin(j4);
IkReal x7874=IKcos(j4);
IkReal x7875=(cj5*r10);
IkReal x7876=(r01*sj5);
IkReal x7877=(cj5*r00);
IkReal x7878=(cj5*r20);
IkReal x7879=((1.0)*x7874);
IkReal x7880=((1.0)*x7873);
IkReal x7881=(sj5*x7873);
evalcond[0]=((((-1.0)*r22*x7879))+(((-1.0)*x7878*x7880))+((r21*x7881)));
evalcond[1]=((((-1.0)*x7877*x7880))+(((-1.0)*r02*x7879))+((x7873*x7876)));
evalcond[2]=(((x7874*x7875))+(((-1.0)*r11*sj5*x7879))+(((-1.0)*r12*x7880)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7879))+((r11*x7881))+(((-1.0)*x7875*x7880)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7880))+((x7874*x7878))+((cj1*sj2))+(((-1.0)*r21*sj5*x7879)));
evalcond[5]=(((x7874*x7877))+(((-1.0)*x7876*x7879))+(((-1.0)*r02*x7880))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7882=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7882.valid){
continue;
}
CheckValue<IkReal> x7883 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7882.value)))+(x7883.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7884=IKsin(j4);
IkReal x7885=IKcos(j4);
IkReal x7886=(cj5*r10);
IkReal x7887=(r01*sj5);
IkReal x7888=(cj5*r00);
IkReal x7889=(cj5*r20);
IkReal x7890=((1.0)*x7885);
IkReal x7891=((1.0)*x7884);
IkReal x7892=(sj5*x7884);
evalcond[0]=(((r21*x7892))+(((-1.0)*x7889*x7891))+(((-1.0)*r22*x7890)));
evalcond[1]=((((-1.0)*x7888*x7891))+((x7884*x7887))+(((-1.0)*r02*x7890)));
evalcond[2]=((((-1.0)*r11*sj5*x7890))+((x7885*x7886))+(((-1.0)*r12*x7891)));
evalcond[3]=((1.0)+(((-1.0)*x7886*x7891))+(((-1.0)*r12*x7890))+((r11*x7892)));
evalcond[4]=(((cj2*sj1))+((x7885*x7889))+((cj1*sj2))+(((-1.0)*r21*sj5*x7890))+(((-1.0)*r22*x7891)));
evalcond[5]=(((x7885*x7888))+(((-1.0)*x7887*x7890))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7893=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7893;
j4eval[1]=IKsign(x7893);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7894=((1.0)*cj5);
IkReal x7895=((((-1.0)*r21*x7894))+(((-1.0)*r20*sj5)));
j4eval[0]=x7895;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7894))))));
j4eval[2]=IKsign(x7895);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7896=cj5*cj5;
IkReal x7897=r11*r11;
IkReal x7898=(cj5*r10);
IkReal x7899=(r11*sj5);
IkReal x7900=((((-1.0)*x7896*(r10*r10)))+(((2.0)*x7898*x7899))+((x7896*x7897))+(((-1.0)*(r12*r12)))+(((-1.0)*x7897)));
j4eval[0]=x7900;
j4eval[1]=((IKabs(r12))+(IKabs((x7898+(((-1.0)*x7899))))));
j4eval[2]=IKsign(x7900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7901=cj5*cj5;
IkReal x7902=r11*r11;
IkReal x7903=(cj5*r10);
IkReal x7904=(r11*sj5);
CheckValue<IkReal> x7905 = IKatan2WithCheck(IkReal(((((-1.0)*x7904))+x7903)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7905.valid){
continue;
}
CheckValue<IkReal> x7906=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7902))+(((-1.0)*(r12*r12)))+(((2.0)*x7903*x7904))+((x7901*x7902))+(((-1.0)*x7901*(r10*r10))))),-1);
if(!x7906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7905.value)+(((1.5707963267949)*(x7906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7907=IKsin(j4);
IkReal x7908=IKcos(j4);
IkReal x7909=(cj5*r10);
IkReal x7910=(r01*sj5);
IkReal x7911=(cj5*r00);
IkReal x7912=(cj5*r20);
IkReal x7913=((1.0)*x7908);
IkReal x7914=((1.0)*x7907);
IkReal x7915=(sj5*x7907);
evalcond[0]=(((r21*x7915))+(((-1.0)*r22*x7913))+(((-1.0)*x7912*x7914)));
evalcond[1]=((((-1.0)*r02*x7913))+(((-1.0)*x7911*x7914))+((x7907*x7910)));
evalcond[2]=(((x7908*x7909))+(((-1.0)*r11*sj5*x7913))+(((-1.0)*r12*x7914)));
evalcond[3]=((-1.0)+((r11*x7915))+(((-1.0)*r12*x7913))+(((-1.0)*x7909*x7914)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7914))+(((-1.0)*r21*sj5*x7913))+((x7908*x7912)));
evalcond[5]=((((-1.0)*r02*x7914))+(((-1.0)*sj1*sj2))+(((-1.0)*x7910*x7913))+((x7908*x7911))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7916=((1.0)*cj5);
CheckValue<IkReal> x7917 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7917.valid){
continue;
}
CheckValue<IkReal> x7918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7916))+(((-1.0)*r20*sj5)))),-1);
if(!x7918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7917.value)+(((1.5707963267949)*(x7918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7919=IKsin(j4);
IkReal x7920=IKcos(j4);
IkReal x7921=(cj5*r10);
IkReal x7922=(r01*sj5);
IkReal x7923=(cj5*r00);
IkReal x7924=(cj5*r20);
IkReal x7925=((1.0)*x7920);
IkReal x7926=((1.0)*x7919);
IkReal x7927=(sj5*x7919);
evalcond[0]=((((-1.0)*x7924*x7926))+(((-1.0)*r22*x7925))+((r21*x7927)));
evalcond[1]=((((-1.0)*r02*x7925))+((x7919*x7922))+(((-1.0)*x7923*x7926)));
evalcond[2]=((((-1.0)*r11*sj5*x7925))+((x7920*x7921))+(((-1.0)*r12*x7926)));
evalcond[3]=((-1.0)+(((-1.0)*x7921*x7926))+(((-1.0)*r12*x7925))+((r11*x7927)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7926))+((x7920*x7924))+(((-1.0)*r21*sj5*x7925)));
evalcond[5]=((((-1.0)*r02*x7926))+(((-1.0)*sj1*sj2))+(((-1.0)*x7922*x7925))+((x7920*x7923))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7928 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7928.valid){
continue;
}
CheckValue<IkReal> x7929=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7928.value)+(((1.5707963267949)*(x7929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7930=IKsin(j4);
IkReal x7931=IKcos(j4);
IkReal x7932=(cj5*r10);
IkReal x7933=(r01*sj5);
IkReal x7934=(cj5*r00);
IkReal x7935=(cj5*r20);
IkReal x7936=((1.0)*x7931);
IkReal x7937=((1.0)*x7930);
IkReal x7938=(sj5*x7930);
evalcond[0]=((((-1.0)*x7935*x7937))+((r21*x7938))+(((-1.0)*r22*x7936)));
evalcond[1]=((((-1.0)*x7934*x7937))+((x7930*x7933))+(((-1.0)*r02*x7936)));
evalcond[2]=((((-1.0)*r11*sj5*x7936))+(((-1.0)*r12*x7937))+((x7931*x7932)));
evalcond[3]=((-1.0)+(((-1.0)*x7932*x7937))+(((-1.0)*r12*x7936))+((r11*x7938)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7937))+(((-1.0)*r21*sj5*x7936))+((cj1*sj2))+((x7931*x7935)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7937))+((x7931*x7934))+((cj1*cj2))+(((-1.0)*x7933*x7936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7939=((-1.0)*r00);
IkReal x7941 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7941)==0){
continue;
}
IkReal x7940=pow(x7941,-0.5);
CheckValue<IkReal> x7942 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7939),IKFAST_ATAN2_MAGTHRESH);
if(!x7942.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7942.value));
IkReal gconst145=(r01*x7940);
IkReal gconst146=(x7939*x7940);
CheckValue<IkReal> x7943 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7943.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7943.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7944=((-1.0)*r00);
IkReal x7945=x7940;
CheckValue<IkReal> x7947 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7944),IKFAST_ATAN2_MAGTHRESH);
if(!x7947.valid){
continue;
}
IkReal x7946=((-1.0)*(x7947.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7946;
IkReal gconst144=x7946;
IkReal gconst145=(r01*x7945);
IkReal gconst146=(x7944*x7945);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7948=((1.0)*sj0);
IkReal x7949=((1.0)*gconst145);
CheckValue<IkReal> x7950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7949))+(((-1.0)*gconst146*r21)))),-1);
if(!x7950.valid){
continue;
}
CheckValue<IkReal> x7951 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7948))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x7949))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7950.value)))+(x7951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7952=IKsin(j4);
IkReal x7953=IKcos(j4);
IkReal x7954=(gconst146*r10);
IkReal x7955=(sj1*sj2);
IkReal x7956=(gconst146*r20);
IkReal x7957=(gconst146*r00);
IkReal x7958=((1.0)*x7953);
IkReal x7959=((1.0)*x7952);
IkReal x7960=(gconst145*x7952);
IkReal x7961=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x7960))+(((-1.0)*x7956*x7959))+(((-1.0)*r22*x7958)));
evalcond[1]=(((r11*x7960))+(((-1.0)*x7954*x7959))+cj0+(((-1.0)*r12*x7958)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7957*x7959))+((r01*x7960))+(((-1.0)*r02*x7958)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7959))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7958))+((x7953*x7956)));
evalcond[4]=(((cj0*x7955))+(((-1.0)*gconst145*r01*x7958))+(((-1.0)*r02*x7959))+(((-1.0)*cj0*x7961))+((x7953*x7957)));
evalcond[5]=((((-1.0)*gconst145*r11*x7958))+(((-1.0)*sj0*x7961))+((sj0*x7955))+((x7953*x7954))+(((-1.0)*r12*x7959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7962=((1.0)*gconst146);
CheckValue<IkReal> x7963 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7962))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7963.valid){
continue;
}
CheckValue<IkReal> x7964=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x7962)))),-1);
if(!x7964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7963.value)+(((1.5707963267949)*(x7964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7965=IKsin(j4);
IkReal x7966=IKcos(j4);
IkReal x7967=(gconst146*r10);
IkReal x7968=(sj1*sj2);
IkReal x7969=(gconst146*r20);
IkReal x7970=(gconst146*r00);
IkReal x7971=((1.0)*x7966);
IkReal x7972=((1.0)*x7965);
IkReal x7973=(gconst145*x7965);
IkReal x7974=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7971))+(((-1.0)*x7969*x7972))+((r21*x7973)));
evalcond[1]=(cj0+((r11*x7973))+(((-1.0)*x7967*x7972))+(((-1.0)*r12*x7971)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7973))+(((-1.0)*x7970*x7972))+(((-1.0)*r02*x7971)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7972))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7971))+((x7966*x7969)));
evalcond[4]=((((-1.0)*gconst145*r01*x7971))+(((-1.0)*cj0*x7974))+((cj0*x7968))+(((-1.0)*r02*x7972))+((x7966*x7970)));
evalcond[5]=((((-1.0)*sj0*x7974))+(((-1.0)*r12*x7972))+((x7966*x7967))+(((-1.0)*gconst145*r11*x7971))+((sj0*x7968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7975=((-1.0)*r01);
IkReal x7977 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7977)==0){
continue;
}
IkReal x7976=pow(x7977,-0.5);
CheckValue<IkReal> x7978 = IKatan2WithCheck(IkReal(x7975),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7978.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7978.value))));
IkReal gconst148=(x7975*x7976);
IkReal gconst149=((1.0)*r00*x7976);
CheckValue<IkReal> x7979 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7979.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7979.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7980=((-1.0)*r01);
CheckValue<IkReal> x7983 = IKatan2WithCheck(IkReal(x7980),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7983.valid){
continue;
}
IkReal x7981=((1.0)*(x7983.value));
IkReal x7982=x7976;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7981)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7981)));
IkReal gconst148=(x7980*x7982);
IkReal gconst149=((1.0)*r00*x7982);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7984=((-1.0)*r01);
CheckValue<IkReal> x7987 = IKatan2WithCheck(IkReal(x7984),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7987.valid){
continue;
}
IkReal x7985=((1.0)*(x7987.value));
IkReal x7986=x7976;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7985)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7985)));
IkReal gconst148=(x7984*x7986);
IkReal gconst149=((1.0)*r00*x7986);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7988=((-1.0)*r01);
CheckValue<IkReal> x7991 = IKatan2WithCheck(IkReal(x7988),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7991.valid){
continue;
}
IkReal x7989=((1.0)*(x7991.value));
IkReal x7990=x7976;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7989)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7989)));
IkReal gconst148=(x7988*x7990);
IkReal gconst149=((1.0)*r00*x7990);
IkReal x7992=r02*r02;
IkReal x7993=(r12*sj0);
IkReal x7994=((1.0)*cj0);
IkReal x7995=x7976;
j4eval[0]=((IKabs(((((-1.0)*x7993))+(((-1.0)*r02*x7994)))))+(IKabs((((r02*x7993*x7995))+((cj0*x7992*x7995))+(((-1.0)*x7994*x7995))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7996=((1.0)*sj0);
IkReal x7997=((1.0)*gconst148);
CheckValue<IkReal> x7998=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7997))+(((-1.0)*gconst149*r21)))),-1);
if(!x7998.valid){
continue;
}
CheckValue<IkReal> x7999 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7996))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7996))+(((-1.0)*cj0*r01*x7997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7998.value)))+(x7999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8000=IKsin(j4);
IkReal x8001=IKcos(j4);
IkReal x8002=(gconst148*r11);
IkReal x8003=(sj1*sj2);
IkReal x8004=((1.0)*x8001);
IkReal x8005=(gconst149*x8001);
IkReal x8006=(gconst148*x8000);
IkReal x8007=((1.0)*cj1*cj2);
IkReal x8008=((1.0)*x8000);
evalcond[0]=(((r21*x8006))+(((-1.0)*gconst149*r20*x8008))+(((-1.0)*r22*x8004)));
evalcond[1]=(cj0+((x8000*x8002))+(((-1.0)*r12*x8004))+(((-1.0)*gconst149*r10*x8008)));
evalcond[2]=(((r01*x8006))+(((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8008))+(((-1.0)*r02*x8004)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8004))+((cj1*sj2))+((r20*x8005))+(((-1.0)*r22*x8008)));
evalcond[4]=(((r00*x8005))+(((-1.0)*cj0*x8007))+((cj0*x8003))+(((-1.0)*gconst148*r01*x8004))+(((-1.0)*r02*x8008)));
evalcond[5]=(((sj0*x8003))+(((-1.0)*r12*x8008))+(((-1.0)*sj0*x8007))+(((-1.0)*x8002*x8004))+((r10*x8005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8009=((1.0)*gconst149);
CheckValue<IkReal> x8010=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8009))+(((-1.0)*gconst148*r10)))),-1);
if(!x8010.valid){
continue;
}
CheckValue<IkReal> x8011 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8009))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8010.value)))+(x8011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8012=IKsin(j4);
IkReal x8013=IKcos(j4);
IkReal x8014=(gconst148*r11);
IkReal x8015=(sj1*sj2);
IkReal x8016=((1.0)*x8013);
IkReal x8017=(gconst149*x8013);
IkReal x8018=(gconst148*x8012);
IkReal x8019=((1.0)*cj1*cj2);
IkReal x8020=((1.0)*x8012);
evalcond[0]=((((-1.0)*r22*x8016))+(((-1.0)*gconst149*r20*x8020))+((r21*x8018)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8020))+((x8012*x8014))+(((-1.0)*r12*x8016)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8016))+((r01*x8018))+(((-1.0)*gconst149*r00*x8020)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8016))+((cj1*sj2))+((r20*x8017))+(((-1.0)*r22*x8020)));
evalcond[4]=(((cj0*x8015))+((r00*x8017))+(((-1.0)*r02*x8020))+(((-1.0)*cj0*x8019))+(((-1.0)*gconst148*r01*x8016)));
evalcond[5]=((((-1.0)*r12*x8020))+(((-1.0)*x8014*x8016))+((sj0*x8015))+((r10*x8017))+(((-1.0)*sj0*x8019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8021=((1.0)*gconst149);
CheckValue<IkReal> x8022 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8022.valid){
continue;
}
CheckValue<IkReal> x8023=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8021)))),-1);
if(!x8023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8022.value)+(((1.5707963267949)*(x8023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8024=IKsin(j4);
IkReal x8025=IKcos(j4);
IkReal x8026=(gconst148*r11);
IkReal x8027=(sj1*sj2);
IkReal x8028=((1.0)*x8025);
IkReal x8029=(gconst149*x8025);
IkReal x8030=(gconst148*x8024);
IkReal x8031=((1.0)*cj1*cj2);
IkReal x8032=((1.0)*x8024);
evalcond[0]=((((-1.0)*gconst149*r20*x8032))+((r21*x8030))+(((-1.0)*r22*x8028)));
evalcond[1]=((((-1.0)*r12*x8028))+cj0+((x8024*x8026))+(((-1.0)*gconst149*r10*x8032)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8028))+(((-1.0)*gconst149*r00*x8032))+((r01*x8030)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8028))+((cj1*sj2))+((r20*x8029))+(((-1.0)*r22*x8032)));
evalcond[4]=((((-1.0)*gconst148*r01*x8028))+(((-1.0)*r02*x8032))+((cj0*x8027))+((r00*x8029))+(((-1.0)*cj0*x8031)));
evalcond[5]=(((r10*x8029))+(((-1.0)*sj0*x8031))+(((-1.0)*r12*x8032))+((sj0*x8027))+(((-1.0)*x8026*x8028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8033=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8033;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8034=((1.0)*cj5);
IkReal x8035=((((-1.0)*r11*x8034))+(((-1.0)*r10*sj5)));
j4eval[0]=x8035;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8034))))));
j4eval[2]=IKsign(x8035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8036=cj5*cj5;
IkReal x8037=r01*r01;
IkReal x8038=(r01*sj5);
IkReal x8039=(cj5*r00);
IkReal x8040=((((-1.0)*x8037))+(((-1.0)*(r02*r02)))+(((2.0)*x8038*x8039))+((x8036*x8037))+(((-1.0)*x8036*(r00*r00))));
j4eval[0]=x8040;
j4eval[1]=IKsign(x8040);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8038))+x8039))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8041=cj5*cj5;
IkReal x8042=r01*r01;
IkReal x8043=(r01*sj5);
IkReal x8044=(cj5*r00);
CheckValue<IkReal> x8045 = IKatan2WithCheck(IkReal(((((-1.0)*x8043))+x8044)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8045.valid){
continue;
}
CheckValue<IkReal> x8046=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8042))+(((-1.0)*(r02*r02)))+((x8041*x8042))+(((-1.0)*x8041*(r00*r00)))+(((2.0)*x8043*x8044)))),-1);
if(!x8046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8045.value)+(((1.5707963267949)*(x8046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8047=IKsin(j4);
IkReal x8048=IKcos(j4);
IkReal x8049=(cj5*r10);
IkReal x8050=(r01*sj5);
IkReal x8051=(cj5*r00);
IkReal x8052=(cj5*r20);
IkReal x8053=((1.0)*x8048);
IkReal x8054=((1.0)*x8047);
IkReal x8055=(sj5*x8047);
evalcond[0]=((((-1.0)*x8052*x8054))+(((-1.0)*r22*x8053))+((r21*x8055)));
evalcond[1]=((((-1.0)*r12*x8053))+((r11*x8055))+(((-1.0)*x8049*x8054)));
evalcond[2]=((((-1.0)*x8050*x8053))+(((-1.0)*r02*x8054))+((x8048*x8051)));
evalcond[3]=((-1.0)+((x8047*x8050))+(((-1.0)*x8051*x8054))+(((-1.0)*r02*x8053)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8053))+(((-1.0)*r22*x8054))+((x8048*x8052)));
evalcond[5]=((((-1.0)*r12*x8054))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8053))+((x8048*x8049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8056=((1.0)*cj5);
CheckValue<IkReal> x8057 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8057.valid){
continue;
}
CheckValue<IkReal> x8058=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8056)))),-1);
if(!x8058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8057.value)+(((1.5707963267949)*(x8058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8059=IKsin(j4);
IkReal x8060=IKcos(j4);
IkReal x8061=(cj5*r10);
IkReal x8062=(r01*sj5);
IkReal x8063=(cj5*r00);
IkReal x8064=(cj5*r20);
IkReal x8065=((1.0)*x8060);
IkReal x8066=((1.0)*x8059);
IkReal x8067=(sj5*x8059);
evalcond[0]=(((r21*x8067))+(((-1.0)*x8064*x8066))+(((-1.0)*r22*x8065)));
evalcond[1]=((((-1.0)*r12*x8065))+(((-1.0)*x8061*x8066))+((r11*x8067)));
evalcond[2]=(((x8060*x8063))+(((-1.0)*x8062*x8065))+(((-1.0)*r02*x8066)));
evalcond[3]=((-1.0)+((x8059*x8062))+(((-1.0)*x8063*x8066))+(((-1.0)*r02*x8065)));
evalcond[4]=(((cj2*sj1))+((x8060*x8064))+((cj1*sj2))+(((-1.0)*r21*sj5*x8065))+(((-1.0)*r22*x8066)));
evalcond[5]=(((x8060*x8061))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8066))+(((-1.0)*r11*sj5*x8065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8068=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8068.valid){
continue;
}
CheckValue<IkReal> x8069 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8068.value)))+(x8069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8070=IKsin(j4);
IkReal x8071=IKcos(j4);
IkReal x8072=(cj5*r10);
IkReal x8073=(r01*sj5);
IkReal x8074=(cj5*r00);
IkReal x8075=(cj5*r20);
IkReal x8076=((1.0)*x8071);
IkReal x8077=((1.0)*x8070);
IkReal x8078=(sj5*x8070);
evalcond[0]=((((-1.0)*x8075*x8077))+((r21*x8078))+(((-1.0)*r22*x8076)));
evalcond[1]=((((-1.0)*x8072*x8077))+((r11*x8078))+(((-1.0)*r12*x8076)));
evalcond[2]=((((-1.0)*r02*x8077))+(((-1.0)*x8073*x8076))+((x8071*x8074)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8076))+(((-1.0)*x8074*x8077))+((x8070*x8073)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8076))+((x8071*x8075))+(((-1.0)*r22*x8077)));
evalcond[5]=((((-1.0)*r11*sj5*x8076))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8071*x8072))+(((-1.0)*r12*x8077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8079=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8079;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8080=((1.0)*cj5);
IkReal x8081=((((-1.0)*r21*x8080))+(((-1.0)*r20*sj5)));
j4eval[0]=x8081;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8080))))));
j4eval[2]=IKsign(x8081);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8082=cj5*cj5;
IkReal x8083=r01*r01;
IkReal x8084=(cj5*r00);
IkReal x8085=(r01*sj5);
IkReal x8086=(((x8082*(r00*r00)))+(((-2.0)*x8084*x8085))+x8083+(r02*r02)+(((-1.0)*x8082*x8083)));
j4eval[0]=x8086;
j4eval[1]=((IKabs(((((-1.0)*x8085))+x8084)))+(IKabs(r02)));
j4eval[2]=IKsign(x8086);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8087=cj5*cj5;
IkReal x8088=r01*r01;
IkReal x8089=(r01*sj5);
IkReal x8090=(cj5*r00);
CheckValue<IkReal> x8091 = IKatan2WithCheck(IkReal(((((-1.0)*x8089))+x8090)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8091.valid){
continue;
}
CheckValue<IkReal> x8092=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8087*x8088))+x8088+(r02*r02)+((x8087*(r00*r00)))+(((-2.0)*x8089*x8090)))),-1);
if(!x8092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8091.value)+(((1.5707963267949)*(x8092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8093=IKsin(j4);
IkReal x8094=IKcos(j4);
IkReal x8095=(cj5*r10);
IkReal x8096=(r01*sj5);
IkReal x8097=(cj5*r00);
IkReal x8098=(cj5*r20);
IkReal x8099=((1.0)*x8094);
IkReal x8100=((1.0)*x8093);
IkReal x8101=(sj5*x8093);
evalcond[0]=((((-1.0)*x8098*x8100))+(((-1.0)*r22*x8099))+((r21*x8101)));
evalcond[1]=(((r11*x8101))+(((-1.0)*x8095*x8100))+(((-1.0)*r12*x8099)));
evalcond[2]=((((-1.0)*r02*x8100))+((x8094*x8097))+(((-1.0)*x8096*x8099)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8099))+((x8093*x8096))+(((-1.0)*x8097*x8100)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8099))+((cj1*sj2))+(((-1.0)*r22*x8100))+((x8094*x8098)));
evalcond[5]=((((-1.0)*r11*sj5*x8099))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8094*x8095))+(((-1.0)*r12*x8100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8102=((1.0)*cj5);
CheckValue<IkReal> x8103=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8102))+(((-1.0)*r20*sj5)))),-1);
if(!x8103.valid){
continue;
}
CheckValue<IkReal> x8104 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8103.value)))+(x8104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8105=IKsin(j4);
IkReal x8106=IKcos(j4);
IkReal x8107=(cj5*r10);
IkReal x8108=(r01*sj5);
IkReal x8109=(cj5*r00);
IkReal x8110=(cj5*r20);
IkReal x8111=((1.0)*x8106);
IkReal x8112=((1.0)*x8105);
IkReal x8113=(sj5*x8105);
evalcond[0]=((((-1.0)*x8110*x8112))+((r21*x8113))+(((-1.0)*r22*x8111)));
evalcond[1]=((((-1.0)*r12*x8111))+((r11*x8113))+(((-1.0)*x8107*x8112)));
evalcond[2]=(((x8106*x8109))+(((-1.0)*x8108*x8111))+(((-1.0)*r02*x8112)));
evalcond[3]=((1.0)+(((-1.0)*x8109*x8112))+(((-1.0)*r02*x8111))+((x8105*x8108)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8111))+((x8106*x8110))+((cj1*sj2))+(((-1.0)*r22*x8112)));
evalcond[5]=(((x8106*x8107))+(((-1.0)*r11*sj5*x8111))+(((-1.0)*r12*x8112))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8114 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8114.valid){
continue;
}
CheckValue<IkReal> x8115=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8114.value)+(((1.5707963267949)*(x8115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8116=IKsin(j4);
IkReal x8117=IKcos(j4);
IkReal x8118=(cj5*r10);
IkReal x8119=(r01*sj5);
IkReal x8120=(cj5*r00);
IkReal x8121=(cj5*r20);
IkReal x8122=((1.0)*x8117);
IkReal x8123=((1.0)*x8116);
IkReal x8124=(sj5*x8116);
evalcond[0]=((((-1.0)*x8121*x8123))+((r21*x8124))+(((-1.0)*r22*x8122)));
evalcond[1]=((((-1.0)*r12*x8122))+((r11*x8124))+(((-1.0)*x8118*x8123)));
evalcond[2]=(((x8117*x8120))+(((-1.0)*r02*x8123))+(((-1.0)*x8119*x8122)));
evalcond[3]=((1.0)+((x8116*x8119))+(((-1.0)*r02*x8122))+(((-1.0)*x8120*x8123)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8122))+((cj1*sj2))+((x8117*x8121))+(((-1.0)*r22*x8123)));
evalcond[5]=((((-1.0)*r11*sj5*x8122))+(((-1.0)*r12*x8123))+(((-1.0)*sj1*sj2))+((x8117*x8118))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8125=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8125);
rxp1_1=(px*r21);
rxp1_2=(r11*x8125);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8126=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8126);
rxp1_1=(px*r21);
rxp1_2=(r11*x8126);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8127=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8127);
rxp1_1=(px*r21);
rxp1_2=(r11*x8127);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8130=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8130.valid){
continue;
}
IkReal x8128=x8130.value;
IkReal x8129=(sj0*x8128);
cj4array[0]=(((cj1*cj2*x8129))+(((-1.0)*sj1*sj2*x8129)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8131=IKsin(j4);
IkReal x8132=IKcos(j4);
IkReal x8133=(r21*sj5);
IkReal x8134=(cj5*r20);
IkReal x8135=((1.0)*x8131);
IkReal x8136=((1.0)*x8132);
evalcond[0]=((-1.0)*r02*x8131);
evalcond[1]=((((-1.0)*r02*x8136))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x8134*x8135))+((x8131*x8133)));
evalcond[3]=((((-1.0)*cj5*r10*x8135))+((r11*sj5*x8131)));
evalcond[4]=(((cj2*sj1))+((x8132*x8134))+((cj1*sj2))+(((-1.0)*x8133*x8136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8139=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8139.valid){
continue;
}
IkReal x8137=x8139.value;
IkReal x8138=((1.0)*x8137);
cj4array[0]=((((-1.0)*cj1*sj2*x8138))+(((-1.0)*cj2*sj1*x8138)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8140=IKsin(j4);
IkReal x8141=IKcos(j4);
IkReal x8142=(r11*sj5);
IkReal x8143=((1.0)*sj0);
IkReal x8144=((1.0)*x8141);
IkReal x8145=((1.0)*cj5*x8140);
evalcond[0]=((-1.0)*r02*x8140);
evalcond[1]=((((-1.0)*r02*x8144))+(((-1.0)*x8143)));
evalcond[2]=((((-1.0)*r20*x8145))+((r21*sj5*x8140)));
evalcond[3]=((((-1.0)*r10*x8145))+((x8140*x8142)));
evalcond[4]=(((cj5*r10*x8141))+(((-1.0)*cj1*cj2*x8143))+((sj0*sj1*sj2))+(((-1.0)*x8142*x8144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8146=IKPowWithIntegerCheck(r02,-1);
if(!x8146.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8146.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8147=IKsin(j4);
IkReal x8148=IKcos(j4);
IkReal x8149=(cj5*x8148);
IkReal x8150=(sj5*x8147);
IkReal x8151=((1.0)*sj5*x8148);
IkReal x8152=((1.0)*cj5*x8147);
evalcond[0]=((-1.0)*r02*x8147);
evalcond[1]=(((r21*x8150))+(((-1.0)*r20*x8152)));
evalcond[2]=((((-1.0)*r10*x8152))+((r11*x8150)));
evalcond[3]=(((cj2*sj1))+((r20*x8149))+((cj1*sj2))+(((-1.0)*r21*x8151)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((r10*x8149))+((sj0*sj1*sj2))+(((-1.0)*r11*x8151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8153=((1.0)*sj0);
IkReal x8154=((1.0)*cj0);
CheckValue<IkReal> x8155 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8154))+(((-1.0)*r12*x8153)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8153))+(((-1.0)*r01*sj5*x8154)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8155.valid){
continue;
}
CheckValue<IkReal> x8156=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8155.value)+(((1.5707963267949)*(x8156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8157=IKsin(j4);
IkReal x8158=IKcos(j4);
IkReal x8159=(cj5*r10);
IkReal x8160=(sj1*sj2);
IkReal x8161=(r01*sj5);
IkReal x8162=(cj5*r00);
IkReal x8163=(cj5*r20);
IkReal x8164=((1.0)*x8158);
IkReal x8165=((1.0)*cj1*cj2);
IkReal x8166=((1.0)*x8157);
IkReal x8167=(sj5*x8157);
evalcond[0]=(((r21*x8167))+(((-1.0)*x8163*x8166))+(((-1.0)*r22*x8164)));
evalcond[1]=(((r11*x8167))+cj0+(((-1.0)*x8159*x8166))+(((-1.0)*r12*x8164)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8164))+(((-1.0)*x8162*x8166))+((x8157*x8161)));
evalcond[3]=(((cj2*sj1))+((x8158*x8163))+(((-1.0)*r21*sj5*x8164))+((cj1*sj2))+(((-1.0)*r22*x8166)));
evalcond[4]=(((cj0*x8160))+((x8158*x8162))+(((-1.0)*r02*x8166))+(((-1.0)*x8161*x8164))+(((-1.0)*cj0*x8165)));
evalcond[5]=(((x8158*x8159))+(((-1.0)*r12*x8166))+((sj0*x8160))+(((-1.0)*r11*sj5*x8164))+(((-1.0)*sj0*x8165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8168=((1.0)*cj5);
CheckValue<IkReal> x8169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8168)))),-1);
if(!x8169.valid){
continue;
}
CheckValue<IkReal> x8170 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8168))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8169.value)))+(x8170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8171=IKsin(j4);
IkReal x8172=IKcos(j4);
IkReal x8173=(cj5*r10);
IkReal x8174=(sj1*sj2);
IkReal x8175=(r01*sj5);
IkReal x8176=(cj5*r00);
IkReal x8177=(cj5*r20);
IkReal x8178=((1.0)*x8172);
IkReal x8179=((1.0)*cj1*cj2);
IkReal x8180=((1.0)*x8171);
IkReal x8181=(sj5*x8171);
evalcond[0]=(((r21*x8181))+(((-1.0)*r22*x8178))+(((-1.0)*x8177*x8180)));
evalcond[1]=(((r11*x8181))+(((-1.0)*r12*x8178))+cj0+(((-1.0)*x8173*x8180)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8176*x8180))+(((-1.0)*r02*x8178))+((x8171*x8175)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8180))+((cj1*sj2))+((x8172*x8177))+(((-1.0)*r21*sj5*x8178)));
evalcond[4]=((((-1.0)*r02*x8180))+(((-1.0)*x8175*x8178))+(((-1.0)*cj0*x8179))+((cj0*x8174))+((x8172*x8176)));
evalcond[5]=(((sj0*x8174))+(((-1.0)*sj0*x8179))+(((-1.0)*r12*x8180))+((x8172*x8173))+(((-1.0)*r11*sj5*x8178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8182=((1.0)*cj5);
CheckValue<IkReal> x8183=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8182))+(((-1.0)*r00*sj5)))),-1);
if(!x8183.valid){
continue;
}
CheckValue<IkReal> x8184 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8183.value)))+(x8184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8185=IKsin(j4);
IkReal x8186=IKcos(j4);
IkReal x8187=(cj5*r10);
IkReal x8188=(sj1*sj2);
IkReal x8189=(r01*sj5);
IkReal x8190=(cj5*r00);
IkReal x8191=(cj5*r20);
IkReal x8192=((1.0)*x8186);
IkReal x8193=((1.0)*cj1*cj2);
IkReal x8194=((1.0)*x8185);
IkReal x8195=(sj5*x8185);
evalcond[0]=(((r21*x8195))+(((-1.0)*r22*x8192))+(((-1.0)*x8191*x8194)));
evalcond[1]=(((r11*x8195))+cj0+(((-1.0)*r12*x8192))+(((-1.0)*x8187*x8194)));
evalcond[2]=((((-1.0)*r02*x8192))+(((-1.0)*sj0))+((x8185*x8189))+(((-1.0)*x8190*x8194)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8194))+((cj1*sj2))+((x8186*x8191))+(((-1.0)*r21*sj5*x8192)));
evalcond[4]=((((-1.0)*r02*x8194))+((x8186*x8190))+(((-1.0)*x8189*x8192))+(((-1.0)*cj0*x8193))+((cj0*x8188)));
evalcond[5]=(((x8186*x8187))+((sj0*x8188))+(((-1.0)*r12*x8194))+(((-1.0)*sj0*x8193))+(((-1.0)*r11*sj5*x8192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8196=cj5*cj5;
IkReal x8197=r21*r21;
IkReal x8198=(cj2*sj1);
IkReal x8199=(cj1*sj2);
IkReal x8200=(r21*sj5);
IkReal x8201=((1.0)*cj5*r20);
CheckValue<IkReal> x8202=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*x8200))+(r22*r22)+((x8196*(r20*r20)))+(((-1.0)*x8196*x8197))+x8197)),-1);
if(!x8202.valid){
continue;
}
CheckValue<IkReal> x8203 = IKatan2WithCheck(IkReal((((r22*x8198))+((r22*x8199)))),IkReal(((((-1.0)*x8198*x8201))+((x8199*x8200))+((x8198*x8200))+(((-1.0)*x8199*x8201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8202.value)))+(x8203.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8204=IKsin(j4);
IkReal x8205=IKcos(j4);
IkReal x8206=(r21*sj5);
IkReal x8207=(cj5*r20);
IkReal x8208=((1.0)*x8205);
IkReal x8209=((1.0)*x8204);
evalcond[0]=(((x8204*x8206))+(((-1.0)*r22*x8208))+(((-1.0)*x8207*x8209)));
evalcond[1]=(((cj2*sj1))+((x8205*x8207))+((cj1*sj2))+(((-1.0)*r22*x8209))+(((-1.0)*x8206*x8208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8210=(cj5*sj4);
IkReal x8211=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8211))+(((-1.0)*r00*x8210)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x8211))+((r10*x8210))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8211))+(((-1.0)*r00*x8210))))+IKsqr(((((-1.0)*r11*x8211))+((r10*x8210))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8211))+(((-1.0)*r00*x8210))), ((((-1.0)*r11*x8211))+((r10*x8210))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8212=IKcos(j0);
IkReal x8213=IKsin(j0);
IkReal x8214=(cj4*cj5);
IkReal x8215=((0.21325)*cj2);
IkReal x8216=((1.0)*sj2);
IkReal x8217=(r11*sj5);
IkReal x8218=(r00*sj5);
IkReal x8219=(cj5*r11);
IkReal x8220=((1.0)*sj4);
IkReal x8221=((1.0)*sj5);
IkReal x8222=((1.0)*cj2);
IkReal x8223=(cj5*r01);
IkReal x8224=((1.0)*cj4);
IkReal x8225=((0.21325)*sj2);
IkReal x8226=(cj1*x8213);
IkReal x8227=(cj1*x8212);
IkReal x8228=(sj1*x8212);
IkReal x8229=(sj1*x8213);
evalcond[0]=((((-1.0)*cj5*r10*x8220))+(((-1.0)*r12*x8224))+((sj4*x8217))+x8212);
evalcond[1]=((((-1.0)*r02*x8224))+((r01*sj4*sj5))+(((-1.0)*cj5*r00*x8220))+(((-1.0)*x8213)));
evalcond[2]=((((-1.0)*x8223))+(((-1.0)*x8218))+(((-1.0)*x8222*x8228))+(((-1.0)*x8216*x8227)));
evalcond[3]=((((-1.0)*x8219))+(((-1.0)*r10*x8221))+(((-1.0)*x8222*x8229))+(((-1.0)*x8216*x8226)));
evalcond[4]=((((-1.0)*r02*x8220))+((sj2*x8228))+((r00*x8214))+(((-1.0)*cj4*r01*x8221))+(((-1.0)*x8222*x8227)));
evalcond[5]=(((sj2*x8229))+(((-1.0)*r12*x8220))+((r10*x8214))+(((-1.0)*x8217*x8224))+(((-1.0)*x8222*x8226)));
evalcond[6]=((((-0.08535)*x8218))+(((-0.11235)*x8213))+(((0.24365)*x8227))+(((-1.0)*px))+(((-1.0)*x8225*x8228))+(((-0.08535)*x8223))+((x8215*x8227)));
evalcond[7]=((((-0.08535)*x8219))+(((0.24365)*x8226))+(((0.11235)*x8212))+(((-1.0)*py))+(((-0.08535)*r10*sj5))+(((-1.0)*x8225*x8229))+((x8215*x8226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8230 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8230.valid){
continue;
}
CheckValue<IkReal> x8231=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8231.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8230.value)+(((1.5707963267949)*(x8231.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8232=IKcos(j0);
IkReal x8233=IKsin(j0);
IkReal x8234=((0.21325)*cj2);
IkReal x8235=((1.0)*sj2);
IkReal x8236=(r00*sj5);
IkReal x8237=((1.0)*cj5);
IkReal x8238=(r10*sj5);
IkReal x8239=((0.08535)*cj5);
IkReal x8240=(cj1*x8233);
IkReal x8241=(cj1*x8232);
IkReal x8242=((0.21325)*sj1*sj2);
IkReal x8243=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x8232*x8243))+(((-1.0)*x8236))+(((-1.0)*r01*x8237))+(((-1.0)*x8235*x8241)));
evalcond[1]=((((-1.0)*x8238))+(((-1.0)*r11*x8237))+(((-1.0)*x8233*x8243))+(((-1.0)*x8235*x8240)));
evalcond[2]=((((-1.0)*x8232*x8242))+(((0.24365)*x8241))+(((-0.11235)*x8233))+((x8234*x8241))+(((-1.0)*px))+(((-0.08535)*x8236))+(((-1.0)*r01*x8239)));
evalcond[3]=((((0.24365)*x8240))+((x8234*x8240))+(((0.11235)*x8232))+(((-1.0)*py))+(((-1.0)*r11*x8239))+(((-1.0)*x8233*x8242))+(((-0.08535)*x8238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8244=((1.0)*cj5);
IkReal x8245=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8244)));
j4eval[0]=x8245;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8244)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8245);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8246=((1.0)*cj5);
IkReal x8247=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8246)));
j4eval[0]=x8247;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8246))))));
j4eval[2]=IKsign(x8247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8248=((1.0)*sj0);
IkReal x8249=((1.0)*cj0);
IkReal x8250=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8250;
j4eval[1]=((IKabs(((((-1.0)*r02*x8249))+(((-1.0)*r12*x8248)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8249))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8248))))));
j4eval[2]=IKsign(x8250);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8251=((-1.0)*r20);
IkReal x8253 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8253)==0){
continue;
}
IkReal x8252=pow(x8253,-0.5);
CheckValue<IkReal> x8254 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8251),IKFAST_ATAN2_MAGTHRESH);
if(!x8254.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8254.value));
IkReal gconst133=(r21*x8252);
IkReal gconst134=(x8251*x8252);
CheckValue<IkReal> x8255 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8255.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8255.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8256=((-1.0)*r20);
IkReal x8257=x8252;
CheckValue<IkReal> x8259 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8256),IKFAST_ATAN2_MAGTHRESH);
if(!x8259.valid){
continue;
}
IkReal x8258=((-1.0)*(x8259.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8258;
IkReal gconst132=x8258;
IkReal gconst133=(r21*x8257);
IkReal gconst134=(x8256*x8257);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8260=((-1.0)*r20);
IkReal x8261=x8252;
CheckValue<IkReal> x8263 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8260),IKFAST_ATAN2_MAGTHRESH);
if(!x8263.valid){
continue;
}
IkReal x8262=((-1.0)*(x8263.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8262;
IkReal gconst132=x8262;
IkReal gconst133=(r21*x8261);
IkReal gconst134=(x8260*x8261);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8264=((-1.0)*r20);
IkReal x8265=x8252;
CheckValue<IkReal> x8267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8264),IKFAST_ATAN2_MAGTHRESH);
if(!x8267.valid){
continue;
}
IkReal x8266=((-1.0)*(x8267.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8266;
IkReal gconst132=x8266;
IkReal gconst133=(r21*x8265);
IkReal gconst134=(x8264*x8265);
IkReal x8268=r22*r22;
CheckValue<IkReal> x8271=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8268))),-1);
if(!x8271.valid){
continue;
}
IkReal x8269=x8271.value;
IkReal x8270=(((x8269*(r21*r21*r21*r21)))+((x8269*(r20*r20*r20*r20)))+(((2.0)*x8269*(r20*r20)*(r21*r21)))+x8268);
j4eval[0]=x8270;
j4eval[1]=IKsign(x8270);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8272=(gconst133*r21);
IkReal x8273=(cj1*sj2);
IkReal x8274=(gconst134*r20);
IkReal x8275=(cj2*sj1);
CheckValue<IkReal> x8276=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8272*x8272)+(((-2.0)*x8272*x8274))+(x8274*x8274))),-1);
if(!x8276.valid){
continue;
}
CheckValue<IkReal> x8277 = IKatan2WithCheck(IkReal((((r22*x8275))+((r22*x8273)))),IkReal(((((-1.0)*x8274*x8275))+(((-1.0)*x8273*x8274))+((x8272*x8273))+((x8272*x8275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8276.value)))+(x8277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8278=IKsin(j4);
IkReal x8279=IKcos(j4);
IkReal x8280=(sj1*sj2);
IkReal x8281=(gconst133*r11);
IkReal x8282=(gconst133*r21);
IkReal x8283=(gconst133*r01);
IkReal x8284=((1.0)*x8279);
IkReal x8285=(gconst134*x8279);
IkReal x8286=((1.0)*x8278);
IkReal x8287=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8286))+((x8278*x8282))+(((-1.0)*r22*x8284)));
evalcond[1]=((((-1.0)*r12*x8284))+cj0+((x8278*x8281))+(((-1.0)*gconst134*r10*x8286)));
evalcond[2]=((((-1.0)*r02*x8284))+(((-1.0)*sj0))+((x8278*x8283))+(((-1.0)*gconst134*r00*x8286)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8285))+(((-1.0)*x8282*x8284))+(((-1.0)*r22*x8286)));
evalcond[4]=((((-1.0)*r02*x8286))+(((-1.0)*x8283*x8284))+((r00*x8285))+(((-1.0)*cj0*x8287))+((cj0*x8280)));
evalcond[5]=((((-1.0)*r12*x8286))+((r10*x8285))+(((-1.0)*x8281*x8284))+((sj0*x8280))+(((-1.0)*sj0*x8287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8288=((1.0)*gconst134);
CheckValue<IkReal> x8289=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8288)))),-1);
if(!x8289.valid){
continue;
}
CheckValue<IkReal> x8290 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst133*r21*sj0))+(((-1.0)*r20*sj0*x8288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8289.value)))+(x8290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8291=IKsin(j4);
IkReal x8292=IKcos(j4);
IkReal x8293=(sj1*sj2);
IkReal x8294=(gconst133*r11);
IkReal x8295=(gconst133*r21);
IkReal x8296=(gconst133*r01);
IkReal x8297=((1.0)*x8292);
IkReal x8298=(gconst134*x8292);
IkReal x8299=((1.0)*x8291);
IkReal x8300=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8299))+((x8291*x8295))+(((-1.0)*r22*x8297)));
evalcond[1]=((((-1.0)*r12*x8297))+cj0+((x8291*x8294))+(((-1.0)*gconst134*r10*x8299)));
evalcond[2]=((((-1.0)*sj0))+((x8291*x8296))+(((-1.0)*gconst134*r00*x8299))+(((-1.0)*r02*x8297)));
evalcond[3]=(((cj2*sj1))+((r20*x8298))+((cj1*sj2))+(((-1.0)*r22*x8299))+(((-1.0)*x8295*x8297)));
evalcond[4]=(((r00*x8298))+((cj0*x8293))+(((-1.0)*cj0*x8300))+(((-1.0)*r02*x8299))+(((-1.0)*x8296*x8297)));
evalcond[5]=((((-1.0)*r12*x8299))+((r10*x8298))+((sj0*x8293))+(((-1.0)*x8294*x8297))+(((-1.0)*sj0*x8300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8301=((1.0)*gconst134);
CheckValue<IkReal> x8302 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8301))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8302.valid){
continue;
}
CheckValue<IkReal> x8303=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8301)))),-1);
if(!x8303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8302.value)+(((1.5707963267949)*(x8303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8304=IKsin(j4);
IkReal x8305=IKcos(j4);
IkReal x8306=(sj1*sj2);
IkReal x8307=(gconst133*r11);
IkReal x8308=(gconst133*r21);
IkReal x8309=(gconst133*r01);
IkReal x8310=((1.0)*x8305);
IkReal x8311=(gconst134*x8305);
IkReal x8312=((1.0)*x8304);
IkReal x8313=((1.0)*cj1*cj2);
evalcond[0]=(((x8304*x8308))+(((-1.0)*r22*x8310))+(((-1.0)*gconst134*r20*x8312)));
evalcond[1]=((((-1.0)*gconst134*r10*x8312))+cj0+((x8304*x8307))+(((-1.0)*r12*x8310)));
evalcond[2]=((((-1.0)*sj0))+((x8304*x8309))+(((-1.0)*r02*x8310))+(((-1.0)*gconst134*r00*x8312)));
evalcond[3]=(((cj2*sj1))+((r20*x8311))+((cj1*sj2))+(((-1.0)*r22*x8312))+(((-1.0)*x8308*x8310)));
evalcond[4]=(((r00*x8311))+(((-1.0)*r02*x8312))+((cj0*x8306))+(((-1.0)*cj0*x8313))+(((-1.0)*x8309*x8310)));
evalcond[5]=(((sj0*x8306))+(((-1.0)*sj0*x8313))+((r10*x8311))+(((-1.0)*x8307*x8310))+(((-1.0)*r12*x8312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8314=((-1.0)*r21);
IkReal x8316 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8316)==0){
continue;
}
IkReal x8315=pow(x8316,-0.5);
CheckValue<IkReal> x8317 = IKatan2WithCheck(IkReal(x8314),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8317.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8317.value))));
IkReal gconst136=(x8314*x8315);
IkReal gconst137=((1.0)*r20*x8315);
CheckValue<IkReal> x8318 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8318.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8318.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8319=((-1.0)*r21);
CheckValue<IkReal> x8322 = IKatan2WithCheck(IkReal(x8319),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8322.valid){
continue;
}
IkReal x8320=((1.0)*(x8322.value));
IkReal x8321=x8315;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8320)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8320)));
IkReal gconst136=(x8319*x8321);
IkReal gconst137=((1.0)*r20*x8321);
IkReal x8323=r22*r22;
IkReal x8324=((1.0)*x8323);
CheckValue<IkReal> x8328=IKPowWithIntegerCheck(((-1.0)+x8323),-1);
if(!x8328.valid){
continue;
}
IkReal x8325=x8328.value;
if((((1.0)+(((-1.0)*x8324)))) < -0.00001)
continue;
IkReal x8326=IKsqrt(((1.0)+(((-1.0)*x8324))));
IkReal x8327=(cj0*x8325*x8326);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x8327+(((-1.0)*x8324*x8327))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8329=((-1.0)*r21);
CheckValue<IkReal> x8332 = IKatan2WithCheck(IkReal(x8329),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8332.valid){
continue;
}
IkReal x8330=((1.0)*(x8332.value));
IkReal x8331=x8315;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8330)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8330)));
IkReal gconst136=(x8329*x8331);
IkReal gconst137=((1.0)*r20*x8331);
IkReal x8333=r22*r22;
IkReal x8334=((1.0)*x8333);
CheckValue<IkReal> x8338=IKPowWithIntegerCheck(((-1.0)+x8333),-1);
if(!x8338.valid){
continue;
}
IkReal x8335=x8338.value;
if((((1.0)+(((-1.0)*x8334)))) < -0.00001)
continue;
IkReal x8336=IKsqrt(((1.0)+(((-1.0)*x8334))));
IkReal x8337=(sj0*x8335*x8336);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8337+(((-1.0)*x8334*x8337))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8339=((-1.0)*r21);
CheckValue<IkReal> x8342 = IKatan2WithCheck(IkReal(x8339),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8342.valid){
continue;
}
IkReal x8340=((1.0)*(x8342.value));
IkReal x8341=x8315;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8340)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8340)));
IkReal gconst136=(x8339*x8341);
IkReal gconst137=((1.0)*r20*x8341);
IkReal x8343=r22*r22;
IkReal x8344=(r12*sj0);
IkReal x8345=(cj0*r02);
CheckValue<IkReal> x8349=IKPowWithIntegerCheck(((-1.0)+x8343),-1);
if(!x8349.valid){
continue;
}
IkReal x8346=x8349.value;
if((((1.0)+(((-1.0)*x8343)))) < -0.00001)
continue;
IkReal x8347=IKsqrt(((1.0)+(((-1.0)*x8343))));
IkReal x8348=(r22*x8346*x8347);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8345))+(((-1.0)*x8344)))))+(IKabs((((x8345*x8348))+((x8344*x8348))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8350=((1.0)*sj0);
IkReal x8351=((1.0)*cj0);
CheckValue<IkReal> x8352=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8352.valid){
continue;
}
CheckValue<IkReal> x8353 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8351))+(((-1.0)*r12*x8350)))),IkReal(((((-1.0)*gconst136*r11*x8350))+((gconst137*r10*sj0))+((cj0*gconst137*r00))+(((-1.0)*gconst136*r01*x8351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8352.value)))+(x8353.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8354=IKsin(j4);
IkReal x8355=IKcos(j4);
IkReal x8356=(gconst136*r01);
IkReal x8357=(gconst137*r10);
IkReal x8358=(sj1*sj2);
IkReal x8359=(gconst137*r20);
IkReal x8360=(gconst136*r11);
IkReal x8361=(gconst136*r21);
IkReal x8362=(gconst137*r00);
IkReal x8363=((1.0)*x8355);
IkReal x8364=((1.0)*cj1*cj2);
IkReal x8365=((1.0)*x8354);
evalcond[0]=((((-1.0)*x8359*x8365))+(((-1.0)*r22*x8363))+((x8354*x8361)));
evalcond[1]=(cj0+(((-1.0)*x8357*x8365))+(((-1.0)*r12*x8363))+((x8354*x8360)));
evalcond[2]=((((-1.0)*x8362*x8365))+(((-1.0)*sj0))+((x8354*x8356))+(((-1.0)*r02*x8363)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8361*x8363))+((x8355*x8359))+((cj1*sj2))+(((-1.0)*r22*x8365)));
evalcond[4]=(((x8355*x8362))+((cj0*x8358))+(((-1.0)*r02*x8365))+(((-1.0)*cj0*x8364))+(((-1.0)*x8356*x8363)));
evalcond[5]=(((x8355*x8357))+(((-1.0)*r12*x8365))+((sj0*x8358))+(((-1.0)*sj0*x8364))+(((-1.0)*x8360*x8363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8366=((1.0)*gconst137);
CheckValue<IkReal> x8367 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8366))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8367.valid){
continue;
}
CheckValue<IkReal> x8368=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8366))+(((-1.0)*gconst136*r10)))),-1);
if(!x8368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8367.value)+(((1.5707963267949)*(x8368.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8369=IKsin(j4);
IkReal x8370=IKcos(j4);
IkReal x8371=(gconst136*r01);
IkReal x8372=(gconst137*r10);
IkReal x8373=(sj1*sj2);
IkReal x8374=(gconst137*r20);
IkReal x8375=(gconst136*r11);
IkReal x8376=(gconst136*r21);
IkReal x8377=(gconst137*r00);
IkReal x8378=((1.0)*x8370);
IkReal x8379=((1.0)*cj1*cj2);
IkReal x8380=((1.0)*x8369);
evalcond[0]=(((x8369*x8376))+(((-1.0)*r22*x8378))+(((-1.0)*x8374*x8380)));
evalcond[1]=((((-1.0)*r12*x8378))+((x8369*x8375))+cj0+(((-1.0)*x8372*x8380)));
evalcond[2]=((((-1.0)*sj0))+((x8369*x8371))+(((-1.0)*r02*x8378))+(((-1.0)*x8377*x8380)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8376*x8378))+((cj1*sj2))+((x8370*x8374))+(((-1.0)*r22*x8380)));
evalcond[4]=((((-1.0)*x8371*x8378))+(((-1.0)*r02*x8380))+((cj0*x8373))+((x8370*x8377))+(((-1.0)*cj0*x8379)));
evalcond[5]=(((sj0*x8373))+((x8370*x8372))+(((-1.0)*x8375*x8378))+(((-1.0)*r12*x8380))+(((-1.0)*sj0*x8379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8381=((1.0)*gconst137);
CheckValue<IkReal> x8382 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x8381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8382.valid){
continue;
}
CheckValue<IkReal> x8383=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8381)))),-1);
if(!x8383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8382.value)+(((1.5707963267949)*(x8383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8384=IKsin(j4);
IkReal x8385=IKcos(j4);
IkReal x8386=(gconst136*r01);
IkReal x8387=(gconst137*r10);
IkReal x8388=(sj1*sj2);
IkReal x8389=(gconst137*r20);
IkReal x8390=(gconst136*r11);
IkReal x8391=(gconst136*r21);
IkReal x8392=(gconst137*r00);
IkReal x8393=((1.0)*x8385);
IkReal x8394=((1.0)*cj1*cj2);
IkReal x8395=((1.0)*x8384);
evalcond[0]=((((-1.0)*r22*x8393))+((x8384*x8391))+(((-1.0)*x8389*x8395)));
evalcond[1]=((((-1.0)*x8387*x8395))+cj0+((x8384*x8390))+(((-1.0)*r12*x8393)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8393))+(((-1.0)*x8392*x8395))+((x8384*x8386)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8391*x8393))+(((-1.0)*r22*x8395))+((x8385*x8389)));
evalcond[4]=((((-1.0)*x8386*x8393))+(((-1.0)*r02*x8395))+(((-1.0)*cj0*x8394))+((x8385*x8392))+((cj0*x8388)));
evalcond[5]=((((-1.0)*x8390*x8393))+(((-1.0)*sj0*x8394))+((sj0*x8388))+((x8385*x8387))+(((-1.0)*r12*x8395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8396=((-1.0)*r10);
IkReal x8398 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8398)==0){
continue;
}
IkReal x8397=pow(x8398,-0.5);
CheckValue<IkReal> x8399 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8396),IKFAST_ATAN2_MAGTHRESH);
if(!x8399.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8399.value));
IkReal gconst139=(r11*x8397);
IkReal gconst140=(x8396*x8397);
CheckValue<IkReal> x8400 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8400.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8400.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8401=((-1.0)*r10);
IkReal x8402=x8397;
CheckValue<IkReal> x8404 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8401),IKFAST_ATAN2_MAGTHRESH);
if(!x8404.valid){
continue;
}
IkReal x8403=((-1.0)*(x8404.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8403;
IkReal gconst138=x8403;
IkReal gconst139=(r11*x8402);
IkReal gconst140=(x8401*x8402);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8405=((1.0)*sj0);
IkReal x8406=((1.0)*gconst139);
CheckValue<IkReal> x8407 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8405)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x8405))+(((-1.0)*cj0*r01*x8406))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8407.valid){
continue;
}
CheckValue<IkReal> x8408=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8406))+(((-1.0)*gconst140*r21)))),-1);
if(!x8408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8407.value)+(((1.5707963267949)*(x8408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8409=IKsin(j4);
IkReal x8410=IKcos(j4);
IkReal x8411=(gconst140*r00);
IkReal x8412=(sj1*sj2);
IkReal x8413=(gconst139*r11);
IkReal x8414=(gconst139*r01);
IkReal x8415=(gconst139*r21);
IkReal x8416=((1.0)*x8410);
IkReal x8417=((1.0)*x8409);
IkReal x8418=((1.0)*cj1*cj2);
IkReal x8419=(gconst140*x8410);
evalcond[0]=((((-1.0)*gconst140*r20*x8417))+((x8409*x8415))+(((-1.0)*r22*x8416)));
evalcond[1]=((((-1.0)*r12*x8416))+cj0+((x8409*x8413))+(((-1.0)*gconst140*r10*x8417)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8416))+((x8409*x8414))+(((-1.0)*x8411*x8417)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8419))+(((-1.0)*x8415*x8416))+(((-1.0)*r22*x8417)));
evalcond[4]=((((-1.0)*x8414*x8416))+(((-1.0)*cj0*x8418))+(((-1.0)*r02*x8417))+((cj0*x8412))+((x8410*x8411)));
evalcond[5]=((((-1.0)*r12*x8417))+((r10*x8419))+(((-1.0)*x8413*x8416))+(((-1.0)*sj0*x8418))+((sj0*x8412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8420=((1.0)*gconst140);
CheckValue<IkReal> x8421 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8421.valid){
continue;
}
CheckValue<IkReal> x8422=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8420)))),-1);
if(!x8422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8421.value)+(((1.5707963267949)*(x8422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8423=IKsin(j4);
IkReal x8424=IKcos(j4);
IkReal x8425=(gconst140*r00);
IkReal x8426=(sj1*sj2);
IkReal x8427=(gconst139*r11);
IkReal x8428=(gconst139*r01);
IkReal x8429=(gconst139*r21);
IkReal x8430=((1.0)*x8424);
IkReal x8431=((1.0)*x8423);
IkReal x8432=((1.0)*cj1*cj2);
IkReal x8433=(gconst140*x8424);
evalcond[0]=((((-1.0)*gconst140*r20*x8431))+((x8423*x8429))+(((-1.0)*r22*x8430)));
evalcond[1]=(cj0+(((-1.0)*r12*x8430))+((x8423*x8427))+(((-1.0)*gconst140*r10*x8431)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8425*x8431))+((x8423*x8428))+(((-1.0)*r02*x8430)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8429*x8430))+((cj1*sj2))+(((-1.0)*r22*x8431))+((r20*x8433)));
evalcond[4]=(((cj0*x8426))+((x8424*x8425))+(((-1.0)*r02*x8431))+(((-1.0)*cj0*x8432))+(((-1.0)*x8428*x8430)));
evalcond[5]=((((-1.0)*sj0*x8432))+(((-1.0)*x8427*x8430))+(((-1.0)*r12*x8431))+((sj0*x8426))+((r10*x8433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8434=((-1.0)*r11);
IkReal x8436 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8436)==0){
continue;
}
IkReal x8435=pow(x8436,-0.5);
CheckValue<IkReal> x8437 = IKatan2WithCheck(IkReal(x8434),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8437.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8437.value))));
IkReal gconst142=(x8434*x8435);
IkReal gconst143=((1.0)*r10*x8435);
CheckValue<IkReal> x8438 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8438.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8438.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8439=((-1.0)*r11);
CheckValue<IkReal> x8442 = IKatan2WithCheck(IkReal(x8439),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8442.valid){
continue;
}
IkReal x8440=((1.0)*(x8442.value));
IkReal x8441=x8435;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8440)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8440)));
IkReal gconst142=(x8439*x8441);
IkReal gconst143=((1.0)*r10*x8441);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8443=((-1.0)*r11);
CheckValue<IkReal> x8446 = IKatan2WithCheck(IkReal(x8443),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8446.valid){
continue;
}
IkReal x8444=((1.0)*(x8446.value));
IkReal x8445=x8435;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8444)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8444)));
IkReal gconst142=(x8443*x8445);
IkReal gconst143=((1.0)*r10*x8445);
IkReal x8447=r12*r12;
IkReal x8448=((1.0)*sj0);
IkReal x8449=(cj0*r02);
IkReal x8450=x8435;
j4eval[0]=((IKabs((((r12*x8449*x8450))+((sj0*x8447*x8450))+(((-1.0)*x8448*x8450)))))+(IKabs(((((-1.0)*x8449))+(((-1.0)*r12*x8448))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8451=((-1.0)*r11);
CheckValue<IkReal> x8454 = IKatan2WithCheck(IkReal(x8451),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8454.valid){
continue;
}
IkReal x8452=((1.0)*(x8454.value));
IkReal x8453=x8435;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8452)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8452)));
IkReal gconst142=(x8451*x8453);
IkReal gconst143=((1.0)*r10*x8453);
IkReal x8455=r12*r12;
IkReal x8456=(cj1*r22*sj2);
IkReal x8457=(cj2*r22*sj1);
CheckValue<IkReal> x8461=IKPowWithIntegerCheck(((-1.0)+x8455),-1);
if(!x8461.valid){
continue;
}
IkReal x8458=x8461.value;
if((((1.0)+(((-1.0)*x8455)))) < -0.00001)
continue;
IkReal x8459=IKsqrt(((1.0)+(((-1.0)*x8455))));
IkReal x8460=((1.0)*r12*x8458*x8459);
j4eval[0]=((IKabs((x8457+x8456)))+(IKabs(((((-1.0)*x8457*x8460))+(((-1.0)*x8456*x8460))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8462=(gconst142*r21);
IkReal x8463=(cj1*sj2);
IkReal x8464=(cj2*sj1);
IkReal x8465=(gconst143*r20);
CheckValue<IkReal> x8466=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8462*x8462)+(x8465*x8465)+(((-2.0)*x8462*x8465)))),-1);
if(!x8466.valid){
continue;
}
CheckValue<IkReal> x8467 = IKatan2WithCheck(IkReal((((r22*x8463))+((r22*x8464)))),IkReal(((((-1.0)*x8463*x8465))+((x8462*x8464))+((x8462*x8463))+(((-1.0)*x8464*x8465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8466.value)))+(x8467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8468=IKsin(j4);
IkReal x8469=IKcos(j4);
IkReal x8470=(sj1*sj2);
IkReal x8471=(gconst143*r20);
IkReal x8472=((1.0)*x8469);
IkReal x8473=((1.0)*cj1*cj2);
IkReal x8474=((1.0)*x8468);
IkReal x8475=(gconst142*x8468);
IkReal x8476=(gconst143*x8469);
evalcond[0]=((((-1.0)*x8471*x8474))+((r21*x8475))+(((-1.0)*r22*x8472)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8474))+((r11*x8475))+(((-1.0)*r12*x8472)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8475))+(((-1.0)*r02*x8472))+(((-1.0)*gconst143*r00*x8474)));
evalcond[3]=(((cj2*sj1))+((x8469*x8471))+((cj1*sj2))+(((-1.0)*r22*x8474))+(((-1.0)*gconst142*r21*x8472)));
evalcond[4]=(((r00*x8476))+(((-1.0)*r02*x8474))+(((-1.0)*gconst142*r01*x8472))+((cj0*x8470))+(((-1.0)*cj0*x8473)));
evalcond[5]=((((-1.0)*sj0*x8473))+((r10*x8476))+(((-1.0)*r12*x8474))+(((-1.0)*gconst142*r11*x8472))+((sj0*x8470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8477=((1.0)*sj0);
IkReal x8478=((1.0)*gconst142);
CheckValue<IkReal> x8479 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8477)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8478))+((gconst143*r10*sj0))+(((-1.0)*gconst142*r11*x8477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8479.valid){
continue;
}
CheckValue<IkReal> x8480=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x8478)))),-1);
if(!x8480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8479.value)+(((1.5707963267949)*(x8480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8481=IKsin(j4);
IkReal x8482=IKcos(j4);
IkReal x8483=(sj1*sj2);
IkReal x8484=(gconst143*r20);
IkReal x8485=((1.0)*x8482);
IkReal x8486=((1.0)*cj1*cj2);
IkReal x8487=((1.0)*x8481);
IkReal x8488=(gconst142*x8481);
IkReal x8489=(gconst143*x8482);
evalcond[0]=((((-1.0)*x8484*x8487))+(((-1.0)*r22*x8485))+((r21*x8488)));
evalcond[1]=(cj0+(((-1.0)*r12*x8485))+(((-1.0)*gconst143*r10*x8487))+((r11*x8488)));
evalcond[2]=(((r01*x8488))+(((-1.0)*sj0))+(((-1.0)*r02*x8485))+(((-1.0)*gconst143*r00*x8487)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8482*x8484))+(((-1.0)*r22*x8487))+(((-1.0)*gconst142*r21*x8485)));
evalcond[4]=(((cj0*x8483))+(((-1.0)*cj0*x8486))+(((-1.0)*r02*x8487))+(((-1.0)*gconst142*r01*x8485))+((r00*x8489)));
evalcond[5]=(((r10*x8489))+(((-1.0)*sj0*x8486))+((sj0*x8483))+(((-1.0)*gconst142*r11*x8485))+(((-1.0)*r12*x8487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8490=((1.0)*gconst143);
CheckValue<IkReal> x8491 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8490))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8491.valid){
continue;
}
CheckValue<IkReal> x8492=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8490)))),-1);
if(!x8492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8491.value)+(((1.5707963267949)*(x8492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8493=IKsin(j4);
IkReal x8494=IKcos(j4);
IkReal x8495=(sj1*sj2);
IkReal x8496=(gconst143*r20);
IkReal x8497=((1.0)*x8494);
IkReal x8498=((1.0)*cj1*cj2);
IkReal x8499=((1.0)*x8493);
IkReal x8500=(gconst142*x8493);
IkReal x8501=(gconst143*x8494);
evalcond[0]=(((r21*x8500))+(((-1.0)*r22*x8497))+(((-1.0)*x8496*x8499)));
evalcond[1]=(cj0+((r11*x8500))+(((-1.0)*gconst143*r10*x8499))+(((-1.0)*r12*x8497)));
evalcond[2]=((((-1.0)*r02*x8497))+(((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8499))+((r01*x8500)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8499))+((x8494*x8496))+(((-1.0)*gconst142*r21*x8497)));
evalcond[4]=((((-1.0)*cj0*x8498))+(((-1.0)*r02*x8499))+(((-1.0)*gconst142*r01*x8497))+((r00*x8501))+((cj0*x8495)));
evalcond[5]=(((r10*x8501))+(((-1.0)*sj0*x8498))+((sj0*x8495))+(((-1.0)*gconst142*r11*x8497))+(((-1.0)*r12*x8499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8502=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8502;
j4eval[1]=IKsign(x8502);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8503=((1.0)*cj5);
IkReal x8504=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8503)));
j4eval[0]=x8504;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8503)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8504);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8505=cj5*cj5;
IkReal x8506=r11*r11;
IkReal x8507=(r11*sj5);
IkReal x8508=(cj5*r10);
IkReal x8509=((r12*r12)+((x8505*(r10*r10)))+x8506+(((-1.0)*x8505*x8506))+(((-2.0)*x8507*x8508)));
j4eval[0]=x8509;
j4eval[1]=IKsign(x8509);
j4eval[2]=((IKabs(r12))+(IKabs((x8508+(((-1.0)*x8507))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8510=cj5*cj5;
IkReal x8511=r11*r11;
IkReal x8512=(cj5*r10);
IkReal x8513=(r11*sj5);
CheckValue<IkReal> x8514 = IKatan2WithCheck(IkReal((x8512+(((-1.0)*x8513)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8514.valid){
continue;
}
CheckValue<IkReal> x8515=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x8510*x8511))+x8511+(((-2.0)*x8512*x8513))+((x8510*(r10*r10))))),-1);
if(!x8515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8514.value)+(((1.5707963267949)*(x8515.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8516=IKsin(j4);
IkReal x8517=IKcos(j4);
IkReal x8518=(cj5*r10);
IkReal x8519=(r01*sj5);
IkReal x8520=(cj5*r00);
IkReal x8521=(cj5*r20);
IkReal x8522=((1.0)*x8517);
IkReal x8523=((1.0)*x8516);
IkReal x8524=(sj5*x8516);
evalcond[0]=(((r21*x8524))+(((-1.0)*r22*x8522))+(((-1.0)*x8521*x8523)));
evalcond[1]=(((x8516*x8519))+(((-1.0)*r02*x8522))+(((-1.0)*x8520*x8523)));
evalcond[2]=((((-1.0)*r11*sj5*x8522))+((x8517*x8518))+(((-1.0)*r12*x8523)));
evalcond[3]=((1.0)+((r11*x8524))+(((-1.0)*x8518*x8523))+(((-1.0)*r12*x8522)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8522))+((cj1*sj2))+((x8517*x8521))+(((-1.0)*r22*x8523)));
evalcond[5]=((((-1.0)*x8519*x8522))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8523))+((x8517*x8520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8525=((1.0)*cj5);
CheckValue<IkReal> x8526 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8526.valid){
continue;
}
CheckValue<IkReal> x8527=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8525)))),-1);
if(!x8527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8526.value)+(((1.5707963267949)*(x8527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8528=IKsin(j4);
IkReal x8529=IKcos(j4);
IkReal x8530=(cj5*r10);
IkReal x8531=(r01*sj5);
IkReal x8532=(cj5*r00);
IkReal x8533=(cj5*r20);
IkReal x8534=((1.0)*x8529);
IkReal x8535=((1.0)*x8528);
IkReal x8536=(sj5*x8528);
evalcond[0]=((((-1.0)*x8533*x8535))+(((-1.0)*r22*x8534))+((r21*x8536)));
evalcond[1]=((((-1.0)*r02*x8534))+(((-1.0)*x8532*x8535))+((x8528*x8531)));
evalcond[2]=((((-1.0)*r11*sj5*x8534))+(((-1.0)*r12*x8535))+((x8529*x8530)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8534))+(((-1.0)*x8530*x8535))+((r11*x8536)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8535))+((cj1*sj2))+((x8529*x8533))+(((-1.0)*r21*sj5*x8534)));
evalcond[5]=((((-1.0)*r02*x8535))+(((-1.0)*x8531*x8534))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8529*x8532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8537=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8537.valid){
continue;
}
CheckValue<IkReal> x8538 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8537.value)))+(x8538.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8539=IKsin(j4);
IkReal x8540=IKcos(j4);
IkReal x8541=(cj5*r10);
IkReal x8542=(r01*sj5);
IkReal x8543=(cj5*r00);
IkReal x8544=(cj5*r20);
IkReal x8545=((1.0)*x8540);
IkReal x8546=((1.0)*x8539);
IkReal x8547=(sj5*x8539);
evalcond[0]=((((-1.0)*r22*x8545))+(((-1.0)*x8544*x8546))+((r21*x8547)));
evalcond[1]=((((-1.0)*r02*x8545))+((x8539*x8542))+(((-1.0)*x8543*x8546)));
evalcond[2]=(((x8540*x8541))+(((-1.0)*r11*sj5*x8545))+(((-1.0)*r12*x8546)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8545))+(((-1.0)*x8541*x8546))+((r11*x8547)));
evalcond[4]=(((cj2*sj1))+((x8540*x8544))+((cj1*sj2))+(((-1.0)*r22*x8546))+(((-1.0)*r21*sj5*x8545)));
evalcond[5]=((((-1.0)*r02*x8546))+((x8540*x8543))+(((-1.0)*x8542*x8545))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8548=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8548;
j4eval[1]=IKsign(x8548);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8549=((1.0)*cj5);
IkReal x8550=((((-1.0)*r21*x8549))+(((-1.0)*r20*sj5)));
j4eval[0]=x8550;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x8549))+((r01*sj5))))));
j4eval[2]=IKsign(x8550);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8551=cj5*cj5;
IkReal x8552=r11*r11;
IkReal x8553=(cj5*r10);
IkReal x8554=(r11*sj5);
IkReal x8555=(((x8551*x8552))+(((-1.0)*(r12*r12)))+(((-1.0)*x8551*(r10*r10)))+(((2.0)*x8553*x8554))+(((-1.0)*x8552)));
j4eval[0]=x8555;
j4eval[1]=((IKabs(r12))+(IKabs((x8553+(((-1.0)*x8554))))));
j4eval[2]=IKsign(x8555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8556=cj5*cj5;
IkReal x8557=r11*r11;
IkReal x8558=(cj5*r10);
IkReal x8559=(r11*sj5);
CheckValue<IkReal> x8560 = IKatan2WithCheck(IkReal((x8558+(((-1.0)*x8559)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8560.valid){
continue;
}
CheckValue<IkReal> x8561=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8556*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8557))+(((2.0)*x8558*x8559))+((x8556*x8557)))),-1);
if(!x8561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8560.value)+(((1.5707963267949)*(x8561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8562=IKsin(j4);
IkReal x8563=IKcos(j4);
IkReal x8564=(cj5*r10);
IkReal x8565=(r01*sj5);
IkReal x8566=(cj5*r00);
IkReal x8567=(cj5*r20);
IkReal x8568=((1.0)*x8563);
IkReal x8569=((1.0)*x8562);
IkReal x8570=(sj5*x8562);
evalcond[0]=(((r21*x8570))+(((-1.0)*r22*x8568))+(((-1.0)*x8567*x8569)));
evalcond[1]=(((x8562*x8565))+(((-1.0)*x8566*x8569))+(((-1.0)*r02*x8568)));
evalcond[2]=((((-1.0)*r12*x8569))+((x8563*x8564))+(((-1.0)*r11*sj5*x8568)));
evalcond[3]=((-1.0)+(((-1.0)*x8564*x8569))+(((-1.0)*r12*x8568))+((r11*x8570)));
evalcond[4]=(((cj2*sj1))+((x8563*x8567))+((cj1*sj2))+(((-1.0)*r22*x8569))+(((-1.0)*r21*sj5*x8568)));
evalcond[5]=((((-1.0)*x8565*x8568))+((x8563*x8566))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x8569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8571=((1.0)*cj5);
CheckValue<IkReal> x8572=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8571))+(((-1.0)*r20*sj5)))),-1);
if(!x8572.valid){
continue;
}
CheckValue<IkReal> x8573 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8571)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8572.value)))+(x8573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8574=IKsin(j4);
IkReal x8575=IKcos(j4);
IkReal x8576=(cj5*r10);
IkReal x8577=(r01*sj5);
IkReal x8578=(cj5*r00);
IkReal x8579=(cj5*r20);
IkReal x8580=((1.0)*x8575);
IkReal x8581=((1.0)*x8574);
IkReal x8582=(sj5*x8574);
evalcond[0]=((((-1.0)*r22*x8580))+((r21*x8582))+(((-1.0)*x8579*x8581)));
evalcond[1]=((((-1.0)*r02*x8580))+((x8574*x8577))+(((-1.0)*x8578*x8581)));
evalcond[2]=(((x8575*x8576))+(((-1.0)*r12*x8581))+(((-1.0)*r11*sj5*x8580)));
evalcond[3]=((-1.0)+(((-1.0)*x8576*x8581))+((r11*x8582))+(((-1.0)*r12*x8580)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8581))+(((-1.0)*r21*sj5*x8580))+((cj1*sj2))+((x8575*x8579)));
evalcond[5]=((((-1.0)*x8577*x8580))+(((-1.0)*sj1*sj2))+((x8575*x8578))+(((-1.0)*r02*x8581))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8583 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8583.valid){
continue;
}
CheckValue<IkReal> x8584=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8583.value)+(((1.5707963267949)*(x8584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8585=IKsin(j4);
IkReal x8586=IKcos(j4);
IkReal x8587=(cj5*r10);
IkReal x8588=(r01*sj5);
IkReal x8589=(cj5*r00);
IkReal x8590=(cj5*r20);
IkReal x8591=((1.0)*x8586);
IkReal x8592=((1.0)*x8585);
IkReal x8593=(sj5*x8585);
evalcond[0]=((((-1.0)*r22*x8591))+(((-1.0)*x8590*x8592))+((r21*x8593)));
evalcond[1]=((((-1.0)*x8589*x8592))+(((-1.0)*r02*x8591))+((x8585*x8588)));
evalcond[2]=(((x8586*x8587))+(((-1.0)*r11*sj5*x8591))+(((-1.0)*r12*x8592)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8591))+((r11*x8593))+(((-1.0)*x8587*x8592)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8592))+((x8586*x8590))+((cj1*sj2))+(((-1.0)*r21*sj5*x8591)));
evalcond[5]=(((x8586*x8589))+(((-1.0)*r02*x8592))+(((-1.0)*sj1*sj2))+(((-1.0)*x8588*x8591))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8594=((-1.0)*r00);
IkReal x8596 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8596)==0){
continue;
}
IkReal x8595=pow(x8596,-0.5);
CheckValue<IkReal> x8597 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8594),IKFAST_ATAN2_MAGTHRESH);
if(!x8597.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8597.value));
IkReal gconst145=(r01*x8595);
IkReal gconst146=(x8594*x8595);
CheckValue<IkReal> x8598 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8598.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8598.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8599=((-1.0)*r00);
IkReal x8600=x8595;
CheckValue<IkReal> x8602 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8599),IKFAST_ATAN2_MAGTHRESH);
if(!x8602.valid){
continue;
}
IkReal x8601=((-1.0)*(x8602.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8601;
IkReal gconst144=x8601;
IkReal gconst145=(r01*x8600);
IkReal gconst146=(x8599*x8600);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8603=((1.0)*sj0);
IkReal x8604=((1.0)*gconst145);
CheckValue<IkReal> x8605 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8603))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8604))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8605.valid){
continue;
}
CheckValue<IkReal> x8606=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8604))+(((-1.0)*gconst146*r21)))),-1);
if(!x8606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8605.value)+(((1.5707963267949)*(x8606.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8607=IKsin(j4);
IkReal x8608=IKcos(j4);
IkReal x8609=(gconst146*r10);
IkReal x8610=(sj1*sj2);
IkReal x8611=(gconst146*r20);
IkReal x8612=(gconst146*r00);
IkReal x8613=((1.0)*x8608);
IkReal x8614=((1.0)*x8607);
IkReal x8615=(gconst145*x8607);
IkReal x8616=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8613))+((r21*x8615))+(((-1.0)*x8611*x8614)));
evalcond[1]=(cj0+((r11*x8615))+(((-1.0)*r12*x8613))+(((-1.0)*x8609*x8614)));
evalcond[2]=((((-1.0)*x8612*x8614))+(((-1.0)*sj0))+(((-1.0)*r02*x8613))+((r01*x8615)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8613))+((cj1*sj2))+(((-1.0)*r22*x8614))+((x8608*x8611)));
evalcond[4]=((((-1.0)*r02*x8614))+(((-1.0)*gconst145*r01*x8613))+((x8608*x8612))+((cj0*x8610))+(((-1.0)*cj0*x8616)));
evalcond[5]=((((-1.0)*gconst145*r11*x8613))+((x8608*x8609))+(((-1.0)*r12*x8614))+(((-1.0)*sj0*x8616))+((sj0*x8610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8617=((1.0)*gconst146);
CheckValue<IkReal> x8618 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8617))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8618.valid){
continue;
}
CheckValue<IkReal> x8619=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8617))+(((-1.0)*gconst145*r10)))),-1);
if(!x8619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8618.value)+(((1.5707963267949)*(x8619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8620=IKsin(j4);
IkReal x8621=IKcos(j4);
IkReal x8622=(gconst146*r10);
IkReal x8623=(sj1*sj2);
IkReal x8624=(gconst146*r20);
IkReal x8625=(gconst146*r00);
IkReal x8626=((1.0)*x8621);
IkReal x8627=((1.0)*x8620);
IkReal x8628=(gconst145*x8620);
IkReal x8629=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8628))+(((-1.0)*x8624*x8627))+(((-1.0)*r22*x8626)));
evalcond[1]=((((-1.0)*r12*x8626))+cj0+(((-1.0)*x8622*x8627))+((r11*x8628)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8625*x8627))+((r01*x8628))+(((-1.0)*r02*x8626)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8626))+((cj1*sj2))+(((-1.0)*r22*x8627))+((x8621*x8624)));
evalcond[4]=(((cj0*x8623))+((x8621*x8625))+(((-1.0)*cj0*x8629))+(((-1.0)*r02*x8627))+(((-1.0)*gconst145*r01*x8626)));
evalcond[5]=((((-1.0)*r12*x8627))+(((-1.0)*gconst145*r11*x8626))+((sj0*x8623))+(((-1.0)*sj0*x8629))+((x8621*x8622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8630=((-1.0)*r01);
IkReal x8632 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8632)==0){
continue;
}
IkReal x8631=pow(x8632,-0.5);
CheckValue<IkReal> x8633 = IKatan2WithCheck(IkReal(x8630),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8633.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8633.value))));
IkReal gconst148=(x8630*x8631);
IkReal gconst149=((1.0)*r00*x8631);
CheckValue<IkReal> x8634 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8634.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8634.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8635=((-1.0)*r01);
CheckValue<IkReal> x8638 = IKatan2WithCheck(IkReal(x8635),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8638.valid){
continue;
}
IkReal x8636=((1.0)*(x8638.value));
IkReal x8637=x8631;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8636)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8636)));
IkReal gconst148=(x8635*x8637);
IkReal gconst149=((1.0)*r00*x8637);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8639=((-1.0)*r01);
CheckValue<IkReal> x8642 = IKatan2WithCheck(IkReal(x8639),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8642.valid){
continue;
}
IkReal x8640=((1.0)*(x8642.value));
IkReal x8641=x8631;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8640)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8640)));
IkReal gconst148=(x8639*x8641);
IkReal gconst149=((1.0)*r00*x8641);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8643=((-1.0)*r01);
CheckValue<IkReal> x8646 = IKatan2WithCheck(IkReal(x8643),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8646.valid){
continue;
}
IkReal x8644=((1.0)*(x8646.value));
IkReal x8645=x8631;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8644)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8644)));
IkReal gconst148=(x8643*x8645);
IkReal gconst149=((1.0)*r00*x8645);
IkReal x8647=r02*r02;
IkReal x8648=(r12*sj0);
IkReal x8649=((1.0)*cj0);
IkReal x8650=x8631;
j4eval[0]=((IKabs((((cj0*x8647*x8650))+((r02*x8648*x8650))+(((-1.0)*x8649*x8650)))))+(IKabs(((((-1.0)*r02*x8649))+(((-1.0)*x8648))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8651=((1.0)*sj0);
IkReal x8652=((1.0)*gconst148);
CheckValue<IkReal> x8653 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8651))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*cj0*r01*x8652))+(((-1.0)*gconst148*r11*x8651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8653.valid){
continue;
}
CheckValue<IkReal> x8654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8652))+(((-1.0)*gconst149*r21)))),-1);
if(!x8654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8653.value)+(((1.5707963267949)*(x8654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8655=IKsin(j4);
IkReal x8656=IKcos(j4);
IkReal x8657=(gconst148*r11);
IkReal x8658=(sj1*sj2);
IkReal x8659=((1.0)*x8656);
IkReal x8660=(gconst149*x8656);
IkReal x8661=(gconst148*x8655);
IkReal x8662=((1.0)*cj1*cj2);
IkReal x8663=((1.0)*x8655);
evalcond[0]=((((-1.0)*gconst149*r20*x8663))+(((-1.0)*r22*x8659))+((r21*x8661)));
evalcond[1]=((((-1.0)*r12*x8659))+cj0+((x8655*x8657))+(((-1.0)*gconst149*r10*x8663)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8661))+(((-1.0)*gconst149*r00*x8663))+(((-1.0)*r02*x8659)));
evalcond[3]=(((cj2*sj1))+((r20*x8660))+((cj1*sj2))+(((-1.0)*r22*x8663))+(((-1.0)*gconst148*r21*x8659)));
evalcond[4]=((((-1.0)*cj0*x8662))+(((-1.0)*r02*x8663))+((r00*x8660))+(((-1.0)*gconst148*r01*x8659))+((cj0*x8658)));
evalcond[5]=((((-1.0)*sj0*x8662))+(((-1.0)*r12*x8663))+((sj0*x8658))+(((-1.0)*x8657*x8659))+((r10*x8660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8664=((1.0)*gconst149);
CheckValue<IkReal> x8665=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8664))+(((-1.0)*gconst148*r10)))),-1);
if(!x8665.valid){
continue;
}
CheckValue<IkReal> x8666 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8664))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8665.value)))+(x8666.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8667=IKsin(j4);
IkReal x8668=IKcos(j4);
IkReal x8669=(gconst148*r11);
IkReal x8670=(sj1*sj2);
IkReal x8671=((1.0)*x8668);
IkReal x8672=(gconst149*x8668);
IkReal x8673=(gconst148*x8667);
IkReal x8674=((1.0)*cj1*cj2);
IkReal x8675=((1.0)*x8667);
evalcond[0]=((((-1.0)*r22*x8671))+(((-1.0)*gconst149*r20*x8675))+((r21*x8673)));
evalcond[1]=(cj0+(((-1.0)*r12*x8671))+((x8667*x8669))+(((-1.0)*gconst149*r10*x8675)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8671))+((r01*x8673))+(((-1.0)*gconst149*r00*x8675)));
evalcond[3]=(((r20*x8672))+((cj2*sj1))+(((-1.0)*r22*x8675))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8671)));
evalcond[4]=((((-1.0)*gconst148*r01*x8671))+((cj0*x8670))+(((-1.0)*cj0*x8674))+(((-1.0)*r02*x8675))+((r00*x8672)));
evalcond[5]=((((-1.0)*r12*x8675))+((r10*x8672))+(((-1.0)*x8669*x8671))+(((-1.0)*sj0*x8674))+((sj0*x8670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8676=((1.0)*gconst149);
CheckValue<IkReal> x8677 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8676))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8677.valid){
continue;
}
CheckValue<IkReal> x8678=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8676))+(((-1.0)*gconst148*r00)))),-1);
if(!x8678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8677.value)+(((1.5707963267949)*(x8678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8679=IKsin(j4);
IkReal x8680=IKcos(j4);
IkReal x8681=(gconst148*r11);
IkReal x8682=(sj1*sj2);
IkReal x8683=((1.0)*x8680);
IkReal x8684=(gconst149*x8680);
IkReal x8685=(gconst148*x8679);
IkReal x8686=((1.0)*cj1*cj2);
IkReal x8687=((1.0)*x8679);
evalcond[0]=((((-1.0)*gconst149*r20*x8687))+(((-1.0)*r22*x8683))+((r21*x8685)));
evalcond[1]=(((x8679*x8681))+cj0+(((-1.0)*r12*x8683))+(((-1.0)*gconst149*r10*x8687)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8683))+((r01*x8685))+(((-1.0)*gconst149*r00*x8687)));
evalcond[3]=(((cj2*sj1))+((r20*x8684))+(((-1.0)*gconst148*r21*x8683))+((cj1*sj2))+(((-1.0)*r22*x8687)));
evalcond[4]=((((-1.0)*cj0*x8686))+(((-1.0)*r02*x8687))+((r00*x8684))+(((-1.0)*gconst148*r01*x8683))+((cj0*x8682)));
evalcond[5]=((((-1.0)*x8681*x8683))+(((-1.0)*r12*x8687))+((r10*x8684))+(((-1.0)*sj0*x8686))+((sj0*x8682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8688=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8688;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8688);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8689=((1.0)*cj5);
IkReal x8690=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8689)));
j4eval[0]=x8690;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8689)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8690);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8691=cj5*cj5;
IkReal x8692=r01*r01;
IkReal x8693=(r01*sj5);
IkReal x8694=(cj5*r00);
IkReal x8695=((((-1.0)*x8692))+(((-1.0)*(r02*r02)))+(((2.0)*x8693*x8694))+((x8691*x8692))+(((-1.0)*x8691*(r00*r00))));
j4eval[0]=x8695;
j4eval[1]=IKsign(x8695);
j4eval[2]=((IKabs(r02))+(IKabs((x8694+(((-1.0)*x8693))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8696=cj5*cj5;
IkReal x8697=r01*r01;
IkReal x8698=(r01*sj5);
IkReal x8699=(cj5*r00);
CheckValue<IkReal> x8700 = IKatan2WithCheck(IkReal((x8699+(((-1.0)*x8698)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8700.valid){
continue;
}
CheckValue<IkReal> x8701=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8697))+(((-1.0)*(r02*r02)))+(((2.0)*x8698*x8699))+(((-1.0)*x8696*(r00*r00)))+((x8696*x8697)))),-1);
if(!x8701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8700.value)+(((1.5707963267949)*(x8701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8702=IKsin(j4);
IkReal x8703=IKcos(j4);
IkReal x8704=(cj5*r10);
IkReal x8705=(r01*sj5);
IkReal x8706=(cj5*r00);
IkReal x8707=(cj5*r20);
IkReal x8708=((1.0)*x8703);
IkReal x8709=((1.0)*x8702);
IkReal x8710=(sj5*x8702);
evalcond[0]=((((-1.0)*x8707*x8709))+(((-1.0)*r22*x8708))+((r21*x8710)));
evalcond[1]=((((-1.0)*x8704*x8709))+((r11*x8710))+(((-1.0)*r12*x8708)));
evalcond[2]=((((-1.0)*x8705*x8708))+(((-1.0)*r02*x8709))+((x8703*x8706)));
evalcond[3]=((-1.0)+(((-1.0)*x8706*x8709))+((x8702*x8705))+(((-1.0)*r02*x8708)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8709))+(((-1.0)*r21*sj5*x8708))+((x8703*x8707)));
evalcond[5]=((((-1.0)*r11*sj5*x8708))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8709))+((x8703*x8704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8711=((1.0)*cj5);
CheckValue<IkReal> x8712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8711)))),-1);
if(!x8712.valid){
continue;
}
CheckValue<IkReal> x8713 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8711))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8712.value)))+(x8713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8714=IKsin(j4);
IkReal x8715=IKcos(j4);
IkReal x8716=(cj5*r10);
IkReal x8717=(r01*sj5);
IkReal x8718=(cj5*r00);
IkReal x8719=(cj5*r20);
IkReal x8720=((1.0)*x8715);
IkReal x8721=((1.0)*x8714);
IkReal x8722=(sj5*x8714);
evalcond[0]=(((r21*x8722))+(((-1.0)*x8719*x8721))+(((-1.0)*r22*x8720)));
evalcond[1]=(((r11*x8722))+(((-1.0)*r12*x8720))+(((-1.0)*x8716*x8721)));
evalcond[2]=(((x8715*x8718))+(((-1.0)*r02*x8721))+(((-1.0)*x8717*x8720)));
evalcond[3]=((-1.0)+((x8714*x8717))+(((-1.0)*r02*x8720))+(((-1.0)*x8718*x8721)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8715*x8719))+(((-1.0)*r21*sj5*x8720))+(((-1.0)*r22*x8721)));
evalcond[5]=((((-1.0)*r11*sj5*x8720))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8715*x8716))+(((-1.0)*r12*x8721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8723=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8723.valid){
continue;
}
CheckValue<IkReal> x8724 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8723.value)))+(x8724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8725=IKsin(j4);
IkReal x8726=IKcos(j4);
IkReal x8727=(cj5*r10);
IkReal x8728=(r01*sj5);
IkReal x8729=(cj5*r00);
IkReal x8730=(cj5*r20);
IkReal x8731=((1.0)*x8726);
IkReal x8732=((1.0)*x8725);
IkReal x8733=(sj5*x8725);
evalcond[0]=(((r21*x8733))+(((-1.0)*r22*x8731))+(((-1.0)*x8730*x8732)));
evalcond[1]=(((r11*x8733))+(((-1.0)*x8727*x8732))+(((-1.0)*r12*x8731)));
evalcond[2]=(((x8726*x8729))+(((-1.0)*r02*x8732))+(((-1.0)*x8728*x8731)));
evalcond[3]=((-1.0)+(((-1.0)*x8729*x8732))+((x8725*x8728))+(((-1.0)*r02*x8731)));
evalcond[4]=(((cj2*sj1))+((x8726*x8730))+((cj1*sj2))+(((-1.0)*r21*sj5*x8731))+(((-1.0)*r22*x8732)));
evalcond[5]=((((-1.0)*r11*sj5*x8731))+((x8726*x8727))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8734=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8734;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8734);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8735=((1.0)*cj5);
IkReal x8736=((((-1.0)*r21*x8735))+(((-1.0)*r20*sj5)));
j4eval[0]=x8736;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8735))))));
j4eval[2]=IKsign(x8736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8737=cj5*cj5;
IkReal x8738=r01*r01;
IkReal x8739=(cj5*r00);
IkReal x8740=(r01*sj5);
IkReal x8741=(x8738+(((-2.0)*x8739*x8740))+((x8737*(r00*r00)))+(((-1.0)*x8737*x8738))+(r02*r02));
j4eval[0]=x8741;
j4eval[1]=((IKabs((x8739+(((-1.0)*x8740)))))+(IKabs(r02)));
j4eval[2]=IKsign(x8741);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8742=cj5*cj5;
IkReal x8743=r01*r01;
IkReal x8744=(r01*sj5);
IkReal x8745=(cj5*r00);
CheckValue<IkReal> x8746 = IKatan2WithCheck(IkReal((x8745+(((-1.0)*x8744)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8746.valid){
continue;
}
CheckValue<IkReal> x8747=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8742*x8743))+x8743+((x8742*(r00*r00)))+(((-2.0)*x8744*x8745))+(r02*r02))),-1);
if(!x8747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8746.value)+(((1.5707963267949)*(x8747.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8748=IKsin(j4);
IkReal x8749=IKcos(j4);
IkReal x8750=(cj5*r10);
IkReal x8751=(r01*sj5);
IkReal x8752=(cj5*r00);
IkReal x8753=(cj5*r20);
IkReal x8754=((1.0)*x8749);
IkReal x8755=((1.0)*x8748);
IkReal x8756=(sj5*x8748);
evalcond[0]=((((-1.0)*r22*x8754))+(((-1.0)*x8753*x8755))+((r21*x8756)));
evalcond[1]=(((r11*x8756))+(((-1.0)*x8750*x8755))+(((-1.0)*r12*x8754)));
evalcond[2]=((((-1.0)*x8751*x8754))+(((-1.0)*r02*x8755))+((x8749*x8752)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8754))+((x8748*x8751))+(((-1.0)*x8752*x8755)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8755))+((cj1*sj2))+((x8749*x8753))+(((-1.0)*r21*sj5*x8754)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8754))+((x8749*x8750))+(((-1.0)*r12*x8755))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8757=((1.0)*cj5);
CheckValue<IkReal> x8758 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8757))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8758.valid){
continue;
}
CheckValue<IkReal> x8759=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8757))+(((-1.0)*r20*sj5)))),-1);
if(!x8759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8758.value)+(((1.5707963267949)*(x8759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8760=IKsin(j4);
IkReal x8761=IKcos(j4);
IkReal x8762=(cj5*r10);
IkReal x8763=(r01*sj5);
IkReal x8764=(cj5*r00);
IkReal x8765=(cj5*r20);
IkReal x8766=((1.0)*x8761);
IkReal x8767=((1.0)*x8760);
IkReal x8768=(sj5*x8760);
evalcond[0]=((((-1.0)*r22*x8766))+((r21*x8768))+(((-1.0)*x8765*x8767)));
evalcond[1]=((((-1.0)*r12*x8766))+((r11*x8768))+(((-1.0)*x8762*x8767)));
evalcond[2]=((((-1.0)*r02*x8767))+((x8761*x8764))+(((-1.0)*x8763*x8766)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8766))+((x8760*x8763))+(((-1.0)*x8764*x8767)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8761*x8765))+(((-1.0)*r22*x8767))+(((-1.0)*r21*sj5*x8766)));
evalcond[5]=((((-1.0)*r11*sj5*x8766))+(((-1.0)*sj1*sj2))+((x8761*x8762))+(((-1.0)*r12*x8767))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8769 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8769.valid){
continue;
}
CheckValue<IkReal> x8770=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8769.value)+(((1.5707963267949)*(x8770.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8771=IKsin(j4);
IkReal x8772=IKcos(j4);
IkReal x8773=(cj5*r10);
IkReal x8774=(r01*sj5);
IkReal x8775=(cj5*r00);
IkReal x8776=(cj5*r20);
IkReal x8777=((1.0)*x8772);
IkReal x8778=((1.0)*x8771);
IkReal x8779=(sj5*x8771);
evalcond[0]=((((-1.0)*x8776*x8778))+(((-1.0)*r22*x8777))+((r21*x8779)));
evalcond[1]=((((-1.0)*x8773*x8778))+(((-1.0)*r12*x8777))+((r11*x8779)));
evalcond[2]=(((x8772*x8775))+(((-1.0)*r02*x8778))+(((-1.0)*x8774*x8777)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8777))+((x8771*x8774))+(((-1.0)*x8775*x8778)));
evalcond[4]=(((x8772*x8776))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8778))+(((-1.0)*r21*sj5*x8777)));
evalcond[5]=(((x8772*x8773))+(((-1.0)*r11*sj5*x8777))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8778))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8780=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8780);
rxp1_1=(px*r21);
rxp1_2=(r11*x8780);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8781=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8781);
rxp1_1=(px*r21);
rxp1_2=(r11*x8781);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8782=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8782);
rxp1_1=(px*r21);
rxp1_2=(r11*x8782);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8785=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8785.valid){
continue;
}
IkReal x8783=x8785.value;
IkReal x8784=(sj0*x8783);
cj4array[0]=((((-1.0)*sj1*sj2*x8784))+((cj1*cj2*x8784)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8786=IKsin(j4);
IkReal x8787=IKcos(j4);
IkReal x8788=(r21*sj5);
IkReal x8789=(cj5*r20);
IkReal x8790=((1.0)*x8786);
IkReal x8791=((1.0)*x8787);
evalcond[0]=((-1.0)*r02*x8786);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8791)));
evalcond[2]=((((-1.0)*x8789*x8790))+((x8786*x8788)));
evalcond[3]=(((r11*sj5*x8786))+(((-1.0)*cj5*r10*x8790)));
evalcond[4]=(((cj2*sj1))+((x8787*x8789))+(((-1.0)*x8788*x8791))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8794=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8794.valid){
continue;
}
IkReal x8792=x8794.value;
IkReal x8793=((1.0)*x8792);
cj4array[0]=((((-1.0)*cj1*sj2*x8793))+(((-1.0)*cj2*sj1*x8793)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8795=IKsin(j4);
IkReal x8796=IKcos(j4);
IkReal x8797=(r11*sj5);
IkReal x8798=((1.0)*sj0);
IkReal x8799=((1.0)*x8796);
IkReal x8800=((1.0)*cj5*x8795);
evalcond[0]=((-1.0)*r02*x8795);
evalcond[1]=((((-1.0)*r02*x8799))+(((-1.0)*x8798)));
evalcond[2]=(((r21*sj5*x8795))+(((-1.0)*r20*x8800)));
evalcond[3]=(((x8795*x8797))+(((-1.0)*r10*x8800)));
evalcond[4]=((((-1.0)*x8797*x8799))+((cj5*r10*x8796))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x8798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8801=IKPowWithIntegerCheck(r02,-1);
if(!x8801.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8801.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8802=IKsin(j4);
IkReal x8803=IKcos(j4);
IkReal x8804=(cj5*x8803);
IkReal x8805=(sj5*x8802);
IkReal x8806=((1.0)*sj5*x8803);
IkReal x8807=((1.0)*cj5*x8802);
evalcond[0]=((-1.0)*r02*x8802);
evalcond[1]=(((r21*x8805))+(((-1.0)*r20*x8807)));
evalcond[2]=((((-1.0)*r10*x8807))+((r11*x8805)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x8806))+((cj1*sj2))+((r20*x8804)));
evalcond[4]=((((-1.0)*r11*x8806))+((r10*x8804))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8808=((1.0)*sj0);
IkReal x8809=((1.0)*cj0);
CheckValue<IkReal> x8810 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8808))+(((-1.0)*r02*x8809)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8809))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8810.valid){
continue;
}
CheckValue<IkReal> x8811=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8810.value)+(((1.5707963267949)*(x8811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8812=IKsin(j4);
IkReal x8813=IKcos(j4);
IkReal x8814=(cj5*r10);
IkReal x8815=(sj1*sj2);
IkReal x8816=(r01*sj5);
IkReal x8817=(cj5*r00);
IkReal x8818=(cj5*r20);
IkReal x8819=((1.0)*x8813);
IkReal x8820=((1.0)*cj1*cj2);
IkReal x8821=((1.0)*x8812);
IkReal x8822=(sj5*x8812);
evalcond[0]=((((-1.0)*r22*x8819))+((r21*x8822))+(((-1.0)*x8818*x8821)));
evalcond[1]=((((-1.0)*r12*x8819))+cj0+((r11*x8822))+(((-1.0)*x8814*x8821)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8819))+((x8812*x8816))+(((-1.0)*x8817*x8821)));
evalcond[3]=(((cj2*sj1))+((x8813*x8818))+((cj1*sj2))+(((-1.0)*r21*sj5*x8819))+(((-1.0)*r22*x8821)));
evalcond[4]=((((-1.0)*x8816*x8819))+((x8813*x8817))+(((-1.0)*r02*x8821))+(((-1.0)*cj0*x8820))+((cj0*x8815)));
evalcond[5]=((((-1.0)*r12*x8821))+((x8813*x8814))+(((-1.0)*sj0*x8820))+((sj0*x8815))+(((-1.0)*r11*sj5*x8819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8823=((1.0)*cj5);
CheckValue<IkReal> x8824 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8823))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8824.valid){
continue;
}
CheckValue<IkReal> x8825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8823))+(((-1.0)*r10*sj5)))),-1);
if(!x8825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8824.value)+(((1.5707963267949)*(x8825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8826=IKsin(j4);
IkReal x8827=IKcos(j4);
IkReal x8828=(cj5*r10);
IkReal x8829=(sj1*sj2);
IkReal x8830=(r01*sj5);
IkReal x8831=(cj5*r00);
IkReal x8832=(cj5*r20);
IkReal x8833=((1.0)*x8827);
IkReal x8834=((1.0)*cj1*cj2);
IkReal x8835=((1.0)*x8826);
IkReal x8836=(sj5*x8826);
evalcond[0]=((((-1.0)*x8832*x8835))+((r21*x8836))+(((-1.0)*r22*x8833)));
evalcond[1]=(cj0+((r11*x8836))+(((-1.0)*x8828*x8835))+(((-1.0)*r12*x8833)));
evalcond[2]=((((-1.0)*sj0))+((x8826*x8830))+(((-1.0)*r02*x8833))+(((-1.0)*x8831*x8835)));
evalcond[3]=(((cj2*sj1))+((x8827*x8832))+((cj1*sj2))+(((-1.0)*r21*sj5*x8833))+(((-1.0)*r22*x8835)));
evalcond[4]=(((x8827*x8831))+(((-1.0)*cj0*x8834))+(((-1.0)*x8830*x8833))+(((-1.0)*r02*x8835))+((cj0*x8829)));
evalcond[5]=(((sj0*x8829))+(((-1.0)*sj0*x8834))+(((-1.0)*r11*sj5*x8833))+((x8827*x8828))+(((-1.0)*r12*x8835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8837=((1.0)*cj5);
CheckValue<IkReal> x8838 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8838.valid){
continue;
}
CheckValue<IkReal> x8839=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8837)))),-1);
if(!x8839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8838.value)+(((1.5707963267949)*(x8839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8840=IKsin(j4);
IkReal x8841=IKcos(j4);
IkReal x8842=(cj5*r10);
IkReal x8843=(sj1*sj2);
IkReal x8844=(r01*sj5);
IkReal x8845=(cj5*r00);
IkReal x8846=(cj5*r20);
IkReal x8847=((1.0)*x8841);
IkReal x8848=((1.0)*cj1*cj2);
IkReal x8849=((1.0)*x8840);
IkReal x8850=(sj5*x8840);
evalcond[0]=(((r21*x8850))+(((-1.0)*r22*x8847))+(((-1.0)*x8846*x8849)));
evalcond[1]=((((-1.0)*x8842*x8849))+cj0+((r11*x8850))+(((-1.0)*r12*x8847)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8845*x8849))+((x8840*x8844))+(((-1.0)*r02*x8847)));
evalcond[3]=(((cj2*sj1))+((x8841*x8846))+((cj1*sj2))+(((-1.0)*r21*sj5*x8847))+(((-1.0)*r22*x8849)));
evalcond[4]=((((-1.0)*cj0*x8848))+((cj0*x8843))+((x8841*x8845))+(((-1.0)*r02*x8849))+(((-1.0)*x8844*x8847)));
evalcond[5]=(((x8841*x8842))+(((-1.0)*sj0*x8848))+((sj0*x8843))+(((-1.0)*r11*sj5*x8847))+(((-1.0)*r12*x8849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8851=cj1*cj1;
IkReal x8852=cj2*cj2;
IkReal x8853=(cj1*cj5);
IkReal x8854=((7280355.0)*cj2);
IkReal x8855=(r10*sj5);
IkReal x8856=((8318211.0)*cj1);
IkReal x8857=((97460000.0)*cj1);
IkReal x8858=(sj1*sj2);
IkReal x8859=((85300000.0)*px);
IkReal x8860=(cj1*cj2);
IkReal x8861=((85300000.0)*py);
IkReal x8862=(r00*sj5);
IkReal x8863=((7280355.0)*cj5);
IkReal x8864=((3835629.0)*cj5);
CheckValue<IkReal> x8865=IKPowWithIntegerCheck(IKsign(((23239234.0)+(((-18190225.0)*x8852))+(((-41566690.0)*cj1*x8858))+(((36380450.0)*x8851*x8852))+(((5555904.0)*x8851))+(((41566690.0)*cj2*x8851))+(((-36380450.0)*x8858*x8860)))),-1);
if(!x8865.valid){
continue;
}
CheckValue<IkReal> x8866 = IKatan2WithCheck(IkReal((((x8860*x8861))+(((-1.0)*r11*x8858*x8863))+((py*x8857))+((r11*x8853*x8854))+(((8318211.0)*r11*x8853))+((cj1*x8854*x8855))+(((-3835629.0)*x8862))+(((-1.0)*r01*x8864))+(((-44940000.0)*px))+(((-1.0)*x8858*x8861))+(((-7280355.0)*x8855*x8858))+((x8855*x8856)))),IkReal(((((-7280355.0)*x8858*x8862))+(((8318211.0)*r01*x8853))+((cj1*x8854*x8862))+((r01*x8853*x8854))+(((-1.0)*r01*x8858*x8863))+((x8859*x8860))+(((-1.0)*x8858*x8859))+(((3835629.0)*x8855))+(((44940000.0)*py))+((px*x8857))+((r11*x8864))+((x8856*x8862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8866.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8865.value)))+(x8866.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8867=IKcos(j0);
IkReal x8868=IKsin(j0);
IkReal x8869=(sj1*sj2);
IkReal x8870=((0.08535)*sj5);
IkReal x8871=((0.08535)*cj5);
IkReal x8872=((0.21325)*x8868);
IkReal x8873=(cj1*x8867);
evalcond[0]=((((-1.0)*r01*x8871))+(((-1.0)*px))+(((-0.11235)*x8868))+(((-0.21325)*x8867*x8869))+(((0.24365)*x8873))+(((0.21325)*cj2*x8873))+(((-1.0)*r00*x8870)));
evalcond[1]=(((cj1*cj2*x8872))+(((-1.0)*x8869*x8872))+(((-1.0)*py))+(((-1.0)*r10*x8870))+(((-1.0)*r11*x8871))+(((0.11235)*x8867))+(((0.24365)*cj1*x8868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8874=((1.0)*cj5);
IkReal x8875=((((-1.0)*r01*x8874))+(((-1.0)*r00*sj5)));
j4eval[0]=x8875;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8874)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8875);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8876=((1.0)*cj5);
IkReal x8877=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8876)));
j4eval[0]=x8877;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8876))))));
j4eval[2]=IKsign(x8877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8878=((1.0)*sj0);
IkReal x8879=((1.0)*cj0);
IkReal x8880=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8880;
j4eval[1]=((IKabs(((((-1.0)*r02*x8879))+(((-1.0)*r12*x8878)))))+(IKabs(((((-1.0)*r11*sj5*x8878))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8879))))));
j4eval[2]=IKsign(x8880);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8881=((-1.0)*r20);
IkReal x8883 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8883)==0){
continue;
}
IkReal x8882=pow(x8883,-0.5);
CheckValue<IkReal> x8884 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8881),IKFAST_ATAN2_MAGTHRESH);
if(!x8884.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8884.value));
IkReal gconst1=(r21*x8882);
IkReal gconst2=(x8881*x8882);
CheckValue<IkReal> x8885 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8885.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8885.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8886=((-1.0)*r20);
IkReal x8887=x8882;
CheckValue<IkReal> x8889 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8886),IKFAST_ATAN2_MAGTHRESH);
if(!x8889.valid){
continue;
}
IkReal x8888=((-1.0)*(x8889.value));
sj5=gconst1;
cj5=gconst2;
j5=x8888;
IkReal gconst0=x8888;
IkReal gconst1=(r21*x8887);
IkReal gconst2=(x8886*x8887);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8890=((-1.0)*r20);
IkReal x8891=x8882;
CheckValue<IkReal> x8893 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8890),IKFAST_ATAN2_MAGTHRESH);
if(!x8893.valid){
continue;
}
IkReal x8892=((-1.0)*(x8893.value));
sj5=gconst1;
cj5=gconst2;
j5=x8892;
IkReal gconst0=x8892;
IkReal gconst1=(r21*x8891);
IkReal gconst2=(x8890*x8891);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8894=((-1.0)*r20);
IkReal x8895=x8882;
CheckValue<IkReal> x8897 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8894),IKFAST_ATAN2_MAGTHRESH);
if(!x8897.valid){
continue;
}
IkReal x8896=((-1.0)*(x8897.value));
sj5=gconst1;
cj5=gconst2;
j5=x8896;
IkReal gconst0=x8896;
IkReal gconst1=(r21*x8895);
IkReal gconst2=(x8894*x8895);
IkReal x8898=r22*r22;
CheckValue<IkReal> x8902=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8898))),-1);
if(!x8902.valid){
continue;
}
IkReal x8899=x8902.value;
IkReal x8900=(sj3*x8899);
IkReal x8901=(((x8900*(r21*r21*r21*r21)))+((sj3*x8898))+(((2.0)*x8900*(r20*r20)*(r21*r21)))+((x8900*(r20*r20*r20*r20))));
j4eval[0]=x8901;
j4eval[1]=IKsign(x8901);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8903=((-1.0)*r20);
IkReal x8904=x8882;
CheckValue<IkReal> x8906 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8903),IKFAST_ATAN2_MAGTHRESH);
if(!x8906.valid){
continue;
}
IkReal x8905=((-1.0)*(x8906.value));
sj5=gconst1;
cj5=gconst2;
j5=x8905;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8905;
IkReal gconst1=(r21*x8904);
IkReal gconst2=(x8903*x8904);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8907=((-1.0)*r20);
IkReal x8908=x8882;
CheckValue<IkReal> x8910 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8907),IKFAST_ATAN2_MAGTHRESH);
if(!x8910.valid){
continue;
}
IkReal x8909=((-1.0)*(x8910.value));
sj5=gconst1;
cj5=gconst2;
j5=x8909;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8909;
IkReal gconst1=(r21*x8908);
IkReal gconst2=(x8907*x8908);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8911=((-1.0)*r20);
IkReal x8912=x8882;
CheckValue<IkReal> x8914 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8911),IKFAST_ATAN2_MAGTHRESH);
if(!x8914.valid){
continue;
}
IkReal x8913=((-1.0)*(x8914.value));
sj5=gconst1;
cj5=gconst2;
j5=x8913;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8913;
IkReal gconst1=(r21*x8912);
IkReal gconst2=(x8911*x8912);
IkReal x8915=((1.0)*(r22*r22));
CheckValue<IkReal> x8919=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8915))),-1);
if(!x8919.valid){
continue;
}
IkReal x8916=x8919.value;
IkReal x8917=((1.0)*x8916);
IkReal x8918=((((-1.0)*x8917*(r21*r21*r21*r21)))+(((-1.0)*x8915))+(((-2.0)*x8916*(r20*r20)*(r21*r21)))+(((-1.0)*x8917*(r20*r20*r20*r20))));
j4eval[0]=x8918;
j4eval[1]=IKsign(x8918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8920=((-1.0)*r20);
IkReal x8921=x8882;
CheckValue<IkReal> x8923 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8920),IKFAST_ATAN2_MAGTHRESH);
if(!x8923.valid){
continue;
}
IkReal x8922=((-1.0)*(x8923.value));
sj5=gconst1;
cj5=gconst2;
j5=x8922;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8922;
IkReal gconst1=(r21*x8921);
IkReal gconst2=(x8920*x8921);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8924=((-1.0)*r20);
IkReal x8925=x8882;
CheckValue<IkReal> x8927 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8924),IKFAST_ATAN2_MAGTHRESH);
if(!x8927.valid){
continue;
}
IkReal x8926=((-1.0)*(x8927.value));
sj5=gconst1;
cj5=gconst2;
j5=x8926;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8926;
IkReal gconst1=(r21*x8925);
IkReal gconst2=(x8924*x8925);
IkReal x8928=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8932=IKPowWithIntegerCheck(x8928,-1);
if(!x8932.valid){
continue;
}
IkReal x8929=x8932.value;
IkReal x8930=((1.0)*x8929);
IkReal x8931=((((-2.0)*r10*r11*r20*r21*x8929))+(((-1.0)*x8930*(r10*r10)*(r20*r20)))+(((-1.0)*x8930*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x8931;
j4eval[1]=r12;
j4eval[2]=x8928;
j4eval[3]=IKsign(x8931);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8933=((-1.0)*r20);
IkReal x8934=x8882;
CheckValue<IkReal> x8936 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8933),IKFAST_ATAN2_MAGTHRESH);
if(!x8936.valid){
continue;
}
IkReal x8935=((-1.0)*(x8936.value));
sj5=gconst1;
cj5=gconst2;
j5=x8935;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8935;
IkReal gconst1=(r21*x8934);
IkReal gconst2=(x8933*x8934);
IkReal x8937=r22*r22;
IkReal x8938=(cj1*r12*sj2);
IkReal x8939=(cj2*r12*sj1);
CheckValue<IkReal> x8943=IKPowWithIntegerCheck(((-1.0)+x8937),-1);
if(!x8943.valid){
continue;
}
IkReal x8940=x8943.value;
if((((1.0)+(((-1.0)*x8937)))) < -0.00001)
continue;
IkReal x8941=IKsqrt(((1.0)+(((-1.0)*x8937))));
IkReal x8942=(r22*x8940*x8941);
j4eval[0]=((IKabs(((((-1.0)*x8938))+(((-1.0)*x8939)))))+(IKabs((((x8938*x8942))+((x8939*x8942))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8944=(cj1*sj2);
IkReal x8945=(cj2*sj1);
IkReal x8946=((1.0)*r12);
IkReal x8947=(gconst1*r11);
IkReal x8948=((1.0)*gconst2*r10);
CheckValue<IkReal> x8949 = IKatan2WithCheck(IkReal((((x8944*x8947))+(((-1.0)*x8944*x8948))+((x8945*x8947))+(((-1.0)*x8945*x8948)))),IkReal(((((-1.0)*x8944*x8946))+(((-1.0)*x8945*x8946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8949.valid){
continue;
}
CheckValue<IkReal> x8950=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8949.value)+(((1.5707963267949)*(x8950.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8951=IKcos(j4);
IkReal x8952=IKsin(j4);
IkReal x8953=((1.0)*x8951);
IkReal x8954=(gconst1*x8951);
IkReal x8955=(gconst1*x8952);
IkReal x8956=((1.0)*gconst2*x8952);
evalcond[0]=((((-1.0)*gconst2*r10*x8953))+((r12*x8952))+((r11*x8954)));
evalcond[1]=((((-1.0)*r22*x8953))+(((-1.0)*r20*x8956))+((r21*x8955)));
evalcond[2]=((((-1.0)*r00*x8956))+((r01*x8955))+(((-1.0)*r02*x8953)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8956))+(((-1.0)*r12*x8953))+((r11*x8955)));
evalcond[4]=(((r22*x8952))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8953))+((r21*x8954)));
evalcond[5]=(((r02*x8952))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8954))+(((-1.0)*gconst2*r00*x8953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8957=(gconst2*r10);
IkReal x8958=(gconst1*r11);
CheckValue<IkReal> x8959=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8958*x8958)))+(((2.0)*x8957*x8958))+(((-1.0)*(x8957*x8957)))+(((-1.0)*(r12*r12))))),-1);
if(!x8959.valid){
continue;
}
CheckValue<IkReal> x8960 = IKatan2WithCheck(IkReal((x8958+(((-1.0)*x8957)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8959.value)))+(x8960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8961=IKcos(j4);
IkReal x8962=IKsin(j4);
IkReal x8963=((1.0)*x8961);
IkReal x8964=(gconst1*x8961);
IkReal x8965=(gconst1*x8962);
IkReal x8966=((1.0)*gconst2*x8962);
evalcond[0]=(((r11*x8964))+(((-1.0)*gconst2*r10*x8963))+((r12*x8962)));
evalcond[1]=((((-1.0)*r22*x8963))+(((-1.0)*r20*x8966))+((r21*x8965)));
evalcond[2]=((((-1.0)*r00*x8966))+((r01*x8965))+(((-1.0)*r02*x8963)));
evalcond[3]=((1.0)+((r11*x8965))+(((-1.0)*r10*x8966))+(((-1.0)*r12*x8963)));
evalcond[4]=(((cj2*sj1))+((r22*x8962))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8963))+((r21*x8964)));
evalcond[5]=(((r02*x8962))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8964))+(((-1.0)*gconst2*r00*x8963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8967=((1.0)*gconst2);
CheckValue<IkReal> x8968=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8967))+(((-1.0)*gconst1*r00)))),-1);
if(!x8968.valid){
continue;
}
CheckValue<IkReal> x8969 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8968.value)))+(x8969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8970=IKcos(j4);
IkReal x8971=IKsin(j4);
IkReal x8972=((1.0)*x8970);
IkReal x8973=(gconst1*x8970);
IkReal x8974=(gconst1*x8971);
IkReal x8975=((1.0)*gconst2*x8971);
evalcond[0]=(((r11*x8973))+((r12*x8971))+(((-1.0)*gconst2*r10*x8972)));
evalcond[1]=(((r21*x8974))+(((-1.0)*r22*x8972))+(((-1.0)*r20*x8975)));
evalcond[2]=(((r01*x8974))+(((-1.0)*r02*x8972))+(((-1.0)*r00*x8975)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8975))+((r11*x8974))+(((-1.0)*r12*x8972)));
evalcond[4]=(((r21*x8973))+((cj2*sj1))+(((-1.0)*gconst2*r20*x8972))+((cj1*sj2))+((r22*x8971)));
evalcond[5]=(((r01*x8973))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8972))+((r02*x8971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8976=((-1.0)*r20);
IkReal x8977=x8882;
CheckValue<IkReal> x8979 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8976),IKFAST_ATAN2_MAGTHRESH);
if(!x8979.valid){
continue;
}
IkReal x8978=((-1.0)*(x8979.value));
sj5=gconst1;
cj5=gconst2;
j5=x8978;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8978;
IkReal gconst1=(r21*x8977);
IkReal gconst2=(x8976*x8977);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8980=((-1.0)*r20);
IkReal x8981=x8882;
CheckValue<IkReal> x8983 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8980),IKFAST_ATAN2_MAGTHRESH);
if(!x8983.valid){
continue;
}
IkReal x8982=((-1.0)*(x8983.value));
sj5=gconst1;
cj5=gconst2;
j5=x8982;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8982;
IkReal gconst1=(r21*x8981);
IkReal gconst2=(x8980*x8981);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8984=((-1.0)*r20);
IkReal x8985=x8882;
CheckValue<IkReal> x8987 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8984),IKFAST_ATAN2_MAGTHRESH);
if(!x8987.valid){
continue;
}
IkReal x8986=((-1.0)*(x8987.value));
sj5=gconst1;
cj5=gconst2;
j5=x8986;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8986;
IkReal gconst1=(r21*x8985);
IkReal gconst2=(x8984*x8985);
IkReal x8988=r22*r22;
IkReal x8989=(cj1*r12*sj2);
IkReal x8990=(cj2*r12*sj1);
CheckValue<IkReal> x8994=IKPowWithIntegerCheck(((-1.0)+x8988),-1);
if(!x8994.valid){
continue;
}
IkReal x8991=x8994.value;
if((((1.0)+(((-1.0)*x8988)))) < -0.00001)
continue;
IkReal x8992=IKsqrt(((1.0)+(((-1.0)*x8988))));
IkReal x8993=(r22*x8991*x8992);
j4eval[0]=((IKabs(((((-1.0)*x8989))+(((-1.0)*x8990)))))+(IKabs((((x8990*x8993))+((x8989*x8993))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8995=(cj1*sj2);
IkReal x8996=(cj2*sj1);
IkReal x8997=((1.0)*r12);
IkReal x8998=(gconst1*r11);
IkReal x8999=((1.0)*gconst2*r10);
CheckValue<IkReal> x9000 = IKatan2WithCheck(IkReal(((((-1.0)*x8995*x8999))+((x8995*x8998))+((x8996*x8998))+(((-1.0)*x8996*x8999)))),IkReal(((((-1.0)*x8995*x8997))+(((-1.0)*x8996*x8997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9000.valid){
continue;
}
CheckValue<IkReal> x9001=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9000.value)+(((1.5707963267949)*(x9001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9002=IKcos(j4);
IkReal x9003=IKsin(j4);
IkReal x9004=((1.0)*x9002);
IkReal x9005=(gconst1*x9002);
IkReal x9006=(gconst1*x9003);
IkReal x9007=((1.0)*gconst2*x9003);
evalcond[0]=((((-1.0)*gconst2*r10*x9004))+((r11*x9005))+((r12*x9003)));
evalcond[1]=((((-1.0)*r22*x9004))+((r21*x9006))+(((-1.0)*r20*x9007)));
evalcond[2]=((((-1.0)*r02*x9004))+(((-1.0)*r00*x9007))+((r01*x9006)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9004))+(((-1.0)*r10*x9007))+((r11*x9006)));
evalcond[4]=(((cj2*sj1))+((r21*x9005))+((r22*x9003))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9004)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9003))+(((-1.0)*gconst2*r00*x9004))+((cj1*cj2))+((r01*x9005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9008=(gconst1*r11);
IkReal x9009=(gconst2*r10);
CheckValue<IkReal> x9010=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9008*x9008)+(((-2.0)*x9008*x9009))+(x9009*x9009))),-1);
if(!x9010.valid){
continue;
}
CheckValue<IkReal> x9011 = IKatan2WithCheck(IkReal(((((-1.0)*x9009))+x9008)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9010.value)))+(x9011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9012=IKcos(j4);
IkReal x9013=IKsin(j4);
IkReal x9014=((1.0)*x9012);
IkReal x9015=(gconst1*x9012);
IkReal x9016=(gconst1*x9013);
IkReal x9017=((1.0)*gconst2*x9013);
evalcond[0]=(((r12*x9013))+(((-1.0)*gconst2*r10*x9014))+((r11*x9015)));
evalcond[1]=((((-1.0)*r22*x9014))+(((-1.0)*r20*x9017))+((r21*x9016)));
evalcond[2]=((((-1.0)*r00*x9017))+(((-1.0)*r02*x9014))+((r01*x9016)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9017))+(((-1.0)*r12*x9014))+((r11*x9016)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9014))+((cj1*sj2))+((r22*x9013))+((r21*x9015)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9013))+((cj1*cj2))+((r01*x9015))+(((-1.0)*gconst2*r00*x9014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9018 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9018.valid){
continue;
}
CheckValue<IkReal> x9019=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9018.value)+(((1.5707963267949)*(x9019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9020=IKcos(j4);
IkReal x9021=IKsin(j4);
IkReal x9022=((1.0)*x9020);
IkReal x9023=(gconst1*x9020);
IkReal x9024=(gconst1*x9021);
IkReal x9025=((1.0)*gconst2*x9021);
evalcond[0]=((((-1.0)*gconst2*r10*x9022))+((r11*x9023))+((r12*x9021)));
evalcond[1]=(((r21*x9024))+(((-1.0)*r20*x9025))+(((-1.0)*r22*x9022)));
evalcond[2]=(((r01*x9024))+(((-1.0)*r02*x9022))+(((-1.0)*r00*x9025)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9022))+((r11*x9024))+(((-1.0)*r10*x9025)));
evalcond[4]=((((-1.0)*gconst2*r20*x9022))+((cj2*sj1))+((cj1*sj2))+((r21*x9023))+((r22*x9021)));
evalcond[5]=((((-1.0)*gconst2*r00*x9022))+((r01*x9023))+(((-1.0)*sj1*sj2))+((r02*x9021))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9026=((-1.0)*r20);
IkReal x9027=x8882;
CheckValue<IkReal> x9029 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9026),IKFAST_ATAN2_MAGTHRESH);
if(!x9029.valid){
continue;
}
IkReal x9028=((-1.0)*(x9029.value));
sj5=gconst1;
cj5=gconst2;
j5=x9028;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9028;
IkReal gconst1=(r21*x9027);
IkReal gconst2=(x9026*x9027);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9030=((-1.0)*r20);
IkReal x9031=x8882;
CheckValue<IkReal> x9033 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9030),IKFAST_ATAN2_MAGTHRESH);
if(!x9033.valid){
continue;
}
IkReal x9032=((-1.0)*(x9033.value));
sj5=gconst1;
cj5=gconst2;
j5=x9032;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9032;
IkReal gconst1=(r21*x9031);
IkReal gconst2=(x9030*x9031);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9034=((-1.0)*r20);
IkReal x9035=x8882;
CheckValue<IkReal> x9037 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9034),IKFAST_ATAN2_MAGTHRESH);
if(!x9037.valid){
continue;
}
IkReal x9036=((-1.0)*(x9037.value));
sj5=gconst1;
cj5=gconst2;
j5=x9036;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9036;
IkReal gconst1=(r21*x9035);
IkReal gconst2=(x9034*x9035);
IkReal x9038=r22*r22;
IkReal x9039=((1.0)*r02);
IkReal x9040=(cj1*sj2);
IkReal x9041=(cj2*sj1);
CheckValue<IkReal> x9045=IKPowWithIntegerCheck(((-1.0)+x9038),-1);
if(!x9045.valid){
continue;
}
IkReal x9042=x9045.value;
if((((1.0)+(((-1.0)*x9038)))) < -0.00001)
continue;
IkReal x9043=IKsqrt(((1.0)+(((-1.0)*x9038))));
IkReal x9044=(r02*r22*x9042*x9043);
j4eval[0]=((IKabs((((x9040*x9044))+((x9041*x9044)))))+(IKabs(((((-1.0)*x9039*x9041))+(((-1.0)*x9039*x9040))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9046=(cj1*sj2);
IkReal x9047=(gconst1*r01);
IkReal x9048=((1.0)*r02);
IkReal x9049=(cj2*sj1);
IkReal x9050=((1.0)*gconst2*r00);
CheckValue<IkReal> x9051 = IKatan2WithCheck(IkReal(((((-1.0)*x9049*x9050))+(((-1.0)*x9046*x9050))+((x9046*x9047))+((x9047*x9049)))),IkReal(((((-1.0)*x9046*x9048))+(((-1.0)*x9048*x9049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9051.valid){
continue;
}
CheckValue<IkReal> x9052=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9051.value)+(((1.5707963267949)*(x9052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9053=IKcos(j4);
IkReal x9054=IKsin(j4);
IkReal x9055=((1.0)*x9053);
IkReal x9056=(gconst1*x9053);
IkReal x9057=(gconst1*x9054);
IkReal x9058=((1.0)*gconst2*x9054);
evalcond[0]=(((r01*x9056))+(((-1.0)*gconst2*r00*x9055))+((r02*x9054)));
evalcond[1]=((((-1.0)*r22*x9055))+(((-1.0)*r20*x9058))+((r21*x9057)));
evalcond[2]=((((-1.0)*r12*x9055))+(((-1.0)*r10*x9058))+((r11*x9057)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9055))+(((-1.0)*r00*x9058))+((r01*x9057)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9054))+(((-1.0)*gconst2*r20*x9055))+((r21*x9056)));
evalcond[5]=((((-1.0)*gconst2*r10*x9055))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9054))+((r11*x9056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9059=(gconst1*r01);
IkReal x9060=(gconst2*r00);
CheckValue<IkReal> x9061 = IKatan2WithCheck(IkReal((x9059+(((-1.0)*x9060)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9061.valid){
continue;
}
CheckValue<IkReal> x9062=IKPowWithIntegerCheck(IKsign(((x9060*x9060)+(((-2.0)*x9059*x9060))+(r02*r02)+(x9059*x9059))),-1);
if(!x9062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9061.value)+(((1.5707963267949)*(x9062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9063=IKcos(j4);
IkReal x9064=IKsin(j4);
IkReal x9065=((1.0)*x9063);
IkReal x9066=(gconst1*x9063);
IkReal x9067=(gconst1*x9064);
IkReal x9068=((1.0)*gconst2*x9064);
evalcond[0]=(((r01*x9066))+(((-1.0)*gconst2*r00*x9065))+((r02*x9064)));
evalcond[1]=((((-1.0)*r20*x9068))+((r21*x9067))+(((-1.0)*r22*x9065)));
evalcond[2]=(((r11*x9067))+(((-1.0)*r10*x9068))+(((-1.0)*r12*x9065)));
evalcond[3]=((-1.0)+((r01*x9067))+(((-1.0)*r02*x9065))+(((-1.0)*r00*x9068)));
evalcond[4]=(((cj2*sj1))+((r22*x9064))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9065))+((r21*x9066)));
evalcond[5]=(((r11*x9066))+((r12*x9064))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9069=((1.0)*gconst2);
CheckValue<IkReal> x9070=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9069)))),-1);
if(!x9070.valid){
continue;
}
CheckValue<IkReal> x9071 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9069))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9070.value)))+(x9071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9072=IKcos(j4);
IkReal x9073=IKsin(j4);
IkReal x9074=((1.0)*x9072);
IkReal x9075=(gconst1*x9072);
IkReal x9076=(gconst1*x9073);
IkReal x9077=((1.0)*gconst2*x9073);
evalcond[0]=((((-1.0)*gconst2*r00*x9074))+((r01*x9075))+((r02*x9073)));
evalcond[1]=(((r21*x9076))+(((-1.0)*r22*x9074))+(((-1.0)*r20*x9077)));
evalcond[2]=((((-1.0)*r12*x9074))+((r11*x9076))+(((-1.0)*r10*x9077)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9074))+(((-1.0)*r00*x9077))+((r01*x9076)));
evalcond[4]=(((cj2*sj1))+((r21*x9075))+((cj1*sj2))+((r22*x9073))+(((-1.0)*gconst2*r20*x9074)));
evalcond[5]=((((-1.0)*gconst2*r10*x9074))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x9075))+((r12*x9073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9078=((-1.0)*r20);
IkReal x9079=x8882;
CheckValue<IkReal> x9081 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9078),IKFAST_ATAN2_MAGTHRESH);
if(!x9081.valid){
continue;
}
IkReal x9080=((-1.0)*(x9081.value));
sj5=gconst1;
cj5=gconst2;
j5=x9080;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9080;
IkReal gconst1=(r21*x9079);
IkReal gconst2=(x9078*x9079);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9082=((-1.0)*r20);
IkReal x9083=x8882;
CheckValue<IkReal> x9085 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9082),IKFAST_ATAN2_MAGTHRESH);
if(!x9085.valid){
continue;
}
IkReal x9084=((-1.0)*(x9085.value));
sj5=gconst1;
cj5=gconst2;
j5=x9084;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9084;
IkReal gconst1=(r21*x9083);
IkReal gconst2=(x9082*x9083);
IkReal x9086=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9090=IKPowWithIntegerCheck(x9086,-1);
if(!x9090.valid){
continue;
}
IkReal x9087=x9090.value;
IkReal x9088=((1.0)*x9087);
IkReal x9089=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9087))+(((-1.0)*x9088*(r00*r00)*(r20*r20)))+(((-1.0)*x9088*(r01*r01)*(r21*r21))));
j4eval[0]=x9089;
j4eval[1]=IKsign(x9089);
j4eval[2]=r02;
j4eval[3]=x9086;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9091=((-1.0)*r20);
IkReal x9092=x8882;
CheckValue<IkReal> x9094 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9091),IKFAST_ATAN2_MAGTHRESH);
if(!x9094.valid){
continue;
}
IkReal x9093=((-1.0)*(x9094.value));
sj5=gconst1;
cj5=gconst2;
j5=x9093;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9093;
IkReal gconst1=(r21*x9092);
IkReal gconst2=(x9091*x9092);
IkReal x9095=r22*r22;
IkReal x9096=((1.0)*r02);
IkReal x9097=(cj1*sj2);
IkReal x9098=(cj2*sj1);
CheckValue<IkReal> x9102=IKPowWithIntegerCheck(((-1.0)+x9095),-1);
if(!x9102.valid){
continue;
}
IkReal x9099=x9102.value;
if((((1.0)+(((-1.0)*x9095)))) < -0.00001)
continue;
IkReal x9100=IKsqrt(((1.0)+(((-1.0)*x9095))));
IkReal x9101=(r02*r22*x9099*x9100);
j4eval[0]=((IKabs((((x9098*x9101))+((x9097*x9101)))))+(IKabs(((((-1.0)*x9096*x9097))+(((-1.0)*x9096*x9098))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9103=(cj1*sj2);
IkReal x9104=(gconst1*r01);
IkReal x9105=((1.0)*r02);
IkReal x9106=(cj2*sj1);
IkReal x9107=((1.0)*gconst2*r00);
CheckValue<IkReal> x9108 = IKatan2WithCheck(IkReal(((((-1.0)*x9103*x9107))+(((-1.0)*x9106*x9107))+((x9104*x9106))+((x9103*x9104)))),IkReal(((((-1.0)*x9103*x9105))+(((-1.0)*x9105*x9106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9108.valid){
continue;
}
CheckValue<IkReal> x9109=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9108.value)+(((1.5707963267949)*(x9109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9110=IKcos(j4);
IkReal x9111=IKsin(j4);
IkReal x9112=((1.0)*x9110);
IkReal x9113=(gconst1*x9110);
IkReal x9114=(gconst1*x9111);
IkReal x9115=((1.0)*gconst2*x9111);
evalcond[0]=((((-1.0)*gconst2*r00*x9112))+((r01*x9113))+((r02*x9111)));
evalcond[1]=(((r21*x9114))+(((-1.0)*r22*x9112))+(((-1.0)*r20*x9115)));
evalcond[2]=((((-1.0)*r10*x9115))+((r11*x9114))+(((-1.0)*r12*x9112)));
evalcond[3]=((1.0)+((r01*x9114))+(((-1.0)*r02*x9112))+(((-1.0)*r00*x9115)));
evalcond[4]=(((r21*x9113))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9112))+((r22*x9111)));
evalcond[5]=(((r12*x9111))+(((-1.0)*sj1*sj2))+((r11*x9113))+(((-1.0)*gconst2*r10*x9112))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9116=(gconst1*r01);
IkReal x9117=(gconst2*r00);
CheckValue<IkReal> x9118=IKPowWithIntegerCheck(IKsign(((((2.0)*x9116*x9117))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9116*x9116)))+(((-1.0)*(x9117*x9117))))),-1);
if(!x9118.valid){
continue;
}
CheckValue<IkReal> x9119 = IKatan2WithCheck(IkReal((x9116+(((-1.0)*x9117)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9118.value)))+(x9119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9120=IKcos(j4);
IkReal x9121=IKsin(j4);
IkReal x9122=((1.0)*x9120);
IkReal x9123=(gconst1*x9120);
IkReal x9124=(gconst1*x9121);
IkReal x9125=((1.0)*gconst2*x9121);
evalcond[0]=((((-1.0)*gconst2*r00*x9122))+((r02*x9121))+((r01*x9123)));
evalcond[1]=((((-1.0)*r20*x9125))+(((-1.0)*r22*x9122))+((r21*x9124)));
evalcond[2]=((((-1.0)*r12*x9122))+(((-1.0)*r10*x9125))+((r11*x9124)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9122))+((r01*x9124))+(((-1.0)*r00*x9125)));
evalcond[4]=(((r22*x9121))+((cj2*sj1))+(((-1.0)*gconst2*r20*x9122))+((cj1*sj2))+((r21*x9123)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9122))+((cj1*cj2))+((r11*x9123))+((r12*x9121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9126 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9126.valid){
continue;
}
CheckValue<IkReal> x9127=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9126.value)+(((1.5707963267949)*(x9127.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9128=IKcos(j4);
IkReal x9129=IKsin(j4);
IkReal x9130=((1.0)*x9128);
IkReal x9131=(gconst1*x9128);
IkReal x9132=(gconst1*x9129);
IkReal x9133=((1.0)*gconst2*x9129);
evalcond[0]=(((r02*x9129))+(((-1.0)*gconst2*r00*x9130))+((r01*x9131)));
evalcond[1]=((((-1.0)*r22*x9130))+(((-1.0)*r20*x9133))+((r21*x9132)));
evalcond[2]=((((-1.0)*r12*x9130))+(((-1.0)*r10*x9133))+((r11*x9132)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9130))+(((-1.0)*r00*x9133))+((r01*x9132)));
evalcond[4]=(((r22*x9129))+((cj2*sj1))+((cj1*sj2))+((r21*x9131))+(((-1.0)*gconst2*r20*x9130)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9130))+((r11*x9131))+((cj1*cj2))+((r12*x9129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9134=((-1.0)*r20);
IkReal x9135=((-1.0)*px);
CheckValue<IkReal> x9137 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9134),IKFAST_ATAN2_MAGTHRESH);
if(!x9137.valid){
continue;
}
IkReal x9136=((-1.0)*(x9137.value));
sj5=gconst1;
cj5=gconst2;
j5=x9136;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9135);
rxp1_1=(px*r21);
rxp1_2=(r11*x9135);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9136;
IkReal gconst1=r21;
IkReal gconst2=x9134;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9138=((-1.0)*r20);
IkReal x9139=((-1.0)*px);
CheckValue<IkReal> x9141 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9138),IKFAST_ATAN2_MAGTHRESH);
if(!x9141.valid){
continue;
}
IkReal x9140=((-1.0)*(x9141.value));
sj5=gconst1;
cj5=gconst2;
j5=x9140;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9139);
rxp1_1=(px*r21);
rxp1_2=(r11*x9139);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9140;
IkReal gconst1=r21;
IkReal gconst2=x9138;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9142=((-1.0)*r20);
IkReal x9143=((-1.0)*px);
CheckValue<IkReal> x9145 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9142),IKFAST_ATAN2_MAGTHRESH);
if(!x9145.valid){
continue;
}
IkReal x9144=((-1.0)*(x9145.value));
sj5=gconst1;
cj5=gconst2;
j5=x9144;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9143);
rxp1_1=(px*r21);
rxp1_2=(r11*x9143);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9144;
IkReal gconst1=r21;
IkReal gconst2=x9142;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9148=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9148.valid){
continue;
}
IkReal x9146=x9148.value;
IkReal x9147=(sj0*x9146);
cj4array[0]=((((-1.0)*sj1*sj2*x9147))+((cj1*cj2*x9147)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9149=IKsin(j4);
IkReal x9150=IKcos(j4);
IkReal x9151=((1.0)*gconst2);
IkReal x9152=(gconst1*r21);
evalcond[0]=(r02*x9149);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9150)));
evalcond[2]=(((x9149*x9152))+(((-1.0)*r20*x9149*x9151)));
evalcond[3]=((((-1.0)*r10*x9149*x9151))+((gconst1*r11*x9149)));
evalcond[4]=(((cj2*sj1))+((x9150*x9152))+((cj1*sj2))+(((-1.0)*r20*x9150*x9151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9155=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9155.valid){
continue;
}
IkReal x9153=x9155.value;
IkReal x9154=((1.0)*x9153);
cj4array[0]=((((-1.0)*cj1*sj2*x9154))+(((-1.0)*cj2*sj1*x9154)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9156=IKsin(j4);
IkReal x9157=IKcos(j4);
IkReal x9158=((1.0)*sj0);
IkReal x9159=(gconst1*x9156);
IkReal x9160=((1.0)*x9157);
IkReal x9161=((1.0)*gconst2*x9156);
evalcond[0]=(r02*x9156);
evalcond[1]=((((-1.0)*r02*x9160))+(((-1.0)*x9158)));
evalcond[2]=((((-1.0)*r20*x9161))+((r21*x9159)));
evalcond[3]=(((r11*x9159))+(((-1.0)*r10*x9161)));
evalcond[4]=((((-1.0)*gconst2*r10*x9160))+((gconst1*r11*x9157))+(((-1.0)*cj1*cj2*x9158))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9162=IKPowWithIntegerCheck(r02,-1);
if(!x9162.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9162.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9163=IKsin(j4);
IkReal x9164=IKcos(j4);
IkReal x9165=(gconst1*r21);
IkReal x9166=(gconst1*r11);
IkReal x9167=((1.0)*gconst2*r10);
IkReal x9168=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9163);
evalcond[1]=((((-1.0)*x9163*x9168))+((x9163*x9165)));
evalcond[2]=((((-1.0)*x9163*x9167))+((x9163*x9166)));
evalcond[3]=(((cj2*sj1))+((x9164*x9165))+((cj1*sj2))+(((-1.0)*x9164*x9168)));
evalcond[4]=(((x9164*x9166))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9164*x9167))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9169=(cj2*sj1);
IkReal x9170=(cj1*sj2);
IkReal x9171=(gconst1*r21);
IkReal x9172=((1.0)*gconst2*r20);
CheckValue<IkReal> x9173 = IKatan2WithCheck(IkReal((((r22*x9169))+((r22*x9170)))),IkReal((((x9170*x9171))+((x9169*x9171))+(((-1.0)*x9169*x9172))+(((-1.0)*x9170*x9172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9173.valid){
continue;
}
CheckValue<IkReal> x9174=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9172))+(((-1.0)*(x9171*x9171)))+(((-1.0)*(r22*r22)))+(((2.0)*gconst2*r20*x9171)))),-1);
if(!x9174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9173.value)+(((1.5707963267949)*(x9174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9175=IKsin(j4);
IkReal x9176=IKcos(j4);
IkReal x9177=(sj1*sj2);
IkReal x9178=(gconst2*r10);
IkReal x9179=(gconst2*r00);
IkReal x9180=(gconst2*r20);
IkReal x9181=((1.0)*x9176);
IkReal x9182=(gconst1*x9176);
IkReal x9183=((1.0)*cj1*cj2);
IkReal x9184=(gconst1*x9175);
IkReal x9185=((1.0)*x9175);
evalcond[0]=((((-1.0)*r22*x9181))+((r21*x9184))+(((-1.0)*x9180*x9185)));
evalcond[1]=((((-1.0)*r12*x9181))+((r11*x9184))+cj0+(((-1.0)*x9178*x9185)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9181))+(((-1.0)*x9179*x9185))+((r01*x9184)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9182))+((r22*x9175))+(((-1.0)*x9180*x9181)));
evalcond[4]=(((r02*x9175))+(((-1.0)*x9179*x9181))+(((-1.0)*cj0*x9183))+((cj0*x9177))+((r01*x9182)));
evalcond[5]=(((r11*x9182))+((sj0*x9177))+((r12*x9175))+(((-1.0)*x9178*x9181))+(((-1.0)*sj0*x9183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9186=((1.0)*gconst2);
CheckValue<IkReal> x9187=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9186)))),-1);
if(!x9187.valid){
continue;
}
CheckValue<IkReal> x9188 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9186))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9187.value)))+(x9188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9189=IKsin(j4);
IkReal x9190=IKcos(j4);
IkReal x9191=(sj1*sj2);
IkReal x9192=(gconst2*r10);
IkReal x9193=(gconst2*r00);
IkReal x9194=(gconst2*r20);
IkReal x9195=((1.0)*x9190);
IkReal x9196=(gconst1*x9190);
IkReal x9197=((1.0)*cj1*cj2);
IkReal x9198=(gconst1*x9189);
IkReal x9199=((1.0)*x9189);
evalcond[0]=((((-1.0)*r22*x9195))+((r21*x9198))+(((-1.0)*x9194*x9199)));
evalcond[1]=(cj0+(((-1.0)*r12*x9195))+((r11*x9198))+(((-1.0)*x9192*x9199)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9198))+(((-1.0)*r02*x9195))+(((-1.0)*x9193*x9199)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9196))+(((-1.0)*x9194*x9195))+((r22*x9189)));
evalcond[4]=(((r01*x9196))+((r02*x9189))+(((-1.0)*cj0*x9197))+((cj0*x9191))+(((-1.0)*x9193*x9195)));
evalcond[5]=(((sj0*x9191))+((r12*x9189))+(((-1.0)*sj0*x9197))+((r11*x9196))+(((-1.0)*x9192*x9195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9200=((1.0)*gconst2);
CheckValue<IkReal> x9201=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9200)))),-1);
if(!x9201.valid){
continue;
}
CheckValue<IkReal> x9202 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9201.value)))+(x9202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9203=IKsin(j4);
IkReal x9204=IKcos(j4);
IkReal x9205=(sj1*sj2);
IkReal x9206=(gconst2*r10);
IkReal x9207=(gconst2*r00);
IkReal x9208=(gconst2*r20);
IkReal x9209=((1.0)*x9204);
IkReal x9210=(gconst1*x9204);
IkReal x9211=((1.0)*cj1*cj2);
IkReal x9212=(gconst1*x9203);
IkReal x9213=((1.0)*x9203);
evalcond[0]=((((-1.0)*x9208*x9213))+((r21*x9212))+(((-1.0)*r22*x9209)));
evalcond[1]=((((-1.0)*x9206*x9213))+cj0+(((-1.0)*r12*x9209))+((r11*x9212)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9209))+(((-1.0)*x9207*x9213))+((r01*x9212)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9208*x9209))+((r21*x9210))+((r22*x9203))+((cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x9211))+((r02*x9203))+((cj0*x9205))+(((-1.0)*x9207*x9209))+((r01*x9210)));
evalcond[5]=(((r11*x9210))+((r12*x9203))+(((-1.0)*sj0*x9211))+((sj0*x9205))+(((-1.0)*x9206*x9209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9214=((-1.0)*r20);
IkReal x9215=x8882;
CheckValue<IkReal> x9217 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9214),IKFAST_ATAN2_MAGTHRESH);
if(!x9217.valid){
continue;
}
IkReal x9216=((-1.0)*(x9217.value));
sj5=gconst1;
cj5=gconst2;
j5=x9216;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9216;
IkReal gconst1=(r21*x9215);
IkReal gconst2=(x9214*x9215);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9218=((-1.0)*r20);
IkReal x9219=x8882;
CheckValue<IkReal> x9221 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9218),IKFAST_ATAN2_MAGTHRESH);
if(!x9221.valid){
continue;
}
IkReal x9220=((-1.0)*(x9221.value));
sj5=gconst1;
cj5=gconst2;
j5=x9220;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9220;
IkReal gconst1=(r21*x9219);
IkReal gconst2=(x9218*x9219);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9222=((-1.0)*r20);
IkReal x9223=x8882;
CheckValue<IkReal> x9225 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9222),IKFAST_ATAN2_MAGTHRESH);
if(!x9225.valid){
continue;
}
IkReal x9224=((-1.0)*(x9225.value));
sj5=gconst1;
cj5=gconst2;
j5=x9224;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9224;
IkReal gconst1=(r21*x9223);
IkReal gconst2=(x9222*x9223);
IkReal x9226=r22*r22;
CheckValue<IkReal> x9229=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9226))),-1);
if(!x9229.valid){
continue;
}
IkReal x9227=x9229.value;
IkReal x9228=(x9226+((x9227*(r20*r20*r20*r20)))+((x9227*(r21*r21*r21*r21)))+(((2.0)*x9227*(r20*r20)*(r21*r21))));
j4eval[0]=x9228;
j4eval[1]=IKsign(x9228);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9230=((-1.0)*r20);
IkReal x9231=x8882;
CheckValue<IkReal> x9233 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9230),IKFAST_ATAN2_MAGTHRESH);
if(!x9233.valid){
continue;
}
IkReal x9232=((-1.0)*(x9233.value));
sj5=gconst1;
cj5=gconst2;
j5=x9232;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9232;
IkReal gconst1=(r21*x9231);
IkReal gconst2=(x9230*x9231);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9234=((-1.0)*r20);
IkReal x9235=x8882;
CheckValue<IkReal> x9237 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9234),IKFAST_ATAN2_MAGTHRESH);
if(!x9237.valid){
continue;
}
IkReal x9236=((-1.0)*(x9237.value));
sj5=gconst1;
cj5=gconst2;
j5=x9236;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9236;
IkReal gconst1=(r21*x9235);
IkReal gconst2=(x9234*x9235);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9238=((-1.0)*r20);
IkReal x9239=x8882;
CheckValue<IkReal> x9241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9238),IKFAST_ATAN2_MAGTHRESH);
if(!x9241.valid){
continue;
}
IkReal x9240=((-1.0)*(x9241.value));
sj5=gconst1;
cj5=gconst2;
j5=x9240;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9240;
IkReal gconst1=(r21*x9239);
IkReal gconst2=(x9238*x9239);
IkReal x9242=r22*r22;
IkReal x9243=(cj1*r12*sj2);
IkReal x9244=(cj2*r12*sj1);
CheckValue<IkReal> x9248=IKPowWithIntegerCheck(((-1.0)+x9242),-1);
if(!x9248.valid){
continue;
}
IkReal x9245=x9248.value;
if((((1.0)+(((-1.0)*x9242)))) < -0.00001)
continue;
IkReal x9246=IKsqrt(((1.0)+(((-1.0)*x9242))));
IkReal x9247=((1.0)*r22*x9245*x9246);
j4eval[0]=((IKabs(((((-1.0)*x9244*x9247))+(((-1.0)*x9243*x9247)))))+(IKabs((x9243+x9244))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9249=((1.0)*gconst1);
IkReal x9250=(cj2*sj1);
IkReal x9251=(gconst2*r10);
IkReal x9252=(cj1*sj2);
CheckValue<IkReal> x9253=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9249)))),-1);
if(!x9253.valid){
continue;
}
CheckValue<IkReal> x9254 = IKatan2WithCheck(IkReal((((x9250*x9251))+((x9251*x9252))+(((-1.0)*r11*x9249*x9252))+(((-1.0)*r11*x9249*x9250)))),IkReal((((r12*x9252))+((r12*x9250)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9253.value)))+(x9254.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9255=IKsin(j4);
IkReal x9256=IKcos(j4);
IkReal x9257=((1.0)*x9256);
IkReal x9258=(gconst2*x9256);
IkReal x9259=(gconst1*x9255);
IkReal x9260=((1.0)*x9255);
evalcond[0]=((((-1.0)*gconst2*r20*x9260))+(((-1.0)*r22*x9257))+((r21*x9259)));
evalcond[1]=((((-1.0)*gconst2*r00*x9260))+((r01*x9259))+(((-1.0)*r02*x9257)));
evalcond[2]=(((r10*x9258))+(((-1.0)*r12*x9260))+(((-1.0)*gconst1*r11*x9257)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9257))+((r11*x9259))+(((-1.0)*gconst2*r10*x9260)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9260))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9257))+((r20*x9258)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9260))+((r00*x9258))+(((-1.0)*gconst1*r01*x9257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9261=(gconst1*r11);
IkReal x9262=(gconst2*r10);
CheckValue<IkReal> x9263=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9261*x9262))+(x9261*x9261)+(x9262*x9262))),-1);
if(!x9263.valid){
continue;
}
CheckValue<IkReal> x9264 = IKatan2WithCheck(IkReal((x9262+(((-1.0)*x9261)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9263.value)))+(x9264.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9265=IKsin(j4);
IkReal x9266=IKcos(j4);
IkReal x9267=((1.0)*x9266);
IkReal x9268=(gconst2*x9266);
IkReal x9269=(gconst1*x9265);
IkReal x9270=((1.0)*x9265);
evalcond[0]=((((-1.0)*gconst2*r20*x9270))+(((-1.0)*r22*x9267))+((r21*x9269)));
evalcond[1]=((((-1.0)*gconst2*r00*x9270))+((r01*x9269))+(((-1.0)*r02*x9267)));
evalcond[2]=((((-1.0)*gconst1*r11*x9267))+((r10*x9268))+(((-1.0)*r12*x9270)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9270))+(((-1.0)*r12*x9267))+((r11*x9269)));
evalcond[4]=((((-1.0)*gconst1*r21*x9267))+((cj2*sj1))+(((-1.0)*r22*x9270))+((cj1*sj2))+((r20*x9268)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9267))+((r00*x9268))+(((-1.0)*r02*x9270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9271=((1.0)*gconst2);
CheckValue<IkReal> x9272 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9271))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9272.valid){
continue;
}
CheckValue<IkReal> x9273=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9271)))),-1);
if(!x9273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9272.value)+(((1.5707963267949)*(x9273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9274=IKsin(j4);
IkReal x9275=IKcos(j4);
IkReal x9276=((1.0)*x9275);
IkReal x9277=(gconst2*x9275);
IkReal x9278=(gconst1*x9274);
IkReal x9279=((1.0)*x9274);
evalcond[0]=((((-1.0)*gconst2*r20*x9279))+(((-1.0)*r22*x9276))+((r21*x9278)));
evalcond[1]=((((-1.0)*gconst2*r00*x9279))+((r01*x9278))+(((-1.0)*r02*x9276)));
evalcond[2]=((((-1.0)*gconst1*r11*x9276))+((r10*x9277))+(((-1.0)*r12*x9279)));
evalcond[3]=((1.0)+((r11*x9278))+(((-1.0)*r12*x9276))+(((-1.0)*gconst2*r10*x9279)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9276))+(((-1.0)*r22*x9279))+((cj1*sj2))+((r20*x9277)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9276))+((r00*x9277))+(((-1.0)*r02*x9279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9280=((-1.0)*r20);
IkReal x9281=x8882;
CheckValue<IkReal> x9283 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9280),IKFAST_ATAN2_MAGTHRESH);
if(!x9283.valid){
continue;
}
IkReal x9282=((-1.0)*(x9283.value));
sj5=gconst1;
cj5=gconst2;
j5=x9282;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9282;
IkReal gconst1=(r21*x9281);
IkReal gconst2=(x9280*x9281);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9284=((-1.0)*r20);
IkReal x9285=x8882;
CheckValue<IkReal> x9287 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9284),IKFAST_ATAN2_MAGTHRESH);
if(!x9287.valid){
continue;
}
IkReal x9286=((-1.0)*(x9287.value));
sj5=gconst1;
cj5=gconst2;
j5=x9286;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9286;
IkReal gconst1=(r21*x9285);
IkReal gconst2=(x9284*x9285);
IkReal x9288=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9292=IKPowWithIntegerCheck(x9288,-1);
if(!x9292.valid){
continue;
}
IkReal x9289=x9292.value;
IkReal x9290=((1.0)*x9289);
IkReal x9291=((((-1.0)*x9290*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9290*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9289)));
j4eval[0]=x9291;
j4eval[1]=r12;
j4eval[2]=x9288;
j4eval[3]=IKsign(x9291);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9293=((-1.0)*r20);
IkReal x9294=x8882;
CheckValue<IkReal> x9296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9293),IKFAST_ATAN2_MAGTHRESH);
if(!x9296.valid){
continue;
}
IkReal x9295=((-1.0)*(x9296.value));
sj5=gconst1;
cj5=gconst2;
j5=x9295;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9295;
IkReal gconst1=(r21*x9294);
IkReal gconst2=(x9293*x9294);
IkReal x9297=r22*r22;
IkReal x9298=(cj1*r12*sj2);
IkReal x9299=(cj2*r12*sj1);
CheckValue<IkReal> x9303=IKPowWithIntegerCheck(((-1.0)+x9297),-1);
if(!x9303.valid){
continue;
}
IkReal x9300=x9303.value;
if((((1.0)+(((-1.0)*x9297)))) < -0.00001)
continue;
IkReal x9301=IKsqrt(((1.0)+(((-1.0)*x9297))));
IkReal x9302=((1.0)*r22*x9300*x9301);
j4eval[0]=((IKabs((x9298+x9299)))+(IKabs(((((-1.0)*x9299*x9302))+(((-1.0)*x9298*x9302))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9304=((1.0)*gconst1);
IkReal x9305=(cj2*sj1);
IkReal x9306=(gconst2*r10);
IkReal x9307=(cj1*sj2);
CheckValue<IkReal> x9308 = IKatan2WithCheck(IkReal((((x9305*x9306))+(((-1.0)*r11*x9304*x9305))+(((-1.0)*r11*x9304*x9307))+((x9306*x9307)))),IkReal((((r12*x9305))+((r12*x9307)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9308.valid){
continue;
}
CheckValue<IkReal> x9309=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9304))+(((-1.0)*gconst2*r01)))),-1);
if(!x9309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9308.value)+(((1.5707963267949)*(x9309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9310=IKsin(j4);
IkReal x9311=IKcos(j4);
IkReal x9312=((1.0)*x9311);
IkReal x9313=(gconst2*x9311);
IkReal x9314=(gconst1*x9310);
IkReal x9315=((1.0)*x9310);
evalcond[0]=(((r21*x9314))+(((-1.0)*r22*x9312))+(((-1.0)*gconst2*r20*x9315)));
evalcond[1]=((((-1.0)*gconst2*r00*x9315))+((r01*x9314))+(((-1.0)*r02*x9312)));
evalcond[2]=((((-1.0)*gconst1*r11*x9312))+((r10*x9313))+(((-1.0)*r12*x9315)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9315))+((r11*x9314))+(((-1.0)*r12*x9312)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9312))+((cj1*sj2))+((r20*x9313))+(((-1.0)*r22*x9315)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9312))+(((-1.0)*r02*x9315))+((r00*x9313))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9316=(gconst1*r11);
IkReal x9317=(gconst2*r10);
CheckValue<IkReal> x9318 = IKatan2WithCheck(IkReal((x9317+(((-1.0)*x9316)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9318.valid){
continue;
}
CheckValue<IkReal> x9319=IKPowWithIntegerCheck(IKsign(((((2.0)*x9316*x9317))+(((-1.0)*(x9316*x9316)))+(((-1.0)*(x9317*x9317)))+(((-1.0)*(r12*r12))))),-1);
if(!x9319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9318.value)+(((1.5707963267949)*(x9319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9320=IKsin(j4);
IkReal x9321=IKcos(j4);
IkReal x9322=((1.0)*x9321);
IkReal x9323=(gconst2*x9321);
IkReal x9324=(gconst1*x9320);
IkReal x9325=((1.0)*x9320);
evalcond[0]=((((-1.0)*r22*x9322))+(((-1.0)*gconst2*r20*x9325))+((r21*x9324)));
evalcond[1]=((((-1.0)*r02*x9322))+((r01*x9324))+(((-1.0)*gconst2*r00*x9325)));
evalcond[2]=((((-1.0)*r12*x9325))+((r10*x9323))+(((-1.0)*gconst1*r11*x9322)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9322))+(((-1.0)*gconst2*r10*x9325))+((r11*x9324)));
evalcond[4]=(((cj2*sj1))+((r20*x9323))+(((-1.0)*r22*x9325))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9322)));
evalcond[5]=((((-1.0)*gconst1*r01*x9322))+(((-1.0)*r02*x9325))+((r00*x9323))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9326 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9326.valid){
continue;
}
CheckValue<IkReal> x9327=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9326.value)+(((1.5707963267949)*(x9327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9328=IKsin(j4);
IkReal x9329=IKcos(j4);
IkReal x9330=((1.0)*x9329);
IkReal x9331=(gconst2*x9329);
IkReal x9332=(gconst1*x9328);
IkReal x9333=((1.0)*x9328);
evalcond[0]=((((-1.0)*r22*x9330))+(((-1.0)*gconst2*r20*x9333))+((r21*x9332)));
evalcond[1]=((((-1.0)*r02*x9330))+((r01*x9332))+(((-1.0)*gconst2*r00*x9333)));
evalcond[2]=((((-1.0)*r12*x9333))+((r10*x9331))+(((-1.0)*gconst1*r11*x9330)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9333))+(((-1.0)*r12*x9330))+((r11*x9332)));
evalcond[4]=(((cj2*sj1))+((r20*x9331))+(((-1.0)*r22*x9333))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9330)));
evalcond[5]=((((-1.0)*r02*x9333))+((r00*x9331))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst1*r01*x9330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9334=((-1.0)*r20);
IkReal x9335=x8882;
CheckValue<IkReal> x9337 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9334),IKFAST_ATAN2_MAGTHRESH);
if(!x9337.valid){
continue;
}
IkReal x9336=((-1.0)*(x9337.value));
sj5=gconst1;
cj5=gconst2;
j5=x9336;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9336;
IkReal gconst1=(r21*x9335);
IkReal gconst2=(x9334*x9335);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9338=((-1.0)*r20);
IkReal x9339=x8882;
CheckValue<IkReal> x9341 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9338),IKFAST_ATAN2_MAGTHRESH);
if(!x9341.valid){
continue;
}
IkReal x9340=((-1.0)*(x9341.value));
sj5=gconst1;
cj5=gconst2;
j5=x9340;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9340;
IkReal gconst1=(r21*x9339);
IkReal gconst2=(x9338*x9339);
IkReal x9342=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9346=IKPowWithIntegerCheck(x9342,-1);
if(!x9346.valid){
continue;
}
IkReal x9343=x9346.value;
IkReal x9344=((1.0)*x9343);
IkReal x9345=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9343))+(((-1.0)*x9344*(r00*r00)*(r20*r20)))+(((-1.0)*x9344*(r01*r01)*(r21*r21))));
j4eval[0]=x9345;
j4eval[1]=IKsign(x9345);
j4eval[2]=r02;
j4eval[3]=x9342;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9347=((-1.0)*r20);
IkReal x9348=x8882;
CheckValue<IkReal> x9350 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9347),IKFAST_ATAN2_MAGTHRESH);
if(!x9350.valid){
continue;
}
IkReal x9349=((-1.0)*(x9350.value));
sj5=gconst1;
cj5=gconst2;
j5=x9349;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9349;
IkReal gconst1=(r21*x9348);
IkReal gconst2=(x9347*x9348);
IkReal x9351=r22*r22;
IkReal x9352=(cj1*r02*sj2);
IkReal x9353=(cj2*r02*sj1);
CheckValue<IkReal> x9357=IKPowWithIntegerCheck(((-1.0)+x9351),-1);
if(!x9357.valid){
continue;
}
IkReal x9354=x9357.value;
if((((1.0)+(((-1.0)*x9351)))) < -0.00001)
continue;
IkReal x9355=IKsqrt(((1.0)+(((-1.0)*x9351))));
IkReal x9356=((1.0)*r22*x9354*x9355);
j4eval[0]=((IKabs(((((-1.0)*x9353*x9356))+(((-1.0)*x9352*x9356)))))+(IKabs((x9353+x9352))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9358=(cj2*sj1);
IkReal x9359=(cj1*sj2);
IkReal x9360=(gconst2*r00);
IkReal x9361=((1.0)*gconst1*r01);
CheckValue<IkReal> x9362 = IKatan2WithCheck(IkReal(((((-1.0)*x9358*x9361))+(((-1.0)*x9359*x9361))+((x9359*x9360))+((x9358*x9360)))),IkReal((((r02*x9359))+((r02*x9358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9362.valid){
continue;
}
CheckValue<IkReal> x9363=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9362.value)+(((1.5707963267949)*(x9363.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9364=IKsin(j4);
IkReal x9365=IKcos(j4);
IkReal x9366=(gconst1*r11);
IkReal x9367=(gconst1*r21);
IkReal x9368=(gconst1*r01);
IkReal x9369=((1.0)*x9365);
IkReal x9370=(gconst2*x9365);
IkReal x9371=((1.0)*x9364);
evalcond[0]=(((x9364*x9367))+(((-1.0)*gconst2*r20*x9371))+(((-1.0)*r22*x9369)));
evalcond[1]=(((x9364*x9366))+(((-1.0)*gconst2*r10*x9371))+(((-1.0)*r12*x9369)));
evalcond[2]=((((-1.0)*r02*x9371))+(((-1.0)*x9368*x9369))+((r00*x9370)));
evalcond[3]=((-1.0)+((x9364*x9368))+(((-1.0)*r02*x9369))+(((-1.0)*gconst2*r00*x9371)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9367*x9369))+(((-1.0)*r22*x9371))+((r20*x9370)));
evalcond[5]=((((-1.0)*x9366*x9369))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9371))+((r10*x9370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9372=(gconst2*r00);
IkReal x9373=(gconst1*r01);
CheckValue<IkReal> x9374=IKPowWithIntegerCheck(IKsign(((((2.0)*x9372*x9373))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9372*x9372)))+(((-1.0)*(x9373*x9373))))),-1);
if(!x9374.valid){
continue;
}
CheckValue<IkReal> x9375 = IKatan2WithCheck(IkReal((x9372+(((-1.0)*x9373)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9374.value)))+(x9375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9376=IKsin(j4);
IkReal x9377=IKcos(j4);
IkReal x9378=(gconst1*r11);
IkReal x9379=(gconst1*r21);
IkReal x9380=(gconst1*r01);
IkReal x9381=((1.0)*x9377);
IkReal x9382=(gconst2*x9377);
IkReal x9383=((1.0)*x9376);
evalcond[0]=(((x9376*x9379))+(((-1.0)*gconst2*r20*x9383))+(((-1.0)*r22*x9381)));
evalcond[1]=(((x9376*x9378))+(((-1.0)*r12*x9381))+(((-1.0)*gconst2*r10*x9383)));
evalcond[2]=((((-1.0)*x9380*x9381))+(((-1.0)*r02*x9383))+((r00*x9382)));
evalcond[3]=((-1.0)+((x9376*x9380))+(((-1.0)*r02*x9381))+(((-1.0)*gconst2*r00*x9383)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9379*x9381))+(((-1.0)*r22*x9383))+((r20*x9382)));
evalcond[5]=(((r10*x9382))+(((-1.0)*x9378*x9381))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9384=((1.0)*gconst2);
CheckValue<IkReal> x9385 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9384))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9385.valid){
continue;
}
CheckValue<IkReal> x9386=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9384)))),-1);
if(!x9386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9385.value)+(((1.5707963267949)*(x9386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9387=IKsin(j4);
IkReal x9388=IKcos(j4);
IkReal x9389=(gconst1*r11);
IkReal x9390=(gconst1*r21);
IkReal x9391=(gconst1*r01);
IkReal x9392=((1.0)*x9388);
IkReal x9393=(gconst2*x9388);
IkReal x9394=((1.0)*x9387);
evalcond[0]=((((-1.0)*gconst2*r20*x9394))+(((-1.0)*r22*x9392))+((x9387*x9390)));
evalcond[1]=((((-1.0)*r12*x9392))+((x9387*x9389))+(((-1.0)*gconst2*r10*x9394)));
evalcond[2]=((((-1.0)*x9391*x9392))+(((-1.0)*r02*x9394))+((r00*x9393)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x9394))+((x9387*x9391))+(((-1.0)*r02*x9392)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9390*x9392))+((r20*x9393))+((cj1*sj2))+(((-1.0)*r22*x9394)));
evalcond[5]=((((-1.0)*r12*x9394))+((r10*x9393))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9389*x9392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9395=((-1.0)*r20);
IkReal x9396=x8882;
CheckValue<IkReal> x9398 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9395),IKFAST_ATAN2_MAGTHRESH);
if(!x9398.valid){
continue;
}
IkReal x9397=((-1.0)*(x9398.value));
sj5=gconst1;
cj5=gconst2;
j5=x9397;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9397;
IkReal gconst1=(r21*x9396);
IkReal gconst2=(x9395*x9396);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9399=((-1.0)*r20);
IkReal x9400=x8882;
CheckValue<IkReal> x9402 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9399),IKFAST_ATAN2_MAGTHRESH);
if(!x9402.valid){
continue;
}
IkReal x9401=((-1.0)*(x9402.value));
sj5=gconst1;
cj5=gconst2;
j5=x9401;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9401;
IkReal gconst1=(r21*x9400);
IkReal gconst2=(x9399*x9400);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9403=((-1.0)*r20);
IkReal x9404=x8882;
CheckValue<IkReal> x9406 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9403),IKFAST_ATAN2_MAGTHRESH);
if(!x9406.valid){
continue;
}
IkReal x9405=((-1.0)*(x9406.value));
sj5=gconst1;
cj5=gconst2;
j5=x9405;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9405;
IkReal gconst1=(r21*x9404);
IkReal gconst2=(x9403*x9404);
IkReal x9407=r22*r22;
IkReal x9408=(cj1*r02*sj2);
IkReal x9409=(cj2*r02*sj1);
CheckValue<IkReal> x9413=IKPowWithIntegerCheck(((-1.0)+x9407),-1);
if(!x9413.valid){
continue;
}
IkReal x9410=x9413.value;
if((((1.0)+(((-1.0)*x9407)))) < -0.00001)
continue;
IkReal x9411=IKsqrt(((1.0)+(((-1.0)*x9407))));
IkReal x9412=((1.0)*r22*x9410*x9411);
j4eval[0]=((IKabs(((((-1.0)*x9408*x9412))+(((-1.0)*x9409*x9412)))))+(IKabs((x9409+x9408))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9414=(cj2*sj1);
IkReal x9415=(cj1*sj2);
IkReal x9416=(gconst2*r00);
IkReal x9417=((1.0)*gconst1*r01);
CheckValue<IkReal> x9418 = IKatan2WithCheck(IkReal(((((-1.0)*x9414*x9417))+(((-1.0)*x9415*x9417))+((x9414*x9416))+((x9415*x9416)))),IkReal((((r02*x9414))+((r02*x9415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9418.valid){
continue;
}
CheckValue<IkReal> x9419=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9418.value)+(((1.5707963267949)*(x9419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9420=IKsin(j4);
IkReal x9421=IKcos(j4);
IkReal x9422=(gconst1*r11);
IkReal x9423=(gconst1*r21);
IkReal x9424=(gconst1*r01);
IkReal x9425=((1.0)*x9421);
IkReal x9426=(gconst2*x9421);
IkReal x9427=((1.0)*x9420);
evalcond[0]=(((x9420*x9423))+(((-1.0)*gconst2*r20*x9427))+(((-1.0)*r22*x9425)));
evalcond[1]=((((-1.0)*gconst2*r10*x9427))+((x9420*x9422))+(((-1.0)*r12*x9425)));
evalcond[2]=((((-1.0)*x9424*x9425))+((r00*x9426))+(((-1.0)*r02*x9427)));
evalcond[3]=((1.0)+((x9420*x9424))+(((-1.0)*r02*x9425))+(((-1.0)*gconst2*r00*x9427)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9423*x9425))+((cj1*sj2))+((r20*x9426))+(((-1.0)*r22*x9427)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x9427))+(((-1.0)*x9422*x9425))+((cj1*cj2))+((r10*x9426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9428=(gconst1*r01);
IkReal x9429=(gconst2*r00);
CheckValue<IkReal> x9430=IKPowWithIntegerCheck(IKsign(((x9429*x9429)+(x9428*x9428)+(r02*r02)+(((-2.0)*x9428*x9429)))),-1);
if(!x9430.valid){
continue;
}
CheckValue<IkReal> x9431 = IKatan2WithCheck(IkReal(((((-1.0)*x9428))+x9429)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9430.value)))+(x9431.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9432=IKsin(j4);
IkReal x9433=IKcos(j4);
IkReal x9434=(gconst1*r11);
IkReal x9435=(gconst1*r21);
IkReal x9436=(gconst1*r01);
IkReal x9437=((1.0)*x9433);
IkReal x9438=(gconst2*x9433);
IkReal x9439=((1.0)*x9432);
evalcond[0]=(((x9432*x9435))+(((-1.0)*gconst2*r20*x9439))+(((-1.0)*r22*x9437)));
evalcond[1]=((((-1.0)*gconst2*r10*x9439))+(((-1.0)*r12*x9437))+((x9432*x9434)));
evalcond[2]=((((-1.0)*r02*x9439))+(((-1.0)*x9436*x9437))+((r00*x9438)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9439))+(((-1.0)*r02*x9437))+((x9432*x9436)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9438))+(((-1.0)*x9435*x9437))+(((-1.0)*r22*x9439)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9434*x9437))+(((-1.0)*r12*x9439))+((cj1*cj2))+((r10*x9438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9440 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9440.valid){
continue;
}
CheckValue<IkReal> x9441=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9440.value)+(((1.5707963267949)*(x9441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9442=IKsin(j4);
IkReal x9443=IKcos(j4);
IkReal x9444=(gconst1*r11);
IkReal x9445=(gconst1*r21);
IkReal x9446=(gconst1*r01);
IkReal x9447=((1.0)*x9443);
IkReal x9448=(gconst2*x9443);
IkReal x9449=((1.0)*x9442);
evalcond[0]=((((-1.0)*gconst2*r20*x9449))+(((-1.0)*r22*x9447))+((x9442*x9445)));
evalcond[1]=((((-1.0)*gconst2*r10*x9449))+(((-1.0)*r12*x9447))+((x9442*x9444)));
evalcond[2]=((((-1.0)*x9446*x9447))+((r00*x9448))+(((-1.0)*r02*x9449)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9449))+(((-1.0)*r02*x9447))+((x9442*x9446)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9445*x9447))+((cj1*sj2))+(((-1.0)*r22*x9449))+((r20*x9448)));
evalcond[5]=(((r10*x9448))+(((-1.0)*sj1*sj2))+(((-1.0)*x9444*x9447))+((cj1*cj2))+(((-1.0)*r12*x9449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9450=((-1.0)*r20);
IkReal x9451=((-1.0)*px);
CheckValue<IkReal> x9453 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9450),IKFAST_ATAN2_MAGTHRESH);
if(!x9453.valid){
continue;
}
IkReal x9452=((-1.0)*(x9453.value));
sj5=gconst1;
cj5=gconst2;
j5=x9452;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9451);
rxp1_1=(px*r21);
rxp1_2=(r11*x9451);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9452;
IkReal gconst1=r21;
IkReal gconst2=x9450;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9454=((-1.0)*r20);
IkReal x9455=((-1.0)*px);
CheckValue<IkReal> x9457 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9454),IKFAST_ATAN2_MAGTHRESH);
if(!x9457.valid){
continue;
}
IkReal x9456=((-1.0)*(x9457.value));
sj5=gconst1;
cj5=gconst2;
j5=x9456;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9455);
rxp1_1=(px*r21);
rxp1_2=(r11*x9455);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9456;
IkReal gconst1=r21;
IkReal gconst2=x9454;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9458=((-1.0)*r20);
IkReal x9459=((-1.0)*px);
CheckValue<IkReal> x9461 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9458),IKFAST_ATAN2_MAGTHRESH);
if(!x9461.valid){
continue;
}
IkReal x9460=((-1.0)*(x9461.value));
sj5=gconst1;
cj5=gconst2;
j5=x9460;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9459);
rxp1_1=(px*r21);
rxp1_2=(r11*x9459);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9460;
IkReal gconst1=r21;
IkReal gconst2=x9458;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9464=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9464.valid){
continue;
}
IkReal x9462=x9464.value;
IkReal x9463=(sj0*x9462);
cj4array[0]=(((cj1*cj2*x9463))+(((-1.0)*sj1*sj2*x9463)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9465=IKsin(j4);
IkReal x9466=IKcos(j4);
IkReal x9467=(gconst1*x9465);
IkReal x9468=((1.0)*x9466);
IkReal x9469=((1.0)*gconst2*x9465);
evalcond[0]=((-1.0)*r02*x9465);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9468)));
evalcond[2]=(((r21*x9467))+(((-1.0)*r20*x9469)));
evalcond[3]=((((-1.0)*r10*x9469))+((r11*x9467)));
evalcond[4]=(((gconst2*r20*x9466))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9472=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9472.valid){
continue;
}
IkReal x9470=x9472.value;
IkReal x9471=((1.0)*x9470);
cj4array[0]=((((-1.0)*cj2*sj1*x9471))+(((-1.0)*cj1*sj2*x9471)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9473=IKsin(j4);
IkReal x9474=IKcos(j4);
IkReal x9475=(gconst2*r10);
IkReal x9476=((1.0)*sj0);
IkReal x9477=(gconst1*r11);
IkReal x9478=((1.0)*x9473);
IkReal x9479=((1.0)*x9474);
evalcond[0]=((-1.0)*r02*x9473);
evalcond[1]=((((-1.0)*r02*x9479))+(((-1.0)*x9476)));
evalcond[2]=(((gconst1*r21*x9473))+(((-1.0)*gconst2*r20*x9478)));
evalcond[3]=((((-1.0)*x9475*x9478))+((x9473*x9477)));
evalcond[4]=(((x9474*x9475))+(((-1.0)*x9477*x9479))+(((-1.0)*cj1*cj2*x9476))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9480=IKPowWithIntegerCheck(r02,-1);
if(!x9480.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9480.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9481=IKsin(j4);
IkReal x9482=IKcos(j4);
IkReal x9483=(gconst2*r10);
IkReal x9484=(gconst1*r11);
IkReal x9485=(gconst1*r21);
IkReal x9486=(gconst2*r20);
IkReal x9487=((1.0)*x9481);
IkReal x9488=((1.0)*x9482);
evalcond[0]=((-1.0)*r02*x9481);
evalcond[1]=((((-1.0)*x9486*x9487))+((x9481*x9485)));
evalcond[2]=((((-1.0)*x9483*x9487))+((x9481*x9484)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9485*x9488))+((cj1*sj2))+((x9482*x9486)));
evalcond[4]=((((-1.0)*x9484*x9488))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x9482*x9483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9489=(cj2*sj1);
IkReal x9490=(cj1*sj2);
IkReal x9491=(gconst1*r21);
IkReal x9492=((1.0)*gconst2*r20);
CheckValue<IkReal> x9493=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9491*x9491)+(((gconst2*gconst2)*(r20*r20)))+(((-2.0)*gconst2*r20*x9491)))),-1);
if(!x9493.valid){
continue;
}
CheckValue<IkReal> x9494 = IKatan2WithCheck(IkReal((((r22*x9490))+((r22*x9489)))),IkReal((((x9489*x9491))+((x9490*x9491))+(((-1.0)*x9489*x9492))+(((-1.0)*x9490*x9492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9493.value)))+(x9494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9495=IKsin(j4);
IkReal x9496=IKcos(j4);
IkReal x9497=(gconst1*r11);
IkReal x9498=(sj1*sj2);
IkReal x9499=(gconst1*r21);
IkReal x9500=(gconst1*r01);
IkReal x9501=((1.0)*x9496);
IkReal x9502=(gconst2*x9496);
IkReal x9503=((1.0)*cj1*cj2);
IkReal x9504=((1.0)*x9495);
evalcond[0]=((((-1.0)*r22*x9501))+((x9495*x9499))+(((-1.0)*gconst2*r20*x9504)));
evalcond[1]=(cj0+(((-1.0)*r12*x9501))+(((-1.0)*gconst2*r10*x9504))+((x9495*x9497)));
evalcond[2]=((((-1.0)*sj0))+((x9495*x9500))+(((-1.0)*gconst2*r00*x9504))+(((-1.0)*r02*x9501)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9504))+((r20*x9502))+(((-1.0)*x9499*x9501)));
evalcond[4]=(((cj0*x9498))+(((-1.0)*cj0*x9503))+(((-1.0)*x9500*x9501))+(((-1.0)*r02*x9504))+((r00*x9502)));
evalcond[5]=(((r10*x9502))+(((-1.0)*r12*x9504))+(((-1.0)*sj0*x9503))+((sj0*x9498))+(((-1.0)*x9497*x9501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9505=((1.0)*gconst2);
CheckValue<IkReal> x9506 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9505))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9506.valid){
continue;
}
CheckValue<IkReal> x9507=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9505))+(((-1.0)*gconst1*r10)))),-1);
if(!x9507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9506.value)+(((1.5707963267949)*(x9507.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9508=IKsin(j4);
IkReal x9509=IKcos(j4);
IkReal x9510=(gconst1*r11);
IkReal x9511=(sj1*sj2);
IkReal x9512=(gconst1*r21);
IkReal x9513=(gconst1*r01);
IkReal x9514=((1.0)*x9509);
IkReal x9515=(gconst2*x9509);
IkReal x9516=((1.0)*cj1*cj2);
IkReal x9517=((1.0)*x9508);
evalcond[0]=((((-1.0)*gconst2*r20*x9517))+((x9508*x9512))+(((-1.0)*r22*x9514)));
evalcond[1]=(cj0+((x9508*x9510))+(((-1.0)*gconst2*r10*x9517))+(((-1.0)*r12*x9514)));
evalcond[2]=((((-1.0)*r02*x9514))+(((-1.0)*sj0))+((x9508*x9513))+(((-1.0)*gconst2*r00*x9517)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9512*x9514))+((cj1*sj2))+(((-1.0)*r22*x9517))+((r20*x9515)));
evalcond[4]=((((-1.0)*r02*x9517))+((r00*x9515))+((cj0*x9511))+(((-1.0)*x9513*x9514))+(((-1.0)*cj0*x9516)));
evalcond[5]=((((-1.0)*x9510*x9514))+((sj0*x9511))+(((-1.0)*r12*x9517))+((r10*x9515))+(((-1.0)*sj0*x9516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9518=((1.0)*gconst2);
CheckValue<IkReal> x9519 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9518)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9519.valid){
continue;
}
CheckValue<IkReal> x9520=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9518)))),-1);
if(!x9520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9519.value)+(((1.5707963267949)*(x9520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9521=IKsin(j4);
IkReal x9522=IKcos(j4);
IkReal x9523=(gconst1*r11);
IkReal x9524=(sj1*sj2);
IkReal x9525=(gconst1*r21);
IkReal x9526=(gconst1*r01);
IkReal x9527=((1.0)*x9522);
IkReal x9528=(gconst2*x9522);
IkReal x9529=((1.0)*cj1*cj2);
IkReal x9530=((1.0)*x9521);
evalcond[0]=(((x9521*x9525))+(((-1.0)*r22*x9527))+(((-1.0)*gconst2*r20*x9530)));
evalcond[1]=((((-1.0)*r12*x9527))+cj0+((x9521*x9523))+(((-1.0)*gconst2*r10*x9530)));
evalcond[2]=((((-1.0)*sj0))+((x9521*x9526))+(((-1.0)*r02*x9527))+(((-1.0)*gconst2*r00*x9530)));
evalcond[3]=(((cj2*sj1))+((r20*x9528))+(((-1.0)*r22*x9530))+(((-1.0)*x9525*x9527))+((cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x9529))+((cj0*x9524))+(((-1.0)*x9526*x9527))+((r00*x9528))+(((-1.0)*r02*x9530)));
evalcond[5]=(((sj0*x9524))+((r10*x9528))+(((-1.0)*sj0*x9529))+(((-1.0)*x9523*x9527))+(((-1.0)*r12*x9530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9531=((-1.0)*r20);
IkReal x9532=x8882;
CheckValue<IkReal> x9534 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9531),IKFAST_ATAN2_MAGTHRESH);
if(!x9534.valid){
continue;
}
IkReal x9533=((-1.0)*(x9534.value));
sj5=gconst1;
cj5=gconst2;
j5=x9533;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9533;
IkReal gconst1=(r21*x9532);
IkReal gconst2=(x9531*x9532);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9535=((-1.0)*r20);
IkReal x9536=x8882;
CheckValue<IkReal> x9538 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9535),IKFAST_ATAN2_MAGTHRESH);
if(!x9538.valid){
continue;
}
IkReal x9537=((-1.0)*(x9538.value));
sj5=gconst1;
cj5=gconst2;
j5=x9537;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9537;
IkReal gconst1=(r21*x9536);
IkReal gconst2=(x9535*x9536);
CheckValue<IkReal> x9546=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9546.valid){
continue;
}
IkReal x9539=x9546.value;
IkReal x9540=(sj3*x9539);
IkReal x9541=(r11*x9540);
IkReal x9542=(r00*x9540);
IkReal x9543=(r01*x9540);
IkReal x9544=(r10*x9540);
IkReal x9545=(r20*r21*x9540);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9541))+((r10*r20*r21*x9543))+((r01*x9541*(r21*r21)))+((r10*x9542*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9547=gconst2*gconst2;
IkReal x9548=gconst1*gconst1;
IkReal x9549=((1.0)*cj3);
IkReal x9550=((1.0)*sj3);
IkReal x9551=(r11*sj3);
IkReal x9552=(r10*sj3);
IkReal x9553=(gconst1*gconst2*r00);
IkReal x9554=(gconst1*gconst2*r01);
IkReal x9555=(r00*x9547);
IkReal x9556=(r01*x9548);
CheckValue<IkReal> x9557=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9549*x9556))+((cj3*r11*x9553))+(((-1.0)*r02*r12*x9549))+(((-1.0)*r10*x9549*x9555))+((cj3*r10*x9554)))),-1);
if(!x9557.valid){
continue;
}
CheckValue<IkReal> x9558 = IKatan2WithCheck(IkReal((((gconst1*r02*x9552))+((gconst2*r02*x9551)))),IkReal(((((-1.0)*r11*x9550*x9555))+((x9552*x9556))+(((-1.0)*r10*x9550*x9553))+((x9551*x9554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9557.value)))+(x9558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9559=IKsin(j4);
IkReal x9560=IKcos(j4);
IkReal x9561=(sj1*sj2);
IkReal x9562=(gconst1*sj3);
IkReal x9563=(cj3*gconst1);
IkReal x9564=(cj3*gconst2);
IkReal x9565=((1.0)*cj2);
IkReal x9566=(cj1*sj2);
IkReal x9567=(gconst2*sj3);
IkReal x9568=(cj1*x9565);
IkReal x9569=((1.0)*x9560);
IkReal x9570=((1.0)*x9559);
IkReal x9571=(gconst1*x9559);
IkReal x9572=(cj3*x9559);
IkReal x9573=(x9560*x9567);
evalcond[0]=((((-1.0)*gconst2*r20*x9570))+((r21*x9571))+(((-1.0)*r22*x9569)));
evalcond[1]=(((r01*x9571))+(((-1.0)*gconst2*r00*x9570))+(((-1.0)*r02*x9569)));
evalcond[2]=((1.0)+((r11*x9571))+(((-1.0)*gconst2*r10*x9570))+(((-1.0)*r12*x9569)));
evalcond[3]=((((-1.0)*r10*x9564*x9569))+((r11*x9560*x9563))+((r11*x9567))+((r12*x9572))+((r10*x9562)));
evalcond[4]=((((-1.0)*r11*x9562*x9569))+((r11*x9564))+((r10*x9563))+(((-1.0)*r12*sj3*x9570))+((r10*x9573)));
evalcond[5]=(((r21*x9567))+(((-1.0)*r20*x9564*x9569))+((cj2*sj1))+((r22*x9572))+((r21*x9560*x9563))+x9566+((r20*x9562)));
evalcond[6]=(((r01*x9567))+((r00*x9562))+(((-1.0)*x9568))+(((-1.0)*r00*x9564*x9569))+x9561+((r01*x9560*x9563))+((r02*x9572)));
evalcond[7]=(((r21*x9564))+(((-1.0)*x9568))+(((-1.0)*r22*sj3*x9570))+(((-1.0)*r21*x9562*x9569))+x9561+((r20*x9573))+((r20*x9563)));
evalcond[8]=((((-1.0)*r02*sj3*x9570))+(((-1.0)*x9566))+((r01*x9564))+((r00*x9563))+(((-1.0)*r01*x9562*x9569))+((r00*x9573))+(((-1.0)*sj1*x9565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9574=gconst2*gconst2;
IkReal x9575=gconst1*gconst1;
IkReal x9576=(gconst2*r11);
IkReal x9577=(cj3*r02);
IkReal x9578=(gconst1*r01);
IkReal x9579=(cj3*r10);
IkReal x9580=(r10*sj3);
IkReal x9581=((1.0)*gconst1*r00);
IkReal x9582=(r01*x9575);
IkReal x9583=(r00*x9574);
CheckValue<IkReal> x9584 = IKatan2WithCheck(IkReal((((x9576*x9577))+((gconst1*r10*x9577)))),IkReal(((((-1.0)*cj3*r11*x9583))+((x9579*x9582))+((cj3*x9576*x9578))+(((-1.0)*gconst2*x9579*x9581)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9584.valid){
continue;
}
CheckValue<IkReal> x9585=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x9576*x9581))+((x9580*x9583))+(((-1.0)*gconst2*x9578*x9580))+((r11*sj3*x9582)))),-1);
if(!x9585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9584.value)+(((1.5707963267949)*(x9585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9586=IKsin(j4);
IkReal x9587=IKcos(j4);
IkReal x9588=(sj1*sj2);
IkReal x9589=(gconst1*sj3);
IkReal x9590=(cj3*gconst1);
IkReal x9591=(cj3*gconst2);
IkReal x9592=((1.0)*cj2);
IkReal x9593=(cj1*sj2);
IkReal x9594=(gconst2*sj3);
IkReal x9595=(cj1*x9592);
IkReal x9596=((1.0)*x9587);
IkReal x9597=((1.0)*x9586);
IkReal x9598=(gconst1*x9586);
IkReal x9599=(cj3*x9586);
IkReal x9600=(x9587*x9594);
evalcond[0]=((((-1.0)*r22*x9596))+((r21*x9598))+(((-1.0)*gconst2*r20*x9597)));
evalcond[1]=(((r01*x9598))+(((-1.0)*gconst2*r00*x9597))+(((-1.0)*r02*x9596)));
evalcond[2]=((1.0)+((r11*x9598))+(((-1.0)*gconst2*r10*x9597))+(((-1.0)*r12*x9596)));
evalcond[3]=(((r11*x9594))+((r10*x9589))+(((-1.0)*r10*x9591*x9596))+((r12*x9599))+((r11*x9587*x9590)));
evalcond[4]=(((r11*x9591))+((r10*x9600))+(((-1.0)*r12*sj3*x9597))+((r10*x9590))+(((-1.0)*r11*x9589*x9596)));
evalcond[5]=(((cj2*sj1))+((r20*x9589))+((r22*x9599))+((r21*x9587*x9590))+x9593+((r21*x9594))+(((-1.0)*r20*x9591*x9596)));
evalcond[6]=(((r01*x9594))+((r00*x9589))+(((-1.0)*x9595))+x9588+(((-1.0)*r00*x9591*x9596))+((r02*x9599))+((r01*x9587*x9590)));
evalcond[7]=(((r20*x9590))+(((-1.0)*r21*x9589*x9596))+(((-1.0)*r22*sj3*x9597))+((r20*x9600))+(((-1.0)*x9595))+x9588+((r21*x9591)));
evalcond[8]=((((-1.0)*sj1*x9592))+(((-1.0)*r01*x9589*x9596))+((r01*x9591))+((r00*x9600))+((r00*x9590))+(((-1.0)*r02*sj3*x9597))+(((-1.0)*x9593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9601=((1.0)*gconst2);
CheckValue<IkReal> x9602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9601))+(((-1.0)*gconst1*r00)))),-1);
if(!x9602.valid){
continue;
}
CheckValue<IkReal> x9603 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9601))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9602.value)))+(x9603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9604=IKsin(j4);
IkReal x9605=IKcos(j4);
IkReal x9606=(sj1*sj2);
IkReal x9607=(gconst1*sj3);
IkReal x9608=(cj3*gconst1);
IkReal x9609=(cj3*gconst2);
IkReal x9610=((1.0)*cj2);
IkReal x9611=(cj1*sj2);
IkReal x9612=(gconst2*sj3);
IkReal x9613=(cj1*x9610);
IkReal x9614=((1.0)*x9605);
IkReal x9615=((1.0)*x9604);
IkReal x9616=(gconst1*x9604);
IkReal x9617=(cj3*x9604);
IkReal x9618=(x9605*x9612);
evalcond[0]=((((-1.0)*r22*x9614))+(((-1.0)*gconst2*r20*x9615))+((r21*x9616)));
evalcond[1]=(((r01*x9616))+(((-1.0)*r02*x9614))+(((-1.0)*gconst2*r00*x9615)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9615))+(((-1.0)*r12*x9614))+((r11*x9616)));
evalcond[3]=(((r10*x9607))+((r11*x9612))+(((-1.0)*r10*x9609*x9614))+((r12*x9617))+((r11*x9605*x9608)));
evalcond[4]=(((r10*x9618))+(((-1.0)*r11*x9607*x9614))+((r10*x9608))+((r11*x9609))+(((-1.0)*r12*sj3*x9615)));
evalcond[5]=(((cj2*sj1))+((r21*x9605*x9608))+((r22*x9617))+((r20*x9607))+((r21*x9612))+x9611+(((-1.0)*r20*x9609*x9614)));
evalcond[6]=(((r01*x9612))+((r01*x9605*x9608))+((r00*x9607))+((r02*x9617))+(((-1.0)*r00*x9609*x9614))+x9606+(((-1.0)*x9613)));
evalcond[7]=(((r20*x9618))+((r21*x9609))+((r20*x9608))+(((-1.0)*r22*sj3*x9615))+x9606+(((-1.0)*x9613))+(((-1.0)*r21*x9607*x9614)));
evalcond[8]=(((r00*x9618))+((r00*x9608))+(((-1.0)*x9611))+((r01*x9609))+(((-1.0)*r02*sj3*x9615))+(((-1.0)*sj1*x9610))+(((-1.0)*r01*x9607*x9614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9619=((-1.0)*r20);
IkReal x9620=x8882;
CheckValue<IkReal> x9622 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9619),IKFAST_ATAN2_MAGTHRESH);
if(!x9622.valid){
continue;
}
IkReal x9621=((-1.0)*(x9622.value));
sj5=gconst1;
cj5=gconst2;
j5=x9621;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9621;
IkReal gconst1=(r21*x9620);
IkReal gconst2=(x9619*x9620);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9623=((-1.0)*r20);
IkReal x9624=x8882;
CheckValue<IkReal> x9626 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9623),IKFAST_ATAN2_MAGTHRESH);
if(!x9626.valid){
continue;
}
IkReal x9625=((-1.0)*(x9626.value));
sj5=gconst1;
cj5=gconst2;
j5=x9625;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9625;
IkReal gconst1=(r21*x9624);
IkReal gconst2=(x9623*x9624);
CheckValue<IkReal> x9634=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9634.valid){
continue;
}
IkReal x9627=x9634.value;
IkReal x9628=(sj3*x9627);
IkReal x9629=(r11*x9628);
IkReal x9630=(r00*x9628);
IkReal x9631=(r01*x9628);
IkReal x9632=(r10*x9628);
IkReal x9633=(r20*r21*x9628);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9629))+((r10*x9630*(r20*r20)))+((r01*x9629*(r21*r21)))+((r10*r20*r21*x9631))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9635=gconst2*gconst2;
IkReal x9636=gconst1*gconst1;
IkReal x9637=((1.0)*cj3);
IkReal x9638=((1.0)*sj3);
IkReal x9639=(r11*sj3);
IkReal x9640=(r10*sj3);
IkReal x9641=(gconst1*gconst2*r00);
IkReal x9642=(gconst1*gconst2*r01);
IkReal x9643=(r00*x9635);
IkReal x9644=(r01*x9636);
CheckValue<IkReal> x9645 = IKatan2WithCheck(IkReal((((gconst2*r02*x9639))+((gconst1*r02*x9640)))),IkReal((((x9639*x9642))+((x9640*x9644))+(((-1.0)*r10*x9638*x9641))+(((-1.0)*r11*x9638*x9643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9645.valid){
continue;
}
CheckValue<IkReal> x9646=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9637*x9643))+((cj3*r10*x9642))+(((-1.0)*r11*x9637*x9644))+((cj3*r11*x9641))+(((-1.0)*r02*r12*x9637)))),-1);
if(!x9646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9645.value)+(((1.5707963267949)*(x9646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9647=IKsin(j4);
IkReal x9648=IKcos(j4);
IkReal x9649=(cj2*sj1);
IkReal x9650=(cj1*sj2);
IkReal x9651=(gconst1*sj3);
IkReal x9652=(cj3*gconst1);
IkReal x9653=(sj1*sj2);
IkReal x9654=(cj3*gconst2);
IkReal x9655=(cj1*cj2);
IkReal x9656=(gconst2*sj3);
IkReal x9657=((1.0)*x9648);
IkReal x9658=((1.0)*x9647);
IkReal x9659=(gconst1*x9647);
IkReal x9660=(cj3*x9647);
IkReal x9661=(x9650+x9649);
IkReal x9662=(x9648*x9656);
evalcond[0]=((((-1.0)*gconst2*r20*x9658))+((r21*x9659))+(((-1.0)*r22*x9657)));
evalcond[1]=(((r01*x9659))+(((-1.0)*gconst2*r00*x9658))+(((-1.0)*r02*x9657)));
evalcond[2]=((-1.0)+((r11*x9659))+(((-1.0)*r12*x9657))+(((-1.0)*gconst2*r10*x9658)));
evalcond[3]=(((r11*x9648*x9652))+(((-1.0)*r10*x9654*x9657))+((r11*x9656))+((r12*x9660))+((r10*x9651)));
evalcond[4]=(((r11*x9654))+(((-1.0)*r11*x9651*x9657))+((r10*x9662))+((r10*x9652))+(((-1.0)*r12*sj3*x9658)));
evalcond[5]=(((r21*x9656))+((r20*x9651))+x9661+((r22*x9660))+((r21*x9648*x9652))+(((-1.0)*r20*x9654*x9657)));
evalcond[6]=(((r01*x9648*x9652))+((r01*x9656))+((r00*x9651))+x9655+(((-1.0)*x9653))+(((-1.0)*r00*x9654*x9657))+((r02*x9660)));
evalcond[7]=((((-1.0)*r02*sj3*x9658))+((r00*x9662))+((r01*x9654))+((r00*x9652))+x9661+(((-1.0)*r01*x9651*x9657)));
evalcond[8]=((((-1.0)*r21*x9651*x9657))+((r21*x9654))+((r20*x9652))+((r20*x9662))+x9653+(((-1.0)*x9655))+(((-1.0)*r22*sj3*x9658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9663=gconst2*gconst2;
IkReal x9664=gconst1*gconst1;
IkReal x9665=(gconst2*r11);
IkReal x9666=(cj3*r02);
IkReal x9667=(gconst1*r01);
IkReal x9668=(cj3*r10);
IkReal x9669=(r10*sj3);
IkReal x9670=((1.0)*gconst1*r00);
IkReal x9671=(r01*x9664);
IkReal x9672=(r00*x9663);
CheckValue<IkReal> x9673 = IKatan2WithCheck(IkReal((((x9665*x9666))+((gconst1*r10*x9666)))),IkReal(((((-1.0)*cj3*r11*x9672))+(((-1.0)*gconst2*x9668*x9670))+((cj3*x9665*x9667))+((x9668*x9671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9673.valid){
continue;
}
CheckValue<IkReal> x9674=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r11*sj3*x9671))+(((-1.0)*gconst2*x9667*x9669))+((x9669*x9672))+(((-1.0)*sj3*x9665*x9670)))),-1);
if(!x9674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9673.value)+(((1.5707963267949)*(x9674.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9675=IKsin(j4);
IkReal x9676=IKcos(j4);
IkReal x9677=(cj2*sj1);
IkReal x9678=(cj1*sj2);
IkReal x9679=(gconst1*sj3);
IkReal x9680=(cj3*gconst1);
IkReal x9681=(sj1*sj2);
IkReal x9682=(cj3*gconst2);
IkReal x9683=(cj1*cj2);
IkReal x9684=(gconst2*sj3);
IkReal x9685=((1.0)*x9676);
IkReal x9686=((1.0)*x9675);
IkReal x9687=(gconst1*x9675);
IkReal x9688=(cj3*x9675);
IkReal x9689=(x9677+x9678);
IkReal x9690=(x9676*x9684);
evalcond[0]=(((r21*x9687))+(((-1.0)*r22*x9685))+(((-1.0)*gconst2*r20*x9686)));
evalcond[1]=((((-1.0)*r02*x9685))+(((-1.0)*gconst2*r00*x9686))+((r01*x9687)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9686))+(((-1.0)*r12*x9685))+((r11*x9687)));
evalcond[3]=((((-1.0)*r10*x9682*x9685))+((r11*x9676*x9680))+((r10*x9679))+((r12*x9688))+((r11*x9684)));
evalcond[4]=((((-1.0)*r11*x9679*x9685))+((r10*x9690))+((r11*x9682))+((r10*x9680))+(((-1.0)*r12*sj3*x9686)));
evalcond[5]=(((r21*x9676*x9680))+((r22*x9688))+((r20*x9679))+(((-1.0)*r20*x9682*x9685))+((r21*x9684))+x9689);
evalcond[6]=(((r01*x9676*x9680))+(((-1.0)*x9681))+((r02*x9688))+((r00*x9679))+x9683+((r01*x9684))+(((-1.0)*r00*x9682*x9685)));
evalcond[7]=((((-1.0)*r01*x9679*x9685))+(((-1.0)*r02*sj3*x9686))+x9689+((r01*x9682))+((r00*x9690))+((r00*x9680)));
evalcond[8]=((((-1.0)*r21*x9679*x9685))+(((-1.0)*x9683))+(((-1.0)*r22*sj3*x9686))+((r21*x9682))+x9681+((r20*x9680))+((r20*x9690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9691 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9691.valid){
continue;
}
CheckValue<IkReal> x9692=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9691.value)+(((1.5707963267949)*(x9692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9693=IKsin(j4);
IkReal x9694=IKcos(j4);
IkReal x9695=(cj2*sj1);
IkReal x9696=(cj1*sj2);
IkReal x9697=(gconst1*sj3);
IkReal x9698=(cj3*gconst1);
IkReal x9699=(sj1*sj2);
IkReal x9700=(cj3*gconst2);
IkReal x9701=(cj1*cj2);
IkReal x9702=(gconst2*sj3);
IkReal x9703=((1.0)*x9694);
IkReal x9704=((1.0)*x9693);
IkReal x9705=(gconst1*x9693);
IkReal x9706=(cj3*x9693);
IkReal x9707=(x9696+x9695);
IkReal x9708=(x9694*x9702);
evalcond[0]=((((-1.0)*r22*x9703))+((r21*x9705))+(((-1.0)*gconst2*r20*x9704)));
evalcond[1]=((((-1.0)*r02*x9703))+((r01*x9705))+(((-1.0)*gconst2*r00*x9704)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9704))+((r11*x9705))+(((-1.0)*r12*x9703)));
evalcond[3]=(((r12*x9706))+((r11*x9702))+((r11*x9694*x9698))+(((-1.0)*r10*x9700*x9703))+((r10*x9697)));
evalcond[4]=(((r10*x9708))+(((-1.0)*r12*sj3*x9704))+((r11*x9700))+(((-1.0)*r11*x9697*x9703))+((r10*x9698)));
evalcond[5]=(((r21*x9702))+((r21*x9694*x9698))+(((-1.0)*r20*x9700*x9703))+x9707+((r20*x9697))+((r22*x9706)));
evalcond[6]=((((-1.0)*x9699))+((r02*x9706))+(((-1.0)*r00*x9700*x9703))+((r01*x9702))+x9701+((r00*x9697))+((r01*x9694*x9698)));
evalcond[7]=(((r01*x9700))+(((-1.0)*r01*x9697*x9703))+((r00*x9708))+x9707+(((-1.0)*r02*sj3*x9704))+((r00*x9698)));
evalcond[8]=((((-1.0)*x9701))+((r20*x9708))+((r21*x9700))+(((-1.0)*r22*sj3*x9704))+x9699+(((-1.0)*r21*x9697*x9703))+((r20*x9698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9709=((-1.0)*r20);
IkReal x9710=x8882;
CheckValue<IkReal> x9712 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9709),IKFAST_ATAN2_MAGTHRESH);
if(!x9712.valid){
continue;
}
IkReal x9711=((-1.0)*(x9712.value));
sj5=gconst1;
cj5=gconst2;
j5=x9711;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9711;
IkReal gconst1=(r21*x9710);
IkReal gconst2=(x9709*x9710);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9713=((-1.0)*r20);
IkReal x9714=x8882;
CheckValue<IkReal> x9716 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9713),IKFAST_ATAN2_MAGTHRESH);
if(!x9716.valid){
continue;
}
IkReal x9715=((-1.0)*(x9716.value));
sj5=gconst1;
cj5=gconst2;
j5=x9715;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9715;
IkReal gconst1=(r21*x9714);
IkReal gconst2=(x9713*x9714);
CheckValue<IkReal> x9724=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9724.valid){
continue;
}
IkReal x9717=x9724.value;
IkReal x9718=(sj3*x9717);
IkReal x9719=(r11*x9718);
IkReal x9720=(r00*x9718);
IkReal x9721=(r01*x9718);
IkReal x9722=(r10*x9718);
IkReal x9723=(r20*r21*x9718);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9719*(r21*r21)))+((r10*r20*r21*x9721))+((r10*x9720*(r20*r20)))+((r00*r20*r21*x9719))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9725=gconst1*gconst1;
IkReal x9726=gconst2*gconst2;
IkReal x9727=((1.0)*cj3);
IkReal x9728=(gconst2*r10);
IkReal x9729=(r01*sj3);
IkReal x9730=(gconst1*r00*sj3);
IkReal x9731=(gconst1*gconst2*r11);
IkReal x9732=(r10*x9726);
IkReal x9733=(r11*x9725);
CheckValue<IkReal> x9734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9727))+((cj3*gconst1*r01*x9728))+(((-1.0)*r00*x9727*x9732))+((cj3*r00*x9731))+(((-1.0)*r01*x9727*x9733)))),-1);
if(!x9734.valid){
continue;
}
CheckValue<IkReal> x9735 = IKatan2WithCheck(IkReal((((gconst2*r12*x9729))+((r12*x9730)))),IkReal((((x9729*x9731))+((r00*sj3*x9733))+(((-1.0)*x9729*x9732))+(((-1.0)*x9728*x9730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9734.value)))+(x9735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9736=IKsin(j4);
IkReal x9737=IKcos(j4);
IkReal x9738=(sj1*sj2);
IkReal x9739=(gconst1*sj3);
IkReal x9740=(cj3*gconst1);
IkReal x9741=(cj3*gconst2);
IkReal x9742=((1.0)*cj2);
IkReal x9743=(cj1*sj2);
IkReal x9744=(gconst2*sj3);
IkReal x9745=(cj1*x9742);
IkReal x9746=((1.0)*x9737);
IkReal x9747=((1.0)*x9736);
IkReal x9748=(gconst1*x9736);
IkReal x9749=(cj3*x9736);
IkReal x9750=(x9737*x9744);
evalcond[0]=(((r21*x9748))+(((-1.0)*gconst2*r20*x9747))+(((-1.0)*r22*x9746)));
evalcond[1]=(((r11*x9748))+(((-1.0)*gconst2*r10*x9747))+(((-1.0)*r12*x9746)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9747))+(((-1.0)*r02*x9746))+((r01*x9748)));
evalcond[3]=(((r02*x9749))+((r01*x9737*x9740))+(((-1.0)*r00*x9741*x9746))+((r01*x9744))+((r00*x9739)));
evalcond[4]=(((r00*x9750))+(((-1.0)*r02*sj3*x9747))+((r01*x9741))+(((-1.0)*r01*x9739*x9746))+((r00*x9740)));
evalcond[5]=(((cj2*sj1))+((r21*x9744))+((r21*x9737*x9740))+((r22*x9749))+((r20*x9739))+x9743+(((-1.0)*r20*x9741*x9746)));
evalcond[6]=(((r11*x9744))+x9738+(((-1.0)*x9745))+(((-1.0)*r10*x9741*x9746))+((r12*x9749))+((r11*x9737*x9740))+((r10*x9739)));
evalcond[7]=((((-1.0)*r21*x9739*x9746))+((r21*x9741))+x9738+((r20*x9740))+(((-1.0)*x9745))+(((-1.0)*r22*sj3*x9747))+((r20*x9750)));
evalcond[8]=(((r10*x9750))+((r11*x9741))+((r10*x9740))+(((-1.0)*r12*sj3*x9747))+(((-1.0)*x9743))+(((-1.0)*sj1*x9742))+(((-1.0)*r11*x9739*x9746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9751=gconst2*gconst2;
IkReal x9752=gconst1*gconst1;
IkReal x9753=(gconst1*r00);
IkReal x9754=(r11*sj3);
IkReal x9755=((1.0)*gconst2);
IkReal x9756=(cj3*r12);
IkReal x9757=(cj3*r11);
IkReal x9758=(gconst2*r01);
IkReal x9759=(cj3*r10);
IkReal x9760=(r10*sj3);
CheckValue<IkReal> x9761 = IKatan2WithCheck(IkReal((((x9753*x9756))+((x9756*x9758)))),IkReal(((((-1.0)*x9753*x9755*x9759))+((gconst1*x9757*x9758))+(((-1.0)*r01*x9751*x9759))+((r00*x9752*x9757)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9761.valid){
continue;
}
CheckValue<IkReal> x9762=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9753*x9754*x9755))+((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9755*x9760))+((r01*x9752*x9754))+((r00*x9751*x9760)))),-1);
if(!x9762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9761.value)+(((1.5707963267949)*(x9762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9763=IKsin(j4);
IkReal x9764=IKcos(j4);
IkReal x9765=(sj1*sj2);
IkReal x9766=(gconst1*sj3);
IkReal x9767=(cj3*gconst1);
IkReal x9768=(cj3*gconst2);
IkReal x9769=((1.0)*cj2);
IkReal x9770=(cj1*sj2);
IkReal x9771=(gconst2*sj3);
IkReal x9772=(cj1*x9769);
IkReal x9773=((1.0)*x9764);
IkReal x9774=((1.0)*x9763);
IkReal x9775=(gconst1*x9763);
IkReal x9776=(cj3*x9763);
IkReal x9777=(x9764*x9771);
evalcond[0]=((((-1.0)*r22*x9773))+(((-1.0)*gconst2*r20*x9774))+((r21*x9775)));
evalcond[1]=((((-1.0)*gconst2*r10*x9774))+(((-1.0)*r12*x9773))+((r11*x9775)));
evalcond[2]=((-1.0)+((r01*x9775))+(((-1.0)*gconst2*r00*x9774))+(((-1.0)*r02*x9773)));
evalcond[3]=(((r00*x9766))+((r01*x9771))+((r01*x9764*x9767))+((r02*x9776))+(((-1.0)*r00*x9768*x9773)));
evalcond[4]=(((r00*x9767))+((r00*x9777))+((r01*x9768))+(((-1.0)*r01*x9766*x9773))+(((-1.0)*r02*sj3*x9774)));
evalcond[5]=(((cj2*sj1))+((r22*x9776))+(((-1.0)*r20*x9768*x9773))+x9770+((r21*x9764*x9767))+((r21*x9771))+((r20*x9766)));
evalcond[6]=(((r12*x9776))+((r10*x9766))+x9765+((r11*x9764*x9767))+(((-1.0)*r10*x9768*x9773))+(((-1.0)*x9772))+((r11*x9771)));
evalcond[7]=((((-1.0)*r21*x9766*x9773))+x9765+((r21*x9768))+((r20*x9777))+((r20*x9767))+(((-1.0)*x9772))+(((-1.0)*r22*sj3*x9774)));
evalcond[8]=(((r10*x9767))+((r10*x9777))+(((-1.0)*x9770))+(((-1.0)*r12*sj3*x9774))+(((-1.0)*sj1*x9769))+((r11*x9768))+(((-1.0)*r11*x9766*x9773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9778=((1.0)*gconst2);
CheckValue<IkReal> x9779 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9779.valid){
continue;
}
CheckValue<IkReal> x9780=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9778)))),-1);
if(!x9780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9779.value)+(((1.5707963267949)*(x9780.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9781=IKsin(j4);
IkReal x9782=IKcos(j4);
IkReal x9783=(sj1*sj2);
IkReal x9784=(gconst1*sj3);
IkReal x9785=(cj3*gconst1);
IkReal x9786=(cj3*gconst2);
IkReal x9787=((1.0)*cj2);
IkReal x9788=(cj1*sj2);
IkReal x9789=(gconst2*sj3);
IkReal x9790=(cj1*x9787);
IkReal x9791=((1.0)*x9782);
IkReal x9792=((1.0)*x9781);
IkReal x9793=(gconst1*x9781);
IkReal x9794=(cj3*x9781);
IkReal x9795=(x9782*x9789);
evalcond[0]=(((r21*x9793))+(((-1.0)*gconst2*r20*x9792))+(((-1.0)*r22*x9791)));
evalcond[1]=(((r11*x9793))+(((-1.0)*gconst2*r10*x9792))+(((-1.0)*r12*x9791)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9791))+(((-1.0)*gconst2*r00*x9792))+((r01*x9793)));
evalcond[3]=(((r00*x9784))+((r02*x9794))+((r01*x9789))+(((-1.0)*r00*x9786*x9791))+((r01*x9782*x9785)));
evalcond[4]=(((r00*x9785))+((r01*x9786))+(((-1.0)*r02*sj3*x9792))+(((-1.0)*r01*x9784*x9791))+((r00*x9795)));
evalcond[5]=(((cj2*sj1))+((r21*x9789))+((r21*x9782*x9785))+x9788+(((-1.0)*r20*x9786*x9791))+((r20*x9784))+((r22*x9794)));
evalcond[6]=(((r12*x9794))+((r11*x9782*x9785))+(((-1.0)*x9790))+x9783+((r10*x9784))+(((-1.0)*r10*x9786*x9791))+((r11*x9789)));
evalcond[7]=((((-1.0)*r21*x9784*x9791))+((r21*x9786))+((r20*x9795))+(((-1.0)*x9790))+x9783+((r20*x9785))+(((-1.0)*r22*sj3*x9792)));
evalcond[8]=(((r10*x9795))+(((-1.0)*r12*sj3*x9792))+(((-1.0)*sj1*x9787))+(((-1.0)*r11*x9784*x9791))+((r10*x9785))+((r11*x9786))+(((-1.0)*x9788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9796=((-1.0)*r20);
IkReal x9797=x8882;
CheckValue<IkReal> x9799 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9796),IKFAST_ATAN2_MAGTHRESH);
if(!x9799.valid){
continue;
}
IkReal x9798=((-1.0)*(x9799.value));
sj5=gconst1;
cj5=gconst2;
j5=x9798;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9798;
IkReal gconst1=(r21*x9797);
IkReal gconst2=(x9796*x9797);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9800=((-1.0)*r20);
IkReal x9801=x8882;
CheckValue<IkReal> x9803 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9800),IKFAST_ATAN2_MAGTHRESH);
if(!x9803.valid){
continue;
}
IkReal x9802=((-1.0)*(x9803.value));
sj5=gconst1;
cj5=gconst2;
j5=x9802;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9802;
IkReal gconst1=(r21*x9801);
IkReal gconst2=(x9800*x9801);
CheckValue<IkReal> x9811=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9811.valid){
continue;
}
IkReal x9804=x9811.value;
IkReal x9805=(sj3*x9804);
IkReal x9806=(r11*x9805);
IkReal x9807=(r00*x9805);
IkReal x9808=(r01*x9805);
IkReal x9809=(r10*x9805);
IkReal x9810=(r20*r21*x9805);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9806))+((r10*r20*r21*x9808))+((r01*x9806*(r21*r21)))+((r10*x9807*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9812=gconst1*gconst1;
IkReal x9813=gconst2*gconst2;
IkReal x9814=((1.0)*cj3);
IkReal x9815=(gconst2*r10);
IkReal x9816=(r01*sj3);
IkReal x9817=(gconst1*r00*sj3);
IkReal x9818=(gconst1*gconst2*r11);
IkReal x9819=(r10*x9813);
IkReal x9820=(r11*x9812);
CheckValue<IkReal> x9821=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9814))+(((-1.0)*r00*x9814*x9819))+((cj3*gconst1*r01*x9815))+((cj3*r00*x9818))+(((-1.0)*r01*x9814*x9820)))),-1);
if(!x9821.valid){
continue;
}
CheckValue<IkReal> x9822 = IKatan2WithCheck(IkReal((((r12*x9817))+((gconst2*r12*x9816)))),IkReal((((r00*sj3*x9820))+((x9816*x9818))+(((-1.0)*x9815*x9817))+(((-1.0)*x9816*x9819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9821.value)))+(x9822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9823=IKsin(j4);
IkReal x9824=IKcos(j4);
IkReal x9825=(cj2*sj1);
IkReal x9826=(cj1*sj2);
IkReal x9827=(gconst1*sj3);
IkReal x9828=(cj3*gconst1);
IkReal x9829=(sj1*sj2);
IkReal x9830=(cj3*gconst2);
IkReal x9831=(cj1*cj2);
IkReal x9832=(gconst2*sj3);
IkReal x9833=((1.0)*x9824);
IkReal x9834=((1.0)*x9823);
IkReal x9835=(gconst1*x9823);
IkReal x9836=(cj3*x9823);
IkReal x9837=(x9825+x9826);
IkReal x9838=(x9824*x9832);
evalcond[0]=(((r21*x9835))+(((-1.0)*r22*x9833))+(((-1.0)*gconst2*r20*x9834)));
evalcond[1]=(((r11*x9835))+(((-1.0)*gconst2*r10*x9834))+(((-1.0)*r12*x9833)));
evalcond[2]=((1.0)+((r01*x9835))+(((-1.0)*r02*x9833))+(((-1.0)*gconst2*r00*x9834)));
evalcond[3]=(((r01*x9832))+((r01*x9824*x9828))+((r00*x9827))+((r02*x9836))+(((-1.0)*r00*x9830*x9833)));
evalcond[4]=((((-1.0)*r02*sj3*x9834))+((r00*x9838))+((r01*x9830))+((r00*x9828))+(((-1.0)*r01*x9827*x9833)));
evalcond[5]=(((r20*x9827))+((r21*x9832))+((r22*x9836))+(((-1.0)*r20*x9830*x9833))+((r21*x9824*x9828))+x9837);
evalcond[6]=(((r11*x9824*x9828))+((r11*x9832))+((r12*x9836))+(((-1.0)*r10*x9830*x9833))+x9831+(((-1.0)*x9829))+((r10*x9827)));
evalcond[7]=(((r11*x9830))+((r10*x9838))+(((-1.0)*r11*x9827*x9833))+(((-1.0)*r12*sj3*x9834))+x9837+((r10*x9828)));
evalcond[8]=(((r20*x9828))+(((-1.0)*x9831))+((r21*x9830))+(((-1.0)*r21*x9827*x9833))+(((-1.0)*r22*sj3*x9834))+((r20*x9838))+x9829);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9839=gconst2*gconst2;
IkReal x9840=gconst1*gconst1;
IkReal x9841=(gconst1*r00);
IkReal x9842=(r11*sj3);
IkReal x9843=((1.0)*gconst2);
IkReal x9844=(cj3*r12);
IkReal x9845=(cj3*r11);
IkReal x9846=(gconst2*r01);
IkReal x9847=(cj3*r10);
IkReal x9848=(r10*sj3);
CheckValue<IkReal> x9849 = IKatan2WithCheck(IkReal((((x9844*x9846))+((x9841*x9844)))),IkReal(((((-1.0)*r01*x9839*x9847))+((gconst1*x9845*x9846))+((r00*x9840*x9845))+(((-1.0)*x9841*x9843*x9847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9849.valid){
continue;
}
CheckValue<IkReal> x9850=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9839*x9848))+(((-1.0)*gconst1*r01*x9843*x9848))+((r01*x9840*x9842))+(((-1.0)*x9841*x9842*x9843)))),-1);
if(!x9850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9849.value)+(((1.5707963267949)*(x9850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9851=IKsin(j4);
IkReal x9852=IKcos(j4);
IkReal x9853=(cj2*sj1);
IkReal x9854=(cj1*sj2);
IkReal x9855=(gconst1*sj3);
IkReal x9856=(cj3*gconst1);
IkReal x9857=(sj1*sj2);
IkReal x9858=(cj3*gconst2);
IkReal x9859=(cj1*cj2);
IkReal x9860=(gconst2*sj3);
IkReal x9861=((1.0)*x9852);
IkReal x9862=((1.0)*x9851);
IkReal x9863=(gconst1*x9851);
IkReal x9864=(cj3*x9851);
IkReal x9865=(x9853+x9854);
IkReal x9866=(x9852*x9860);
evalcond[0]=((((-1.0)*r22*x9861))+((r21*x9863))+(((-1.0)*gconst2*r20*x9862)));
evalcond[1]=((((-1.0)*r12*x9861))+((r11*x9863))+(((-1.0)*gconst2*r10*x9862)));
evalcond[2]=((1.0)+((r01*x9863))+(((-1.0)*gconst2*r00*x9862))+(((-1.0)*r02*x9861)));
evalcond[3]=(((r01*x9860))+((r02*x9864))+((r00*x9855))+(((-1.0)*r00*x9858*x9861))+((r01*x9852*x9856)));
evalcond[4]=(((r00*x9866))+((r00*x9856))+((r01*x9858))+(((-1.0)*r01*x9855*x9861))+(((-1.0)*r02*sj3*x9862)));
evalcond[5]=(((r22*x9864))+((r20*x9855))+(((-1.0)*r20*x9858*x9861))+((r21*x9860))+((r21*x9852*x9856))+x9865);
evalcond[6]=(((r10*x9855))+(((-1.0)*x9857))+((r11*x9860))+((r12*x9864))+((r11*x9852*x9856))+x9859+(((-1.0)*r10*x9858*x9861)));
evalcond[7]=(((r10*x9856))+((r11*x9858))+(((-1.0)*r11*x9855*x9861))+((r10*x9866))+(((-1.0)*r12*sj3*x9862))+x9865);
evalcond[8]=(((r21*x9858))+(((-1.0)*x9859))+(((-1.0)*r21*x9855*x9861))+((r20*x9856))+((r20*x9866))+x9857+(((-1.0)*r22*sj3*x9862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9867 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9867.valid){
continue;
}
CheckValue<IkReal> x9868=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9867.value)+(((1.5707963267949)*(x9868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9869=IKsin(j4);
IkReal x9870=IKcos(j4);
IkReal x9871=(cj2*sj1);
IkReal x9872=(cj1*sj2);
IkReal x9873=(gconst1*sj3);
IkReal x9874=(cj3*gconst1);
IkReal x9875=(sj1*sj2);
IkReal x9876=(cj3*gconst2);
IkReal x9877=(cj1*cj2);
IkReal x9878=(gconst2*sj3);
IkReal x9879=((1.0)*x9870);
IkReal x9880=((1.0)*x9869);
IkReal x9881=(gconst1*x9869);
IkReal x9882=(cj3*x9869);
IkReal x9883=(x9872+x9871);
IkReal x9884=(x9870*x9878);
evalcond[0]=(((r21*x9881))+(((-1.0)*gconst2*r20*x9880))+(((-1.0)*r22*x9879)));
evalcond[1]=(((r11*x9881))+(((-1.0)*gconst2*r10*x9880))+(((-1.0)*r12*x9879)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9880))+((r01*x9881))+(((-1.0)*r02*x9879)));
evalcond[3]=((((-1.0)*r00*x9876*x9879))+((r00*x9873))+((r01*x9878))+((r01*x9870*x9874))+((r02*x9882)));
evalcond[4]=((((-1.0)*r01*x9873*x9879))+((r00*x9884))+(((-1.0)*r02*sj3*x9880))+((r00*x9874))+((r01*x9876)));
evalcond[5]=(((r21*x9870*x9874))+((r21*x9878))+((r20*x9873))+(((-1.0)*r20*x9876*x9879))+((r22*x9882))+x9883);
evalcond[6]=(((r12*x9882))+(((-1.0)*x9875))+((r10*x9873))+(((-1.0)*r10*x9876*x9879))+((r11*x9878))+x9877+((r11*x9870*x9874)));
evalcond[7]=(((r10*x9874))+(((-1.0)*r11*x9873*x9879))+(((-1.0)*r12*sj3*x9880))+((r10*x9884))+((r11*x9876))+x9883);
evalcond[8]=((((-1.0)*r22*sj3*x9880))+((r20*x9884))+(((-1.0)*x9877))+((r21*x9876))+((r20*x9874))+(((-1.0)*r21*x9873*x9879))+x9875);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9885=((-1.0)*r20);
IkReal x9886=((-1.0)*px);
CheckValue<IkReal> x9888 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9885),IKFAST_ATAN2_MAGTHRESH);
if(!x9888.valid){
continue;
}
IkReal x9887=((-1.0)*(x9888.value));
sj5=gconst1;
cj5=gconst2;
j5=x9887;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9886);
rxp1_1=(px*r21);
rxp1_2=(r11*x9886);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9887;
IkReal gconst1=r21;
IkReal gconst2=x9885;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9889=((-1.0)*r20);
IkReal x9890=((-1.0)*px);
CheckValue<IkReal> x9892 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9889),IKFAST_ATAN2_MAGTHRESH);
if(!x9892.valid){
continue;
}
IkReal x9891=((-1.0)*(x9892.value));
sj5=gconst1;
cj5=gconst2;
j5=x9891;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9890);
rxp1_1=(px*r21);
rxp1_2=(r11*x9890);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9891;
IkReal gconst1=r21;
IkReal gconst2=x9889;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9893=((-1.0)*r20);
IkReal x9894=((-1.0)*px);
CheckValue<IkReal> x9896 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9893),IKFAST_ATAN2_MAGTHRESH);
if(!x9896.valid){
continue;
}
IkReal x9895=((-1.0)*(x9896.value));
sj5=gconst1;
cj5=gconst2;
j5=x9895;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9894);
rxp1_1=(px*r21);
rxp1_2=(r11*x9894);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9895;
IkReal gconst1=r21;
IkReal gconst2=x9893;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9897=((-1.0)*r20);
IkReal x9898=((-1.0)*px);
CheckValue<IkReal> x9900 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9897),IKFAST_ATAN2_MAGTHRESH);
if(!x9900.valid){
continue;
}
IkReal x9899=((-1.0)*(x9900.value));
sj5=gconst1;
cj5=gconst2;
j5=x9899;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9898);
rxp1_1=(px*r21);
rxp1_2=(r11*x9898);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9899;
IkReal gconst1=r21;
IkReal gconst2=x9897;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9901=((-1.0)*r20);
IkReal x9902=((-1.0)*px);
CheckValue<IkReal> x9904 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9901),IKFAST_ATAN2_MAGTHRESH);
if(!x9904.valid){
continue;
}
IkReal x9903=((-1.0)*(x9904.value));
sj5=gconst1;
cj5=gconst2;
j5=x9903;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9902);
rxp1_1=(px*r21);
rxp1_2=(r11*x9902);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9903;
IkReal gconst1=r21;
IkReal gconst2=x9901;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9905=((-1.0)*r20);
IkReal x9906=((-1.0)*px);
CheckValue<IkReal> x9908 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9905),IKFAST_ATAN2_MAGTHRESH);
if(!x9908.valid){
continue;
}
IkReal x9907=((-1.0)*(x9908.value));
sj5=gconst1;
cj5=gconst2;
j5=x9907;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9906);
rxp1_1=(px*r21);
rxp1_2=(r11*x9906);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9907;
IkReal gconst1=r21;
IkReal gconst2=x9905;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9911=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9911.valid){
continue;
}
IkReal x9909=x9911.value;
IkReal x9910=(sj0*x9909);
cj4array[0]=(((cj1*sj2*x9910))+((cj2*sj1*x9910)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9912=IKsin(j4);
IkReal x9913=IKcos(j4);
IkReal x9914=(gconst1*x9912);
IkReal x9915=((1.0)*x9913);
IkReal x9916=((1.0)*gconst2*x9912);
evalcond[0]=((-1.0)*r02*x9912);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9915)));
evalcond[2]=(((r21*x9914))+(((-1.0)*r20*x9916)));
evalcond[3]=((((-1.0)*r10*x9916))+((r11*x9914)));
evalcond[4]=((((-1.0)*gconst1*r21*x9915))+((gconst2*r20*x9913))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9918=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9918.valid){
continue;
}
IkReal x9917=x9918.value;
cj4array[0]=(((cj1*cj2*x9917))+(((-1.0)*sj1*sj2*x9917)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9919=IKsin(j4);
IkReal x9920=IKcos(j4);
IkReal x9921=(gconst2*r10);
IkReal x9922=((1.0)*sj0);
IkReal x9923=((1.0)*x9919);
IkReal x9924=(gconst1*x9919);
IkReal x9925=((1.0)*x9920);
evalcond[0]=((-1.0)*r02*x9919);
evalcond[1]=((((-1.0)*r02*x9925))+(((-1.0)*x9922)));
evalcond[2]=((((-1.0)*gconst2*r20*x9923))+((r21*x9924)));
evalcond[3]=((((-1.0)*x9921*x9923))+((r11*x9924)));
evalcond[4]=(((x9920*x9921))+(((-1.0)*cj2*sj1*x9922))+(((-1.0)*cj1*sj2*x9922))+(((-1.0)*gconst1*r11*x9925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9926=IKPowWithIntegerCheck(r02,-1);
if(!x9926.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9926.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9927=IKsin(j4);
IkReal x9928=IKcos(j4);
IkReal x9929=(gconst2*r10);
IkReal x9930=((1.0)*sj0);
IkReal x9931=(gconst1*r11);
IkReal x9932=(gconst1*r21);
IkReal x9933=(gconst2*r20);
IkReal x9934=((1.0)*x9927);
IkReal x9935=((1.0)*x9928);
evalcond[0]=((-1.0)*r02*x9927);
evalcond[1]=(((x9927*x9932))+(((-1.0)*x9933*x9934)));
evalcond[2]=(((x9927*x9931))+(((-1.0)*x9929*x9934)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x9928*x9933))+(((-1.0)*x9932*x9935)));
evalcond[4]=((((-1.0)*cj2*sj1*x9930))+(((-1.0)*cj1*sj2*x9930))+((x9928*x9929))+(((-1.0)*x9931*x9935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9936=((-1.0)*r20);
IkReal x9937=((-1.0)*px);
CheckValue<IkReal> x9939 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9936),IKFAST_ATAN2_MAGTHRESH);
if(!x9939.valid){
continue;
}
IkReal x9938=((-1.0)*(x9939.value));
sj5=gconst1;
cj5=gconst2;
j5=x9938;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9937);
rxp1_1=(px*r21);
rxp1_2=(r11*x9937);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9938;
IkReal gconst1=r21;
IkReal gconst2=x9936;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9940=((-1.0)*r20);
IkReal x9941=((-1.0)*px);
CheckValue<IkReal> x9943 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9940),IKFAST_ATAN2_MAGTHRESH);
if(!x9943.valid){
continue;
}
IkReal x9942=((-1.0)*(x9943.value));
sj5=gconst1;
cj5=gconst2;
j5=x9942;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9941);
rxp1_1=(px*r21);
rxp1_2=(r11*x9941);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9942;
IkReal gconst1=r21;
IkReal gconst2=x9940;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9944=((-1.0)*r20);
IkReal x9945=((-1.0)*px);
CheckValue<IkReal> x9947 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9944),IKFAST_ATAN2_MAGTHRESH);
if(!x9947.valid){
continue;
}
IkReal x9946=((-1.0)*(x9947.value));
sj5=gconst1;
cj5=gconst2;
j5=x9946;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9945);
rxp1_1=(px*r21);
rxp1_2=(r11*x9945);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9946;
IkReal gconst1=r21;
IkReal gconst2=x9944;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9950=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9950.valid){
continue;
}
IkReal x9948=x9950.value;
IkReal x9949=(sj0*x9948);
cj4array[0]=(((cj1*sj2*x9949))+((cj2*sj1*x9949)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9951=IKsin(j4);
IkReal x9952=IKcos(j4);
IkReal x9953=((1.0)*gconst2);
IkReal x9954=(gconst1*r21);
evalcond[0]=(r02*x9951);
evalcond[1]=((((-1.0)*r02*x9952))+(((-1.0)*sj0)));
evalcond[2]=(((x9951*x9954))+(((-1.0)*r20*x9951*x9953)));
evalcond[3]=((((-1.0)*r10*x9951*x9953))+((gconst1*r11*x9951)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x9952*x9954))+(((-1.0)*r20*x9952*x9953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9956=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9956.valid){
continue;
}
IkReal x9955=x9956.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9955))+((cj1*cj2*x9955)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9957=IKsin(j4);
IkReal x9958=IKcos(j4);
IkReal x9959=((1.0)*sj0);
IkReal x9960=(gconst1*x9957);
IkReal x9961=((1.0)*x9958);
IkReal x9962=((1.0)*gconst2*x9957);
evalcond[0]=(r02*x9957);
evalcond[1]=((((-1.0)*r02*x9961))+(((-1.0)*x9959)));
evalcond[2]=(((r21*x9960))+(((-1.0)*r20*x9962)));
evalcond[3]=((((-1.0)*r10*x9962))+((r11*x9960)));
evalcond[4]=((((-1.0)*cj2*sj1*x9959))+(((-1.0)*cj1*sj2*x9959))+((gconst1*r11*x9958))+(((-1.0)*gconst2*r10*x9961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9963=IKPowWithIntegerCheck(r02,-1);
if(!x9963.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9963.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9964=IKsin(j4);
IkReal x9965=IKcos(j4);
IkReal x9966=(gconst1*r21);
IkReal x9967=((1.0)*sj0);
IkReal x9968=(gconst1*r11);
IkReal x9969=((1.0)*gconst2*r10);
IkReal x9970=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9964);
evalcond[1]=(((x9964*x9966))+(((-1.0)*x9964*x9970)));
evalcond[2]=(((x9964*x9968))+(((-1.0)*x9964*x9969)));
evalcond[3]=(((x9965*x9966))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9965*x9970)));
evalcond[4]=((((-1.0)*cj2*sj1*x9967))+(((-1.0)*cj1*sj2*x9967))+((x9965*x9968))+(((-1.0)*x9965*x9969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9972=IKPowWithIntegerCheck(r02,-1);
if(!x9972.valid){
continue;
}
IkReal x9971=x9972.value;
CheckValue<IkReal> x9973=IKPowWithIntegerCheck(cj3,-1);
if(!x9973.valid){
continue;
}
if( IKabs((x9971*(x9973.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9971)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9971*(x9973.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x9971))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9971*(x9973.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x9971));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9974=IKsin(j4);
IkReal x9975=IKcos(j4);
IkReal x9976=(gconst2*r10);
IkReal x9977=(gconst1*r11);
IkReal x9978=(sj1*sj2);
IkReal x9979=(gconst2*r20);
IkReal x9980=(cj2*sj1);
IkReal x9981=((1.0)*sj0);
IkReal x9982=(gconst1*r20);
IkReal x9983=(gconst2*r11);
IkReal x9984=(gconst1*r21);
IkReal x9985=((1.0)*cj0);
IkReal x9986=(gconst1*r10);
IkReal x9987=(cj1*sj2);
IkReal x9988=(gconst2*r21);
IkReal x9989=(sj3*x9975);
IkReal x9990=((1.0)*cj1*cj2);
IkReal x9991=(cj3*x9975);
IkReal x9992=(r02*x9974);
IkReal x9993=((1.0)*x9974);
evalcond[0]=((((-1.0)*r02*x9975))+(((-1.0)*x9981)));
evalcond[1]=(((x9974*x9984))+(((-1.0)*x9979*x9993)));
evalcond[2]=(((x9974*x9977))+cj0+(((-1.0)*x9976*x9993)));
evalcond[3]=(((cj3*x9992))+((cj0*x9978))+(((-1.0)*cj1*cj2*x9985)));
evalcond[4]=((((-1.0)*sj3*x9992))+(((-1.0)*x9980*x9985))+(((-1.0)*x9985*x9987)));
evalcond[5]=(((x9984*x9991))+((sj3*x9988))+((sj3*x9982))+(((-1.0)*x9979*x9991))+x9987+x9980);
evalcond[6]=(((cj3*x9988))+((cj3*x9982))+(((-1.0)*x9984*x9989))+((x9979*x9989))+x9978+(((-1.0)*x9990)));
evalcond[7]=(((x9977*x9991))+(((-1.0)*x9976*x9991))+((sj3*x9986))+((sj3*x9983))+((sj0*x9978))+(((-1.0)*cj1*cj2*x9981)));
evalcond[8]=(((cj3*x9986))+((cj3*x9983))+(((-1.0)*x9981*x9987))+((x9976*x9989))+(((-1.0)*x9980*x9981))+(((-1.0)*x9977*x9989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9994=((1.0)*sj3);
IkReal x9995=((1.0)*gconst2);
CheckValue<IkReal> x9996=IKPowWithIntegerCheck(((((-1.0)*r10*x9995))+((gconst1*r11))),-1);
if(!x9996.valid){
continue;
}
CheckValue<IkReal> x9997=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9995))),-1);
if(!x9997.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9996.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9997.value)*(((((-1.0)*gconst1*r20*x9994))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x9994)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9996.value)))+IKsqr(((x9997.value)*(((((-1.0)*gconst1*r20*x9994))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x9994))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9996.value)), ((x9997.value)*(((((-1.0)*gconst1*r20*x9994))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x9994))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9998=IKsin(j4);
IkReal x9999=IKcos(j4);
IkReal x10000=(gconst2*r10);
IkReal x10001=(gconst1*r11);
IkReal x10002=(sj1*sj2);
IkReal x10003=(gconst2*r20);
IkReal x10004=(cj2*sj1);
IkReal x10005=((1.0)*sj0);
IkReal x10006=(gconst1*r20);
IkReal x10007=(gconst2*r11);
IkReal x10008=(gconst1*r21);
IkReal x10009=((1.0)*cj0);
IkReal x10010=(gconst1*r10);
IkReal x10011=(cj1*sj2);
IkReal x10012=(gconst2*r21);
IkReal x10013=(sj3*x9999);
IkReal x10014=((1.0)*cj1*cj2);
IkReal x10015=(cj3*x9999);
IkReal x10016=(r02*x9998);
IkReal x10017=((1.0)*x9998);
evalcond[0]=((((-1.0)*r02*x9999))+(((-1.0)*x10005)));
evalcond[1]=(((x10008*x9998))+(((-1.0)*x10003*x10017)));
evalcond[2]=(cj0+((x10001*x9998))+(((-1.0)*x10000*x10017)));
evalcond[3]=(((cj0*x10002))+((cj3*x10016))+(((-1.0)*cj1*cj2*x10009)));
evalcond[4]=((((-1.0)*x10009*x10011))+(((-1.0)*x10004*x10009))+(((-1.0)*sj3*x10016)));
evalcond[5]=((((-1.0)*x10003*x10015))+x10011+x10004+((sj3*x10012))+((sj3*x10006))+((x10008*x10015)));
evalcond[6]=((((-1.0)*x10008*x10013))+((cj3*x10012))+((cj3*x10006))+x10002+((x10003*x10013))+(((-1.0)*x10014)));
evalcond[7]=(((x10001*x10015))+(((-1.0)*cj1*cj2*x10005))+(((-1.0)*x10000*x10015))+((sj3*x10010))+((sj3*x10007))+((sj0*x10002)));
evalcond[8]=((((-1.0)*x10005*x10011))+(((-1.0)*x10004*x10005))+((cj3*x10010))+((x10000*x10013))+((cj3*x10007))+(((-1.0)*x10001*x10013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10018=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10018.valid){
continue;
}
CheckValue<IkReal> x10019=IKPowWithIntegerCheck(r02,-1);
if(!x10019.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10018.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10019.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10018.value)))+IKsqr(((-1.0)*sj0*(x10019.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10018.value)), ((-1.0)*sj0*(x10019.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10020=IKsin(j4);
IkReal x10021=IKcos(j4);
IkReal x10022=(gconst2*r10);
IkReal x10023=(gconst1*r11);
IkReal x10024=(sj1*sj2);
IkReal x10025=(gconst2*r20);
IkReal x10026=(cj2*sj1);
IkReal x10027=((1.0)*sj0);
IkReal x10028=(gconst1*r20);
IkReal x10029=(gconst2*r11);
IkReal x10030=(gconst1*r21);
IkReal x10031=((1.0)*cj0);
IkReal x10032=(gconst1*r10);
IkReal x10033=(cj1*sj2);
IkReal x10034=(gconst2*r21);
IkReal x10035=(sj3*x10021);
IkReal x10036=((1.0)*cj1*cj2);
IkReal x10037=(cj3*x10021);
IkReal x10038=(r02*x10020);
IkReal x10039=((1.0)*x10020);
evalcond[0]=((((-1.0)*r02*x10021))+(((-1.0)*x10027)));
evalcond[1]=(((x10020*x10030))+(((-1.0)*x10025*x10039)));
evalcond[2]=(cj0+((x10020*x10023))+(((-1.0)*x10022*x10039)));
evalcond[3]=(((cj0*x10024))+((cj3*x10038))+(((-1.0)*cj1*cj2*x10031)));
evalcond[4]=((((-1.0)*sj3*x10038))+(((-1.0)*x10031*x10033))+(((-1.0)*x10026*x10031)));
evalcond[5]=(((sj3*x10034))+((sj3*x10028))+x10033+x10026+((x10030*x10037))+(((-1.0)*x10025*x10037)));
evalcond[6]=((((-1.0)*x10030*x10035))+x10024+((cj3*x10034))+(((-1.0)*x10036))+((cj3*x10028))+((x10025*x10035)));
evalcond[7]=(((sj0*x10024))+((sj3*x10032))+((sj3*x10029))+(((-1.0)*cj1*cj2*x10027))+((x10023*x10037))+(((-1.0)*x10022*x10037)));
evalcond[8]=((((-1.0)*x10023*x10035))+((cj3*x10032))+((x10022*x10035))+((cj3*x10029))+(((-1.0)*x10027*x10033))+(((-1.0)*x10026*x10027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10040=gconst1*gconst1;
IkReal x10041=r21*r21;
IkReal x10042=gconst2*gconst2;
IkReal x10043=r20*r20;
IkReal x10044=(gconst2*r20);
IkReal x10045=(cj1*cj2);
IkReal x10046=(sj1*sj2);
IkReal x10047=(gconst1*r21);
IkReal x10048=(cj3*gconst2);
IkReal x10049=(cj3*r20);
CheckValue<IkReal> x10050 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10045))+((gconst1*r22*x10049))+((r22*x10046))+((r21*r22*x10048)))),IkReal((((gconst1*x10041*x10048))+((x10044*x10045))+((x10046*x10047))+(((-1.0)*r21*x10042*x10049))+(((-1.0)*x10045*x10047))+(((-1.0)*x10044*x10046))+(((-1.0)*gconst1*x10043*x10048))+((r21*x10040*x10049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10050.valid){
continue;
}
CheckValue<IkReal> x10051=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10042*x10043))+(((-2.0)*sj3*x10044*x10047))+((sj3*x10040*x10041)))),-1);
if(!x10051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10050.value)+(((1.5707963267949)*(x10051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10052=IKsin(j4);
IkReal x10053=IKcos(j4);
IkReal x10054=(cj3*gconst1);
IkReal x10055=(gconst1*r01);
IkReal x10056=(gconst1*r11);
IkReal x10057=(sj1*sj2);
IkReal x10058=(cj3*gconst2);
IkReal x10059=(gconst1*sj3);
IkReal x10060=(gconst2*sj3);
IkReal x10061=((1.0)*sj0);
IkReal x10062=(cj1*sj2);
IkReal x10063=((1.0)*x10053);
IkReal x10064=((1.0)*x10052);
IkReal x10065=((1.0)*cj1*cj2);
IkReal x10066=(cj3*x10052);
IkReal x10067=((1.0)*cj2*sj1);
IkReal x10068=(x10053*x10060);
evalcond[0]=(((gconst1*r21*x10052))+(((-1.0)*r22*x10063))+(((-1.0)*gconst2*r20*x10064)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10064))+(((-1.0)*r12*x10063))+((x10052*x10056)));
evalcond[2]=((((-1.0)*x10061))+(((-1.0)*gconst2*r00*x10064))+((x10052*x10055))+(((-1.0)*r02*x10063)));
evalcond[3]=(((cj2*sj1))+((r20*x10059))+(((-1.0)*r20*x10058*x10063))+((r22*x10066))+x10062+((r21*x10060))+((r21*x10053*x10054)));
evalcond[4]=((((-1.0)*r22*sj3*x10064))+((r20*x10054))+((r20*x10068))+(((-1.0)*x10065))+(((-1.0)*r21*x10059*x10063))+x10057+((r21*x10058)));
evalcond[5]=((((-1.0)*r00*x10058*x10063))+(((-1.0)*cj0*x10065))+((r00*x10059))+((r01*x10060))+((r01*x10053*x10054))+((r02*x10066))+((cj0*x10057)));
evalcond[6]=(((r12*x10066))+((r10*x10059))+(((-1.0)*cj1*cj2*x10061))+((sj0*x10057))+(((-1.0)*r10*x10058*x10063))+((r11*x10053*x10054))+((r11*x10060)));
evalcond[7]=((((-1.0)*cj0*x10067))+((r00*x10068))+((r01*x10058))+((r00*x10054))+(((-1.0)*cj0*x10062))+(((-1.0)*sj3*x10055*x10063))+(((-1.0)*r02*sj3*x10064)));
evalcond[8]=(((r10*x10068))+((r10*x10054))+(((-1.0)*r12*sj3*x10064))+(((-1.0)*sj3*x10056*x10063))+(((-1.0)*x10061*x10062))+(((-1.0)*cj2*sj1*x10061))+((r11*x10058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10069=((1.0)*gconst2);
CheckValue<IkReal> x10070 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10069))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10070.valid){
continue;
}
CheckValue<IkReal> x10071=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10069)))),-1);
if(!x10071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10070.value)+(((1.5707963267949)*(x10071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10072=IKsin(j4);
IkReal x10073=IKcos(j4);
IkReal x10074=(cj3*gconst1);
IkReal x10075=(gconst1*r01);
IkReal x10076=(gconst1*r11);
IkReal x10077=(sj1*sj2);
IkReal x10078=(cj3*gconst2);
IkReal x10079=(gconst1*sj3);
IkReal x10080=(gconst2*sj3);
IkReal x10081=((1.0)*sj0);
IkReal x10082=(cj1*sj2);
IkReal x10083=((1.0)*x10073);
IkReal x10084=((1.0)*x10072);
IkReal x10085=((1.0)*cj1*cj2);
IkReal x10086=(cj3*x10072);
IkReal x10087=((1.0)*cj2*sj1);
IkReal x10088=(x10073*x10080);
evalcond[0]=((((-1.0)*gconst2*r20*x10084))+((gconst1*r21*x10072))+(((-1.0)*r22*x10083)));
evalcond[1]=(cj0+((x10072*x10076))+(((-1.0)*gconst2*r10*x10084))+(((-1.0)*r12*x10083)));
evalcond[2]=(((x10072*x10075))+(((-1.0)*x10081))+(((-1.0)*r02*x10083))+(((-1.0)*gconst2*r00*x10084)));
evalcond[3]=(((cj2*sj1))+((r20*x10079))+((r21*x10073*x10074))+x10082+((r21*x10080))+(((-1.0)*r20*x10078*x10083))+((r22*x10086)));
evalcond[4]=(((r20*x10074))+((r20*x10088))+(((-1.0)*r21*x10079*x10083))+(((-1.0)*x10085))+x10077+((r21*x10078))+(((-1.0)*r22*sj3*x10084)));
evalcond[5]=(((r01*x10080))+((r00*x10079))+((r02*x10086))+((r01*x10073*x10074))+((cj0*x10077))+(((-1.0)*r00*x10078*x10083))+(((-1.0)*cj0*x10085)));
evalcond[6]=(((r10*x10079))+((r11*x10073*x10074))+(((-1.0)*cj1*cj2*x10081))+((sj0*x10077))+(((-1.0)*r10*x10078*x10083))+((r12*x10086))+((r11*x10080)));
evalcond[7]=(((r00*x10088))+((r00*x10074))+(((-1.0)*cj0*x10082))+((r01*x10078))+(((-1.0)*r02*sj3*x10084))+(((-1.0)*sj3*x10075*x10083))+(((-1.0)*cj0*x10087)));
evalcond[8]=(((r10*x10074))+(((-1.0)*r12*sj3*x10084))+(((-1.0)*x10081*x10082))+(((-1.0)*sj3*x10076*x10083))+(((-1.0)*cj2*sj1*x10081))+((r11*x10078))+((r10*x10088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10089=((1.0)*gconst2);
CheckValue<IkReal> x10090 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x10089))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10090.valid){
continue;
}
CheckValue<IkReal> x10091=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10089)))),-1);
if(!x10091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10090.value)+(((1.5707963267949)*(x10091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10092=IKsin(j4);
IkReal x10093=IKcos(j4);
IkReal x10094=(cj3*gconst1);
IkReal x10095=(gconst1*r01);
IkReal x10096=(gconst1*r11);
IkReal x10097=(sj1*sj2);
IkReal x10098=(cj3*gconst2);
IkReal x10099=(gconst1*sj3);
IkReal x10100=(gconst2*sj3);
IkReal x10101=((1.0)*sj0);
IkReal x10102=(cj1*sj2);
IkReal x10103=((1.0)*x10093);
IkReal x10104=((1.0)*x10092);
IkReal x10105=((1.0)*cj1*cj2);
IkReal x10106=(cj3*x10092);
IkReal x10107=((1.0)*cj2*sj1);
IkReal x10108=(x10093*x10100);
evalcond[0]=((((-1.0)*gconst2*r20*x10104))+(((-1.0)*r22*x10103))+((gconst1*r21*x10092)));
evalcond[1]=((((-1.0)*r12*x10103))+cj0+((x10092*x10096))+(((-1.0)*gconst2*r10*x10104)));
evalcond[2]=(((x10092*x10095))+(((-1.0)*r02*x10103))+(((-1.0)*gconst2*r00*x10104))+(((-1.0)*x10101)));
evalcond[3]=(((r21*x10100))+((cj2*sj1))+x10102+(((-1.0)*r20*x10098*x10103))+((r21*x10093*x10094))+((r20*x10099))+((r22*x10106)));
evalcond[4]=(((r20*x10108))+x10097+(((-1.0)*r21*x10099*x10103))+((r21*x10098))+(((-1.0)*r22*sj3*x10104))+((r20*x10094))+(((-1.0)*x10105)));
evalcond[5]=(((r01*x10100))+(((-1.0)*cj0*x10105))+((cj0*x10097))+((r01*x10093*x10094))+(((-1.0)*r00*x10098*x10103))+((r02*x10106))+((r00*x10099)));
evalcond[6]=(((r11*x10093*x10094))+(((-1.0)*cj1*cj2*x10101))+(((-1.0)*r10*x10098*x10103))+((sj0*x10097))+((r11*x10100))+((r10*x10099))+((r12*x10106)));
evalcond[7]=(((r00*x10108))+(((-1.0)*cj0*x10107))+(((-1.0)*sj3*x10095*x10103))+(((-1.0)*cj0*x10102))+(((-1.0)*r02*sj3*x10104))+((r01*x10098))+((r00*x10094)));
evalcond[8]=((((-1.0)*sj3*x10096*x10103))+(((-1.0)*r12*sj3*x10104))+((r11*x10098))+(((-1.0)*x10101*x10102))+(((-1.0)*cj2*sj1*x10101))+((r10*x10108))+((r10*x10094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10109=((-1.0)*r21);
IkReal x10111 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10111)==0){
continue;
}
IkReal x10110=pow(x10111,-0.5);
CheckValue<IkReal> x10112 = IKatan2WithCheck(IkReal(x10109),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10112.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10112.value))));
IkReal gconst4=(x10109*x10110);
IkReal gconst5=((1.0)*r20*x10110);
CheckValue<IkReal> x10113 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10113.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10113.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10114=((-1.0)*r21);
CheckValue<IkReal> x10117 = IKatan2WithCheck(IkReal(x10114),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10117.valid){
continue;
}
IkReal x10115=((1.0)*(x10117.value));
IkReal x10116=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10115)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10115)));
IkReal gconst4=(x10114*x10116);
IkReal gconst5=((1.0)*r20*x10116);
IkReal x10118=r22*r22;
IkReal x10119=((1.0)*x10118);
CheckValue<IkReal> x10123=IKPowWithIntegerCheck(((-1.0)+x10118),-1);
if(!x10123.valid){
continue;
}
IkReal x10120=x10123.value;
if((((1.0)+(((-1.0)*x10119)))) < -0.00001)
continue;
IkReal x10121=IKsqrt(((1.0)+(((-1.0)*x10119))));
IkReal x10122=(cj0*x10120*x10121);
j4eval[0]=((IKabs((x10122+(((-1.0)*x10119*x10122)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10124=((-1.0)*r21);
CheckValue<IkReal> x10127 = IKatan2WithCheck(IkReal(x10124),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10127.valid){
continue;
}
IkReal x10125=((1.0)*(x10127.value));
IkReal x10126=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10125)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10125)));
IkReal gconst4=(x10124*x10126);
IkReal gconst5=((1.0)*r20*x10126);
IkReal x10128=r22*r22;
IkReal x10129=((1.0)*x10128);
CheckValue<IkReal> x10133=IKPowWithIntegerCheck(((-1.0)+x10128),-1);
if(!x10133.valid){
continue;
}
IkReal x10130=x10133.value;
if((((1.0)+(((-1.0)*x10129)))) < -0.00001)
continue;
IkReal x10131=IKsqrt(((1.0)+(((-1.0)*x10129))));
IkReal x10132=(sj0*x10130*x10131);
j4eval[0]=((IKabs(((((-1.0)*x10129*x10132))+x10132)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10134=((-1.0)*r21);
CheckValue<IkReal> x10137 = IKatan2WithCheck(IkReal(x10134),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10137.valid){
continue;
}
IkReal x10135=((1.0)*(x10137.value));
IkReal x10136=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10135)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10135)));
IkReal gconst4=(x10134*x10136);
IkReal gconst5=((1.0)*r20*x10136);
IkReal x10138=r22*r22;
IkReal x10139=(r12*sj0);
IkReal x10140=(cj0*r02);
CheckValue<IkReal> x10144=IKPowWithIntegerCheck(((-1.0)+x10138),-1);
if(!x10144.valid){
continue;
}
IkReal x10141=x10144.value;
if((((1.0)+(((-1.0)*x10138)))) < -0.00001)
continue;
IkReal x10142=IKsqrt(((1.0)+(((-1.0)*x10138))));
IkReal x10143=(r22*x10141*x10142);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x10139))+(((-1.0)*x10140)))))+(IKabs((((x10139*x10143))+((x10140*x10143))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10145=((-1.0)*r21);
CheckValue<IkReal> x10148 = IKatan2WithCheck(IkReal(x10145),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10148.valid){
continue;
}
IkReal x10146=((1.0)*(x10148.value));
IkReal x10147=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10146)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10146)));
IkReal gconst4=(x10145*x10147);
IkReal gconst5=((1.0)*r20*x10147);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10149=((-1.0)*r21);
CheckValue<IkReal> x10152 = IKatan2WithCheck(IkReal(x10149),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10152.valid){
continue;
}
IkReal x10150=((1.0)*(x10152.value));
IkReal x10151=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10150)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10150)));
IkReal gconst4=(x10149*x10151);
IkReal gconst5=((1.0)*r20*x10151);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10153=((-1.0)*r21);
CheckValue<IkReal> x10156 = IKatan2WithCheck(IkReal(x10153),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10156.valid){
continue;
}
IkReal x10154=((1.0)*(x10156.value));
IkReal x10155=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10154)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10154)));
IkReal gconst4=(x10153*x10155);
IkReal gconst5=((1.0)*r20*x10155);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10157=((-1.0)*r21);
CheckValue<IkReal> x10160 = IKatan2WithCheck(IkReal(x10157),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10160.valid){
continue;
}
IkReal x10158=((1.0)*(x10160.value));
IkReal x10159=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10158)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10158)));
IkReal gconst4=(x10157*x10159);
IkReal gconst5=((1.0)*r20*x10159);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10161=((-1.0)*r21);
CheckValue<IkReal> x10164 = IKatan2WithCheck(IkReal(x10161),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10164.valid){
continue;
}
IkReal x10162=((1.0)*(x10164.value));
IkReal x10163=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10162)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10162)));
IkReal gconst4=(x10161*x10163);
IkReal gconst5=((1.0)*r20*x10163);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10165=((-1.0)*r21);
CheckValue<IkReal> x10168 = IKatan2WithCheck(IkReal(x10165),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10168.valid){
continue;
}
IkReal x10166=((1.0)*(x10168.value));
IkReal x10167=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10166)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10166)));
IkReal gconst4=(x10165*x10167);
IkReal gconst5=((1.0)*r20*x10167);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10169=(gconst5*r10);
IkReal x10170=(gconst4*r11);
CheckValue<IkReal> x10171=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10169*x10169)+(((-2.0)*x10169*x10170))+(x10170*x10170))),-1);
if(!x10171.valid){
continue;
}
CheckValue<IkReal> x10172 = IKatan2WithCheck(IkReal(((((-1.0)*x10170))+x10169)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10171.value)))+(x10172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10173=IKsin(j4);
IkReal x10174=IKcos(j4);
IkReal x10175=(gconst4*r11);
IkReal x10176=((1.0)*cj1);
IkReal x10177=(gconst5*r10);
IkReal x10178=(gconst4*r01);
IkReal x10179=(gconst5*r00);
IkReal x10180=(gconst4*r21);
IkReal x10181=(gconst5*r20);
IkReal x10182=((1.0)*x10174);
IkReal x10183=((1.0)*x10173);
evalcond[0]=(((x10173*x10180))+(((-1.0)*x10181*x10183))+(((-1.0)*r22*x10182)));
evalcond[1]=((((-1.0)*x10179*x10183))+(((-1.0)*r02*x10182))+((x10173*x10178)));
evalcond[2]=((((-1.0)*r12*x10183))+(((-1.0)*x10175*x10182))+((x10174*x10177)));
evalcond[3]=((1.0)+((x10173*x10175))+(((-1.0)*r12*x10182))+(((-1.0)*x10177*x10183)));
evalcond[4]=((((-1.0)*cj2*x10176))+((sj1*sj2))+((x10174*x10181))+(((-1.0)*r22*x10183))+(((-1.0)*x10180*x10182)));
evalcond[5]=((((-1.0)*r02*x10183))+(((-1.0)*x10178*x10182))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10176))+((x10174*x10179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10184=((1.0)*gconst5);
CheckValue<IkReal> x10185 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10184))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10185.valid){
continue;
}
CheckValue<IkReal> x10186=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10184)))),-1);
if(!x10186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10185.value)+(((1.5707963267949)*(x10186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10187=IKsin(j4);
IkReal x10188=IKcos(j4);
IkReal x10189=(gconst4*r11);
IkReal x10190=((1.0)*cj1);
IkReal x10191=(gconst5*r10);
IkReal x10192=(gconst4*r01);
IkReal x10193=(gconst5*r00);
IkReal x10194=(gconst4*r21);
IkReal x10195=(gconst5*r20);
IkReal x10196=((1.0)*x10188);
IkReal x10197=((1.0)*x10187);
evalcond[0]=((((-1.0)*x10195*x10197))+(((-1.0)*r22*x10196))+((x10187*x10194)));
evalcond[1]=((((-1.0)*r02*x10196))+(((-1.0)*x10193*x10197))+((x10187*x10192)));
evalcond[2]=((((-1.0)*r12*x10197))+((x10188*x10191))+(((-1.0)*x10189*x10196)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10196))+(((-1.0)*x10191*x10197))+((x10187*x10189)));
evalcond[4]=((((-1.0)*cj2*x10190))+(((-1.0)*x10194*x10196))+((sj1*sj2))+((x10188*x10195))+(((-1.0)*r22*x10197)));
evalcond[5]=((((-1.0)*r02*x10197))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10190))+((x10188*x10193))+(((-1.0)*x10192*x10196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10198 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10198.valid){
continue;
}
CheckValue<IkReal> x10199=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10198.value)+(((1.5707963267949)*(x10199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10200=IKsin(j4);
IkReal x10201=IKcos(j4);
IkReal x10202=(gconst4*r11);
IkReal x10203=((1.0)*cj1);
IkReal x10204=(gconst5*r10);
IkReal x10205=(gconst4*r01);
IkReal x10206=(gconst5*r00);
IkReal x10207=(gconst4*r21);
IkReal x10208=(gconst5*r20);
IkReal x10209=((1.0)*x10201);
IkReal x10210=((1.0)*x10200);
evalcond[0]=(((x10200*x10207))+(((-1.0)*r22*x10209))+(((-1.0)*x10208*x10210)));
evalcond[1]=((((-1.0)*r02*x10209))+((x10200*x10205))+(((-1.0)*x10206*x10210)));
evalcond[2]=(((x10201*x10204))+(((-1.0)*r12*x10210))+(((-1.0)*x10202*x10209)));
evalcond[3]=((1.0)+((x10200*x10202))+(((-1.0)*x10204*x10210))+(((-1.0)*r12*x10209)));
evalcond[4]=((((-1.0)*r22*x10210))+((x10201*x10208))+(((-1.0)*cj2*x10203))+((sj1*sj2))+(((-1.0)*x10207*x10209)));
evalcond[5]=((((-1.0)*x10205*x10209))+((x10201*x10206))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10203))+(((-1.0)*r02*x10210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10211=((-1.0)*r21);
CheckValue<IkReal> x10214 = IKatan2WithCheck(IkReal(x10211),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10214.valid){
continue;
}
IkReal x10212=((1.0)*(x10214.value));
IkReal x10213=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10212)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10212)));
IkReal gconst4=(x10211*x10213);
IkReal gconst5=((1.0)*r20*x10213);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10215=((-1.0)*r21);
CheckValue<IkReal> x10218 = IKatan2WithCheck(IkReal(x10215),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10218.valid){
continue;
}
IkReal x10216=((1.0)*(x10218.value));
IkReal x10217=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10216)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10216)));
IkReal gconst4=(x10215*x10217);
IkReal gconst5=((1.0)*r20*x10217);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10219=((-1.0)*r21);
CheckValue<IkReal> x10222 = IKatan2WithCheck(IkReal(x10219),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10222.valid){
continue;
}
IkReal x10220=((1.0)*(x10222.value));
IkReal x10221=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10220)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10220)));
IkReal gconst4=(x10219*x10221);
IkReal gconst5=((1.0)*r20*x10221);
IkReal x10223=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10227=IKPowWithIntegerCheck(x10223,-1);
if(!x10227.valid){
continue;
}
IkReal x10224=x10227.value;
IkReal x10225=((1.0)*x10224);
IkReal x10226=((((-2.0)*r10*r11*r20*r21*x10224))+(((-1.0)*(r12*r12)))+(((-1.0)*x10225*(r10*r10)*(r20*r20)))+(((-1.0)*x10225*(r11*r11)*(r21*r21))));
j4eval[0]=x10226;
j4eval[1]=r12;
j4eval[2]=x10223;
j4eval[3]=IKsign(x10226);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10228=(gconst5*r10);
IkReal x10229=(gconst4*r11);
CheckValue<IkReal> x10230=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10228*x10228)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10229*x10229)))+(((2.0)*x10228*x10229)))),-1);
if(!x10230.valid){
continue;
}
CheckValue<IkReal> x10231 = IKatan2WithCheck(IkReal((x10229+(((-1.0)*x10228)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10230.value)))+(x10231.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10232=IKcos(j4);
IkReal x10233=IKsin(j4);
IkReal x10234=(gconst4*r11);
IkReal x10235=(gconst5*r10);
IkReal x10236=((1.0)*cj1);
IkReal x10237=(gconst5*r00);
IkReal x10238=(gconst5*r20);
IkReal x10239=((1.0)*x10232);
IkReal x10240=(gconst4*x10232);
IkReal x10241=((1.0)*x10233);
IkReal x10242=(gconst4*x10233);
evalcond[0]=(((x10232*x10234))+(((-1.0)*x10235*x10239))+((r12*x10233)));
evalcond[1]=((((-1.0)*x10238*x10241))+((r21*x10242))+(((-1.0)*r22*x10239)));
evalcond[2]=((((-1.0)*x10237*x10241))+((r01*x10242))+(((-1.0)*r02*x10239)));
evalcond[3]=((1.0)+(((-1.0)*x10235*x10241))+(((-1.0)*r12*x10239))+((x10233*x10234)));
evalcond[4]=(((r22*x10233))+(((-1.0)*x10238*x10239))+((sj1*sj2))+(((-1.0)*cj2*x10236))+((r21*x10240)));
evalcond[5]=((((-1.0)*x10237*x10239))+(((-1.0)*cj2*sj1))+((r02*x10233))+((r01*x10240))+(((-1.0)*sj2*x10236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10243=((1.0)*gconst5);
CheckValue<IkReal> x10244=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10243)))),-1);
if(!x10244.valid){
continue;
}
CheckValue<IkReal> x10245 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10243))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10244.value)))+(x10245.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10246=IKcos(j4);
IkReal x10247=IKsin(j4);
IkReal x10248=(gconst4*r11);
IkReal x10249=(gconst5*r10);
IkReal x10250=((1.0)*cj1);
IkReal x10251=(gconst5*r00);
IkReal x10252=(gconst5*r20);
IkReal x10253=((1.0)*x10246);
IkReal x10254=(gconst4*x10246);
IkReal x10255=((1.0)*x10247);
IkReal x10256=(gconst4*x10247);
evalcond[0]=(((x10246*x10248))+(((-1.0)*x10249*x10253))+((r12*x10247)));
evalcond[1]=((((-1.0)*x10252*x10255))+((r21*x10256))+(((-1.0)*r22*x10253)));
evalcond[2]=((((-1.0)*x10251*x10255))+(((-1.0)*r02*x10253))+((r01*x10256)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10253))+(((-1.0)*x10249*x10255))+((x10247*x10248)));
evalcond[4]=((((-1.0)*x10252*x10253))+((r22*x10247))+(((-1.0)*cj2*x10250))+((sj1*sj2))+((r21*x10254)));
evalcond[5]=((((-1.0)*x10251*x10253))+((r02*x10247))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10250))+((r01*x10254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10257 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10257.valid){
continue;
}
CheckValue<IkReal> x10258=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10257.value)+(((1.5707963267949)*(x10258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10259=IKcos(j4);
IkReal x10260=IKsin(j4);
IkReal x10261=(gconst4*r11);
IkReal x10262=(gconst5*r10);
IkReal x10263=((1.0)*cj1);
IkReal x10264=(gconst5*r00);
IkReal x10265=(gconst5*r20);
IkReal x10266=((1.0)*x10259);
IkReal x10267=(gconst4*x10259);
IkReal x10268=((1.0)*x10260);
IkReal x10269=(gconst4*x10260);
evalcond[0]=(((r12*x10260))+(((-1.0)*x10262*x10266))+((x10259*x10261)));
evalcond[1]=((((-1.0)*r22*x10266))+((r21*x10269))+(((-1.0)*x10265*x10268)));
evalcond[2]=(((r01*x10269))+(((-1.0)*r02*x10266))+(((-1.0)*x10264*x10268)));
evalcond[3]=((1.0)+(((-1.0)*x10262*x10268))+(((-1.0)*r12*x10266))+((x10260*x10261)));
evalcond[4]=(((r22*x10260))+((sj1*sj2))+((r21*x10267))+(((-1.0)*cj2*x10263))+(((-1.0)*x10265*x10266)));
evalcond[5]=(((r02*x10260))+(((-1.0)*cj2*sj1))+((r01*x10267))+(((-1.0)*sj2*x10263))+(((-1.0)*x10264*x10266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10270=((-1.0)*r21);
CheckValue<IkReal> x10273 = IKatan2WithCheck(IkReal(x10270),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10273.valid){
continue;
}
IkReal x10271=((1.0)*(x10273.value));
IkReal x10272=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10271)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10271)));
IkReal gconst4=(x10270*x10272);
IkReal gconst5=((1.0)*r20*x10272);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10274=((-1.0)*r21);
CheckValue<IkReal> x10277 = IKatan2WithCheck(IkReal(x10274),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10277.valid){
continue;
}
IkReal x10275=((1.0)*(x10277.value));
IkReal x10276=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10275)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10275)));
IkReal gconst4=(x10274*x10276);
IkReal gconst5=((1.0)*r20*x10276);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10278=((-1.0)*r21);
CheckValue<IkReal> x10281 = IKatan2WithCheck(IkReal(x10278),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10281.valid){
continue;
}
IkReal x10279=((1.0)*(x10281.value));
IkReal x10280=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10279)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10279)));
IkReal gconst4=(x10278*x10280);
IkReal gconst5=((1.0)*r20*x10280);
IkReal x10282=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10286=IKPowWithIntegerCheck(x10282,-1);
if(!x10286.valid){
continue;
}
IkReal x10283=x10286.value;
IkReal x10284=((1.0)*x10283);
IkReal x10285=((((-1.0)*x10284*(r10*r10)*(r20*r20)))+(((-1.0)*x10284*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10283))+(((-1.0)*(r12*r12))));
j4eval[0]=x10285;
j4eval[1]=r12;
j4eval[2]=x10282;
j4eval[3]=IKsign(x10285);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10287=(gconst5*r10);
IkReal x10288=(gconst4*r11);
CheckValue<IkReal> x10289=IKPowWithIntegerCheck(IKsign(((((2.0)*x10287*x10288))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10287*x10287)))+(((-1.0)*(x10288*x10288))))),-1);
if(!x10289.valid){
continue;
}
CheckValue<IkReal> x10290 = IKatan2WithCheck(IkReal((x10288+(((-1.0)*x10287)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10289.value)))+(x10290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10291=IKcos(j4);
IkReal x10292=IKsin(j4);
IkReal x10293=(gconst4*r11);
IkReal x10294=(gconst5*r10);
IkReal x10295=(gconst5*r00);
IkReal x10296=(gconst5*r20);
IkReal x10297=((1.0)*x10291);
IkReal x10298=(gconst4*x10291);
IkReal x10299=((1.0)*x10292);
IkReal x10300=(gconst4*x10292);
evalcond[0]=(((x10291*x10293))+((r12*x10292))+(((-1.0)*x10294*x10297)));
evalcond[1]=(((r21*x10300))+(((-1.0)*r22*x10297))+(((-1.0)*x10296*x10299)));
evalcond[2]=((((-1.0)*r02*x10297))+((r01*x10300))+(((-1.0)*x10295*x10299)));
evalcond[3]=((1.0)+(((-1.0)*x10294*x10299))+(((-1.0)*r12*x10297))+((x10292*x10293)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10298))+(((-1.0)*x10296*x10297))+((r22*x10292)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10295*x10297))+((r02*x10292))+((r01*x10298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10301=((1.0)*gconst5);
CheckValue<IkReal> x10302=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10301)))),-1);
if(!x10302.valid){
continue;
}
CheckValue<IkReal> x10303 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10302.value)))+(x10303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10304=IKcos(j4);
IkReal x10305=IKsin(j4);
IkReal x10306=(gconst4*r11);
IkReal x10307=(gconst5*r10);
IkReal x10308=(gconst5*r00);
IkReal x10309=(gconst5*r20);
IkReal x10310=((1.0)*x10304);
IkReal x10311=(gconst4*x10304);
IkReal x10312=((1.0)*x10305);
IkReal x10313=(gconst4*x10305);
evalcond[0]=((((-1.0)*x10307*x10310))+((x10304*x10306))+((r12*x10305)));
evalcond[1]=(((r21*x10313))+(((-1.0)*x10309*x10312))+(((-1.0)*r22*x10310)));
evalcond[2]=(((r01*x10313))+(((-1.0)*x10308*x10312))+(((-1.0)*r02*x10310)));
evalcond[3]=((1.0)+((x10305*x10306))+(((-1.0)*x10307*x10312))+(((-1.0)*r12*x10310)));
evalcond[4]=(((cj2*sj1))+((r21*x10311))+((cj1*sj2))+(((-1.0)*x10309*x10310))+((r22*x10305)));
evalcond[5]=(((r02*x10305))+((r01*x10311))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10308*x10310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10314 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10314.valid){
continue;
}
CheckValue<IkReal> x10315=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10314.value)+(((1.5707963267949)*(x10315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10316=IKcos(j4);
IkReal x10317=IKsin(j4);
IkReal x10318=(gconst4*r11);
IkReal x10319=(gconst5*r10);
IkReal x10320=(gconst5*r00);
IkReal x10321=(gconst5*r20);
IkReal x10322=((1.0)*x10316);
IkReal x10323=(gconst4*x10316);
IkReal x10324=((1.0)*x10317);
IkReal x10325=(gconst4*x10317);
evalcond[0]=(((r12*x10317))+(((-1.0)*x10319*x10322))+((x10316*x10318)));
evalcond[1]=((((-1.0)*x10321*x10324))+(((-1.0)*r22*x10322))+((r21*x10325)));
evalcond[2]=((((-1.0)*r02*x10322))+((r01*x10325))+(((-1.0)*x10320*x10324)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10322))+(((-1.0)*x10319*x10324))+((x10317*x10318)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10321*x10322))+((cj1*sj2))+((r22*x10317))+((r21*x10323)));
evalcond[5]=((((-1.0)*cj1*cj2))+((r01*x10323))+((sj1*sj2))+((r02*x10317))+(((-1.0)*x10320*x10322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10326=((-1.0)*r21);
CheckValue<IkReal> x10329 = IKatan2WithCheck(IkReal(x10326),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10329.valid){
continue;
}
IkReal x10327=((1.0)*(x10329.value));
IkReal x10328=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10327)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10327)));
IkReal gconst4=(x10326*x10328);
IkReal gconst5=((1.0)*r20*x10328);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10330=((-1.0)*r21);
CheckValue<IkReal> x10333 = IKatan2WithCheck(IkReal(x10330),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10333.valid){
continue;
}
IkReal x10331=((1.0)*(x10333.value));
IkReal x10332=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10331)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10331)));
IkReal gconst4=(x10330*x10332);
IkReal gconst5=((1.0)*r20*x10332);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10334=((-1.0)*r21);
CheckValue<IkReal> x10337 = IKatan2WithCheck(IkReal(x10334),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10337.valid){
continue;
}
IkReal x10335=((1.0)*(x10337.value));
IkReal x10336=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10335)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10335)));
IkReal gconst4=(x10334*x10336);
IkReal gconst5=((1.0)*r20*x10336);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10338=(gconst5*r10);
IkReal x10339=(gconst4*r11);
CheckValue<IkReal> x10340 = IKatan2WithCheck(IkReal(((((-1.0)*x10339))+x10338)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10340.valid){
continue;
}
CheckValue<IkReal> x10341=IKPowWithIntegerCheck(IKsign(((x10339*x10339)+(r12*r12)+(x10338*x10338)+(((-2.0)*x10338*x10339)))),-1);
if(!x10341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10340.value)+(((1.5707963267949)*(x10341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10342=IKsin(j4);
IkReal x10343=IKcos(j4);
IkReal x10344=(gconst4*r11);
IkReal x10345=(gconst5*r10);
IkReal x10346=(gconst4*r01);
IkReal x10347=(gconst5*r00);
IkReal x10348=(gconst4*r21);
IkReal x10349=(gconst5*r20);
IkReal x10350=((1.0)*x10343);
IkReal x10351=((1.0)*x10342);
evalcond[0]=((((-1.0)*r22*x10350))+((x10342*x10348))+(((-1.0)*x10349*x10351)));
evalcond[1]=(((x10342*x10346))+(((-1.0)*r02*x10350))+(((-1.0)*x10347*x10351)));
evalcond[2]=(((x10343*x10345))+(((-1.0)*r12*x10351))+(((-1.0)*x10344*x10350)));
evalcond[3]=((1.0)+((x10342*x10344))+(((-1.0)*x10345*x10351))+(((-1.0)*r12*x10350)));
evalcond[4]=(((cj2*sj1))+((x10343*x10349))+((cj1*sj2))+(((-1.0)*r22*x10351))+(((-1.0)*x10348*x10350)));
evalcond[5]=(((x10343*x10347))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10346*x10350))+(((-1.0)*r02*x10351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10352=((1.0)*gconst5);
CheckValue<IkReal> x10353=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10352)))),-1);
if(!x10353.valid){
continue;
}
CheckValue<IkReal> x10354 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10353.value)))+(x10354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10355=IKsin(j4);
IkReal x10356=IKcos(j4);
IkReal x10357=(gconst4*r11);
IkReal x10358=(gconst5*r10);
IkReal x10359=(gconst4*r01);
IkReal x10360=(gconst5*r00);
IkReal x10361=(gconst4*r21);
IkReal x10362=(gconst5*r20);
IkReal x10363=((1.0)*x10356);
IkReal x10364=((1.0)*x10355);
evalcond[0]=(((x10355*x10361))+(((-1.0)*x10362*x10364))+(((-1.0)*r22*x10363)));
evalcond[1]=((((-1.0)*x10360*x10364))+((x10355*x10359))+(((-1.0)*r02*x10363)));
evalcond[2]=((((-1.0)*x10357*x10363))+(((-1.0)*r12*x10364))+((x10356*x10358)));
evalcond[3]=((1.0)+((x10355*x10357))+(((-1.0)*x10358*x10364))+(((-1.0)*r12*x10363)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10361*x10363))+((x10356*x10362))+(((-1.0)*r22*x10364)));
evalcond[5]=((((-1.0)*x10359*x10363))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10364))+((x10356*x10360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10365 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10365.valid){
continue;
}
CheckValue<IkReal> x10366=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10365.value)+(((1.5707963267949)*(x10366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10367=IKsin(j4);
IkReal x10368=IKcos(j4);
IkReal x10369=(gconst4*r11);
IkReal x10370=(gconst5*r10);
IkReal x10371=(gconst4*r01);
IkReal x10372=(gconst5*r00);
IkReal x10373=(gconst4*r21);
IkReal x10374=(gconst5*r20);
IkReal x10375=((1.0)*x10368);
IkReal x10376=((1.0)*x10367);
evalcond[0]=((((-1.0)*x10374*x10376))+((x10367*x10373))+(((-1.0)*r22*x10375)));
evalcond[1]=((((-1.0)*r02*x10375))+((x10367*x10371))+(((-1.0)*x10372*x10376)));
evalcond[2]=((((-1.0)*x10369*x10375))+((x10368*x10370))+(((-1.0)*r12*x10376)));
evalcond[3]=((1.0)+((x10367*x10369))+(((-1.0)*r12*x10375))+(((-1.0)*x10370*x10376)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10368*x10374))+(((-1.0)*x10373*x10375))+(((-1.0)*r22*x10376)));
evalcond[5]=((((-1.0)*r02*x10376))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10368*x10372))+(((-1.0)*x10371*x10375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10377=gconst4*gconst4;
IkReal x10378=gconst5*gconst5;
IkReal x10379=(r10*r21);
IkReal x10380=((1.0)*cj3);
IkReal x10381=(r11*r21);
IkReal x10382=(r11*r20);
IkReal x10383=(r22*sj3);
IkReal x10384=(gconst4*r10);
IkReal x10385=((1.0)*sj3);
IkReal x10386=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10387=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10377*x10380*x10381))+(((-1.0)*r10*r20*x10378*x10380))+((x10379*x10386))+(((-1.0)*r12*r22*x10380))+((x10382*x10386)))),-1);
if(!x10387.valid){
continue;
}
CheckValue<IkReal> x10388 = IKatan2WithCheck(IkReal((((gconst5*r11*x10383))+((x10383*x10384)))),IkReal((((gconst4*gconst5*sj3*x10381))+(((-1.0)*gconst5*r20*x10384*x10385))+((sj3*x10377*x10379))+(((-1.0)*x10378*x10382*x10385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10387.value)))+(x10388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10389=IKsin(j4);
IkReal x10390=IKcos(j4);
IkReal x10391=(sj1*sj2);
IkReal x10392=(gconst5*sj3);
IkReal x10393=(cj3*gconst5);
IkReal x10394=(gconst4*r11);
IkReal x10395=((1.0)*cj1);
IkReal x10396=(gconst4*r01);
IkReal x10397=(cj2*sj1);
IkReal x10398=(gconst4*r21);
IkReal x10399=(gconst4*sj3);
IkReal x10400=(cj3*gconst4);
IkReal x10401=(cj2*x10395);
IkReal x10402=((1.0)*x10390);
IkReal x10403=((1.0)*x10389);
IkReal x10404=(cj3*x10389);
IkReal x10405=(cj3*x10390);
evalcond[0]=(((x10389*x10398))+(((-1.0)*gconst5*r20*x10403))+(((-1.0)*r22*x10402)));
evalcond[1]=(((x10389*x10396))+(((-1.0)*r02*x10402))+(((-1.0)*gconst5*r00*x10403)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10403))+((x10389*x10394))+(((-1.0)*r12*x10402)));
evalcond[3]=((((-1.0)*r10*x10393*x10402))+((r11*x10392))+((r10*x10399))+((r12*x10404))+((x10394*x10405)));
evalcond[4]=(((r11*x10393))+(((-1.0)*sj3*x10394*x10402))+((r10*x10390*x10392))+(((-1.0)*r12*sj3*x10403))+((r10*x10400)));
evalcond[5]=(((r22*x10404))+((r21*x10392))+((cj1*sj2))+((x10398*x10405))+x10397+(((-1.0)*r20*x10393*x10402))+((r20*x10399)));
evalcond[6]=(((r01*x10392))+((x10396*x10405))+((r02*x10404))+(((-1.0)*x10401))+x10391+(((-1.0)*r00*x10393*x10402))+((r00*x10399)));
evalcond[7]=((((-1.0)*r22*sj3*x10403))+((r21*x10393))+(((-1.0)*x10401))+x10391+((r20*x10400))+((r20*x10390*x10392))+(((-1.0)*sj3*x10398*x10402)));
evalcond[8]=(((r01*x10393))+((r00*x10390*x10392))+((r00*x10400))+(((-1.0)*sj3*x10396*x10402))+(((-1.0)*x10397))+(((-1.0)*sj2*x10395))+(((-1.0)*r02*sj3*x10403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10406=((1.0)*gconst5);
CheckValue<IkReal> x10407 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10406))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10407.valid){
continue;
}
CheckValue<IkReal> x10408=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10406)))),-1);
if(!x10408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10407.value)+(((1.5707963267949)*(x10408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10409=IKsin(j4);
IkReal x10410=IKcos(j4);
IkReal x10411=(sj1*sj2);
IkReal x10412=(gconst5*sj3);
IkReal x10413=(cj3*gconst5);
IkReal x10414=(gconst4*r11);
IkReal x10415=((1.0)*cj1);
IkReal x10416=(gconst4*r01);
IkReal x10417=(cj2*sj1);
IkReal x10418=(gconst4*r21);
IkReal x10419=(gconst4*sj3);
IkReal x10420=(cj3*gconst4);
IkReal x10421=(cj2*x10415);
IkReal x10422=((1.0)*x10410);
IkReal x10423=((1.0)*x10409);
IkReal x10424=(cj3*x10409);
IkReal x10425=(cj3*x10410);
evalcond[0]=((((-1.0)*gconst5*r20*x10423))+(((-1.0)*r22*x10422))+((x10409*x10418)));
evalcond[1]=((((-1.0)*gconst5*r00*x10423))+(((-1.0)*r02*x10422))+((x10409*x10416)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10423))+(((-1.0)*r12*x10422))+((x10409*x10414)));
evalcond[3]=(((x10414*x10425))+((r12*x10424))+((r11*x10412))+(((-1.0)*r10*x10413*x10422))+((r10*x10419)));
evalcond[4]=(((r10*x10410*x10412))+(((-1.0)*r12*sj3*x10423))+((r11*x10413))+(((-1.0)*sj3*x10414*x10422))+((r10*x10420)));
evalcond[5]=(((r21*x10412))+((cj1*sj2))+((r22*x10424))+(((-1.0)*r20*x10413*x10422))+x10417+((r20*x10419))+((x10418*x10425)));
evalcond[6]=(((x10416*x10425))+((r00*x10419))+(((-1.0)*r00*x10413*x10422))+((r01*x10412))+((r02*x10424))+(((-1.0)*x10421))+x10411);
evalcond[7]=(((r21*x10413))+(((-1.0)*sj3*x10418*x10422))+((r20*x10410*x10412))+(((-1.0)*x10421))+x10411+((r20*x10420))+(((-1.0)*r22*sj3*x10423)));
evalcond[8]=(((r00*x10420))+(((-1.0)*sj3*x10416*x10422))+((r01*x10413))+(((-1.0)*sj2*x10415))+(((-1.0)*x10417))+(((-1.0)*r02*sj3*x10423))+((r00*x10410*x10412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10426 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10426.valid){
continue;
}
CheckValue<IkReal> x10427=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10426.value)+(((1.5707963267949)*(x10427.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10428=IKsin(j4);
IkReal x10429=IKcos(j4);
IkReal x10430=(sj1*sj2);
IkReal x10431=(gconst5*sj3);
IkReal x10432=(cj3*gconst5);
IkReal x10433=(gconst4*r11);
IkReal x10434=((1.0)*cj1);
IkReal x10435=(gconst4*r01);
IkReal x10436=(cj2*sj1);
IkReal x10437=(gconst4*r21);
IkReal x10438=(gconst4*sj3);
IkReal x10439=(cj3*gconst4);
IkReal x10440=(cj2*x10434);
IkReal x10441=((1.0)*x10429);
IkReal x10442=((1.0)*x10428);
IkReal x10443=(cj3*x10428);
IkReal x10444=(cj3*x10429);
evalcond[0]=((((-1.0)*gconst5*r20*x10442))+((x10428*x10437))+(((-1.0)*r22*x10441)));
evalcond[1]=((((-1.0)*r02*x10441))+((x10428*x10435))+(((-1.0)*gconst5*r00*x10442)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10441))+((x10428*x10433))+(((-1.0)*gconst5*r10*x10442)));
evalcond[3]=(((r12*x10443))+((x10433*x10444))+((r10*x10438))+((r11*x10431))+(((-1.0)*r10*x10432*x10441)));
evalcond[4]=((((-1.0)*r12*sj3*x10442))+(((-1.0)*sj3*x10433*x10441))+((r10*x10439))+((r11*x10432))+((r10*x10429*x10431)));
evalcond[5]=(((r22*x10443))+((cj1*sj2))+((x10437*x10444))+(((-1.0)*r20*x10432*x10441))+x10436+((r20*x10438))+((r21*x10431)));
evalcond[6]=((((-1.0)*r00*x10432*x10441))+((r01*x10431))+(((-1.0)*x10440))+((r02*x10443))+x10430+((x10435*x10444))+((r00*x10438)));
evalcond[7]=((((-1.0)*sj3*x10437*x10441))+(((-1.0)*r22*sj3*x10442))+(((-1.0)*x10440))+x10430+((r20*x10429*x10431))+((r20*x10439))+((r21*x10432)));
evalcond[8]=(((r01*x10432))+(((-1.0)*sj3*x10435*x10441))+(((-1.0)*r02*sj3*x10442))+((r00*x10429*x10431))+(((-1.0)*sj2*x10434))+(((-1.0)*x10436))+((r00*x10439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10445=((-1.0)*r21);
CheckValue<IkReal> x10448 = IKatan2WithCheck(IkReal(x10445),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10448.valid){
continue;
}
IkReal x10446=((1.0)*(x10448.value));
IkReal x10447=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10446)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10446)));
IkReal gconst4=(x10445*x10447);
IkReal gconst5=((1.0)*r20*x10447);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10449=((-1.0)*r21);
CheckValue<IkReal> x10452 = IKatan2WithCheck(IkReal(x10449),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10452.valid){
continue;
}
IkReal x10450=((1.0)*(x10452.value));
IkReal x10451=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10450)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10450)));
IkReal gconst4=(x10449*x10451);
IkReal gconst5=((1.0)*r20*x10451);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10453=((-1.0)*r21);
CheckValue<IkReal> x10456 = IKatan2WithCheck(IkReal(x10453),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10456.valid){
continue;
}
IkReal x10454=((1.0)*(x10456.value));
IkReal x10455=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10454)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10454)));
IkReal gconst4=(x10453*x10455);
IkReal gconst5=((1.0)*r20*x10455);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10457=((-1.0)*r21);
CheckValue<IkReal> x10460 = IKatan2WithCheck(IkReal(x10457),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10460.valid){
continue;
}
IkReal x10458=((1.0)*(x10460.value));
IkReal x10459=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10458)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10458)));
IkReal gconst4=(x10457*x10459);
IkReal gconst5=((1.0)*r20*x10459);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10461=((-1.0)*r21);
CheckValue<IkReal> x10464 = IKatan2WithCheck(IkReal(x10461),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10464.valid){
continue;
}
IkReal x10462=((1.0)*(x10464.value));
IkReal x10463=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10462)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10462)));
IkReal gconst4=(x10461*x10463);
IkReal gconst5=((1.0)*r20*x10463);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10465=((-1.0)*r21);
CheckValue<IkReal> x10468 = IKatan2WithCheck(IkReal(x10465),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10468.valid){
continue;
}
IkReal x10466=((1.0)*(x10468.value));
IkReal x10467=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10466)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10466)));
IkReal gconst4=(x10465*x10467);
IkReal gconst5=((1.0)*r20*x10467);
IkReal x10469=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10473=IKPowWithIntegerCheck(x10469,-1);
if(!x10473.valid){
continue;
}
IkReal x10470=x10473.value;
IkReal x10471=((1.0)*x10470);
IkReal x10472=((((-1.0)*x10471*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10471*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10470)));
j4eval[0]=x10472;
j4eval[1]=r12;
j4eval[2]=x10469;
j4eval[3]=IKsign(x10472);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10474=(gconst5*r10);
IkReal x10475=(gconst4*r11);
CheckValue<IkReal> x10476 = IKatan2WithCheck(IkReal(((((-1.0)*x10475))+x10474)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10476.valid){
continue;
}
CheckValue<IkReal> x10477=IKPowWithIntegerCheck(IKsign(((((2.0)*x10474*x10475))+(((-1.0)*(x10475*x10475)))+(((-1.0)*(x10474*x10474)))+(((-1.0)*(r12*r12))))),-1);
if(!x10477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10476.value)+(((1.5707963267949)*(x10477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10478=IKsin(j4);
IkReal x10479=IKcos(j4);
IkReal x10480=(gconst4*r11);
IkReal x10481=(gconst5*r10);
IkReal x10482=(gconst4*r01);
IkReal x10483=(gconst5*r00);
IkReal x10484=(gconst4*r21);
IkReal x10485=(gconst5*r20);
IkReal x10486=((1.0)*x10479);
IkReal x10487=((1.0)*x10478);
evalcond[0]=(((x10478*x10484))+(((-1.0)*r22*x10486))+(((-1.0)*x10485*x10487)));
evalcond[1]=(((x10478*x10482))+(((-1.0)*r02*x10486))+(((-1.0)*x10483*x10487)));
evalcond[2]=(((x10479*x10481))+(((-1.0)*x10480*x10486))+(((-1.0)*r12*x10487)));
evalcond[3]=((-1.0)+((x10478*x10480))+(((-1.0)*x10481*x10487))+(((-1.0)*r12*x10486)));
evalcond[4]=(((cj2*sj1))+((x10479*x10483))+((cj1*sj2))+(((-1.0)*r02*x10487))+(((-1.0)*x10482*x10486)));
evalcond[5]=(((x10479*x10485))+(((-1.0)*r22*x10487))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10484*x10486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10488=((1.0)*gconst5);
CheckValue<IkReal> x10489 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10489.valid){
continue;
}
CheckValue<IkReal> x10490=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10488))+(((-1.0)*gconst4*r20)))),-1);
if(!x10490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10489.value)+(((1.5707963267949)*(x10490.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10491=IKsin(j4);
IkReal x10492=IKcos(j4);
IkReal x10493=(gconst4*r11);
IkReal x10494=(gconst5*r10);
IkReal x10495=(gconst4*r01);
IkReal x10496=(gconst5*r00);
IkReal x10497=(gconst4*r21);
IkReal x10498=(gconst5*r20);
IkReal x10499=((1.0)*x10492);
IkReal x10500=((1.0)*x10491);
evalcond[0]=((((-1.0)*x10498*x10500))+(((-1.0)*r22*x10499))+((x10491*x10497)));
evalcond[1]=((((-1.0)*x10496*x10500))+((x10491*x10495))+(((-1.0)*r02*x10499)));
evalcond[2]=((((-1.0)*x10493*x10499))+(((-1.0)*r12*x10500))+((x10492*x10494)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10499))+((x10491*x10493))+(((-1.0)*x10494*x10500)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10495*x10499))+((cj1*sj2))+(((-1.0)*r02*x10500))+((x10492*x10496)));
evalcond[5]=((((-1.0)*r22*x10500))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10492*x10498))+(((-1.0)*x10497*x10499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10501=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10501.valid){
continue;
}
CheckValue<IkReal> x10502 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10501.value)))+(x10502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10503=IKsin(j4);
IkReal x10504=IKcos(j4);
IkReal x10505=(gconst4*r11);
IkReal x10506=(gconst5*r10);
IkReal x10507=(gconst4*r01);
IkReal x10508=(gconst5*r00);
IkReal x10509=(gconst4*r21);
IkReal x10510=(gconst5*r20);
IkReal x10511=((1.0)*x10504);
IkReal x10512=((1.0)*x10503);
evalcond[0]=((((-1.0)*x10510*x10512))+(((-1.0)*r22*x10511))+((x10503*x10509)));
evalcond[1]=((((-1.0)*r02*x10511))+(((-1.0)*x10508*x10512))+((x10503*x10507)));
evalcond[2]=((((-1.0)*x10505*x10511))+((x10504*x10506))+(((-1.0)*r12*x10512)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10511))+((x10503*x10505))+(((-1.0)*x10506*x10512)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10512))+((cj1*sj2))+((x10504*x10508))+(((-1.0)*x10507*x10511)));
evalcond[5]=((((-1.0)*r22*x10512))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10509*x10511))+((x10504*x10510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10513=((-1.0)*r21);
CheckValue<IkReal> x10516 = IKatan2WithCheck(IkReal(x10513),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10516.valid){
continue;
}
IkReal x10514=((1.0)*(x10516.value));
IkReal x10515=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10514)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10514)));
IkReal gconst4=(x10513*x10515);
IkReal gconst5=((1.0)*r20*x10515);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10517=((-1.0)*r21);
CheckValue<IkReal> x10520 = IKatan2WithCheck(IkReal(x10517),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10520.valid){
continue;
}
IkReal x10518=((1.0)*(x10520.value));
IkReal x10519=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10518)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10518)));
IkReal gconst4=(x10517*x10519);
IkReal gconst5=((1.0)*r20*x10519);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10521=((-1.0)*r21);
CheckValue<IkReal> x10524 = IKatan2WithCheck(IkReal(x10521),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10524.valid){
continue;
}
IkReal x10522=((1.0)*(x10524.value));
IkReal x10523=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10522)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10522)));
IkReal gconst4=(x10521*x10523);
IkReal gconst5=((1.0)*r20*x10523);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10525=(gconst5*r10);
IkReal x10526=(gconst4*r11);
CheckValue<IkReal> x10527=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10526*x10526)+(((-2.0)*x10525*x10526))+(x10525*x10525))),-1);
if(!x10527.valid){
continue;
}
CheckValue<IkReal> x10528 = IKatan2WithCheck(IkReal(((((-1.0)*x10525))+x10526)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10527.value)))+(x10528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10529=IKcos(j4);
IkReal x10530=IKsin(j4);
IkReal x10531=(gconst4*r11);
IkReal x10532=(gconst5*r10);
IkReal x10533=(gconst5*r00);
IkReal x10534=(gconst5*r20);
IkReal x10535=((1.0)*x10529);
IkReal x10536=(gconst4*x10529);
IkReal x10537=((1.0)*x10530);
IkReal x10538=(gconst4*x10530);
evalcond[0]=(((x10529*x10531))+((r12*x10530))+(((-1.0)*x10532*x10535)));
evalcond[1]=((((-1.0)*r22*x10535))+((r21*x10538))+(((-1.0)*x10534*x10537)));
evalcond[2]=((((-1.0)*r02*x10535))+((r01*x10538))+(((-1.0)*x10533*x10537)));
evalcond[3]=((-1.0)+((x10530*x10531))+(((-1.0)*r12*x10535))+(((-1.0)*x10532*x10537)));
evalcond[4]=(((cj2*sj1))+((r02*x10530))+((cj1*sj2))+((r01*x10536))+(((-1.0)*x10533*x10535)));
evalcond[5]=(((r22*x10530))+((r21*x10536))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10534*x10535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10539=((1.0)*gconst5);
CheckValue<IkReal> x10540=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10539))+(((-1.0)*gconst4*r20)))),-1);
if(!x10540.valid){
continue;
}
CheckValue<IkReal> x10541 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10540.value)))+(x10541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10542=IKcos(j4);
IkReal x10543=IKsin(j4);
IkReal x10544=(gconst4*r11);
IkReal x10545=(gconst5*r10);
IkReal x10546=(gconst5*r00);
IkReal x10547=(gconst5*r20);
IkReal x10548=((1.0)*x10542);
IkReal x10549=(gconst4*x10542);
IkReal x10550=((1.0)*x10543);
IkReal x10551=(gconst4*x10543);
evalcond[0]=(((r12*x10543))+(((-1.0)*x10545*x10548))+((x10542*x10544)));
evalcond[1]=((((-1.0)*x10547*x10550))+(((-1.0)*r22*x10548))+((r21*x10551)));
evalcond[2]=((((-1.0)*x10546*x10550))+(((-1.0)*r02*x10548))+((r01*x10551)));
evalcond[3]=((-1.0)+(((-1.0)*x10545*x10550))+(((-1.0)*r12*x10548))+((x10543*x10544)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10546*x10548))+((r02*x10543))+((r01*x10549)));
evalcond[5]=(((r22*x10543))+(((-1.0)*x10547*x10548))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10552=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10552.valid){
continue;
}
CheckValue<IkReal> x10553 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10552.value)))+(x10553.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10554=IKcos(j4);
IkReal x10555=IKsin(j4);
IkReal x10556=(gconst4*r11);
IkReal x10557=(gconst5*r10);
IkReal x10558=(gconst5*r00);
IkReal x10559=(gconst5*r20);
IkReal x10560=((1.0)*x10554);
IkReal x10561=(gconst4*x10554);
IkReal x10562=((1.0)*x10555);
IkReal x10563=(gconst4*x10555);
evalcond[0]=((((-1.0)*x10557*x10560))+((r12*x10555))+((x10554*x10556)));
evalcond[1]=((((-1.0)*r22*x10560))+((r21*x10563))+(((-1.0)*x10559*x10562)));
evalcond[2]=(((r01*x10563))+(((-1.0)*x10558*x10562))+(((-1.0)*r02*x10560)));
evalcond[3]=((-1.0)+(((-1.0)*x10557*x10562))+(((-1.0)*r12*x10560))+((x10555*x10556)));
evalcond[4]=(((r01*x10561))+((cj2*sj1))+((r02*x10555))+((cj1*sj2))+(((-1.0)*x10558*x10560)));
evalcond[5]=(((r22*x10555))+((r21*x10561))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10559*x10560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10564=((-1.0)*r21);
CheckValue<IkReal> x10567 = IKatan2WithCheck(IkReal(x10564),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10567.valid){
continue;
}
IkReal x10565=((1.0)*(x10567.value));
IkReal x10566=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10565)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10565)));
IkReal gconst4=(x10564*x10566);
IkReal gconst5=((1.0)*r20*x10566);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10568=((-1.0)*r21);
CheckValue<IkReal> x10571 = IKatan2WithCheck(IkReal(x10568),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10571.valid){
continue;
}
IkReal x10569=((1.0)*(x10571.value));
IkReal x10570=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10569)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10569)));
IkReal gconst4=(x10568*x10570);
IkReal gconst5=((1.0)*r20*x10570);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10572=((-1.0)*r21);
CheckValue<IkReal> x10575 = IKatan2WithCheck(IkReal(x10572),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10575.valid){
continue;
}
IkReal x10573=((1.0)*(x10575.value));
IkReal x10574=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10573)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10573)));
IkReal gconst4=(x10572*x10574);
IkReal gconst5=((1.0)*r20*x10574);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10576=(gconst5*r10);
IkReal x10577=(gconst4*r11);
CheckValue<IkReal> x10578=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10577*x10577)+(x10576*x10576)+(((-2.0)*x10576*x10577)))),-1);
if(!x10578.valid){
continue;
}
CheckValue<IkReal> x10579 = IKatan2WithCheck(IkReal(((((-1.0)*x10576))+x10577)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10578.value)))+(x10579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10580=IKcos(j4);
IkReal x10581=IKsin(j4);
IkReal x10582=(gconst5*r10);
IkReal x10583=(gconst5*r00);
IkReal x10584=(gconst5*r20);
IkReal x10585=((1.0)*x10580);
IkReal x10586=(gconst4*x10581);
IkReal x10587=(gconst4*x10580);
IkReal x10588=((1.0)*x10581);
evalcond[0]=(((r12*x10581))+(((-1.0)*x10582*x10585))+((r11*x10587)));
evalcond[1]=((((-1.0)*r22*x10585))+((r21*x10586))+(((-1.0)*x10584*x10588)));
evalcond[2]=((((-1.0)*r02*x10585))+(((-1.0)*x10583*x10588))+((r01*x10586)));
evalcond[3]=((-1.0)+(((-1.0)*x10582*x10588))+((r11*x10586))+(((-1.0)*r12*x10585)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10587))+((r22*x10581))+(((-1.0)*x10584*x10585)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x10581))+((cj1*cj2))+(((-1.0)*x10583*x10585))+((r01*x10587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10589=((1.0)*gconst5);
CheckValue<IkReal> x10590=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10589))+(((-1.0)*gconst4*r20)))),-1);
if(!x10590.valid){
continue;
}
CheckValue<IkReal> x10591 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10589))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10590.value)))+(x10591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10592=IKcos(j4);
IkReal x10593=IKsin(j4);
IkReal x10594=(gconst5*r10);
IkReal x10595=(gconst5*r00);
IkReal x10596=(gconst5*r20);
IkReal x10597=((1.0)*x10592);
IkReal x10598=(gconst4*x10593);
IkReal x10599=(gconst4*x10592);
IkReal x10600=((1.0)*x10593);
evalcond[0]=(((r12*x10593))+((r11*x10599))+(((-1.0)*x10594*x10597)));
evalcond[1]=(((r21*x10598))+(((-1.0)*r22*x10597))+(((-1.0)*x10596*x10600)));
evalcond[2]=((((-1.0)*r02*x10597))+(((-1.0)*x10595*x10600))+((r01*x10598)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10597))+((r11*x10598))+(((-1.0)*x10594*x10600)));
evalcond[4]=(((r21*x10599))+((cj2*sj1))+(((-1.0)*x10596*x10597))+((cj1*sj2))+((r22*x10593)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x10599))+(((-1.0)*x10595*x10597))+((cj1*cj2))+((r02*x10593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10601=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10601.valid){
continue;
}
CheckValue<IkReal> x10602 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10601.value)))+(x10602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10603=IKcos(j4);
IkReal x10604=IKsin(j4);
IkReal x10605=(gconst5*r10);
IkReal x10606=(gconst5*r00);
IkReal x10607=(gconst5*r20);
IkReal x10608=((1.0)*x10603);
IkReal x10609=(gconst4*x10604);
IkReal x10610=(gconst4*x10603);
IkReal x10611=((1.0)*x10604);
evalcond[0]=(((r12*x10604))+(((-1.0)*x10605*x10608))+((r11*x10610)));
evalcond[1]=(((r21*x10609))+(((-1.0)*x10607*x10611))+(((-1.0)*r22*x10608)));
evalcond[2]=(((r01*x10609))+(((-1.0)*r02*x10608))+(((-1.0)*x10606*x10611)));
evalcond[3]=((-1.0)+((r11*x10609))+(((-1.0)*r12*x10608))+(((-1.0)*x10605*x10611)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10607*x10608))+((r22*x10604))+((r21*x10610)));
evalcond[5]=(((r02*x10604))+(((-1.0)*sj1*sj2))+(((-1.0)*x10606*x10608))+((r01*x10610))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10612=((-1.0)*r21);
CheckValue<IkReal> x10615 = IKatan2WithCheck(IkReal(x10612),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10615.valid){
continue;
}
IkReal x10613=((1.0)*(x10615.value));
IkReal x10614=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10613)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10613)));
IkReal gconst4=(x10612*x10614);
IkReal gconst5=((1.0)*r20*x10614);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10616=((-1.0)*r21);
CheckValue<IkReal> x10619 = IKatan2WithCheck(IkReal(x10616),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10619.valid){
continue;
}
IkReal x10617=((1.0)*(x10619.value));
IkReal x10618=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10617)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10617)));
IkReal gconst4=(x10616*x10618);
IkReal gconst5=((1.0)*r20*x10618);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10620=((-1.0)*r21);
CheckValue<IkReal> x10623 = IKatan2WithCheck(IkReal(x10620),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10623.valid){
continue;
}
IkReal x10621=((1.0)*(x10623.value));
IkReal x10622=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10621)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10621)));
IkReal gconst4=(x10620*x10622);
IkReal gconst5=((1.0)*r20*x10622);
IkReal x10624=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10628=IKPowWithIntegerCheck(x10624,-1);
if(!x10628.valid){
continue;
}
IkReal x10625=x10628.value;
IkReal x10626=((1.0)*x10625);
IkReal x10627=((((-1.0)*x10626*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10625))+(((-1.0)*(r12*r12)))+(((-1.0)*x10626*(r11*r11)*(r21*r21))));
j4eval[0]=x10627;
j4eval[1]=r12;
j4eval[2]=x10624;
j4eval[3]=IKsign(x10627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10629=(gconst5*r10);
IkReal x10630=(gconst4*r11);
CheckValue<IkReal> x10631=IKPowWithIntegerCheck(IKsign(((((2.0)*x10629*x10630))+(((-1.0)*(x10630*x10630)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10629*x10629))))),-1);
if(!x10631.valid){
continue;
}
CheckValue<IkReal> x10632 = IKatan2WithCheck(IkReal(((((-1.0)*x10630))+x10629)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10631.value)))+(x10632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10633=IKsin(j4);
IkReal x10634=IKcos(j4);
IkReal x10635=(gconst4*r11);
IkReal x10636=(gconst5*r10);
IkReal x10637=(gconst5*r00);
IkReal x10638=(gconst5*r20);
IkReal x10639=((1.0)*x10634);
IkReal x10640=(gconst4*x10633);
IkReal x10641=((1.0)*x10633);
evalcond[0]=(((r21*x10640))+(((-1.0)*x10638*x10641))+(((-1.0)*r22*x10639)));
evalcond[1]=((((-1.0)*r02*x10639))+((r01*x10640))+(((-1.0)*x10637*x10641)));
evalcond[2]=((((-1.0)*x10635*x10639))+(((-1.0)*r12*x10641))+((x10634*x10636)));
evalcond[3]=((-1.0)+(((-1.0)*x10636*x10641))+(((-1.0)*r12*x10639))+((x10633*x10635)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10641))+(((-1.0)*gconst4*r21*x10639))+((x10634*x10638)));
evalcond[5]=((((-1.0)*r02*x10641))+(((-1.0)*gconst4*r01*x10639))+(((-1.0)*sj1*sj2))+((x10634*x10637))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10642=((1.0)*gconst5);
CheckValue<IkReal> x10643 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10642))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10643.valid){
continue;
}
CheckValue<IkReal> x10644=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10642))+(((-1.0)*gconst4*r20)))),-1);
if(!x10644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10643.value)+(((1.5707963267949)*(x10644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10645=IKsin(j4);
IkReal x10646=IKcos(j4);
IkReal x10647=(gconst4*r11);
IkReal x10648=(gconst5*r10);
IkReal x10649=(gconst5*r00);
IkReal x10650=(gconst5*r20);
IkReal x10651=((1.0)*x10646);
IkReal x10652=(gconst4*x10645);
IkReal x10653=((1.0)*x10645);
evalcond[0]=((((-1.0)*r22*x10651))+((r21*x10652))+(((-1.0)*x10650*x10653)));
evalcond[1]=((((-1.0)*x10649*x10653))+(((-1.0)*r02*x10651))+((r01*x10652)));
evalcond[2]=((((-1.0)*x10647*x10651))+(((-1.0)*r12*x10653))+((x10646*x10648)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10651))+((x10645*x10647))+(((-1.0)*x10648*x10653)));
evalcond[4]=((((-1.0)*gconst4*r21*x10651))+((cj2*sj1))+(((-1.0)*r22*x10653))+((cj1*sj2))+((x10646*x10650)));
evalcond[5]=(((x10646*x10649))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x10653))+(((-1.0)*gconst4*r01*x10651))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10654=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10654.valid){
continue;
}
CheckValue<IkReal> x10655 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10654.value)))+(x10655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10656=IKsin(j4);
IkReal x10657=IKcos(j4);
IkReal x10658=(gconst4*r11);
IkReal x10659=(gconst5*r10);
IkReal x10660=(gconst5*r00);
IkReal x10661=(gconst5*r20);
IkReal x10662=((1.0)*x10657);
IkReal x10663=(gconst4*x10656);
IkReal x10664=((1.0)*x10656);
evalcond[0]=((((-1.0)*x10661*x10664))+(((-1.0)*r22*x10662))+((r21*x10663)));
evalcond[1]=((((-1.0)*r02*x10662))+(((-1.0)*x10660*x10664))+((r01*x10663)));
evalcond[2]=(((x10657*x10659))+(((-1.0)*x10658*x10662))+(((-1.0)*r12*x10664)));
evalcond[3]=((-1.0)+((x10656*x10658))+(((-1.0)*x10659*x10664))+(((-1.0)*r12*x10662)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10657*x10661))+(((-1.0)*gconst4*r21*x10662))+(((-1.0)*r22*x10664)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x10664))+((x10657*x10660))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10665=((-1.0)*r21);
IkReal x10666=((-1.0)*px);
CheckValue<IkReal> x10668 = IKatan2WithCheck(IkReal(x10665),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10668.valid){
continue;
}
IkReal x10667=((1.0)*(x10668.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10667)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10666);
rxp1_1=(px*r21);
rxp1_2=(r11*x10666);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10667)));
IkReal gconst4=x10665;
IkReal gconst5=((1.0)*r20);
IkReal x10669=((1.0)*cj3);
IkReal x10670=(r10*r20);
IkReal x10671=(r11*r21);
j4eval[0]=((((-1.0)*x10671))+(((-1.0)*x10670)));
j4eval[1]=((((-1.0)*x10669*x10670))+(((-1.0)*x10669*x10671)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10672=((-1.0)*r21);
IkReal x10673=((-1.0)*px);
CheckValue<IkReal> x10675 = IKatan2WithCheck(IkReal(x10672),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10675.valid){
continue;
}
IkReal x10674=((1.0)*(x10675.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10674)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10673);
rxp1_1=(px*r21);
rxp1_2=(r11*x10673);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10674)));
IkReal gconst4=x10672;
IkReal gconst5=((1.0)*r20);
IkReal x10676=((1.0)*r11*r21);
IkReal x10677=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10676))+(((-1.0)*x10677)));
j4eval[1]=(((sj3*x10676))+((sj3*x10677)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10678=((-1.0)*r21);
IkReal x10679=((-1.0)*px);
CheckValue<IkReal> x10681 = IKatan2WithCheck(IkReal(x10678),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10681.valid){
continue;
}
IkReal x10680=((1.0)*(x10681.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10680)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10679);
rxp1_1=(px*r21);
rxp1_2=(r11*x10679);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10680)));
IkReal gconst4=x10678;
IkReal gconst5=((1.0)*r20);
IkReal x10682=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10682))+(((-1.0)*r11*r21*x10682)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10683=((1.0)*r10);
CheckValue<IkReal> x10684=IKPowWithIntegerCheck(cj3,-1);
if(!x10684.valid){
continue;
}
CheckValue<IkReal> x10685=IKPowWithIntegerCheck(r02,-1);
if(!x10685.valid){
continue;
}
CheckValue<IkReal> x10686=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10683))),-1);
if(!x10686.valid){
continue;
}
if( IKabs(((x10684.value)*(x10685.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10686.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10683)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10684.value)*(x10685.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10686.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10683))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10684.value)*(x10685.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10686.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10683))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10687=IKsin(j4);
IkReal x10688=IKcos(j4);
IkReal x10689=(cj2*sj1);
IkReal x10690=(cj1*sj2);
IkReal x10691=(gconst5*sj3);
IkReal x10692=(gconst4*r11);
IkReal x10693=(sj1*sj2);
IkReal x10694=((1.0)*gconst5);
IkReal x10695=(cj1*cj2);
IkReal x10696=(gconst4*r21);
IkReal x10697=(cj3*gconst4);
IkReal x10698=(gconst4*sj3);
IkReal x10699=(cj3*gconst5);
IkReal x10700=(r20*x10688);
IkReal x10701=(r10*x10688);
IkReal x10702=(cj3*x10688);
IkReal x10703=(r02*x10687);
IkReal x10704=(x10689+x10690);
IkReal x10705=((1.0)*sj3*x10688);
evalcond[0]=((-1.0)*r02*x10688);
evalcond[1]=((((-1.0)*r20*x10687*x10694))+((x10687*x10696)));
evalcond[2]=(((cj3*x10703))+(((-1.0)*x10693))+x10695);
evalcond[3]=(x10704+(((-1.0)*sj3*x10703)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x10687*x10694))+((x10687*x10692)));
evalcond[5]=((((-1.0)*cj3*x10694*x10701))+((r10*x10698))+((r11*x10691))+((x10692*x10702)));
evalcond[6]=(((r10*x10697))+((x10691*x10701))+((r11*x10699))+(((-1.0)*x10692*x10705)));
evalcond[7]=(((r21*x10691))+(((-1.0)*cj3*x10694*x10700))+((x10696*x10702))+x10704+((r20*x10698)));
evalcond[8]=(((r21*x10699))+((x10691*x10700))+(((-1.0)*x10695))+(((-1.0)*x10696*x10705))+x10693+((r20*x10697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10706=((1.0)*gconst5);
IkReal x10707=(gconst4*r11);
CheckValue<IkReal> x10708=IKPowWithIntegerCheck(((((-1.0)*r10*x10706))+x10707),-1);
if(!x10708.valid){
continue;
}
CheckValue<IkReal> x10709=IKPowWithIntegerCheck(((((-1.0)*sj3*x10707))+((gconst5*r10*sj3))),-1);
if(!x10709.valid){
continue;
}
if( IKabs(x10708.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10709.value)*(((((-1.0)*cj3*r11*x10706))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10708.value)+IKsqr(((x10709.value)*(((((-1.0)*cj3*r11*x10706))+(((-1.0)*cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10708.value, ((x10709.value)*(((((-1.0)*cj3*r11*x10706))+(((-1.0)*cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10710=IKsin(j4);
IkReal x10711=IKcos(j4);
IkReal x10712=(cj2*sj1);
IkReal x10713=(cj1*sj2);
IkReal x10714=(gconst5*sj3);
IkReal x10715=(gconst4*r11);
IkReal x10716=(sj1*sj2);
IkReal x10717=((1.0)*gconst5);
IkReal x10718=(cj1*cj2);
IkReal x10719=(gconst4*r21);
IkReal x10720=(cj3*gconst4);
IkReal x10721=(gconst4*sj3);
IkReal x10722=(cj3*gconst5);
IkReal x10723=(r20*x10711);
IkReal x10724=(r10*x10711);
IkReal x10725=(cj3*x10711);
IkReal x10726=(r02*x10710);
IkReal x10727=(x10712+x10713);
IkReal x10728=((1.0)*sj3*x10711);
evalcond[0]=((-1.0)*r02*x10711);
evalcond[1]=(((x10710*x10719))+(((-1.0)*r20*x10710*x10717)));
evalcond[2]=((((-1.0)*x10716))+x10718+((cj3*x10726)));
evalcond[3]=(x10727+(((-1.0)*sj3*x10726)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x10710*x10717))+((x10710*x10715)));
evalcond[5]=(((r10*x10721))+((r11*x10714))+((x10715*x10725))+(((-1.0)*cj3*x10717*x10724)));
evalcond[6]=(((r10*x10720))+(((-1.0)*x10715*x10728))+((x10714*x10724))+((r11*x10722)));
evalcond[7]=(((x10719*x10725))+(((-1.0)*cj3*x10717*x10723))+((r21*x10714))+((r20*x10721))+x10727);
evalcond[8]=((((-1.0)*x10718))+((r21*x10722))+(((-1.0)*x10719*x10728))+((r20*x10720))+((x10714*x10723))+x10716);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10729=((1.0)*sj3);
IkReal x10730=(gconst4*r11);
IkReal x10731=((1.0)*gconst5*r10);
CheckValue<IkReal> x10732=IKPowWithIntegerCheck(((((-1.0)*x10731))+x10730),-1);
if(!x10732.valid){
continue;
}
CheckValue<IkReal> x10733=IKPowWithIntegerCheck(((((-1.0)*cj3*x10731))+((cj3*x10730))),-1);
if(!x10733.valid){
continue;
}
if( IKabs(x10732.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10733.value)*(((((-1.0)*gconst5*r11*x10729))+(((-1.0)*gconst4*r10*x10729)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10732.value)+IKsqr(((x10733.value)*(((((-1.0)*gconst5*r11*x10729))+(((-1.0)*gconst4*r10*x10729))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10732.value, ((x10733.value)*(((((-1.0)*gconst5*r11*x10729))+(((-1.0)*gconst4*r10*x10729))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10734=IKsin(j4);
IkReal x10735=IKcos(j4);
IkReal x10736=(cj2*sj1);
IkReal x10737=(cj1*sj2);
IkReal x10738=(gconst5*sj3);
IkReal x10739=(gconst4*r11);
IkReal x10740=(sj1*sj2);
IkReal x10741=((1.0)*gconst5);
IkReal x10742=(cj1*cj2);
IkReal x10743=(gconst4*r21);
IkReal x10744=(cj3*gconst4);
IkReal x10745=(gconst4*sj3);
IkReal x10746=(cj3*gconst5);
IkReal x10747=(r20*x10735);
IkReal x10748=(r10*x10735);
IkReal x10749=(cj3*x10735);
IkReal x10750=(r02*x10734);
IkReal x10751=(x10736+x10737);
IkReal x10752=((1.0)*sj3*x10735);
evalcond[0]=((-1.0)*r02*x10735);
evalcond[1]=(((x10734*x10743))+(((-1.0)*r20*x10734*x10741)));
evalcond[2]=((((-1.0)*x10740))+((cj3*x10750))+x10742);
evalcond[3]=((((-1.0)*sj3*x10750))+x10751);
evalcond[4]=((-1.0)+((x10734*x10739))+(((-1.0)*r10*x10734*x10741)));
evalcond[5]=((((-1.0)*cj3*x10741*x10748))+((r10*x10745))+((x10739*x10749))+((r11*x10738)));
evalcond[6]=(((r10*x10744))+(((-1.0)*x10739*x10752))+((r11*x10746))+((x10738*x10748)));
evalcond[7]=((((-1.0)*cj3*x10741*x10747))+((x10743*x10749))+((r21*x10738))+((r20*x10745))+x10751);
evalcond[8]=((((-1.0)*x10742))+((r20*x10744))+x10740+(((-1.0)*x10743*x10752))+((x10738*x10747))+((r21*x10746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10753=gconst4*gconst4;
IkReal x10754=gconst5*gconst5;
IkReal x10755=(r10*r21);
IkReal x10756=((1.0)*cj3);
IkReal x10757=(r11*r21);
IkReal x10758=(r11*r20);
IkReal x10759=(r22*sj3);
IkReal x10760=(gconst4*r10);
IkReal x10761=((1.0)*sj3);
IkReal x10762=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10763 = IKatan2WithCheck(IkReal((((x10759*x10760))+((gconst5*r11*x10759)))),IkReal(((((-1.0)*x10754*x10758*x10761))+(((-1.0)*gconst5*r20*x10760*x10761))+((gconst4*gconst5*sj3*x10757))+((sj3*x10753*x10755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10763.valid){
continue;
}
CheckValue<IkReal> x10764=IKPowWithIntegerCheck(IKsign((((x10755*x10762))+(((-1.0)*r12*r22*x10756))+((x10758*x10762))+(((-1.0)*r10*r20*x10754*x10756))+(((-1.0)*x10753*x10756*x10757)))),-1);
if(!x10764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10763.value)+(((1.5707963267949)*(x10764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10765=IKsin(j4);
IkReal x10766=IKcos(j4);
IkReal x10767=(cj2*sj1);
IkReal x10768=(cj1*sj2);
IkReal x10769=(gconst5*sj3);
IkReal x10770=(gconst4*r11);
IkReal x10771=(sj1*sj2);
IkReal x10772=(gconst5*r10);
IkReal x10773=(cj1*cj2);
IkReal x10774=(gconst4*r01);
IkReal x10775=(gconst4*r21);
IkReal x10776=(gconst5*r00);
IkReal x10777=(gconst4*sj3);
IkReal x10778=(cj3*gconst5);
IkReal x10779=(cj3*gconst4);
IkReal x10780=((1.0)*x10766);
IkReal x10781=((1.0)*x10765);
IkReal x10782=(cj3*x10765);
IkReal x10783=(cj3*x10766);
IkReal x10784=(x10767+x10768);
evalcond[0]=((((-1.0)*gconst5*r20*x10781))+((x10765*x10775))+(((-1.0)*r22*x10780)));
evalcond[1]=((((-1.0)*x10776*x10781))+((x10765*x10774))+(((-1.0)*r02*x10780)));
evalcond[2]=((-1.0)+(((-1.0)*x10772*x10781))+(((-1.0)*r12*x10780))+((x10765*x10770)));
evalcond[3]=((((-1.0)*cj3*x10772*x10780))+((r11*x10769))+((x10770*x10783))+((r10*x10777))+((r12*x10782)));
evalcond[4]=(((r11*x10778))+((r10*x10766*x10769))+(((-1.0)*r12*sj3*x10781))+((r10*x10779))+(((-1.0)*sj3*x10770*x10780)));
evalcond[5]=(((r22*x10782))+(((-1.0)*r20*x10778*x10780))+((r20*x10777))+((x10775*x10783))+((r21*x10769))+x10784);
evalcond[6]=((((-1.0)*x10771))+((r02*x10782))+(((-1.0)*cj3*x10776*x10780))+((r01*x10769))+((x10774*x10783))+((r00*x10777))+x10773);
evalcond[7]=((((-1.0)*sj3*x10774*x10780))+(((-1.0)*r02*sj3*x10781))+((r00*x10779))+((r01*x10778))+((r00*x10766*x10769))+x10784);
evalcond[8]=(((r20*x10779))+(((-1.0)*x10773))+(((-1.0)*r22*sj3*x10781))+(((-1.0)*sj3*x10775*x10780))+((r20*x10766*x10769))+((r21*x10778))+x10771);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10785=((1.0)*gconst5);
CheckValue<IkReal> x10786 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10785))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10786.valid){
continue;
}
CheckValue<IkReal> x10787=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10785))+(((-1.0)*gconst4*r20)))),-1);
if(!x10787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10786.value)+(((1.5707963267949)*(x10787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10788=IKsin(j4);
IkReal x10789=IKcos(j4);
IkReal x10790=(cj2*sj1);
IkReal x10791=(cj1*sj2);
IkReal x10792=(gconst5*sj3);
IkReal x10793=(gconst4*r11);
IkReal x10794=(sj1*sj2);
IkReal x10795=(gconst5*r10);
IkReal x10796=(cj1*cj2);
IkReal x10797=(gconst4*r01);
IkReal x10798=(gconst4*r21);
IkReal x10799=(gconst5*r00);
IkReal x10800=(gconst4*sj3);
IkReal x10801=(cj3*gconst5);
IkReal x10802=(cj3*gconst4);
IkReal x10803=((1.0)*x10789);
IkReal x10804=((1.0)*x10788);
IkReal x10805=(cj3*x10788);
IkReal x10806=(cj3*x10789);
IkReal x10807=(x10790+x10791);
evalcond[0]=((((-1.0)*r22*x10803))+(((-1.0)*gconst5*r20*x10804))+((x10788*x10798)));
evalcond[1]=((((-1.0)*x10799*x10804))+(((-1.0)*r02*x10803))+((x10788*x10797)));
evalcond[2]=((-1.0)+(((-1.0)*x10795*x10804))+(((-1.0)*r12*x10803))+((x10788*x10793)));
evalcond[3]=(((r10*x10800))+((r12*x10805))+((x10793*x10806))+(((-1.0)*cj3*x10795*x10803))+((r11*x10792)));
evalcond[4]=(((r10*x10802))+(((-1.0)*r12*sj3*x10804))+((r11*x10801))+(((-1.0)*sj3*x10793*x10803))+((r10*x10789*x10792)));
evalcond[5]=(((r20*x10800))+((r21*x10792))+((r22*x10805))+((x10798*x10806))+(((-1.0)*r20*x10801*x10803))+x10807);
evalcond[6]=(((r00*x10800))+((r02*x10805))+(((-1.0)*x10794))+x10796+((r01*x10792))+(((-1.0)*cj3*x10799*x10803))+((x10797*x10806)));
evalcond[7]=((((-1.0)*r02*sj3*x10804))+(((-1.0)*sj3*x10797*x10803))+((r01*x10801))+((r00*x10802))+((r00*x10789*x10792))+x10807);
evalcond[8]=(((r20*x10802))+((r20*x10789*x10792))+(((-1.0)*sj3*x10798*x10803))+((r21*x10801))+(((-1.0)*x10796))+x10794+(((-1.0)*r22*sj3*x10804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10808=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10808.valid){
continue;
}
CheckValue<IkReal> x10809 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10808.value)))+(x10809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10810=IKsin(j4);
IkReal x10811=IKcos(j4);
IkReal x10812=(cj2*sj1);
IkReal x10813=(cj1*sj2);
IkReal x10814=(gconst5*sj3);
IkReal x10815=(gconst4*r11);
IkReal x10816=(sj1*sj2);
IkReal x10817=(gconst5*r10);
IkReal x10818=(cj1*cj2);
IkReal x10819=(gconst4*r01);
IkReal x10820=(gconst4*r21);
IkReal x10821=(gconst5*r00);
IkReal x10822=(gconst4*sj3);
IkReal x10823=(cj3*gconst5);
IkReal x10824=(cj3*gconst4);
IkReal x10825=((1.0)*x10811);
IkReal x10826=((1.0)*x10810);
IkReal x10827=(cj3*x10810);
IkReal x10828=(cj3*x10811);
IkReal x10829=(x10813+x10812);
evalcond[0]=(((x10810*x10820))+(((-1.0)*gconst5*r20*x10826))+(((-1.0)*r22*x10825)));
evalcond[1]=((((-1.0)*r02*x10825))+(((-1.0)*x10821*x10826))+((x10810*x10819)));
evalcond[2]=((-1.0)+((x10810*x10815))+(((-1.0)*r12*x10825))+(((-1.0)*x10817*x10826)));
evalcond[3]=(((r12*x10827))+((x10815*x10828))+((r10*x10822))+((r11*x10814))+(((-1.0)*cj3*x10817*x10825)));
evalcond[4]=(((r10*x10811*x10814))+((r10*x10824))+(((-1.0)*r12*sj3*x10826))+(((-1.0)*sj3*x10815*x10825))+((r11*x10823)));
evalcond[5]=((((-1.0)*r20*x10823*x10825))+((x10820*x10828))+((r20*x10822))+((r22*x10827))+((r21*x10814))+x10829);
evalcond[6]=((((-1.0)*x10816))+((r02*x10827))+(((-1.0)*cj3*x10821*x10825))+((r01*x10814))+((r00*x10822))+((x10819*x10828))+x10818);
evalcond[7]=((((-1.0)*sj3*x10819*x10825))+(((-1.0)*r02*sj3*x10826))+((r00*x10824))+((r01*x10823))+((r00*x10811*x10814))+x10829);
evalcond[8]=(((r21*x10823))+(((-1.0)*x10818))+((r20*x10811*x10814))+(((-1.0)*r22*sj3*x10826))+(((-1.0)*sj3*x10820*x10825))+((r20*x10824))+x10816);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10830=((-1.0)*r21);
CheckValue<IkReal> x10833 = IKatan2WithCheck(IkReal(x10830),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10833.valid){
continue;
}
IkReal x10831=((1.0)*(x10833.value));
IkReal x10832=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10831)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10831)));
IkReal gconst4=(x10830*x10832);
IkReal gconst5=((1.0)*r20*x10832);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10834=((-1.0)*r21);
CheckValue<IkReal> x10837 = IKatan2WithCheck(IkReal(x10834),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10837.valid){
continue;
}
IkReal x10835=((1.0)*(x10837.value));
IkReal x10836=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10835)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10835)));
IkReal gconst4=(x10834*x10836);
IkReal gconst5=((1.0)*r20*x10836);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10838=((-1.0)*r21);
CheckValue<IkReal> x10841 = IKatan2WithCheck(IkReal(x10838),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10841.valid){
continue;
}
IkReal x10839=((1.0)*(x10841.value));
IkReal x10840=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10839)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10839)));
IkReal gconst4=(x10838*x10840);
IkReal gconst5=((1.0)*r20*x10840);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10842=((-1.0)*r21);
CheckValue<IkReal> x10845 = IKatan2WithCheck(IkReal(x10842),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10845.valid){
continue;
}
IkReal x10843=((1.0)*(x10845.value));
IkReal x10844=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10843)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10843)));
IkReal gconst4=(x10842*x10844);
IkReal gconst5=((1.0)*r20*x10844);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10846=((-1.0)*r21);
CheckValue<IkReal> x10849 = IKatan2WithCheck(IkReal(x10846),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10849.valid){
continue;
}
IkReal x10847=((1.0)*(x10849.value));
IkReal x10848=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10847)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10847)));
IkReal gconst4=(x10846*x10848);
IkReal gconst5=((1.0)*r20*x10848);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10850=((-1.0)*r21);
CheckValue<IkReal> x10853 = IKatan2WithCheck(IkReal(x10850),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10853.valid){
continue;
}
IkReal x10851=((1.0)*(x10853.value));
IkReal x10852=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10851)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10851)));
IkReal gconst4=(x10850*x10852);
IkReal gconst5=((1.0)*r20*x10852);
IkReal x10854=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10858=IKPowWithIntegerCheck(x10854,-1);
if(!x10858.valid){
continue;
}
IkReal x10855=x10858.value;
IkReal x10856=((1.0)*x10855);
IkReal x10857=((((-1.0)*(r02*r02)))+(((-1.0)*x10856*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10855))+(((-1.0)*x10856*(r00*r00)*(r20*r20))));
j4eval[0]=x10857;
j4eval[1]=r02;
j4eval[2]=x10854;
j4eval[3]=IKsign(x10857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10859=(gconst5*r00);
IkReal x10860=(gconst4*r01);
CheckValue<IkReal> x10861 = IKatan2WithCheck(IkReal(((((-1.0)*x10860))+x10859)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10861.valid){
continue;
}
CheckValue<IkReal> x10862=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10860*x10860)))+(((2.0)*x10859*x10860))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10859*x10859))))),-1);
if(!x10862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10861.value)+(((1.5707963267949)*(x10862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10863=IKsin(j4);
IkReal x10864=IKcos(j4);
IkReal x10865=(gconst4*r11);
IkReal x10866=((1.0)*cj1);
IkReal x10867=(gconst5*r10);
IkReal x10868=(gconst4*r01);
IkReal x10869=(gconst5*r00);
IkReal x10870=(gconst4*r21);
IkReal x10871=(gconst5*r20);
IkReal x10872=((1.0)*x10864);
IkReal x10873=((1.0)*x10863);
evalcond[0]=((((-1.0)*r22*x10872))+((x10863*x10870))+(((-1.0)*x10871*x10873)));
evalcond[1]=(((x10863*x10865))+(((-1.0)*r12*x10872))+(((-1.0)*x10867*x10873)));
evalcond[2]=(((x10864*x10869))+(((-1.0)*x10868*x10872))+(((-1.0)*r02*x10873)));
evalcond[3]=((-1.0)+((x10863*x10868))+(((-1.0)*r02*x10872))+(((-1.0)*x10869*x10873)));
evalcond[4]=((((-1.0)*r22*x10873))+(((-1.0)*x10870*x10872))+((x10864*x10871))+((sj1*sj2))+(((-1.0)*cj2*x10866)));
evalcond[5]=((((-1.0)*r12*x10873))+((x10864*x10867))+(((-1.0)*cj2*sj1))+(((-1.0)*x10865*x10872))+(((-1.0)*sj2*x10866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10874=((1.0)*gconst5);
CheckValue<IkReal> x10875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10874))+(((-1.0)*gconst4*r10)))),-1);
if(!x10875.valid){
continue;
}
CheckValue<IkReal> x10876 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10874))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10875.value)))+(x10876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10877=IKsin(j4);
IkReal x10878=IKcos(j4);
IkReal x10879=(gconst4*r11);
IkReal x10880=((1.0)*cj1);
IkReal x10881=(gconst5*r10);
IkReal x10882=(gconst4*r01);
IkReal x10883=(gconst5*r00);
IkReal x10884=(gconst4*r21);
IkReal x10885=(gconst5*r20);
IkReal x10886=((1.0)*x10878);
IkReal x10887=((1.0)*x10877);
evalcond[0]=(((x10877*x10884))+(((-1.0)*r22*x10886))+(((-1.0)*x10885*x10887)));
evalcond[1]=(((x10877*x10879))+(((-1.0)*x10881*x10887))+(((-1.0)*r12*x10886)));
evalcond[2]=((((-1.0)*r02*x10887))+(((-1.0)*x10882*x10886))+((x10878*x10883)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10886))+((x10877*x10882))+(((-1.0)*x10883*x10887)));
evalcond[4]=((((-1.0)*x10884*x10886))+((sj1*sj2))+(((-1.0)*cj2*x10880))+(((-1.0)*r22*x10887))+((x10878*x10885)));
evalcond[5]=((((-1.0)*sj2*x10880))+(((-1.0)*cj2*sj1))+(((-1.0)*x10879*x10886))+(((-1.0)*r12*x10887))+((x10878*x10881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10888 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10888.valid){
continue;
}
CheckValue<IkReal> x10889=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10888.value)+(((1.5707963267949)*(x10889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10890=IKsin(j4);
IkReal x10891=IKcos(j4);
IkReal x10892=(gconst4*r11);
IkReal x10893=((1.0)*cj1);
IkReal x10894=(gconst5*r10);
IkReal x10895=(gconst4*r01);
IkReal x10896=(gconst5*r00);
IkReal x10897=(gconst4*r21);
IkReal x10898=(gconst5*r20);
IkReal x10899=((1.0)*x10891);
IkReal x10900=((1.0)*x10890);
evalcond[0]=(((x10890*x10897))+(((-1.0)*r22*x10899))+(((-1.0)*x10898*x10900)));
evalcond[1]=(((x10890*x10892))+(((-1.0)*r12*x10899))+(((-1.0)*x10894*x10900)));
evalcond[2]=((((-1.0)*x10895*x10899))+((x10891*x10896))+(((-1.0)*r02*x10900)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10899))+((x10890*x10895))+(((-1.0)*x10896*x10900)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x10900))+((x10891*x10898))+(((-1.0)*x10897*x10899))+(((-1.0)*cj2*x10893)));
evalcond[5]=((((-1.0)*sj2*x10893))+(((-1.0)*x10892*x10899))+(((-1.0)*cj2*sj1))+((x10891*x10894))+(((-1.0)*r12*x10900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10901=((-1.0)*r21);
CheckValue<IkReal> x10904 = IKatan2WithCheck(IkReal(x10901),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10904.valid){
continue;
}
IkReal x10902=((1.0)*(x10904.value));
IkReal x10903=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10902)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10902)));
IkReal gconst4=(x10901*x10903);
IkReal gconst5=((1.0)*r20*x10903);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10905=((-1.0)*r21);
CheckValue<IkReal> x10908 = IKatan2WithCheck(IkReal(x10905),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10908.valid){
continue;
}
IkReal x10906=((1.0)*(x10908.value));
IkReal x10907=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10906)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10906)));
IkReal gconst4=(x10905*x10907);
IkReal gconst5=((1.0)*r20*x10907);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10909=((-1.0)*r21);
CheckValue<IkReal> x10912 = IKatan2WithCheck(IkReal(x10909),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10912.valid){
continue;
}
IkReal x10910=((1.0)*(x10912.value));
IkReal x10911=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10910)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10910)));
IkReal gconst4=(x10909*x10911);
IkReal gconst5=((1.0)*r20*x10911);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10913=(gconst4*r01);
IkReal x10914=(gconst5*r00);
CheckValue<IkReal> x10915 = IKatan2WithCheck(IkReal((x10913+(((-1.0)*x10914)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10915.valid){
continue;
}
CheckValue<IkReal> x10916=IKPowWithIntegerCheck(IKsign(((x10914*x10914)+(((-2.0)*x10913*x10914))+(r02*r02)+(x10913*x10913))),-1);
if(!x10916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10915.value)+(((1.5707963267949)*(x10916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10917=IKcos(j4);
IkReal x10918=IKsin(j4);
IkReal x10919=(gconst4*r11);
IkReal x10920=(gconst5*r10);
IkReal x10921=((1.0)*cj1);
IkReal x10922=(gconst5*r00);
IkReal x10923=(gconst5*r20);
IkReal x10924=((1.0)*x10917);
IkReal x10925=(gconst4*x10917);
IkReal x10926=((1.0)*x10918);
IkReal x10927=(gconst4*x10918);
evalcond[0]=(((r02*x10918))+((r01*x10925))+(((-1.0)*x10922*x10924)));
evalcond[1]=((((-1.0)*r22*x10924))+((r21*x10927))+(((-1.0)*x10923*x10926)));
evalcond[2]=((((-1.0)*x10920*x10926))+(((-1.0)*r12*x10924))+((x10918*x10919)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10924))+((r01*x10927))+(((-1.0)*x10922*x10926)));
evalcond[4]=(((sj1*sj2))+((r21*x10925))+((r22*x10918))+(((-1.0)*cj2*x10921))+(((-1.0)*x10923*x10924)));
evalcond[5]=((((-1.0)*x10920*x10924))+(((-1.0)*sj2*x10921))+(((-1.0)*cj2*sj1))+((r12*x10918))+((x10917*x10919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10928=((1.0)*gconst5);
CheckValue<IkReal> x10929 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10928))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10929.valid){
continue;
}
CheckValue<IkReal> x10930=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10928))+(((-1.0)*gconst4*r10)))),-1);
if(!x10930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10929.value)+(((1.5707963267949)*(x10930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10931=IKcos(j4);
IkReal x10932=IKsin(j4);
IkReal x10933=(gconst4*r11);
IkReal x10934=(gconst5*r10);
IkReal x10935=((1.0)*cj1);
IkReal x10936=(gconst5*r00);
IkReal x10937=(gconst5*r20);
IkReal x10938=((1.0)*x10931);
IkReal x10939=(gconst4*x10931);
IkReal x10940=((1.0)*x10932);
IkReal x10941=(gconst4*x10932);
evalcond[0]=(((r02*x10932))+(((-1.0)*x10936*x10938))+((r01*x10939)));
evalcond[1]=((((-1.0)*r22*x10938))+((r21*x10941))+(((-1.0)*x10937*x10940)));
evalcond[2]=((((-1.0)*r12*x10938))+(((-1.0)*x10934*x10940))+((x10932*x10933)));
evalcond[3]=((-1.0)+(((-1.0)*x10936*x10940))+((r01*x10941))+(((-1.0)*r02*x10938)));
evalcond[4]=((((-1.0)*x10937*x10938))+((sj1*sj2))+((r22*x10932))+((r21*x10939))+(((-1.0)*cj2*x10935)));
evalcond[5]=(((x10931*x10933))+(((-1.0)*cj2*sj1))+((r12*x10932))+(((-1.0)*x10934*x10938))+(((-1.0)*sj2*x10935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10942 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10942.valid){
continue;
}
CheckValue<IkReal> x10943=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10942.value)+(((1.5707963267949)*(x10943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10944=IKcos(j4);
IkReal x10945=IKsin(j4);
IkReal x10946=(gconst4*r11);
IkReal x10947=(gconst5*r10);
IkReal x10948=((1.0)*cj1);
IkReal x10949=(gconst5*r00);
IkReal x10950=(gconst5*r20);
IkReal x10951=((1.0)*x10944);
IkReal x10952=(gconst4*x10944);
IkReal x10953=((1.0)*x10945);
IkReal x10954=(gconst4*x10945);
evalcond[0]=((((-1.0)*x10949*x10951))+((r01*x10952))+((r02*x10945)));
evalcond[1]=((((-1.0)*x10950*x10953))+(((-1.0)*r22*x10951))+((r21*x10954)));
evalcond[2]=((((-1.0)*x10947*x10953))+((x10945*x10946))+(((-1.0)*r12*x10951)));
evalcond[3]=((-1.0)+(((-1.0)*x10949*x10953))+((r01*x10954))+(((-1.0)*r02*x10951)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10950*x10951))+((r21*x10952))+((r22*x10945))+(((-1.0)*cj2*x10948)));
evalcond[5]=((((-1.0)*x10947*x10951))+((r12*x10945))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10948))+((x10944*x10946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10955=((-1.0)*r21);
CheckValue<IkReal> x10958 = IKatan2WithCheck(IkReal(x10955),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10958.valid){
continue;
}
IkReal x10956=((1.0)*(x10958.value));
IkReal x10957=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10956)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10956)));
IkReal gconst4=(x10955*x10957);
IkReal gconst5=((1.0)*r20*x10957);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10959=((-1.0)*r21);
CheckValue<IkReal> x10962 = IKatan2WithCheck(IkReal(x10959),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10962.valid){
continue;
}
IkReal x10960=((1.0)*(x10962.value));
IkReal x10961=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10960)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10960)));
IkReal gconst4=(x10959*x10961);
IkReal gconst5=((1.0)*r20*x10961);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10963=((-1.0)*r21);
CheckValue<IkReal> x10966 = IKatan2WithCheck(IkReal(x10963),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10966.valid){
continue;
}
IkReal x10964=((1.0)*(x10966.value));
IkReal x10965=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10964)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10964)));
IkReal gconst4=(x10963*x10965);
IkReal gconst5=((1.0)*r20*x10965);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10967=(gconst4*r01);
IkReal x10968=(gconst5*r00);
CheckValue<IkReal> x10969=IKPowWithIntegerCheck(IKsign(((x10967*x10967)+(((-2.0)*x10967*x10968))+(r02*r02)+(x10968*x10968))),-1);
if(!x10969.valid){
continue;
}
CheckValue<IkReal> x10970 = IKatan2WithCheck(IkReal(((((-1.0)*x10968))+x10967)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10969.value)))+(x10970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10971=IKcos(j4);
IkReal x10972=IKsin(j4);
IkReal x10973=(gconst4*r11);
IkReal x10974=(gconst5*r10);
IkReal x10975=(gconst5*r00);
IkReal x10976=(gconst5*r20);
IkReal x10977=((1.0)*x10971);
IkReal x10978=(gconst4*x10971);
IkReal x10979=((1.0)*x10972);
IkReal x10980=(gconst4*x10972);
evalcond[0]=(((r02*x10972))+((r01*x10978))+(((-1.0)*x10975*x10977)));
evalcond[1]=(((r21*x10980))+(((-1.0)*x10976*x10979))+(((-1.0)*r22*x10977)));
evalcond[2]=(((x10972*x10973))+(((-1.0)*x10974*x10979))+(((-1.0)*r12*x10977)));
evalcond[3]=((-1.0)+((r01*x10980))+(((-1.0)*r02*x10977))+(((-1.0)*x10975*x10979)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10976*x10977))+((cj1*sj2))+((r22*x10972))+((r21*x10978)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10971*x10973))+((r12*x10972))+(((-1.0)*x10974*x10977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10981=((1.0)*gconst5);
CheckValue<IkReal> x10982=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10981))+(((-1.0)*gconst4*r10)))),-1);
if(!x10982.valid){
continue;
}
CheckValue<IkReal> x10983 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10981))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10982.value)))+(x10983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10984=IKcos(j4);
IkReal x10985=IKsin(j4);
IkReal x10986=(gconst4*r11);
IkReal x10987=(gconst5*r10);
IkReal x10988=(gconst5*r00);
IkReal x10989=(gconst5*r20);
IkReal x10990=((1.0)*x10984);
IkReal x10991=(gconst4*x10984);
IkReal x10992=((1.0)*x10985);
IkReal x10993=(gconst4*x10985);
evalcond[0]=(((r01*x10991))+(((-1.0)*x10988*x10990))+((r02*x10985)));
evalcond[1]=(((r21*x10993))+(((-1.0)*x10989*x10992))+(((-1.0)*r22*x10990)));
evalcond[2]=(((x10985*x10986))+(((-1.0)*r12*x10990))+(((-1.0)*x10987*x10992)));
evalcond[3]=((-1.0)+((r01*x10993))+(((-1.0)*x10988*x10992))+(((-1.0)*r02*x10990)));
evalcond[4]=(((r22*x10985))+((cj2*sj1))+((r21*x10991))+(((-1.0)*x10989*x10990))+((cj1*sj2)));
evalcond[5]=(((r12*x10985))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10984*x10986))+(((-1.0)*x10987*x10990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10994 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10994.valid){
continue;
}
CheckValue<IkReal> x10995=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10994.value)+(((1.5707963267949)*(x10995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10996=IKcos(j4);
IkReal x10997=IKsin(j4);
IkReal x10998=(gconst4*r11);
IkReal x10999=(gconst5*r10);
IkReal x11000=(gconst5*r00);
IkReal x11001=(gconst5*r20);
IkReal x11002=((1.0)*x10996);
IkReal x11003=(gconst4*x10996);
IkReal x11004=((1.0)*x10997);
IkReal x11005=(gconst4*x10997);
evalcond[0]=(((r01*x11003))+(((-1.0)*x11000*x11002))+((r02*x10997)));
evalcond[1]=((((-1.0)*r22*x11002))+((r21*x11005))+(((-1.0)*x11001*x11004)));
evalcond[2]=((((-1.0)*x10999*x11004))+((x10997*x10998))+(((-1.0)*r12*x11002)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11002))+((r01*x11005))+(((-1.0)*x11000*x11004)));
evalcond[4]=(((cj2*sj1))+((r22*x10997))+((cj1*sj2))+((r21*x11003))+(((-1.0)*x11001*x11002)));
evalcond[5]=(((r12*x10997))+(((-1.0)*x10999*x11002))+(((-1.0)*cj1*cj2))+((x10996*x10998))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11006=((-1.0)*r21);
CheckValue<IkReal> x11009 = IKatan2WithCheck(IkReal(x11006),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11009.valid){
continue;
}
IkReal x11007=((1.0)*(x11009.value));
IkReal x11008=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11007)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11007)));
IkReal gconst4=(x11006*x11008);
IkReal gconst5=((1.0)*r20*x11008);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11010=((-1.0)*r21);
CheckValue<IkReal> x11013 = IKatan2WithCheck(IkReal(x11010),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11013.valid){
continue;
}
IkReal x11011=((1.0)*(x11013.value));
IkReal x11012=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11011)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11011)));
IkReal gconst4=(x11010*x11012);
IkReal gconst5=((1.0)*r20*x11012);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11014=((-1.0)*r21);
CheckValue<IkReal> x11017 = IKatan2WithCheck(IkReal(x11014),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11017.valid){
continue;
}
IkReal x11015=((1.0)*(x11017.value));
IkReal x11016=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11015)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11015)));
IkReal gconst4=(x11014*x11016);
IkReal gconst5=((1.0)*r20*x11016);
IkReal x11018=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11022=IKPowWithIntegerCheck(x11018,-1);
if(!x11022.valid){
continue;
}
IkReal x11019=x11022.value;
IkReal x11020=((1.0)*x11019);
IkReal x11021=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11019))+(((-1.0)*x11020*(r01*r01)*(r21*r21)))+(((-1.0)*x11020*(r00*r00)*(r20*r20))));
j4eval[0]=x11021;
j4eval[1]=r02;
j4eval[2]=x11018;
j4eval[3]=IKsign(x11021);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11023=(gconst5*r00);
IkReal x11024=(gconst4*r01);
CheckValue<IkReal> x11025 = IKatan2WithCheck(IkReal(((((-1.0)*x11024))+x11023)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11025.valid){
continue;
}
CheckValue<IkReal> x11026=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11023*x11023)))+(((-1.0)*(x11024*x11024)))+(((-1.0)*(r02*r02)))+(((2.0)*x11023*x11024)))),-1);
if(!x11026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11025.value)+(((1.5707963267949)*(x11026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11027=IKsin(j4);
IkReal x11028=IKcos(j4);
IkReal x11029=(gconst4*r11);
IkReal x11030=(gconst5*r10);
IkReal x11031=(gconst4*r01);
IkReal x11032=(gconst5*r00);
IkReal x11033=(gconst4*r21);
IkReal x11034=(gconst5*r20);
IkReal x11035=((1.0)*x11028);
IkReal x11036=((1.0)*x11027);
evalcond[0]=((((-1.0)*x11034*x11036))+(((-1.0)*r22*x11035))+((x11027*x11033)));
evalcond[1]=(((x11027*x11029))+(((-1.0)*x11030*x11036))+(((-1.0)*r12*x11035)));
evalcond[2]=((((-1.0)*r02*x11036))+(((-1.0)*x11031*x11035))+((x11028*x11032)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11035))+((x11027*x11031))+(((-1.0)*x11032*x11036)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11036))+(((-1.0)*x11033*x11035))+((x11028*x11034)));
evalcond[5]=((((-1.0)*x11029*x11035))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11036))+((x11028*x11030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11037=((1.0)*gconst5);
CheckValue<IkReal> x11038=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11037))+(((-1.0)*gconst4*r10)))),-1);
if(!x11038.valid){
continue;
}
CheckValue<IkReal> x11039 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11037))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11038.value)))+(x11039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11040=IKsin(j4);
IkReal x11041=IKcos(j4);
IkReal x11042=(gconst4*r11);
IkReal x11043=(gconst5*r10);
IkReal x11044=(gconst4*r01);
IkReal x11045=(gconst5*r00);
IkReal x11046=(gconst4*r21);
IkReal x11047=(gconst5*r20);
IkReal x11048=((1.0)*x11041);
IkReal x11049=((1.0)*x11040);
evalcond[0]=((((-1.0)*r22*x11048))+((x11040*x11046))+(((-1.0)*x11047*x11049)));
evalcond[1]=((((-1.0)*r12*x11048))+((x11040*x11042))+(((-1.0)*x11043*x11049)));
evalcond[2]=(((x11041*x11045))+(((-1.0)*r02*x11049))+(((-1.0)*x11044*x11048)));
evalcond[3]=((-1.0)+(((-1.0)*x11045*x11049))+((x11040*x11044))+(((-1.0)*r02*x11048)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11049))+((x11041*x11047))+((cj1*sj2))+(((-1.0)*x11046*x11048)));
evalcond[5]=(((x11041*x11043))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11049))+(((-1.0)*x11042*x11048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11050 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11050.valid){
continue;
}
CheckValue<IkReal> x11051=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11050.value)+(((1.5707963267949)*(x11051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11052=IKsin(j4);
IkReal x11053=IKcos(j4);
IkReal x11054=(gconst4*r11);
IkReal x11055=(gconst5*r10);
IkReal x11056=(gconst4*r01);
IkReal x11057=(gconst5*r00);
IkReal x11058=(gconst4*r21);
IkReal x11059=(gconst5*r20);
IkReal x11060=((1.0)*x11053);
IkReal x11061=((1.0)*x11052);
evalcond[0]=((((-1.0)*r22*x11060))+((x11052*x11058))+(((-1.0)*x11059*x11061)));
evalcond[1]=(((x11052*x11054))+(((-1.0)*x11055*x11061))+(((-1.0)*r12*x11060)));
evalcond[2]=((((-1.0)*r02*x11061))+((x11053*x11057))+(((-1.0)*x11056*x11060)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11060))+((x11052*x11056))+(((-1.0)*x11057*x11061)));
evalcond[4]=((((-1.0)*r22*x11061))+((cj2*sj1))+(((-1.0)*x11058*x11060))+((cj1*sj2))+((x11053*x11059)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11061))+((x11053*x11055))+(((-1.0)*x11054*x11060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11062=gconst4*gconst4;
IkReal x11063=gconst5*gconst5;
IkReal x11064=(r01*r20);
IkReal x11065=(gconst4*sj3);
IkReal x11066=(r01*r21);
IkReal x11067=((1.0)*cj3);
IkReal x11068=(r00*r21);
IkReal x11069=(r00*r20);
IkReal x11070=(cj3*gconst4*gconst5);
IkReal x11071=((1.0)*x11063);
CheckValue<IkReal> x11072=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x11067))+((x11064*x11070))+(((-1.0)*x11063*x11067*x11069))+(((-1.0)*x11062*x11066*x11067))+((x11068*x11070)))),-1);
if(!x11072.valid){
continue;
}
CheckValue<IkReal> x11073 = IKatan2WithCheck(IkReal((((r00*r22*x11065))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*sj3*x11064*x11071))+((gconst5*x11065*x11066))+((sj3*x11062*x11068))+(((-1.0)*gconst5*x11065*x11069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11072.value)))+(x11073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11074=IKsin(j4);
IkReal x11075=IKcos(j4);
IkReal x11076=(sj1*sj2);
IkReal x11077=(gconst5*sj3);
IkReal x11078=(gconst4*r11);
IkReal x11079=(gconst5*r10);
IkReal x11080=((1.0)*cj1);
IkReal x11081=(gconst4*r01);
IkReal x11082=(cj2*sj1);
IkReal x11083=(gconst5*r00);
IkReal x11084=(gconst4*sj3);
IkReal x11085=(cj3*gconst5);
IkReal x11086=(cj3*gconst4);
IkReal x11087=(gconst4*r21);
IkReal x11088=(cj2*x11080);
IkReal x11089=((1.0)*x11075);
IkReal x11090=((1.0)*x11074);
IkReal x11091=(cj3*x11074);
IkReal x11092=(cj3*x11075);
evalcond[0]=(((x11074*x11087))+(((-1.0)*gconst5*r20*x11090))+(((-1.0)*r22*x11089)));
evalcond[1]=((((-1.0)*x11079*x11090))+(((-1.0)*r12*x11089))+((x11074*x11078)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11089))+((x11074*x11081))+(((-1.0)*x11083*x11090)));
evalcond[3]=((((-1.0)*cj3*x11083*x11089))+((r02*x11091))+((r00*x11084))+((x11081*x11092))+((r01*x11077)));
evalcond[4]=((((-1.0)*r02*sj3*x11090))+((r00*x11075*x11077))+((r01*x11085))+((r00*x11086))+(((-1.0)*sj3*x11081*x11089)));
evalcond[5]=(((r21*x11075*x11086))+((r21*x11077))+((cj1*sj2))+(((-1.0)*r20*x11085*x11089))+x11082+((r22*x11091))+((r20*x11084)));
evalcond[6]=(((x11078*x11092))+(((-1.0)*cj3*x11079*x11089))+((r12*x11091))+((r11*x11077))+x11076+((r10*x11084))+(((-1.0)*x11088)));
evalcond[7]=(((r20*x11075*x11077))+((r21*x11085))+x11076+(((-1.0)*r22*sj3*x11090))+(((-1.0)*r21*x11084*x11089))+(((-1.0)*x11088))+((r20*x11086)));
evalcond[8]=((((-1.0)*sj2*x11080))+(((-1.0)*x11082))+(((-1.0)*r12*sj3*x11090))+((r10*x11086))+((r11*x11085))+((r10*x11075*x11077))+(((-1.0)*sj3*x11078*x11089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11093=((1.0)*gconst5);
CheckValue<IkReal> x11094 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11093))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11094.valid){
continue;
}
CheckValue<IkReal> x11095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11093))+(((-1.0)*gconst4*r10)))),-1);
if(!x11095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11094.value)+(((1.5707963267949)*(x11095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11096=IKsin(j4);
IkReal x11097=IKcos(j4);
IkReal x11098=(sj1*sj2);
IkReal x11099=(gconst5*sj3);
IkReal x11100=(gconst4*r11);
IkReal x11101=(gconst5*r10);
IkReal x11102=((1.0)*cj1);
IkReal x11103=(gconst4*r01);
IkReal x11104=(cj2*sj1);
IkReal x11105=(gconst5*r00);
IkReal x11106=(gconst4*sj3);
IkReal x11107=(cj3*gconst5);
IkReal x11108=(cj3*gconst4);
IkReal x11109=(gconst4*r21);
IkReal x11110=(cj2*x11102);
IkReal x11111=((1.0)*x11097);
IkReal x11112=((1.0)*x11096);
IkReal x11113=(cj3*x11096);
IkReal x11114=(cj3*x11097);
evalcond[0]=((((-1.0)*gconst5*r20*x11112))+(((-1.0)*r22*x11111))+((x11096*x11109)));
evalcond[1]=((((-1.0)*x11101*x11112))+(((-1.0)*r12*x11111))+((x11096*x11100)));
evalcond[2]=((-1.0)+(((-1.0)*x11105*x11112))+(((-1.0)*r02*x11111))+((x11096*x11103)));
evalcond[3]=(((r02*x11113))+((x11103*x11114))+((r01*x11099))+(((-1.0)*cj3*x11105*x11111))+((r00*x11106)));
evalcond[4]=((((-1.0)*r02*sj3*x11112))+(((-1.0)*sj3*x11103*x11111))+((r00*x11097*x11099))+((r00*x11108))+((r01*x11107)));
evalcond[5]=((((-1.0)*r20*x11107*x11111))+((r21*x11097*x11108))+((cj1*sj2))+x11104+((r20*x11106))+((r22*x11113))+((r21*x11099)));
evalcond[6]=(((x11100*x11114))+((r11*x11099))+((r10*x11106))+x11098+(((-1.0)*cj3*x11101*x11111))+(((-1.0)*x11110))+((r12*x11113)));
evalcond[7]=(((r20*x11097*x11099))+x11098+((r21*x11107))+(((-1.0)*r22*sj3*x11112))+((r20*x11108))+(((-1.0)*x11110))+(((-1.0)*r21*x11106*x11111)));
evalcond[8]=((((-1.0)*x11104))+(((-1.0)*r12*sj3*x11112))+((r10*x11108))+(((-1.0)*sj3*x11100*x11111))+(((-1.0)*sj2*x11102))+((r11*x11107))+((r10*x11097*x11099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11115 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11115.valid){
continue;
}
CheckValue<IkReal> x11116=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11115.value)+(((1.5707963267949)*(x11116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11117=IKsin(j4);
IkReal x11118=IKcos(j4);
IkReal x11119=(sj1*sj2);
IkReal x11120=(gconst5*sj3);
IkReal x11121=(gconst4*r11);
IkReal x11122=(gconst5*r10);
IkReal x11123=((1.0)*cj1);
IkReal x11124=(gconst4*r01);
IkReal x11125=(cj2*sj1);
IkReal x11126=(gconst5*r00);
IkReal x11127=(gconst4*sj3);
IkReal x11128=(cj3*gconst5);
IkReal x11129=(cj3*gconst4);
IkReal x11130=(gconst4*r21);
IkReal x11131=(cj2*x11123);
IkReal x11132=((1.0)*x11118);
IkReal x11133=((1.0)*x11117);
IkReal x11134=(cj3*x11117);
IkReal x11135=(cj3*x11118);
evalcond[0]=(((x11117*x11130))+(((-1.0)*r22*x11132))+(((-1.0)*gconst5*r20*x11133)));
evalcond[1]=(((x11117*x11121))+(((-1.0)*r12*x11132))+(((-1.0)*x11122*x11133)));
evalcond[2]=((-1.0)+((x11117*x11124))+(((-1.0)*r02*x11132))+(((-1.0)*x11126*x11133)));
evalcond[3]=(((r02*x11134))+((x11124*x11135))+(((-1.0)*cj3*x11126*x11132))+((r00*x11127))+((r01*x11120)));
evalcond[4]=((((-1.0)*r02*sj3*x11133))+((r00*x11118*x11120))+((r00*x11129))+((r01*x11128))+(((-1.0)*sj3*x11124*x11132)));
evalcond[5]=(((r22*x11134))+((r21*x11120))+((cj1*sj2))+(((-1.0)*r20*x11128*x11132))+x11125+((r21*x11118*x11129))+((r20*x11127)));
evalcond[6]=(((x11121*x11135))+((r10*x11127))+x11119+((r11*x11120))+(((-1.0)*x11131))+((r12*x11134))+(((-1.0)*cj3*x11122*x11132)));
evalcond[7]=(((r21*x11128))+x11119+(((-1.0)*r22*sj3*x11133))+(((-1.0)*r21*x11127*x11132))+((r20*x11118*x11120))+(((-1.0)*x11131))+((r20*x11129)));
evalcond[8]=(((r10*x11118*x11120))+(((-1.0)*x11125))+(((-1.0)*sj3*x11121*x11132))+(((-1.0)*r12*sj3*x11133))+((r10*x11129))+((r11*x11128))+(((-1.0)*sj2*x11123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11136=((-1.0)*r21);
CheckValue<IkReal> x11139 = IKatan2WithCheck(IkReal(x11136),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11139.valid){
continue;
}
IkReal x11137=((1.0)*(x11139.value));
IkReal x11138=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11137)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11137)));
IkReal gconst4=(x11136*x11138);
IkReal gconst5=((1.0)*r20*x11138);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11140=((-1.0)*r21);
CheckValue<IkReal> x11143 = IKatan2WithCheck(IkReal(x11140),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11143.valid){
continue;
}
IkReal x11141=((1.0)*(x11143.value));
IkReal x11142=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11141)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11141)));
IkReal gconst4=(x11140*x11142);
IkReal gconst5=((1.0)*r20*x11142);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11144=((-1.0)*r21);
CheckValue<IkReal> x11147 = IKatan2WithCheck(IkReal(x11144),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11147.valid){
continue;
}
IkReal x11145=((1.0)*(x11147.value));
IkReal x11146=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11145)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11145)));
IkReal gconst4=(x11144*x11146);
IkReal gconst5=((1.0)*r20*x11146);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11148=((-1.0)*r21);
CheckValue<IkReal> x11151 = IKatan2WithCheck(IkReal(x11148),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11151.valid){
continue;
}
IkReal x11149=((1.0)*(x11151.value));
IkReal x11150=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11149)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11149)));
IkReal gconst4=(x11148*x11150);
IkReal gconst5=((1.0)*r20*x11150);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11152=((-1.0)*r21);
CheckValue<IkReal> x11155 = IKatan2WithCheck(IkReal(x11152),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11155.valid){
continue;
}
IkReal x11153=((1.0)*(x11155.value));
IkReal x11154=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11153)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11153)));
IkReal gconst4=(x11152*x11154);
IkReal gconst5=((1.0)*r20*x11154);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11156=((-1.0)*r21);
CheckValue<IkReal> x11159 = IKatan2WithCheck(IkReal(x11156),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11159.valid){
continue;
}
IkReal x11157=((1.0)*(x11159.value));
IkReal x11158=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11157)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11157)));
IkReal gconst4=(x11156*x11158);
IkReal gconst5=((1.0)*r20*x11158);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11160=(gconst5*r00);
IkReal x11161=(gconst4*r01);
CheckValue<IkReal> x11162=IKPowWithIntegerCheck(IKsign(((x11161*x11161)+(x11160*x11160)+(((-2.0)*x11160*x11161))+(r02*r02))),-1);
if(!x11162.valid){
continue;
}
CheckValue<IkReal> x11163 = IKatan2WithCheck(IkReal((x11160+(((-1.0)*x11161)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11162.value)))+(x11163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11164=IKsin(j4);
IkReal x11165=IKcos(j4);
IkReal x11166=(gconst4*r11);
IkReal x11167=(gconst5*r10);
IkReal x11168=(gconst4*r01);
IkReal x11169=(gconst5*r00);
IkReal x11170=(gconst4*r21);
IkReal x11171=(gconst5*r20);
IkReal x11172=((1.0)*x11165);
IkReal x11173=((1.0)*x11164);
evalcond[0]=((((-1.0)*r22*x11172))+(((-1.0)*x11171*x11173))+((x11164*x11170)));
evalcond[1]=((((-1.0)*x11167*x11173))+(((-1.0)*r12*x11172))+((x11164*x11166)));
evalcond[2]=(((x11165*x11169))+(((-1.0)*x11168*x11172))+(((-1.0)*r02*x11173)));
evalcond[3]=((1.0)+(((-1.0)*x11169*x11173))+((x11164*x11168))+(((-1.0)*r02*x11172)));
evalcond[4]=((((-1.0)*x11166*x11172))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11173))+((x11165*x11167)));
evalcond[5]=((((-1.0)*r22*x11173))+(((-1.0)*cj1*cj2))+((x11165*x11171))+((sj1*sj2))+(((-1.0)*x11170*x11172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11174=((1.0)*gconst5);
CheckValue<IkReal> x11175 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11174))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11175.valid){
continue;
}
CheckValue<IkReal> x11176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11174))+(((-1.0)*gconst4*r20)))),-1);
if(!x11176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11175.value)+(((1.5707963267949)*(x11176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11177=IKsin(j4);
IkReal x11178=IKcos(j4);
IkReal x11179=(gconst4*r11);
IkReal x11180=(gconst5*r10);
IkReal x11181=(gconst4*r01);
IkReal x11182=(gconst5*r00);
IkReal x11183=(gconst4*r21);
IkReal x11184=(gconst5*r20);
IkReal x11185=((1.0)*x11178);
IkReal x11186=((1.0)*x11177);
evalcond[0]=((((-1.0)*r22*x11185))+((x11177*x11183))+(((-1.0)*x11184*x11186)));
evalcond[1]=(((x11177*x11179))+(((-1.0)*r12*x11185))+(((-1.0)*x11180*x11186)));
evalcond[2]=((((-1.0)*r02*x11186))+(((-1.0)*x11181*x11185))+((x11178*x11182)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11185))+(((-1.0)*x11182*x11186))+((x11177*x11181)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11186))+((cj1*sj2))+((x11178*x11180))+(((-1.0)*x11179*x11185)));
evalcond[5]=((((-1.0)*x11183*x11185))+(((-1.0)*r22*x11186))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11178*x11184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11187=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11187.valid){
continue;
}
CheckValue<IkReal> x11188 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11187.value)))+(x11188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11189=IKsin(j4);
IkReal x11190=IKcos(j4);
IkReal x11191=(gconst4*r11);
IkReal x11192=(gconst5*r10);
IkReal x11193=(gconst4*r01);
IkReal x11194=(gconst5*r00);
IkReal x11195=(gconst4*r21);
IkReal x11196=(gconst5*r20);
IkReal x11197=((1.0)*x11190);
IkReal x11198=((1.0)*x11189);
evalcond[0]=((((-1.0)*r22*x11197))+(((-1.0)*x11196*x11198))+((x11189*x11195)));
evalcond[1]=((((-1.0)*r12*x11197))+((x11189*x11191))+(((-1.0)*x11192*x11198)));
evalcond[2]=(((x11190*x11194))+(((-1.0)*r02*x11198))+(((-1.0)*x11193*x11197)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11197))+((x11189*x11193))+(((-1.0)*x11194*x11198)));
evalcond[4]=(((cj2*sj1))+((x11190*x11192))+(((-1.0)*r12*x11198))+((cj1*sj2))+(((-1.0)*x11191*x11197)));
evalcond[5]=((((-1.0)*x11195*x11197))+((x11190*x11196))+(((-1.0)*r22*x11198))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11199=((-1.0)*r21);
CheckValue<IkReal> x11202 = IKatan2WithCheck(IkReal(x11199),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11202.valid){
continue;
}
IkReal x11200=((1.0)*(x11202.value));
IkReal x11201=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11200)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11200)));
IkReal gconst4=(x11199*x11201);
IkReal gconst5=((1.0)*r20*x11201);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11203=((-1.0)*r21);
CheckValue<IkReal> x11206 = IKatan2WithCheck(IkReal(x11203),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11206.valid){
continue;
}
IkReal x11204=((1.0)*(x11206.value));
IkReal x11205=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11204)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11204)));
IkReal gconst4=(x11203*x11205);
IkReal gconst5=((1.0)*r20*x11205);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11207=((-1.0)*r21);
CheckValue<IkReal> x11210 = IKatan2WithCheck(IkReal(x11207),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11210.valid){
continue;
}
IkReal x11208=((1.0)*(x11210.value));
IkReal x11209=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11208)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11208)));
IkReal gconst4=(x11207*x11209);
IkReal gconst5=((1.0)*r20*x11209);
IkReal x11211=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11215=IKPowWithIntegerCheck(x11211,-1);
if(!x11215.valid){
continue;
}
IkReal x11212=x11215.value;
IkReal x11213=((1.0)*x11212);
IkReal x11214=((((-1.0)*x11213*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11212))+(((-1.0)*x11213*(r01*r01)*(r21*r21))));
j4eval[0]=x11214;
j4eval[1]=IKsign(x11214);
j4eval[2]=r02;
j4eval[3]=x11211;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11216=(gconst4*r01);
IkReal x11217=(gconst5*r00);
CheckValue<IkReal> x11218=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11216*x11216)))+(((2.0)*x11216*x11217))+(((-1.0)*(x11217*x11217))))),-1);
if(!x11218.valid){
continue;
}
CheckValue<IkReal> x11219 = IKatan2WithCheck(IkReal((x11216+(((-1.0)*x11217)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11218.value)))+(x11219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11220=IKcos(j4);
IkReal x11221=IKsin(j4);
IkReal x11222=(gconst4*r11);
IkReal x11223=(gconst5*r10);
IkReal x11224=(gconst5*r00);
IkReal x11225=(gconst5*r20);
IkReal x11226=((1.0)*x11220);
IkReal x11227=(gconst4*x11220);
IkReal x11228=((1.0)*x11221);
IkReal x11229=(gconst4*x11221);
evalcond[0]=(((r02*x11221))+((r01*x11227))+(((-1.0)*x11224*x11226)));
evalcond[1]=((((-1.0)*x11225*x11228))+((r21*x11229))+(((-1.0)*r22*x11226)));
evalcond[2]=(((x11221*x11222))+(((-1.0)*x11223*x11228))+(((-1.0)*r12*x11226)));
evalcond[3]=((1.0)+((r01*x11229))+(((-1.0)*x11224*x11228))+(((-1.0)*r02*x11226)));
evalcond[4]=(((cj2*sj1))+((r12*x11221))+((cj1*sj2))+((x11220*x11222))+(((-1.0)*x11223*x11226)));
evalcond[5]=(((r22*x11221))+(((-1.0)*x11225*x11226))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11230=((1.0)*gconst5);
CheckValue<IkReal> x11231 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11231.valid){
continue;
}
CheckValue<IkReal> x11232=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11230))+(((-1.0)*gconst4*r20)))),-1);
if(!x11232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11231.value)+(((1.5707963267949)*(x11232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11233=IKcos(j4);
IkReal x11234=IKsin(j4);
IkReal x11235=(gconst4*r11);
IkReal x11236=(gconst5*r10);
IkReal x11237=(gconst5*r00);
IkReal x11238=(gconst5*r20);
IkReal x11239=((1.0)*x11233);
IkReal x11240=(gconst4*x11233);
IkReal x11241=((1.0)*x11234);
IkReal x11242=(gconst4*x11234);
evalcond[0]=((((-1.0)*x11237*x11239))+((r02*x11234))+((r01*x11240)));
evalcond[1]=(((r21*x11242))+(((-1.0)*x11238*x11241))+(((-1.0)*r22*x11239)));
evalcond[2]=((((-1.0)*x11236*x11241))+((x11234*x11235))+(((-1.0)*r12*x11239)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11239))+((r01*x11242))+(((-1.0)*x11237*x11241)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x11234))+((x11233*x11235))+(((-1.0)*x11236*x11239)));
evalcond[5]=(((r22*x11234))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11238*x11239))+((r21*x11240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11243=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11243.valid){
continue;
}
CheckValue<IkReal> x11244 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11243.value)))+(x11244.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11245=IKcos(j4);
IkReal x11246=IKsin(j4);
IkReal x11247=(gconst4*r11);
IkReal x11248=(gconst5*r10);
IkReal x11249=(gconst5*r00);
IkReal x11250=(gconst5*r20);
IkReal x11251=((1.0)*x11245);
IkReal x11252=(gconst4*x11245);
IkReal x11253=((1.0)*x11246);
IkReal x11254=(gconst4*x11246);
evalcond[0]=(((r02*x11246))+(((-1.0)*x11249*x11251))+((r01*x11252)));
evalcond[1]=((((-1.0)*x11250*x11253))+((r21*x11254))+(((-1.0)*r22*x11251)));
evalcond[2]=((((-1.0)*x11248*x11253))+(((-1.0)*r12*x11251))+((x11246*x11247)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11251))+(((-1.0)*x11249*x11253))+((r01*x11254)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x11246))+(((-1.0)*x11248*x11251))+((x11245*x11247)));
evalcond[5]=(((r22*x11246))+(((-1.0)*x11250*x11251))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11255=((-1.0)*r21);
CheckValue<IkReal> x11258 = IKatan2WithCheck(IkReal(x11255),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11258.valid){
continue;
}
IkReal x11256=((1.0)*(x11258.value));
IkReal x11257=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11256)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11256)));
IkReal gconst4=(x11255*x11257);
IkReal gconst5=((1.0)*r20*x11257);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11259=((-1.0)*r21);
CheckValue<IkReal> x11262 = IKatan2WithCheck(IkReal(x11259),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11262.valid){
continue;
}
IkReal x11260=((1.0)*(x11262.value));
IkReal x11261=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11260)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11260)));
IkReal gconst4=(x11259*x11261);
IkReal gconst5=((1.0)*r20*x11261);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11263=((-1.0)*r21);
CheckValue<IkReal> x11266 = IKatan2WithCheck(IkReal(x11263),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11266.valid){
continue;
}
IkReal x11264=((1.0)*(x11266.value));
IkReal x11265=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11264)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11264)));
IkReal gconst4=(x11263*x11265);
IkReal gconst5=((1.0)*r20*x11265);
IkReal x11267=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11271=IKPowWithIntegerCheck(x11267,-1);
if(!x11271.valid){
continue;
}
IkReal x11268=x11271.value;
IkReal x11269=((1.0)*x11268);
IkReal x11270=((((-1.0)*x11269*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11269*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11268)));
j4eval[0]=x11270;
j4eval[1]=IKsign(x11270);
j4eval[2]=r02;
j4eval[3]=x11267;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11272=(gconst4*r01);
IkReal x11273=(gconst5*r00);
CheckValue<IkReal> x11274=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11273*x11273)))+(((-1.0)*(r02*r02)))+(((2.0)*x11272*x11273))+(((-1.0)*(x11272*x11272))))),-1);
if(!x11274.valid){
continue;
}
CheckValue<IkReal> x11275 = IKatan2WithCheck(IkReal((x11272+(((-1.0)*x11273)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11274.value)))+(x11275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11276=IKcos(j4);
IkReal x11277=IKsin(j4);
IkReal x11278=(gconst5*r10);
IkReal x11279=(gconst5*r00);
IkReal x11280=(gconst5*r20);
IkReal x11281=((1.0)*x11276);
IkReal x11282=(gconst4*x11277);
IkReal x11283=(gconst4*x11276);
IkReal x11284=((1.0)*x11277);
evalcond[0]=((((-1.0)*x11279*x11281))+((r02*x11277))+((r01*x11283)));
evalcond[1]=((((-1.0)*r22*x11281))+((r21*x11282))+(((-1.0)*x11280*x11284)));
evalcond[2]=((((-1.0)*r12*x11281))+(((-1.0)*x11278*x11284))+((r11*x11282)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11281))+(((-1.0)*x11279*x11284))+((r01*x11282)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11277))+((r21*x11283))+(((-1.0)*x11280*x11281)));
evalcond[5]=((((-1.0)*x11278*x11281))+((r12*x11277))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x11283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11285=((1.0)*gconst5);
CheckValue<IkReal> x11286 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11285))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11286.valid){
continue;
}
CheckValue<IkReal> x11287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11285))+(((-1.0)*gconst4*r20)))),-1);
if(!x11287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11286.value)+(((1.5707963267949)*(x11287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11288=IKcos(j4);
IkReal x11289=IKsin(j4);
IkReal x11290=(gconst5*r10);
IkReal x11291=(gconst5*r00);
IkReal x11292=(gconst5*r20);
IkReal x11293=((1.0)*x11288);
IkReal x11294=(gconst4*x11289);
IkReal x11295=(gconst4*x11288);
IkReal x11296=((1.0)*x11289);
evalcond[0]=(((r01*x11295))+(((-1.0)*x11291*x11293))+((r02*x11289)));
evalcond[1]=((((-1.0)*r22*x11293))+((r21*x11294))+(((-1.0)*x11292*x11296)));
evalcond[2]=((((-1.0)*x11290*x11296))+((r11*x11294))+(((-1.0)*r12*x11293)));
evalcond[3]=((1.0)+((r01*x11294))+(((-1.0)*x11291*x11296))+(((-1.0)*r02*x11293)));
evalcond[4]=(((cj2*sj1))+((r22*x11289))+((cj1*sj2))+((r21*x11295))+(((-1.0)*x11292*x11293)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11290*x11293))+((r11*x11295))+((r12*x11289))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11297=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11297.valid){
continue;
}
CheckValue<IkReal> x11298 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11297.value)))+(x11298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11299=IKcos(j4);
IkReal x11300=IKsin(j4);
IkReal x11301=(gconst5*r10);
IkReal x11302=(gconst5*r00);
IkReal x11303=(gconst5*r20);
IkReal x11304=((1.0)*x11299);
IkReal x11305=(gconst4*x11300);
IkReal x11306=(gconst4*x11299);
IkReal x11307=((1.0)*x11300);
evalcond[0]=(((r02*x11300))+((r01*x11306))+(((-1.0)*x11302*x11304)));
evalcond[1]=((((-1.0)*x11303*x11307))+(((-1.0)*r22*x11304))+((r21*x11305)));
evalcond[2]=(((r11*x11305))+(((-1.0)*x11301*x11307))+(((-1.0)*r12*x11304)));
evalcond[3]=((1.0)+((r01*x11305))+(((-1.0)*x11302*x11307))+(((-1.0)*r02*x11304)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11303*x11304))+((r21*x11306))+((r22*x11300)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x11300))+((r11*x11306))+(((-1.0)*x11301*x11304))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11308=((-1.0)*r21);
CheckValue<IkReal> x11311 = IKatan2WithCheck(IkReal(x11308),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11311.valid){
continue;
}
IkReal x11309=((1.0)*(x11311.value));
IkReal x11310=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11309)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11309)));
IkReal gconst4=(x11308*x11310);
IkReal gconst5=((1.0)*r20*x11310);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11312=((-1.0)*r21);
CheckValue<IkReal> x11315 = IKatan2WithCheck(IkReal(x11312),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11315.valid){
continue;
}
IkReal x11313=((1.0)*(x11315.value));
IkReal x11314=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11313)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11313)));
IkReal gconst4=(x11312*x11314);
IkReal gconst5=((1.0)*r20*x11314);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11316=((-1.0)*r21);
CheckValue<IkReal> x11319 = IKatan2WithCheck(IkReal(x11316),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11319.valid){
continue;
}
IkReal x11317=((1.0)*(x11319.value));
IkReal x11318=x10110;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11317)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11317)));
IkReal gconst4=(x11316*x11318);
IkReal gconst5=((1.0)*r20*x11318);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11320=(gconst5*r00);
IkReal x11321=(gconst4*r01);
CheckValue<IkReal> x11322 = IKatan2WithCheck(IkReal((x11320+(((-1.0)*x11321)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11322.valid){
continue;
}
CheckValue<IkReal> x11323=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11320*x11321))+(x11320*x11320)+(r02*r02)+(x11321*x11321))),-1);
if(!x11323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11322.value)+(((1.5707963267949)*(x11323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11324=IKsin(j4);
IkReal x11325=IKcos(j4);
IkReal x11326=(gconst4*r11);
IkReal x11327=(gconst5*r10);
IkReal x11328=(gconst5*r00);
IkReal x11329=(gconst5*r20);
IkReal x11330=((1.0)*x11325);
IkReal x11331=(gconst4*x11324);
IkReal x11332=((1.0)*x11324);
evalcond[0]=((((-1.0)*r22*x11330))+((r21*x11331))+(((-1.0)*x11329*x11332)));
evalcond[1]=((((-1.0)*r12*x11330))+((x11324*x11326))+(((-1.0)*x11327*x11332)));
evalcond[2]=(((x11325*x11328))+(((-1.0)*gconst4*r01*x11330))+(((-1.0)*r02*x11332)));
evalcond[3]=((1.0)+((r01*x11331))+(((-1.0)*x11328*x11332))+(((-1.0)*r02*x11330)));
evalcond[4]=(((cj2*sj1))+((x11325*x11329))+((cj1*sj2))+(((-1.0)*r22*x11332))+(((-1.0)*gconst4*r21*x11330)));
evalcond[5]=((((-1.0)*r12*x11332))+((x11325*x11327))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11326*x11330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11333=((1.0)*gconst5);
CheckValue<IkReal> x11334 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11333)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11334.valid){
continue;
}
CheckValue<IkReal> x11335=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11333))+(((-1.0)*gconst4*r20)))),-1);
if(!x11335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11334.value)+(((1.5707963267949)*(x11335.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11336=IKsin(j4);
IkReal x11337=IKcos(j4);
IkReal x11338=(gconst4*r11);
IkReal x11339=(gconst5*r10);
IkReal x11340=(gconst5*r00);
IkReal x11341=(gconst5*r20);
IkReal x11342=((1.0)*x11337);
IkReal x11343=(gconst4*x11336);
IkReal x11344=((1.0)*x11336);
evalcond[0]=((((-1.0)*r22*x11342))+((r21*x11343))+(((-1.0)*x11341*x11344)));
evalcond[1]=((((-1.0)*x11339*x11344))+((x11336*x11338))+(((-1.0)*r12*x11342)));
evalcond[2]=(((x11337*x11340))+(((-1.0)*gconst4*r01*x11342))+(((-1.0)*r02*x11344)));
evalcond[3]=((1.0)+(((-1.0)*x11340*x11344))+((r01*x11343))+(((-1.0)*r02*x11342)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11344))+((x11337*x11341))+(((-1.0)*gconst4*r21*x11342)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11338*x11342))+((x11337*x11339))+((cj1*cj2))+(((-1.0)*r12*x11344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11345=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11345.valid){
continue;
}
CheckValue<IkReal> x11346 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11345.value)))+(x11346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11347=IKsin(j4);
IkReal x11348=IKcos(j4);
IkReal x11349=(gconst4*r11);
IkReal x11350=(gconst5*r10);
IkReal x11351=(gconst5*r00);
IkReal x11352=(gconst5*r20);
IkReal x11353=((1.0)*x11348);
IkReal x11354=(gconst4*x11347);
IkReal x11355=((1.0)*x11347);
evalcond[0]=((((-1.0)*r22*x11353))+((r21*x11354))+(((-1.0)*x11352*x11355)));
evalcond[1]=((((-1.0)*r12*x11353))+(((-1.0)*x11350*x11355))+((x11347*x11349)));
evalcond[2]=((((-1.0)*gconst4*r01*x11353))+(((-1.0)*r02*x11355))+((x11348*x11351)));
evalcond[3]=((1.0)+(((-1.0)*x11351*x11355))+((r01*x11354))+(((-1.0)*r02*x11353)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11353))+(((-1.0)*r22*x11355))+((x11348*x11352)));
evalcond[5]=((((-1.0)*r12*x11355))+(((-1.0)*sj1*sj2))+(((-1.0)*x11349*x11353))+((cj1*cj2))+((x11348*x11350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11356=((-1.0)*r21);
IkReal x11357=((-1.0)*r20);
CheckValue<IkReal> x11359 = IKatan2WithCheck(IkReal(x11356),IkReal(x11357),IKFAST_ATAN2_MAGTHRESH);
if(!x11359.valid){
continue;
}
IkReal x11358=((1.0)*(x11359.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11358)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11357);
rxp0_2=(py*r00);
rxp1_0=(py*x11356);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11358)));
IkReal gconst4=x11356;
IkReal gconst5=((1.0)*r20);
IkReal x11360=((1.0)*r01*r21);
IkReal x11361=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11360))+(((-1.0)*x11361)));
j4eval[1]=((((-1.0)*cj3*x11361))+(((-1.0)*cj3*x11360)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11362=((-1.0)*r21);
IkReal x11363=((-1.0)*r20);
CheckValue<IkReal> x11365 = IKatan2WithCheck(IkReal(x11362),IkReal(x11363),IKFAST_ATAN2_MAGTHRESH);
if(!x11365.valid){
continue;
}
IkReal x11364=((1.0)*(x11365.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11364)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11363);
rxp0_2=(py*r00);
rxp1_0=(py*x11362);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11364)));
IkReal gconst4=x11362;
IkReal gconst5=((1.0)*r20);
IkReal x11366=((1.0)*r01*r21);
IkReal x11367=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11367))+(((-1.0)*x11366)));
j4eval[1]=(((sj3*x11367))+((sj3*x11366)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11368=((-1.0)*r21);
IkReal x11369=((-1.0)*r20);
CheckValue<IkReal> x11371 = IKatan2WithCheck(IkReal(x11368),IkReal(x11369),IKFAST_ATAN2_MAGTHRESH);
if(!x11371.valid){
continue;
}
IkReal x11370=((1.0)*(x11371.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11370)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11369);
rxp0_2=(py*r00);
rxp1_0=(py*x11368);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11370)));
IkReal gconst4=x11368;
IkReal gconst5=((1.0)*r20);
IkReal x11372=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x11372))+(((-1.0)*r01*r21*x11372)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11373=((1.0)*gconst5);
CheckValue<IkReal> x11374=IKPowWithIntegerCheck(cj3,-1);
if(!x11374.valid){
continue;
}
CheckValue<IkReal> x11375=IKPowWithIntegerCheck(r12,-1);
if(!x11375.valid){
continue;
}
CheckValue<IkReal> x11376=IKPowWithIntegerCheck((((cj3*gconst4*r01))+(((-1.0)*cj3*r00*x11373))),-1);
if(!x11376.valid){
continue;
}
if( IKabs(((x11374.value)*(x11375.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11376.value)*(((((-1.0)*r01*sj3*x11373))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11374.value)*(x11375.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11376.value)*(((((-1.0)*r01*sj3*x11373))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11374.value)*(x11375.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11376.value)*(((((-1.0)*r01*sj3*x11373))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11377=IKsin(j4);
IkReal x11378=IKcos(j4);
IkReal x11379=(cj2*sj1);
IkReal x11380=(cj1*sj2);
IkReal x11381=(sj1*sj2);
IkReal x11382=(gconst5*sj3);
IkReal x11383=(gconst5*r00);
IkReal x11384=(cj3*gconst5);
IkReal x11385=(gconst4*sj3);
IkReal x11386=(cj3*gconst4);
IkReal x11387=(cj1*cj2);
IkReal x11388=((1.0)*x11377);
IkReal x11389=(gconst4*x11377);
IkReal x11390=((1.0)*x11378);
IkReal x11391=(x11379+x11380);
IkReal x11392=(x11378*x11382);
IkReal x11393=(x11378*x11386);
evalcond[0]=((-1.0)*r12*x11378);
evalcond[1]=((((-1.0)*gconst5*r20*x11388))+((r21*x11389)));
evalcond[2]=(x11387+((cj3*r12*x11377))+(((-1.0)*x11381)));
evalcond[3]=((((-1.0)*r12*sj3*x11388))+x11391);
evalcond[4]=((1.0)+(((-1.0)*x11383*x11388))+((r01*x11389)));
evalcond[5]=((((-1.0)*cj3*x11383*x11390))+((r01*x11393))+((r01*x11382))+((r00*x11385)));
evalcond[6]=(((r00*x11392))+((r01*x11384))+((r00*x11386))+(((-1.0)*r01*x11385*x11390)));
evalcond[7]=(((r20*x11385))+x11391+(((-1.0)*r20*x11384*x11390))+((r21*x11382))+((r21*x11393)));
evalcond[8]=(((r20*x11392))+((r20*x11386))+x11381+((r21*x11384))+(((-1.0)*r21*x11385*x11390))+(((-1.0)*x11387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11394=((1.0)*gconst4);
IkReal x11395=(gconst5*r00);
CheckValue<IkReal> x11396=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11395))),-1);
if(!x11396.valid){
continue;
}
CheckValue<IkReal> x11397=IKPowWithIntegerCheck((((sj3*x11395))+(((-1.0)*r01*sj3*x11394))),-1);
if(!x11397.valid){
continue;
}
if( IKabs(((-1.0)*(x11396.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11397.value)*(((((-1.0)*cj3*r00*x11394))+(((-1.0)*cj3*gconst5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11396.value)))+IKsqr(((x11397.value)*(((((-1.0)*cj3*r00*x11394))+(((-1.0)*cj3*gconst5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11396.value)), ((x11397.value)*(((((-1.0)*cj3*r00*x11394))+(((-1.0)*cj3*gconst5*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11398=IKsin(j4);
IkReal x11399=IKcos(j4);
IkReal x11400=(cj2*sj1);
IkReal x11401=(cj1*sj2);
IkReal x11402=(sj1*sj2);
IkReal x11403=(gconst5*sj3);
IkReal x11404=(gconst5*r00);
IkReal x11405=(cj3*gconst5);
IkReal x11406=(gconst4*sj3);
IkReal x11407=(cj3*gconst4);
IkReal x11408=(cj1*cj2);
IkReal x11409=((1.0)*x11398);
IkReal x11410=(gconst4*x11398);
IkReal x11411=((1.0)*x11399);
IkReal x11412=(x11401+x11400);
IkReal x11413=(x11399*x11403);
IkReal x11414=(x11399*x11407);
evalcond[0]=((-1.0)*r12*x11399);
evalcond[1]=(((r21*x11410))+(((-1.0)*gconst5*r20*x11409)));
evalcond[2]=(x11408+((cj3*r12*x11398))+(((-1.0)*x11402)));
evalcond[3]=(x11412+(((-1.0)*r12*sj3*x11409)));
evalcond[4]=((1.0)+((r01*x11410))+(((-1.0)*x11404*x11409)));
evalcond[5]=(((r01*x11414))+(((-1.0)*cj3*x11404*x11411))+((r01*x11403))+((r00*x11406)));
evalcond[6]=(((r00*x11413))+(((-1.0)*r01*x11406*x11411))+((r01*x11405))+((r00*x11407)));
evalcond[7]=(((r21*x11403))+x11412+(((-1.0)*r20*x11405*x11411))+((r21*x11414))+((r20*x11406)));
evalcond[8]=(((r21*x11405))+x11402+(((-1.0)*r21*x11406*x11411))+((r20*x11407))+(((-1.0)*x11408))+((r20*x11413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11415=((1.0)*gconst5);
IkReal x11416=(gconst4*r01);
CheckValue<IkReal> x11417=IKPowWithIntegerCheck((x11416+(((-1.0)*r00*x11415))),-1);
if(!x11417.valid){
continue;
}
CheckValue<IkReal> x11418=IKPowWithIntegerCheck((((cj3*x11416))+(((-1.0)*cj3*r00*x11415))),-1);
if(!x11418.valid){
continue;
}
if( IKabs(((-1.0)*(x11417.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11418.value)*(((((-1.0)*r01*sj3*x11415))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11417.value)))+IKsqr(((x11418.value)*(((((-1.0)*r01*sj3*x11415))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11417.value)), ((x11418.value)*(((((-1.0)*r01*sj3*x11415))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11419=IKsin(j4);
IkReal x11420=IKcos(j4);
IkReal x11421=(cj2*sj1);
IkReal x11422=(cj1*sj2);
IkReal x11423=(sj1*sj2);
IkReal x11424=(gconst5*sj3);
IkReal x11425=(gconst5*r00);
IkReal x11426=(cj3*gconst5);
IkReal x11427=(gconst4*sj3);
IkReal x11428=(cj3*gconst4);
IkReal x11429=(cj1*cj2);
IkReal x11430=((1.0)*x11419);
IkReal x11431=(gconst4*x11419);
IkReal x11432=((1.0)*x11420);
IkReal x11433=(x11422+x11421);
IkReal x11434=(x11420*x11424);
IkReal x11435=(x11420*x11428);
evalcond[0]=((-1.0)*r12*x11420);
evalcond[1]=(((r21*x11431))+(((-1.0)*gconst5*r20*x11430)));
evalcond[2]=(((cj3*r12*x11419))+x11429+(((-1.0)*x11423)));
evalcond[3]=(x11433+(((-1.0)*r12*sj3*x11430)));
evalcond[4]=((1.0)+(((-1.0)*x11425*x11430))+((r01*x11431)));
evalcond[5]=(((r01*x11435))+((r01*x11424))+((r00*x11427))+(((-1.0)*cj3*x11425*x11432)));
evalcond[6]=(((r01*x11426))+((r00*x11428))+((r00*x11434))+(((-1.0)*r01*x11427*x11432)));
evalcond[7]=(((r20*x11427))+x11433+((r21*x11424))+((r21*x11435))+(((-1.0)*r20*x11426*x11432)));
evalcond[8]=(((r20*x11434))+((r20*x11428))+x11423+((r21*x11426))+(((-1.0)*x11429))+(((-1.0)*r21*x11427*x11432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11436=gconst4*gconst4;
IkReal x11437=gconst5*gconst5;
IkReal x11438=(r01*r20);
IkReal x11439=(gconst4*sj3);
IkReal x11440=(r01*r21);
IkReal x11441=((1.0)*cj3);
IkReal x11442=(r00*r21);
IkReal x11443=(r00*r20);
IkReal x11444=(cj3*gconst4*gconst5);
IkReal x11445=((1.0)*x11437);
CheckValue<IkReal> x11446=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11436*x11440*x11441))+((x11438*x11444))+(((-1.0)*r02*r22*x11441))+((x11442*x11444))+(((-1.0)*x11437*x11441*x11443)))),-1);
if(!x11446.valid){
continue;
}
CheckValue<IkReal> x11447 = IKatan2WithCheck(IkReal((((r00*r22*x11439))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11439*x11440))+(((-1.0)*sj3*x11438*x11445))+((sj3*x11436*x11442))+(((-1.0)*gconst5*x11439*x11443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11446.value)))+(x11447.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11448=IKsin(j4);
IkReal x11449=IKcos(j4);
IkReal x11450=(cj2*sj1);
IkReal x11451=(cj1*sj2);
IkReal x11452=(gconst5*sj3);
IkReal x11453=(gconst4*r11);
IkReal x11454=(sj1*sj2);
IkReal x11455=(gconst5*r10);
IkReal x11456=(cj1*cj2);
IkReal x11457=(gconst4*r01);
IkReal x11458=(gconst5*r00);
IkReal x11459=(gconst4*sj3);
IkReal x11460=(cj3*gconst5);
IkReal x11461=(cj3*gconst4);
IkReal x11462=(gconst4*r21);
IkReal x11463=((1.0)*x11449);
IkReal x11464=((1.0)*x11448);
IkReal x11465=(cj3*x11448);
IkReal x11466=(cj3*x11449);
IkReal x11467=(x11450+x11451);
evalcond[0]=(((x11448*x11462))+(((-1.0)*gconst5*r20*x11464))+(((-1.0)*r22*x11463)));
evalcond[1]=((((-1.0)*x11455*x11464))+(((-1.0)*r12*x11463))+((x11448*x11453)));
evalcond[2]=((1.0)+(((-1.0)*x11458*x11464))+((x11448*x11457))+(((-1.0)*r02*x11463)));
evalcond[3]=(((x11457*x11466))+(((-1.0)*cj3*x11458*x11463))+((r01*x11452))+((r00*x11459))+((r02*x11465)));
evalcond[4]=(((r01*x11460))+(((-1.0)*r02*sj3*x11464))+((r00*x11449*x11452))+(((-1.0)*sj3*x11457*x11463))+((r00*x11461)));
evalcond[5]=(x11467+((r20*x11459))+((r21*x11449*x11461))+((r22*x11465))+((r21*x11452))+(((-1.0)*r20*x11460*x11463)));
evalcond[6]=(((r10*x11459))+(((-1.0)*cj3*x11455*x11463))+((r12*x11465))+x11456+(((-1.0)*x11454))+((r11*x11452))+((x11453*x11466)));
evalcond[7]=((((-1.0)*sj3*x11453*x11463))+x11467+((r11*x11460))+((r10*x11461))+(((-1.0)*r12*sj3*x11464))+((r10*x11449*x11452)));
evalcond[8]=((((-1.0)*r21*x11459*x11463))+x11454+(((-1.0)*r22*sj3*x11464))+(((-1.0)*x11456))+((r20*x11461))+((r20*x11449*x11452))+((r21*x11460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11468=((1.0)*gconst5);
CheckValue<IkReal> x11469=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11468))+(((-1.0)*gconst4*r20)))),-1);
if(!x11469.valid){
continue;
}
CheckValue<IkReal> x11470 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11469.value)))+(x11470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11471=IKsin(j4);
IkReal x11472=IKcos(j4);
IkReal x11473=(cj2*sj1);
IkReal x11474=(cj1*sj2);
IkReal x11475=(gconst5*sj3);
IkReal x11476=(gconst4*r11);
IkReal x11477=(sj1*sj2);
IkReal x11478=(gconst5*r10);
IkReal x11479=(cj1*cj2);
IkReal x11480=(gconst4*r01);
IkReal x11481=(gconst5*r00);
IkReal x11482=(gconst4*sj3);
IkReal x11483=(cj3*gconst5);
IkReal x11484=(cj3*gconst4);
IkReal x11485=(gconst4*r21);
IkReal x11486=((1.0)*x11472);
IkReal x11487=((1.0)*x11471);
IkReal x11488=(cj3*x11471);
IkReal x11489=(cj3*x11472);
IkReal x11490=(x11474+x11473);
evalcond[0]=(((x11471*x11485))+(((-1.0)*r22*x11486))+(((-1.0)*gconst5*r20*x11487)));
evalcond[1]=((((-1.0)*r12*x11486))+((x11471*x11476))+(((-1.0)*x11478*x11487)));
evalcond[2]=((1.0)+((x11471*x11480))+(((-1.0)*r02*x11486))+(((-1.0)*x11481*x11487)));
evalcond[3]=(((r00*x11482))+((x11480*x11489))+(((-1.0)*cj3*x11481*x11486))+((r02*x11488))+((r01*x11475)));
evalcond[4]=((((-1.0)*r02*sj3*x11487))+((r00*x11484))+((r00*x11472*x11475))+((r01*x11483))+(((-1.0)*sj3*x11480*x11486)));
evalcond[5]=(((r21*x11472*x11484))+((r20*x11482))+x11490+((r22*x11488))+(((-1.0)*r20*x11483*x11486))+((r21*x11475)));
evalcond[6]=((((-1.0)*x11477))+x11479+((r11*x11475))+(((-1.0)*cj3*x11478*x11486))+((r12*x11488))+((r10*x11482))+((x11476*x11489)));
evalcond[7]=(x11490+((r10*x11472*x11475))+(((-1.0)*sj3*x11476*x11486))+((r11*x11483))+((r10*x11484))+(((-1.0)*r12*sj3*x11487)));
evalcond[8]=((((-1.0)*x11479))+((r20*x11484))+x11477+(((-1.0)*r22*sj3*x11487))+(((-1.0)*r21*x11482*x11486))+((r21*x11483))+((r20*x11472*x11475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11491=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11491.valid){
continue;
}
CheckValue<IkReal> x11492 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11491.value)))+(x11492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11493=IKsin(j4);
IkReal x11494=IKcos(j4);
IkReal x11495=(cj2*sj1);
IkReal x11496=(cj1*sj2);
IkReal x11497=(gconst5*sj3);
IkReal x11498=(gconst4*r11);
IkReal x11499=(sj1*sj2);
IkReal x11500=(gconst5*r10);
IkReal x11501=(cj1*cj2);
IkReal x11502=(gconst4*r01);
IkReal x11503=(gconst5*r00);
IkReal x11504=(gconst4*sj3);
IkReal x11505=(cj3*gconst5);
IkReal x11506=(cj3*gconst4);
IkReal x11507=(gconst4*r21);
IkReal x11508=((1.0)*x11494);
IkReal x11509=((1.0)*x11493);
IkReal x11510=(cj3*x11493);
IkReal x11511=(cj3*x11494);
IkReal x11512=(x11496+x11495);
evalcond[0]=((((-1.0)*gconst5*r20*x11509))+(((-1.0)*r22*x11508))+((x11493*x11507)));
evalcond[1]=((((-1.0)*x11500*x11509))+(((-1.0)*r12*x11508))+((x11493*x11498)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11508))+(((-1.0)*x11503*x11509))+((x11493*x11502)));
evalcond[3]=(((r00*x11504))+((r02*x11510))+(((-1.0)*cj3*x11503*x11508))+((x11502*x11511))+((r01*x11497)));
evalcond[4]=((((-1.0)*r02*sj3*x11509))+((r00*x11494*x11497))+((r00*x11506))+((r01*x11505))+(((-1.0)*sj3*x11502*x11508)));
evalcond[5]=(x11512+((r21*x11497))+((r21*x11494*x11506))+(((-1.0)*r20*x11505*x11508))+((r22*x11510))+((r20*x11504)));
evalcond[6]=(x11501+(((-1.0)*cj3*x11500*x11508))+((r11*x11497))+((r10*x11504))+((r12*x11510))+((x11498*x11511))+(((-1.0)*x11499)));
evalcond[7]=(((r10*x11494*x11497))+(((-1.0)*r12*sj3*x11509))+x11512+((r11*x11505))+(((-1.0)*sj3*x11498*x11508))+((r10*x11506)));
evalcond[8]=(x11499+(((-1.0)*r21*x11504*x11508))+((r21*x11505))+((r20*x11494*x11497))+(((-1.0)*x11501))+((r20*x11506))+(((-1.0)*r22*sj3*x11509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11513=((-1.0)*r21);
IkReal x11514=((-1.0)*px);
CheckValue<IkReal> x11516 = IKatan2WithCheck(IkReal(x11513),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11516.valid){
continue;
}
IkReal x11515=((1.0)*(x11516.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11515)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11514);
rxp1_1=(px*r21);
rxp1_2=(r11*x11514);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11515)));
IkReal gconst4=x11513;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11517=((-1.0)*r21);
IkReal x11518=((-1.0)*px);
CheckValue<IkReal> x11520 = IKatan2WithCheck(IkReal(x11517),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11520.valid){
continue;
}
IkReal x11519=((1.0)*(x11520.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11519)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11518);
rxp1_1=(px*r21);
rxp1_2=(r11*x11518);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11519)));
IkReal gconst4=x11517;
IkReal gconst5=((1.0)*r20);
IkReal x11521=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11521*(r21*r21)))+((x11521*(r10*r10)))+(((-1.0)*x11521)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11522=((-1.0)*r21);
IkReal x11523=((-1.0)*px);
CheckValue<IkReal> x11525 = IKatan2WithCheck(IkReal(x11522),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11525.valid){
continue;
}
IkReal x11524=((1.0)*(x11525.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11524)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11523);
rxp1_1=(px*r21);
rxp1_2=(r11*x11523);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11524)));
IkReal gconst4=x11522;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11526=((-1.0)*r21);
IkReal x11527=((-1.0)*px);
CheckValue<IkReal> x11529 = IKatan2WithCheck(IkReal(x11526),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11529.valid){
continue;
}
IkReal x11528=((1.0)*(x11529.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11528)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11527);
rxp1_1=(px*r21);
rxp1_2=(r11*x11527);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11528)));
IkReal gconst4=x11526;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11530=((-1.0)*r21);
IkReal x11531=((-1.0)*px);
CheckValue<IkReal> x11533 = IKatan2WithCheck(IkReal(x11530),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11533.valid){
continue;
}
IkReal x11532=((1.0)*(x11533.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11532)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11531);
rxp1_1=(px*r21);
rxp1_2=(r11*x11531);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11532)));
IkReal gconst4=x11530;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11534=((-1.0)*r21);
IkReal x11535=((-1.0)*px);
CheckValue<IkReal> x11537 = IKatan2WithCheck(IkReal(x11534),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11537.valid){
continue;
}
IkReal x11536=((1.0)*(x11537.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11536)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11535);
rxp1_1=(px*r21);
rxp1_2=(r11*x11535);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11536)));
IkReal gconst4=x11534;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11540=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11540.valid){
continue;
}
IkReal x11538=x11540.value;
IkReal x11539=(sj0*x11538);
cj4array[0]=(((cj2*sj1*x11539))+((cj1*sj2*x11539)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11541=IKsin(j4);
IkReal x11542=IKcos(j4);
IkReal x11543=(gconst5*r20);
IkReal x11544=(gconst4*x11541);
IkReal x11545=((1.0)*x11542);
IkReal x11546=((1.0)*x11541);
evalcond[0]=((-1.0)*r02*x11541);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11545)));
evalcond[2]=(((r21*x11544))+(((-1.0)*x11543*x11546)));
evalcond[3]=((((-1.0)*gconst5*r10*x11546))+((r11*x11544)));
evalcond[4]=((((-1.0)*gconst4*r21*x11545))+((x11542*x11543))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11548=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11548.valid){
continue;
}
IkReal x11547=x11548.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11547))+((cj1*cj2*x11547)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11549=IKsin(j4);
IkReal x11550=IKcos(j4);
IkReal x11551=(gconst5*r10);
IkReal x11552=((1.0)*sj0);
IkReal x11553=(gconst4*x11549);
IkReal x11554=((1.0)*x11550);
IkReal x11555=((1.0)*x11549);
evalcond[0]=((-1.0)*r02*x11549);
evalcond[1]=((((-1.0)*x11552))+(((-1.0)*r02*x11554)));
evalcond[2]=(((r21*x11553))+(((-1.0)*gconst5*r20*x11555)));
evalcond[3]=(((r11*x11553))+(((-1.0)*x11551*x11555)));
evalcond[4]=((((-1.0)*cj1*sj2*x11552))+(((-1.0)*gconst4*r11*x11554))+((x11550*x11551))+(((-1.0)*cj2*sj1*x11552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11556=IKPowWithIntegerCheck(r02,-1);
if(!x11556.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11556.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11557=IKsin(j4);
IkReal x11558=IKcos(j4);
IkReal x11559=((1.0)*sj0);
IkReal x11560=(gconst5*x11558);
IkReal x11561=(gconst4*x11557);
IkReal x11562=((1.0)*gconst4*x11558);
IkReal x11563=((1.0)*gconst5*x11557);
evalcond[0]=((-1.0)*r02*x11557);
evalcond[1]=((((-1.0)*r20*x11563))+((r21*x11561)));
evalcond[2]=(((r11*x11561))+(((-1.0)*r10*x11563)));
evalcond[3]=(((r20*x11560))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11562)));
evalcond[4]=((((-1.0)*cj1*sj2*x11559))+((r10*x11560))+(((-1.0)*r11*x11562))+(((-1.0)*cj2*sj1*x11559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11564=((-1.0)*r21);
IkReal x11565=((-1.0)*px);
CheckValue<IkReal> x11567 = IKatan2WithCheck(IkReal(x11564),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11567.valid){
continue;
}
IkReal x11566=((1.0)*(x11567.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11566)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11565);
rxp1_1=(px*r21);
rxp1_2=(r11*x11565);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11566)));
IkReal gconst4=x11564;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11568=((-1.0)*r21);
IkReal x11569=((-1.0)*px);
CheckValue<IkReal> x11571 = IKatan2WithCheck(IkReal(x11568),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11571.valid){
continue;
}
IkReal x11570=((1.0)*(x11571.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11570)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11569);
rxp1_1=(px*r21);
rxp1_2=(r11*x11569);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11570)));
IkReal gconst4=x11568;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11572=((-1.0)*r21);
IkReal x11573=((-1.0)*px);
CheckValue<IkReal> x11575 = IKatan2WithCheck(IkReal(x11572),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11575.valid){
continue;
}
IkReal x11574=((1.0)*(x11575.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11574)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11573);
rxp1_1=(px*r21);
rxp1_2=(r11*x11573);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11574)));
IkReal gconst4=x11572;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11578=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11578.valid){
continue;
}
IkReal x11576=x11578.value;
IkReal x11577=(sj0*x11576);
cj4array[0]=(((cj1*sj2*x11577))+((cj2*sj1*x11577)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11579=IKsin(j4);
IkReal x11580=IKcos(j4);
IkReal x11581=(gconst5*r20);
IkReal x11582=(gconst4*x11579);
IkReal x11583=((1.0)*x11580);
IkReal x11584=((1.0)*x11579);
evalcond[0]=(r02*x11579);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11583)));
evalcond[2]=(((r21*x11582))+(((-1.0)*x11581*x11584)));
evalcond[3]=((((-1.0)*gconst5*r10*x11584))+((r11*x11582)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11581*x11583))+((gconst4*r21*x11580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11586=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11586.valid){
continue;
}
IkReal x11585=x11586.value;
cj4array[0]=(((cj1*cj2*x11585))+(((-1.0)*sj1*sj2*x11585)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11587=IKsin(j4);
IkReal x11588=IKcos(j4);
IkReal x11589=(gconst4*r11);
IkReal x11590=((1.0)*sj0);
IkReal x11591=(gconst5*r10);
IkReal x11592=((1.0)*x11588);
IkReal x11593=((1.0)*x11587);
evalcond[0]=(r02*x11587);
evalcond[1]=((((-1.0)*x11590))+(((-1.0)*r02*x11592)));
evalcond[2]=((((-1.0)*gconst5*r20*x11593))+((gconst4*r21*x11587)));
evalcond[3]=((((-1.0)*x11591*x11593))+((x11587*x11589)));
evalcond[4]=(((x11588*x11589))+(((-1.0)*cj2*sj1*x11590))+(((-1.0)*cj1*sj2*x11590))+(((-1.0)*x11591*x11592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11594=IKPowWithIntegerCheck(r02,-1);
if(!x11594.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11594.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11595=IKsin(j4);
IkReal x11596=IKcos(j4);
IkReal x11597=(gconst4*r11);
IkReal x11598=((1.0)*cj1);
IkReal x11599=(gconst4*r21);
IkReal x11600=((1.0)*gconst5*x11596);
IkReal x11601=((1.0)*gconst5*x11595);
evalcond[0]=(r02*x11595);
evalcond[1]=((((-1.0)*r20*x11601))+((x11595*x11599)));
evalcond[2]=((((-1.0)*r10*x11601))+((x11595*x11597)));
evalcond[3]=((((-1.0)*r20*x11600))+(((-1.0)*cj2*x11598))+((sj1*sj2))+((x11596*x11599)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11600))+(((-1.0)*sj0*sj2*x11598))+((x11596*x11597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11603=IKPowWithIntegerCheck(r02,-1);
if(!x11603.valid){
continue;
}
IkReal x11602=x11603.value;
CheckValue<IkReal> x11604=IKPowWithIntegerCheck(cj3,-1);
if(!x11604.valid){
continue;
}
if( IKabs((x11602*(x11604.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11602)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11602*(x11604.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11602))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11602*(x11604.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11602));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11605=IKsin(j4);
IkReal x11606=IKcos(j4);
IkReal x11607=(gconst5*sj3);
IkReal x11608=(gconst4*r11);
IkReal x11609=(sj1*sj2);
IkReal x11610=((1.0)*gconst5);
IkReal x11611=(cj2*sj1);
IkReal x11612=((1.0)*sj0);
IkReal x11613=((1.0)*cj0);
IkReal x11614=(gconst4*r21);
IkReal x11615=(cj1*sj2);
IkReal x11616=(cj3*gconst4);
IkReal x11617=(gconst4*sj3);
IkReal x11618=(cj3*gconst5);
IkReal x11619=(r20*x11606);
IkReal x11620=((1.0)*cj1*cj2);
IkReal x11621=(r10*x11606);
IkReal x11622=(cj3*x11606);
IkReal x11623=(r02*x11605);
IkReal x11624=((1.0)*sj3*x11606);
evalcond[0]=((((-1.0)*x11612))+(((-1.0)*r02*x11606)));
evalcond[1]=(((x11605*x11614))+(((-1.0)*r20*x11605*x11610)));
evalcond[2]=(cj0+(((-1.0)*r10*x11605*x11610))+((x11605*x11608)));
evalcond[3]=((((-1.0)*cj1*cj2*x11613))+((cj3*x11623))+((cj0*x11609)));
evalcond[4]=((((-1.0)*sj3*x11623))+(((-1.0)*x11611*x11613))+(((-1.0)*x11613*x11615)));
evalcond[5]=(x11615+x11611+((r21*x11607))+(((-1.0)*cj3*x11610*x11619))+((r20*x11617))+((x11614*x11622)));
evalcond[6]=(x11609+(((-1.0)*x11620))+((r21*x11618))+(((-1.0)*x11614*x11624))+((x11607*x11619))+((r20*x11616)));
evalcond[7]=((((-1.0)*cj1*cj2*x11612))+((sj0*x11609))+((r11*x11607))+(((-1.0)*cj3*x11610*x11621))+((x11608*x11622))+((r10*x11617)));
evalcond[8]=(((r11*x11618))+(((-1.0)*x11608*x11624))+(((-1.0)*x11611*x11612))+((x11607*x11621))+(((-1.0)*x11612*x11615))+((r10*x11616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11625=((1.0)*gconst5);
CheckValue<IkReal> x11626=IKPowWithIntegerCheck(((((-1.0)*r10*x11625))+((gconst4*r11))),-1);
if(!x11626.valid){
continue;
}
CheckValue<IkReal> x11627=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11625))+((cj3*gconst4*r21))),-1);
if(!x11627.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11626.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11627.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11625)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11626.value)))+IKsqr(((x11627.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11625))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11626.value)), ((x11627.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11625))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11628=IKsin(j4);
IkReal x11629=IKcos(j4);
IkReal x11630=(gconst5*sj3);
IkReal x11631=(gconst4*r11);
IkReal x11632=(sj1*sj2);
IkReal x11633=((1.0)*gconst5);
IkReal x11634=(cj2*sj1);
IkReal x11635=((1.0)*sj0);
IkReal x11636=((1.0)*cj0);
IkReal x11637=(gconst4*r21);
IkReal x11638=(cj1*sj2);
IkReal x11639=(cj3*gconst4);
IkReal x11640=(gconst4*sj3);
IkReal x11641=(cj3*gconst5);
IkReal x11642=(r20*x11629);
IkReal x11643=((1.0)*cj1*cj2);
IkReal x11644=(r10*x11629);
IkReal x11645=(cj3*x11629);
IkReal x11646=(r02*x11628);
IkReal x11647=((1.0)*sj3*x11629);
evalcond[0]=((((-1.0)*x11635))+(((-1.0)*r02*x11629)));
evalcond[1]=(((x11628*x11637))+(((-1.0)*r20*x11628*x11633)));
evalcond[2]=((((-1.0)*r10*x11628*x11633))+cj0+((x11628*x11631)));
evalcond[3]=(((cj3*x11646))+(((-1.0)*cj1*cj2*x11636))+((cj0*x11632)));
evalcond[4]=((((-1.0)*sj3*x11646))+(((-1.0)*x11636*x11638))+(((-1.0)*x11634*x11636)));
evalcond[5]=(x11638+x11634+((x11637*x11645))+((r21*x11630))+(((-1.0)*cj3*x11633*x11642))+((r20*x11640)));
evalcond[6]=(x11632+(((-1.0)*x11637*x11647))+((r21*x11641))+((x11630*x11642))+((r20*x11639))+(((-1.0)*x11643)));
evalcond[7]=(((r11*x11630))+((r10*x11640))+(((-1.0)*cj1*cj2*x11635))+((sj0*x11632))+((x11631*x11645))+(((-1.0)*cj3*x11633*x11644)));
evalcond[8]=(((r10*x11639))+((r11*x11641))+(((-1.0)*x11631*x11647))+((x11630*x11644))+(((-1.0)*x11634*x11635))+(((-1.0)*x11635*x11638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11648=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11648.valid){
continue;
}
CheckValue<IkReal> x11649=IKPowWithIntegerCheck(r02,-1);
if(!x11649.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11648.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11649.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11648.value)))+IKsqr(((-1.0)*sj0*(x11649.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11648.value)), ((-1.0)*sj0*(x11649.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11650=IKsin(j4);
IkReal x11651=IKcos(j4);
IkReal x11652=(gconst5*sj3);
IkReal x11653=(gconst4*r11);
IkReal x11654=(sj1*sj2);
IkReal x11655=((1.0)*gconst5);
IkReal x11656=(cj2*sj1);
IkReal x11657=((1.0)*sj0);
IkReal x11658=((1.0)*cj0);
IkReal x11659=(gconst4*r21);
IkReal x11660=(cj1*sj2);
IkReal x11661=(cj3*gconst4);
IkReal x11662=(gconst4*sj3);
IkReal x11663=(cj3*gconst5);
IkReal x11664=(r20*x11651);
IkReal x11665=((1.0)*cj1*cj2);
IkReal x11666=(r10*x11651);
IkReal x11667=(cj3*x11651);
IkReal x11668=(r02*x11650);
IkReal x11669=((1.0)*sj3*x11651);
evalcond[0]=((((-1.0)*x11657))+(((-1.0)*r02*x11651)));
evalcond[1]=(((x11650*x11659))+(((-1.0)*r20*x11650*x11655)));
evalcond[2]=(cj0+(((-1.0)*r10*x11650*x11655))+((x11650*x11653)));
evalcond[3]=((((-1.0)*cj1*cj2*x11658))+((cj0*x11654))+((cj3*x11668)));
evalcond[4]=((((-1.0)*x11656*x11658))+(((-1.0)*sj3*x11668))+(((-1.0)*x11658*x11660)));
evalcond[5]=((((-1.0)*cj3*x11655*x11664))+x11660+x11656+((r20*x11662))+((x11659*x11667))+((r21*x11652)));
evalcond[6]=(((r21*x11663))+x11654+((r20*x11661))+(((-1.0)*x11659*x11669))+(((-1.0)*x11665))+((x11652*x11664)));
evalcond[7]=((((-1.0)*cj3*x11655*x11666))+(((-1.0)*cj1*cj2*x11657))+((r11*x11652))+((sj0*x11654))+((r10*x11662))+((x11653*x11667)));
evalcond[8]=((((-1.0)*x11656*x11657))+(((-1.0)*x11653*x11669))+((r11*x11663))+((r10*x11661))+(((-1.0)*x11657*x11660))+((x11652*x11666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11670=((1.0)*sj0);
IkReal x11671=((1.0)*gconst4);
CheckValue<IkReal> x11672 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11670)))),IkReal(((((-1.0)*cj0*r01*x11671))+((cj0*gconst5*r00))+(((-1.0)*gconst4*r11*x11670))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11672.valid){
continue;
}
CheckValue<IkReal> x11673=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11671))+(((-1.0)*gconst5*r21)))),-1);
if(!x11673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11672.value)+(((1.5707963267949)*(x11673.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11674=IKsin(j4);
IkReal x11675=IKcos(j4);
IkReal x11676=(gconst5*sj3);
IkReal x11677=(cj3*gconst5);
IkReal x11678=(gconst4*r11);
IkReal x11679=(sj1*sj2);
IkReal x11680=(cj2*sj1);
IkReal x11681=((1.0)*sj0);
IkReal x11682=(gconst4*r01);
IkReal x11683=(gconst4*r21);
IkReal x11684=((1.0)*cj0);
IkReal x11685=(cj1*sj2);
IkReal x11686=(gconst4*sj3);
IkReal x11687=(cj3*gconst4);
IkReal x11688=((1.0)*x11675);
IkReal x11689=((1.0)*cj1*cj2);
IkReal x11690=(cj3*x11674);
IkReal x11691=(cj3*x11675);
IkReal x11692=((1.0)*gconst5*x11674);
IkReal x11693=((1.0)*sj3*x11674);
evalcond[0]=((((-1.0)*r20*x11692))+(((-1.0)*r22*x11688))+((x11674*x11683)));
evalcond[1]=(cj0+(((-1.0)*r12*x11688))+((x11674*x11678))+(((-1.0)*r10*x11692)));
evalcond[2]=((((-1.0)*r02*x11688))+(((-1.0)*x11681))+((x11674*x11682))+(((-1.0)*r00*x11692)));
evalcond[3]=(x11685+x11680+((x11683*x11691))+(((-1.0)*r20*x11677*x11688))+((r21*x11676))+((r22*x11690))+((r20*x11686)));
evalcond[4]=((((-1.0)*r22*x11693))+x11679+((r20*x11675*x11676))+(((-1.0)*x11689))+((r21*x11677))+((r20*x11687))+(((-1.0)*sj3*x11683*x11688)));
evalcond[5]=(((r00*x11686))+((cj0*x11679))+(((-1.0)*r00*x11677*x11688))+((r01*x11676))+((x11682*x11691))+(((-1.0)*cj1*cj2*x11684))+((r02*x11690)));
evalcond[6]=((((-1.0)*r10*x11677*x11688))+((r10*x11686))+((r11*x11676))+((r12*x11690))+((sj0*x11679))+(((-1.0)*cj1*cj2*x11681))+((x11678*x11691)));
evalcond[7]=(((r00*x11687))+(((-1.0)*x11680*x11684))+(((-1.0)*x11684*x11685))+(((-1.0)*r02*x11693))+((r00*x11675*x11676))+((r01*x11677))+(((-1.0)*sj3*x11682*x11688)));
evalcond[8]=((((-1.0)*x11680*x11681))+(((-1.0)*x11681*x11685))+(((-1.0)*sj3*x11678*x11688))+((r10*x11687))+((r11*x11677))+(((-1.0)*r12*x11693))+((r10*x11675*x11676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11694=((1.0)*gconst5);
CheckValue<IkReal> x11695 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11694))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11695.valid){
continue;
}
CheckValue<IkReal> x11696=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11694))+(((-1.0)*gconst4*r10)))),-1);
if(!x11696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11695.value)+(((1.5707963267949)*(x11696.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11697=IKsin(j4);
IkReal x11698=IKcos(j4);
IkReal x11699=(gconst5*sj3);
IkReal x11700=(cj3*gconst5);
IkReal x11701=(gconst4*r11);
IkReal x11702=(sj1*sj2);
IkReal x11703=(cj2*sj1);
IkReal x11704=((1.0)*sj0);
IkReal x11705=(gconst4*r01);
IkReal x11706=(gconst4*r21);
IkReal x11707=((1.0)*cj0);
IkReal x11708=(cj1*sj2);
IkReal x11709=(gconst4*sj3);
IkReal x11710=(cj3*gconst4);
IkReal x11711=((1.0)*x11698);
IkReal x11712=((1.0)*cj1*cj2);
IkReal x11713=(cj3*x11697);
IkReal x11714=(cj3*x11698);
IkReal x11715=((1.0)*gconst5*x11697);
IkReal x11716=((1.0)*sj3*x11697);
evalcond[0]=(((x11697*x11706))+(((-1.0)*r20*x11715))+(((-1.0)*r22*x11711)));
evalcond[1]=(((x11697*x11701))+cj0+(((-1.0)*r10*x11715))+(((-1.0)*r12*x11711)));
evalcond[2]=(((x11697*x11705))+(((-1.0)*r00*x11715))+(((-1.0)*x11704))+(((-1.0)*r02*x11711)));
evalcond[3]=(x11708+x11703+((x11706*x11714))+(((-1.0)*r20*x11700*x11711))+((r22*x11713))+((r20*x11709))+((r21*x11699)));
evalcond[4]=(x11702+((r20*x11698*x11699))+(((-1.0)*x11712))+(((-1.0)*sj3*x11706*x11711))+(((-1.0)*r22*x11716))+((r21*x11700))+((r20*x11710)));
evalcond[5]=(((x11705*x11714))+(((-1.0)*r00*x11700*x11711))+((r02*x11713))+((r01*x11699))+((r00*x11709))+((cj0*x11702))+(((-1.0)*cj1*cj2*x11707)));
evalcond[6]=(((r11*x11699))+((x11701*x11714))+((sj0*x11702))+(((-1.0)*cj1*cj2*x11704))+((r10*x11709))+(((-1.0)*r10*x11700*x11711))+((r12*x11713)));
evalcond[7]=((((-1.0)*x11707*x11708))+(((-1.0)*x11703*x11707))+((r00*x11710))+((r01*x11700))+(((-1.0)*sj3*x11705*x11711))+((r00*x11698*x11699))+(((-1.0)*r02*x11716)));
evalcond[8]=((((-1.0)*x11703*x11704))+(((-1.0)*x11704*x11708))+(((-1.0)*r12*x11716))+(((-1.0)*sj3*x11701*x11711))+((r10*x11698*x11699))+((r10*x11710))+((r11*x11700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11717=((1.0)*gconst5);
CheckValue<IkReal> x11718 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11717))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11718.valid){
continue;
}
CheckValue<IkReal> x11719=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11717)))),-1);
if(!x11719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11718.value)+(((1.5707963267949)*(x11719.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11720=IKsin(j4);
IkReal x11721=IKcos(j4);
IkReal x11722=(gconst5*sj3);
IkReal x11723=(cj3*gconst5);
IkReal x11724=(gconst4*r11);
IkReal x11725=(sj1*sj2);
IkReal x11726=(cj2*sj1);
IkReal x11727=((1.0)*sj0);
IkReal x11728=(gconst4*r01);
IkReal x11729=(gconst4*r21);
IkReal x11730=((1.0)*cj0);
IkReal x11731=(cj1*sj2);
IkReal x11732=(gconst4*sj3);
IkReal x11733=(cj3*gconst4);
IkReal x11734=((1.0)*x11721);
IkReal x11735=((1.0)*cj1*cj2);
IkReal x11736=(cj3*x11720);
IkReal x11737=(cj3*x11721);
IkReal x11738=((1.0)*gconst5*x11720);
IkReal x11739=((1.0)*sj3*x11720);
evalcond[0]=((((-1.0)*r20*x11738))+(((-1.0)*r22*x11734))+((x11720*x11729)));
evalcond[1]=(cj0+(((-1.0)*r10*x11738))+(((-1.0)*r12*x11734))+((x11720*x11724)));
evalcond[2]=((((-1.0)*x11727))+(((-1.0)*r00*x11738))+(((-1.0)*r02*x11734))+((x11720*x11728)));
evalcond[3]=(x11731+x11726+(((-1.0)*r20*x11723*x11734))+((x11729*x11737))+((r20*x11732))+((r21*x11722))+((r22*x11736)));
evalcond[4]=(((r20*x11721*x11722))+x11725+(((-1.0)*x11735))+(((-1.0)*sj3*x11729*x11734))+(((-1.0)*r22*x11739))+((r20*x11733))+((r21*x11723)));
evalcond[5]=(((r00*x11732))+((x11728*x11737))+((r01*x11722))+(((-1.0)*cj1*cj2*x11730))+((cj0*x11725))+((r02*x11736))+(((-1.0)*r00*x11723*x11734)));
evalcond[6]=(((sj0*x11725))+((r10*x11732))+(((-1.0)*r10*x11723*x11734))+(((-1.0)*cj1*cj2*x11727))+((x11724*x11737))+((r12*x11736))+((r11*x11722)));
evalcond[7]=((((-1.0)*x11726*x11730))+((r00*x11733))+((r01*x11723))+(((-1.0)*x11730*x11731))+(((-1.0)*sj3*x11728*x11734))+(((-1.0)*r02*x11739))+((r00*x11721*x11722)));
evalcond[8]=((((-1.0)*sj3*x11724*x11734))+((r10*x11721*x11722))+((r10*x11733))+(((-1.0)*r12*x11739))+(((-1.0)*x11726*x11727))+((r11*x11723))+(((-1.0)*x11727*x11731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11740=((-1.0)*r10);
IkReal x11742 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11742)==0){
continue;
}
IkReal x11741=pow(x11742,-0.5);
CheckValue<IkReal> x11743 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11740),IKFAST_ATAN2_MAGTHRESH);
if(!x11743.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11743.value));
IkReal gconst7=(r11*x11741);
IkReal gconst8=(x11740*x11741);
CheckValue<IkReal> x11744 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11744.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11744.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11745=((-1.0)*r10);
IkReal x11746=x11741;
CheckValue<IkReal> x11748 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11745),IKFAST_ATAN2_MAGTHRESH);
if(!x11748.valid){
continue;
}
IkReal x11747=((-1.0)*(x11748.value));
sj5=gconst7;
cj5=gconst8;
j5=x11747;
IkReal gconst6=x11747;
IkReal gconst7=(r11*x11746);
IkReal gconst8=(x11745*x11746);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11749=((1.0)*sj0);
IkReal x11750=((1.0)*gconst7);
CheckValue<IkReal> x11751 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11749)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x11749))+(((-1.0)*cj0*r01*x11750))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11751.valid){
continue;
}
CheckValue<IkReal> x11752=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*r21))+(((-1.0)*r20*x11750)))),-1);
if(!x11752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11751.value)+(((1.5707963267949)*(x11752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11753=IKsin(j4);
IkReal x11754=IKcos(j4);
IkReal x11755=(gconst7*sj3);
IkReal x11756=(cj3*gconst8);
IkReal x11757=(cj3*gconst7);
IkReal x11758=(sj1*sj2);
IkReal x11759=(cj2*sj1);
IkReal x11760=((1.0)*sj0);
IkReal x11761=((1.0)*cj0);
IkReal x11762=(gconst8*sj3);
IkReal x11763=(cj1*sj2);
IkReal x11764=((1.0)*x11754);
IkReal x11765=((1.0)*x11753);
IkReal x11766=((1.0)*cj1*cj2);
IkReal x11767=(cj3*x11753);
IkReal x11768=(gconst7*x11753);
IkReal x11769=(x11754*x11762);
evalcond[0]=((((-1.0)*r22*x11764))+(((-1.0)*gconst8*r20*x11765))+((r21*x11768)));
evalcond[1]=((((-1.0)*r12*x11764))+(((-1.0)*gconst8*r10*x11765))+((r11*x11768))+cj0);
evalcond[2]=((((-1.0)*gconst8*r00*x11765))+(((-1.0)*r02*x11764))+(((-1.0)*x11760))+((r01*x11768)));
evalcond[3]=(x11763+x11759+(((-1.0)*r20*x11756*x11764))+((r22*x11767))+((r21*x11754*x11757))+((r21*x11762))+((r20*x11755)));
evalcond[4]=((((-1.0)*r22*sj3*x11765))+x11758+((r20*x11769))+(((-1.0)*r21*x11755*x11764))+(((-1.0)*x11766))+((r21*x11756))+((r20*x11757)));
evalcond[5]=(((r01*x11754*x11757))+((cj0*x11758))+(((-1.0)*cj1*cj2*x11761))+((r02*x11767))+(((-1.0)*r00*x11756*x11764))+((r01*x11762))+((r00*x11755)));
evalcond[6]=((((-1.0)*cj1*cj2*x11760))+((r11*x11762))+((r10*x11755))+((r12*x11767))+((sj0*x11758))+((r11*x11754*x11757))+(((-1.0)*r10*x11756*x11764)));
evalcond[7]=((((-1.0)*r02*sj3*x11765))+(((-1.0)*r01*x11755*x11764))+((r00*x11769))+((r01*x11756))+(((-1.0)*x11759*x11761))+((r00*x11757))+(((-1.0)*x11761*x11763)));
evalcond[8]=(((r11*x11756))+((r10*x11769))+((r10*x11757))+(((-1.0)*r11*x11755*x11764))+(((-1.0)*x11760*x11763))+(((-1.0)*r12*sj3*x11765))+(((-1.0)*x11759*x11760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11770=((1.0)*gconst8);
CheckValue<IkReal> x11771=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11770)))),-1);
if(!x11771.valid){
continue;
}
CheckValue<IkReal> x11772 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11771.value)))+(x11772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11773=IKsin(j4);
IkReal x11774=IKcos(j4);
IkReal x11775=(gconst7*sj3);
IkReal x11776=(cj3*gconst8);
IkReal x11777=(cj3*gconst7);
IkReal x11778=(sj1*sj2);
IkReal x11779=(cj2*sj1);
IkReal x11780=((1.0)*sj0);
IkReal x11781=((1.0)*cj0);
IkReal x11782=(gconst8*sj3);
IkReal x11783=(cj1*sj2);
IkReal x11784=((1.0)*x11774);
IkReal x11785=((1.0)*x11773);
IkReal x11786=((1.0)*cj1*cj2);
IkReal x11787=(cj3*x11773);
IkReal x11788=(gconst7*x11773);
IkReal x11789=(x11774*x11782);
evalcond[0]=(((r21*x11788))+(((-1.0)*gconst8*r20*x11785))+(((-1.0)*r22*x11784)));
evalcond[1]=(((r11*x11788))+cj0+(((-1.0)*r12*x11784))+(((-1.0)*gconst8*r10*x11785)));
evalcond[2]=((((-1.0)*gconst8*r00*x11785))+(((-1.0)*r02*x11784))+(((-1.0)*x11780))+((r01*x11788)));
evalcond[3]=(((r21*x11782))+x11779+x11783+((r20*x11775))+((r22*x11787))+(((-1.0)*r20*x11776*x11784))+((r21*x11774*x11777)));
evalcond[4]=(x11778+((r20*x11777))+((r20*x11789))+(((-1.0)*r21*x11775*x11784))+((r21*x11776))+(((-1.0)*r22*sj3*x11785))+(((-1.0)*x11786)));
evalcond[5]=(((r02*x11787))+(((-1.0)*cj1*cj2*x11781))+((r01*x11774*x11777))+((r00*x11775))+((cj0*x11778))+((r01*x11782))+(((-1.0)*r00*x11776*x11784)));
evalcond[6]=(((r11*x11782))+((r10*x11775))+((sj0*x11778))+((r12*x11787))+(((-1.0)*cj1*cj2*x11780))+((r11*x11774*x11777))+(((-1.0)*r10*x11776*x11784)));
evalcond[7]=((((-1.0)*x11779*x11781))+(((-1.0)*r02*sj3*x11785))+(((-1.0)*x11781*x11783))+((r01*x11776))+((r00*x11777))+(((-1.0)*r01*x11775*x11784))+((r00*x11789)));
evalcond[8]=((((-1.0)*x11779*x11780))+((r10*x11777))+((r10*x11789))+((r11*x11776))+(((-1.0)*r11*x11775*x11784))+(((-1.0)*x11780*x11783))+(((-1.0)*r12*sj3*x11785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11790=((-1.0)*r11);
IkReal x11792 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11792)==0){
continue;
}
IkReal x11791=pow(x11792,-0.5);
CheckValue<IkReal> x11793 = IKatan2WithCheck(IkReal(x11790),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11793.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11793.value))));
IkReal gconst10=(x11790*x11791);
IkReal gconst11=((1.0)*r10*x11791);
CheckValue<IkReal> x11794 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11794.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11794.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11795=((-1.0)*r11);
CheckValue<IkReal> x11798 = IKatan2WithCheck(IkReal(x11795),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11798.valid){
continue;
}
IkReal x11796=((1.0)*(x11798.value));
IkReal x11797=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11796)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11796)));
IkReal gconst10=(x11795*x11797);
IkReal gconst11=((1.0)*r10*x11797);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11799=((-1.0)*r11);
CheckValue<IkReal> x11802 = IKatan2WithCheck(IkReal(x11799),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11802.valid){
continue;
}
IkReal x11800=((1.0)*(x11802.value));
IkReal x11801=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11800)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11800)));
IkReal gconst10=(x11799*x11801);
IkReal gconst11=((1.0)*r10*x11801);
IkReal x11803=r12*r12;
IkReal x11804=((1.0)*sj0);
IkReal x11805=(cj0*r02);
IkReal x11806=x11791;
j4eval[0]=((IKabs(((((-1.0)*r12*x11804))+(((-1.0)*x11805)))))+(IKabs((((sj0*x11803*x11806))+((r12*x11805*x11806))+(((-1.0)*x11804*x11806))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11807=((-1.0)*r11);
CheckValue<IkReal> x11810 = IKatan2WithCheck(IkReal(x11807),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11810.valid){
continue;
}
IkReal x11808=((1.0)*(x11810.value));
IkReal x11809=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11808)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11808)));
IkReal gconst10=(x11807*x11809);
IkReal gconst11=((1.0)*r10*x11809);
IkReal x11811=((1.0)*cj3);
CheckValue<IkReal> x11816=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11816.valid){
continue;
}
IkReal x11812=x11816.value;
IkReal x11813=(cj3*x11812);
IkReal x11814=(x11811*x11812);
IkReal x11815=((((-1.0)*x11814*(r11*r11)*(r21*r21)))+(((-1.0)*x11814*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x11813))+(((-1.0)*x11811*(r22*r22))));
j4eval[0]=x11815;
j4eval[1]=IKsign(x11815);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11817=((-1.0)*r11);
CheckValue<IkReal> x11820 = IKatan2WithCheck(IkReal(x11817),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11820.valid){
continue;
}
IkReal x11818=((1.0)*(x11820.value));
IkReal x11819=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11818)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11818)));
IkReal gconst10=(x11817*x11819);
IkReal gconst11=((1.0)*r10*x11819);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11821=((-1.0)*r11);
CheckValue<IkReal> x11824 = IKatan2WithCheck(IkReal(x11821),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11824.valid){
continue;
}
IkReal x11822=((1.0)*(x11824.value));
IkReal x11823=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11822)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11822)));
IkReal gconst10=(x11821*x11823);
IkReal gconst11=((1.0)*r10*x11823);
IkReal x11825=r12*r12;
IkReal x11826=((1.0)*sj0);
IkReal x11827=(cj0*r02);
IkReal x11828=x11791;
j4eval[0]=((IKabs((((r12*x11827*x11828))+((sj0*x11825*x11828))+(((-1.0)*x11826*x11828)))))+(IKabs(((((-1.0)*x11827))+(((-1.0)*r12*x11826))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11829=((-1.0)*r11);
CheckValue<IkReal> x11832 = IKatan2WithCheck(IkReal(x11829),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11832.valid){
continue;
}
IkReal x11830=((1.0)*(x11832.value));
IkReal x11831=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11830)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11830)));
IkReal gconst10=(x11829*x11831);
IkReal gconst11=((1.0)*r10*x11831);
IkReal x11833=r12*r12;
IkReal x11834=(cj1*cj2*r22);
IkReal x11835=(r22*sj1*sj2);
CheckValue<IkReal> x11839=IKPowWithIntegerCheck(((-1.0)+x11833),-1);
if(!x11839.valid){
continue;
}
IkReal x11836=x11839.value;
if((((1.0)+(((-1.0)*x11833)))) < -0.00001)
continue;
IkReal x11837=IKsqrt(((1.0)+(((-1.0)*x11833))));
IkReal x11838=(r12*x11836*x11837);
j4eval[0]=((IKabs(((((-1.0)*x11835*x11838))+((x11834*x11838)))))+(IKabs(((((-1.0)*x11834))+x11835))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11840=((-1.0)*r11);
CheckValue<IkReal> x11843 = IKatan2WithCheck(IkReal(x11840),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11843.valid){
continue;
}
IkReal x11841=((1.0)*(x11843.value));
IkReal x11842=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11841)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11841)));
IkReal gconst10=(x11840*x11842);
IkReal gconst11=((1.0)*r10*x11842);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11844=((-1.0)*r11);
CheckValue<IkReal> x11847 = IKatan2WithCheck(IkReal(x11844),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11847.valid){
continue;
}
IkReal x11845=((1.0)*(x11847.value));
IkReal x11846=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11845)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11845)));
IkReal gconst10=(x11844*x11846);
IkReal gconst11=((1.0)*r10*x11846);
IkReal x11848=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11852=IKPowWithIntegerCheck(x11848,-1);
if(!x11852.valid){
continue;
}
IkReal x11849=x11852.value;
IkReal x11850=((1.0)*x11849);
IkReal x11851=((((-1.0)*x11850*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x11849))+(((-1.0)*x11850*(r01*r01)*(r11*r11))));
j4eval[0]=x11851;
j4eval[1]=IKsign(x11851);
j4eval[2]=r02;
j4eval[3]=x11848;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11853=((-1.0)*r11);
CheckValue<IkReal> x11856 = IKatan2WithCheck(IkReal(x11853),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11856.valid){
continue;
}
IkReal x11854=((1.0)*(x11856.value));
IkReal x11855=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11854)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11854)));
IkReal gconst10=(x11853*x11855);
IkReal gconst11=((1.0)*r10*x11855);
IkReal x11857=r12*r12;
IkReal x11858=(cj1*cj2*r22);
IkReal x11859=(r22*sj1*sj2);
CheckValue<IkReal> x11863=IKPowWithIntegerCheck(((-1.0)+x11857),-1);
if(!x11863.valid){
continue;
}
IkReal x11860=x11863.value;
if((((1.0)+(((-1.0)*x11857)))) < -0.00001)
continue;
IkReal x11861=IKsqrt(((1.0)+(((-1.0)*x11857))));
IkReal x11862=(r12*x11860*x11861);
j4eval[0]=((IKabs(((((-1.0)*x11858))+x11859)))+(IKabs(((((-1.0)*x11859*x11862))+((x11858*x11862))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11864=(gconst10*r21);
IkReal x11865=(gconst11*r20);
IkReal x11866=(sj1*sj2);
IkReal x11867=(cj1*cj2);
CheckValue<IkReal> x11868 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11867))+((r22*x11866)))),IkReal((((x11864*x11866))+(((-1.0)*x11864*x11867))+(((-1.0)*x11865*x11866))+((x11865*x11867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11868.valid){
continue;
}
CheckValue<IkReal> x11869=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x11864*x11865))+(x11865*x11865)+(x11864*x11864))),-1);
if(!x11869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11868.value)+(((1.5707963267949)*(x11869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11870=IKsin(j4);
IkReal x11871=IKcos(j4);
IkReal x11872=((1.0)*cj2);
IkReal x11873=((1.0)*x11871);
IkReal x11874=(gconst10*x11870);
IkReal x11875=((1.0)*x11870);
IkReal x11876=(gconst11*x11871);
IkReal x11877=(gconst11*x11875);
evalcond[0]=((((-1.0)*r22*x11873))+(((-1.0)*r20*x11877))+((r21*x11874)));
evalcond[1]=((((-1.0)*r10*x11877))+((r11*x11874))+(((-1.0)*r12*x11873)));
evalcond[2]=(((r00*x11876))+(((-1.0)*gconst10*r01*x11873))+(((-1.0)*r02*x11875)));
evalcond[3]=((-1.0)+((r01*x11874))+(((-1.0)*r02*x11873))+(((-1.0)*r00*x11877)));
evalcond[4]=((((-1.0)*r22*x11875))+(((-1.0)*gconst10*r21*x11873))+(((-1.0)*cj1*x11872))+((r20*x11876))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x11872))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11873))+((r10*x11876))+(((-1.0)*r12*x11875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11878=(gconst11*r00);
IkReal x11879=(gconst10*r01);
CheckValue<IkReal> x11880 = IKatan2WithCheck(IkReal(((((-1.0)*x11879))+x11878)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11880.valid){
continue;
}
CheckValue<IkReal> x11881=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11878*x11878)))+(((-1.0)*(r02*r02)))+(((2.0)*x11878*x11879))+(((-1.0)*(x11879*x11879))))),-1);
if(!x11881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11880.value)+(((1.5707963267949)*(x11881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11882=IKsin(j4);
IkReal x11883=IKcos(j4);
IkReal x11884=((1.0)*cj2);
IkReal x11885=((1.0)*x11883);
IkReal x11886=(gconst10*x11882);
IkReal x11887=((1.0)*x11882);
IkReal x11888=(gconst11*x11883);
IkReal x11889=(gconst11*x11887);
evalcond[0]=(((r21*x11886))+(((-1.0)*r22*x11885))+(((-1.0)*r20*x11889)));
evalcond[1]=((((-1.0)*r12*x11885))+((r11*x11886))+(((-1.0)*r10*x11889)));
evalcond[2]=((((-1.0)*gconst10*r01*x11885))+((r00*x11888))+(((-1.0)*r02*x11887)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11889))+((r01*x11886))+(((-1.0)*r02*x11885)));
evalcond[4]=((((-1.0)*r22*x11887))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11885))+(((-1.0)*cj1*x11884))+((r20*x11888)));
evalcond[5]=((((-1.0)*gconst10*r11*x11885))+(((-1.0)*cj1*sj2))+((r10*x11888))+(((-1.0)*r12*x11887))+(((-1.0)*sj1*x11884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11890 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11890.valid){
continue;
}
CheckValue<IkReal> x11891=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11890.value)+(((1.5707963267949)*(x11891.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11892=IKsin(j4);
IkReal x11893=IKcos(j4);
IkReal x11894=((1.0)*cj2);
IkReal x11895=((1.0)*x11893);
IkReal x11896=(gconst10*x11892);
IkReal x11897=((1.0)*x11892);
IkReal x11898=(gconst11*x11893);
IkReal x11899=(gconst11*x11897);
evalcond[0]=((((-1.0)*r20*x11899))+(((-1.0)*r22*x11895))+((r21*x11896)));
evalcond[1]=((((-1.0)*r10*x11899))+(((-1.0)*r12*x11895))+((r11*x11896)));
evalcond[2]=((((-1.0)*gconst10*r01*x11895))+((r00*x11898))+(((-1.0)*r02*x11897)));
evalcond[3]=((-1.0)+((r01*x11896))+(((-1.0)*r00*x11899))+(((-1.0)*r02*x11895)));
evalcond[4]=((((-1.0)*cj1*x11894))+(((-1.0)*r22*x11897))+((sj1*sj2))+((r20*x11898))+(((-1.0)*gconst10*r21*x11895)));
evalcond[5]=((((-1.0)*gconst10*r11*x11895))+(((-1.0)*r12*x11897))+(((-1.0)*cj1*sj2))+((r10*x11898))+(((-1.0)*sj1*x11894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11900=((-1.0)*r11);
CheckValue<IkReal> x11903 = IKatan2WithCheck(IkReal(x11900),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11903.valid){
continue;
}
IkReal x11901=((1.0)*(x11903.value));
IkReal x11902=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11901)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11901)));
IkReal gconst10=(x11900*x11902);
IkReal gconst11=((1.0)*r10*x11902);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11904=((-1.0)*r11);
CheckValue<IkReal> x11907 = IKatan2WithCheck(IkReal(x11904),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11907.valid){
continue;
}
IkReal x11905=((1.0)*(x11907.value));
IkReal x11906=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11905)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11905)));
IkReal gconst10=(x11904*x11906);
IkReal gconst11=((1.0)*r10*x11906);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11908=((-1.0)*r11);
CheckValue<IkReal> x11911 = IKatan2WithCheck(IkReal(x11908),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11911.valid){
continue;
}
IkReal x11909=((1.0)*(x11911.value));
IkReal x11910=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11909)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11909)));
IkReal gconst10=(x11908*x11910);
IkReal gconst11=((1.0)*r10*x11910);
IkReal x11912=r12*r12;
CheckValue<IkReal> x11915=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11912))),-1);
if(!x11915.valid){
continue;
}
IkReal x11913=x11915.value;
IkReal x11914=((1.0)*x11913);
j4eval[0]=IKsign((x11912+(((2.0)*x11913*(r10*r10)*(r11*r11)))+((x11914*(r10*r10*r10*r10)))+((x11914*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11916=(cj2*sj1);
IkReal x11917=(gconst10*r11);
IkReal x11918=(gconst11*r10);
IkReal x11919=(cj1*sj2);
CheckValue<IkReal> x11920 = IKatan2WithCheck(IkReal((((r12*x11919))+((r12*x11916)))),IkReal(((((-1.0)*x11916*x11918))+((x11917*x11919))+((x11916*x11917))+(((-1.0)*x11918*x11919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11920.valid){
continue;
}
CheckValue<IkReal> x11921=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11918*x11918)+(x11917*x11917)+(((-2.0)*x11917*x11918)))),-1);
if(!x11921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11920.value)+(((1.5707963267949)*(x11921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11922=IKsin(j4);
IkReal x11923=IKcos(j4);
IkReal x11924=((1.0)*x11923);
IkReal x11925=(gconst10*x11922);
IkReal x11926=((1.0)*x11922);
IkReal x11927=(gconst11*x11923);
IkReal x11928=(gconst11*x11926);
evalcond[0]=((((-1.0)*r20*x11928))+((r21*x11925))+(((-1.0)*r22*x11924)));
evalcond[1]=((((-1.0)*r10*x11928))+((r11*x11925))+(((-1.0)*r12*x11924)));
evalcond[2]=((((-1.0)*r02*x11926))+((r00*x11927))+(((-1.0)*gconst10*r01*x11924)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11924))+(((-1.0)*r00*x11928))+((r01*x11925)));
evalcond[4]=(((cj2*sj1))+((r10*x11927))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11924))+(((-1.0)*r12*x11926)));
evalcond[5]=(((r20*x11927))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11926))+(((-1.0)*gconst10*r21*x11924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11929=(gconst11*r00);
IkReal x11930=(gconst10*r01);
CheckValue<IkReal> x11931 = IKatan2WithCheck(IkReal((x11929+(((-1.0)*x11930)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11931.valid){
continue;
}
CheckValue<IkReal> x11932=IKPowWithIntegerCheck(IKsign(((x11930*x11930)+(x11929*x11929)+(((-2.0)*x11929*x11930))+(r02*r02))),-1);
if(!x11932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11931.value)+(((1.5707963267949)*(x11932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11933=IKsin(j4);
IkReal x11934=IKcos(j4);
IkReal x11935=((1.0)*x11934);
IkReal x11936=(gconst10*x11933);
IkReal x11937=((1.0)*x11933);
IkReal x11938=(gconst11*x11934);
IkReal x11939=(gconst11*x11937);
evalcond[0]=(((r21*x11936))+(((-1.0)*r22*x11935))+(((-1.0)*r20*x11939)));
evalcond[1]=((((-1.0)*r10*x11939))+((r11*x11936))+(((-1.0)*r12*x11935)));
evalcond[2]=((((-1.0)*gconst10*r01*x11935))+(((-1.0)*r02*x11937))+((r00*x11938)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11935))+(((-1.0)*r00*x11939))+((r01*x11936)));
evalcond[4]=(((cj2*sj1))+((r10*x11938))+(((-1.0)*gconst10*r11*x11935))+((cj1*sj2))+(((-1.0)*r12*x11937)));
evalcond[5]=(((r20*x11938))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11935))+(((-1.0)*r22*x11937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11940=((1.0)*gconst11);
CheckValue<IkReal> x11941 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11940)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11941.valid){
continue;
}
CheckValue<IkReal> x11942=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11940))+(((-1.0)*gconst10*r20)))),-1);
if(!x11942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11941.value)+(((1.5707963267949)*(x11942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11943=IKsin(j4);
IkReal x11944=IKcos(j4);
IkReal x11945=((1.0)*x11944);
IkReal x11946=(gconst10*x11943);
IkReal x11947=((1.0)*x11943);
IkReal x11948=(gconst11*x11944);
IkReal x11949=(gconst11*x11947);
evalcond[0]=((((-1.0)*r20*x11949))+(((-1.0)*r22*x11945))+((r21*x11946)));
evalcond[1]=(((r11*x11946))+(((-1.0)*r12*x11945))+(((-1.0)*r10*x11949)));
evalcond[2]=((((-1.0)*r02*x11947))+((r00*x11948))+(((-1.0)*gconst10*r01*x11945)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11945))+(((-1.0)*r00*x11949))+((r01*x11946)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r11*x11945))+((cj1*sj2))+((r10*x11948))+(((-1.0)*r12*x11947)));
evalcond[5]=((((-1.0)*gconst10*r21*x11945))+((r20*x11948))+(((-1.0)*r22*x11947))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11950=((-1.0)*r11);
IkReal x11951=((-1.0)*r10);
CheckValue<IkReal> x11953 = IKatan2WithCheck(IkReal(x11950),IkReal(x11951),IKFAST_ATAN2_MAGTHRESH);
if(!x11953.valid){
continue;
}
IkReal x11952=((1.0)*(x11953.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11952)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11951);
rxp1_1=(px*r21);
rxp1_2=(px*x11950);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11952)));
IkReal gconst10=x11950;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11954=((-1.0)*r11);
IkReal x11955=((-1.0)*r10);
CheckValue<IkReal> x11957 = IKatan2WithCheck(IkReal(x11954),IkReal(x11955),IKFAST_ATAN2_MAGTHRESH);
if(!x11957.valid){
continue;
}
IkReal x11956=((1.0)*(x11957.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11956)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11955);
rxp1_1=(px*r21);
rxp1_2=(px*x11954);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11956)));
IkReal gconst10=x11954;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11958=((-1.0)*r11);
IkReal x11959=((-1.0)*r10);
CheckValue<IkReal> x11961 = IKatan2WithCheck(IkReal(x11958),IkReal(x11959),IKFAST_ATAN2_MAGTHRESH);
if(!x11961.valid){
continue;
}
IkReal x11960=((1.0)*(x11961.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11960)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11959);
rxp1_1=(px*r21);
rxp1_2=(px*x11958);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11960)));
IkReal gconst10=x11958;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11964=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11964.valid){
continue;
}
IkReal x11962=x11964.value;
IkReal x11963=(sj0*x11962);
cj4array[0]=(((cj1*sj2*x11963))+((cj2*sj1*x11963)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11965=IKsin(j4);
IkReal x11966=IKcos(j4);
IkReal x11967=(gconst10*r21);
IkReal x11968=(gconst11*r20);
IkReal x11969=((1.0)*x11965);
IkReal x11970=((1.0)*x11966);
evalcond[0]=((-1.0)*r02*x11965);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11970)));
evalcond[2]=(((x11965*x11967))+(((-1.0)*x11968*x11969)));
evalcond[3]=(((gconst10*r11*x11965))+(((-1.0)*gconst11*r10*x11969)));
evalcond[4]=((((-1.0)*x11967*x11970))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11966*x11968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11972=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11972.valid){
continue;
}
IkReal x11971=x11972.value;
cj4array[0]=(((cj1*cj2*x11971))+(((-1.0)*sj1*sj2*x11971)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11973=IKsin(j4);
IkReal x11974=IKcos(j4);
IkReal x11975=((1.0)*sj0);
IkReal x11976=(gconst10*x11973);
IkReal x11977=((1.0)*x11974);
IkReal x11978=((1.0)*gconst11*x11973);
evalcond[0]=((-1.0)*r02*x11973);
evalcond[1]=((((-1.0)*x11975))+(((-1.0)*r02*x11977)));
evalcond[2]=((((-1.0)*r20*x11978))+((r21*x11976)));
evalcond[3]=((((-1.0)*r10*x11978))+((r11*x11976)));
evalcond[4]=((((-1.0)*gconst10*r11*x11977))+(((-1.0)*cj2*sj1*x11975))+(((-1.0)*cj1*sj2*x11975))+((gconst11*r10*x11974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11979=IKPowWithIntegerCheck(r02,-1);
if(!x11979.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11979.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11980=IKsin(j4);
IkReal x11981=IKcos(j4);
IkReal x11982=(gconst10*r21);
IkReal x11983=((1.0)*sj0);
IkReal x11984=(gconst10*r11);
IkReal x11985=(gconst11*x11981);
IkReal x11986=((1.0)*x11981);
IkReal x11987=((1.0)*gconst11*x11980);
evalcond[0]=((-1.0)*r02*x11980);
evalcond[1]=(((x11980*x11982))+(((-1.0)*r20*x11987)));
evalcond[2]=(((x11980*x11984))+(((-1.0)*r10*x11987)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11985))+(((-1.0)*x11982*x11986)));
evalcond[4]=(((r10*x11985))+(((-1.0)*x11984*x11986))+(((-1.0)*cj2*sj1*x11983))+(((-1.0)*cj1*sj2*x11983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11988=((1.0)*gconst11);
CheckValue<IkReal> x11989 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11988))+(((-1.0)*cj0*r00*x11988))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11989.valid){
continue;
}
CheckValue<IkReal> x11990=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11989.value)+(((1.5707963267949)*(x11990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11991=IKsin(j4);
IkReal x11992=IKcos(j4);
IkReal x11993=((1.0)*cj2);
IkReal x11994=((1.0)*sj0);
IkReal x11995=(cj1*sj2);
IkReal x11996=(gconst10*x11991);
IkReal x11997=((1.0)*x11992);
IkReal x11998=(gconst11*x11992);
IkReal x11999=((1.0)*x11991);
IkReal x12000=(gconst11*x11999);
evalcond[0]=(((r21*x11996))+(((-1.0)*r20*x12000)));
evalcond[1]=((((-1.0)*r10*x12000))+cj0+(((-1.0)*r12*x11997))+((r11*x11996)));
evalcond[2]=(((r20*x11998))+(((-1.0)*gconst10*r21*x11997))+((sj1*sj2))+(((-1.0)*cj1*x11993)));
evalcond[3]=((((-1.0)*r02*x11997))+(((-1.0)*r00*x12000))+((r01*x11996))+(((-1.0)*x11994)));
evalcond[4]=((((-1.0)*r02*x11999))+(((-1.0)*cj0*x11995))+((r00*x11998))+(((-1.0)*gconst10*r01*x11997))+(((-1.0)*cj0*sj1*x11993)));
evalcond[5]=((((-1.0)*x11994*x11995))+(((-1.0)*r12*x11999))+(((-1.0)*gconst10*r11*x11997))+((r10*x11998))+(((-1.0)*sj0*sj1*x11993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12001=(gconst10*r21);
IkReal x12002=(gconst11*r20);
IkReal x12003=(sj1*sj2);
IkReal x12004=(cj1*cj2);
CheckValue<IkReal> x12005 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12004))+((r22*x12003)))),IkReal((((x12002*x12004))+(((-1.0)*x12001*x12004))+(((-1.0)*x12002*x12003))+((x12001*x12003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12005.valid){
continue;
}
CheckValue<IkReal> x12006=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x12002*x12002)+(((-2.0)*x12001*x12002))+(x12001*x12001))),-1);
if(!x12006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12005.value)+(((1.5707963267949)*(x12006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12007=IKsin(j4);
IkReal x12008=IKcos(j4);
IkReal x12009=((1.0)*cj2);
IkReal x12010=((1.0)*sj0);
IkReal x12011=(cj1*sj2);
IkReal x12012=((1.0)*x12008);
IkReal x12013=(gconst10*x12007);
IkReal x12014=((1.0)*x12007);
IkReal x12015=(gconst11*x12008);
IkReal x12016=(gconst11*x12014);
evalcond[0]=(((r21*x12013))+(((-1.0)*r22*x12012))+(((-1.0)*r20*x12016)));
evalcond[1]=(cj0+((r11*x12013))+(((-1.0)*r12*x12012))+(((-1.0)*r10*x12016)));
evalcond[2]=((((-1.0)*r02*x12012))+(((-1.0)*x12010))+((r01*x12013))+(((-1.0)*r00*x12016)));
evalcond[3]=((((-1.0)*gconst10*r21*x12012))+((sj1*sj2))+(((-1.0)*r22*x12014))+((r20*x12015))+(((-1.0)*cj1*x12009)));
evalcond[4]=((((-1.0)*r02*x12014))+(((-1.0)*cj0*x12011))+(((-1.0)*cj0*sj1*x12009))+((r00*x12015))+(((-1.0)*gconst10*r01*x12012)));
evalcond[5]=((((-1.0)*sj0*sj1*x12009))+((r10*x12015))+(((-1.0)*x12010*x12011))+(((-1.0)*r12*x12014))+(((-1.0)*gconst10*r11*x12012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12017=((1.0)*sj0);
IkReal x12018=((1.0)*gconst10);
CheckValue<IkReal> x12019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12018))+(((-1.0)*gconst11*r21)))),-1);
if(!x12019.valid){
continue;
}
CheckValue<IkReal> x12020 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12017))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12018))+((cj0*gconst11*r00))+(((-1.0)*gconst10*r11*x12017))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12019.value)))+(x12020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12021=IKsin(j4);
IkReal x12022=IKcos(j4);
IkReal x12023=((1.0)*cj2);
IkReal x12024=((1.0)*sj0);
IkReal x12025=(cj1*sj2);
IkReal x12026=((1.0)*x12022);
IkReal x12027=(gconst10*x12021);
IkReal x12028=((1.0)*x12021);
IkReal x12029=(gconst11*x12022);
IkReal x12030=(gconst11*x12028);
evalcond[0]=((((-1.0)*r20*x12030))+((r21*x12027))+(((-1.0)*r22*x12026)));
evalcond[1]=(cj0+((r11*x12027))+(((-1.0)*r12*x12026))+(((-1.0)*r10*x12030)));
evalcond[2]=(((r01*x12027))+(((-1.0)*x12024))+(((-1.0)*r00*x12030))+(((-1.0)*r02*x12026)));
evalcond[3]=((((-1.0)*cj1*x12023))+((r20*x12029))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12026))+(((-1.0)*r22*x12028)));
evalcond[4]=(((r00*x12029))+(((-1.0)*r02*x12028))+(((-1.0)*cj0*sj1*x12023))+(((-1.0)*cj0*x12025))+(((-1.0)*gconst10*r01*x12026)));
evalcond[5]=((((-1.0)*x12024*x12025))+(((-1.0)*gconst10*r11*x12026))+(((-1.0)*r12*x12028))+(((-1.0)*sj0*sj1*x12023))+((r10*x12029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12031=((1.0)*gconst11);
CheckValue<IkReal> x12032 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12032.valid){
continue;
}
CheckValue<IkReal> x12033=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12031)))),-1);
if(!x12033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12032.value)+(((1.5707963267949)*(x12033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12034=IKsin(j4);
IkReal x12035=IKcos(j4);
IkReal x12036=((1.0)*cj2);
IkReal x12037=((1.0)*sj0);
IkReal x12038=(cj1*sj2);
IkReal x12039=((1.0)*x12035);
IkReal x12040=(gconst10*x12034);
IkReal x12041=((1.0)*x12034);
IkReal x12042=(gconst11*x12035);
IkReal x12043=(gconst11*x12041);
evalcond[0]=((((-1.0)*r20*x12043))+((r21*x12040))+(((-1.0)*r22*x12039)));
evalcond[1]=(cj0+((r11*x12040))+(((-1.0)*r10*x12043))+(((-1.0)*r12*x12039)));
evalcond[2]=((((-1.0)*r00*x12043))+(((-1.0)*x12037))+(((-1.0)*r02*x12039))+((r01*x12040)));
evalcond[3]=((((-1.0)*cj1*x12036))+((sj1*sj2))+((r20*x12042))+(((-1.0)*gconst10*r21*x12039))+(((-1.0)*r22*x12041)));
evalcond[4]=((((-1.0)*gconst10*r01*x12039))+((r00*x12042))+(((-1.0)*cj0*sj1*x12036))+(((-1.0)*r02*x12041))+(((-1.0)*cj0*x12038)));
evalcond[5]=(((r10*x12042))+(((-1.0)*r12*x12041))+(((-1.0)*gconst10*r11*x12039))+(((-1.0)*x12037*x12038))+(((-1.0)*sj0*sj1*x12036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12044=((-1.0)*r11);
CheckValue<IkReal> x12047 = IKatan2WithCheck(IkReal(x12044),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12047.valid){
continue;
}
IkReal x12045=((1.0)*(x12047.value));
IkReal x12046=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12045)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12045)));
IkReal gconst10=(x12044*x12046);
IkReal gconst11=((1.0)*r10*x12046);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12048=((-1.0)*r11);
CheckValue<IkReal> x12051 = IKatan2WithCheck(IkReal(x12048),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12051.valid){
continue;
}
IkReal x12049=((1.0)*(x12051.value));
IkReal x12050=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12049)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12049)));
IkReal gconst10=(x12048*x12050);
IkReal gconst11=((1.0)*r10*x12050);
IkReal x12052=r12*r12;
IkReal x12053=((1.0)*sj0);
IkReal x12054=(cj0*r02);
IkReal x12055=x11791;
j4eval[0]=((IKabs(((((-1.0)*x12054))+(((-1.0)*r12*x12053)))))+(IKabs((((r12*x12054*x12055))+((sj0*x12052*x12055))+(((-1.0)*x12053*x12055))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12056=((-1.0)*r11);
CheckValue<IkReal> x12059 = IKatan2WithCheck(IkReal(x12056),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12059.valid){
continue;
}
IkReal x12057=((1.0)*(x12059.value));
IkReal x12058=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12057)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12057)));
IkReal gconst10=(x12056*x12058);
IkReal gconst11=((1.0)*r10*x12058);
IkReal x12060=r12*r12;
IkReal x12061=((1.0)+(((-1.0)*x12060)));
IkReal x12062=(r22*sj1*sj2);
IkReal x12063=(cj1*cj2*r22);
CheckValue<IkReal> x12070=IKPowWithIntegerCheck(x12061,-1);
if(!x12070.valid){
continue;
}
IkReal x12064=x12070.value;
CheckValue<IkReal> x12071=IKPowWithIntegerCheck(((-1.0)+x12060),-1);
if(!x12071.valid){
continue;
}
IkReal x12065=x12071.value;
IkReal x12066=((1.0)*x12064);
if((x12061) < -0.00001)
continue;
IkReal x12067=IKsqrt(x12061);
IkReal x12068=(r12*x12065*x12067);
IkReal x12069=((((-1.0)*x12066*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x12066*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x12064)));
j4eval[0]=x12069;
j4eval[1]=((IKabs(((((-1.0)*x12062*x12068))+((x12063*x12068)))))+(IKabs(((((-1.0)*x12063))+x12062))));
j4eval[2]=IKsign(x12069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12072=((-1.0)*r11);
CheckValue<IkReal> x12075 = IKatan2WithCheck(IkReal(x12072),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12075.valid){
continue;
}
IkReal x12073=((1.0)*(x12075.value));
IkReal x12074=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12073)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12073)));
IkReal gconst10=(x12072*x12074);
IkReal gconst11=((1.0)*r10*x12074);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12076=((-1.0)*r11);
CheckValue<IkReal> x12079 = IKatan2WithCheck(IkReal(x12076),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12079.valid){
continue;
}
IkReal x12077=((1.0)*(x12079.value));
IkReal x12078=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12077)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12077)));
IkReal gconst10=(x12076*x12078);
IkReal gconst11=((1.0)*r10*x12078);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12080=((-1.0)*r11);
CheckValue<IkReal> x12083 = IKatan2WithCheck(IkReal(x12080),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12083.valid){
continue;
}
IkReal x12081=((1.0)*(x12083.value));
IkReal x12082=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12081)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12081)));
IkReal gconst10=(x12080*x12082);
IkReal gconst11=((1.0)*r10*x12082);
IkReal x12084=(cj1*r02*sj2);
IkReal x12085=(cj2*r02*sj1);
IkReal x12086=x11791;
IkReal x12087=(r12*x12086);
j4eval[0]=((IKabs((((x12084*x12087))+((x12085*x12087)))))+(IKabs((x12084+x12085))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12088=(cj1*sj2);
IkReal x12089=(cj2*sj1);
IkReal x12090=(gconst11*r00);
IkReal x12091=((1.0)*gconst10*r01);
CheckValue<IkReal> x12092=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12092.valid){
continue;
}
CheckValue<IkReal> x12093 = IKatan2WithCheck(IkReal((((x12089*x12090))+((x12088*x12090))+(((-1.0)*x12089*x12091))+(((-1.0)*x12088*x12091)))),IkReal((((r02*x12088))+((r02*x12089)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12092.value)))+(x12093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12094=IKcos(j4);
IkReal x12095=IKsin(j4);
IkReal x12096=((1.0)*cj2);
IkReal x12097=((1.0)*x12094);
IkReal x12098=(gconst10*x12094);
IkReal x12099=(gconst10*x12095);
IkReal x12100=((1.0)*gconst11*x12095);
evalcond[0]=(((r01*x12098))+(((-1.0)*gconst11*r00*x12097))+((r02*x12095)));
evalcond[1]=((((-1.0)*r20*x12100))+(((-1.0)*r22*x12097))+((r21*x12099)));
evalcond[2]=(((r11*x12099))+(((-1.0)*r10*x12100))+(((-1.0)*r12*x12097)));
evalcond[3]=((-1.0)+((r01*x12099))+(((-1.0)*r00*x12100))+(((-1.0)*r02*x12097)));
evalcond[4]=(((r22*x12095))+((sj1*sj2))+(((-1.0)*cj1*x12096))+(((-1.0)*gconst11*r20*x12097))+((r21*x12098)));
evalcond[5]=(((r11*x12098))+((r12*x12095))+(((-1.0)*sj1*x12096))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12101=(gconst10*r01);
IkReal x12102=(gconst11*r00);
CheckValue<IkReal> x12103=IKPowWithIntegerCheck(IKsign(((x12101*x12101)+(((-2.0)*x12101*x12102))+(x12102*x12102)+(r02*r02))),-1);
if(!x12103.valid){
continue;
}
CheckValue<IkReal> x12104 = IKatan2WithCheck(IkReal((x12101+(((-1.0)*x12102)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12103.value)))+(x12104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12105=IKcos(j4);
IkReal x12106=IKsin(j4);
IkReal x12107=((1.0)*cj2);
IkReal x12108=((1.0)*x12105);
IkReal x12109=(gconst10*x12105);
IkReal x12110=(gconst10*x12106);
IkReal x12111=((1.0)*gconst11*x12106);
evalcond[0]=(((r02*x12106))+((r01*x12109))+(((-1.0)*gconst11*r00*x12108)));
evalcond[1]=((((-1.0)*r22*x12108))+(((-1.0)*r20*x12111))+((r21*x12110)));
evalcond[2]=((((-1.0)*r12*x12108))+(((-1.0)*r10*x12111))+((r11*x12110)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12111))+((r01*x12110))+(((-1.0)*r02*x12108)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x12107))+(((-1.0)*gconst11*r20*x12108))+((r22*x12106))+((r21*x12109)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12107))+((r12*x12106))+((r11*x12109))+(((-1.0)*gconst11*r10*x12108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12112 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12112.valid){
continue;
}
CheckValue<IkReal> x12113=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12112.value)+(((1.5707963267949)*(x12113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12114=IKcos(j4);
IkReal x12115=IKsin(j4);
IkReal x12116=((1.0)*cj2);
IkReal x12117=((1.0)*x12114);
IkReal x12118=(gconst10*x12114);
IkReal x12119=(gconst10*x12115);
IkReal x12120=((1.0)*gconst11*x12115);
evalcond[0]=(((r02*x12115))+((r01*x12118))+(((-1.0)*gconst11*r00*x12117)));
evalcond[1]=((((-1.0)*r20*x12120))+(((-1.0)*r22*x12117))+((r21*x12119)));
evalcond[2]=((((-1.0)*r12*x12117))+(((-1.0)*r10*x12120))+((r11*x12119)));
evalcond[3]=((-1.0)+((r01*x12119))+(((-1.0)*r02*x12117))+(((-1.0)*r00*x12120)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*gconst11*r20*x12117))+(((-1.0)*cj1*x12116))+((r21*x12118))+((r22*x12115)));
evalcond[5]=((((-1.0)*gconst11*r10*x12117))+(((-1.0)*sj1*x12116))+(((-1.0)*cj1*sj2))+((r12*x12115))+((r11*x12118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12121=((-1.0)*r11);
CheckValue<IkReal> x12124 = IKatan2WithCheck(IkReal(x12121),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12124.valid){
continue;
}
IkReal x12122=((1.0)*(x12124.value));
IkReal x12123=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12122)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12122)));
IkReal gconst10=(x12121*x12123);
IkReal gconst11=((1.0)*r10*x12123);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12125=((-1.0)*r11);
CheckValue<IkReal> x12128 = IKatan2WithCheck(IkReal(x12125),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12128.valid){
continue;
}
IkReal x12126=((1.0)*(x12128.value));
IkReal x12127=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12126)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12126)));
IkReal gconst10=(x12125*x12127);
IkReal gconst11=((1.0)*r10*x12127);
IkReal x12129=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12133=IKPowWithIntegerCheck(x12129,-1);
if(!x12133.valid){
continue;
}
IkReal x12130=x12133.value;
IkReal x12131=((1.0)*x12130);
IkReal x12132=((((-1.0)*(r02*r02)))+(((-1.0)*x12131*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x12130))+(((-1.0)*x12131*(r00*r00)*(r10*r10))));
j4eval[0]=x12132;
j4eval[1]=r02;
j4eval[2]=x12129;
j4eval[3]=IKsign(x12132);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12134=((-1.0)*r11);
CheckValue<IkReal> x12137 = IKatan2WithCheck(IkReal(x12134),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12137.valid){
continue;
}
IkReal x12135=((1.0)*(x12137.value));
IkReal x12136=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12135)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12135)));
IkReal gconst10=(x12134*x12136);
IkReal gconst11=((1.0)*r10*x12136);
IkReal x12138=r12*r12;
IkReal x12139=((1.0)*r02);
IkReal x12140=(cj1*sj2);
IkReal x12141=(cj2*sj1);
CheckValue<IkReal> x12145=IKPowWithIntegerCheck(((-1.0)+x12138),-1);
if(!x12145.valid){
continue;
}
IkReal x12142=x12145.value;
if((((1.0)+(((-1.0)*x12138)))) < -0.00001)
continue;
IkReal x12143=IKsqrt(((1.0)+(((-1.0)*x12138))));
IkReal x12144=(r12*x12142*x12143);
j4eval[0]=((IKabs(((((-1.0)*x12139*x12141))+(((-1.0)*x12139*x12140)))))+(IKabs(((((-1.0)*x12139*x12141*x12144))+(((-1.0)*x12139*x12140*x12144))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12146=(cj1*sj2);
IkReal x12147=(gconst10*r01);
IkReal x12148=(cj2*sj1);
IkReal x12149=((1.0)*r02);
IkReal x12150=((1.0)*gconst11*r00);
CheckValue<IkReal> x12151=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12151.valid){
continue;
}
CheckValue<IkReal> x12152 = IKatan2WithCheck(IkReal((((x12146*x12147))+((x12147*x12148))+(((-1.0)*x12148*x12150))+(((-1.0)*x12146*x12150)))),IkReal(((((-1.0)*x12148*x12149))+(((-1.0)*x12146*x12149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12151.value)))+(x12152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12153=IKcos(j4);
IkReal x12154=IKsin(j4);
IkReal x12155=((1.0)*x12153);
IkReal x12156=(gconst10*x12153);
IkReal x12157=(gconst10*x12154);
IkReal x12158=((1.0)*gconst11*x12154);
evalcond[0]=(((r02*x12154))+((r01*x12156))+(((-1.0)*gconst11*r00*x12155)));
evalcond[1]=((((-1.0)*r22*x12155))+((r21*x12157))+(((-1.0)*r20*x12158)));
evalcond[2]=((((-1.0)*r12*x12155))+((r11*x12157))+(((-1.0)*r10*x12158)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12155))+(((-1.0)*r00*x12158))+((r01*x12157)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12155))+((cj1*sj2))+((r12*x12154))+((r11*x12156)));
evalcond[5]=((((-1.0)*gconst11*r20*x12155))+((r22*x12154))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12159=(gconst10*r01);
IkReal x12160=(gconst11*r00);
CheckValue<IkReal> x12161 = IKatan2WithCheck(IkReal(((((-1.0)*x12160))+x12159)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12161.valid){
continue;
}
CheckValue<IkReal> x12162=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x12160*x12160)))+(((2.0)*x12159*x12160))+(((-1.0)*(x12159*x12159))))),-1);
if(!x12162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12161.value)+(((1.5707963267949)*(x12162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12163=IKcos(j4);
IkReal x12164=IKsin(j4);
IkReal x12165=((1.0)*x12163);
IkReal x12166=(gconst10*x12163);
IkReal x12167=(gconst10*x12164);
IkReal x12168=((1.0)*gconst11*x12164);
evalcond[0]=((((-1.0)*gconst11*r00*x12165))+((r02*x12164))+((r01*x12166)));
evalcond[1]=(((r21*x12167))+(((-1.0)*r22*x12165))+(((-1.0)*r20*x12168)));
evalcond[2]=((((-1.0)*r10*x12168))+((r11*x12167))+(((-1.0)*r12*x12165)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12168))+((r01*x12167))+(((-1.0)*r02*x12165)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12165))+((cj1*sj2))+((r11*x12166))+((r12*x12164)));
evalcond[5]=(((r21*x12166))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12165))+((r22*x12164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12169=((1.0)*gconst11);
CheckValue<IkReal> x12170 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12170.valid){
continue;
}
CheckValue<IkReal> x12171=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12169)))),-1);
if(!x12171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12170.value)+(((1.5707963267949)*(x12171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12172=IKcos(j4);
IkReal x12173=IKsin(j4);
IkReal x12174=((1.0)*x12172);
IkReal x12175=(gconst10*x12172);
IkReal x12176=(gconst10*x12173);
IkReal x12177=((1.0)*gconst11*x12173);
evalcond[0]=((((-1.0)*gconst11*r00*x12174))+((r01*x12175))+((r02*x12173)));
evalcond[1]=(((r21*x12176))+(((-1.0)*r22*x12174))+(((-1.0)*r20*x12177)));
evalcond[2]=((((-1.0)*r10*x12177))+((r11*x12176))+(((-1.0)*r12*x12174)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12177))+((r01*x12176))+(((-1.0)*r02*x12174)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12174))+((cj1*sj2))+((r11*x12175))+((r12*x12173)));
evalcond[5]=(((r21*x12175))+(((-1.0)*gconst11*r20*x12174))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12178=((-1.0)*r11);
IkReal x12179=((-1.0)*r10);
CheckValue<IkReal> x12181 = IKatan2WithCheck(IkReal(x12178),IkReal(x12179),IKFAST_ATAN2_MAGTHRESH);
if(!x12181.valid){
continue;
}
IkReal x12180=((1.0)*(x12181.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12180)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12179);
rxp1_1=(px*r21);
rxp1_2=(px*x12178);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12180)));
IkReal gconst10=x12178;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12182=((-1.0)*r11);
IkReal x12183=((-1.0)*r10);
CheckValue<IkReal> x12185 = IKatan2WithCheck(IkReal(x12182),IkReal(x12183),IKFAST_ATAN2_MAGTHRESH);
if(!x12185.valid){
continue;
}
IkReal x12184=((1.0)*(x12185.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12184)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12183);
rxp1_1=(px*r21);
rxp1_2=(px*x12182);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12184)));
IkReal gconst10=x12182;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12186=((-1.0)*r11);
IkReal x12187=((-1.0)*r10);
CheckValue<IkReal> x12189 = IKatan2WithCheck(IkReal(x12186),IkReal(x12187),IKFAST_ATAN2_MAGTHRESH);
if(!x12189.valid){
continue;
}
IkReal x12188=((1.0)*(x12189.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12188)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12187);
rxp1_1=(px*r21);
rxp1_2=(px*x12186);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12188)));
IkReal gconst10=x12186;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12192=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12192.valid){
continue;
}
IkReal x12190=x12192.value;
IkReal x12191=(sj0*x12190);
cj4array[0]=(((cj2*sj1*x12191))+((cj1*sj2*x12191)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12193=IKsin(j4);
IkReal x12194=IKcos(j4);
IkReal x12195=(gconst10*r21);
IkReal x12196=((1.0)*x12194);
IkReal x12197=((1.0)*gconst11*x12193);
evalcond[0]=(r02*x12193);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12196)));
evalcond[2]=((((-1.0)*r20*x12197))+((x12193*x12195)));
evalcond[3]=(((gconst10*r11*x12193))+(((-1.0)*r10*x12197)));
evalcond[4]=(((x12194*x12195))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12199=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12199.valid){
continue;
}
IkReal x12198=x12199.value;
cj4array[0]=(((cj1*cj2*x12198))+(((-1.0)*sj1*sj2*x12198)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12200=IKsin(j4);
IkReal x12201=IKcos(j4);
IkReal x12202=((1.0)*sj0);
IkReal x12203=(gconst10*x12200);
IkReal x12204=((1.0)*x12201);
IkReal x12205=((1.0)*gconst11*x12200);
evalcond[0]=(r02*x12200);
evalcond[1]=((((-1.0)*r02*x12204))+(((-1.0)*x12202)));
evalcond[2]=(((r21*x12203))+(((-1.0)*r20*x12205)));
evalcond[3]=((((-1.0)*r10*x12205))+((r11*x12203)));
evalcond[4]=((((-1.0)*gconst11*r10*x12204))+(((-1.0)*cj2*sj1*x12202))+(((-1.0)*cj1*sj2*x12202))+((gconst10*r11*x12201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12206=IKPowWithIntegerCheck(r02,-1);
if(!x12206.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12206.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12207=IKsin(j4);
IkReal x12208=IKcos(j4);
IkReal x12209=(gconst10*r21);
IkReal x12210=((1.0)*cj1);
IkReal x12211=(gconst10*r11);
IkReal x12212=((1.0)*gconst11*x12207);
IkReal x12213=((1.0)*gconst11*x12208);
evalcond[0]=(r02*x12207);
evalcond[1]=(((x12207*x12209))+(((-1.0)*r20*x12212)));
evalcond[2]=(((x12207*x12211))+(((-1.0)*r10*x12212)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x12210))+((x12208*x12209))+(((-1.0)*r20*x12213)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x12210))+((x12208*x12211))+(((-1.0)*r10*x12213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12214=((1.0)*gconst11);
CheckValue<IkReal> x12215 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12214))+(((-1.0)*r10*sj0*x12214))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12215.valid){
continue;
}
CheckValue<IkReal> x12216=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12215.value)+(((1.5707963267949)*(x12216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12217=IKsin(j4);
IkReal x12218=IKcos(j4);
IkReal x12219=((1.0)*gconst11);
IkReal x12220=((1.0)*cj2);
IkReal x12221=((1.0)*sj0);
IkReal x12222=(cj1*sj2);
IkReal x12223=(gconst10*x12218);
IkReal x12224=(gconst10*x12217);
IkReal x12225=((1.0)*x12218);
evalcond[0]=(((r21*x12224))+(((-1.0)*r20*x12217*x12219)));
evalcond[1]=((((-1.0)*r10*x12217*x12219))+((r11*x12224))+cj0+(((-1.0)*r12*x12225)));
evalcond[2]=((((-1.0)*cj1*x12220))+((sj1*sj2))+((r21*x12223))+(((-1.0)*r20*x12218*x12219)));
evalcond[3]=((((-1.0)*x12221))+((r01*x12224))+(((-1.0)*r00*x12217*x12219))+(((-1.0)*r02*x12225)));
evalcond[4]=(((r02*x12217))+((r01*x12223))+(((-1.0)*cj0*sj1*x12220))+(((-1.0)*r00*x12218*x12219))+(((-1.0)*cj0*x12222)));
evalcond[5]=(((r11*x12223))+((r12*x12217))+(((-1.0)*sj0*sj1*x12220))+(((-1.0)*r10*x12218*x12219))+(((-1.0)*x12221*x12222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12226=(gconst10*r21);
IkReal x12227=(gconst11*r20);
IkReal x12228=(sj1*sj2);
IkReal x12229=(cj1*cj2);
CheckValue<IkReal> x12230 = IKatan2WithCheck(IkReal((((r22*x12228))+(((-1.0)*r22*x12229)))),IkReal((((x12227*x12229))+((x12226*x12228))+(((-1.0)*x12226*x12229))+(((-1.0)*x12227*x12228)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12230.valid){
continue;
}
CheckValue<IkReal> x12231=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((-1.0)*(x12226*x12226)))+(((-1.0)*(x12227*x12227)))+(((2.0)*x12226*x12227)))),-1);
if(!x12231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12230.value)+(((1.5707963267949)*(x12231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12232=IKsin(j4);
IkReal x12233=IKcos(j4);
IkReal x12234=((1.0)*cj2);
IkReal x12235=((1.0)*sj0);
IkReal x12236=(cj1*sj2);
IkReal x12237=((1.0)*x12233);
IkReal x12238=(gconst10*x12233);
IkReal x12239=(gconst10*x12232);
IkReal x12240=((1.0)*gconst11*x12232);
evalcond[0]=((((-1.0)*r22*x12237))+(((-1.0)*r20*x12240))+((r21*x12239)));
evalcond[1]=((((-1.0)*r10*x12240))+(((-1.0)*r12*x12237))+cj0+((r11*x12239)));
evalcond[2]=(((r01*x12239))+(((-1.0)*r02*x12237))+(((-1.0)*x12235))+(((-1.0)*r00*x12240)));
evalcond[3]=((((-1.0)*gconst11*r20*x12237))+((sj1*sj2))+(((-1.0)*cj1*x12234))+((r22*x12232))+((r21*x12238)));
evalcond[4]=(((r01*x12238))+(((-1.0)*cj0*sj1*x12234))+(((-1.0)*cj0*x12236))+(((-1.0)*gconst11*r00*x12237))+((r02*x12232)));
evalcond[5]=(((r12*x12232))+(((-1.0)*gconst11*r10*x12237))+((r11*x12238))+(((-1.0)*x12235*x12236))+(((-1.0)*sj0*sj1*x12234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12241=((1.0)*sj0);
IkReal x12242=((1.0)*gconst10);
CheckValue<IkReal> x12243=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12242))+(((-1.0)*gconst11*r21)))),-1);
if(!x12243.valid){
continue;
}
CheckValue<IkReal> x12244 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12241))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12241))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12242))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12243.value)))+(x12244.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12245=IKsin(j4);
IkReal x12246=IKcos(j4);
IkReal x12247=((1.0)*cj2);
IkReal x12248=((1.0)*sj0);
IkReal x12249=(cj1*sj2);
IkReal x12250=((1.0)*x12246);
IkReal x12251=(gconst10*x12246);
IkReal x12252=(gconst10*x12245);
IkReal x12253=((1.0)*gconst11*x12245);
evalcond[0]=((((-1.0)*r20*x12253))+((r21*x12252))+(((-1.0)*r22*x12250)));
evalcond[1]=(cj0+(((-1.0)*r12*x12250))+((r11*x12252))+(((-1.0)*r10*x12253)));
evalcond[2]=(((r01*x12252))+(((-1.0)*r02*x12250))+(((-1.0)*x12248))+(((-1.0)*r00*x12253)));
evalcond[3]=((((-1.0)*gconst11*r20*x12250))+(((-1.0)*cj1*x12247))+((sj1*sj2))+((r21*x12251))+((r22*x12245)));
evalcond[4]=((((-1.0)*cj0*sj1*x12247))+(((-1.0)*gconst11*r00*x12250))+((r01*x12251))+((r02*x12245))+(((-1.0)*cj0*x12249)));
evalcond[5]=(((r11*x12251))+((r12*x12245))+(((-1.0)*x12248*x12249))+(((-1.0)*gconst11*r10*x12250))+(((-1.0)*sj0*sj1*x12247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12254=((1.0)*gconst11);
CheckValue<IkReal> x12255 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12254))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12255.valid){
continue;
}
CheckValue<IkReal> x12256=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12254)))),-1);
if(!x12256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12255.value)+(((1.5707963267949)*(x12256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12257=IKsin(j4);
IkReal x12258=IKcos(j4);
IkReal x12259=((1.0)*cj2);
IkReal x12260=((1.0)*sj0);
IkReal x12261=(cj1*sj2);
IkReal x12262=((1.0)*x12258);
IkReal x12263=(gconst10*x12258);
IkReal x12264=(gconst10*x12257);
IkReal x12265=((1.0)*gconst11*x12257);
evalcond[0]=((((-1.0)*r20*x12265))+((r21*x12264))+(((-1.0)*r22*x12262)));
evalcond[1]=((((-1.0)*r12*x12262))+cj0+((r11*x12264))+(((-1.0)*r10*x12265)));
evalcond[2]=(((r01*x12264))+(((-1.0)*r02*x12262))+(((-1.0)*r00*x12265))+(((-1.0)*x12260)));
evalcond[3]=(((r22*x12257))+(((-1.0)*gconst11*r20*x12262))+((sj1*sj2))+((r21*x12263))+(((-1.0)*cj1*x12259)));
evalcond[4]=((((-1.0)*gconst11*r00*x12262))+(((-1.0)*cj0*sj1*x12259))+((r01*x12263))+(((-1.0)*cj0*x12261))+((r02*x12257)));
evalcond[5]=(((r12*x12257))+((r11*x12263))+(((-1.0)*x12260*x12261))+(((-1.0)*gconst11*r10*x12262))+(((-1.0)*sj0*sj1*x12259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12266=((-1.0)*r11);
CheckValue<IkReal> x12269 = IKatan2WithCheck(IkReal(x12266),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12269.valid){
continue;
}
IkReal x12267=((1.0)*(x12269.value));
IkReal x12268=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12267)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12267)));
IkReal gconst10=(x12266*x12268);
IkReal gconst11=((1.0)*r10*x12268);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12270=gconst10*gconst10;
IkReal x12271=gconst11*gconst11;
IkReal x12272=(gconst10*r21);
IkReal x12273=(cj3*r00);
IkReal x12274=(r00*sj3);
IkReal x12275=((1.0)*gconst11);
IkReal x12276=(gconst10*r20);
IkReal x12277=(r01*sj3);
IkReal x12278=(cj3*gconst11*r01);
IkReal x12279=(r21*x12270);
IkReal x12280=(r20*x12271);
CheckValue<IkReal> x12281 = IKatan2WithCheck(IkReal((((gconst10*r22*x12273))+((r22*x12278)))),IkReal(((((-1.0)*x12273*x12275*x12276))+((x12272*x12278))+((x12273*x12279))+(((-1.0)*cj3*r01*x12280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12281.valid){
continue;
}
CheckValue<IkReal> x12282=IKPowWithIntegerCheck(IKsign((((x12277*x12279))+((x12274*x12280))+(((-1.0)*x12275*x12276*x12277))+((r02*r22*sj3))+(((-1.0)*x12272*x12274*x12275)))),-1);
if(!x12282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12281.value)+(((1.5707963267949)*(x12282.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12283=IKsin(j4);
IkReal x12284=IKcos(j4);
IkReal x12285=(sj1*sj2);
IkReal x12286=(gconst10*sj3);
IkReal x12287=(cj3*gconst10);
IkReal x12288=(gconst11*r20);
IkReal x12289=(gconst11*r21);
IkReal x12290=(gconst11*r00);
IkReal x12291=(cj3*gconst11);
IkReal x12292=(gconst11*r10);
IkReal x12293=((1.0)*cj1);
IkReal x12294=(cj2*sj1);
IkReal x12295=(gconst11*sj3);
IkReal x12296=(cj2*x12293);
IkReal x12297=((1.0)*x12284);
IkReal x12298=((1.0)*x12283);
IkReal x12299=(gconst10*x12283);
IkReal x12300=(cj3*x12283);
IkReal x12301=(sj3*x12284);
evalcond[0]=(((r21*x12299))+(((-1.0)*x12288*x12298))+(((-1.0)*r22*x12297)));
evalcond[1]=((((-1.0)*x12292*x12298))+((r11*x12299))+(((-1.0)*r12*x12297)));
evalcond[2]=((-1.0)+(((-1.0)*x12290*x12298))+((r01*x12299))+(((-1.0)*r02*x12297)));
evalcond[3]=((((-1.0)*cj3*x12290*x12297))+((r01*x12295))+((r00*x12286))+((r01*x12284*x12287))+((r02*x12300)));
evalcond[4]=(((x12290*x12301))+(((-1.0)*r02*sj3*x12298))+((r01*x12291))+((r00*x12287))+(((-1.0)*r01*x12286*x12297)));
evalcond[5]=(((cj1*sj2))+x12294+(((-1.0)*cj3*x12288*x12297))+((r21*x12284*x12287))+((r22*x12300))+((r20*x12286))+((sj3*x12289)));
evalcond[6]=((((-1.0)*r10*x12291*x12297))+((r11*x12284*x12287))+(((-1.0)*x12296))+x12285+((r11*x12295))+((r12*x12300))+((r10*x12286)));
evalcond[7]=((((-1.0)*r21*x12286*x12297))+(((-1.0)*r22*sj3*x12298))+(((-1.0)*x12296))+x12285+((x12288*x12301))+((r20*x12287))+((cj3*x12289)));
evalcond[8]=(((r11*x12291))+(((-1.0)*sj2*x12293))+((x12292*x12301))+(((-1.0)*x12294))+(((-1.0)*r12*sj3*x12298))+(((-1.0)*r11*x12286*x12297))+((r10*x12287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12302 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12302.valid){
continue;
}
CheckValue<IkReal> x12303=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12302.value)+(((1.5707963267949)*(x12303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12304=IKsin(j4);
IkReal x12305=IKcos(j4);
IkReal x12306=(sj1*sj2);
IkReal x12307=(gconst10*sj3);
IkReal x12308=(cj3*gconst10);
IkReal x12309=(gconst11*r20);
IkReal x12310=(gconst11*r21);
IkReal x12311=(gconst11*r00);
IkReal x12312=(cj3*gconst11);
IkReal x12313=(gconst11*r10);
IkReal x12314=((1.0)*cj1);
IkReal x12315=(cj2*sj1);
IkReal x12316=(gconst11*sj3);
IkReal x12317=(cj2*x12314);
IkReal x12318=((1.0)*x12305);
IkReal x12319=((1.0)*x12304);
IkReal x12320=(gconst10*x12304);
IkReal x12321=(cj3*x12304);
IkReal x12322=(sj3*x12305);
evalcond[0]=(((r21*x12320))+(((-1.0)*x12309*x12319))+(((-1.0)*r22*x12318)));
evalcond[1]=((((-1.0)*r12*x12318))+(((-1.0)*x12313*x12319))+((r11*x12320)));
evalcond[2]=((-1.0)+((r01*x12320))+(((-1.0)*x12311*x12319))+(((-1.0)*r02*x12318)));
evalcond[3]=((((-1.0)*cj3*x12311*x12318))+((r00*x12307))+((r01*x12305*x12308))+((r01*x12316))+((r02*x12321)));
evalcond[4]=(((x12311*x12322))+(((-1.0)*r02*sj3*x12319))+(((-1.0)*r01*x12307*x12318))+((r00*x12308))+((r01*x12312)));
evalcond[5]=(((sj3*x12310))+((cj1*sj2))+x12315+((r20*x12307))+((r21*x12305*x12308))+((r22*x12321))+(((-1.0)*cj3*x12309*x12318)));
evalcond[6]=(((r10*x12307))+((r11*x12316))+x12306+((r11*x12305*x12308))+((r12*x12321))+(((-1.0)*r10*x12312*x12318))+(((-1.0)*x12317)));
evalcond[7]=((((-1.0)*r21*x12307*x12318))+(((-1.0)*r22*sj3*x12319))+x12306+((r20*x12308))+(((-1.0)*x12317))+((x12309*x12322))+((cj3*x12310)));
evalcond[8]=((((-1.0)*sj2*x12314))+((r10*x12308))+(((-1.0)*r11*x12307*x12318))+((r11*x12312))+((x12313*x12322))+(((-1.0)*x12315))+(((-1.0)*r12*sj3*x12319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12323=((-1.0)*r11);
CheckValue<IkReal> x12326 = IKatan2WithCheck(IkReal(x12323),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12326.valid){
continue;
}
IkReal x12324=((1.0)*(x12326.value));
IkReal x12325=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12324)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12324)));
IkReal gconst10=(x12323*x12325);
IkReal gconst11=((1.0)*r10*x12325);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12327=gconst10*gconst10;
IkReal x12328=gconst11*gconst11;
IkReal x12329=(gconst10*r21);
IkReal x12330=(cj3*r00);
IkReal x12331=(r00*sj3);
IkReal x12332=((1.0)*gconst11);
IkReal x12333=(gconst10*r20);
IkReal x12334=(r01*sj3);
IkReal x12335=(cj3*gconst11*r01);
IkReal x12336=(r21*x12327);
IkReal x12337=(r20*x12328);
CheckValue<IkReal> x12338=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12329*x12331*x12332))+(((-1.0)*x12332*x12333*x12334))+((x12334*x12336))+((x12331*x12337))+((r02*r22*sj3)))),-1);
if(!x12338.valid){
continue;
}
CheckValue<IkReal> x12339 = IKatan2WithCheck(IkReal((((r22*x12335))+((gconst10*r22*x12330)))),IkReal((((x12330*x12336))+(((-1.0)*cj3*r01*x12337))+(((-1.0)*x12330*x12332*x12333))+((x12329*x12335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12338.value)))+(x12339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12340=IKsin(j4);
IkReal x12341=IKcos(j4);
IkReal x12342=(cj2*sj1);
IkReal x12343=(cj1*sj2);
IkReal x12344=(gconst10*sj3);
IkReal x12345=(cj3*gconst10);
IkReal x12346=(gconst11*r20);
IkReal x12347=(gconst11*r21);
IkReal x12348=(gconst11*r00);
IkReal x12349=(sj1*sj2);
IkReal x12350=(cj3*gconst11);
IkReal x12351=(gconst11*r10);
IkReal x12352=(cj1*cj2);
IkReal x12353=(gconst11*sj3);
IkReal x12354=((1.0)*x12341);
IkReal x12355=((1.0)*x12340);
IkReal x12356=(gconst10*x12340);
IkReal x12357=(cj3*x12340);
IkReal x12358=(sj3*x12341);
IkReal x12359=(x12343+x12342);
evalcond[0]=((((-1.0)*x12346*x12355))+((r21*x12356))+(((-1.0)*r22*x12354)));
evalcond[1]=((((-1.0)*x12351*x12355))+((r11*x12356))+(((-1.0)*r12*x12354)));
evalcond[2]=((1.0)+(((-1.0)*x12348*x12355))+(((-1.0)*r02*x12354))+((r01*x12356)));
evalcond[3]=(((r00*x12344))+((r01*x12353))+(((-1.0)*cj3*x12348*x12354))+((r02*x12357))+((r01*x12341*x12345)));
evalcond[4]=(((r00*x12345))+((r01*x12350))+(((-1.0)*r01*x12344*x12354))+((x12348*x12358))+(((-1.0)*r02*sj3*x12355)));
evalcond[5]=(((r20*x12344))+x12359+((sj3*x12347))+((r22*x12357))+((r21*x12341*x12345))+(((-1.0)*cj3*x12346*x12354)));
evalcond[6]=(x12352+((r11*x12341*x12345))+(((-1.0)*r10*x12350*x12354))+((r11*x12353))+((r12*x12357))+((r10*x12344))+(((-1.0)*x12349)));
evalcond[7]=(((x12351*x12358))+x12359+((r11*x12350))+((r10*x12345))+(((-1.0)*r11*x12344*x12354))+(((-1.0)*r12*sj3*x12355)));
evalcond[8]=((((-1.0)*x12352))+((r20*x12345))+(((-1.0)*r21*x12344*x12354))+x12349+((cj3*x12347))+((x12346*x12358))+(((-1.0)*r22*sj3*x12355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12360=((1.0)*gconst11);
CheckValue<IkReal> x12361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12360))+(((-1.0)*gconst10*r20)))),-1);
if(!x12361.valid){
continue;
}
CheckValue<IkReal> x12362 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12361.value)))+(x12362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12363=IKsin(j4);
IkReal x12364=IKcos(j4);
IkReal x12365=(cj2*sj1);
IkReal x12366=(cj1*sj2);
IkReal x12367=(gconst10*sj3);
IkReal x12368=(cj3*gconst10);
IkReal x12369=(gconst11*r20);
IkReal x12370=(gconst11*r21);
IkReal x12371=(gconst11*r00);
IkReal x12372=(sj1*sj2);
IkReal x12373=(cj3*gconst11);
IkReal x12374=(gconst11*r10);
IkReal x12375=(cj1*cj2);
IkReal x12376=(gconst11*sj3);
IkReal x12377=((1.0)*x12364);
IkReal x12378=((1.0)*x12363);
IkReal x12379=(gconst10*x12363);
IkReal x12380=(cj3*x12363);
IkReal x12381=(sj3*x12364);
IkReal x12382=(x12365+x12366);
evalcond[0]=((((-1.0)*r22*x12377))+(((-1.0)*x12369*x12378))+((r21*x12379)));
evalcond[1]=(((r11*x12379))+(((-1.0)*r12*x12377))+(((-1.0)*x12374*x12378)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12377))+(((-1.0)*x12371*x12378))+((r01*x12379)));
evalcond[3]=(((r02*x12380))+((r01*x12364*x12368))+(((-1.0)*cj3*x12371*x12377))+((r00*x12367))+((r01*x12376)));
evalcond[4]=(((x12371*x12381))+(((-1.0)*r02*sj3*x12378))+(((-1.0)*r01*x12367*x12377))+((r00*x12368))+((r01*x12373)));
evalcond[5]=(((r21*x12364*x12368))+(((-1.0)*cj3*x12369*x12377))+x12382+((sj3*x12370))+((r22*x12380))+((r20*x12367)));
evalcond[6]=(((r12*x12380))+((r11*x12376))+((r10*x12367))+x12375+((r11*x12364*x12368))+(((-1.0)*r10*x12373*x12377))+(((-1.0)*x12372)));
evalcond[7]=((((-1.0)*r12*sj3*x12378))+((r11*x12373))+((r10*x12368))+x12382+(((-1.0)*r11*x12367*x12377))+((x12374*x12381)));
evalcond[8]=(((x12369*x12381))+x12372+(((-1.0)*r21*x12367*x12377))+((cj3*x12370))+(((-1.0)*r22*sj3*x12378))+(((-1.0)*x12375))+((r20*x12368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12383=((-1.0)*r11);
IkReal x12384=((-1.0)*r10);
CheckValue<IkReal> x12386 = IKatan2WithCheck(IkReal(x12383),IkReal(x12384),IKFAST_ATAN2_MAGTHRESH);
if(!x12386.valid){
continue;
}
IkReal x12385=((1.0)*(x12386.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12385)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12384);
rxp1_1=(px*r21);
rxp1_2=(px*x12383);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12385)));
IkReal gconst10=x12383;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12387=((-1.0)*r11);
IkReal x12388=((-1.0)*r10);
CheckValue<IkReal> x12390 = IKatan2WithCheck(IkReal(x12387),IkReal(x12388),IKFAST_ATAN2_MAGTHRESH);
if(!x12390.valid){
continue;
}
IkReal x12389=((1.0)*(x12390.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12389)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12388);
rxp1_1=(px*r21);
rxp1_2=(px*x12387);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12389)));
IkReal gconst10=x12387;
IkReal gconst11=((1.0)*r10);
IkReal x12391=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r10*r20*x12391))+(((-1.0)*r11*r21*x12391)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12392=((-1.0)*r11);
IkReal x12393=((-1.0)*r10);
CheckValue<IkReal> x12395 = IKatan2WithCheck(IkReal(x12392),IkReal(x12393),IKFAST_ATAN2_MAGTHRESH);
if(!x12395.valid){
continue;
}
IkReal x12394=((1.0)*(x12395.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12394)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12393);
rxp1_1=(px*r21);
rxp1_2=(px*x12392);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12394)));
IkReal gconst10=x12392;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12397=IKPowWithIntegerCheck(r02,-1);
if(!x12397.valid){
continue;
}
IkReal x12396=x12397.value;
CheckValue<IkReal> x12398=IKPowWithIntegerCheck(cj3,-1);
if(!x12398.valid){
continue;
}
if( IKabs((x12396*(x12398.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12396)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12396*(x12398.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12396))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12396*(x12398.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12396));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12399=IKsin(j4);
IkReal x12400=IKcos(j4);
IkReal x12401=(cj3*r10);
IkReal x12402=((1.0)*gconst11);
IkReal x12403=(sj1*sj2);
IkReal x12404=(gconst11*sj3);
IkReal x12405=(cj3*r11);
IkReal x12406=(cj2*sj1);
IkReal x12407=(gconst10*r20);
IkReal x12408=(gconst10*sj3);
IkReal x12409=((1.0)*cj0);
IkReal x12410=((1.0)*sj0);
IkReal x12411=(cj1*sj2);
IkReal x12412=(cj3*r21);
IkReal x12413=((1.0)*cj1*cj2);
IkReal x12414=(r20*x12400);
IkReal x12415=(gconst10*x12399);
IkReal x12416=(gconst10*x12400);
IkReal x12417=(r02*x12399);
IkReal x12418=((1.0)*x12400);
evalcond[0]=((((-1.0)*r02*x12418))+(((-1.0)*x12410)));
evalcond[1]=(((r21*x12415))+(((-1.0)*r20*x12399*x12402)));
evalcond[2]=(cj0+((r11*x12415))+(((-1.0)*r10*x12399*x12402)));
evalcond[3]=(((cj3*x12417))+(((-1.0)*cj1*cj2*x12409))+((cj0*x12403)));
evalcond[4]=((((-1.0)*sj3*x12417))+(((-1.0)*x12409*x12411))+(((-1.0)*x12406*x12409)));
evalcond[5]=((((-1.0)*cj3*x12402*x12414))+((sj3*x12407))+((r21*x12404))+x12406+x12411+((x12412*x12416)));
evalcond[6]=(((gconst11*x12412))+((x12404*x12414))+(((-1.0)*r21*x12408*x12418))+(((-1.0)*x12413))+((cj3*x12407))+x12403);
evalcond[7]=((((-1.0)*cj1*cj2*x12410))+(((-1.0)*x12400*x12401*x12402))+((x12405*x12416))+((sj0*x12403))+((r10*x12408))+((r11*x12404)));
evalcond[8]=(((r10*x12400*x12404))+(((-1.0)*x12406*x12410))+(((-1.0)*x12410*x12411))+((gconst10*x12401))+(((-1.0)*r11*x12408*x12418))+((gconst11*x12405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12419=((1.0)*r20);
IkReal x12420=((1.0)*gconst11);
CheckValue<IkReal> x12421=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12420))),-1);
if(!x12421.valid){
continue;
}
CheckValue<IkReal> x12422=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12419))+((cj3*gconst10*r21))),-1);
if(!x12422.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12421.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12422.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12420))+(((-1.0)*gconst10*sj3*x12419)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12421.value)))+IKsqr(((x12422.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12420))+(((-1.0)*gconst10*sj3*x12419))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12421.value)), ((x12422.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12420))+(((-1.0)*gconst10*sj3*x12419))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12423=IKsin(j4);
IkReal x12424=IKcos(j4);
IkReal x12425=(cj3*r10);
IkReal x12426=((1.0)*gconst11);
IkReal x12427=(sj1*sj2);
IkReal x12428=(gconst11*sj3);
IkReal x12429=(cj3*r11);
IkReal x12430=(cj2*sj1);
IkReal x12431=(gconst10*r20);
IkReal x12432=(gconst10*sj3);
IkReal x12433=((1.0)*cj0);
IkReal x12434=((1.0)*sj0);
IkReal x12435=(cj1*sj2);
IkReal x12436=(cj3*r21);
IkReal x12437=((1.0)*cj1*cj2);
IkReal x12438=(r20*x12424);
IkReal x12439=(gconst10*x12423);
IkReal x12440=(gconst10*x12424);
IkReal x12441=(r02*x12423);
IkReal x12442=((1.0)*x12424);
evalcond[0]=((((-1.0)*r02*x12442))+(((-1.0)*x12434)));
evalcond[1]=(((r21*x12439))+(((-1.0)*r20*x12423*x12426)));
evalcond[2]=(cj0+(((-1.0)*r10*x12423*x12426))+((r11*x12439)));
evalcond[3]=(((cj3*x12441))+(((-1.0)*cj1*cj2*x12433))+((cj0*x12427)));
evalcond[4]=((((-1.0)*x12430*x12433))+(((-1.0)*x12433*x12435))+(((-1.0)*sj3*x12441)));
evalcond[5]=(((r21*x12428))+(((-1.0)*cj3*x12426*x12438))+x12435+x12430+((x12436*x12440))+((sj3*x12431)));
evalcond[6]=(((x12428*x12438))+((cj3*x12431))+(((-1.0)*x12437))+((gconst11*x12436))+x12427+(((-1.0)*r21*x12432*x12442)));
evalcond[7]=(((sj0*x12427))+((x12429*x12440))+((r10*x12432))+(((-1.0)*cj1*cj2*x12434))+((r11*x12428))+(((-1.0)*x12424*x12425*x12426)));
evalcond[8]=((((-1.0)*r11*x12432*x12442))+(((-1.0)*x12430*x12434))+((gconst10*x12425))+(((-1.0)*x12434*x12435))+((r10*x12424*x12428))+((gconst11*x12429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12443=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12443.valid){
continue;
}
CheckValue<IkReal> x12444=IKPowWithIntegerCheck(r02,-1);
if(!x12444.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12443.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12444.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12443.value)))+IKsqr(((-1.0)*sj0*(x12444.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12443.value)), ((-1.0)*sj0*(x12444.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12445=IKsin(j4);
IkReal x12446=IKcos(j4);
IkReal x12447=(cj3*r10);
IkReal x12448=((1.0)*gconst11);
IkReal x12449=(sj1*sj2);
IkReal x12450=(gconst11*sj3);
IkReal x12451=(cj3*r11);
IkReal x12452=(cj2*sj1);
IkReal x12453=(gconst10*r20);
IkReal x12454=(gconst10*sj3);
IkReal x12455=((1.0)*cj0);
IkReal x12456=((1.0)*sj0);
IkReal x12457=(cj1*sj2);
IkReal x12458=(cj3*r21);
IkReal x12459=((1.0)*cj1*cj2);
IkReal x12460=(r20*x12446);
IkReal x12461=(gconst10*x12445);
IkReal x12462=(gconst10*x12446);
IkReal x12463=(r02*x12445);
IkReal x12464=((1.0)*x12446);
evalcond[0]=((((-1.0)*r02*x12464))+(((-1.0)*x12456)));
evalcond[1]=((((-1.0)*r20*x12445*x12448))+((r21*x12461)));
evalcond[2]=(cj0+(((-1.0)*r10*x12445*x12448))+((r11*x12461)));
evalcond[3]=(((cj0*x12449))+((cj3*x12463))+(((-1.0)*cj1*cj2*x12455)));
evalcond[4]=((((-1.0)*sj3*x12463))+(((-1.0)*x12452*x12455))+(((-1.0)*x12455*x12457)));
evalcond[5]=(((sj3*x12453))+(((-1.0)*cj3*x12448*x12460))+((x12458*x12462))+x12457+x12452+((r21*x12450)));
evalcond[6]=((((-1.0)*r21*x12454*x12464))+((x12450*x12460))+((cj3*x12453))+(((-1.0)*x12459))+x12449+((gconst11*x12458)));
evalcond[7]=(((sj0*x12449))+((x12451*x12462))+((r11*x12450))+(((-1.0)*cj1*cj2*x12456))+(((-1.0)*x12446*x12447*x12448))+((r10*x12454)));
evalcond[8]=(((gconst10*x12447))+((r10*x12446*x12450))+(((-1.0)*r11*x12454*x12464))+(((-1.0)*x12452*x12456))+(((-1.0)*x12456*x12457))+((gconst11*x12451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12465=((-1.0)*r11);
CheckValue<IkReal> x12468 = IKatan2WithCheck(IkReal(x12465),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12468.valid){
continue;
}
IkReal x12466=((1.0)*(x12468.value));
IkReal x12467=x11791;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12466)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12466)));
IkReal gconst10=(x12465*x12467);
IkReal gconst11=((1.0)*r10*x12467);
IkReal x12469=r12*r12;
IkReal x12470=((1.0)*sj0);
IkReal x12471=(cj0*r02);
IkReal x12472=x11791;
j4eval[0]=((IKabs(((((-1.0)*x12471))+(((-1.0)*r12*x12470)))))+(IKabs((((sj0*x12469*x12472))+(((-1.0)*x12470*x12472))+((r12*x12471*x12472))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12473=((1.0)*r12);
IkReal x12474=(sj1*sj2);
IkReal x12475=((1.0)*r21);
IkReal x12476=(cj3*gconst11);
IkReal x12477=(r11*sj3);
IkReal x12478=(gconst11*r20);
IkReal x12479=((1.0)*sj3);
IkReal x12480=(cj1*cj2);
IkReal x12481=(gconst10*r21*sj3);
IkReal x12482=(cj3*gconst10*r20);
CheckValue<IkReal> x12483=IKPowWithIntegerCheck(((((-1.0)*gconst11*r10*x12478*x12479))+((gconst10*x12477*x12478))+((gconst11*r10*x12481))+(((-1.0)*x12475*x12477*(gconst10*gconst10)))),-1);
if(!x12483.valid){
continue;
}
CheckValue<IkReal> x12484=IKPowWithIntegerCheck((((sj3*x12478))+(((-1.0)*gconst10*sj3*x12475))),-1);
if(!x12484.valid){
continue;
}
if( IKabs(((x12483.value)*((((cj0*x12481))+(((-1.0)*cj0*x12478*x12479))+((r12*x12480))+(((-1.0)*x12473*x12482))+(((-1.0)*r21*x12473*x12476))+(((-1.0)*x12473*x12474)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12484.value)*(((((-1.0)*x12474))+(((-1.0)*x12475*x12476))+(((-1.0)*x12482))+x12480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12483.value)*((((cj0*x12481))+(((-1.0)*cj0*x12478*x12479))+((r12*x12480))+(((-1.0)*x12473*x12482))+(((-1.0)*r21*x12473*x12476))+(((-1.0)*x12473*x12474))))))+IKsqr(((x12484.value)*(((((-1.0)*x12474))+(((-1.0)*x12475*x12476))+(((-1.0)*x12482))+x12480))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12483.value)*((((cj0*x12481))+(((-1.0)*cj0*x12478*x12479))+((r12*x12480))+(((-1.0)*x12473*x12482))+(((-1.0)*r21*x12473*x12476))+(((-1.0)*x12473*x12474))))), ((x12484.value)*(((((-1.0)*x12474))+(((-1.0)*x12475*x12476))+(((-1.0)*x12482))+x12480))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12485=IKsin(j4);
IkReal x12486=IKcos(j4);
IkReal x12487=(cj3*r10);
IkReal x12488=(gconst11*r20);
IkReal x12489=(gconst11*sj3);
IkReal x12490=(sj1*sj2);
IkReal x12491=(cj3*r11);
IkReal x12492=(r10*sj3);
IkReal x12493=(gconst10*r01);
IkReal x12494=(gconst10*sj3);
IkReal x12495=(cj2*sj1);
IkReal x12496=((1.0)*sj0);
IkReal x12497=(cj1*sj2);
IkReal x12498=(gconst10*r21);
IkReal x12499=(cj3*gconst10);
IkReal x12500=(cj3*gconst11);
IkReal x12501=((1.0)*cj0);
IkReal x12502=((1.0)*x12485);
IkReal x12503=((1.0)*cj1*cj2);
IkReal x12504=(gconst11*x12486);
IkReal x12505=(sj3*x12486);
IkReal x12506=(gconst10*x12485);
IkReal x12507=((1.0)*x12486);
IkReal x12508=(cj3*x12486);
IkReal x12509=(cj3*x12485);
evalcond[0]=(((x12485*x12498))+(((-1.0)*x12488*x12502)));
evalcond[1]=(((r11*x12506))+cj0+(((-1.0)*r12*x12507))+(((-1.0)*gconst11*r10*x12502)));
evalcond[2]=((((-1.0)*gconst11*r00*x12502))+(((-1.0)*r02*x12507))+(((-1.0)*x12496))+((x12485*x12493)));
evalcond[3]=(((r20*x12494))+((x12498*x12508))+(((-1.0)*cj3*x12488*x12507))+x12497+x12495+((r21*x12489)));
evalcond[4]=((((-1.0)*x12503))+(((-1.0)*r21*x12494*x12507))+((r20*x12499))+((r21*x12500))+x12490+((x12488*x12505)));
evalcond[5]=(((r00*x12494))+((x12493*x12508))+(((-1.0)*cj1*cj2*x12501))+((r01*x12489))+(((-1.0)*r00*x12500*x12507))+((cj0*x12490))+((r02*x12509)));
evalcond[6]=(((gconst10*x12486*x12491))+((sj0*x12490))+(((-1.0)*x12487*x12504))+((r11*x12489))+((gconst10*x12492))+(((-1.0)*cj1*cj2*x12496))+((r12*x12509)));
evalcond[7]=(((r00*x12499))+(((-1.0)*r02*sj3*x12502))+((r01*x12500))+(((-1.0)*x12495*x12501))+((r00*x12486*x12489))+(((-1.0)*x12497*x12501))+(((-1.0)*x12493*x12505)));
evalcond[8]=((((-1.0)*r11*x12494*x12507))+((gconst10*x12487))+((r10*x12486*x12489))+((gconst11*x12491))+(((-1.0)*r12*sj3*x12502))+(((-1.0)*x12496*x12497))+(((-1.0)*x12495*x12496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12510=((1.0)*sj0);
IkReal x12511=((1.0)*gconst10);
CheckValue<IkReal> x12512=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12511)))),-1);
if(!x12512.valid){
continue;
}
CheckValue<IkReal> x12513 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12510))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12511))+(((-1.0)*gconst10*r11*x12510))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12512.value)))+(x12513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12514=IKsin(j4);
IkReal x12515=IKcos(j4);
IkReal x12516=(cj3*r10);
IkReal x12517=(gconst11*r20);
IkReal x12518=(gconst11*sj3);
IkReal x12519=(sj1*sj2);
IkReal x12520=(cj3*r11);
IkReal x12521=(r10*sj3);
IkReal x12522=(gconst10*r01);
IkReal x12523=(gconst10*sj3);
IkReal x12524=(cj2*sj1);
IkReal x12525=((1.0)*sj0);
IkReal x12526=(cj1*sj2);
IkReal x12527=(gconst10*r21);
IkReal x12528=(cj3*gconst10);
IkReal x12529=(cj3*gconst11);
IkReal x12530=((1.0)*cj0);
IkReal x12531=((1.0)*x12514);
IkReal x12532=((1.0)*cj1*cj2);
IkReal x12533=(gconst11*x12515);
IkReal x12534=(sj3*x12515);
IkReal x12535=(gconst10*x12514);
IkReal x12536=((1.0)*x12515);
IkReal x12537=(cj3*x12515);
IkReal x12538=(cj3*x12514);
evalcond[0]=((((-1.0)*x12517*x12531))+((x12514*x12527)));
evalcond[1]=(((r11*x12535))+cj0+(((-1.0)*gconst11*r10*x12531))+(((-1.0)*r12*x12536)));
evalcond[2]=((((-1.0)*x12525))+(((-1.0)*r02*x12536))+((x12514*x12522))+(((-1.0)*gconst11*r00*x12531)));
evalcond[3]=(((x12527*x12537))+((r20*x12523))+((r21*x12518))+x12526+x12524+(((-1.0)*cj3*x12517*x12536)));
evalcond[4]=((((-1.0)*r21*x12523*x12536))+((r21*x12529))+((x12517*x12534))+((r20*x12528))+x12519+(((-1.0)*x12532)));
evalcond[5]=((((-1.0)*r00*x12529*x12536))+(((-1.0)*cj1*cj2*x12530))+((r01*x12518))+((r02*x12538))+((x12522*x12537))+((r00*x12523))+((cj0*x12519)));
evalcond[6]=(((sj0*x12519))+((gconst10*x12515*x12520))+((gconst10*x12521))+((r12*x12538))+((r11*x12518))+(((-1.0)*x12516*x12533))+(((-1.0)*cj1*cj2*x12525)));
evalcond[7]=((((-1.0)*x12526*x12530))+(((-1.0)*x12524*x12530))+(((-1.0)*x12522*x12534))+((r01*x12529))+(((-1.0)*r02*sj3*x12531))+((r00*x12528))+((r00*x12515*x12518)));
evalcond[8]=(((r10*x12515*x12518))+((gconst11*x12520))+(((-1.0)*r11*x12523*x12536))+(((-1.0)*r12*sj3*x12531))+(((-1.0)*x12524*x12525))+(((-1.0)*x12525*x12526))+((gconst10*x12516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12539=gconst10*gconst10;
IkReal x12540=r21*r21;
IkReal x12541=gconst11*gconst11;
IkReal x12542=r20*r20;
IkReal x12543=((1.0)*cj3);
IkReal x12544=(r20*sj3);
IkReal x12545=(gconst10*gconst11);
IkReal x12546=(cj2*sj1);
IkReal x12547=(gconst10*r21);
IkReal x12548=(cj1*sj2);
IkReal x12549=((1.0)*gconst11*r20);
CheckValue<IkReal> x12550=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12539*x12540*x12543))+(((2.0)*cj3*r20*r21*x12545))+(((-1.0)*x12541*x12542*x12543))+(((-1.0)*x12543*(r22*r22))))),-1);
if(!x12550.valid){
continue;
}
CheckValue<IkReal> x12551 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((gconst10*r22*x12544))+((r22*x12548))+((r22*x12546)))),IkReal(((((-1.0)*x12548*x12549))+((x12547*x12548))+((x12546*x12547))+((sj3*x12540*x12545))+(((-1.0)*x12546*x12549))+(((-1.0)*r21*x12541*x12544))+(((-1.0)*sj3*x12542*x12545))+((r21*x12539*x12544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12550.value)))+(x12551.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12552=IKsin(j4);
IkReal x12553=IKcos(j4);
IkReal x12554=(cj3*r10);
IkReal x12555=(gconst11*r20);
IkReal x12556=(gconst11*sj3);
IkReal x12557=(sj1*sj2);
IkReal x12558=(gconst11*r00);
IkReal x12559=(cj3*r11);
IkReal x12560=(gconst10*sj3);
IkReal x12561=(cj2*sj1);
IkReal x12562=(cj3*r01);
IkReal x12563=((1.0)*sj0);
IkReal x12564=(cj1*sj2);
IkReal x12565=(cj3*r21);
IkReal x12566=(cj3*gconst10);
IkReal x12567=((1.0)*cj0);
IkReal x12568=((1.0)*x12553);
IkReal x12569=((1.0)*x12552);
IkReal x12570=((1.0)*cj1*cj2);
IkReal x12571=(cj3*x12552);
IkReal x12572=(gconst10*x12552);
IkReal x12573=(gconst10*x12553);
evalcond[0]=((((-1.0)*r22*x12568))+((r21*x12572))+(((-1.0)*x12555*x12569)));
evalcond[1]=((((-1.0)*gconst11*r10*x12569))+cj0+(((-1.0)*r12*x12568))+((r11*x12572)));
evalcond[2]=((((-1.0)*r02*x12568))+((r01*x12572))+(((-1.0)*x12558*x12569))+(((-1.0)*x12563)));
evalcond[3]=(((r22*x12571))+((r20*x12560))+((x12565*x12573))+((r21*x12556))+x12561+x12564+(((-1.0)*cj3*x12555*x12568)));
evalcond[4]=(((gconst11*x12565))+((r20*x12566))+(((-1.0)*r22*sj3*x12569))+(((-1.0)*x12570))+x12557+((sj3*x12553*x12555))+(((-1.0)*r21*x12560*x12568)));
evalcond[5]=(((r01*x12556))+((r02*x12571))+((r00*x12560))+(((-1.0)*cj3*x12558*x12568))+((cj0*x12557))+(((-1.0)*cj1*cj2*x12567))+((x12562*x12573)));
evalcond[6]=(((sj0*x12557))+((r11*x12556))+((r12*x12571))+((r10*x12560))+(((-1.0)*cj1*cj2*x12563))+(((-1.0)*gconst11*x12554*x12568))+((x12559*x12573)));
evalcond[7]=((((-1.0)*x12564*x12567))+((gconst11*x12562))+((r00*x12553*x12556))+(((-1.0)*x12561*x12567))+(((-1.0)*r02*sj3*x12569))+((r00*x12566))+(((-1.0)*r01*x12560*x12568)));
evalcond[8]=((((-1.0)*x12561*x12563))+((gconst10*x12554))+((r10*x12553*x12556))+(((-1.0)*x12563*x12564))+((gconst11*x12559))+(((-1.0)*r11*x12560*x12568))+(((-1.0)*r12*sj3*x12569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12574=((1.0)*sj0);
IkReal x12575=((1.0)*gconst10);
CheckValue<IkReal> x12576 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12574)))),IkReal(((((-1.0)*cj0*r01*x12575))+(((-1.0)*gconst10*r11*x12574))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12576.valid){
continue;
}
CheckValue<IkReal> x12577=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12575))+(((-1.0)*gconst11*r21)))),-1);
if(!x12577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12576.value)+(((1.5707963267949)*(x12577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12578=IKsin(j4);
IkReal x12579=IKcos(j4);
IkReal x12580=(cj3*r10);
IkReal x12581=(gconst11*r20);
IkReal x12582=(gconst11*sj3);
IkReal x12583=(sj1*sj2);
IkReal x12584=(gconst11*r00);
IkReal x12585=(cj3*r11);
IkReal x12586=(gconst10*sj3);
IkReal x12587=(cj2*sj1);
IkReal x12588=(cj3*r01);
IkReal x12589=((1.0)*sj0);
IkReal x12590=(cj1*sj2);
IkReal x12591=(cj3*r21);
IkReal x12592=(cj3*gconst10);
IkReal x12593=((1.0)*cj0);
IkReal x12594=((1.0)*x12579);
IkReal x12595=((1.0)*x12578);
IkReal x12596=((1.0)*cj1*cj2);
IkReal x12597=(cj3*x12578);
IkReal x12598=(gconst10*x12578);
IkReal x12599=(gconst10*x12579);
evalcond[0]=((((-1.0)*r22*x12594))+((r21*x12598))+(((-1.0)*x12581*x12595)));
evalcond[1]=(cj0+(((-1.0)*r12*x12594))+(((-1.0)*gconst11*r10*x12595))+((r11*x12598)));
evalcond[2]=(((r01*x12598))+(((-1.0)*r02*x12594))+(((-1.0)*x12584*x12595))+(((-1.0)*x12589)));
evalcond[3]=(((r20*x12586))+((r21*x12582))+(((-1.0)*cj3*x12581*x12594))+((r22*x12597))+((x12591*x12599))+x12587+x12590);
evalcond[4]=(((gconst11*x12591))+((sj3*x12579*x12581))+(((-1.0)*r21*x12586*x12594))+(((-1.0)*r22*sj3*x12595))+(((-1.0)*x12596))+x12583+((r20*x12592)));
evalcond[5]=(((r00*x12586))+((r01*x12582))+((cj0*x12583))+(((-1.0)*cj3*x12584*x12594))+((r02*x12597))+(((-1.0)*cj1*cj2*x12593))+((x12588*x12599)));
evalcond[6]=(((r12*x12597))+((sj0*x12583))+((x12585*x12599))+(((-1.0)*gconst11*x12580*x12594))+(((-1.0)*cj1*cj2*x12589))+((r11*x12582))+((r10*x12586)));
evalcond[7]=(((gconst11*x12588))+(((-1.0)*x12590*x12593))+((r00*x12592))+(((-1.0)*x12587*x12593))+((r00*x12579*x12582))+(((-1.0)*r01*x12586*x12594))+(((-1.0)*r02*sj3*x12595)));
evalcond[8]=(((gconst11*x12585))+(((-1.0)*x12589*x12590))+(((-1.0)*r11*x12586*x12594))+(((-1.0)*x12587*x12589))+((r10*x12579*x12582))+((gconst10*x12580))+(((-1.0)*r12*sj3*x12595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12600=((1.0)*gconst11);
CheckValue<IkReal> x12601=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12600)))),-1);
if(!x12601.valid){
continue;
}
CheckValue<IkReal> x12602 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12601.value)))+(x12602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12603=IKsin(j4);
IkReal x12604=IKcos(j4);
IkReal x12605=(cj3*r10);
IkReal x12606=(gconst11*r20);
IkReal x12607=(gconst11*sj3);
IkReal x12608=(sj1*sj2);
IkReal x12609=(gconst11*r00);
IkReal x12610=(cj3*r11);
IkReal x12611=(gconst10*sj3);
IkReal x12612=(cj2*sj1);
IkReal x12613=(cj3*r01);
IkReal x12614=((1.0)*sj0);
IkReal x12615=(cj1*sj2);
IkReal x12616=(cj3*r21);
IkReal x12617=(cj3*gconst10);
IkReal x12618=((1.0)*cj0);
IkReal x12619=((1.0)*x12604);
IkReal x12620=((1.0)*x12603);
IkReal x12621=((1.0)*cj1*cj2);
IkReal x12622=(cj3*x12603);
IkReal x12623=(gconst10*x12603);
IkReal x12624=(gconst10*x12604);
evalcond[0]=((((-1.0)*r22*x12619))+((r21*x12623))+(((-1.0)*x12606*x12620)));
evalcond[1]=((((-1.0)*r12*x12619))+cj0+(((-1.0)*gconst11*r10*x12620))+((r11*x12623)));
evalcond[2]=((((-1.0)*r02*x12619))+((r01*x12623))+(((-1.0)*x12609*x12620))+(((-1.0)*x12614)));
evalcond[3]=(((r22*x12622))+((x12616*x12624))+((r20*x12611))+x12615+x12612+((r21*x12607))+(((-1.0)*cj3*x12606*x12619)));
evalcond[4]=((((-1.0)*r21*x12611*x12619))+(((-1.0)*x12621))+((gconst11*x12616))+((sj3*x12604*x12606))+((r20*x12617))+x12608+(((-1.0)*r22*sj3*x12620)));
evalcond[5]=(((r02*x12622))+((r01*x12607))+((cj0*x12608))+(((-1.0)*cj3*x12609*x12619))+((x12613*x12624))+((r00*x12611))+(((-1.0)*cj1*cj2*x12618)));
evalcond[6]=(((r11*x12607))+(((-1.0)*gconst11*x12605*x12619))+((x12610*x12624))+((r12*x12622))+((sj0*x12608))+(((-1.0)*cj1*cj2*x12614))+((r10*x12611)));
evalcond[7]=((((-1.0)*r01*x12611*x12619))+((gconst11*x12613))+(((-1.0)*x12615*x12618))+(((-1.0)*r02*sj3*x12620))+(((-1.0)*x12612*x12618))+((r00*x12617))+((r00*x12604*x12607)));
evalcond[8]=((((-1.0)*x12614*x12615))+((gconst10*x12605))+((gconst11*x12610))+((r10*x12604*x12607))+(((-1.0)*r11*x12611*x12619))+(((-1.0)*x12612*x12614))+(((-1.0)*r12*sj3*x12620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12625=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12625;
j4eval[1]=IKsign(x12625);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12626=((1.0)*cj5);
IkReal x12627=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12626)));
j4eval[0]=x12627;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12626))))));
j4eval[2]=IKsign(x12627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12628=cj5*cj5;
IkReal x12629=(cj3*r21);
IkReal x12630=(cj5*sj5);
IkReal x12631=((1.0)*cj3);
IkReal x12632=((((-1.0)*r12*r22*x12631))+(((-1.0)*r11*x12629))+(((-1.0)*r10*r20*x12628*x12631))+((r10*x12629*x12630))+((cj3*r11*r20*x12630))+((r11*x12628*x12629)));
j4eval[0]=x12632;
j4eval[1]=IKsign(x12632);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12633=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12633;
j4eval[1]=IKsign(x12633);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12634=((1.0)*cj5);
IkReal x12635=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12634)));
j4eval[0]=x12635;
j4eval[1]=((IKabs(((((-1.0)*r20*x12634))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12635);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12636=cj5*cj5;
IkReal x12637=r11*r11;
IkReal x12638=(r11*sj5);
IkReal x12639=(cj5*r10);
IkReal x12640=((r12*r12)+(((-1.0)*x12636*x12637))+(((-2.0)*x12638*x12639))+((x12636*(r10*r10)))+x12637);
j4eval[0]=x12640;
j4eval[1]=IKsign(x12640);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12638))+x12639))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12641=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12641);
rxp1_1=(px*r21);
rxp1_2=(r11*x12641);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12642=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12642);
rxp1_1=(px*r21);
rxp1_2=(r11*x12642);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12643=((1.0)*sj1);
CheckValue<IkReal> x12644=IKPowWithIntegerCheck(r02,-1);
if(!x12644.valid){
continue;
}
CheckValue<IkReal> x12645=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12645.valid){
continue;
}
if( IKabs(((x12644.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12643)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12645.value)*(((((-1.0)*sj2*x12643))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12644.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12643))))))+IKsqr(((x12645.value)*(((((-1.0)*sj2*x12643))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12644.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12643))))), ((x12645.value)*(((((-1.0)*sj2*x12643))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12646=IKsin(j4);
IkReal x12647=IKcos(j4);
IkReal x12648=(cj5*r20);
IkReal x12649=((1.0)*cj2);
IkReal x12650=(cj5*r10);
IkReal x12651=((1.0)*x12646);
IkReal x12652=(sj5*x12646);
IkReal x12653=((1.0)*sj5*x12647);
evalcond[0]=((-1.0)*r02*x12647);
evalcond[1]=(((r21*x12652))+(((-1.0)*x12648*x12651)));
evalcond[2]=((((-1.0)*r11*x12653))+((x12647*x12650)));
evalcond[3]=((1.0)+((r11*x12652))+(((-1.0)*x12650*x12651)));
evalcond[4]=((((-1.0)*sj1*x12649))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12651)));
evalcond[5]=(((x12647*x12648))+((sj1*sj2))+(((-1.0)*cj1*x12649))+(((-1.0)*r21*x12653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12654=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12654.valid){
continue;
}
CheckValue<IkReal> x12655=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12655.valid){
continue;
}
if( IKabs(((-1.0)*(x12654.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12655.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12654.value)))+IKsqr(((x12655.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12654.value)), ((x12655.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12656=IKsin(j4);
IkReal x12657=IKcos(j4);
IkReal x12658=(cj5*r20);
IkReal x12659=((1.0)*cj2);
IkReal x12660=(cj5*r10);
IkReal x12661=((1.0)*x12656);
IkReal x12662=(sj5*x12656);
IkReal x12663=((1.0)*sj5*x12657);
evalcond[0]=((-1.0)*r02*x12657);
evalcond[1]=(((r21*x12662))+(((-1.0)*x12658*x12661)));
evalcond[2]=((((-1.0)*r11*x12663))+((x12657*x12660)));
evalcond[3]=((1.0)+(((-1.0)*x12660*x12661))+((r11*x12662)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12661))+(((-1.0)*sj1*x12659)));
evalcond[5]=((((-1.0)*cj1*x12659))+((sj1*sj2))+((x12657*x12658))+(((-1.0)*r21*x12663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12664=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12664);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12664);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12665=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12665);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12665);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12666=IKPowWithIntegerCheck(r22,-1);
if(!x12666.valid){
continue;
}
CheckValue<IkReal> x12667=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12667.valid){
continue;
}
if( IKabs(((x12666.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12667.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12666.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12667.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12666.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12667.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12668=IKsin(j4);
IkReal x12669=IKcos(j4);
IkReal x12670=((1.0)*cj2);
IkReal x12671=(cj5*x12669);
IkReal x12672=(sj5*x12668);
IkReal x12673=((1.0)*sj5*x12669);
IkReal x12674=((1.0)*cj5*x12668);
evalcond[0]=((-1.0)*r22*x12669);
evalcond[1]=((((-1.0)*r00*x12674))+((r01*x12672)));
evalcond[2]=((((-1.0)*cj1*x12670))+(((-1.0)*r22*x12668))+((sj1*sj2)));
evalcond[3]=(((r10*x12671))+(((-1.0)*r11*x12673)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12674))+((r11*x12672)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r01*x12673))+((r00*x12671))+(((-1.0)*sj1*x12670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12675=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12675.valid){
continue;
}
CheckValue<IkReal> x12676=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12676.valid){
continue;
}
if( IKabs(((-1.0)*(x12675.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12676.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12675.value)))+IKsqr(((x12676.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12675.value)), ((x12676.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12677=IKsin(j4);
IkReal x12678=IKcos(j4);
IkReal x12679=((1.0)*cj2);
IkReal x12680=(cj5*x12678);
IkReal x12681=(sj5*x12677);
IkReal x12682=((1.0)*sj5*x12678);
IkReal x12683=((1.0)*cj5*x12677);
evalcond[0]=((-1.0)*r22*x12678);
evalcond[1]=(((r01*x12681))+(((-1.0)*r00*x12683)));
evalcond[2]=((((-1.0)*cj1*x12679))+(((-1.0)*r22*x12677))+((sj1*sj2)));
evalcond[3]=(((r10*x12680))+(((-1.0)*r11*x12682)));
evalcond[4]=((1.0)+((r11*x12681))+(((-1.0)*r10*x12683)));
evalcond[5]=(((r00*x12680))+(((-1.0)*r01*x12682))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12684=cj5*cj5;
IkReal x12685=r11*r11;
IkReal x12686=(cj5*r10);
IkReal x12687=(r11*sj5);
CheckValue<IkReal> x12688=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12684*x12685))+(r12*r12)+(((-2.0)*x12686*x12687))+((x12684*(r10*r10)))+x12685)),-1);
if(!x12688.valid){
continue;
}
CheckValue<IkReal> x12689 = IKatan2WithCheck(IkReal((x12686+(((-1.0)*x12687)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12688.value)))+(x12689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12690=IKsin(j4);
IkReal x12691=IKcos(j4);
IkReal x12692=(cj5*r10);
IkReal x12693=(r01*sj5);
IkReal x12694=((1.0)*cj2);
IkReal x12695=(cj5*r00);
IkReal x12696=(cj5*r20);
IkReal x12697=((1.0)*x12691);
IkReal x12698=((1.0)*x12690);
IkReal x12699=(sj5*x12690);
evalcond[0]=((((-1.0)*r22*x12697))+((r21*x12699))+(((-1.0)*x12696*x12698)));
evalcond[1]=((((-1.0)*r02*x12697))+((x12690*x12693))+(((-1.0)*x12695*x12698)));
evalcond[2]=((((-1.0)*r12*x12698))+(((-1.0)*r11*sj5*x12697))+((x12691*x12692)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12697))+(((-1.0)*x12692*x12698))+((r11*x12699)));
evalcond[4]=((((-1.0)*cj1*x12694))+(((-1.0)*r22*x12698))+((sj1*sj2))+(((-1.0)*r21*sj5*x12697))+((x12691*x12696)));
evalcond[5]=((((-1.0)*r02*x12698))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12694))+(((-1.0)*x12693*x12697))+((x12691*x12695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12700=((1.0)*cj5);
CheckValue<IkReal> x12701=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12700))+(((-1.0)*r00*sj5)))),-1);
if(!x12701.valid){
continue;
}
CheckValue<IkReal> x12702 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12701.value)))+(x12702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12703=IKsin(j4);
IkReal x12704=IKcos(j4);
IkReal x12705=(cj5*r10);
IkReal x12706=(r01*sj5);
IkReal x12707=((1.0)*cj2);
IkReal x12708=(cj5*r00);
IkReal x12709=(cj5*r20);
IkReal x12710=((1.0)*x12704);
IkReal x12711=((1.0)*x12703);
IkReal x12712=(sj5*x12703);
evalcond[0]=(((r21*x12712))+(((-1.0)*r22*x12710))+(((-1.0)*x12709*x12711)));
evalcond[1]=((((-1.0)*x12708*x12711))+((x12703*x12706))+(((-1.0)*r02*x12710)));
evalcond[2]=((((-1.0)*r12*x12711))+(((-1.0)*r11*sj5*x12710))+((x12704*x12705)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12710))+(((-1.0)*x12705*x12711))+((r11*x12712)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x12711))+(((-1.0)*cj1*x12707))+((x12704*x12709))+(((-1.0)*r21*sj5*x12710)));
evalcond[5]=((((-1.0)*x12706*x12710))+(((-1.0)*sj1*x12707))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12711))+((x12704*x12708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12713=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12713.valid){
continue;
}
CheckValue<IkReal> x12714 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12713.value)))+(x12714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12715=IKsin(j4);
IkReal x12716=IKcos(j4);
IkReal x12717=(cj5*r10);
IkReal x12718=(r01*sj5);
IkReal x12719=((1.0)*cj2);
IkReal x12720=(cj5*r00);
IkReal x12721=(cj5*r20);
IkReal x12722=((1.0)*x12716);
IkReal x12723=((1.0)*x12715);
IkReal x12724=(sj5*x12715);
evalcond[0]=(((r21*x12724))+(((-1.0)*r22*x12722))+(((-1.0)*x12721*x12723)));
evalcond[1]=(((x12715*x12718))+(((-1.0)*r02*x12722))+(((-1.0)*x12720*x12723)));
evalcond[2]=((((-1.0)*r11*sj5*x12722))+(((-1.0)*r12*x12723))+((x12716*x12717)));
evalcond[3]=((1.0)+((r11*x12724))+(((-1.0)*x12717*x12723))+(((-1.0)*r12*x12722)));
evalcond[4]=(((x12716*x12721))+(((-1.0)*r22*x12723))+((sj1*sj2))+(((-1.0)*cj1*x12719))+(((-1.0)*r21*sj5*x12722)));
evalcond[5]=((((-1.0)*r02*x12723))+((x12716*x12720))+(((-1.0)*sj1*x12719))+(((-1.0)*cj1*sj2))+(((-1.0)*x12718*x12722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12725=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12725;
j4eval[1]=IKsign(x12725);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12726=((1.0)*cj5);
IkReal x12727=((((-1.0)*r01*x12726))+(((-1.0)*r00*sj5)));
j4eval[0]=x12727;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12726)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12727);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12728=(sj1*sj2);
IkReal x12729=(cj5*r10);
IkReal x12730=(r11*sj5);
IkReal x12731=(cj1*cj2);
IkReal x12732=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12732;
j4eval[1]=((IKabs(((((-1.0)*x12730*x12731))+((x12728*x12730))+((x12729*x12731))+(((-1.0)*x12728*x12729)))))+(IKabs((((r12*x12731))+(((-1.0)*r12*x12728))))));
j4eval[2]=IKsign(x12732);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12733=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12733);
rxp1_1=(px*r21);
rxp1_2=(r11*x12733);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12734=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12734);
rxp1_1=(px*r21);
rxp1_2=(r11*x12734);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12735=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x12735))+((r11*sj5)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12735)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12736=((1.0)*cj5);
CheckValue<IkReal> x12737=IKPowWithIntegerCheck(((((-1.0)*r10*x12736))+((r11*sj5))),-1);
if(!x12737.valid){
continue;
}
CheckValue<IkReal> x12738=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12736))),-1);
if(!x12738.valid){
continue;
}
if( IKabs(((-1.0)*(x12737.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12738.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12737.value)))+IKsqr(((x12738.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12737.value)), ((x12738.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12739=IKsin(j4);
IkReal x12740=IKcos(j4);
IkReal x12741=((1.0)*cj2);
IkReal x12742=(r21*sj5);
IkReal x12743=(r11*sj5);
IkReal x12744=((1.0)*cj5*x12739);
IkReal x12745=((1.0)*cj5*x12740);
evalcond[0]=((-1.0)*r02*x12740);
evalcond[1]=((((-1.0)*r20*x12744))+((x12739*x12742)));
evalcond[2]=(((r02*x12739))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12741)));
evalcond[3]=((((-1.0)*r10*x12745))+((x12740*x12743)));
evalcond[4]=((1.0)+((x12739*x12743))+(((-1.0)*r10*x12744)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x12745))+(((-1.0)*cj1*x12741))+((x12740*x12742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12746=IKPowWithIntegerCheck(r02,-1);
if(!x12746.valid){
continue;
}
CheckValue<IkReal> x12747=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12747.valid){
continue;
}
if( IKabs(((x12746.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12747.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12746.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12747.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12746.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12747.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12748=IKsin(j4);
IkReal x12749=IKcos(j4);
IkReal x12750=((1.0)*cj2);
IkReal x12751=(r21*sj5);
IkReal x12752=(r11*sj5);
IkReal x12753=((1.0)*cj5*x12748);
IkReal x12754=((1.0)*cj5*x12749);
evalcond[0]=((-1.0)*r02*x12749);
evalcond[1]=(((x12748*x12751))+(((-1.0)*r20*x12753)));
evalcond[2]=((((-1.0)*sj1*x12750))+(((-1.0)*cj1*sj2))+((r02*x12748)));
evalcond[3]=((((-1.0)*r10*x12754))+((x12749*x12752)));
evalcond[4]=((1.0)+((x12748*x12752))+(((-1.0)*r10*x12753)));
evalcond[5]=(((sj1*sj2))+((x12749*x12751))+(((-1.0)*r20*x12754))+(((-1.0)*cj1*x12750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12755=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12755;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12755);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12756=((1.0)*cj5);
IkReal x12757=((((-1.0)*r21*x12756))+(((-1.0)*r20*sj5)));
j4eval[0]=x12757;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12756))))));
j4eval[2]=IKsign(x12757);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12758=cj5*cj5;
IkReal x12759=(r11*r21);
IkReal x12760=((1.0)*r20);
IkReal x12761=(cj5*sj5);
IkReal x12762=((((-1.0)*r12*r22))+(((-1.0)*x12759))+((x12758*x12759))+(((-1.0)*r10*x12758*x12760))+((r10*r21*x12761))+((r11*r20*x12761)));
j4eval[0]=x12762;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12760))+((r21*sj5))))));
j4eval[2]=IKsign(x12762);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12763=cj5*cj5;
IkReal x12764=(r21*sj5);
IkReal x12765=(r11*r21);
IkReal x12766=((1.0)*r20);
CheckValue<IkReal> x12767=IKPowWithIntegerCheck(IKsign((((x12763*x12765))+(((-1.0)*r12*r22))+((cj5*r10*x12764))+(((-1.0)*x12765))+(((-1.0)*r10*x12763*x12766))+((cj5*r11*r20*sj5)))),-1);
if(!x12767.valid){
continue;
}
CheckValue<IkReal> x12768 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12766))+x12764)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12767.value)))+(x12768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12769=IKcos(j4);
IkReal x12770=IKsin(j4);
IkReal x12771=(cj5*r00);
IkReal x12772=(cj5*r20);
IkReal x12773=(cj5*r10);
IkReal x12774=((1.0)*x12769);
IkReal x12775=((1.0)*x12770);
IkReal x12776=(sj5*x12769);
IkReal x12777=(sj5*x12770);
evalcond[0]=((((-1.0)*x12772*x12774))+((r21*x12776))+((r22*x12770)));
evalcond[1]=((((-1.0)*x12773*x12774))+((r12*x12770))+((r11*x12776)));
evalcond[2]=((((-1.0)*r22*x12774))+(((-1.0)*x12772*x12775))+((r21*x12777)));
evalcond[3]=(((r01*x12777))+(((-1.0)*x12771*x12775))+(((-1.0)*r02*x12774)));
evalcond[4]=((-1.0)+((r01*x12776))+(((-1.0)*x12771*x12774))+((r02*x12770)));
evalcond[5]=((1.0)+(((-1.0)*x12773*x12775))+(((-1.0)*r12*x12774))+((r11*x12777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12778=((1.0)*cj5);
CheckValue<IkReal> x12779=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12778))+(((-1.0)*r20*sj5)))),-1);
if(!x12779.valid){
continue;
}
CheckValue<IkReal> x12780 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12778)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12779.value)))+(x12780.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12781=IKcos(j4);
IkReal x12782=IKsin(j4);
IkReal x12783=(cj5*r00);
IkReal x12784=(cj5*r20);
IkReal x12785=(cj5*r10);
IkReal x12786=((1.0)*x12781);
IkReal x12787=((1.0)*x12782);
IkReal x12788=(sj5*x12781);
IkReal x12789=(sj5*x12782);
evalcond[0]=(((r21*x12788))+(((-1.0)*x12784*x12786))+((r22*x12782)));
evalcond[1]=(((r11*x12788))+((r12*x12782))+(((-1.0)*x12785*x12786)));
evalcond[2]=(((r21*x12789))+(((-1.0)*r22*x12786))+(((-1.0)*x12784*x12787)));
evalcond[3]=(((r01*x12789))+(((-1.0)*x12783*x12787))+(((-1.0)*r02*x12786)));
evalcond[4]=((-1.0)+((r01*x12788))+(((-1.0)*x12783*x12786))+((r02*x12782)));
evalcond[5]=((1.0)+((r11*x12789))+(((-1.0)*x12785*x12787))+(((-1.0)*r12*x12786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12790 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12790.valid){
continue;
}
CheckValue<IkReal> x12791=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12790.value)+(((1.5707963267949)*(x12791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12792=IKcos(j4);
IkReal x12793=IKsin(j4);
IkReal x12794=(cj5*r00);
IkReal x12795=(cj5*r20);
IkReal x12796=(cj5*r10);
IkReal x12797=((1.0)*x12792);
IkReal x12798=((1.0)*x12793);
IkReal x12799=(sj5*x12792);
IkReal x12800=(sj5*x12793);
evalcond[0]=(((r21*x12799))+((r22*x12793))+(((-1.0)*x12795*x12797)));
evalcond[1]=(((r11*x12799))+((r12*x12793))+(((-1.0)*x12796*x12797)));
evalcond[2]=((((-1.0)*r22*x12797))+((r21*x12800))+(((-1.0)*x12795*x12798)));
evalcond[3]=((((-1.0)*x12794*x12798))+((r01*x12800))+(((-1.0)*r02*x12797)));
evalcond[4]=((-1.0)+(((-1.0)*x12794*x12797))+((r02*x12793))+((r01*x12799)));
evalcond[5]=((1.0)+((r11*x12800))+(((-1.0)*r12*x12797))+(((-1.0)*x12796*x12798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12801=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12801;
j4eval[1]=IKsign(x12801);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12802=((1.0)*cj5);
IkReal x12803=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12802)));
j4eval[0]=x12803;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12802)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12803);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12804=cj5*cj5;
IkReal x12805=(r11*r21);
IkReal x12806=((1.0)*r20);
IkReal x12807=(cj5*sj5);
IkReal x12808=(((r11*r20*x12807))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12804*x12806))+(((-1.0)*x12805))+((r10*r21*x12807))+((x12804*x12805)));
j4eval[0]=x12808;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12806))))));
j4eval[2]=IKsign(x12808);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12809=cj5*cj5;
IkReal x12810=(r21*sj5);
IkReal x12811=(r11*r21);
IkReal x12812=((1.0)*r20);
CheckValue<IkReal> x12813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12809*x12812))+(((-1.0)*r12*r22))+(((-1.0)*x12811))+((x12809*x12811))+((cj5*r10*x12810))+((cj5*r11*r20*sj5)))),-1);
if(!x12813.valid){
continue;
}
CheckValue<IkReal> x12814 = IKatan2WithCheck(IkReal((x12810+(((-1.0)*cj5*x12812)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12813.value)))+(x12814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12815=IKcos(j4);
IkReal x12816=IKsin(j4);
IkReal x12817=(cj5*r00);
IkReal x12818=(cj5*r20);
IkReal x12819=(cj5*r10);
IkReal x12820=((1.0)*x12815);
IkReal x12821=((1.0)*x12816);
IkReal x12822=(sj5*x12815);
IkReal x12823=(sj5*x12816);
evalcond[0]=(((r21*x12822))+(((-1.0)*x12818*x12820))+((r22*x12816)));
evalcond[1]=(((r12*x12816))+((r11*x12822))+(((-1.0)*x12819*x12820)));
evalcond[2]=((((-1.0)*r22*x12820))+((r21*x12823))+(((-1.0)*x12818*x12821)));
evalcond[3]=((((-1.0)*r02*x12820))+((r01*x12823))+(((-1.0)*x12817*x12821)));
evalcond[4]=((1.0)+((r01*x12822))+((r02*x12816))+(((-1.0)*x12817*x12820)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12820))+((r11*x12823))+(((-1.0)*x12819*x12821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12824=((1.0)*cj5);
CheckValue<IkReal> x12825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12824)))),-1);
if(!x12825.valid){
continue;
}
CheckValue<IkReal> x12826 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12824)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12825.value)))+(x12826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12827=IKcos(j4);
IkReal x12828=IKsin(j4);
IkReal x12829=(cj5*r00);
IkReal x12830=(cj5*r20);
IkReal x12831=(cj5*r10);
IkReal x12832=((1.0)*x12827);
IkReal x12833=((1.0)*x12828);
IkReal x12834=(sj5*x12827);
IkReal x12835=(sj5*x12828);
evalcond[0]=(((r21*x12834))+((r22*x12828))+(((-1.0)*x12830*x12832)));
evalcond[1]=(((r11*x12834))+((r12*x12828))+(((-1.0)*x12831*x12832)));
evalcond[2]=(((r21*x12835))+(((-1.0)*r22*x12832))+(((-1.0)*x12830*x12833)));
evalcond[3]=((((-1.0)*x12829*x12833))+(((-1.0)*r02*x12832))+((r01*x12835)));
evalcond[4]=((1.0)+(((-1.0)*x12829*x12832))+((r02*x12828))+((r01*x12834)));
evalcond[5]=((1.0)+((r11*x12835))+(((-1.0)*r12*x12832))+(((-1.0)*x12831*x12833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12836=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12836.valid){
continue;
}
CheckValue<IkReal> x12837 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12836.value)))+(x12837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12838=IKcos(j4);
IkReal x12839=IKsin(j4);
IkReal x12840=(cj5*r00);
IkReal x12841=(cj5*r20);
IkReal x12842=(cj5*r10);
IkReal x12843=((1.0)*x12838);
IkReal x12844=((1.0)*x12839);
IkReal x12845=(sj5*x12838);
IkReal x12846=(sj5*x12839);
evalcond[0]=(((r22*x12839))+(((-1.0)*x12841*x12843))+((r21*x12845)));
evalcond[1]=(((r12*x12839))+((r11*x12845))+(((-1.0)*x12842*x12843)));
evalcond[2]=((((-1.0)*r22*x12843))+(((-1.0)*x12841*x12844))+((r21*x12846)));
evalcond[3]=((((-1.0)*r02*x12843))+((r01*x12846))+(((-1.0)*x12840*x12844)));
evalcond[4]=((1.0)+((r01*x12845))+(((-1.0)*x12840*x12843))+((r02*x12839)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12843))+((r11*x12846))+(((-1.0)*x12842*x12844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12847=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12847;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12848=((1.0)*cj5);
IkReal x12849=((((-1.0)*r21*x12848))+(((-1.0)*r20*sj5)));
j4eval[0]=x12849;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12848))))));
j4eval[2]=IKsign(x12849);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12850=cj5*cj5;
IkReal x12851=(r11*r21);
IkReal x12852=((1.0)*r20);
IkReal x12853=(cj5*sj5);
IkReal x12854=(((r11*r20*x12853))+(((-1.0)*r12*r22))+(((-1.0)*x12851))+((r10*r21*x12853))+(((-1.0)*r10*x12850*x12852))+((x12850*x12851)));
j4eval[0]=x12854;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12852)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12855=cj5*cj5;
IkReal x12856=(r21*sj5);
IkReal x12857=(r11*r21);
IkReal x12858=((1.0)*r20);
CheckValue<IkReal> x12859=IKPowWithIntegerCheck(IKsign((((x12855*x12857))+(((-1.0)*r12*r22))+(((-1.0)*x12857))+((cj5*r10*x12856))+((cj5*r11*r20*sj5))+(((-1.0)*r10*x12855*x12858)))),-1);
if(!x12859.valid){
continue;
}
CheckValue<IkReal> x12860 = IKatan2WithCheck(IkReal((x12856+(((-1.0)*cj5*x12858)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12859.value)))+(x12860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12861=IKcos(j4);
IkReal x12862=IKsin(j4);
IkReal x12863=(cj5*r00);
IkReal x12864=(cj5*r20);
IkReal x12865=(cj5*r10);
IkReal x12866=((1.0)*x12861);
IkReal x12867=((1.0)*x12862);
IkReal x12868=(sj5*x12861);
IkReal x12869=(sj5*x12862);
evalcond[0]=(((r21*x12868))+(((-1.0)*x12864*x12866))+((r22*x12862)));
evalcond[1]=(((r11*x12868))+((r12*x12862))+(((-1.0)*x12865*x12866)));
evalcond[2]=(((r21*x12869))+(((-1.0)*r22*x12866))+(((-1.0)*x12864*x12867)));
evalcond[3]=((((-1.0)*x12863*x12867))+(((-1.0)*r02*x12866))+((r01*x12869)));
evalcond[4]=((-1.0)+(((-1.0)*x12863*x12866))+((r01*x12868))+((r02*x12862)));
evalcond[5]=((1.0)+((r11*x12869))+(((-1.0)*x12865*x12867))+(((-1.0)*r12*x12866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12870=((1.0)*cj5);
CheckValue<IkReal> x12871 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12870)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12871.valid){
continue;
}
CheckValue<IkReal> x12872=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12870))+(((-1.0)*r20*sj5)))),-1);
if(!x12872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12871.value)+(((1.5707963267949)*(x12872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12873=IKcos(j4);
IkReal x12874=IKsin(j4);
IkReal x12875=(cj5*r00);
IkReal x12876=(cj5*r20);
IkReal x12877=(cj5*r10);
IkReal x12878=((1.0)*x12873);
IkReal x12879=((1.0)*x12874);
IkReal x12880=(sj5*x12873);
IkReal x12881=(sj5*x12874);
evalcond[0]=(((r22*x12874))+(((-1.0)*x12876*x12878))+((r21*x12880)));
evalcond[1]=(((r12*x12874))+(((-1.0)*x12877*x12878))+((r11*x12880)));
evalcond[2]=((((-1.0)*r22*x12878))+(((-1.0)*x12876*x12879))+((r21*x12881)));
evalcond[3]=((((-1.0)*r02*x12878))+((r01*x12881))+(((-1.0)*x12875*x12879)));
evalcond[4]=((-1.0)+((r01*x12880))+((r02*x12874))+(((-1.0)*x12875*x12878)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12878))+(((-1.0)*x12877*x12879))+((r11*x12881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12882 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12882.valid){
continue;
}
CheckValue<IkReal> x12883=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12882.value)+(((1.5707963267949)*(x12883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12884=IKcos(j4);
IkReal x12885=IKsin(j4);
IkReal x12886=(cj5*r00);
IkReal x12887=(cj5*r20);
IkReal x12888=(cj5*r10);
IkReal x12889=((1.0)*x12884);
IkReal x12890=((1.0)*x12885);
IkReal x12891=(sj5*x12884);
IkReal x12892=(sj5*x12885);
evalcond[0]=(((r21*x12891))+(((-1.0)*x12887*x12889))+((r22*x12885)));
evalcond[1]=(((r12*x12885))+(((-1.0)*x12888*x12889))+((r11*x12891)));
evalcond[2]=((((-1.0)*r22*x12889))+((r21*x12892))+(((-1.0)*x12887*x12890)));
evalcond[3]=(((r01*x12892))+(((-1.0)*r02*x12889))+(((-1.0)*x12886*x12890)));
evalcond[4]=((-1.0)+(((-1.0)*x12886*x12889))+((r01*x12891))+((r02*x12885)));
evalcond[5]=((1.0)+(((-1.0)*x12888*x12890))+(((-1.0)*r12*x12889))+((r11*x12892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12893=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12893;
j4eval[1]=IKsign(x12893);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12894=((1.0)*cj5);
IkReal x12895=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12894)));
j4eval[0]=x12895;
j4eval[1]=((IKabs(((((-1.0)*r20*x12894))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12895);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12896=cj5*cj5;
IkReal x12897=(r11*r21);
IkReal x12898=((1.0)*r20);
IkReal x12899=(cj5*sj5);
IkReal x12900=((((-1.0)*x12897))+((x12896*x12897))+(((-1.0)*r12*r22))+((r11*r20*x12899))+((r10*r21*x12899))+(((-1.0)*r10*x12896*x12898)));
j4eval[0]=x12900;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12898))))));
j4eval[2]=IKsign(x12900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12901=cj5*cj5;
IkReal x12902=(r21*sj5);
IkReal x12903=(r11*r21);
IkReal x12904=((1.0)*r20);
CheckValue<IkReal> x12905 = IKatan2WithCheck(IkReal((x12902+(((-1.0)*cj5*x12904)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12905.valid){
continue;
}
CheckValue<IkReal> x12906=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x12903))+(((-1.0)*r10*x12901*x12904))+((x12901*x12903))+((cj5*r10*x12902))+((cj5*r11*r20*sj5)))),-1);
if(!x12906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12905.value)+(((1.5707963267949)*(x12906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12907=IKcos(j4);
IkReal x12908=IKsin(j4);
IkReal x12909=(cj5*r00);
IkReal x12910=(cj5*r20);
IkReal x12911=(cj5*r10);
IkReal x12912=((1.0)*x12907);
IkReal x12913=((1.0)*x12908);
IkReal x12914=(sj5*x12907);
IkReal x12915=(sj5*x12908);
evalcond[0]=((((-1.0)*x12910*x12912))+((r21*x12914))+((r22*x12908)));
evalcond[1]=((((-1.0)*x12911*x12912))+((r12*x12908))+((r11*x12914)));
evalcond[2]=((((-1.0)*x12910*x12913))+((r21*x12915))+(((-1.0)*r22*x12912)));
evalcond[3]=((((-1.0)*x12909*x12913))+(((-1.0)*r02*x12912))+((r01*x12915)));
evalcond[4]=((1.0)+(((-1.0)*x12909*x12912))+((r02*x12908))+((r01*x12914)));
evalcond[5]=((1.0)+(((-1.0)*x12911*x12913))+(((-1.0)*r12*x12912))+((r11*x12915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12916=((1.0)*cj5);
CheckValue<IkReal> x12917 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12916)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12917.valid){
continue;
}
CheckValue<IkReal> x12918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12916)))),-1);
if(!x12918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12917.value)+(((1.5707963267949)*(x12918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12919=IKcos(j4);
IkReal x12920=IKsin(j4);
IkReal x12921=(cj5*r00);
IkReal x12922=(cj5*r20);
IkReal x12923=(cj5*r10);
IkReal x12924=((1.0)*x12919);
IkReal x12925=((1.0)*x12920);
IkReal x12926=(sj5*x12919);
IkReal x12927=(sj5*x12920);
evalcond[0]=((((-1.0)*x12922*x12924))+((r21*x12926))+((r22*x12920)));
evalcond[1]=(((r11*x12926))+(((-1.0)*x12923*x12924))+((r12*x12920)));
evalcond[2]=((((-1.0)*x12922*x12925))+((r21*x12927))+(((-1.0)*r22*x12924)));
evalcond[3]=((((-1.0)*r02*x12924))+((r01*x12927))+(((-1.0)*x12921*x12925)));
evalcond[4]=((1.0)+((r02*x12920))+((r01*x12926))+(((-1.0)*x12921*x12924)));
evalcond[5]=((1.0)+((r11*x12927))+(((-1.0)*r12*x12924))+(((-1.0)*x12923*x12925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12928=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12928.valid){
continue;
}
CheckValue<IkReal> x12929 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12928.value)))+(x12929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12930=IKcos(j4);
IkReal x12931=IKsin(j4);
IkReal x12932=(cj5*r00);
IkReal x12933=(cj5*r20);
IkReal x12934=(cj5*r10);
IkReal x12935=((1.0)*x12930);
IkReal x12936=((1.0)*x12931);
IkReal x12937=(sj5*x12930);
IkReal x12938=(sj5*x12931);
evalcond[0]=((((-1.0)*x12933*x12935))+((r22*x12931))+((r21*x12937)));
evalcond[1]=(((r11*x12937))+((r12*x12931))+(((-1.0)*x12934*x12935)));
evalcond[2]=((((-1.0)*x12933*x12936))+(((-1.0)*r22*x12935))+((r21*x12938)));
evalcond[3]=((((-1.0)*r02*x12935))+(((-1.0)*x12932*x12936))+((r01*x12938)));
evalcond[4]=((1.0)+((r02*x12931))+(((-1.0)*x12932*x12935))+((r01*x12937)));
evalcond[5]=((1.0)+((r11*x12938))+(((-1.0)*r12*x12935))+(((-1.0)*x12934*x12936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12939=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12939;
j4eval[1]=IKsign(x12939);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12940=((1.0)*cj5);
IkReal x12941=((((-1.0)*r11*x12940))+(((-1.0)*r10*sj5)));
j4eval[0]=x12941;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12940)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12941);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12942=cj5*cj5;
IkReal x12943=(r11*r21);
IkReal x12944=((1.0)*r20);
IkReal x12945=(cj5*sj5);
IkReal x12946=((((-1.0)*r12*r22))+((r10*r21*x12945))+(((-1.0)*r10*x12942*x12944))+(((-1.0)*x12943))+((r11*r20*x12945))+((x12942*x12943)));
j4eval[0]=x12946;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12944))+((r21*sj5))))));
j4eval[2]=IKsign(x12946);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12947=cj5*cj5;
IkReal x12948=(r21*sj5);
IkReal x12949=(r11*r21);
IkReal x12950=((1.0)*r20);
CheckValue<IkReal> x12951 = IKatan2WithCheck(IkReal((x12948+(((-1.0)*cj5*x12950)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12951.valid){
continue;
}
CheckValue<IkReal> x12952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12947*x12949))+(((-1.0)*x12949))+((cj5*r10*x12948))+(((-1.0)*r10*x12947*x12950))+((cj5*r11*r20*sj5)))),-1);
if(!x12952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12951.value)+(((1.5707963267949)*(x12952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12953=IKcos(j4);
IkReal x12954=IKsin(j4);
IkReal x12955=(cj5*r00);
IkReal x12956=(cj5*r20);
IkReal x12957=(cj5*r10);
IkReal x12958=((1.0)*x12953);
IkReal x12959=((1.0)*x12954);
IkReal x12960=(sj5*x12953);
IkReal x12961=(sj5*x12954);
evalcond[0]=(((r22*x12954))+(((-1.0)*x12956*x12958))+((r21*x12960)));
evalcond[1]=((((-1.0)*x12957*x12958))+((r12*x12954))+((r11*x12960)));
evalcond[2]=((((-1.0)*x12956*x12959))+(((-1.0)*r22*x12958))+((r21*x12961)));
evalcond[3]=((((-1.0)*x12955*x12959))+((r01*x12961))+(((-1.0)*r02*x12958)));
evalcond[4]=((1.0)+(((-1.0)*x12955*x12958))+((r01*x12960))+((r02*x12954)));
evalcond[5]=((1.0)+(((-1.0)*x12957*x12959))+(((-1.0)*r12*x12958))+((r11*x12961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12962=((1.0)*cj5);
CheckValue<IkReal> x12963 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12962)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12963.valid){
continue;
}
CheckValue<IkReal> x12964=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12962)))),-1);
if(!x12964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12963.value)+(((1.5707963267949)*(x12964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12965=IKcos(j4);
IkReal x12966=IKsin(j4);
IkReal x12967=(cj5*r00);
IkReal x12968=(cj5*r20);
IkReal x12969=(cj5*r10);
IkReal x12970=((1.0)*x12965);
IkReal x12971=((1.0)*x12966);
IkReal x12972=(sj5*x12965);
IkReal x12973=(sj5*x12966);
evalcond[0]=(((r22*x12966))+(((-1.0)*x12968*x12970))+((r21*x12972)));
evalcond[1]=(((r11*x12972))+((r12*x12966))+(((-1.0)*x12969*x12970)));
evalcond[2]=((((-1.0)*r22*x12970))+(((-1.0)*x12968*x12971))+((r21*x12973)));
evalcond[3]=(((r01*x12973))+(((-1.0)*r02*x12970))+(((-1.0)*x12967*x12971)));
evalcond[4]=((1.0)+((r01*x12972))+((r02*x12966))+(((-1.0)*x12967*x12970)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12970))+((r11*x12973))+(((-1.0)*x12969*x12971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12974=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12974.valid){
continue;
}
CheckValue<IkReal> x12975 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12974.value)))+(x12975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12976=IKcos(j4);
IkReal x12977=IKsin(j4);
IkReal x12978=(cj5*r00);
IkReal x12979=(cj5*r20);
IkReal x12980=(cj5*r10);
IkReal x12981=((1.0)*x12976);
IkReal x12982=((1.0)*x12977);
IkReal x12983=(sj5*x12976);
IkReal x12984=(sj5*x12977);
evalcond[0]=(((r21*x12983))+(((-1.0)*x12979*x12981))+((r22*x12977)));
evalcond[1]=((((-1.0)*x12980*x12981))+((r11*x12983))+((r12*x12977)));
evalcond[2]=((((-1.0)*r22*x12981))+((r21*x12984))+(((-1.0)*x12979*x12982)));
evalcond[3]=(((r01*x12984))+(((-1.0)*r02*x12981))+(((-1.0)*x12978*x12982)));
evalcond[4]=((1.0)+((r02*x12977))+((r01*x12983))+(((-1.0)*x12978*x12981)));
evalcond[5]=((1.0)+(((-1.0)*x12980*x12982))+((r11*x12984))+(((-1.0)*r12*x12981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12985=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12985;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12986=((1.0)*cj5);
IkReal x12987=((((-1.0)*r21*x12986))+(((-1.0)*r20*sj5)));
j4eval[0]=x12987;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12986))+((r11*sj5))))));
j4eval[2]=IKsign(x12987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12988=cj5*cj5;
IkReal x12989=(r11*r21);
IkReal x12990=((1.0)*r20);
IkReal x12991=(cj5*sj5);
IkReal x12992=(((r10*r21*x12991))+((x12988*x12989))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12988*x12990))+((r11*r20*x12991))+(((-1.0)*x12989)));
j4eval[0]=x12992;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12990))))));
j4eval[2]=IKsign(x12992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12993=cj5*cj5;
IkReal x12994=(r21*sj5);
IkReal x12995=(r11*r21);
IkReal x12996=((1.0)*r20);
CheckValue<IkReal> x12997 = IKatan2WithCheck(IkReal((x12994+(((-1.0)*cj5*x12996)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12997.valid){
continue;
}
CheckValue<IkReal> x12998=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12993*x12995))+((cj5*r10*x12994))+(((-1.0)*x12995))+((cj5*r11*r20*sj5))+(((-1.0)*r10*x12993*x12996)))),-1);
if(!x12998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12997.value)+(((1.5707963267949)*(x12998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12999=IKcos(j4);
IkReal x13000=IKsin(j4);
IkReal x13001=(cj5*r00);
IkReal x13002=(cj5*r20);
IkReal x13003=(cj5*r10);
IkReal x13004=((1.0)*x12999);
IkReal x13005=((1.0)*x13000);
IkReal x13006=(sj5*x12999);
IkReal x13007=(sj5*x13000);
evalcond[0]=((((-1.0)*x13002*x13004))+((r22*x13000))+((r21*x13006)));
evalcond[1]=((((-1.0)*x13003*x13004))+((r12*x13000))+((r11*x13006)));
evalcond[2]=((((-1.0)*x13002*x13005))+(((-1.0)*r22*x13004))+((r21*x13007)));
evalcond[3]=((((-1.0)*x13001*x13005))+(((-1.0)*r02*x13004))+((r01*x13007)));
evalcond[4]=((-1.0)+(((-1.0)*x13001*x13004))+((r02*x13000))+((r01*x13006)));
evalcond[5]=((1.0)+(((-1.0)*x13003*x13005))+(((-1.0)*r12*x13004))+((r11*x13007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13008=((1.0)*cj5);
CheckValue<IkReal> x13009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13008))+(((-1.0)*r20*sj5)))),-1);
if(!x13009.valid){
continue;
}
CheckValue<IkReal> x13010 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13008)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13009.value)))+(x13010.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13011=IKcos(j4);
IkReal x13012=IKsin(j4);
IkReal x13013=(cj5*r00);
IkReal x13014=(cj5*r20);
IkReal x13015=(cj5*r10);
IkReal x13016=((1.0)*x13011);
IkReal x13017=((1.0)*x13012);
IkReal x13018=(sj5*x13011);
IkReal x13019=(sj5*x13012);
evalcond[0]=(((r21*x13018))+((r22*x13012))+(((-1.0)*x13014*x13016)));
evalcond[1]=((((-1.0)*x13015*x13016))+((r11*x13018))+((r12*x13012)));
evalcond[2]=((((-1.0)*r22*x13016))+((r21*x13019))+(((-1.0)*x13014*x13017)));
evalcond[3]=((((-1.0)*x13013*x13017))+((r01*x13019))+(((-1.0)*r02*x13016)));
evalcond[4]=((-1.0)+(((-1.0)*x13013*x13016))+((r01*x13018))+((r02*x13012)));
evalcond[5]=((1.0)+(((-1.0)*x13015*x13017))+((r11*x13019))+(((-1.0)*r12*x13016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13020 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13020.valid){
continue;
}
CheckValue<IkReal> x13021=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13020.value)+(((1.5707963267949)*(x13021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13022=IKcos(j4);
IkReal x13023=IKsin(j4);
IkReal x13024=(cj5*r00);
IkReal x13025=(cj5*r20);
IkReal x13026=(cj5*r10);
IkReal x13027=((1.0)*x13022);
IkReal x13028=((1.0)*x13023);
IkReal x13029=(sj5*x13022);
IkReal x13030=(sj5*x13023);
evalcond[0]=(((r21*x13029))+(((-1.0)*x13025*x13027))+((r22*x13023)));
evalcond[1]=(((r11*x13029))+((r12*x13023))+(((-1.0)*x13026*x13027)));
evalcond[2]=((((-1.0)*r22*x13027))+(((-1.0)*x13025*x13028))+((r21*x13030)));
evalcond[3]=((((-1.0)*x13024*x13028))+((r01*x13030))+(((-1.0)*r02*x13027)));
evalcond[4]=((-1.0)+((r01*x13029))+(((-1.0)*x13024*x13027))+((r02*x13023)));
evalcond[5]=((1.0)+((r11*x13030))+(((-1.0)*x13026*x13028))+(((-1.0)*r12*x13027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13031=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13031;
j4eval[1]=IKsign(x13031);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13032=((1.0)*cj5);
IkReal x13033=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13032)));
j4eval[0]=x13033;
j4eval[1]=((IKabs(((((-1.0)*r20*x13032))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13034=cj5*cj5;
IkReal x13035=(r11*r21);
IkReal x13036=((1.0)*r20);
IkReal x13037=(cj5*sj5);
IkReal x13038=((((-1.0)*x13035))+(((-1.0)*r12*r22))+((x13034*x13035))+((r10*r21*x13037))+((r11*r20*x13037))+(((-1.0)*r10*x13034*x13036)));
j4eval[0]=x13038;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13036)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13039=cj5*cj5;
IkReal x13040=(r21*sj5);
IkReal x13041=(r11*r21);
IkReal x13042=((1.0)*r20);
CheckValue<IkReal> x13043=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13041))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13039*x13042))+((x13039*x13041))+((cj5*r10*x13040))+((cj5*r11*r20*sj5)))),-1);
if(!x13043.valid){
continue;
}
CheckValue<IkReal> x13044 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13042))+x13040)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13043.value)))+(x13044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13045=IKcos(j4);
IkReal x13046=IKsin(j4);
IkReal x13047=(cj5*r00);
IkReal x13048=(cj5*r20);
IkReal x13049=(cj5*r10);
IkReal x13050=((1.0)*x13045);
IkReal x13051=((1.0)*x13046);
IkReal x13052=(sj5*x13045);
IkReal x13053=(sj5*x13046);
evalcond[0]=(((r21*x13052))+(((-1.0)*x13048*x13050))+((r22*x13046)));
evalcond[1]=((((-1.0)*x13049*x13050))+((r12*x13046))+((r11*x13052)));
evalcond[2]=(((r21*x13053))+(((-1.0)*x13048*x13051))+(((-1.0)*r22*x13050)));
evalcond[3]=((((-1.0)*x13047*x13051))+(((-1.0)*r02*x13050))+((r01*x13053)));
evalcond[4]=((1.0)+((r02*x13046))+(((-1.0)*x13047*x13050))+((r01*x13052)));
evalcond[5]=((1.0)+(((-1.0)*x13049*x13051))+(((-1.0)*r12*x13050))+((r11*x13053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13054=((1.0)*cj5);
CheckValue<IkReal> x13055 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13054))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13055.valid){
continue;
}
CheckValue<IkReal> x13056=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13054)))),-1);
if(!x13056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13055.value)+(((1.5707963267949)*(x13056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13057=IKcos(j4);
IkReal x13058=IKsin(j4);
IkReal x13059=(cj5*r00);
IkReal x13060=(cj5*r20);
IkReal x13061=(cj5*r10);
IkReal x13062=((1.0)*x13057);
IkReal x13063=((1.0)*x13058);
IkReal x13064=(sj5*x13057);
IkReal x13065=(sj5*x13058);
evalcond[0]=((((-1.0)*x13060*x13062))+((r22*x13058))+((r21*x13064)));
evalcond[1]=(((r12*x13058))+(((-1.0)*x13061*x13062))+((r11*x13064)));
evalcond[2]=((((-1.0)*x13060*x13063))+((r21*x13065))+(((-1.0)*r22*x13062)));
evalcond[3]=((((-1.0)*x13059*x13063))+(((-1.0)*r02*x13062))+((r01*x13065)));
evalcond[4]=((1.0)+((r02*x13058))+(((-1.0)*x13059*x13062))+((r01*x13064)));
evalcond[5]=((1.0)+(((-1.0)*x13061*x13063))+(((-1.0)*r12*x13062))+((r11*x13065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13066=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13066.valid){
continue;
}
CheckValue<IkReal> x13067 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13066.value)))+(x13067.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13068=IKcos(j4);
IkReal x13069=IKsin(j4);
IkReal x13070=(cj5*r00);
IkReal x13071=(cj5*r20);
IkReal x13072=(cj5*r10);
IkReal x13073=((1.0)*x13068);
IkReal x13074=((1.0)*x13069);
IkReal x13075=(sj5*x13068);
IkReal x13076=(sj5*x13069);
evalcond[0]=(((r21*x13075))+((r22*x13069))+(((-1.0)*x13071*x13073)));
evalcond[1]=(((r12*x13069))+(((-1.0)*x13072*x13073))+((r11*x13075)));
evalcond[2]=(((r21*x13076))+(((-1.0)*r22*x13073))+(((-1.0)*x13071*x13074)));
evalcond[3]=((((-1.0)*r02*x13073))+((r01*x13076))+(((-1.0)*x13070*x13074)));
evalcond[4]=((1.0)+((r02*x13069))+((r01*x13075))+(((-1.0)*x13070*x13073)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13073))+(((-1.0)*x13072*x13074))+((r11*x13076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13077=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13077;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13078=((1.0)*cj5);
IkReal x13079=((((-1.0)*r21*x13078))+(((-1.0)*r20*sj5)));
j4eval[0]=x13079;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13078))+((r11*sj5))))));
j4eval[2]=IKsign(x13079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13080=cj5*cj5;
IkReal x13081=(r11*r21);
IkReal x13082=((1.0)*r20);
IkReal x13083=(cj5*sj5);
IkReal x13084=((((-1.0)*r12*r22))+(((-1.0)*r10*x13080*x13082))+((r11*r20*x13083))+((r10*r21*x13083))+(((-1.0)*x13081))+((x13080*x13081)));
j4eval[0]=x13084;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13082))))));
j4eval[2]=IKsign(x13084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13085=cj5*cj5;
IkReal x13086=(r21*sj5);
IkReal x13087=(r11*r21);
IkReal x13088=((1.0)*r20);
CheckValue<IkReal> x13089=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x13085*x13087))+(((-1.0)*r10*x13085*x13088))+(((-1.0)*x13087))+((cj5*r11*r20*sj5))+((cj5*r10*x13086)))),-1);
if(!x13089.valid){
continue;
}
CheckValue<IkReal> x13090 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13088))+x13086)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13089.value)))+(x13090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13091=IKcos(j4);
IkReal x13092=IKsin(j4);
IkReal x13093=(cj5*r00);
IkReal x13094=(cj5*r20);
IkReal x13095=(cj5*r10);
IkReal x13096=((1.0)*x13091);
IkReal x13097=((1.0)*x13092);
IkReal x13098=(sj5*x13091);
IkReal x13099=(sj5*x13092);
evalcond[0]=((((-1.0)*x13094*x13096))+((r22*x13092))+((r21*x13098)));
evalcond[1]=((((-1.0)*x13095*x13096))+((r11*x13098))+((r12*x13092)));
evalcond[2]=((((-1.0)*x13094*x13097))+(((-1.0)*r22*x13096))+((r21*x13099)));
evalcond[3]=(((r01*x13099))+(((-1.0)*x13093*x13097))+(((-1.0)*r02*x13096)));
evalcond[4]=((-1.0)+((r02*x13092))+((r01*x13098))+(((-1.0)*x13093*x13096)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13096))+(((-1.0)*x13095*x13097))+((r11*x13099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13100=((1.0)*cj5);
CheckValue<IkReal> x13101=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13100))+(((-1.0)*r20*sj5)))),-1);
if(!x13101.valid){
continue;
}
CheckValue<IkReal> x13102 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13100)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13101.value)))+(x13102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13103=IKcos(j4);
IkReal x13104=IKsin(j4);
IkReal x13105=(cj5*r00);
IkReal x13106=(cj5*r20);
IkReal x13107=(cj5*r10);
IkReal x13108=((1.0)*x13103);
IkReal x13109=((1.0)*x13104);
IkReal x13110=(sj5*x13103);
IkReal x13111=(sj5*x13104);
evalcond[0]=((((-1.0)*x13106*x13108))+((r21*x13110))+((r22*x13104)));
evalcond[1]=((((-1.0)*x13107*x13108))+((r12*x13104))+((r11*x13110)));
evalcond[2]=((((-1.0)*x13106*x13109))+((r21*x13111))+(((-1.0)*r22*x13108)));
evalcond[3]=((((-1.0)*r02*x13108))+(((-1.0)*x13105*x13109))+((r01*x13111)));
evalcond[4]=((-1.0)+((r02*x13104))+(((-1.0)*x13105*x13108))+((r01*x13110)));
evalcond[5]=((1.0)+(((-1.0)*x13107*x13109))+(((-1.0)*r12*x13108))+((r11*x13111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13112 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13112.valid){
continue;
}
CheckValue<IkReal> x13113=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13112.value)+(((1.5707963267949)*(x13113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13114=IKcos(j4);
IkReal x13115=IKsin(j4);
IkReal x13116=(cj5*r00);
IkReal x13117=(cj5*r20);
IkReal x13118=(cj5*r10);
IkReal x13119=((1.0)*x13114);
IkReal x13120=((1.0)*x13115);
IkReal x13121=(sj5*x13114);
IkReal x13122=(sj5*x13115);
evalcond[0]=(((r22*x13115))+((r21*x13121))+(((-1.0)*x13117*x13119)));
evalcond[1]=(((r12*x13115))+((r11*x13121))+(((-1.0)*x13118*x13119)));
evalcond[2]=((((-1.0)*x13117*x13120))+((r21*x13122))+(((-1.0)*r22*x13119)));
evalcond[3]=(((r01*x13122))+(((-1.0)*r02*x13119))+(((-1.0)*x13116*x13120)));
evalcond[4]=((-1.0)+((r02*x13115))+(((-1.0)*x13116*x13119))+((r01*x13121)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13119))+((r11*x13122))+(((-1.0)*x13118*x13120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13123=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13123);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13123);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13124=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13124);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13124);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13125=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13125)));
j4eval[1]=((((-1.0)*r00*x13125))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13126=((1.0)*cj5);
CheckValue<IkReal> x13127=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13126))),-1);
if(!x13127.valid){
continue;
}
CheckValue<IkReal> x13128=IKPowWithIntegerCheck(((((-1.0)*r00*x13126))+((r01*sj5))),-1);
if(!x13128.valid){
continue;
}
if( IKabs(((-1.0)*(x13127.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13128.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13127.value)))+IKsqr(((x13128.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13127.value)), ((x13128.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13129=IKsin(j4);
IkReal x13130=IKcos(j4);
IkReal x13131=((1.0)*cj5);
IkReal x13132=((1.0)*cj2);
IkReal x13133=(sj5*x13130);
IkReal x13134=(sj5*x13129);
evalcond[0]=((-1.0)*r22*x13130);
evalcond[1]=((((-1.0)*cj1*x13132))+((sj1*sj2))+((r22*x13129)));
evalcond[2]=(((r01*x13134))+(((-1.0)*r00*x13129*x13131)));
evalcond[3]=((((-1.0)*r10*x13130*x13131))+((r11*x13133)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13129*x13131))+((r11*x13134)));
evalcond[5]=(((r01*x13133))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13132))+(((-1.0)*r00*x13130*x13131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13135=IKPowWithIntegerCheck(r22,-1);
if(!x13135.valid){
continue;
}
CheckValue<IkReal> x13136=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13136.valid){
continue;
}
if( IKabs(((x13135.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13136.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13135.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13136.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13135.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13136.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13137=IKsin(j4);
IkReal x13138=IKcos(j4);
IkReal x13139=((1.0)*cj5);
IkReal x13140=((1.0)*cj2);
IkReal x13141=(sj5*x13138);
IkReal x13142=(sj5*x13137);
evalcond[0]=((-1.0)*r22*x13138);
evalcond[1]=(((sj1*sj2))+(((-1.0)*cj1*x13140))+((r22*x13137)));
evalcond[2]=(((r01*x13142))+(((-1.0)*r00*x13137*x13139)));
evalcond[3]=(((r11*x13141))+(((-1.0)*r10*x13138*x13139)));
evalcond[4]=((1.0)+((r11*x13142))+(((-1.0)*r10*x13137*x13139)));
evalcond[5]=((((-1.0)*sj1*x13140))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13138*x13139))+((r01*x13141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13143=(sj1*sj2);
IkReal x13144=(cj5*r10);
IkReal x13145=(r11*sj5);
IkReal x13146=(cj1*cj2);
CheckValue<IkReal> x13147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13147.valid){
continue;
}
CheckValue<IkReal> x13148 = IKatan2WithCheck(IkReal((((x13143*x13145))+((x13144*x13146))+(((-1.0)*x13143*x13144))+(((-1.0)*x13145*x13146)))),IkReal((((r12*x13146))+(((-1.0)*r12*x13143)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13147.value)))+(x13148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13149=IKcos(j4);
IkReal x13150=IKsin(j4);
IkReal x13151=(cj5*r00);
IkReal x13152=(cj5*r10);
IkReal x13153=(r21*sj5);
IkReal x13154=((1.0)*cj2);
IkReal x13155=(cj5*r20);
IkReal x13156=((1.0)*x13149);
IkReal x13157=((1.0)*x13150);
IkReal x13158=(sj5*x13150);
IkReal x13159=(sj5*x13149);
evalcond[0]=((((-1.0)*x13152*x13156))+((r11*x13159))+((r12*x13150)));
evalcond[1]=(((x13150*x13153))+(((-1.0)*r22*x13156))+(((-1.0)*x13155*x13157)));
evalcond[2]=((((-1.0)*x13151*x13157))+(((-1.0)*r02*x13156))+((r01*x13158)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13156))+(((-1.0)*x13152*x13157))+((r11*x13158)));
evalcond[4]=(((x13149*x13153))+((sj1*sj2))+(((-1.0)*cj1*x13154))+(((-1.0)*x13155*x13156))+((r22*x13150)));
evalcond[5]=((((-1.0)*sj1*x13154))+(((-1.0)*x13151*x13156))+((r02*x13150))+(((-1.0)*cj1*sj2))+((r01*x13159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13160=((1.0)*cj5);
CheckValue<IkReal> x13161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13160))+(((-1.0)*r00*sj5)))),-1);
if(!x13161.valid){
continue;
}
CheckValue<IkReal> x13162 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13160))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13161.value)))+(x13162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13163=IKcos(j4);
IkReal x13164=IKsin(j4);
IkReal x13165=(cj5*r00);
IkReal x13166=(cj5*r10);
IkReal x13167=(r21*sj5);
IkReal x13168=((1.0)*cj2);
IkReal x13169=(cj5*r20);
IkReal x13170=((1.0)*x13163);
IkReal x13171=((1.0)*x13164);
IkReal x13172=(sj5*x13164);
IkReal x13173=(sj5*x13163);
evalcond[0]=((((-1.0)*x13166*x13170))+((r11*x13173))+((r12*x13164)));
evalcond[1]=((((-1.0)*x13169*x13171))+(((-1.0)*r22*x13170))+((x13164*x13167)));
evalcond[2]=(((r01*x13172))+(((-1.0)*r02*x13170))+(((-1.0)*x13165*x13171)));
evalcond[3]=((1.0)+(((-1.0)*x13166*x13171))+(((-1.0)*r12*x13170))+((r11*x13172)));
evalcond[4]=((((-1.0)*cj1*x13168))+(((-1.0)*x13169*x13170))+((r22*x13164))+((sj1*sj2))+((x13163*x13167)));
evalcond[5]=(((r01*x13173))+(((-1.0)*sj1*x13168))+(((-1.0)*cj1*sj2))+((r02*x13164))+(((-1.0)*x13165*x13170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13174=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13174.valid){
continue;
}
CheckValue<IkReal> x13175 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13174.value)))+(x13175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13176=IKcos(j4);
IkReal x13177=IKsin(j4);
IkReal x13178=(cj5*r00);
IkReal x13179=(cj5*r10);
IkReal x13180=(r21*sj5);
IkReal x13181=((1.0)*cj2);
IkReal x13182=(cj5*r20);
IkReal x13183=((1.0)*x13176);
IkReal x13184=((1.0)*x13177);
IkReal x13185=(sj5*x13177);
IkReal x13186=(sj5*x13176);
evalcond[0]=((((-1.0)*x13179*x13183))+((r11*x13186))+((r12*x13177)));
evalcond[1]=((((-1.0)*x13182*x13184))+(((-1.0)*r22*x13183))+((x13177*x13180)));
evalcond[2]=((((-1.0)*x13178*x13184))+(((-1.0)*r02*x13183))+((r01*x13185)));
evalcond[3]=((1.0)+(((-1.0)*x13179*x13184))+(((-1.0)*r12*x13183))+((r11*x13185)));
evalcond[4]=((((-1.0)*x13182*x13183))+((sj1*sj2))+(((-1.0)*cj1*x13181))+((r22*x13177))+((x13176*x13180)));
evalcond[5]=((((-1.0)*x13178*x13183))+(((-1.0)*cj1*sj2))+((r01*x13186))+((r02*x13177))+(((-1.0)*sj1*x13181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13187=((-1.0)*r00);
IkReal x13189 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13189)==0){
continue;
}
IkReal x13188=pow(x13189,-0.5);
CheckValue<IkReal> x13190 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13187),IKFAST_ATAN2_MAGTHRESH);
if(!x13190.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13190.value));
IkReal gconst19=(r01*x13188);
IkReal gconst20=(x13187*x13188);
CheckValue<IkReal> x13191 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13191.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13191.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13192=((-1.0)*r00);
IkReal x13193=x13188;
CheckValue<IkReal> x13195 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13192),IKFAST_ATAN2_MAGTHRESH);
if(!x13195.valid){
continue;
}
IkReal x13194=((-1.0)*(x13195.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13194;
IkReal gconst18=x13194;
IkReal gconst19=(r01*x13193);
IkReal gconst20=(x13192*x13193);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13196=((-1.0)*r00);
IkReal x13197=x13188;
CheckValue<IkReal> x13199 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13196),IKFAST_ATAN2_MAGTHRESH);
if(!x13199.valid){
continue;
}
IkReal x13198=((-1.0)*(x13199.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13198;
IkReal gconst18=x13198;
IkReal gconst19=(r01*x13197);
IkReal gconst20=(x13196*x13197);
CheckValue<IkReal> x13207=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13207.valid){
continue;
}
IkReal x13200=x13207.value;
IkReal x13201=(sj3*x13200);
IkReal x13202=(r11*x13201);
IkReal x13203=(r21*x13201);
IkReal x13204=(r20*x13201);
IkReal x13205=(r10*x13201);
IkReal x13206=(r00*r01*x13201);
j4eval[0]=IKsign((((r10*x13204*(r00*r00)))+((r21*x13202*(r01*r01)))+((r12*r22*sj3))+((r00*r01*r10*x13203))+((r00*r01*r20*x13202))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13208=gconst19*gconst19;
IkReal x13209=gconst20*gconst20;
IkReal x13210=(gconst20*sj3);
IkReal x13211=((1.0)*cj3);
IkReal x13212=(r10*sj3);
IkReal x13213=(gconst19*r21);
IkReal x13214=(r11*r20);
IkReal x13215=(cj3*gconst20);
IkReal x13216=((1.0)*r10*r20);
IkReal x13217=(r21*x13208);
CheckValue<IkReal> x13218=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13211*x13217))+((r10*x13213*x13215))+((gconst19*x13214*x13215))+(((-1.0)*r12*r22*x13211))+(((-1.0)*r10*r20*x13209*x13211)))),-1);
if(!x13218.valid){
continue;
}
CheckValue<IkReal> x13219 = IKatan2WithCheck(IkReal((((gconst19*r22*x13212))+((r11*r22*x13210)))),IkReal((((r11*x13210*x13213))+(((-1.0)*gconst19*x13210*x13216))+(((-1.0)*sj3*x13209*x13214))+((x13212*x13217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13218.value)))+(x13219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13220=IKsin(j4);
IkReal x13221=IKcos(j4);
IkReal x13222=(sj1*sj2);
IkReal x13223=(gconst20*sj3);
IkReal x13224=(gconst19*r21);
IkReal x13225=(gconst20*r10);
IkReal x13226=(cj3*gconst19);
IkReal x13227=(gconst19*sj3);
IkReal x13228=((1.0)*cj1);
IkReal x13229=(cj3*gconst20);
IkReal x13230=(cj2*sj1);
IkReal x13231=(cj2*x13228);
IkReal x13232=((1.0)*x13221);
IkReal x13233=((1.0)*x13220);
IkReal x13234=(cj3*x13220);
IkReal x13235=(gconst19*x13220);
evalcond[0]=((((-1.0)*gconst20*r20*x13233))+((x13220*x13224))+(((-1.0)*r22*x13232)));
evalcond[1]=(((r01*x13235))+(((-1.0)*r02*x13232))+(((-1.0)*gconst20*r00*x13233)));
evalcond[2]=((1.0)+(((-1.0)*x13225*x13233))+(((-1.0)*r12*x13232))+((r11*x13235)));
evalcond[3]=(((r11*x13221*x13226))+(((-1.0)*cj3*x13225*x13232))+((r10*x13227))+((r11*x13223))+((r12*x13234)));
evalcond[4]=((((-1.0)*r11*x13227*x13232))+((r10*x13221*x13223))+((r10*x13226))+((r11*x13229))+(((-1.0)*r12*sj3*x13233)));
evalcond[5]=((((-1.0)*r20*x13229*x13232))+((r21*x13223))+((cj1*sj2))+((r22*x13234))+((cj3*x13221*x13224))+x13230+((r20*x13227)));
evalcond[6]=(((r02*x13234))+((r00*x13227))+(((-1.0)*r00*x13229*x13232))+((r01*x13223))+x13222+(((-1.0)*x13231))+((r01*x13221*x13226)));
evalcond[7]=((((-1.0)*r22*sj3*x13233))+((r21*x13229))+(((-1.0)*sj3*x13224*x13232))+x13222+((r20*x13226))+(((-1.0)*x13231))+((r20*x13221*x13223)));
evalcond[8]=((((-1.0)*r01*x13227*x13232))+(((-1.0)*sj2*x13228))+((r00*x13226))+((r00*x13221*x13223))+((r01*x13229))+(((-1.0)*x13230))+(((-1.0)*r02*sj3*x13233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13236=gconst19*gconst19;
IkReal x13237=gconst20*gconst20;
IkReal x13238=(r21*sj3);
IkReal x13239=(cj3*r11);
IkReal x13240=(gconst19*gconst20);
IkReal x13241=((1.0)*r10);
IkReal x13242=(cj3*r10);
IkReal x13243=(r20*x13237);
CheckValue<IkReal> x13244 = IKatan2WithCheck(IkReal((((gconst20*r22*x13239))+((gconst19*r22*x13242)))),IkReal(((((-1.0)*cj3*r20*x13240*x13241))+(((-1.0)*x13239*x13243))+((r21*x13239*x13240))+((r21*x13236*x13242)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13244.valid){
continue;
}
CheckValue<IkReal> x13245=IKPowWithIntegerCheck(IKsign((((r11*x13236*x13238))+((r12*r22*sj3))+(((-1.0)*x13238*x13240*x13241))+((r10*sj3*x13243))+(((-1.0)*r11*r20*sj3*x13240)))),-1);
if(!x13245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13244.value)+(((1.5707963267949)*(x13245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13246=IKsin(j4);
IkReal x13247=IKcos(j4);
IkReal x13248=(sj1*sj2);
IkReal x13249=(gconst20*sj3);
IkReal x13250=(gconst19*r21);
IkReal x13251=(gconst20*r10);
IkReal x13252=(cj3*gconst19);
IkReal x13253=(gconst19*sj3);
IkReal x13254=((1.0)*cj1);
IkReal x13255=(cj3*gconst20);
IkReal x13256=(cj2*sj1);
IkReal x13257=(cj2*x13254);
IkReal x13258=((1.0)*x13247);
IkReal x13259=((1.0)*x13246);
IkReal x13260=(cj3*x13246);
IkReal x13261=(gconst19*x13246);
evalcond[0]=(((x13246*x13250))+(((-1.0)*r22*x13258))+(((-1.0)*gconst20*r20*x13259)));
evalcond[1]=((((-1.0)*r02*x13258))+((r01*x13261))+(((-1.0)*gconst20*r00*x13259)));
evalcond[2]=((1.0)+((r11*x13261))+(((-1.0)*x13251*x13259))+(((-1.0)*r12*x13258)));
evalcond[3]=(((r10*x13253))+((r12*x13260))+(((-1.0)*cj3*x13251*x13258))+((r11*x13247*x13252))+((r11*x13249)));
evalcond[4]=(((r10*x13252))+((r10*x13247*x13249))+(((-1.0)*r12*sj3*x13259))+((r11*x13255))+(((-1.0)*r11*x13253*x13258)));
evalcond[5]=(((r21*x13249))+((cj1*sj2))+((cj3*x13247*x13250))+(((-1.0)*r20*x13255*x13258))+((r22*x13260))+x13256+((r20*x13253)));
evalcond[6]=(((r01*x13247*x13252))+((r01*x13249))+((r00*x13253))+(((-1.0)*r00*x13255*x13258))+((r02*x13260))+(((-1.0)*x13257))+x13248);
evalcond[7]=(((r21*x13255))+(((-1.0)*r22*sj3*x13259))+((r20*x13247*x13249))+(((-1.0)*x13257))+x13248+((r20*x13252))+(((-1.0)*sj3*x13250*x13258)));
evalcond[8]=((((-1.0)*x13256))+(((-1.0)*r02*sj3*x13259))+((r00*x13247*x13249))+((r01*x13255))+(((-1.0)*r01*x13253*x13258))+((r00*x13252))+(((-1.0)*sj2*x13254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13262 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13262.valid){
continue;
}
CheckValue<IkReal> x13263=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13262.value)+(((1.5707963267949)*(x13263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13264=IKsin(j4);
IkReal x13265=IKcos(j4);
IkReal x13266=(sj1*sj2);
IkReal x13267=(gconst20*sj3);
IkReal x13268=(gconst19*r21);
IkReal x13269=(gconst20*r10);
IkReal x13270=(cj3*gconst19);
IkReal x13271=(gconst19*sj3);
IkReal x13272=((1.0)*cj1);
IkReal x13273=(cj3*gconst20);
IkReal x13274=(cj2*sj1);
IkReal x13275=(cj2*x13272);
IkReal x13276=((1.0)*x13265);
IkReal x13277=((1.0)*x13264);
IkReal x13278=(cj3*x13264);
IkReal x13279=(gconst19*x13264);
evalcond[0]=((((-1.0)*r22*x13276))+(((-1.0)*gconst20*r20*x13277))+((x13264*x13268)));
evalcond[1]=((((-1.0)*gconst20*r00*x13277))+((r01*x13279))+(((-1.0)*r02*x13276)));
evalcond[2]=((1.0)+(((-1.0)*x13269*x13277))+((r11*x13279))+(((-1.0)*r12*x13276)));
evalcond[3]=(((r11*x13267))+((r12*x13278))+((r11*x13265*x13270))+((r10*x13271))+(((-1.0)*cj3*x13269*x13276)));
evalcond[4]=(((r11*x13273))+((r10*x13270))+((r10*x13265*x13267))+(((-1.0)*r11*x13271*x13276))+(((-1.0)*r12*sj3*x13277)));
evalcond[5]=(((r21*x13267))+((r20*x13271))+((cj1*sj2))+((cj3*x13265*x13268))+((r22*x13278))+x13274+(((-1.0)*r20*x13273*x13276)));
evalcond[6]=((((-1.0)*x13275))+(((-1.0)*r00*x13273*x13276))+((r01*x13267))+((r00*x13271))+((r02*x13278))+((r01*x13265*x13270))+x13266);
evalcond[7]=((((-1.0)*sj3*x13268*x13276))+(((-1.0)*x13275))+((r21*x13273))+((r20*x13270))+((r20*x13265*x13267))+(((-1.0)*r22*sj3*x13277))+x13266);
evalcond[8]=((((-1.0)*r01*x13271*x13276))+(((-1.0)*x13274))+((r01*x13273))+(((-1.0)*sj2*x13272))+((r00*x13270))+(((-1.0)*r02*sj3*x13277))+((r00*x13265*x13267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13280=((-1.0)*r01);
IkReal x13282 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13282)==0){
continue;
}
IkReal x13281=pow(x13282,-0.5);
CheckValue<IkReal> x13283 = IKatan2WithCheck(IkReal(x13280),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13283.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13283.value))));
IkReal gconst22=(x13280*x13281);
IkReal gconst23=((1.0)*r00*x13281);
CheckValue<IkReal> x13284 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13284.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13284.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13285=((-1.0)*r01);
CheckValue<IkReal> x13288 = IKatan2WithCheck(IkReal(x13285),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13288.valid){
continue;
}
IkReal x13286=((1.0)*(x13288.value));
IkReal x13287=x13281;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13286)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13286)));
IkReal gconst22=(x13285*x13287);
IkReal gconst23=((1.0)*r00*x13287);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13289=((-1.0)*r01);
CheckValue<IkReal> x13292 = IKatan2WithCheck(IkReal(x13289),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13292.valid){
continue;
}
IkReal x13290=((1.0)*(x13292.value));
IkReal x13291=x13281;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13290)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13290)));
IkReal gconst22=(x13289*x13291);
IkReal gconst23=((1.0)*r00*x13291);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13293=gconst22*gconst22;
IkReal x13294=gconst23*gconst23;
IkReal x13295=(r21*sj3);
IkReal x13296=((1.0)*cj3);
IkReal x13297=(gconst23*r11);
IkReal x13298=(r22*sj3);
IkReal x13299=(gconst22*r10);
IkReal x13300=((1.0)*r20*sj3);
CheckValue<IkReal> x13301=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13296))+(((-1.0)*r10*r20*x13294*x13296))+((cj3*gconst23*r21*x13299))+((cj3*gconst22*r20*x13297))+(((-1.0)*r11*r21*x13293*x13296)))),-1);
if(!x13301.valid){
continue;
}
CheckValue<IkReal> x13302 = IKatan2WithCheck(IkReal((((x13298*x13299))+((x13297*x13298)))),IkReal((((gconst22*x13295*x13297))+(((-1.0)*r11*x13294*x13300))+(((-1.0)*gconst23*x13299*x13300))+((r10*x13293*x13295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13301.value)))+(x13302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13303=IKsin(j4);
IkReal x13304=IKcos(j4);
IkReal x13305=(sj1*sj2);
IkReal x13306=(gconst23*sj3);
IkReal x13307=(gconst22*sj3);
IkReal x13308=(cj2*sj1);
IkReal x13309=((1.0)*cj1);
IkReal x13310=(cj3*gconst23);
IkReal x13311=(cj3*gconst22);
IkReal x13312=(cj2*x13309);
IkReal x13313=((1.0)*x13304);
IkReal x13314=(cj3*x13303);
IkReal x13315=(gconst22*x13303);
IkReal x13316=((1.0)*sj3*x13303);
IkReal x13317=(x13304*x13311);
IkReal x13318=((1.0)*gconst23*x13303);
evalcond[0]=((((-1.0)*r20*x13318))+((r21*x13315))+(((-1.0)*r22*x13313)));
evalcond[1]=(((r01*x13315))+(((-1.0)*r02*x13313))+(((-1.0)*r00*x13318)));
evalcond[2]=((1.0)+((r11*x13315))+(((-1.0)*r10*x13318))+(((-1.0)*r12*x13313)));
evalcond[3]=((((-1.0)*r10*x13310*x13313))+((r11*x13317))+((r10*x13307))+((r11*x13306))+((r12*x13314)));
evalcond[4]=(((r11*x13310))+((r10*x13311))+(((-1.0)*r11*x13307*x13313))+((r10*x13304*x13306))+(((-1.0)*r12*x13316)));
evalcond[5]=((((-1.0)*r20*x13310*x13313))+((r21*x13306))+((r20*x13307))+((cj1*sj2))+((r22*x13314))+((r21*x13317))+x13308);
evalcond[6]=(((r01*x13317))+((r00*x13307))+((r01*x13306))+(((-1.0)*r00*x13310*x13313))+(((-1.0)*x13312))+x13305+((r02*x13314)));
evalcond[7]=(((r20*x13311))+(((-1.0)*r21*x13307*x13313))+((r20*x13304*x13306))+(((-1.0)*x13312))+((r21*x13310))+x13305+(((-1.0)*r22*x13316)));
evalcond[8]=(((r00*x13304*x13306))+((r01*x13310))+((r00*x13311))+(((-1.0)*r02*x13316))+(((-1.0)*r01*x13307*x13313))+(((-1.0)*sj2*x13309))+(((-1.0)*x13308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13319=((1.0)*gconst23);
CheckValue<IkReal> x13320 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13319))+((gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13320.valid){
continue;
}
CheckValue<IkReal> x13321=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13319)))),-1);
if(!x13321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13320.value)+(((1.5707963267949)*(x13321.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13322=IKsin(j4);
IkReal x13323=IKcos(j4);
IkReal x13324=(sj1*sj2);
IkReal x13325=(gconst23*sj3);
IkReal x13326=(gconst22*sj3);
IkReal x13327=(cj2*sj1);
IkReal x13328=((1.0)*cj1);
IkReal x13329=(cj3*gconst23);
IkReal x13330=(cj3*gconst22);
IkReal x13331=(cj2*x13328);
IkReal x13332=((1.0)*x13323);
IkReal x13333=(cj3*x13322);
IkReal x13334=(gconst22*x13322);
IkReal x13335=((1.0)*sj3*x13322);
IkReal x13336=(x13323*x13330);
IkReal x13337=((1.0)*gconst23*x13322);
evalcond[0]=((((-1.0)*r22*x13332))+((r21*x13334))+(((-1.0)*r20*x13337)));
evalcond[1]=((((-1.0)*r00*x13337))+((r01*x13334))+(((-1.0)*r02*x13332)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13332))+(((-1.0)*r10*x13337))+((r11*x13334)));
evalcond[3]=(((r10*x13326))+(((-1.0)*r10*x13329*x13332))+((r11*x13325))+((r12*x13333))+((r11*x13336)));
evalcond[4]=((((-1.0)*r11*x13326*x13332))+((r10*x13330))+(((-1.0)*r12*x13335))+((r10*x13323*x13325))+((r11*x13329)));
evalcond[5]=(((r22*x13333))+((cj1*sj2))+((r20*x13326))+(((-1.0)*r20*x13329*x13332))+((r21*x13336))+((r21*x13325))+x13327);
evalcond[6]=((((-1.0)*x13331))+((r02*x13333))+(((-1.0)*r00*x13329*x13332))+((r01*x13336))+((r00*x13326))+((r01*x13325))+x13324);
evalcond[7]=((((-1.0)*x13331))+(((-1.0)*r22*x13335))+((r20*x13323*x13325))+((r20*x13330))+(((-1.0)*r21*x13326*x13332))+((r21*x13329))+x13324);
evalcond[8]=((((-1.0)*x13327))+((r00*x13330))+((r01*x13329))+(((-1.0)*r01*x13326*x13332))+((r00*x13323*x13325))+(((-1.0)*sj2*x13328))+(((-1.0)*r02*x13335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13338=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13338.valid){
continue;
}
CheckValue<IkReal> x13339 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13338.value)))+(x13339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13340=IKsin(j4);
IkReal x13341=IKcos(j4);
IkReal x13342=(sj1*sj2);
IkReal x13343=(gconst23*sj3);
IkReal x13344=(gconst22*sj3);
IkReal x13345=(cj2*sj1);
IkReal x13346=((1.0)*cj1);
IkReal x13347=(cj3*gconst23);
IkReal x13348=(cj3*gconst22);
IkReal x13349=(cj2*x13346);
IkReal x13350=((1.0)*x13341);
IkReal x13351=(cj3*x13340);
IkReal x13352=(gconst22*x13340);
IkReal x13353=((1.0)*sj3*x13340);
IkReal x13354=(x13341*x13348);
IkReal x13355=((1.0)*gconst23*x13340);
evalcond[0]=((((-1.0)*r22*x13350))+((r21*x13352))+(((-1.0)*r20*x13355)));
evalcond[1]=((((-1.0)*r02*x13350))+(((-1.0)*r00*x13355))+((r01*x13352)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13350))+((r11*x13352))+(((-1.0)*r10*x13355)));
evalcond[3]=((((-1.0)*r10*x13347*x13350))+((r10*x13344))+((r11*x13343))+((r11*x13354))+((r12*x13351)));
evalcond[4]=((((-1.0)*r11*x13344*x13350))+(((-1.0)*r12*x13353))+((r10*x13348))+((r11*x13347))+((r10*x13341*x13343)));
evalcond[5]=(((r22*x13351))+((cj1*sj2))+((r21*x13343))+((r21*x13354))+((r20*x13344))+(((-1.0)*r20*x13347*x13350))+x13345);
evalcond[6]=(((r02*x13351))+(((-1.0)*r00*x13347*x13350))+(((-1.0)*x13349))+((r01*x13354))+((r00*x13344))+((r01*x13343))+x13342);
evalcond[7]=((((-1.0)*r22*x13353))+(((-1.0)*x13349))+((r21*x13347))+(((-1.0)*r21*x13344*x13350))+((r20*x13341*x13343))+((r20*x13348))+x13342);
evalcond[8]=((((-1.0)*r02*x13353))+(((-1.0)*sj2*x13346))+(((-1.0)*x13345))+(((-1.0)*r01*x13344*x13350))+((r00*x13341*x13343))+((r00*x13348))+((r01*x13347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13357 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13357)==0){
continue;
}
IkReal x13356=pow(x13357,-0.5);
CheckValue<IkReal> x13358 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13358.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13358.value));
IkReal gconst25=((-1.0)*r21*x13356);
IkReal gconst26=(r20*x13356);
CheckValue<IkReal> x13359 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13359.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13359.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13362 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13362.valid){
continue;
}
IkReal x13360=((-1.0)*(x13362.value));
IkReal x13361=x13356;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13360;
IkReal gconst24=x13360;
IkReal gconst25=((-1.0)*r21*x13361);
IkReal gconst26=(r20*x13361);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13365 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13365.valid){
continue;
}
IkReal x13363=((-1.0)*(x13365.value));
IkReal x13364=x13356;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13363;
IkReal gconst24=x13363;
IkReal gconst25=((-1.0)*r21*x13364);
IkReal gconst26=(r20*x13364);
CheckValue<IkReal> x13373=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13373.valid){
continue;
}
IkReal x13366=x13373.value;
IkReal x13367=(sj3*x13366);
IkReal x13368=(r11*x13367);
IkReal x13369=(r00*x13367);
IkReal x13370=(r01*x13367);
IkReal x13371=(r10*x13367);
IkReal x13372=(r20*r21*x13367);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x13369*(r20*r20)))+((r00*r20*r21*x13368))+((r10*r20*r21*x13370))+((r01*x13368*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13374=gconst25*gconst25;
IkReal x13375=gconst26*gconst26;
IkReal x13376=(r00*r11);
IkReal x13377=(r01*r10);
IkReal x13378=(r02*sj3);
IkReal x13379=(gconst25*r10);
IkReal x13380=(gconst26*r11);
IkReal x13381=((1.0)*sj3);
IkReal x13382=((1.0)*cj3);
IkReal x13383=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13384 = IKatan2WithCheck(IkReal((((x13378*x13380))+((x13378*x13379)))),IkReal(((((-1.0)*gconst26*r00*x13379*x13381))+((sj3*x13374*x13377))+(((-1.0)*x13375*x13376*x13381))+((gconst25*r01*sj3*x13380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13384.valid){
continue;
}
CheckValue<IkReal> x13385=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x13382))+(((-1.0)*r01*r11*x13374*x13382))+((x13377*x13383))+((x13376*x13383))+(((-1.0)*r00*r10*x13375*x13382)))),-1);
if(!x13385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13384.value)+(((1.5707963267949)*(x13385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13386=IKsin(j4);
IkReal x13387=IKcos(j4);
IkReal x13388=(sj1*sj2);
IkReal x13389=(gconst26*sj3);
IkReal x13390=(gconst25*sj3);
IkReal x13391=(gconst26*r10);
IkReal x13392=(gconst25*r11);
IkReal x13393=(cj3*gconst25);
IkReal x13394=((1.0)*cj2);
IkReal x13395=(cj1*sj2);
IkReal x13396=(gconst26*r00);
IkReal x13397=(gconst26*r20);
IkReal x13398=(cj3*gconst26);
IkReal x13399=(cj1*x13394);
IkReal x13400=((1.0)*x13387);
IkReal x13401=((1.0)*x13386);
IkReal x13402=(cj3*x13386);
IkReal x13403=(gconst25*x13386);
evalcond[0]=((((-1.0)*x13397*x13401))+((r21*x13403))+(((-1.0)*r22*x13400)));
evalcond[1]=((((-1.0)*r02*x13400))+((r01*x13403))+(((-1.0)*x13396*x13401)));
evalcond[2]=((1.0)+((x13386*x13392))+(((-1.0)*r12*x13400))+(((-1.0)*x13391*x13401)));
evalcond[3]=(((r11*x13389))+((r10*x13390))+((r12*x13402))+((cj3*x13387*x13392))+(((-1.0)*cj3*x13391*x13400)));
evalcond[4]=(((r11*x13398))+((r10*x13393))+(((-1.0)*r11*x13390*x13400))+(((-1.0)*r12*sj3*x13401))+((r10*x13387*x13389)));
evalcond[5]=(((cj2*sj1))+((r21*x13387*x13393))+((r20*x13390))+((r22*x13402))+(((-1.0)*cj3*x13397*x13400))+x13395+((r21*x13389)));
evalcond[6]=(((r00*x13390))+((r01*x13389))+((r01*x13387*x13393))+((r02*x13402))+(((-1.0)*x13399))+(((-1.0)*cj3*x13396*x13400))+x13388);
evalcond[7]=(((r21*x13398))+(((-1.0)*r22*sj3*x13401))+((r20*x13393))+(((-1.0)*r21*x13390*x13400))+(((-1.0)*x13399))+x13388+((r20*x13387*x13389)));
evalcond[8]=((((-1.0)*x13395))+((r00*x13387*x13389))+(((-1.0)*r01*x13390*x13400))+(((-1.0)*r02*sj3*x13401))+((r00*x13393))+((r01*x13398))+(((-1.0)*sj1*x13394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13404=gconst26*gconst26;
IkReal x13405=gconst25*gconst25;
IkReal x13406=(r01*r10);
IkReal x13407=(cj3*r11);
IkReal x13408=(gconst25*gconst26);
IkReal x13409=(cj3*r10);
IkReal x13410=(r00*x13404);
IkReal x13411=((1.0)*sj3*x13408);
CheckValue<IkReal> x13412 = IKatan2WithCheck(IkReal((((gconst25*r02*x13409))+((gconst26*r02*x13407)))),IkReal((((cj3*x13405*x13406))+((r01*x13407*x13408))+(((-1.0)*r00*x13408*x13409))+(((-1.0)*x13407*x13410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13412.valid){
continue;
}
CheckValue<IkReal> x13413=IKPowWithIntegerCheck(IKsign((((r10*sj3*x13410))+((r02*r12*sj3))+((r01*r11*sj3*x13405))+(((-1.0)*x13406*x13411))+(((-1.0)*r00*r11*x13411)))),-1);
if(!x13413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13412.value)+(((1.5707963267949)*(x13413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13414=IKsin(j4);
IkReal x13415=IKcos(j4);
IkReal x13416=(sj1*sj2);
IkReal x13417=(gconst26*sj3);
IkReal x13418=(gconst25*sj3);
IkReal x13419=(gconst26*r10);
IkReal x13420=(gconst25*r11);
IkReal x13421=(cj3*gconst25);
IkReal x13422=((1.0)*cj2);
IkReal x13423=(cj1*sj2);
IkReal x13424=(gconst26*r00);
IkReal x13425=(gconst26*r20);
IkReal x13426=(cj3*gconst26);
IkReal x13427=(cj1*x13422);
IkReal x13428=((1.0)*x13415);
IkReal x13429=((1.0)*x13414);
IkReal x13430=(cj3*x13414);
IkReal x13431=(gconst25*x13414);
evalcond[0]=((((-1.0)*r22*x13428))+((r21*x13431))+(((-1.0)*x13425*x13429)));
evalcond[1]=(((r01*x13431))+(((-1.0)*r02*x13428))+(((-1.0)*x13424*x13429)));
evalcond[2]=((1.0)+((x13414*x13420))+(((-1.0)*r12*x13428))+(((-1.0)*x13419*x13429)));
evalcond[3]=(((cj3*x13415*x13420))+(((-1.0)*cj3*x13419*x13428))+((r12*x13430))+((r10*x13418))+((r11*x13417)));
evalcond[4]=((((-1.0)*r11*x13418*x13428))+((r10*x13415*x13417))+(((-1.0)*r12*sj3*x13429))+((r11*x13426))+((r10*x13421)));
evalcond[5]=(x13423+((cj2*sj1))+((r22*x13430))+((r20*x13418))+(((-1.0)*cj3*x13425*x13428))+((r21*x13417))+((r21*x13415*x13421)));
evalcond[6]=(x13416+((r02*x13430))+(((-1.0)*x13427))+((r01*x13417))+((r00*x13418))+(((-1.0)*cj3*x13424*x13428))+((r01*x13415*x13421)));
evalcond[7]=(x13416+(((-1.0)*x13427))+((r21*x13426))+((r20*x13415*x13417))+(((-1.0)*r22*sj3*x13429))+(((-1.0)*r21*x13418*x13428))+((r20*x13421)));
evalcond[8]=((((-1.0)*x13423))+(((-1.0)*r01*x13418*x13428))+(((-1.0)*r02*sj3*x13429))+(((-1.0)*sj1*x13422))+((r00*x13415*x13417))+((r00*x13421))+((r01*x13426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13432=((1.0)*gconst26);
CheckValue<IkReal> x13433 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13432))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13433.valid){
continue;
}
CheckValue<IkReal> x13434=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13432))+(((-1.0)*gconst25*r00)))),-1);
if(!x13434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13433.value)+(((1.5707963267949)*(x13434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13435=IKsin(j4);
IkReal x13436=IKcos(j4);
IkReal x13437=(sj1*sj2);
IkReal x13438=(gconst26*sj3);
IkReal x13439=(gconst25*sj3);
IkReal x13440=(gconst26*r10);
IkReal x13441=(gconst25*r11);
IkReal x13442=(cj3*gconst25);
IkReal x13443=((1.0)*cj2);
IkReal x13444=(cj1*sj2);
IkReal x13445=(gconst26*r00);
IkReal x13446=(gconst26*r20);
IkReal x13447=(cj3*gconst26);
IkReal x13448=(cj1*x13443);
IkReal x13449=((1.0)*x13436);
IkReal x13450=((1.0)*x13435);
IkReal x13451=(cj3*x13435);
IkReal x13452=(gconst25*x13435);
evalcond[0]=(((r21*x13452))+(((-1.0)*x13446*x13450))+(((-1.0)*r22*x13449)));
evalcond[1]=((((-1.0)*r02*x13449))+(((-1.0)*x13445*x13450))+((r01*x13452)));
evalcond[2]=((1.0)+((x13435*x13441))+(((-1.0)*r12*x13449))+(((-1.0)*x13440*x13450)));
evalcond[3]=(((r12*x13451))+((r11*x13438))+(((-1.0)*cj3*x13440*x13449))+((cj3*x13436*x13441))+((r10*x13439)));
evalcond[4]=(((r10*x13436*x13438))+(((-1.0)*r12*sj3*x13450))+((r10*x13442))+((r11*x13447))+(((-1.0)*r11*x13439*x13449)));
evalcond[5]=(x13444+((cj2*sj1))+((r21*x13436*x13442))+(((-1.0)*cj3*x13446*x13449))+((r21*x13438))+((r22*x13451))+((r20*x13439)));
evalcond[6]=(((r01*x13438))+x13437+(((-1.0)*x13448))+(((-1.0)*cj3*x13445*x13449))+((r02*x13451))+((r01*x13436*x13442))+((r00*x13439)));
evalcond[7]=(x13437+(((-1.0)*x13448))+((r20*x13436*x13438))+((r20*x13442))+((r21*x13447))+(((-1.0)*r22*sj3*x13450))+(((-1.0)*r21*x13439*x13449)));
evalcond[8]=((((-1.0)*r02*sj3*x13450))+(((-1.0)*r01*x13439*x13449))+((r00*x13442))+((r01*x13447))+((r00*x13436*x13438))+(((-1.0)*x13444))+(((-1.0)*sj1*x13443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13454 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13454)==0){
continue;
}
IkReal x13453=pow(x13454,-0.5);
CheckValue<IkReal> x13455 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13455.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13455.value))));
IkReal gconst28=((1.0)*r21*x13453);
IkReal gconst29=((-1.0)*r20*x13453);
CheckValue<IkReal> x13456 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13456.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13456.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13459 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13459.valid){
continue;
}
IkReal x13457=((1.0)*(x13459.value));
IkReal x13458=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13457)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13457)));
IkReal gconst28=((1.0)*r21*x13458);
IkReal gconst29=((-1.0)*r20*x13458);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13462 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13462.valid){
continue;
}
IkReal x13460=((1.0)*(x13462.value));
IkReal x13461=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13460)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13460)));
IkReal gconst28=((1.0)*r21*x13461);
IkReal gconst29=((-1.0)*r20*x13461);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13465 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13465.valid){
continue;
}
IkReal x13463=((1.0)*(x13465.value));
IkReal x13464=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13463)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13463)));
IkReal gconst28=((1.0)*r21*x13464);
IkReal gconst29=((-1.0)*r20*x13464);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13468 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13468.valid){
continue;
}
IkReal x13466=((1.0)*(x13468.value));
IkReal x13467=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13466)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13466)));
IkReal gconst28=((1.0)*r21*x13467);
IkReal gconst29=((-1.0)*r20*x13467);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13471 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13471.valid){
continue;
}
IkReal x13469=((1.0)*(x13471.value));
IkReal x13470=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13469)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13469)));
IkReal gconst28=((1.0)*r21*x13470);
IkReal gconst29=((-1.0)*r20*x13470);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13474 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13474.valid){
continue;
}
IkReal x13472=((1.0)*(x13474.value));
IkReal x13473=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13472)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13472)));
IkReal gconst28=((1.0)*r21*x13473);
IkReal gconst29=((-1.0)*r20*x13473);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13475=(gconst29*r10);
IkReal x13476=(gconst28*r11);
CheckValue<IkReal> x13477 = IKatan2WithCheck(IkReal((x13475+(((-1.0)*x13476)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13477.valid){
continue;
}
CheckValue<IkReal> x13478=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13475*x13476))+(x13475*x13475)+(x13476*x13476))),-1);
if(!x13478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13477.value)+(((1.5707963267949)*(x13478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13479=IKsin(j4);
IkReal x13480=IKcos(j4);
IkReal x13481=(gconst28*r11);
IkReal x13482=((1.0)*cj2);
IkReal x13483=((1.0)*x13480);
IkReal x13484=(gconst29*x13480);
IkReal x13485=(gconst28*x13479);
IkReal x13486=((1.0)*x13479);
IkReal x13487=(gconst29*x13486);
evalcond[0]=((((-1.0)*r20*x13487))+(((-1.0)*r22*x13483))+((r21*x13485)));
evalcond[1]=((((-1.0)*r00*x13487))+(((-1.0)*r02*x13483))+((r01*x13485)));
evalcond[2]=((((-1.0)*x13481*x13483))+(((-1.0)*r12*x13486))+((r10*x13484)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13483))+(((-1.0)*r10*x13487))+((x13479*x13481)));
evalcond[4]=((((-1.0)*r22*x13486))+((sj1*sj2))+((r20*x13484))+(((-1.0)*cj1*x13482))+(((-1.0)*gconst28*r21*x13483)));
evalcond[5]=((((-1.0)*sj1*x13482))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13486))+((r00*x13484))+(((-1.0)*gconst28*r01*x13483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13488=((1.0)*gconst29);
CheckValue<IkReal> x13489 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13488))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13489.valid){
continue;
}
CheckValue<IkReal> x13490=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13488))+(((-1.0)*gconst28*r00)))),-1);
if(!x13490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13489.value)+(((1.5707963267949)*(x13490.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13491=IKsin(j4);
IkReal x13492=IKcos(j4);
IkReal x13493=(gconst28*r11);
IkReal x13494=((1.0)*cj2);
IkReal x13495=((1.0)*x13492);
IkReal x13496=(gconst29*x13492);
IkReal x13497=(gconst28*x13491);
IkReal x13498=((1.0)*x13491);
IkReal x13499=(gconst29*x13498);
evalcond[0]=((((-1.0)*r20*x13499))+(((-1.0)*r22*x13495))+((r21*x13497)));
evalcond[1]=((((-1.0)*r00*x13499))+(((-1.0)*r02*x13495))+((r01*x13497)));
evalcond[2]=((((-1.0)*r12*x13498))+(((-1.0)*x13493*x13495))+((r10*x13496)));
evalcond[3]=((1.0)+((x13491*x13493))+(((-1.0)*r12*x13495))+(((-1.0)*r10*x13499)));
evalcond[4]=((((-1.0)*r22*x13498))+((sj1*sj2))+((r20*x13496))+(((-1.0)*gconst28*r21*x13495))+(((-1.0)*cj1*x13494)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x13498))+((r00*x13496))+(((-1.0)*gconst28*r01*x13495))+(((-1.0)*sj1*x13494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13500=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13500.valid){
continue;
}
CheckValue<IkReal> x13501 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13500.value)))+(x13501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13502=IKsin(j4);
IkReal x13503=IKcos(j4);
IkReal x13504=(gconst28*r11);
IkReal x13505=((1.0)*cj2);
IkReal x13506=((1.0)*x13503);
IkReal x13507=(gconst29*x13503);
IkReal x13508=(gconst28*x13502);
IkReal x13509=((1.0)*x13502);
IkReal x13510=(gconst29*x13509);
evalcond[0]=((((-1.0)*r20*x13510))+((r21*x13508))+(((-1.0)*r22*x13506)));
evalcond[1]=((((-1.0)*r00*x13510))+(((-1.0)*r02*x13506))+((r01*x13508)));
evalcond[2]=(((r10*x13507))+(((-1.0)*r12*x13509))+(((-1.0)*x13504*x13506)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13506))+(((-1.0)*r10*x13510))+((x13502*x13504)));
evalcond[4]=(((r20*x13507))+((sj1*sj2))+(((-1.0)*cj1*x13505))+(((-1.0)*gconst28*r21*x13506))+(((-1.0)*r22*x13509)));
evalcond[5]=((((-1.0)*sj1*x13505))+(((-1.0)*gconst28*r01*x13506))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13509))+((r00*x13507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13513 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13513.valid){
continue;
}
IkReal x13511=((1.0)*(x13513.value));
IkReal x13512=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13511)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13511)));
IkReal gconst28=((1.0)*r21*x13512);
IkReal gconst29=((-1.0)*r20*x13512);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13516 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13516.valid){
continue;
}
IkReal x13514=((1.0)*(x13516.value));
IkReal x13515=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13514)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13514)));
IkReal gconst28=((1.0)*r21*x13515);
IkReal gconst29=((-1.0)*r20*x13515);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13519 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13519.valid){
continue;
}
IkReal x13517=((1.0)*(x13519.value));
IkReal x13518=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13517)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13517)));
IkReal gconst28=((1.0)*r21*x13518);
IkReal gconst29=((-1.0)*r20*x13518);
IkReal x13520=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13524=IKPowWithIntegerCheck(x13520,-1);
if(!x13524.valid){
continue;
}
IkReal x13521=x13524.value;
IkReal x13522=((1.0)*x13521);
IkReal x13523=((((-1.0)*x13522*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13521))+(((-1.0)*(r12*r12)))+(((-1.0)*x13522*(r11*r11)*(r21*r21))));
j4eval[0]=x13523;
j4eval[1]=r12;
j4eval[2]=x13520;
j4eval[3]=IKsign(x13523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13525=(gconst28*r11);
IkReal x13526=(gconst29*r10);
CheckValue<IkReal> x13527 = IKatan2WithCheck(IkReal((x13525+(((-1.0)*x13526)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13527.valid){
continue;
}
CheckValue<IkReal> x13528=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13525*x13525)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13526*x13526)))+(((2.0)*x13525*x13526)))),-1);
if(!x13528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13527.value)+(((1.5707963267949)*(x13528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13529=IKcos(j4);
IkReal x13530=IKsin(j4);
IkReal x13531=(gconst29*r10);
IkReal x13532=(gconst29*r20);
IkReal x13533=(gconst28*r21);
IkReal x13534=((1.0)*cj2);
IkReal x13535=(gconst29*r00);
IkReal x13536=((1.0)*x13529);
IkReal x13537=((1.0)*x13530);
IkReal x13538=(gconst28*x13529);
IkReal x13539=(gconst28*x13530);
evalcond[0]=((((-1.0)*x13531*x13536))+((r12*x13530))+((r11*x13538)));
evalcond[1]=((((-1.0)*r22*x13536))+((x13530*x13533))+(((-1.0)*x13532*x13537)));
evalcond[2]=((((-1.0)*x13535*x13537))+(((-1.0)*r02*x13536))+((r01*x13539)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13536))+(((-1.0)*x13531*x13537))+((r11*x13539)));
evalcond[4]=((((-1.0)*cj1*x13534))+((sj1*sj2))+(((-1.0)*x13532*x13536))+((x13529*x13533))+((r22*x13530)));
evalcond[5]=((((-1.0)*sj1*x13534))+((r02*x13530))+(((-1.0)*x13535*x13536))+(((-1.0)*cj1*sj2))+((r01*x13538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13540=((1.0)*gconst29);
CheckValue<IkReal> x13541 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13541.valid){
continue;
}
CheckValue<IkReal> x13542=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13540))+(((-1.0)*gconst28*r00)))),-1);
if(!x13542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13541.value)+(((1.5707963267949)*(x13542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13543=IKcos(j4);
IkReal x13544=IKsin(j4);
IkReal x13545=(gconst29*r10);
IkReal x13546=(gconst29*r20);
IkReal x13547=(gconst28*r21);
IkReal x13548=((1.0)*cj2);
IkReal x13549=(gconst29*r00);
IkReal x13550=((1.0)*x13543);
IkReal x13551=((1.0)*x13544);
IkReal x13552=(gconst28*x13543);
IkReal x13553=(gconst28*x13544);
evalcond[0]=(((r12*x13544))+((r11*x13552))+(((-1.0)*x13545*x13550)));
evalcond[1]=(((x13544*x13547))+(((-1.0)*x13546*x13551))+(((-1.0)*r22*x13550)));
evalcond[2]=(((r01*x13553))+(((-1.0)*r02*x13550))+(((-1.0)*x13549*x13551)));
evalcond[3]=((1.0)+((r11*x13553))+(((-1.0)*x13545*x13551))+(((-1.0)*r12*x13550)));
evalcond[4]=(((r22*x13544))+((sj1*sj2))+(((-1.0)*x13546*x13550))+(((-1.0)*cj1*x13548))+((x13543*x13547)));
evalcond[5]=(((r01*x13552))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13548))+(((-1.0)*x13549*x13550))+((r02*x13544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13554=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13554.valid){
continue;
}
CheckValue<IkReal> x13555 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13554.value)))+(x13555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13556=IKcos(j4);
IkReal x13557=IKsin(j4);
IkReal x13558=(gconst29*r10);
IkReal x13559=(gconst29*r20);
IkReal x13560=(gconst28*r21);
IkReal x13561=((1.0)*cj2);
IkReal x13562=(gconst29*r00);
IkReal x13563=((1.0)*x13556);
IkReal x13564=((1.0)*x13557);
IkReal x13565=(gconst28*x13556);
IkReal x13566=(gconst28*x13557);
evalcond[0]=(((r12*x13557))+((r11*x13565))+(((-1.0)*x13558*x13563)));
evalcond[1]=(((x13557*x13560))+(((-1.0)*x13559*x13564))+(((-1.0)*r22*x13563)));
evalcond[2]=((((-1.0)*x13562*x13564))+((r01*x13566))+(((-1.0)*r02*x13563)));
evalcond[3]=((1.0)+((r11*x13566))+(((-1.0)*r12*x13563))+(((-1.0)*x13558*x13564)));
evalcond[4]=(((r22*x13557))+((sj1*sj2))+(((-1.0)*cj1*x13561))+((x13556*x13560))+(((-1.0)*x13559*x13563)));
evalcond[5]=((((-1.0)*x13562*x13563))+((r01*x13565))+(((-1.0)*sj1*x13561))+(((-1.0)*cj1*sj2))+((r02*x13557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13569 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13569.valid){
continue;
}
IkReal x13567=((1.0)*(x13569.value));
IkReal x13568=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13567)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13567)));
IkReal gconst28=((1.0)*r21*x13568);
IkReal gconst29=((-1.0)*r20*x13568);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13572 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13572.valid){
continue;
}
IkReal x13570=((1.0)*(x13572.value));
IkReal x13571=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13570)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13570)));
IkReal gconst28=((1.0)*r21*x13571);
IkReal gconst29=((-1.0)*r20*x13571);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13575 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13575.valid){
continue;
}
IkReal x13573=((1.0)*(x13575.value));
IkReal x13574=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13573)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13573)));
IkReal gconst28=((1.0)*r21*x13574);
IkReal gconst29=((-1.0)*r20*x13574);
IkReal x13576=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13580=IKPowWithIntegerCheck(x13576,-1);
if(!x13580.valid){
continue;
}
IkReal x13577=x13580.value;
IkReal x13578=((1.0)*x13577);
IkReal x13579=((((-1.0)*x13578*(r11*r11)*(r21*r21)))+(((-1.0)*x13578*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13577))+(((-1.0)*(r12*r12))));
j4eval[0]=x13579;
j4eval[1]=r12;
j4eval[2]=x13576;
j4eval[3]=IKsign(x13579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13581=(gconst28*r11);
IkReal x13582=(gconst29*r10);
CheckValue<IkReal> x13583=IKPowWithIntegerCheck(IKsign(((((2.0)*x13581*x13582))+(((-1.0)*(x13581*x13581)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13582*x13582))))),-1);
if(!x13583.valid){
continue;
}
CheckValue<IkReal> x13584 = IKatan2WithCheck(IkReal((x13581+(((-1.0)*x13582)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13583.value)))+(x13584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13585=IKcos(j4);
IkReal x13586=IKsin(j4);
IkReal x13587=(gconst29*r10);
IkReal x13588=(gconst29*r20);
IkReal x13589=(gconst28*r21);
IkReal x13590=(gconst29*r00);
IkReal x13591=((1.0)*x13585);
IkReal x13592=((1.0)*x13586);
IkReal x13593=(gconst28*x13585);
IkReal x13594=(gconst28*x13586);
evalcond[0]=(((r11*x13593))+((r12*x13586))+(((-1.0)*x13587*x13591)));
evalcond[1]=((((-1.0)*x13588*x13592))+((x13586*x13589))+(((-1.0)*r22*x13591)));
evalcond[2]=(((r01*x13594))+(((-1.0)*x13590*x13592))+(((-1.0)*r02*x13591)));
evalcond[3]=((1.0)+((r11*x13594))+(((-1.0)*x13587*x13592))+(((-1.0)*r12*x13591)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13588*x13591))+((x13585*x13589))+((r22*x13586)));
evalcond[5]=(((r01*x13593))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13586))+(((-1.0)*x13590*x13591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13595=((1.0)*gconst29);
CheckValue<IkReal> x13596=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13595))+(((-1.0)*gconst28*r00)))),-1);
if(!x13596.valid){
continue;
}
CheckValue<IkReal> x13597 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13595))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13596.value)))+(x13597.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13598=IKcos(j4);
IkReal x13599=IKsin(j4);
IkReal x13600=(gconst29*r10);
IkReal x13601=(gconst29*r20);
IkReal x13602=(gconst28*r21);
IkReal x13603=(gconst29*r00);
IkReal x13604=((1.0)*x13598);
IkReal x13605=((1.0)*x13599);
IkReal x13606=(gconst28*x13598);
IkReal x13607=(gconst28*x13599);
evalcond[0]=(((r11*x13606))+(((-1.0)*x13600*x13604))+((r12*x13599)));
evalcond[1]=(((x13599*x13602))+(((-1.0)*r22*x13604))+(((-1.0)*x13601*x13605)));
evalcond[2]=((((-1.0)*r02*x13604))+(((-1.0)*x13603*x13605))+((r01*x13607)));
evalcond[3]=((1.0)+((r11*x13607))+(((-1.0)*r12*x13604))+(((-1.0)*x13600*x13605)));
evalcond[4]=(((cj2*sj1))+((r22*x13599))+((x13598*x13602))+((cj1*sj2))+(((-1.0)*x13601*x13604)));
evalcond[5]=((((-1.0)*x13603*x13604))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13599))+((r01*x13606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13608=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13608.valid){
continue;
}
CheckValue<IkReal> x13609 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13608.value)))+(x13609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13610=IKcos(j4);
IkReal x13611=IKsin(j4);
IkReal x13612=(gconst29*r10);
IkReal x13613=(gconst29*r20);
IkReal x13614=(gconst28*r21);
IkReal x13615=(gconst29*r00);
IkReal x13616=((1.0)*x13610);
IkReal x13617=((1.0)*x13611);
IkReal x13618=(gconst28*x13610);
IkReal x13619=(gconst28*x13611);
evalcond[0]=((((-1.0)*x13612*x13616))+((r11*x13618))+((r12*x13611)));
evalcond[1]=(((x13611*x13614))+(((-1.0)*x13613*x13617))+(((-1.0)*r22*x13616)));
evalcond[2]=((((-1.0)*r02*x13616))+((r01*x13619))+(((-1.0)*x13615*x13617)));
evalcond[3]=((1.0)+(((-1.0)*x13612*x13617))+((r11*x13619))+(((-1.0)*r12*x13616)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13610*x13614))+(((-1.0)*x13613*x13616))+((r22*x13611)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13618))+(((-1.0)*x13615*x13616))+((r02*x13611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13622 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13622.valid){
continue;
}
IkReal x13620=((1.0)*(x13622.value));
IkReal x13621=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13620)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13620)));
IkReal gconst28=((1.0)*r21*x13621);
IkReal gconst29=((-1.0)*r20*x13621);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13625 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13625.valid){
continue;
}
IkReal x13623=((1.0)*(x13625.value));
IkReal x13624=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13623)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13623)));
IkReal gconst28=((1.0)*r21*x13624);
IkReal gconst29=((-1.0)*r20*x13624);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13628 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13628.valid){
continue;
}
IkReal x13626=((1.0)*(x13628.value));
IkReal x13627=x13453;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13626)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13626)));
IkReal gconst28=((1.0)*r21*x13627);
IkReal gconst29=((-1.0)*r20*x13627);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13629=(gconst29*r10);
IkReal x13630=(gconst28*r11);
CheckValue<IkReal> x13631=IKPowWithIntegerCheck(IKsign(((x13630*x13630)+(r12*r12)+(x13629*x13629)+(((-2.0)*x13629*x13630)))),-1);
if(!x13631.valid){
continue;
}
CheckValue<IkReal> x13632 = IKatan2WithCheck(IkReal(((((-1.0)*x13630))+x13629)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13631.value)))+(x13632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13633=IKsin(j4);
IkReal x13634=IKcos(j4);
IkReal x13635=(gconst28*r11);
IkReal x13636=((1.0)*x13634);
IkReal x13637=(gconst29*x13634);
IkReal x13638=(gconst28*x13633);
IkReal x13639=((1.0)*x13633);
IkReal x13640=(gconst29*x13639);
evalcond[0]=((((-1.0)*r22*x13636))+((r21*x13638))+(((-1.0)*r20*x13640)));
evalcond[1]=((((-1.0)*r02*x13636))+(((-1.0)*r00*x13640))+((r01*x13638)));
evalcond[2]=(((r10*x13637))+(((-1.0)*r12*x13639))+(((-1.0)*x13635*x13636)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13640))+(((-1.0)*r12*x13636))+((x13633*x13635)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13636))+(((-1.0)*r22*x13639))+((r20*x13637)));
evalcond[5]=((((-1.0)*r02*x13639))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13636))+((r00*x13637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13641=((1.0)*gconst29);
CheckValue<IkReal> x13642=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13641)))),-1);
if(!x13642.valid){
continue;
}
CheckValue<IkReal> x13643 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13641))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13642.value)))+(x13643.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13644=IKsin(j4);
IkReal x13645=IKcos(j4);
IkReal x13646=(gconst28*r11);
IkReal x13647=((1.0)*x13645);
IkReal x13648=(gconst29*x13645);
IkReal x13649=(gconst28*x13644);
IkReal x13650=((1.0)*x13644);
IkReal x13651=(gconst29*x13650);
evalcond[0]=((((-1.0)*r20*x13651))+(((-1.0)*r22*x13647))+((r21*x13649)));
evalcond[1]=((((-1.0)*r00*x13651))+((r01*x13649))+(((-1.0)*r02*x13647)));
evalcond[2]=((((-1.0)*x13646*x13647))+(((-1.0)*r12*x13650))+((r10*x13648)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13647))+((x13644*x13646))+(((-1.0)*r10*x13651)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13647))+((cj1*sj2))+(((-1.0)*r22*x13650))+((r20*x13648)));
evalcond[5]=((((-1.0)*r02*x13650))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13648))+(((-1.0)*gconst28*r01*x13647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13652=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13652.valid){
continue;
}
CheckValue<IkReal> x13653 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13652.value)))+(x13653.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13654=IKsin(j4);
IkReal x13655=IKcos(j4);
IkReal x13656=(gconst28*r11);
IkReal x13657=((1.0)*x13655);
IkReal x13658=(gconst29*x13655);
IkReal x13659=(gconst28*x13654);
IkReal x13660=((1.0)*x13654);
IkReal x13661=(gconst29*x13660);
evalcond[0]=((((-1.0)*r22*x13657))+(((-1.0)*r20*x13661))+((r21*x13659)));
evalcond[1]=(((r01*x13659))+(((-1.0)*r02*x13657))+(((-1.0)*r00*x13661)));
evalcond[2]=((((-1.0)*r12*x13660))+((r10*x13658))+(((-1.0)*x13656*x13657)));
evalcond[3]=((1.0)+((x13654*x13656))+(((-1.0)*r12*x13657))+(((-1.0)*r10*x13661)));
evalcond[4]=(((r20*x13658))+(((-1.0)*r22*x13660))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13657)));
evalcond[5]=(((r00*x13658))+(((-1.0)*gconst28*r01*x13657))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x13660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13662=gconst28*gconst28;
IkReal x13663=gconst29*gconst29;
IkReal x13664=(r11*r21);
IkReal x13665=(gconst29*sj3);
IkReal x13666=((1.0)*cj3);
IkReal x13667=(r10*r20);
IkReal x13668=(r10*r21);
IkReal x13669=(r11*r20);
IkReal x13670=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13671 = IKatan2WithCheck(IkReal((((r11*r22*x13665))+((gconst28*r10*r22*sj3)))),IkReal((((gconst28*x13664*x13665))+(((-1.0)*sj3*x13663*x13669))+(((-1.0)*gconst28*x13665*x13667))+((sj3*x13662*x13668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13671.valid){
continue;
}
CheckValue<IkReal> x13672=IKPowWithIntegerCheck(IKsign((((x13669*x13670))+((x13668*x13670))+(((-1.0)*x13662*x13664*x13666))+(((-1.0)*x13663*x13666*x13667))+(((-1.0)*r12*r22*x13666)))),-1);
if(!x13672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13671.value)+(((1.5707963267949)*(x13672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13673=IKsin(j4);
IkReal x13674=IKcos(j4);
IkReal x13675=(sj1*sj2);
IkReal x13676=(gconst29*r20);
IkReal x13677=(gconst28*r20);
IkReal x13678=((1.0)*cj2);
IkReal x13679=(r11*sj3);
IkReal x13680=(cj1*sj2);
IkReal x13681=(gconst29*r01);
IkReal x13682=(gconst29*r10);
IkReal x13683=(cj3*gconst28);
IkReal x13684=(cj3*gconst29);
IkReal x13685=(gconst28*sj3);
IkReal x13686=(gconst29*r00);
IkReal x13687=(cj1*x13678);
IkReal x13688=((1.0)*x13674);
IkReal x13689=((1.0)*x13673);
IkReal x13690=(gconst28*x13673);
IkReal x13691=(cj3*x13673);
IkReal x13692=(sj3*x13674);
evalcond[0]=((((-1.0)*r22*x13688))+(((-1.0)*x13676*x13689))+((r21*x13690)));
evalcond[1]=(((r01*x13690))+(((-1.0)*x13686*x13689))+(((-1.0)*r02*x13688)));
evalcond[2]=((1.0)+(((-1.0)*x13682*x13689))+(((-1.0)*r12*x13688))+((r11*x13690)));
evalcond[3]=(((r11*x13674*x13683))+(((-1.0)*cj3*x13682*x13688))+((gconst29*x13679))+((r10*x13685))+((r12*x13691)));
evalcond[4]=((((-1.0)*r12*sj3*x13689))+((r11*x13684))+(((-1.0)*gconst28*x13679*x13688))+((r10*x13683))+((x13682*x13692)));
evalcond[5]=(((cj2*sj1))+x13680+((gconst29*r21*sj3))+((r22*x13691))+((sj3*x13677))+(((-1.0)*cj3*x13676*x13688))+((r21*x13674*x13683)));
evalcond[6]=(x13675+(((-1.0)*r00*x13684*x13688))+((r00*x13685))+(((-1.0)*x13687))+((r02*x13691))+((sj3*x13681))+((r01*x13674*x13683)));
evalcond[7]=(x13675+((cj3*x13677))+((x13676*x13692))+(((-1.0)*r21*x13685*x13688))+(((-1.0)*x13687))+(((-1.0)*r22*sj3*x13689))+((r21*x13684)));
evalcond[8]=((((-1.0)*r02*sj3*x13689))+(((-1.0)*sj1*x13678))+((cj3*x13681))+(((-1.0)*r01*x13685*x13688))+(((-1.0)*x13680))+((r00*x13683))+((x13686*x13692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13693=((1.0)*gconst29);
CheckValue<IkReal> x13694=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13693)))),-1);
if(!x13694.valid){
continue;
}
CheckValue<IkReal> x13695 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13693))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13694.value)))+(x13695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13696=IKsin(j4);
IkReal x13697=IKcos(j4);
IkReal x13698=(sj1*sj2);
IkReal x13699=(gconst29*r20);
IkReal x13700=(gconst28*r20);
IkReal x13701=((1.0)*cj2);
IkReal x13702=(r11*sj3);
IkReal x13703=(cj1*sj2);
IkReal x13704=(gconst29*r01);
IkReal x13705=(gconst29*r10);
IkReal x13706=(cj3*gconst28);
IkReal x13707=(cj3*gconst29);
IkReal x13708=(gconst28*sj3);
IkReal x13709=(gconst29*r00);
IkReal x13710=(cj1*x13701);
IkReal x13711=((1.0)*x13697);
IkReal x13712=((1.0)*x13696);
IkReal x13713=(gconst28*x13696);
IkReal x13714=(cj3*x13696);
IkReal x13715=(sj3*x13697);
evalcond[0]=(((r21*x13713))+(((-1.0)*r22*x13711))+(((-1.0)*x13699*x13712)));
evalcond[1]=((((-1.0)*x13709*x13712))+((r01*x13713))+(((-1.0)*r02*x13711)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13711))+(((-1.0)*x13705*x13712))+((r11*x13713)));
evalcond[3]=(((r12*x13714))+(((-1.0)*cj3*x13705*x13711))+((gconst29*x13702))+((r10*x13708))+((r11*x13697*x13706)));
evalcond[4]=((((-1.0)*gconst28*x13702*x13711))+((x13705*x13715))+((r10*x13706))+((r11*x13707))+(((-1.0)*r12*sj3*x13712)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13700))+x13703+(((-1.0)*cj3*x13699*x13711))+((r22*x13714))+((r21*x13697*x13706)));
evalcond[6]=((((-1.0)*r00*x13707*x13711))+x13698+((sj3*x13704))+((r00*x13708))+((r01*x13697*x13706))+((r02*x13714))+(((-1.0)*x13710)));
evalcond[7]=(((r21*x13707))+x13698+(((-1.0)*r21*x13708*x13711))+((cj3*x13700))+(((-1.0)*r22*sj3*x13712))+(((-1.0)*x13710))+((x13699*x13715)));
evalcond[8]=((((-1.0)*r01*x13708*x13711))+(((-1.0)*sj1*x13701))+(((-1.0)*x13703))+((cj3*x13704))+((r00*x13706))+((x13709*x13715))+(((-1.0)*r02*sj3*x13712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13716=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13716.valid){
continue;
}
CheckValue<IkReal> x13717 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13716.value)))+(x13717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13718=IKsin(j4);
IkReal x13719=IKcos(j4);
IkReal x13720=(sj1*sj2);
IkReal x13721=(gconst29*r20);
IkReal x13722=(gconst28*r20);
IkReal x13723=((1.0)*cj2);
IkReal x13724=(r11*sj3);
IkReal x13725=(cj1*sj2);
IkReal x13726=(gconst29*r01);
IkReal x13727=(gconst29*r10);
IkReal x13728=(cj3*gconst28);
IkReal x13729=(cj3*gconst29);
IkReal x13730=(gconst28*sj3);
IkReal x13731=(gconst29*r00);
IkReal x13732=(cj1*x13723);
IkReal x13733=((1.0)*x13719);
IkReal x13734=((1.0)*x13718);
IkReal x13735=(gconst28*x13718);
IkReal x13736=(cj3*x13718);
IkReal x13737=(sj3*x13719);
evalcond[0]=((((-1.0)*r22*x13733))+((r21*x13735))+(((-1.0)*x13721*x13734)));
evalcond[1]=((((-1.0)*r02*x13733))+(((-1.0)*x13731*x13734))+((r01*x13735)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13733))+(((-1.0)*x13727*x13734))+((r11*x13735)));
evalcond[3]=(((r10*x13730))+((r11*x13719*x13728))+((r12*x13736))+(((-1.0)*cj3*x13727*x13733))+((gconst29*x13724)));
evalcond[4]=((((-1.0)*gconst28*x13724*x13733))+((r10*x13728))+((r11*x13729))+((x13727*x13737))+(((-1.0)*r12*sj3*x13734)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((r22*x13736))+x13725+((r21*x13719*x13728))+(((-1.0)*cj3*x13721*x13733))+((sj3*x13722)));
evalcond[6]=(((r00*x13730))+((r01*x13719*x13728))+x13720+(((-1.0)*x13732))+((r02*x13736))+((sj3*x13726))+(((-1.0)*r00*x13729*x13733)));
evalcond[7]=(x13720+(((-1.0)*x13732))+((x13721*x13737))+((r21*x13729))+((cj3*x13722))+(((-1.0)*r21*x13730*x13733))+(((-1.0)*r22*sj3*x13734)));
evalcond[8]=((((-1.0)*r02*sj3*x13734))+((r00*x13728))+(((-1.0)*r01*x13730*x13733))+((x13731*x13737))+(((-1.0)*sj1*x13723))+(((-1.0)*x13725))+((cj3*x13726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13738=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13738);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13738);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13739=(r11*sj5);
IkReal x13740=((1.0)*cj5*r10);
j4eval[0]=(x13739+(((-1.0)*x13740)));
j4eval[1]=((((-1.0)*cj3*x13740))+((cj3*x13739)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13741=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13741);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13741);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13742=(cj5*r10);
IkReal x13743=(r11*sj5);
j4eval[0]=(x13743+(((-1.0)*x13742)));
j4eval[1]=((((-1.0)*sj3*x13743))+((sj3*x13742)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13744=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13744);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13744);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13745=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13745);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13745);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13746=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13746))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13746)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13747=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13747);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13747);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13748=((1.0)*sj1);
CheckValue<IkReal> x13749=IKPowWithIntegerCheck(r22,-1);
if(!x13749.valid){
continue;
}
CheckValue<IkReal> x13750=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13750.valid){
continue;
}
if( IKabs(((x13749.value)*(((((-1.0)*cj2*x13748))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13750.value)*(((((-1.0)*sj2*x13748))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13749.value)*(((((-1.0)*cj2*x13748))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13750.value)*(((((-1.0)*sj2*x13748))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13749.value)*(((((-1.0)*cj2*x13748))+(((-1.0)*cj1*sj2))))), ((x13750.value)*(((((-1.0)*sj2*x13748))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13751=IKsin(j4);
IkReal x13752=IKcos(j4);
IkReal x13753=((1.0)*cj5);
IkReal x13754=(sj5*x13752);
IkReal x13755=(sj5*x13751);
evalcond[0]=((-1.0)*r22*x13752);
evalcond[1]=(((cj2*sj1))+((r22*x13751))+((cj1*sj2)));
evalcond[2]=(((r01*x13755))+(((-1.0)*r00*x13751*x13753)));
evalcond[3]=(((r11*x13754))+(((-1.0)*r10*x13752*x13753)));
evalcond[4]=((1.0)+((r11*x13755))+(((-1.0)*r10*x13751*x13753)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13752*x13753))+((r01*x13754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13756=((1.0)*cj5);
CheckValue<IkReal> x13757=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13756))),-1);
if(!x13757.valid){
continue;
}
CheckValue<IkReal> x13758=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13756))),-1);
if(!x13758.valid){
continue;
}
if( IKabs(((-1.0)*(x13757.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13758.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13757.value)))+IKsqr(((x13758.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13757.value)), ((x13758.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13759=IKsin(j4);
IkReal x13760=IKcos(j4);
IkReal x13761=((1.0)*cj5);
IkReal x13762=(sj5*x13760);
IkReal x13763=(sj5*x13759);
evalcond[0]=((-1.0)*r22*x13760);
evalcond[1]=(((cj2*sj1))+((r22*x13759))+((cj1*sj2)));
evalcond[2]=(((r01*x13763))+(((-1.0)*r00*x13759*x13761)));
evalcond[3]=(((r11*x13762))+(((-1.0)*r10*x13760*x13761)));
evalcond[4]=((1.0)+((r11*x13763))+(((-1.0)*r10*x13759*x13761)));
evalcond[5]=(((r01*x13762))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13760*x13761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13764=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13764);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13764);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13765=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13765);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13765);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13766=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13766.valid){
continue;
}
CheckValue<IkReal> x13767=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13767.valid){
continue;
}
if( IKabs(((-1.0)*(x13766.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13767.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13766.value)))+IKsqr(((x13767.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13766.value)), ((x13767.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13768=IKsin(j4);
IkReal x13769=IKcos(j4);
IkReal x13770=(cj5*x13769);
IkReal x13771=(sj5*x13768);
IkReal x13772=((1.0)*cj5*x13768);
IkReal x13773=((1.0)*sj5*x13769);
evalcond[0]=((-1.0)*r22*x13769);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13768))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13772))+((r01*x13771)));
evalcond[3]=(((r10*x13770))+(((-1.0)*r11*x13773)));
evalcond[4]=((1.0)+((r11*x13771))+(((-1.0)*r10*x13772)));
evalcond[5]=((((-1.0)*r01*x13773))+((r00*x13770))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13774=IKPowWithIntegerCheck(r22,-1);
if(!x13774.valid){
continue;
}
CheckValue<IkReal> x13775=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13775.valid){
continue;
}
if( IKabs(((x13774.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13775.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13774.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13775.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13774.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13775.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13776=IKsin(j4);
IkReal x13777=IKcos(j4);
IkReal x13778=(cj5*x13777);
IkReal x13779=(sj5*x13776);
IkReal x13780=((1.0)*cj5*x13776);
IkReal x13781=((1.0)*sj5*x13777);
evalcond[0]=((-1.0)*r22*x13777);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13776))+((cj1*sj2)));
evalcond[2]=(((r01*x13779))+(((-1.0)*r00*x13780)));
evalcond[3]=(((r10*x13778))+(((-1.0)*r11*x13781)));
evalcond[4]=((1.0)+((r11*x13779))+(((-1.0)*r10*x13780)));
evalcond[5]=(((r00*x13778))+(((-1.0)*r01*x13781))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13782=((1.0)*r10);
CheckValue<IkReal> x13783=IKPowWithIntegerCheck(cj3,-1);
if(!x13783.valid){
continue;
}
CheckValue<IkReal> x13784=IKPowWithIntegerCheck(r22,-1);
if(!x13784.valid){
continue;
}
CheckValue<IkReal> x13785=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13782))+((cj3*r11*sj5))),-1);
if(!x13785.valid){
continue;
}
if( IKabs(((x13783.value)*(x13784.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13785.value)*(((((-1.0)*sj3*sj5*x13782))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13783.value)*(x13784.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13785.value)*(((((-1.0)*sj3*sj5*x13782))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13783.value)*(x13784.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13785.value)*(((((-1.0)*sj3*sj5*x13782))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13786=IKsin(j4);
IkReal x13787=IKcos(j4);
IkReal x13788=(sj1*sj2);
IkReal x13789=(r11*sj5);
IkReal x13790=(r00*sj3);
IkReal x13791=(cj5*r01);
IkReal x13792=((1.0)*cj1);
IkReal x13793=(cj3*sj5);
IkReal x13794=(cj5*r11);
IkReal x13795=(r10*sj3);
IkReal x13796=(cj2*sj1);
IkReal x13797=((1.0)*cj5);
IkReal x13798=((1.0)*sj3);
IkReal x13799=(r01*sj5);
IkReal x13800=(cj2*x13792);
IkReal x13801=(cj3*x13787);
IkReal x13802=(r22*x13786);
IkReal x13803=(cj5*x13787);
IkReal x13804=(x13786*x13797);
evalcond[0]=((-1.0)*r22*x13787);
evalcond[1]=(x13796+((cj1*sj2))+((cj3*x13802)));
evalcond[2]=((((-1.0)*r00*x13804))+((x13786*x13799)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13804))+((x13786*x13789)));
evalcond[4]=((((-1.0)*x13800))+x13788+(((-1.0)*x13798*x13802)));
evalcond[5]=((((-1.0)*r10*x13797*x13801))+((x13789*x13801))+((sj3*x13794))+((sj5*x13795)));
evalcond[6]=((((-1.0)*x13787*x13789*x13798))+((x13795*x13803))+((cj3*x13794))+((r10*x13793)));
evalcond[7]=((((-1.0)*x13800))+x13788+(((-1.0)*r00*x13797*x13801))+((sj3*x13791))+((sj5*x13790))+((r01*x13787*x13793)));
evalcond[8]=(((r00*x13793))+(((-1.0)*sj2*x13792))+(((-1.0)*x13796))+((cj3*x13791))+((x13790*x13803))+(((-1.0)*x13787*x13798*x13799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13805=(cj5*r10);
IkReal x13806=((1.0)*r11);
CheckValue<IkReal> x13807=IKPowWithIntegerCheck(((((-1.0)*x13805))+((r11*sj5))),-1);
if(!x13807.valid){
continue;
}
CheckValue<IkReal> x13808=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13806))+((sj3*x13805))),-1);
if(!x13808.valid){
continue;
}
if( IKabs(((-1.0)*(x13807.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13808.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13806)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13807.value)))+IKsqr(((x13808.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13806))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13807.value)), ((x13808.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13806))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13809=IKsin(j4);
IkReal x13810=IKcos(j4);
IkReal x13811=(sj1*sj2);
IkReal x13812=(r11*sj5);
IkReal x13813=(r00*sj3);
IkReal x13814=(cj5*r01);
IkReal x13815=((1.0)*cj1);
IkReal x13816=(cj3*sj5);
IkReal x13817=(cj5*r11);
IkReal x13818=(r10*sj3);
IkReal x13819=(cj2*sj1);
IkReal x13820=((1.0)*cj5);
IkReal x13821=((1.0)*sj3);
IkReal x13822=(r01*sj5);
IkReal x13823=(cj2*x13815);
IkReal x13824=(cj3*x13810);
IkReal x13825=(r22*x13809);
IkReal x13826=(cj5*x13810);
IkReal x13827=(x13809*x13820);
evalcond[0]=((-1.0)*r22*x13810);
evalcond[1]=(x13819+((cj1*sj2))+((cj3*x13825)));
evalcond[2]=(((x13809*x13822))+(((-1.0)*r00*x13827)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13827))+((x13809*x13812)));
evalcond[4]=((((-1.0)*x13823))+x13811+(((-1.0)*x13821*x13825)));
evalcond[5]=(((x13812*x13824))+((sj3*x13817))+((sj5*x13818))+(((-1.0)*r10*x13820*x13824)));
evalcond[6]=(((r10*x13816))+(((-1.0)*x13810*x13812*x13821))+((cj3*x13817))+((x13818*x13826)));
evalcond[7]=((((-1.0)*x13823))+((r01*x13810*x13816))+(((-1.0)*r00*x13820*x13824))+x13811+((sj3*x13814))+((sj5*x13813)));
evalcond[8]=(((r00*x13816))+(((-1.0)*sj2*x13815))+(((-1.0)*x13819))+((cj3*x13814))+((x13813*x13826))+(((-1.0)*x13810*x13821*x13822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13828=((1.0)*sj3);
IkReal x13829=(r11*sj5);
IkReal x13830=((1.0)*cj5*r10);
CheckValue<IkReal> x13831=IKPowWithIntegerCheck(((((-1.0)*x13830))+x13829),-1);
if(!x13831.valid){
continue;
}
CheckValue<IkReal> x13832=IKPowWithIntegerCheck((((cj3*x13829))+(((-1.0)*cj3*x13830))),-1);
if(!x13832.valid){
continue;
}
if( IKabs(((-1.0)*(x13831.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13832.value)*(((((-1.0)*r10*sj5*x13828))+(((-1.0)*cj5*r11*x13828)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13831.value)))+IKsqr(((x13832.value)*(((((-1.0)*r10*sj5*x13828))+(((-1.0)*cj5*r11*x13828))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13831.value)), ((x13832.value)*(((((-1.0)*r10*sj5*x13828))+(((-1.0)*cj5*r11*x13828))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13833=IKsin(j4);
IkReal x13834=IKcos(j4);
IkReal x13835=(sj1*sj2);
IkReal x13836=(r11*sj5);
IkReal x13837=(r00*sj3);
IkReal x13838=(cj5*r01);
IkReal x13839=((1.0)*cj1);
IkReal x13840=(cj3*sj5);
IkReal x13841=(cj5*r11);
IkReal x13842=(r10*sj3);
IkReal x13843=(cj2*sj1);
IkReal x13844=((1.0)*cj5);
IkReal x13845=((1.0)*sj3);
IkReal x13846=(r01*sj5);
IkReal x13847=(cj2*x13839);
IkReal x13848=(cj3*x13834);
IkReal x13849=(r22*x13833);
IkReal x13850=(cj5*x13834);
IkReal x13851=(x13833*x13844);
evalcond[0]=((-1.0)*r22*x13834);
evalcond[1]=(x13843+((cj1*sj2))+((cj3*x13849)));
evalcond[2]=(((x13833*x13846))+(((-1.0)*r00*x13851)));
evalcond[3]=((1.0)+((x13833*x13836))+(((-1.0)*r10*x13851)));
evalcond[4]=((((-1.0)*x13847))+x13835+(((-1.0)*x13845*x13849)));
evalcond[5]=(((x13836*x13848))+((sj5*x13842))+((sj3*x13841))+(((-1.0)*r10*x13844*x13848)));
evalcond[6]=(((x13842*x13850))+((r10*x13840))+(((-1.0)*x13834*x13836*x13845))+((cj3*x13841)));
evalcond[7]=((((-1.0)*x13847))+((r01*x13834*x13840))+x13835+((sj5*x13837))+((sj3*x13838))+(((-1.0)*r00*x13844*x13848)));
evalcond[8]=((((-1.0)*x13834*x13845*x13846))+((x13837*x13850))+(((-1.0)*sj2*x13839))+((cj3*x13838))+(((-1.0)*x13843))+((r00*x13840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13852=cj5*cj5;
IkReal x13853=((1.0)*cj3);
IkReal x13854=(r10*r21);
IkReal x13855=(cj5*sj5);
IkReal x13856=(r11*r21);
IkReal x13857=(r11*r20);
IkReal x13858=(r22*sj3);
IkReal x13859=(r10*r20);
IkReal x13860=((1.0)*sj3*x13852);
CheckValue<IkReal> x13861 = IKatan2WithCheck(IkReal((((r10*sj5*x13858))+((cj5*r11*x13858)))),IkReal((((sj3*x13854))+(((-1.0)*x13857*x13860))+((sj3*x13855*x13856))+(((-1.0)*x13854*x13860))+(((-1.0)*sj3*x13855*x13859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13861.valid){
continue;
}
CheckValue<IkReal> x13862=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13852*x13853*x13859))+((cj3*x13855*x13857))+(((-1.0)*r12*r22*x13853))+((cj3*x13854*x13855))+((cj3*x13852*x13856))+(((-1.0)*x13853*x13856)))),-1);
if(!x13862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13861.value)+(((1.5707963267949)*(x13862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13863=IKsin(j4);
IkReal x13864=IKcos(j4);
IkReal x13865=(sj1*sj2);
IkReal x13866=(cj5*sj3);
IkReal x13867=(cj5*r10);
IkReal x13868=(r00*sj5);
IkReal x13869=(r11*sj5);
IkReal x13870=(cj3*cj5);
IkReal x13871=((1.0)*cj1);
IkReal x13872=(cj3*sj5);
IkReal x13873=(r21*sj5);
IkReal x13874=(cj2*sj1);
IkReal x13875=(sj3*sj5);
IkReal x13876=(r01*sj5);
IkReal x13877=(cj2*x13871);
IkReal x13878=((1.0)*x13864);
IkReal x13879=((1.0)*x13863);
IkReal x13880=(cj3*x13863);
IkReal x13881=(cj3*x13864);
evalcond[0]=((((-1.0)*cj5*r20*x13879))+(((-1.0)*r22*x13878))+((x13863*x13873)));
evalcond[1]=((((-1.0)*cj5*r00*x13879))+(((-1.0)*r02*x13878))+((x13863*x13876)));
evalcond[2]=((1.0)+(((-1.0)*x13867*x13879))+((x13863*x13869))+(((-1.0)*r12*x13878)));
evalcond[3]=(((r11*x13866))+((x13869*x13881))+((r12*x13880))+(((-1.0)*cj3*x13867*x13878))+((r10*x13875)));
evalcond[4]=(((r10*x13864*x13866))+(((-1.0)*r12*sj3*x13879))+((r11*x13870))+((r10*x13872))+(((-1.0)*sj3*x13869*x13878)));
evalcond[5]=((((-1.0)*r20*x13870*x13878))+x13874+((cj1*sj2))+((r21*x13864*x13872))+((r21*x13866))+((r20*x13875))+((r22*x13880)));
evalcond[6]=(((r01*x13866))+((r01*x13864*x13872))+x13865+(((-1.0)*x13877))+((sj3*x13868))+((r02*x13880))+(((-1.0)*r00*x13870*x13878)));
evalcond[7]=(x13865+(((-1.0)*x13877))+((r21*x13870))+((r20*x13872))+((r20*x13864*x13866))+(((-1.0)*r22*sj3*x13879))+(((-1.0)*sj3*x13873*x13878)));
evalcond[8]=((((-1.0)*r01*x13875*x13878))+(((-1.0)*x13874))+(((-1.0)*sj2*x13871))+((r01*x13870))+((r00*x13864*x13866))+(((-1.0)*r02*sj3*x13879))+((cj3*x13868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13882=((1.0)*cj5);
CheckValue<IkReal> x13883 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13883.valid){
continue;
}
CheckValue<IkReal> x13884=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13882))+(((-1.0)*r00*sj5)))),-1);
if(!x13884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13883.value)+(((1.5707963267949)*(x13884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13885=IKsin(j4);
IkReal x13886=IKcos(j4);
IkReal x13887=(sj1*sj2);
IkReal x13888=(cj5*sj3);
IkReal x13889=(cj5*r10);
IkReal x13890=(r00*sj5);
IkReal x13891=(r11*sj5);
IkReal x13892=(cj3*cj5);
IkReal x13893=((1.0)*cj1);
IkReal x13894=(cj3*sj5);
IkReal x13895=(r21*sj5);
IkReal x13896=(cj2*sj1);
IkReal x13897=(sj3*sj5);
IkReal x13898=(r01*sj5);
IkReal x13899=(cj2*x13893);
IkReal x13900=((1.0)*x13886);
IkReal x13901=((1.0)*x13885);
IkReal x13902=(cj3*x13885);
IkReal x13903=(cj3*x13886);
evalcond[0]=((((-1.0)*cj5*r20*x13901))+(((-1.0)*r22*x13900))+((x13885*x13895)));
evalcond[1]=((((-1.0)*cj5*r00*x13901))+((x13885*x13898))+(((-1.0)*r02*x13900)));
evalcond[2]=((1.0)+((x13885*x13891))+(((-1.0)*r12*x13900))+(((-1.0)*x13889*x13901)));
evalcond[3]=((((-1.0)*cj3*x13889*x13900))+((r10*x13897))+((r12*x13902))+((r11*x13888))+((x13891*x13903)));
evalcond[4]=(((r10*x13886*x13888))+(((-1.0)*r12*sj3*x13901))+((r10*x13894))+((r11*x13892))+(((-1.0)*sj3*x13891*x13900)));
evalcond[5]=(((r22*x13902))+x13896+((cj1*sj2))+((r21*x13886*x13894))+((r20*x13897))+(((-1.0)*r20*x13892*x13900))+((r21*x13888)));
evalcond[6]=(((r02*x13902))+x13887+((sj3*x13890))+(((-1.0)*r00*x13892*x13900))+((r01*x13886*x13894))+(((-1.0)*x13899))+((r01*x13888)));
evalcond[7]=((((-1.0)*r22*sj3*x13901))+(((-1.0)*sj3*x13895*x13900))+x13887+((r20*x13886*x13888))+((r20*x13894))+((r21*x13892))+(((-1.0)*x13899)));
evalcond[8]=((((-1.0)*sj2*x13893))+((cj3*x13890))+(((-1.0)*r02*sj3*x13901))+((r01*x13892))+(((-1.0)*x13896))+(((-1.0)*r01*x13897*x13900))+((r00*x13886*x13888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13904=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13904.valid){
continue;
}
CheckValue<IkReal> x13905 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13904.value)))+(x13905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13906=IKsin(j4);
IkReal x13907=IKcos(j4);
IkReal x13908=(sj1*sj2);
IkReal x13909=(cj5*sj3);
IkReal x13910=(cj5*r10);
IkReal x13911=(r00*sj5);
IkReal x13912=(r11*sj5);
IkReal x13913=(cj3*cj5);
IkReal x13914=((1.0)*cj1);
IkReal x13915=(cj3*sj5);
IkReal x13916=(r21*sj5);
IkReal x13917=(cj2*sj1);
IkReal x13918=(sj3*sj5);
IkReal x13919=(r01*sj5);
IkReal x13920=(cj2*x13914);
IkReal x13921=((1.0)*x13907);
IkReal x13922=((1.0)*x13906);
IkReal x13923=(cj3*x13906);
IkReal x13924=(cj3*x13907);
evalcond[0]=(((x13906*x13916))+(((-1.0)*r22*x13921))+(((-1.0)*cj5*r20*x13922)));
evalcond[1]=(((x13906*x13919))+(((-1.0)*cj5*r00*x13922))+(((-1.0)*r02*x13921)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13921))+((x13906*x13912))+(((-1.0)*x13910*x13922)));
evalcond[3]=(((r10*x13918))+(((-1.0)*cj3*x13910*x13921))+((x13912*x13924))+((r11*x13909))+((r12*x13923)));
evalcond[4]=(((r10*x13915))+(((-1.0)*sj3*x13912*x13921))+(((-1.0)*r12*sj3*x13922))+((r11*x13913))+((r10*x13907*x13909)));
evalcond[5]=((((-1.0)*r20*x13913*x13921))+((cj1*sj2))+x13917+((r22*x13923))+((r20*x13918))+((r21*x13909))+((r21*x13907*x13915)));
evalcond[6]=((((-1.0)*r00*x13913*x13921))+x13908+((r01*x13907*x13915))+(((-1.0)*x13920))+((sj3*x13911))+((r01*x13909))+((r02*x13923)));
evalcond[7]=((((-1.0)*sj3*x13916*x13921))+x13908+((r20*x13907*x13909))+(((-1.0)*x13920))+((r20*x13915))+((r21*x13913))+(((-1.0)*r22*sj3*x13922)));
evalcond[8]=((((-1.0)*r01*x13918*x13921))+(((-1.0)*x13917))+(((-1.0)*sj2*x13914))+((cj3*x13911))+((r01*x13913))+((r00*x13907*x13909))+(((-1.0)*r02*sj3*x13922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13925=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13925;
j4eval[1]=IKsign(x13925);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13926=((1.0)*cj5);
IkReal x13927=((((-1.0)*r21*x13926))+(((-1.0)*r20*sj5)));
j4eval[0]=x13927;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13926))))));
j4eval[2]=IKsign(x13927);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13928=cj5*cj5;
IkReal x13929=(cj3*r21);
IkReal x13930=(cj5*sj5);
IkReal x13931=((1.0)*cj3);
IkReal x13932=((((-1.0)*r11*x13929))+(((-1.0)*r10*r20*x13928*x13931))+((r10*x13929*x13930))+(((-1.0)*r12*r22*x13931))+((cj3*r11*r20*x13930))+((r11*x13928*x13929)));
j4eval[0]=x13932;
j4eval[1]=IKsign(x13932);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13933=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13933;
j4eval[1]=IKsign(x13933);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13934=((1.0)*cj5);
IkReal x13935=((((-1.0)*r21*x13934))+(((-1.0)*r20*sj5)));
j4eval[0]=x13935;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13934))))));
j4eval[2]=IKsign(x13935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13936=cj5*cj5;
IkReal x13937=r11*r11;
IkReal x13938=(cj5*r10);
IkReal x13939=(r11*sj5);
IkReal x13940=((((-1.0)*x13936*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x13938*x13939))+(((-1.0)*x13937))+((x13936*x13937)));
j4eval[0]=x13940;
j4eval[1]=((IKabs(r12))+(IKabs((x13938+(((-1.0)*x13939))))));
j4eval[2]=IKsign(x13940);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13941=cj5*cj5;
IkReal x13942=r11*r11;
IkReal x13943=(cj5*r10);
IkReal x13944=(r11*sj5);
CheckValue<IkReal> x13945=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13942))+((x13941*x13942))+(((-1.0)*(r12*r12)))+(((-1.0)*x13941*(r10*r10)))+(((2.0)*x13943*x13944)))),-1);
if(!x13945.valid){
continue;
}
CheckValue<IkReal> x13946 = IKatan2WithCheck(IkReal(((((-1.0)*x13944))+x13943)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13945.value)))+(x13946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13947=IKsin(j4);
IkReal x13948=IKcos(j4);
IkReal x13949=(cj5*r10);
IkReal x13950=(r01*sj5);
IkReal x13951=(cj5*r00);
IkReal x13952=(cj5*r20);
IkReal x13953=((1.0)*x13948);
IkReal x13954=((1.0)*x13947);
IkReal x13955=(sj5*x13947);
evalcond[0]=((((-1.0)*x13952*x13954))+((r21*x13955))+(((-1.0)*r22*x13953)));
evalcond[1]=((((-1.0)*r02*x13953))+((x13947*x13950))+(((-1.0)*x13951*x13954)));
evalcond[2]=((((-1.0)*r11*sj5*x13953))+((x13948*x13949))+(((-1.0)*r12*x13954)));
evalcond[3]=((-1.0)+((r11*x13955))+(((-1.0)*x13949*x13954))+(((-1.0)*r12*x13953)));
evalcond[4]=(((x13948*x13951))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13954))+(((-1.0)*x13950*x13953)));
evalcond[5]=(((x13948*x13952))+(((-1.0)*r21*sj5*x13953))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13956=((1.0)*cj5);
CheckValue<IkReal> x13957 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13956))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13957.valid){
continue;
}
CheckValue<IkReal> x13958=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13956))+(((-1.0)*r20*sj5)))),-1);
if(!x13958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13957.value)+(((1.5707963267949)*(x13958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13959=IKsin(j4);
IkReal x13960=IKcos(j4);
IkReal x13961=(cj5*r10);
IkReal x13962=(r01*sj5);
IkReal x13963=(cj5*r00);
IkReal x13964=(cj5*r20);
IkReal x13965=((1.0)*x13960);
IkReal x13966=((1.0)*x13959);
IkReal x13967=(sj5*x13959);
evalcond[0]=((((-1.0)*x13964*x13966))+(((-1.0)*r22*x13965))+((r21*x13967)));
evalcond[1]=((((-1.0)*r02*x13965))+((x13959*x13962))+(((-1.0)*x13963*x13966)));
evalcond[2]=((((-1.0)*r12*x13966))+(((-1.0)*r11*sj5*x13965))+((x13960*x13961)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13965))+((r11*x13967))+(((-1.0)*x13961*x13966)));
evalcond[4]=((((-1.0)*r02*x13966))+((cj2*sj1))+((cj1*sj2))+((x13960*x13963))+(((-1.0)*x13962*x13965)));
evalcond[5]=((((-1.0)*r22*x13966))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13960*x13964))+(((-1.0)*r21*sj5*x13965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13968 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13968.valid){
continue;
}
CheckValue<IkReal> x13969=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13968.value)+(((1.5707963267949)*(x13969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13970=IKsin(j4);
IkReal x13971=IKcos(j4);
IkReal x13972=(cj5*r10);
IkReal x13973=(r01*sj5);
IkReal x13974=(cj5*r00);
IkReal x13975=(cj5*r20);
IkReal x13976=((1.0)*x13971);
IkReal x13977=((1.0)*x13970);
IkReal x13978=(sj5*x13970);
evalcond[0]=((((-1.0)*r22*x13976))+(((-1.0)*x13975*x13977))+((r21*x13978)));
evalcond[1]=((((-1.0)*r02*x13976))+((x13970*x13973))+(((-1.0)*x13974*x13977)));
evalcond[2]=((((-1.0)*r12*x13977))+((x13971*x13972))+(((-1.0)*r11*sj5*x13976)));
evalcond[3]=((-1.0)+(((-1.0)*x13972*x13977))+(((-1.0)*r12*x13976))+((r11*x13978)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13977))+(((-1.0)*x13973*x13976))+((cj1*sj2))+((x13971*x13974)));
evalcond[5]=((((-1.0)*r22*x13977))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13971*x13975))+(((-1.0)*r21*sj5*x13976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13979=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13979;
j4eval[1]=IKsign(x13979);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13980=((1.0)*cj5);
IkReal x13981=((((-1.0)*r21*x13980))+(((-1.0)*r20*sj5)));
j4eval[0]=x13981;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13980))))));
j4eval[2]=IKsign(x13981);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13982=cj5*cj5;
IkReal x13983=r11*r11;
IkReal x13984=(r11*sj5);
IkReal x13985=(cj5*r10);
IkReal x13986=(((x13982*(r10*r10)))+(r12*r12)+x13983+(((-1.0)*x13982*x13983))+(((-2.0)*x13984*x13985)));
j4eval[0]=x13986;
j4eval[1]=IKsign(x13986);
j4eval[2]=((IKabs(r12))+(IKabs((x13984+(((-1.0)*x13985))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13987=cj5*cj5;
IkReal x13988=r11*r11;
IkReal x13989=(cj5*r10);
IkReal x13990=(r11*sj5);
CheckValue<IkReal> x13991 = IKatan2WithCheck(IkReal((x13990+(((-1.0)*x13989)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13991.valid){
continue;
}
CheckValue<IkReal> x13992=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x13987*(r10*r10)))+x13988+(((-2.0)*x13989*x13990))+(((-1.0)*x13987*x13988)))),-1);
if(!x13992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13991.value)+(((1.5707963267949)*(x13992.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13993=IKcos(j4);
IkReal x13994=IKsin(j4);
IkReal x13995=(cj5*r00);
IkReal x13996=(cj5*r10);
IkReal x13997=(r21*sj5);
IkReal x13998=(cj5*r20);
IkReal x13999=((1.0)*x13993);
IkReal x14000=((1.0)*x13994);
IkReal x14001=(sj5*x13994);
IkReal x14002=(sj5*x13993);
evalcond[0]=(((r12*x13994))+(((-1.0)*x13996*x13999))+((r11*x14002)));
evalcond[1]=((((-1.0)*x13998*x14000))+((x13994*x13997))+(((-1.0)*r22*x13999)));
evalcond[2]=((((-1.0)*r02*x13999))+(((-1.0)*x13995*x14000))+((r01*x14001)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13999))+((r11*x14001))+(((-1.0)*x13996*x14000)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x13994))+((r01*x14002))+(((-1.0)*x13995*x13999)));
evalcond[5]=(((r22*x13994))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13993*x13997))+(((-1.0)*x13998*x13999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14003=((1.0)*cj5);
CheckValue<IkReal> x14004=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14003))+(((-1.0)*r20*sj5)))),-1);
if(!x14004.valid){
continue;
}
CheckValue<IkReal> x14005 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14003))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14004.value)))+(x14005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14006=IKcos(j4);
IkReal x14007=IKsin(j4);
IkReal x14008=(cj5*r00);
IkReal x14009=(cj5*r10);
IkReal x14010=(r21*sj5);
IkReal x14011=(cj5*r20);
IkReal x14012=((1.0)*x14006);
IkReal x14013=((1.0)*x14007);
IkReal x14014=(sj5*x14007);
IkReal x14015=(sj5*x14006);
evalcond[0]=((((-1.0)*x14009*x14012))+((r11*x14015))+((r12*x14007)));
evalcond[1]=(((x14007*x14010))+(((-1.0)*x14011*x14013))+(((-1.0)*r22*x14012)));
evalcond[2]=((((-1.0)*x14008*x14013))+(((-1.0)*r02*x14012))+((r01*x14014)));
evalcond[3]=((-1.0)+(((-1.0)*x14009*x14013))+((r11*x14014))+(((-1.0)*r12*x14012)));
evalcond[4]=((((-1.0)*x14008*x14012))+((cj2*sj1))+((r02*x14007))+((cj1*sj2))+((r01*x14015)));
evalcond[5]=(((x14006*x14010))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x14007))+(((-1.0)*x14011*x14012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14016 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14016.valid){
continue;
}
CheckValue<IkReal> x14017=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14016.value)+(((1.5707963267949)*(x14017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14018=IKcos(j4);
IkReal x14019=IKsin(j4);
IkReal x14020=(cj5*r00);
IkReal x14021=(cj5*r10);
IkReal x14022=(r21*sj5);
IkReal x14023=(cj5*r20);
IkReal x14024=((1.0)*x14018);
IkReal x14025=((1.0)*x14019);
IkReal x14026=(sj5*x14019);
IkReal x14027=(sj5*x14018);
evalcond[0]=(((r11*x14027))+(((-1.0)*x14021*x14024))+((r12*x14019)));
evalcond[1]=(((x14019*x14022))+(((-1.0)*x14023*x14025))+(((-1.0)*r22*x14024)));
evalcond[2]=(((r01*x14026))+(((-1.0)*x14020*x14025))+(((-1.0)*r02*x14024)));
evalcond[3]=((-1.0)+((r11*x14026))+(((-1.0)*r12*x14024))+(((-1.0)*x14021*x14025)));
evalcond[4]=(((cj2*sj1))+((r01*x14027))+((r02*x14019))+((cj1*sj2))+(((-1.0)*x14020*x14024)));
evalcond[5]=((((-1.0)*cj1*cj2))+((x14018*x14022))+((r22*x14019))+((sj1*sj2))+(((-1.0)*x14023*x14024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14029 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14029)==0){
continue;
}
IkReal x14028=pow(x14029,-0.5);
CheckValue<IkReal> x14030 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14030.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14030.value));
IkReal gconst37=((-1.0)*r01*x14028);
IkReal gconst38=(r00*x14028);
CheckValue<IkReal> x14031 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14031.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14031.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14034 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14034.valid){
continue;
}
IkReal x14032=((-1.0)*(x14034.value));
IkReal x14033=x14028;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14032;
IkReal gconst36=x14032;
IkReal gconst37=((-1.0)*r01*x14033);
IkReal gconst38=(r00*x14033);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14037 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14037.valid){
continue;
}
IkReal x14035=((-1.0)*(x14037.value));
IkReal x14036=x14028;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14035;
IkReal gconst36=x14035;
IkReal gconst37=((-1.0)*r01*x14036);
IkReal gconst38=(r00*x14036);
CheckValue<IkReal> x14045=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14045.valid){
continue;
}
IkReal x14038=x14045.value;
IkReal x14039=(sj3*x14038);
IkReal x14040=(r11*x14039);
IkReal x14041=(r21*x14039);
IkReal x14042=(r20*x14039);
IkReal x14043=(r10*x14039);
IkReal x14044=(r00*r01*x14039);
j4eval[0]=IKsign((((r21*x14040*(r01*r01)))+((r00*r01*r10*x14041))+((r00*r01*r20*x14040))+((r10*x14042*(r00*r00)))+((r12*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14046=gconst38*gconst38;
IkReal x14047=gconst37*gconst37;
IkReal x14048=((1.0)*cj3);
IkReal x14049=(r11*r20);
IkReal x14050=(r10*sj3);
IkReal x14051=(gconst37*gconst38);
IkReal x14052=(r11*sj3);
IkReal x14053=(r21*x14047);
IkReal x14054=(cj3*x14051);
CheckValue<IkReal> x14055=IKPowWithIntegerCheck(IKsign((((r10*r21*x14054))+(((-1.0)*r12*r22*x14048))+(((-1.0)*r11*x14048*x14053))+(((-1.0)*r10*r20*x14046*x14048))+((x14049*x14054)))),-1);
if(!x14055.valid){
continue;
}
CheckValue<IkReal> x14056 = IKatan2WithCheck(IkReal((((gconst37*r22*x14050))+((gconst38*r22*x14052)))),IkReal((((x14050*x14053))+((r21*x14051*x14052))+(((-1.0)*sj3*x14046*x14049))+(((-1.0)*r20*x14050*x14051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14055.value)))+(x14056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14057=IKsin(j4);
IkReal x14058=IKcos(j4);
IkReal x14059=(cj2*sj1);
IkReal x14060=(cj1*sj2);
IkReal x14061=(gconst38*r21);
IkReal x14062=(cj3*r20);
IkReal x14063=(gconst38*r10);
IkReal x14064=(cj3*gconst37);
IkReal x14065=(sj1*sj2);
IkReal x14066=(gconst38*r00);
IkReal x14067=(cj1*cj2);
IkReal x14068=(gconst37*sj3);
IkReal x14069=(gconst38*r20);
IkReal x14070=(gconst38*r01);
IkReal x14071=(gconst38*r11);
IkReal x14072=((1.0)*x14058);
IkReal x14073=((1.0)*x14057);
IkReal x14074=(cj3*x14057);
IkReal x14075=(sj3*x14058);
IkReal x14076=(gconst37*x14057);
IkReal x14077=(x14059+x14060);
evalcond[0]=((((-1.0)*r22*x14072))+((r21*x14076))+(((-1.0)*x14069*x14073)));
evalcond[1]=((((-1.0)*x14066*x14073))+((r01*x14076))+(((-1.0)*r02*x14072)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14072))+((r11*x14076))+(((-1.0)*x14063*x14073)));
evalcond[3]=(((sj3*x14071))+((r10*x14068))+((r12*x14074))+(((-1.0)*cj3*x14063*x14072))+((r11*x14058*x14064)));
evalcond[4]=(((x14063*x14075))+(((-1.0)*r11*x14068*x14072))+((r10*x14064))+(((-1.0)*r12*sj3*x14073))+((cj3*x14071)));
evalcond[5]=(((r21*x14058*x14064))+((r22*x14074))+((sj3*x14061))+((r20*x14068))+x14077+(((-1.0)*gconst38*x14062*x14072)));
evalcond[6]=(((r02*x14074))+((r01*x14058*x14064))+((sj3*x14070))+(((-1.0)*cj3*x14066*x14072))+((r00*x14068))+(((-1.0)*x14065))+x14067);
evalcond[7]=((((-1.0)*r02*sj3*x14073))+(((-1.0)*r01*x14068*x14072))+((r00*x14064))+((x14066*x14075))+x14077+((cj3*x14070)));
evalcond[8]=(((cj3*x14061))+(((-1.0)*r22*sj3*x14073))+((gconst37*x14062))+((x14069*x14075))+(((-1.0)*x14067))+(((-1.0)*r21*x14068*x14072))+x14065);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14078=gconst38*gconst38;
IkReal x14079=gconst37*gconst37;
IkReal x14080=(gconst37*r10);
IkReal x14081=(cj3*r22);
IkReal x14082=((1.0)*gconst38);
IkReal x14083=(r21*sj3);
IkReal x14084=(gconst38*r11);
IkReal x14085=(cj3*r20);
IkReal x14086=(cj3*r21);
IkReal x14087=(r20*sj3);
CheckValue<IkReal> x14088=IKPowWithIntegerCheck(IKsign((((r11*x14079*x14083))+((r12*r22*sj3))+((r10*x14078*x14087))+(((-1.0)*gconst37*r11*x14082*x14087))+(((-1.0)*x14080*x14082*x14083)))),-1);
if(!x14088.valid){
continue;
}
CheckValue<IkReal> x14089 = IKatan2WithCheck(IkReal((((x14081*x14084))+((x14080*x14081)))),IkReal((((r10*x14079*x14086))+((gconst37*x14084*x14086))+(((-1.0)*r11*x14078*x14085))+(((-1.0)*x14080*x14082*x14085)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14088.value)))+(x14089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14090=IKsin(j4);
IkReal x14091=IKcos(j4);
IkReal x14092=(cj2*sj1);
IkReal x14093=(cj1*sj2);
IkReal x14094=(gconst38*r21);
IkReal x14095=(cj3*r20);
IkReal x14096=(gconst38*r10);
IkReal x14097=(cj3*gconst37);
IkReal x14098=(sj1*sj2);
IkReal x14099=(gconst38*r00);
IkReal x14100=(cj1*cj2);
IkReal x14101=(gconst37*sj3);
IkReal x14102=(gconst38*r20);
IkReal x14103=(gconst38*r01);
IkReal x14104=(gconst38*r11);
IkReal x14105=((1.0)*x14091);
IkReal x14106=((1.0)*x14090);
IkReal x14107=(cj3*x14090);
IkReal x14108=(sj3*x14091);
IkReal x14109=(gconst37*x14090);
IkReal x14110=(x14093+x14092);
evalcond[0]=((((-1.0)*r22*x14105))+((r21*x14109))+(((-1.0)*x14102*x14106)));
evalcond[1]=((((-1.0)*x14099*x14106))+((r01*x14109))+(((-1.0)*r02*x14105)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14105))+(((-1.0)*x14096*x14106))+((r11*x14109)));
evalcond[3]=(((sj3*x14104))+((r11*x14091*x14097))+((r10*x14101))+((r12*x14107))+(((-1.0)*cj3*x14096*x14105)));
evalcond[4]=((((-1.0)*r11*x14101*x14105))+((cj3*x14104))+((x14096*x14108))+((r10*x14097))+(((-1.0)*r12*sj3*x14106)));
evalcond[5]=(((sj3*x14094))+((r22*x14107))+((r21*x14091*x14097))+x14110+((r20*x14101))+(((-1.0)*gconst38*x14095*x14105)));
evalcond[6]=(((sj3*x14103))+((r02*x14107))+((r01*x14091*x14097))+((r00*x14101))+(((-1.0)*cj3*x14099*x14105))+(((-1.0)*x14098))+x14100);
evalcond[7]=(((r00*x14097))+((x14099*x14108))+(((-1.0)*r02*sj3*x14106))+((cj3*x14103))+(((-1.0)*r01*x14101*x14105))+x14110);
evalcond[8]=((((-1.0)*r22*sj3*x14106))+(((-1.0)*r21*x14101*x14105))+((x14102*x14108))+(((-1.0)*x14100))+((gconst37*x14095))+((cj3*x14094))+x14098);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14111=((1.0)*gconst38);
CheckValue<IkReal> x14112 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14111))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14112.valid){
continue;
}
CheckValue<IkReal> x14113=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14111)))),-1);
if(!x14113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14112.value)+(((1.5707963267949)*(x14113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14114=IKsin(j4);
IkReal x14115=IKcos(j4);
IkReal x14116=(cj2*sj1);
IkReal x14117=(cj1*sj2);
IkReal x14118=(gconst38*r21);
IkReal x14119=(cj3*r20);
IkReal x14120=(gconst38*r10);
IkReal x14121=(cj3*gconst37);
IkReal x14122=(sj1*sj2);
IkReal x14123=(gconst38*r00);
IkReal x14124=(cj1*cj2);
IkReal x14125=(gconst37*sj3);
IkReal x14126=(gconst38*r20);
IkReal x14127=(gconst38*r01);
IkReal x14128=(gconst38*r11);
IkReal x14129=((1.0)*x14115);
IkReal x14130=((1.0)*x14114);
IkReal x14131=(cj3*x14114);
IkReal x14132=(sj3*x14115);
IkReal x14133=(gconst37*x14114);
IkReal x14134=(x14116+x14117);
evalcond[0]=((((-1.0)*r22*x14129))+((r21*x14133))+(((-1.0)*x14126*x14130)));
evalcond[1]=((((-1.0)*x14123*x14130))+(((-1.0)*r02*x14129))+((r01*x14133)));
evalcond[2]=((-1.0)+(((-1.0)*x14120*x14130))+(((-1.0)*r12*x14129))+((r11*x14133)));
evalcond[3]=((((-1.0)*cj3*x14120*x14129))+((r12*x14131))+((r11*x14115*x14121))+((r10*x14125))+((sj3*x14128)));
evalcond[4]=(((cj3*x14128))+(((-1.0)*r11*x14125*x14129))+(((-1.0)*r12*sj3*x14130))+((r10*x14121))+((x14120*x14132)));
evalcond[5]=(((r21*x14115*x14121))+((sj3*x14118))+(((-1.0)*gconst38*x14119*x14129))+((r20*x14125))+((r22*x14131))+x14134);
evalcond[6]=(((r01*x14115*x14121))+((r00*x14125))+(((-1.0)*cj3*x14123*x14129))+((r02*x14131))+(((-1.0)*x14122))+x14124+((sj3*x14127)));
evalcond[7]=((((-1.0)*r02*sj3*x14130))+((cj3*x14127))+((r00*x14121))+(((-1.0)*r01*x14125*x14129))+x14134+((x14123*x14132)));
evalcond[8]=(((x14126*x14132))+((cj3*x14118))+(((-1.0)*r22*sj3*x14130))+(((-1.0)*x14124))+x14122+((gconst37*x14119))+(((-1.0)*r21*x14125*x14129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14136 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14136)==0){
continue;
}
IkReal x14135=pow(x14136,-0.5);
CheckValue<IkReal> x14137 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14137.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14137.value))));
IkReal gconst40=((1.0)*r01*x14135);
IkReal gconst41=((-1.0)*r00*x14135);
CheckValue<IkReal> x14138 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14138.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14138.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14141 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14141.valid){
continue;
}
IkReal x14139=((1.0)*(x14141.value));
IkReal x14140=x14135;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14139)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14139)));
IkReal gconst40=((1.0)*r01*x14140);
IkReal gconst41=((-1.0)*r00*x14140);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14144 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14144.valid){
continue;
}
IkReal x14142=((1.0)*(x14144.value));
IkReal x14143=x14135;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14142)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14142)));
IkReal gconst40=((1.0)*r01*x14143);
IkReal gconst41=((-1.0)*r00*x14143);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14145=gconst41*gconst41;
IkReal x14146=gconst40*gconst40;
IkReal x14147=(gconst40*r10);
IkReal x14148=(r22*sj3);
IkReal x14149=(r11*sj3);
IkReal x14150=((1.0)*cj3);
IkReal x14151=(gconst41*r21);
IkReal x14152=(gconst41*r20);
IkReal x14153=(r21*x14146);
IkReal x14154=((1.0)*r20*x14145);
CheckValue<IkReal> x14155 = IKatan2WithCheck(IkReal((((x14147*x14148))+((gconst41*r11*x14148)))),IkReal((((r10*sj3*x14153))+(((-1.0)*x14149*x14154))+((gconst40*x14149*x14151))+(((-1.0)*sj3*x14147*x14152)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14155.valid){
continue;
}
CheckValue<IkReal> x14156=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14150*x14153))+((cj3*gconst40*r11*x14152))+(((-1.0)*r10*r20*x14145*x14150))+(((-1.0)*r12*r22*x14150))+((cj3*x14147*x14151)))),-1);
if(!x14156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14155.value)+(((1.5707963267949)*(x14156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14157=IKsin(j4);
IkReal x14158=IKcos(j4);
IkReal x14159=(cj2*sj1);
IkReal x14160=(cj1*sj2);
IkReal x14161=(gconst40*sj3);
IkReal x14162=(gconst41*sj3);
IkReal x14163=(gconst41*r20);
IkReal x14164=(cj3*gconst41);
IkReal x14165=(sj1*sj2);
IkReal x14166=(cj1*cj2);
IkReal x14167=(cj3*gconst40);
IkReal x14168=((1.0)*x14158);
IkReal x14169=((1.0)*x14157);
IkReal x14170=(cj3*x14157);
IkReal x14171=(gconst40*x14157);
IkReal x14172=(x14159+x14160);
IkReal x14173=(x14158*x14167);
evalcond[0]=((((-1.0)*x14163*x14169))+(((-1.0)*r22*x14168))+((r21*x14171)));
evalcond[1]=((((-1.0)*r02*x14168))+((r01*x14171))+(((-1.0)*gconst41*r00*x14169)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14169))+((r11*x14171))+(((-1.0)*r12*x14168)));
evalcond[3]=(((r10*x14161))+((r11*x14173))+((r12*x14170))+((r11*x14162))+(((-1.0)*r10*x14164*x14168)));
evalcond[4]=(((r10*x14167))+(((-1.0)*r11*x14161*x14168))+(((-1.0)*r12*sj3*x14169))+((r11*x14164))+((r10*x14158*x14162)));
evalcond[5]=(((r22*x14170))+((r21*x14173))+x14172+(((-1.0)*cj3*x14163*x14168))+((r21*x14162))+((r20*x14161)));
evalcond[6]=(((r01*x14173))+(((-1.0)*r00*x14164*x14168))+((r02*x14170))+((r00*x14161))+((r01*x14162))+x14166+(((-1.0)*x14165)));
evalcond[7]=((((-1.0)*r02*sj3*x14169))+((r00*x14158*x14162))+((r00*x14167))+((r01*x14164))+x14172+(((-1.0)*r01*x14161*x14168)));
evalcond[8]=((((-1.0)*r21*x14161*x14168))+(((-1.0)*r22*sj3*x14169))+x14165+((r20*x14158*x14162))+((r21*x14164))+((r20*x14167))+(((-1.0)*x14166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14174=((1.0)*gconst41);
CheckValue<IkReal> x14175=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r20))+(((-1.0)*r21*x14174)))),-1);
if(!x14175.valid){
continue;
}
CheckValue<IkReal> x14176 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14174))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14175.value)))+(x14176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14177=IKsin(j4);
IkReal x14178=IKcos(j4);
IkReal x14179=(cj2*sj1);
IkReal x14180=(cj1*sj2);
IkReal x14181=(gconst40*sj3);
IkReal x14182=(gconst41*sj3);
IkReal x14183=(gconst41*r20);
IkReal x14184=(cj3*gconst41);
IkReal x14185=(sj1*sj2);
IkReal x14186=(cj1*cj2);
IkReal x14187=(cj3*gconst40);
IkReal x14188=((1.0)*x14178);
IkReal x14189=((1.0)*x14177);
IkReal x14190=(cj3*x14177);
IkReal x14191=(gconst40*x14177);
IkReal x14192=(x14179+x14180);
IkReal x14193=(x14178*x14187);
evalcond[0]=((((-1.0)*r22*x14188))+((r21*x14191))+(((-1.0)*x14183*x14189)));
evalcond[1]=((((-1.0)*gconst41*r00*x14189))+(((-1.0)*r02*x14188))+((r01*x14191)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14188))+((r11*x14191))+(((-1.0)*gconst41*r10*x14189)));
evalcond[3]=((((-1.0)*r10*x14184*x14188))+((r11*x14193))+((r12*x14190))+((r11*x14182))+((r10*x14181)));
evalcond[4]=((((-1.0)*r12*sj3*x14189))+(((-1.0)*r11*x14181*x14188))+((r10*x14178*x14182))+((r11*x14184))+((r10*x14187)));
evalcond[5]=(((r20*x14181))+(((-1.0)*cj3*x14183*x14188))+((r22*x14190))+((r21*x14182))+x14192+((r21*x14193)));
evalcond[6]=(((r02*x14190))+(((-1.0)*r00*x14184*x14188))+((r01*x14182))+((r00*x14181))+((r01*x14193))+x14186+(((-1.0)*x14185)));
evalcond[7]=(((r00*x14178*x14182))+(((-1.0)*r01*x14181*x14188))+((r01*x14184))+(((-1.0)*r02*sj3*x14189))+((r00*x14187))+x14192);
evalcond[8]=(((r20*x14187))+((r20*x14178*x14182))+(((-1.0)*r21*x14181*x14188))+((r21*x14184))+x14185+(((-1.0)*r22*sj3*x14189))+(((-1.0)*x14186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14194 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14194.valid){
continue;
}
CheckValue<IkReal> x14195=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14194.value)+(((1.5707963267949)*(x14195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14196=IKsin(j4);
IkReal x14197=IKcos(j4);
IkReal x14198=(cj2*sj1);
IkReal x14199=(cj1*sj2);
IkReal x14200=(gconst40*sj3);
IkReal x14201=(gconst41*sj3);
IkReal x14202=(gconst41*r20);
IkReal x14203=(cj3*gconst41);
IkReal x14204=(sj1*sj2);
IkReal x14205=(cj1*cj2);
IkReal x14206=(cj3*gconst40);
IkReal x14207=((1.0)*x14197);
IkReal x14208=((1.0)*x14196);
IkReal x14209=(cj3*x14196);
IkReal x14210=(gconst40*x14196);
IkReal x14211=(x14198+x14199);
IkReal x14212=(x14197*x14206);
evalcond[0]=((((-1.0)*x14202*x14208))+((r21*x14210))+(((-1.0)*r22*x14207)));
evalcond[1]=((((-1.0)*gconst41*r00*x14208))+((r01*x14210))+(((-1.0)*r02*x14207)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14208))+((r11*x14210))+(((-1.0)*r12*x14207)));
evalcond[3]=(((r11*x14212))+(((-1.0)*r10*x14203*x14207))+((r10*x14200))+((r12*x14209))+((r11*x14201)));
evalcond[4]=(((r10*x14206))+((r10*x14197*x14201))+(((-1.0)*r11*x14200*x14207))+(((-1.0)*r12*sj3*x14208))+((r11*x14203)));
evalcond[5]=(((r20*x14200))+((r21*x14201))+(((-1.0)*cj3*x14202*x14207))+((r22*x14209))+((r21*x14212))+x14211);
evalcond[6]=(((r02*x14209))+((r01*x14212))+(((-1.0)*r00*x14203*x14207))+((r00*x14200))+((r01*x14201))+(((-1.0)*x14204))+x14205);
evalcond[7]=(((r00*x14197*x14201))+(((-1.0)*r01*x14200*x14207))+(((-1.0)*r02*sj3*x14208))+((r00*x14206))+((r01*x14203))+x14211);
evalcond[8]=(((r20*x14206))+((r21*x14203))+((r20*x14197*x14201))+(((-1.0)*r21*x14200*x14207))+(((-1.0)*x14205))+(((-1.0)*r22*sj3*x14208))+x14204);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14213=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14213);
rxp1_1=(px*r21);
rxp1_2=(r11*x14213);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14214=(r11*sj5);
IkReal x14215=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14215))+x14214);
j4eval[1]=((((-1.0)*cj3*x14215))+((cj3*x14214)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14216=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14216);
rxp1_1=(px*r21);
rxp1_2=(r11*x14216);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14217=(cj5*r10);
IkReal x14218=(r11*sj5);
j4eval[0]=((((-1.0)*x14217))+x14218);
j4eval[1]=(((sj3*x14217))+(((-1.0)*sj3*x14218)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14219=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14219);
rxp1_1=(px*r21);
rxp1_2=(r11*x14219);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14220=((1.0)*r10);
CheckValue<IkReal> x14221=IKPowWithIntegerCheck(cj3,-1);
if(!x14221.valid){
continue;
}
CheckValue<IkReal> x14222=IKPowWithIntegerCheck(r02,-1);
if(!x14222.valid){
continue;
}
CheckValue<IkReal> x14223=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14220))),-1);
if(!x14223.valid){
continue;
}
if( IKabs(((x14221.value)*(x14222.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14223.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14220)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14221.value)*(x14222.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14223.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14220))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14221.value)*(x14222.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14223.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14220))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14224=IKsin(j4);
IkReal x14225=IKcos(j4);
IkReal x14226=(cj2*sj1);
IkReal x14227=(cj1*sj2);
IkReal x14228=(cj5*r10);
IkReal x14229=(sj1*sj2);
IkReal x14230=(cj5*sj3);
IkReal x14231=(r11*sj5);
IkReal x14232=(cj3*sj5);
IkReal x14233=(r21*sj5);
IkReal x14234=(cj1*cj2);
IkReal x14235=(cj3*cj5);
IkReal x14236=(sj3*sj5);
IkReal x14237=((1.0)*x14224);
IkReal x14238=(r20*x14225);
IkReal x14239=(cj3*x14225);
IkReal x14240=(sj3*x14225);
IkReal x14241=(x14226+x14227);
evalcond[0]=((-1.0)*r02*x14225);
evalcond[1]=(((x14224*x14233))+(((-1.0)*cj5*r20*x14237)));
evalcond[2]=((((-1.0)*x14229))+x14234+((cj3*r02*x14224)));
evalcond[3]=((((-1.0)*r02*sj3*x14237))+x14241);
evalcond[4]=((-1.0)+(((-1.0)*x14228*x14237))+((x14224*x14231)));
evalcond[5]=(((x14231*x14239))+(((-1.0)*x14228*x14239))+((r10*x14236))+((r11*x14230)));
evalcond[6]=(((x14228*x14240))+((r10*x14232))+(((-1.0)*x14231*x14240))+((r11*x14235)));
evalcond[7]=(((r20*x14236))+((r21*x14225*x14232))+((r21*x14230))+(((-1.0)*x14235*x14238))+x14241);
evalcond[8]=(((r20*x14232))+((r21*x14235))+(((-1.0)*x14233*x14240))+((x14230*x14238))+(((-1.0)*x14234))+x14229);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14242=(cj5*r10);
IkReal x14243=((1.0)*r11);
CheckValue<IkReal> x14244=IKPowWithIntegerCheck(((((-1.0)*x14242))+((r11*sj5))),-1);
if(!x14244.valid){
continue;
}
CheckValue<IkReal> x14245=IKPowWithIntegerCheck((((sj3*x14242))+(((-1.0)*sj3*sj5*x14243))),-1);
if(!x14245.valid){
continue;
}
if( IKabs(x14244.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14245.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14243)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14244.value)+IKsqr(((x14245.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14243))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14244.value, ((x14245.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14243))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14246=IKsin(j4);
IkReal x14247=IKcos(j4);
IkReal x14248=(cj2*sj1);
IkReal x14249=(cj1*sj2);
IkReal x14250=(cj5*r10);
IkReal x14251=(sj1*sj2);
IkReal x14252=(cj5*sj3);
IkReal x14253=(r11*sj5);
IkReal x14254=(cj3*sj5);
IkReal x14255=(r21*sj5);
IkReal x14256=(cj1*cj2);
IkReal x14257=(cj3*cj5);
IkReal x14258=(sj3*sj5);
IkReal x14259=((1.0)*x14246);
IkReal x14260=(r20*x14247);
IkReal x14261=(cj3*x14247);
IkReal x14262=(sj3*x14247);
IkReal x14263=(x14248+x14249);
evalcond[0]=((-1.0)*r02*x14247);
evalcond[1]=(((x14246*x14255))+(((-1.0)*cj5*r20*x14259)));
evalcond[2]=(((cj3*r02*x14246))+x14256+(((-1.0)*x14251)));
evalcond[3]=((((-1.0)*r02*sj3*x14259))+x14263);
evalcond[4]=((-1.0)+((x14246*x14253))+(((-1.0)*x14250*x14259)));
evalcond[5]=((((-1.0)*x14250*x14261))+((r10*x14258))+((r11*x14252))+((x14253*x14261)));
evalcond[6]=(((x14250*x14262))+((r10*x14254))+((r11*x14257))+(((-1.0)*x14253*x14262)));
evalcond[7]=(((r21*x14247*x14254))+((r21*x14252))+((r20*x14258))+(((-1.0)*x14257*x14260))+x14263);
evalcond[8]=(((r21*x14257))+((r20*x14254))+(((-1.0)*x14255*x14262))+((x14252*x14260))+x14251+(((-1.0)*x14256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14264=((1.0)*r10);
IkReal x14265=(r11*sj5);
CheckValue<IkReal> x14266=IKPowWithIntegerCheck(((((-1.0)*cj5*x14264))+x14265),-1);
if(!x14266.valid){
continue;
}
CheckValue<IkReal> x14267=IKPowWithIntegerCheck((((cj3*x14265))+(((-1.0)*cj3*cj5*x14264))),-1);
if(!x14267.valid){
continue;
}
if( IKabs(x14266.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14267.value)*(((((-1.0)*sj3*sj5*x14264))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14266.value)+IKsqr(((x14267.value)*(((((-1.0)*sj3*sj5*x14264))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14266.value, ((x14267.value)*(((((-1.0)*sj3*sj5*x14264))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14268=IKsin(j4);
IkReal x14269=IKcos(j4);
IkReal x14270=(cj2*sj1);
IkReal x14271=(cj1*sj2);
IkReal x14272=(cj5*r10);
IkReal x14273=(sj1*sj2);
IkReal x14274=(cj5*sj3);
IkReal x14275=(r11*sj5);
IkReal x14276=(cj3*sj5);
IkReal x14277=(r21*sj5);
IkReal x14278=(cj1*cj2);
IkReal x14279=(cj3*cj5);
IkReal x14280=(sj3*sj5);
IkReal x14281=((1.0)*x14268);
IkReal x14282=(r20*x14269);
IkReal x14283=(cj3*x14269);
IkReal x14284=(sj3*x14269);
IkReal x14285=(x14271+x14270);
evalcond[0]=((-1.0)*r02*x14269);
evalcond[1]=(((x14268*x14277))+(((-1.0)*cj5*r20*x14281)));
evalcond[2]=((((-1.0)*x14273))+((cj3*r02*x14268))+x14278);
evalcond[3]=((((-1.0)*r02*sj3*x14281))+x14285);
evalcond[4]=((-1.0)+((x14268*x14275))+(((-1.0)*x14272*x14281)));
evalcond[5]=((((-1.0)*x14272*x14283))+((r10*x14280))+((r11*x14274))+((x14275*x14283)));
evalcond[6]=(((x14272*x14284))+((r11*x14279))+((r10*x14276))+(((-1.0)*x14275*x14284)));
evalcond[7]=(((r21*x14269*x14276))+(((-1.0)*x14279*x14282))+((r21*x14274))+x14285+((r20*x14280)));
evalcond[8]=((((-1.0)*x14278))+((r21*x14279))+((r20*x14276))+((x14274*x14282))+(((-1.0)*x14277*x14284))+x14273);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14286=cj5*cj5;
IkReal x14287=((1.0)*cj3);
IkReal x14288=(r10*r21);
IkReal x14289=(cj5*sj5);
IkReal x14290=(r11*r21);
IkReal x14291=(r11*r20);
IkReal x14292=(r22*sj3);
IkReal x14293=(r10*r20);
IkReal x14294=((1.0)*sj3*x14286);
CheckValue<IkReal> x14295 = IKatan2WithCheck(IkReal((((r10*sj5*x14292))+((cj5*r11*x14292)))),IkReal(((((-1.0)*sj3*x14289*x14293))+(((-1.0)*x14288*x14294))+((sj3*x14289*x14290))+((sj3*x14288))+(((-1.0)*x14291*x14294)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14295.valid){
continue;
}
CheckValue<IkReal> x14296=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14286*x14287*x14293))+((cj3*x14286*x14290))+(((-1.0)*x14287*x14290))+((cj3*x14289*x14291))+((cj3*x14288*x14289))+(((-1.0)*r12*r22*x14287)))),-1);
if(!x14296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14295.value)+(((1.5707963267949)*(x14296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14297=IKsin(j4);
IkReal x14298=IKcos(j4);
IkReal x14299=(cj2*sj1);
IkReal x14300=(cj1*sj2);
IkReal x14301=(cj5*sj3);
IkReal x14302=(cj5*r10);
IkReal x14303=(r00*sj5);
IkReal x14304=(sj1*sj2);
IkReal x14305=(r11*sj5);
IkReal x14306=(cj3*cj5);
IkReal x14307=(cj3*sj5);
IkReal x14308=(r21*sj5);
IkReal x14309=(cj1*cj2);
IkReal x14310=(sj3*sj5);
IkReal x14311=(r01*sj5);
IkReal x14312=((1.0)*x14298);
IkReal x14313=((1.0)*x14297);
IkReal x14314=(cj3*x14297);
IkReal x14315=(cj3*x14298);
IkReal x14316=(x14300+x14299);
evalcond[0]=(((x14297*x14308))+(((-1.0)*r22*x14312))+(((-1.0)*cj5*r20*x14313)));
evalcond[1]=((((-1.0)*r02*x14312))+(((-1.0)*cj5*r00*x14313))+((x14297*x14311)));
evalcond[2]=((-1.0)+((x14297*x14305))+(((-1.0)*x14302*x14313))+(((-1.0)*r12*x14312)));
evalcond[3]=(((r11*x14301))+((x14305*x14315))+(((-1.0)*cj3*x14302*x14312))+((r12*x14314))+((r10*x14310)));
evalcond[4]=(((r11*x14306))+(((-1.0)*r12*sj3*x14313))+((r10*x14298*x14301))+((r10*x14307))+(((-1.0)*sj3*x14305*x14312)));
evalcond[5]=(((r21*x14298*x14307))+(((-1.0)*r20*x14306*x14312))+((r20*x14310))+x14316+((r21*x14301))+((r22*x14314)));
evalcond[6]=((((-1.0)*r00*x14306*x14312))+((r02*x14314))+((r01*x14298*x14307))+((r01*x14301))+(((-1.0)*x14304))+x14309+((sj3*x14303)));
evalcond[7]=((((-1.0)*r01*x14310*x14312))+((r01*x14306))+(((-1.0)*r02*sj3*x14313))+((r00*x14298*x14301))+x14316+((cj3*x14303)));
evalcond[8]=(((r20*x14307))+(((-1.0)*sj3*x14308*x14312))+((r20*x14298*x14301))+(((-1.0)*x14309))+x14304+((r21*x14306))+(((-1.0)*r22*sj3*x14313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14317=((1.0)*cj5);
CheckValue<IkReal> x14318=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14317))+(((-1.0)*r20*sj5)))),-1);
if(!x14318.valid){
continue;
}
CheckValue<IkReal> x14319 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14317)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14318.value)))+(x14319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14320=IKsin(j4);
IkReal x14321=IKcos(j4);
IkReal x14322=(cj2*sj1);
IkReal x14323=(cj1*sj2);
IkReal x14324=(cj5*sj3);
IkReal x14325=(cj5*r10);
IkReal x14326=(r00*sj5);
IkReal x14327=(sj1*sj2);
IkReal x14328=(r11*sj5);
IkReal x14329=(cj3*cj5);
IkReal x14330=(cj3*sj5);
IkReal x14331=(r21*sj5);
IkReal x14332=(cj1*cj2);
IkReal x14333=(sj3*sj5);
IkReal x14334=(r01*sj5);
IkReal x14335=((1.0)*x14321);
IkReal x14336=((1.0)*x14320);
IkReal x14337=(cj3*x14320);
IkReal x14338=(cj3*x14321);
IkReal x14339=(x14323+x14322);
evalcond[0]=((((-1.0)*r22*x14335))+(((-1.0)*cj5*r20*x14336))+((x14320*x14331)));
evalcond[1]=((((-1.0)*cj5*r00*x14336))+(((-1.0)*r02*x14335))+((x14320*x14334)));
evalcond[2]=((-1.0)+((x14320*x14328))+(((-1.0)*r12*x14335))+(((-1.0)*x14325*x14336)));
evalcond[3]=((((-1.0)*cj3*x14325*x14335))+((r12*x14337))+((r11*x14324))+((r10*x14333))+((x14328*x14338)));
evalcond[4]=((((-1.0)*sj3*x14328*x14335))+((r10*x14321*x14324))+((r11*x14329))+((r10*x14330))+(((-1.0)*r12*sj3*x14336)));
evalcond[5]=(((r20*x14333))+((r21*x14321*x14330))+(((-1.0)*r20*x14329*x14335))+((r21*x14324))+((r22*x14337))+x14339);
evalcond[6]=(((r02*x14337))+((r01*x14324))+(((-1.0)*r00*x14329*x14335))+((sj3*x14326))+((r01*x14321*x14330))+x14332+(((-1.0)*x14327)));
evalcond[7]=((((-1.0)*r02*sj3*x14336))+((r01*x14329))+((cj3*x14326))+((r00*x14321*x14324))+(((-1.0)*r01*x14333*x14335))+x14339);
evalcond[8]=(((r20*x14330))+(((-1.0)*r22*sj3*x14336))+(((-1.0)*sj3*x14331*x14335))+(((-1.0)*x14332))+((r21*x14329))+x14327+((r20*x14321*x14324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14340 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14340.valid){
continue;
}
CheckValue<IkReal> x14341=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14340.value)+(((1.5707963267949)*(x14341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14342=IKsin(j4);
IkReal x14343=IKcos(j4);
IkReal x14344=(cj2*sj1);
IkReal x14345=(cj1*sj2);
IkReal x14346=(cj5*sj3);
IkReal x14347=(cj5*r10);
IkReal x14348=(r00*sj5);
IkReal x14349=(sj1*sj2);
IkReal x14350=(r11*sj5);
IkReal x14351=(cj3*cj5);
IkReal x14352=(cj3*sj5);
IkReal x14353=(r21*sj5);
IkReal x14354=(cj1*cj2);
IkReal x14355=(sj3*sj5);
IkReal x14356=(r01*sj5);
IkReal x14357=((1.0)*x14343);
IkReal x14358=((1.0)*x14342);
IkReal x14359=(cj3*x14342);
IkReal x14360=(cj3*x14343);
IkReal x14361=(x14345+x14344);
evalcond[0]=((((-1.0)*cj5*r20*x14358))+(((-1.0)*r22*x14357))+((x14342*x14353)));
evalcond[1]=((((-1.0)*cj5*r00*x14358))+(((-1.0)*r02*x14357))+((x14342*x14356)));
evalcond[2]=((-1.0)+(((-1.0)*x14347*x14358))+(((-1.0)*r12*x14357))+((x14342*x14350)));
evalcond[3]=(((r12*x14359))+((r11*x14346))+((x14350*x14360))+((r10*x14355))+(((-1.0)*cj3*x14347*x14357)));
evalcond[4]=(((r11*x14351))+(((-1.0)*sj3*x14350*x14357))+((r10*x14343*x14346))+((r10*x14352))+(((-1.0)*r12*sj3*x14358)));
evalcond[5]=(((r20*x14355))+((r21*x14346))+(((-1.0)*r20*x14351*x14357))+((r21*x14343*x14352))+((r22*x14359))+x14361);
evalcond[6]=((((-1.0)*r00*x14351*x14357))+((r02*x14359))+((r01*x14346))+(((-1.0)*x14349))+((r01*x14343*x14352))+((sj3*x14348))+x14354);
evalcond[7]=(((r00*x14343*x14346))+((cj3*x14348))+((r01*x14351))+x14361+(((-1.0)*r02*sj3*x14358))+(((-1.0)*r01*x14355*x14357)));
evalcond[8]=((((-1.0)*r22*sj3*x14358))+((r20*x14352))+(((-1.0)*x14354))+(((-1.0)*sj3*x14353*x14357))+((r20*x14343*x14346))+((r21*x14351))+x14349);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14362=((-1.0)*r00);
IkReal x14364 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14364)==0){
continue;
}
IkReal x14363=pow(x14364,-0.5);
CheckValue<IkReal> x14365 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14362),IKFAST_ATAN2_MAGTHRESH);
if(!x14365.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14365.value));
IkReal gconst13=(r01*x14363);
IkReal gconst14=(x14362*x14363);
CheckValue<IkReal> x14366 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14366.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14366.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14367=((-1.0)*r00);
IkReal x14368=x14363;
CheckValue<IkReal> x14370 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14367),IKFAST_ATAN2_MAGTHRESH);
if(!x14370.valid){
continue;
}
IkReal x14369=((-1.0)*(x14370.value));
sj5=gconst13;
cj5=gconst14;
j5=x14369;
IkReal gconst12=x14369;
IkReal gconst13=(r01*x14368);
IkReal gconst14=(x14367*x14368);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14371=((1.0)*sj0);
IkReal x14372=((1.0)*cj0);
CheckValue<IkReal> x14373 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14371))+(((-1.0)*r02*x14372)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14371))+(((-1.0)*gconst13*r01*x14372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14373.valid){
continue;
}
CheckValue<IkReal> x14374=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14373.value)+(((1.5707963267949)*(x14374.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14375=IKsin(j4);
IkReal x14376=IKcos(j4);
IkReal x14377=((1.0)*r22);
IkReal x14378=((1.0)*r12);
IkReal x14379=(gconst13*sj3);
IkReal x14380=(gconst13*r01);
IkReal x14381=(sj1*sj2);
IkReal x14382=(gconst14*sj3);
IkReal x14383=(cj2*sj1);
IkReal x14384=((1.0)*sj0);
IkReal x14385=(cj3*gconst13);
IkReal x14386=(cj3*gconst14);
IkReal x14387=((1.0)*cj0);
IkReal x14388=((1.0)*gconst14);
IkReal x14389=(cj1*sj2);
IkReal x14390=(sj3*x14375);
IkReal x14391=((1.0)*cj1*cj2);
IkReal x14392=(cj3*x14376);
IkReal x14393=(cj3*x14375);
IkReal x14394=(gconst13*x14375);
IkReal x14395=((1.0)*x14376);
IkReal x14396=(x14375*x14388);
evalcond[0]=(((r21*x14394))+(((-1.0)*r20*x14396))+(((-1.0)*x14376*x14377)));
evalcond[1]=(cj0+(((-1.0)*x14376*x14378))+((r11*x14394))+(((-1.0)*r10*x14396)));
evalcond[2]=((((-1.0)*x14384))+((x14375*x14380))+(((-1.0)*r00*x14396))+(((-1.0)*r02*x14395)));
evalcond[3]=(((r21*x14376*x14385))+((r21*x14382))+((r22*x14393))+(((-1.0)*r20*x14386*x14395))+((r20*x14379))+x14389+x14383);
evalcond[4]=(((r20*x14385))+(((-1.0)*x14377*x14390))+((r20*x14376*x14382))+((r21*x14386))+(((-1.0)*r21*x14379*x14395))+x14381+(((-1.0)*x14391)));
evalcond[5]=(((cj0*x14381))+((r00*x14379))+(((-1.0)*cj1*cj2*x14387))+((r01*x14382))+((x14380*x14392))+((r02*x14393))+(((-1.0)*r00*x14386*x14395)));
evalcond[6]=((((-1.0)*r10*x14386*x14395))+((sj0*x14381))+(((-1.0)*cj1*cj2*x14384))+((r11*x14376*x14385))+((r12*x14393))+((r10*x14379))+((r11*x14382)));
evalcond[7]=((((-1.0)*r01*x14379*x14395))+((r00*x14385))+((r01*x14386))+(((-1.0)*x14383*x14387))+(((-1.0)*r02*x14390))+((r00*x14376*x14382))+(((-1.0)*x14387*x14389)));
evalcond[8]=((((-1.0)*x14384*x14389))+((r10*x14385))+((r11*x14386))+(((-1.0)*x14383*x14384))+((r10*x14376*x14382))+(((-1.0)*r11*x14379*x14395))+(((-1.0)*x14378*x14390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14397=((1.0)*gconst14);
CheckValue<IkReal> x14398 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst13*r21*sj0))+(((-1.0)*r20*sj0*x14397)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14398.valid){
continue;
}
CheckValue<IkReal> x14399=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14397)))),-1);
if(!x14399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14398.value)+(((1.5707963267949)*(x14399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14400=IKsin(j4);
IkReal x14401=IKcos(j4);
IkReal x14402=((1.0)*r22);
IkReal x14403=((1.0)*r12);
IkReal x14404=(gconst13*sj3);
IkReal x14405=(gconst13*r01);
IkReal x14406=(sj1*sj2);
IkReal x14407=(gconst14*sj3);
IkReal x14408=(cj2*sj1);
IkReal x14409=((1.0)*sj0);
IkReal x14410=(cj3*gconst13);
IkReal x14411=(cj3*gconst14);
IkReal x14412=((1.0)*cj0);
IkReal x14413=((1.0)*gconst14);
IkReal x14414=(cj1*sj2);
IkReal x14415=(sj3*x14400);
IkReal x14416=((1.0)*cj1*cj2);
IkReal x14417=(cj3*x14401);
IkReal x14418=(cj3*x14400);
IkReal x14419=(gconst13*x14400);
IkReal x14420=((1.0)*x14401);
IkReal x14421=(x14400*x14413);
evalcond[0]=(((r21*x14419))+(((-1.0)*x14401*x14402))+(((-1.0)*r20*x14421)));
evalcond[1]=((((-1.0)*r10*x14421))+(((-1.0)*x14401*x14403))+cj0+((r11*x14419)));
evalcond[2]=((((-1.0)*x14409))+((x14400*x14405))+(((-1.0)*r02*x14420))+(((-1.0)*r00*x14421)));
evalcond[3]=(((r21*x14407))+((r21*x14401*x14410))+((r22*x14418))+x14414+x14408+(((-1.0)*r20*x14411*x14420))+((r20*x14404)));
evalcond[4]=(((r21*x14411))+(((-1.0)*x14416))+(((-1.0)*x14402*x14415))+x14406+((r20*x14401*x14407))+(((-1.0)*r21*x14404*x14420))+((r20*x14410)));
evalcond[5]=((((-1.0)*cj1*cj2*x14412))+((x14405*x14417))+((cj0*x14406))+(((-1.0)*r00*x14411*x14420))+((r02*x14418))+((r01*x14407))+((r00*x14404)));
evalcond[6]=((((-1.0)*r10*x14411*x14420))+((r10*x14404))+((r12*x14418))+((sj0*x14406))+((r11*x14407))+((r11*x14401*x14410))+(((-1.0)*cj1*cj2*x14409)));
evalcond[7]=(((r00*x14401*x14407))+(((-1.0)*x14412*x14414))+((r00*x14410))+(((-1.0)*r02*x14415))+((r01*x14411))+(((-1.0)*x14408*x14412))+(((-1.0)*r01*x14404*x14420)));
evalcond[8]=((((-1.0)*x14408*x14409))+((r11*x14411))+(((-1.0)*x14403*x14415))+(((-1.0)*r11*x14404*x14420))+((r10*x14401*x14407))+(((-1.0)*x14409*x14414))+((r10*x14410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14422=((-1.0)*r01);
IkReal x14424 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14424)==0){
continue;
}
IkReal x14423=pow(x14424,-0.5);
CheckValue<IkReal> x14425 = IKatan2WithCheck(IkReal(x14422),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14425.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14425.value))));
IkReal gconst16=(x14422*x14423);
IkReal gconst17=((1.0)*r00*x14423);
CheckValue<IkReal> x14426 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14426.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14426.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14427=((-1.0)*r01);
CheckValue<IkReal> x14430 = IKatan2WithCheck(IkReal(x14427),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14430.valid){
continue;
}
IkReal x14428=((1.0)*(x14430.value));
IkReal x14429=x14423;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14428)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14428)));
IkReal gconst16=(x14427*x14429);
IkReal gconst17=((1.0)*r00*x14429);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14431=((-1.0)*r01);
CheckValue<IkReal> x14434 = IKatan2WithCheck(IkReal(x14431),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14434.valid){
continue;
}
IkReal x14432=((1.0)*(x14434.value));
IkReal x14433=x14423;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14432)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14432)));
IkReal gconst16=(x14431*x14433);
IkReal gconst17=((1.0)*r00*x14433);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14435=((-1.0)*r01);
CheckValue<IkReal> x14438 = IKatan2WithCheck(IkReal(x14435),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14438.valid){
continue;
}
IkReal x14436=((1.0)*(x14438.value));
IkReal x14437=x14423;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14436)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14436)));
IkReal gconst16=(x14435*x14437);
IkReal gconst17=((1.0)*r00*x14437);
IkReal x14439=r02*r02;
IkReal x14440=(r12*sj0);
IkReal x14441=((1.0)*cj0);
IkReal x14442=x14423;
j4eval[0]=((IKabs((((r02*x14440*x14442))+((cj0*x14439*x14442))+(((-1.0)*x14441*x14442)))))+(IKabs(((((-1.0)*x14440))+(((-1.0)*r02*x14441))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14443=((-1.0)*r01);
CheckValue<IkReal> x14446 = IKatan2WithCheck(IkReal(x14443),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14446.valid){
continue;
}
IkReal x14444=((1.0)*(x14446.value));
IkReal x14445=x14423;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14444)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14444)));
IkReal gconst16=(x14443*x14445);
IkReal gconst17=((1.0)*r00*x14445);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14447=((-1.0)*r01);
CheckValue<IkReal> x14450 = IKatan2WithCheck(IkReal(x14447),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14450.valid){
continue;
}
IkReal x14448=((1.0)*(x14450.value));
IkReal x14449=x14423;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14448)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14448)));
IkReal gconst16=(x14447*x14449);
IkReal gconst17=((1.0)*r00*x14449);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14451=gconst16*gconst16;
IkReal x14452=gconst17*gconst17;
IkReal x14453=(r11*sj3);
IkReal x14454=(cj3*r10);
IkReal x14455=((1.0)*cj3);
IkReal x14456=(r10*sj3);
IkReal x14457=(gconst16*gconst17);
IkReal x14458=(r21*x14451);
IkReal x14459=((1.0)*r20*x14452);
CheckValue<IkReal> x14460 = IKatan2WithCheck(IkReal((((gconst16*r22*x14456))+((gconst17*r22*x14453)))),IkReal((((r21*x14453*x14457))+(((-1.0)*x14453*x14459))+((x14456*x14458))+(((-1.0)*r20*x14456*x14457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14460.valid){
continue;
}
CheckValue<IkReal> x14461=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14454*x14459))+((cj3*r11*r20*x14457))+(((-1.0)*r11*x14455*x14458))+((r21*x14454*x14457))+(((-1.0)*r12*r22*x14455)))),-1);
if(!x14461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14460.value)+(((1.5707963267949)*(x14461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14462=IKsin(j4);
IkReal x14463=IKcos(j4);
IkReal x14464=(cj2*sj1);
IkReal x14465=(cj1*sj2);
IkReal x14466=(gconst16*r21);
IkReal x14467=(cj3*gconst17);
IkReal x14468=(gconst16*r20);
IkReal x14469=(sj1*sj2);
IkReal x14470=(gconst17*r20);
IkReal x14471=(gconst17*sj3);
IkReal x14472=(gconst16*r10);
IkReal x14473=(cj1*cj2);
IkReal x14474=(gconst16*sj3);
IkReal x14475=((1.0)*x14463);
IkReal x14476=((1.0)*x14462);
IkReal x14477=(gconst16*x14462);
IkReal x14478=(cj3*x14463);
IkReal x14479=(cj3*x14462);
IkReal x14480=(x14464+x14465);
evalcond[0]=(((x14462*x14466))+(((-1.0)*x14470*x14476))+(((-1.0)*r22*x14475)));
evalcond[1]=((((-1.0)*gconst17*r00*x14476))+((r01*x14477))+(((-1.0)*r02*x14475)));
evalcond[2]=((-1.0)+((r11*x14477))+(((-1.0)*r12*x14475))+(((-1.0)*gconst17*r10*x14476)));
evalcond[3]=(((gconst16*r11*x14478))+((sj3*x14472))+((r11*x14471))+((r12*x14479))+(((-1.0)*r10*x14467*x14475)));
evalcond[4]=((((-1.0)*r12*sj3*x14476))+((r11*x14467))+((r10*x14463*x14471))+(((-1.0)*r11*x14474*x14475))+((cj3*x14472)));
evalcond[5]=((((-1.0)*r20*x14467*x14475))+((sj3*x14468))+((r21*x14471))+((r22*x14479))+x14480+((x14466*x14478)));
evalcond[6]=(((gconst16*r01*x14478))+((r00*x14474))+((r01*x14471))+(((-1.0)*x14469))+((r02*x14479))+x14473+(((-1.0)*r00*x14467*x14475)));
evalcond[7]=(((r01*x14467))+(((-1.0)*r02*sj3*x14476))+((r00*x14463*x14471))+x14480+(((-1.0)*r01*x14474*x14475))+((cj3*gconst16*r00)));
evalcond[8]=(((cj3*x14468))+((r21*x14467))+(((-1.0)*r22*sj3*x14476))+(((-1.0)*x14473))+((sj3*x14463*x14470))+x14469+(((-1.0)*sj3*x14466*x14475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14481=((1.0)*gconst17);
CheckValue<IkReal> x14482=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14481)))),-1);
if(!x14482.valid){
continue;
}
CheckValue<IkReal> x14483 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst16*r01))+(((-1.0)*r00*x14481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14482.value)))+(x14483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14484=IKsin(j4);
IkReal x14485=IKcos(j4);
IkReal x14486=(cj2*sj1);
IkReal x14487=(cj1*sj2);
IkReal x14488=(gconst16*r21);
IkReal x14489=(cj3*gconst17);
IkReal x14490=(gconst16*r20);
IkReal x14491=(sj1*sj2);
IkReal x14492=(gconst17*r20);
IkReal x14493=(gconst17*sj3);
IkReal x14494=(gconst16*r10);
IkReal x14495=(cj1*cj2);
IkReal x14496=(gconst16*sj3);
IkReal x14497=((1.0)*x14485);
IkReal x14498=((1.0)*x14484);
IkReal x14499=(gconst16*x14484);
IkReal x14500=(cj3*x14485);
IkReal x14501=(cj3*x14484);
IkReal x14502=(x14486+x14487);
evalcond[0]=(((x14484*x14488))+(((-1.0)*r22*x14497))+(((-1.0)*x14492*x14498)));
evalcond[1]=((((-1.0)*r02*x14497))+((r01*x14499))+(((-1.0)*gconst17*r00*x14498)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14498))+((r11*x14499))+(((-1.0)*r12*x14497)));
evalcond[3]=(((r11*x14493))+((gconst16*r11*x14500))+((sj3*x14494))+(((-1.0)*r10*x14489*x14497))+((r12*x14501)));
evalcond[4]=((((-1.0)*r11*x14496*x14497))+((r11*x14489))+((r10*x14485*x14493))+((cj3*x14494))+(((-1.0)*r12*sj3*x14498)));
evalcond[5]=(((x14488*x14500))+((r21*x14493))+((sj3*x14490))+((r22*x14501))+x14502+(((-1.0)*r20*x14489*x14497)));
evalcond[6]=((((-1.0)*x14491))+((r02*x14501))+((gconst16*r01*x14500))+x14495+((r00*x14496))+((r01*x14493))+(((-1.0)*r00*x14489*x14497)));
evalcond[7]=(((r00*x14485*x14493))+(((-1.0)*r02*sj3*x14498))+(((-1.0)*r01*x14496*x14497))+x14502+((r01*x14489))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14495))+(((-1.0)*sj3*x14488*x14497))+((sj3*x14485*x14492))+((r21*x14489))+x14491+((cj3*x14490))+(((-1.0)*r22*sj3*x14498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14503=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14503.valid){
continue;
}
CheckValue<IkReal> x14504 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14503.value)))+(x14504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14505=IKsin(j4);
IkReal x14506=IKcos(j4);
IkReal x14507=(cj2*sj1);
IkReal x14508=(cj1*sj2);
IkReal x14509=(gconst16*r21);
IkReal x14510=(cj3*gconst17);
IkReal x14511=(gconst16*r20);
IkReal x14512=(sj1*sj2);
IkReal x14513=(gconst17*r20);
IkReal x14514=(gconst17*sj3);
IkReal x14515=(gconst16*r10);
IkReal x14516=(cj1*cj2);
IkReal x14517=(gconst16*sj3);
IkReal x14518=((1.0)*x14506);
IkReal x14519=((1.0)*x14505);
IkReal x14520=(gconst16*x14505);
IkReal x14521=(cj3*x14506);
IkReal x14522=(cj3*x14505);
IkReal x14523=(x14507+x14508);
evalcond[0]=((((-1.0)*r22*x14518))+((x14505*x14509))+(((-1.0)*x14513*x14519)));
evalcond[1]=(((r01*x14520))+(((-1.0)*gconst17*r00*x14519))+(((-1.0)*r02*x14518)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14519))+((r11*x14520))+(((-1.0)*r12*x14518)));
evalcond[3]=(((sj3*x14515))+((r11*x14514))+((r12*x14522))+(((-1.0)*r10*x14510*x14518))+((gconst16*r11*x14521)));
evalcond[4]=(((cj3*x14515))+((r11*x14510))+(((-1.0)*r11*x14517*x14518))+((r10*x14506*x14514))+(((-1.0)*r12*sj3*x14519)));
evalcond[5]=(((r22*x14522))+((sj3*x14511))+(((-1.0)*r20*x14510*x14518))+((x14509*x14521))+x14523+((r21*x14514)));
evalcond[6]=(((gconst16*r01*x14521))+((r00*x14517))+((r01*x14514))+(((-1.0)*r00*x14510*x14518))+x14516+((r02*x14522))+(((-1.0)*x14512)));
evalcond[7]=(((r01*x14510))+(((-1.0)*r01*x14517*x14518))+(((-1.0)*r02*sj3*x14519))+x14523+((r00*x14506*x14514))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*sj3*x14509*x14518))+((sj3*x14506*x14513))+((cj3*x14511))+x14512+(((-1.0)*r22*sj3*x14519))+((r21*x14510))+(((-1.0)*x14516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14524=((-1.0)*r01);
CheckValue<IkReal> x14527 = IKatan2WithCheck(IkReal(x14524),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14527.valid){
continue;
}
IkReal x14525=((1.0)*(x14527.value));
IkReal x14526=x14423;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14525)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14525)));
IkReal gconst16=(x14524*x14526);
IkReal gconst17=((1.0)*r00*x14526);
IkReal x14528=r02*r02;
IkReal x14529=(r12*sj0);
IkReal x14530=((1.0)*cj0);
IkReal x14531=x14423;
j4eval[0]=((IKabs(((((-1.0)*x14530*x14531))+((r02*x14529*x14531))+((cj0*x14528*x14531)))))+(IKabs(((((-1.0)*x14529))+(((-1.0)*r02*x14530))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14532=((1.0)*r12);
IkReal x14533=(sj1*sj2);
IkReal x14534=(cj1*cj2);
IkReal x14535=((1.0)*sj3);
IkReal x14536=(gconst16*r21);
IkReal x14537=(cj3*gconst16*r20);
IkReal x14538=(gconst17*r20*sj3);
IkReal x14539=(cj3*gconst17*r21);
CheckValue<IkReal> x14540=IKPowWithIntegerCheck(((((-1.0)*gconst16*r11*x14535*x14536))+(((-1.0)*r10*r20*x14535*(gconst17*gconst17)))+((gconst17*r10*sj3*x14536))+((gconst16*r11*x14538))),-1);
if(!x14540.valid){
continue;
}
CheckValue<IkReal> x14541=IKPowWithIntegerCheck(((((-1.0)*x14535*x14536))+x14538),-1);
if(!x14541.valid){
continue;
}
if( IKabs(((x14540.value)*(((((-1.0)*x14532*x14533))+(((-1.0)*x14532*x14539))+(((-1.0)*x14532*x14537))+((cj0*sj3*x14536))+((r12*x14534))+(((-1.0)*cj0*gconst17*r20*x14535)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14541.value)*(((((-1.0)*x14533))+(((-1.0)*x14539))+(((-1.0)*x14537))+x14534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14540.value)*(((((-1.0)*x14532*x14533))+(((-1.0)*x14532*x14539))+(((-1.0)*x14532*x14537))+((cj0*sj3*x14536))+((r12*x14534))+(((-1.0)*cj0*gconst17*r20*x14535))))))+IKsqr(((x14541.value)*(((((-1.0)*x14533))+(((-1.0)*x14539))+(((-1.0)*x14537))+x14534))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14540.value)*(((((-1.0)*x14532*x14533))+(((-1.0)*x14532*x14539))+(((-1.0)*x14532*x14537))+((cj0*sj3*x14536))+((r12*x14534))+(((-1.0)*cj0*gconst17*r20*x14535))))), ((x14541.value)*(((((-1.0)*x14533))+(((-1.0)*x14539))+(((-1.0)*x14537))+x14534))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14542=IKsin(j4);
IkReal x14543=IKcos(j4);
IkReal x14544=((1.0)*gconst17);
IkReal x14545=(gconst17*sj3);
IkReal x14546=(gconst16*r21);
IkReal x14547=(cj3*gconst17);
IkReal x14548=(sj1*sj2);
IkReal x14549=((1.0)*sj0);
IkReal x14550=(gconst16*sj3);
IkReal x14551=(cj3*gconst16);
IkReal x14552=(cj2*sj1);
IkReal x14553=((1.0)*cj0);
IkReal x14554=((1.0)*sj3);
IkReal x14555=(cj1*sj2);
IkReal x14556=(cj3*x14543);
IkReal x14557=(gconst16*x14542);
IkReal x14558=((1.0)*x14543);
IkReal x14559=((1.0)*cj1*cj2);
IkReal x14560=(r02*x14542);
IkReal x14561=(r12*x14542);
evalcond[0]=(((x14542*x14546))+(((-1.0)*r20*x14542*x14544)));
evalcond[1]=(cj0+(((-1.0)*r12*x14558))+((r11*x14557))+(((-1.0)*r10*x14542*x14544)));
evalcond[2]=((((-1.0)*r02*x14558))+(((-1.0)*r00*x14542*x14544))+((r01*x14557))+(((-1.0)*x14549)));
evalcond[3]=((((-1.0)*r20*x14544*x14556))+((r20*x14550))+((r21*x14545))+x14552+x14555+((x14546*x14556)));
evalcond[4]=((((-1.0)*x14543*x14546*x14554))+((r20*x14551))+((r21*x14547))+(((-1.0)*x14559))+x14548+((r20*x14543*x14545)));
evalcond[5]=(((r01*x14543*x14551))+((r01*x14545))+(((-1.0)*cj1*cj2*x14553))+((cj0*x14548))+(((-1.0)*r00*x14544*x14556))+((cj3*x14560))+((r00*x14550)));
evalcond[6]=(((sj0*x14548))+((r11*x14545))+(((-1.0)*cj1*cj2*x14549))+(((-1.0)*r10*x14544*x14556))+((cj3*x14561))+((r10*x14550))+((r11*x14543*x14551)));
evalcond[7]=(((r00*x14543*x14545))+(((-1.0)*r01*x14550*x14558))+((r01*x14547))+(((-1.0)*x14553*x14555))+(((-1.0)*x14552*x14553))+(((-1.0)*x14554*x14560))+((r00*x14551)));
evalcond[8]=(((r11*x14547))+(((-1.0)*x14554*x14561))+(((-1.0)*r11*x14550*x14558))+((r10*x14543*x14545))+((r10*x14551))+(((-1.0)*x14549*x14555))+(((-1.0)*x14549*x14552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14562=((1.0)*sj0);
IkReal x14563=((1.0)*cj0);
CheckValue<IkReal> x14564=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14564.valid){
continue;
}
CheckValue<IkReal> x14565 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14563))+(((-1.0)*r12*x14562)))),IkReal(((((-1.0)*gconst16*r01*x14563))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14562)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14564.value)))+(x14565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14566=IKsin(j4);
IkReal x14567=IKcos(j4);
IkReal x14568=((1.0)*gconst17);
IkReal x14569=(gconst17*sj3);
IkReal x14570=(gconst16*r21);
IkReal x14571=(cj3*gconst17);
IkReal x14572=(sj1*sj2);
IkReal x14573=((1.0)*sj0);
IkReal x14574=(gconst16*sj3);
IkReal x14575=(cj3*gconst16);
IkReal x14576=(cj2*sj1);
IkReal x14577=((1.0)*cj0);
IkReal x14578=((1.0)*sj3);
IkReal x14579=(cj1*sj2);
IkReal x14580=(cj3*x14567);
IkReal x14581=(gconst16*x14566);
IkReal x14582=((1.0)*x14567);
IkReal x14583=((1.0)*cj1*cj2);
IkReal x14584=(r02*x14566);
IkReal x14585=(r12*x14566);
evalcond[0]=((((-1.0)*r20*x14566*x14568))+((x14566*x14570)));
evalcond[1]=(cj0+(((-1.0)*r10*x14566*x14568))+(((-1.0)*r12*x14582))+((r11*x14581)));
evalcond[2]=((((-1.0)*r02*x14582))+(((-1.0)*x14573))+(((-1.0)*r00*x14566*x14568))+((r01*x14581)));
evalcond[3]=(((x14570*x14580))+((r21*x14569))+((r20*x14574))+x14576+x14579+(((-1.0)*r20*x14568*x14580)));
evalcond[4]=(((r21*x14571))+((r20*x14567*x14569))+((r20*x14575))+(((-1.0)*x14583))+x14572+(((-1.0)*x14567*x14570*x14578)));
evalcond[5]=(((r01*x14569))+(((-1.0)*r00*x14568*x14580))+((cj3*x14584))+((cj0*x14572))+(((-1.0)*cj1*cj2*x14577))+((r01*x14567*x14575))+((r00*x14574)));
evalcond[6]=(((cj3*x14585))+((r11*x14567*x14575))+(((-1.0)*cj1*cj2*x14573))+(((-1.0)*r10*x14568*x14580))+((r11*x14569))+((sj0*x14572))+((r10*x14574)));
evalcond[7]=((((-1.0)*x14578*x14584))+(((-1.0)*x14577*x14579))+((r00*x14567*x14569))+(((-1.0)*x14576*x14577))+(((-1.0)*r01*x14574*x14582))+((r01*x14571))+((r00*x14575)));
evalcond[8]=(((r10*x14567*x14569))+(((-1.0)*x14578*x14585))+(((-1.0)*x14573*x14576))+(((-1.0)*x14573*x14579))+(((-1.0)*r11*x14574*x14582))+((r11*x14571))+((r10*x14575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14586=((1.0)*sj0);
IkReal x14587=((1.0)*cj0);
CheckValue<IkReal> x14588=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14588.valid){
continue;
}
CheckValue<IkReal> x14589 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14587))+(((-1.0)*r12*x14586)))),IkReal(((((-1.0)*gconst16*r01*x14587))+(((-1.0)*gconst16*r11*x14586))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14588.value)))+(x14589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14590=IKsin(j4);
IkReal x14591=IKcos(j4);
IkReal x14592=(cj3*gconst17);
IkReal x14593=(gconst16*r21);
IkReal x14594=(gconst17*sj3);
IkReal x14595=(gconst16*r20);
IkReal x14596=(sj1*sj2);
IkReal x14597=(gconst16*r10);
IkReal x14598=(cj2*sj1);
IkReal x14599=(gconst16*sj3);
IkReal x14600=((1.0)*cj0);
IkReal x14601=((1.0)*sj0);
IkReal x14602=(cj1*sj2);
IkReal x14603=((1.0)*x14591);
IkReal x14604=(gconst16*x14590);
IkReal x14605=(cj3*x14591);
IkReal x14606=(cj3*x14590);
IkReal x14607=((1.0)*cj1*cj2);
IkReal x14608=((1.0)*gconst17*x14590);
IkReal x14609=((1.0)*sj3*x14590);
evalcond[0]=((((-1.0)*r20*x14608))+(((-1.0)*r22*x14603))+((x14590*x14593)));
evalcond[1]=(cj0+(((-1.0)*r10*x14608))+(((-1.0)*r12*x14603))+((r11*x14604)));
evalcond[2]=(((r01*x14604))+(((-1.0)*r00*x14608))+(((-1.0)*r02*x14603))+(((-1.0)*x14601)));
evalcond[3]=((((-1.0)*r20*x14592*x14603))+((x14593*x14605))+((r21*x14594))+x14598+((r22*x14606))+x14602+((sj3*x14595)));
evalcond[4]=(((cj3*x14595))+(((-1.0)*r22*x14609))+((r21*x14592))+(((-1.0)*sj3*x14593*x14603))+x14596+(((-1.0)*x14607))+((r20*x14591*x14594)));
evalcond[5]=(((r02*x14606))+((gconst16*r01*x14605))+(((-1.0)*r00*x14592*x14603))+(((-1.0)*cj1*cj2*x14600))+((r01*x14594))+((cj0*x14596))+((r00*x14599)));
evalcond[6]=(((gconst16*r11*x14605))+((sj0*x14596))+(((-1.0)*cj1*cj2*x14601))+((sj3*x14597))+((r11*x14594))+((r12*x14606))+(((-1.0)*r10*x14592*x14603)));
evalcond[7]=((((-1.0)*x14598*x14600))+(((-1.0)*x14600*x14602))+((r00*x14591*x14594))+(((-1.0)*r01*x14599*x14603))+((r01*x14592))+(((-1.0)*r02*x14609))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14598*x14601))+((cj3*x14597))+(((-1.0)*r12*x14609))+(((-1.0)*r11*x14599*x14603))+((r10*x14591*x14594))+((r11*x14592))+(((-1.0)*x14601*x14602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14610=((1.0)*gconst17);
CheckValue<IkReal> x14611=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14610)))),-1);
if(!x14611.valid){
continue;
}
CheckValue<IkReal> x14612 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14611.value)))+(x14612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14613=IKsin(j4);
IkReal x14614=IKcos(j4);
IkReal x14615=(cj3*gconst17);
IkReal x14616=(gconst16*r21);
IkReal x14617=(gconst17*sj3);
IkReal x14618=(gconst16*r20);
IkReal x14619=(sj1*sj2);
IkReal x14620=(gconst16*r10);
IkReal x14621=(cj2*sj1);
IkReal x14622=(gconst16*sj3);
IkReal x14623=((1.0)*cj0);
IkReal x14624=((1.0)*sj0);
IkReal x14625=(cj1*sj2);
IkReal x14626=((1.0)*x14614);
IkReal x14627=(gconst16*x14613);
IkReal x14628=(cj3*x14614);
IkReal x14629=(cj3*x14613);
IkReal x14630=((1.0)*cj1*cj2);
IkReal x14631=((1.0)*gconst17*x14613);
IkReal x14632=((1.0)*sj3*x14613);
evalcond[0]=((((-1.0)*r20*x14631))+((x14613*x14616))+(((-1.0)*r22*x14626)));
evalcond[1]=(cj0+((r11*x14627))+(((-1.0)*r12*x14626))+(((-1.0)*r10*x14631)));
evalcond[2]=((((-1.0)*r02*x14626))+(((-1.0)*x14624))+(((-1.0)*r00*x14631))+((r01*x14627)));
evalcond[3]=((((-1.0)*r20*x14615*x14626))+((r21*x14617))+((x14616*x14628))+x14625+x14621+((r22*x14629))+((sj3*x14618)));
evalcond[4]=((((-1.0)*r22*x14632))+((r20*x14614*x14617))+((r21*x14615))+(((-1.0)*x14630))+(((-1.0)*sj3*x14616*x14626))+((cj3*x14618))+x14619);
evalcond[5]=(((r02*x14629))+((cj0*x14619))+((gconst16*r01*x14628))+((r01*x14617))+(((-1.0)*r00*x14615*x14626))+((r00*x14622))+(((-1.0)*cj1*cj2*x14623)));
evalcond[6]=(((sj3*x14620))+((sj0*x14619))+((gconst16*r11*x14628))+((r12*x14629))+((r11*x14617))+(((-1.0)*r10*x14615*x14626))+(((-1.0)*cj1*cj2*x14624)));
evalcond[7]=((((-1.0)*r01*x14622*x14626))+(((-1.0)*x14621*x14623))+((r01*x14615))+(((-1.0)*x14623*x14625))+((cj3*gconst16*r00))+((r00*x14614*x14617))+(((-1.0)*r02*x14632)));
evalcond[8]=(((cj3*x14620))+(((-1.0)*x14621*x14624))+((r10*x14614*x14617))+(((-1.0)*r11*x14622*x14626))+((r11*x14615))+(((-1.0)*x14624*x14625))+(((-1.0)*r12*x14632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14633=((1.0)*gconst17);
CheckValue<IkReal> x14634=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14633)))),-1);
if(!x14634.valid){
continue;
}
CheckValue<IkReal> x14635 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14633))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14634.value)))+(x14635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14636=IKsin(j4);
IkReal x14637=IKcos(j4);
IkReal x14638=(cj3*gconst17);
IkReal x14639=(gconst16*r21);
IkReal x14640=(gconst17*sj3);
IkReal x14641=(gconst16*r20);
IkReal x14642=(sj1*sj2);
IkReal x14643=(gconst16*r10);
IkReal x14644=(cj2*sj1);
IkReal x14645=(gconst16*sj3);
IkReal x14646=((1.0)*cj0);
IkReal x14647=((1.0)*sj0);
IkReal x14648=(cj1*sj2);
IkReal x14649=((1.0)*x14637);
IkReal x14650=(gconst16*x14636);
IkReal x14651=(cj3*x14637);
IkReal x14652=(cj3*x14636);
IkReal x14653=((1.0)*cj1*cj2);
IkReal x14654=((1.0)*gconst17*x14636);
IkReal x14655=((1.0)*sj3*x14636);
evalcond[0]=((((-1.0)*r22*x14649))+(((-1.0)*r20*x14654))+((x14636*x14639)));
evalcond[1]=(cj0+(((-1.0)*r12*x14649))+(((-1.0)*r10*x14654))+((r11*x14650)));
evalcond[2]=(((r01*x14650))+(((-1.0)*r02*x14649))+(((-1.0)*x14647))+(((-1.0)*r00*x14654)));
evalcond[3]=((((-1.0)*r20*x14638*x14649))+((r22*x14652))+((sj3*x14641))+((x14639*x14651))+((r21*x14640))+x14644+x14648);
evalcond[4]=((((-1.0)*sj3*x14639*x14649))+(((-1.0)*r22*x14655))+x14642+((r20*x14637*x14640))+(((-1.0)*x14653))+((r21*x14638))+((cj3*x14641)));
evalcond[5]=(((gconst16*r01*x14651))+(((-1.0)*r00*x14638*x14649))+((cj0*x14642))+((r01*x14640))+((r00*x14645))+(((-1.0)*cj1*cj2*x14646))+((r02*x14652)));
evalcond[6]=(((r11*x14640))+(((-1.0)*r10*x14638*x14649))+((r12*x14652))+((sj0*x14642))+(((-1.0)*cj1*cj2*x14647))+((sj3*x14643))+((gconst16*r11*x14651)));
evalcond[7]=((((-1.0)*x14646*x14648))+(((-1.0)*r01*x14645*x14649))+(((-1.0)*r02*x14655))+((r01*x14638))+(((-1.0)*x14644*x14646))+((cj3*gconst16*r00))+((r00*x14637*x14640)));
evalcond[8]=((((-1.0)*r11*x14645*x14649))+(((-1.0)*r12*x14655))+((r10*x14637*x14640))+((r11*x14638))+(((-1.0)*x14644*x14647))+((cj3*x14643))+(((-1.0)*x14647*x14648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14656=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14656;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14656);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14657=((1.0)*cj5);
IkReal x14658=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14657)));
j4eval[0]=x14658;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14657)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14658);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14659=cj5*cj5;
IkReal x14660=(cj3*r01);
IkReal x14661=(cj5*sj5);
IkReal x14662=((1.0)*cj3);
IkReal x14663=(((cj3*r00*r21*x14661))+(((-1.0)*r21*x14660))+(((-1.0)*r00*r20*x14659*x14662))+(((-1.0)*r02*r22*x14662))+((r20*x14660*x14661))+((r21*x14659*x14660)));
j4eval[0]=x14663;
j4eval[1]=IKsign(x14663);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14664=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14664;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14664);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14665=((1.0)*cj5);
IkReal x14666=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14665)));
j4eval[0]=x14666;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14665)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14667=cj5*cj5;
IkReal x14668=r01*r01;
IkReal x14669=(r01*sj5);
IkReal x14670=(cj5*r00);
IkReal x14671=((((2.0)*x14669*x14670))+(((-1.0)*(r02*r02)))+((x14667*x14668))+(((-1.0)*x14668))+(((-1.0)*x14667*(r00*r00))));
j4eval[0]=x14671;
j4eval[1]=IKsign(x14671);
j4eval[2]=((IKabs(((((-1.0)*x14669))+x14670)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14672=cj5*cj5;
IkReal x14673=r01*r01;
IkReal x14674=(r01*sj5);
IkReal x14675=(cj5*r00);
CheckValue<IkReal> x14676 = IKatan2WithCheck(IkReal(((((-1.0)*x14674))+x14675)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14676.valid){
continue;
}
CheckValue<IkReal> x14677=IKPowWithIntegerCheck(IKsign((((x14672*x14673))+(((-1.0)*(r02*r02)))+(((-1.0)*x14673))+(((2.0)*x14674*x14675))+(((-1.0)*x14672*(r00*r00))))),-1);
if(!x14677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14676.value)+(((1.5707963267949)*(x14677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14678=IKsin(j4);
IkReal x14679=IKcos(j4);
IkReal x14680=(cj5*r10);
IkReal x14681=(r01*sj5);
IkReal x14682=((1.0)*cj2);
IkReal x14683=(cj5*r00);
IkReal x14684=(cj5*r20);
IkReal x14685=((1.0)*x14679);
IkReal x14686=((1.0)*x14678);
IkReal x14687=(sj5*x14678);
evalcond[0]=((((-1.0)*x14684*x14686))+(((-1.0)*r22*x14685))+((r21*x14687)));
evalcond[1]=(((r11*x14687))+(((-1.0)*x14680*x14686))+(((-1.0)*r12*x14685)));
evalcond[2]=(((x14679*x14683))+(((-1.0)*r02*x14686))+(((-1.0)*x14681*x14685)));
evalcond[3]=((-1.0)+(((-1.0)*x14683*x14686))+((x14678*x14681))+(((-1.0)*r02*x14685)));
evalcond[4]=((((-1.0)*cj1*x14682))+(((-1.0)*r21*sj5*x14685))+((x14679*x14684))+((sj1*sj2))+(((-1.0)*r22*x14686)));
evalcond[5]=(((x14679*x14680))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14682))+(((-1.0)*r11*sj5*x14685))+(((-1.0)*r12*x14686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14688=((1.0)*cj5);
CheckValue<IkReal> x14689 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14689.valid){
continue;
}
CheckValue<IkReal> x14690=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14688)))),-1);
if(!x14690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14689.value)+(((1.5707963267949)*(x14690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14691=IKsin(j4);
IkReal x14692=IKcos(j4);
IkReal x14693=(cj5*r10);
IkReal x14694=(r01*sj5);
IkReal x14695=((1.0)*cj2);
IkReal x14696=(cj5*r00);
IkReal x14697=(cj5*r20);
IkReal x14698=((1.0)*x14692);
IkReal x14699=((1.0)*x14691);
IkReal x14700=(sj5*x14691);
evalcond[0]=((((-1.0)*x14697*x14699))+((r21*x14700))+(((-1.0)*r22*x14698)));
evalcond[1]=(((r11*x14700))+(((-1.0)*r12*x14698))+(((-1.0)*x14693*x14699)));
evalcond[2]=((((-1.0)*x14694*x14698))+(((-1.0)*r02*x14699))+((x14692*x14696)));
evalcond[3]=((-1.0)+(((-1.0)*x14696*x14699))+(((-1.0)*r02*x14698))+((x14691*x14694)));
evalcond[4]=((((-1.0)*r21*sj5*x14698))+(((-1.0)*cj1*x14695))+((sj1*sj2))+(((-1.0)*r22*x14699))+((x14692*x14697)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14698))+(((-1.0)*sj1*x14695))+(((-1.0)*r12*x14699))+((x14692*x14693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14701=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14701.valid){
continue;
}
CheckValue<IkReal> x14702 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14701.value)))+(x14702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14703=IKsin(j4);
IkReal x14704=IKcos(j4);
IkReal x14705=(cj5*r10);
IkReal x14706=(r01*sj5);
IkReal x14707=((1.0)*cj2);
IkReal x14708=(cj5*r00);
IkReal x14709=(cj5*r20);
IkReal x14710=((1.0)*x14704);
IkReal x14711=((1.0)*x14703);
IkReal x14712=(sj5*x14703);
evalcond[0]=(((r21*x14712))+(((-1.0)*r22*x14710))+(((-1.0)*x14709*x14711)));
evalcond[1]=(((r11*x14712))+(((-1.0)*x14705*x14711))+(((-1.0)*r12*x14710)));
evalcond[2]=(((x14704*x14708))+(((-1.0)*x14706*x14710))+(((-1.0)*r02*x14711)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14710))+(((-1.0)*x14708*x14711))+((x14703*x14706)));
evalcond[4]=((((-1.0)*r22*x14711))+((x14704*x14709))+((sj1*sj2))+(((-1.0)*cj1*x14707))+(((-1.0)*r21*sj5*x14710)));
evalcond[5]=((((-1.0)*r11*sj5*x14710))+((x14704*x14705))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14707))+(((-1.0)*r12*x14711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14713=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14713;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14713);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14714=((1.0)*cj5);
IkReal x14715=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14714)));
j4eval[0]=x14715;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14714)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14715);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14716=cj5*cj5;
IkReal x14717=r01*r01;
IkReal x14718=(cj5*r00);
IkReal x14719=(r01*sj5);
IkReal x14720=((((-2.0)*x14718*x14719))+((x14716*(r00*r00)))+x14717+(((-1.0)*x14716*x14717))+(r02*r02));
j4eval[0]=x14720;
j4eval[1]=IKsign(x14720);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14718))+x14719))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14721=cj5*cj5;
IkReal x14722=r01*r01;
IkReal x14723=(r01*sj5);
IkReal x14724=(cj5*r00);
CheckValue<IkReal> x14725 = IKatan2WithCheck(IkReal(((((-1.0)*x14724))+x14723)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14725.valid){
continue;
}
CheckValue<IkReal> x14726=IKPowWithIntegerCheck(IKsign((((x14721*(r00*r00)))+(((-2.0)*x14723*x14724))+x14722+(r02*r02)+(((-1.0)*x14721*x14722)))),-1);
if(!x14726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14725.value)+(((1.5707963267949)*(x14726.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14727=IKcos(j4);
IkReal x14728=IKsin(j4);
IkReal x14729=(cj5*r00);
IkReal x14730=(cj5*r10);
IkReal x14731=(r21*sj5);
IkReal x14732=((1.0)*cj2);
IkReal x14733=(cj5*r20);
IkReal x14734=((1.0)*x14727);
IkReal x14735=((1.0)*x14728);
IkReal x14736=(sj5*x14728);
IkReal x14737=(sj5*x14727);
evalcond[0]=((((-1.0)*x14729*x14734))+((r01*x14737))+((r02*x14728)));
evalcond[1]=(((x14728*x14731))+(((-1.0)*r22*x14734))+(((-1.0)*x14733*x14735)));
evalcond[2]=((((-1.0)*r12*x14734))+((r11*x14736))+(((-1.0)*x14730*x14735)));
evalcond[3]=((-1.0)+(((-1.0)*x14729*x14735))+((r01*x14736))+(((-1.0)*r02*x14734)));
evalcond[4]=(((x14727*x14731))+((sj1*sj2))+((r22*x14728))+(((-1.0)*cj1*x14732))+(((-1.0)*x14733*x14734)));
evalcond[5]=((((-1.0)*sj1*x14732))+(((-1.0)*cj1*sj2))+((r11*x14737))+((r12*x14728))+(((-1.0)*x14730*x14734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14738=((1.0)*cj5);
CheckValue<IkReal> x14739=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14738))+(((-1.0)*r10*sj5)))),-1);
if(!x14739.valid){
continue;
}
CheckValue<IkReal> x14740 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14738))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14739.value)))+(x14740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14741=IKcos(j4);
IkReal x14742=IKsin(j4);
IkReal x14743=(cj5*r00);
IkReal x14744=(cj5*r10);
IkReal x14745=(r21*sj5);
IkReal x14746=((1.0)*cj2);
IkReal x14747=(cj5*r20);
IkReal x14748=((1.0)*x14741);
IkReal x14749=((1.0)*x14742);
IkReal x14750=(sj5*x14742);
IkReal x14751=(sj5*x14741);
evalcond[0]=((((-1.0)*x14743*x14748))+((r01*x14751))+((r02*x14742)));
evalcond[1]=((((-1.0)*x14747*x14749))+((x14742*x14745))+(((-1.0)*r22*x14748)));
evalcond[2]=((((-1.0)*x14744*x14749))+(((-1.0)*r12*x14748))+((r11*x14750)));
evalcond[3]=((-1.0)+(((-1.0)*x14743*x14749))+(((-1.0)*r02*x14748))+((r01*x14750)));
evalcond[4]=(((r22*x14742))+(((-1.0)*x14747*x14748))+((sj1*sj2))+((x14741*x14745))+(((-1.0)*cj1*x14746)));
evalcond[5]=(((r12*x14742))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14746))+(((-1.0)*x14744*x14748))+((r11*x14751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14752=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14752.valid){
continue;
}
CheckValue<IkReal> x14753 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14752.value)))+(x14753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14754=IKcos(j4);
IkReal x14755=IKsin(j4);
IkReal x14756=(cj5*r00);
IkReal x14757=(cj5*r10);
IkReal x14758=(r21*sj5);
IkReal x14759=((1.0)*cj2);
IkReal x14760=(cj5*r20);
IkReal x14761=((1.0)*x14754);
IkReal x14762=((1.0)*x14755);
IkReal x14763=(sj5*x14755);
IkReal x14764=(sj5*x14754);
evalcond[0]=(((r01*x14764))+(((-1.0)*x14756*x14761))+((r02*x14755)));
evalcond[1]=((((-1.0)*x14760*x14762))+((x14755*x14758))+(((-1.0)*r22*x14761)));
evalcond[2]=((((-1.0)*x14757*x14762))+(((-1.0)*r12*x14761))+((r11*x14763)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14761))+((r01*x14763))+(((-1.0)*x14756*x14762)));
evalcond[4]=((((-1.0)*x14760*x14761))+(((-1.0)*cj1*x14759))+((sj1*sj2))+((r22*x14755))+((x14754*x14758)));
evalcond[5]=((((-1.0)*x14757*x14761))+(((-1.0)*sj1*x14759))+(((-1.0)*cj1*sj2))+((r11*x14764))+((r12*x14755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14766 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14766)==0){
continue;
}
IkReal x14765=pow(x14766,-0.5);
CheckValue<IkReal> x14767 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14767.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14767.value));
IkReal gconst49=((-1.0)*r21*x14765);
IkReal gconst50=(r20*x14765);
CheckValue<IkReal> x14768 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14768.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14768.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14771 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14771.valid){
continue;
}
IkReal x14769=((-1.0)*(x14771.value));
IkReal x14770=x14765;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14769;
IkReal gconst48=x14769;
IkReal gconst49=((-1.0)*r21*x14770);
IkReal gconst50=(r20*x14770);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14774 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14774.valid){
continue;
}
IkReal x14772=((-1.0)*(x14774.value));
IkReal x14773=x14765;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14772;
IkReal gconst48=x14772;
IkReal gconst49=((-1.0)*r21*x14773);
IkReal gconst50=(r20*x14773);
CheckValue<IkReal> x14782=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14782.valid){
continue;
}
IkReal x14775=x14782.value;
IkReal x14776=(sj3*x14775);
IkReal x14777=(r11*x14776);
IkReal x14778=(r00*x14776);
IkReal x14779=(r01*x14776);
IkReal x14780=(r10*x14776);
IkReal x14781=(r20*r21*x14776);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x14779))+((r00*r20*r21*x14777))+((r10*x14778*(r20*r20)))+((r01*x14777*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14783=gconst49*gconst49;
IkReal x14784=gconst50*gconst50;
IkReal x14785=((1.0)*cj3);
IkReal x14786=(gconst50*r01);
IkReal x14787=(gconst49*r10);
IkReal x14788=(r12*sj3);
IkReal x14789=(gconst49*r00);
IkReal x14790=(r00*sj3);
IkReal x14791=(r11*x14783);
IkReal x14792=(r10*x14784);
CheckValue<IkReal> x14793=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14785*x14792))+(((-1.0)*r01*x14785*x14791))+(((-1.0)*r02*r12*x14785))+((cj3*gconst50*r11*x14789))+((cj3*x14786*x14787)))),-1);
if(!x14793.valid){
continue;
}
CheckValue<IkReal> x14794 = IKatan2WithCheck(IkReal((((x14788*x14789))+((x14786*x14788)))),IkReal((((gconst49*r11*sj3*x14786))+((x14790*x14791))+(((-1.0)*r01*sj3*x14792))+(((-1.0)*gconst50*x14787*x14790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14793.value)))+(x14794.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14795=IKsin(j4);
IkReal x14796=IKcos(j4);
IkReal x14797=(sj1*sj2);
IkReal x14798=(gconst50*r20);
IkReal x14799=(gconst50*sj3);
IkReal x14800=(cj3*r01);
IkReal x14801=(gconst50*r10);
IkReal x14802=(gconst49*sj3);
IkReal x14803=((1.0)*cj2);
IkReal x14804=(cj1*sj2);
IkReal x14805=(cj3*r11);
IkReal x14806=(gconst50*r00);
IkReal x14807=(cj3*r21);
IkReal x14808=(cj3*gconst49);
IkReal x14809=(cj1*x14803);
IkReal x14810=((1.0)*x14796);
IkReal x14811=((1.0)*x14795);
IkReal x14812=(gconst49*x14795);
IkReal x14813=(gconst49*x14796);
IkReal x14814=(cj3*x14795);
evalcond[0]=((((-1.0)*x14798*x14811))+(((-1.0)*r22*x14810))+((r21*x14812)));
evalcond[1]=((((-1.0)*x14801*x14811))+(((-1.0)*r12*x14810))+((r11*x14812)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14810))+(((-1.0)*x14806*x14811))+((r01*x14812)));
evalcond[3]=(((x14800*x14813))+((r01*x14799))+((r00*x14802))+(((-1.0)*cj3*x14806*x14810))+((r02*x14814)));
evalcond[4]=(((r00*x14796*x14799))+(((-1.0)*r02*sj3*x14811))+((r00*x14808))+(((-1.0)*r01*x14802*x14810))+((gconst50*x14800)));
evalcond[5]=((((-1.0)*cj3*x14798*x14810))+((cj2*sj1))+x14804+((r22*x14814))+((x14807*x14813))+((r21*x14799))+((r20*x14802)));
evalcond[6]=((((-1.0)*cj3*x14801*x14810))+(((-1.0)*x14809))+((r10*x14802))+((r11*x14799))+x14797+((x14805*x14813))+((r12*x14814)));
evalcond[7]=((((-1.0)*r21*x14802*x14810))+((sj3*x14796*x14798))+(((-1.0)*x14809))+x14797+(((-1.0)*r22*sj3*x14811))+((r20*x14808))+((gconst50*x14807)));
evalcond[8]=(((r10*x14808))+(((-1.0)*r12*sj3*x14811))+(((-1.0)*r11*x14802*x14810))+(((-1.0)*x14804))+(((-1.0)*sj1*x14803))+((r10*x14796*x14799))+((gconst50*x14805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14815=gconst49*gconst49;
IkReal x14816=gconst50*gconst50;
IkReal x14817=(cj3*r12);
IkReal x14818=(gconst49*r00);
IkReal x14819=(r01*r11);
IkReal x14820=(r00*r11);
IkReal x14821=(cj3*gconst50);
IkReal x14822=((1.0)*r01*r10);
IkReal x14823=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14824 = IKatan2WithCheck(IkReal((((gconst50*r01*x14817))+((x14817*x14818)))),IkReal(((((-1.0)*r10*x14818*x14821))+((gconst49*x14819*x14821))+(((-1.0)*cj3*x14816*x14822))+((cj3*x14815*x14820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14824.valid){
continue;
}
CheckValue<IkReal> x14825=IKPowWithIntegerCheck(IKsign((((sj3*x14815*x14819))+((r02*r12*sj3))+((r00*r10*sj3*x14816))+(((-1.0)*x14822*x14823))+(((-1.0)*gconst50*r11*sj3*x14818)))),-1);
if(!x14825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14824.value)+(((1.5707963267949)*(x14825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14826=IKsin(j4);
IkReal x14827=IKcos(j4);
IkReal x14828=(sj1*sj2);
IkReal x14829=(gconst50*r20);
IkReal x14830=(gconst50*sj3);
IkReal x14831=(cj3*r01);
IkReal x14832=(gconst50*r10);
IkReal x14833=(gconst49*sj3);
IkReal x14834=((1.0)*cj2);
IkReal x14835=(cj1*sj2);
IkReal x14836=(cj3*r11);
IkReal x14837=(gconst50*r00);
IkReal x14838=(cj3*r21);
IkReal x14839=(cj3*gconst49);
IkReal x14840=(cj1*x14834);
IkReal x14841=((1.0)*x14827);
IkReal x14842=((1.0)*x14826);
IkReal x14843=(gconst49*x14826);
IkReal x14844=(gconst49*x14827);
IkReal x14845=(cj3*x14826);
evalcond[0]=((((-1.0)*r22*x14841))+(((-1.0)*x14829*x14842))+((r21*x14843)));
evalcond[1]=((((-1.0)*x14832*x14842))+((r11*x14843))+(((-1.0)*r12*x14841)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14841))+(((-1.0)*x14837*x14842))+((r01*x14843)));
evalcond[3]=(((r02*x14845))+((x14831*x14844))+(((-1.0)*cj3*x14837*x14841))+((r01*x14830))+((r00*x14833)));
evalcond[4]=(((gconst50*x14831))+(((-1.0)*r02*sj3*x14842))+((r00*x14827*x14830))+(((-1.0)*r01*x14833*x14841))+((r00*x14839)));
evalcond[5]=(((cj2*sj1))+x14835+((r20*x14833))+(((-1.0)*cj3*x14829*x14841))+((r21*x14830))+((r22*x14845))+((x14838*x14844)));
evalcond[6]=(((x14836*x14844))+x14828+((r11*x14830))+((r12*x14845))+(((-1.0)*x14840))+((r10*x14833))+(((-1.0)*cj3*x14832*x14841)));
evalcond[7]=(((gconst50*x14838))+x14828+((r20*x14839))+(((-1.0)*x14840))+(((-1.0)*r21*x14833*x14841))+((sj3*x14827*x14829))+(((-1.0)*r22*sj3*x14842)));
evalcond[8]=((((-1.0)*x14835))+((gconst50*x14836))+(((-1.0)*sj1*x14834))+(((-1.0)*r11*x14833*x14841))+((r10*x14839))+((r10*x14827*x14830))+(((-1.0)*r12*sj3*x14842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14846=((1.0)*gconst50);
CheckValue<IkReal> x14847=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14846)))),-1);
if(!x14847.valid){
continue;
}
CheckValue<IkReal> x14848 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14847.value)))+(x14848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14849=IKsin(j4);
IkReal x14850=IKcos(j4);
IkReal x14851=(sj1*sj2);
IkReal x14852=(gconst50*r20);
IkReal x14853=(gconst50*sj3);
IkReal x14854=(cj3*r01);
IkReal x14855=(gconst50*r10);
IkReal x14856=(gconst49*sj3);
IkReal x14857=((1.0)*cj2);
IkReal x14858=(cj1*sj2);
IkReal x14859=(cj3*r11);
IkReal x14860=(gconst50*r00);
IkReal x14861=(cj3*r21);
IkReal x14862=(cj3*gconst49);
IkReal x14863=(cj1*x14857);
IkReal x14864=((1.0)*x14850);
IkReal x14865=((1.0)*x14849);
IkReal x14866=(gconst49*x14849);
IkReal x14867=(gconst49*x14850);
IkReal x14868=(cj3*x14849);
evalcond[0]=(((r21*x14866))+(((-1.0)*x14852*x14865))+(((-1.0)*r22*x14864)));
evalcond[1]=((((-1.0)*x14855*x14865))+((r11*x14866))+(((-1.0)*r12*x14864)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14864))+((r01*x14866))+(((-1.0)*x14860*x14865)));
evalcond[3]=(((r02*x14868))+((x14854*x14867))+((r00*x14856))+((r01*x14853))+(((-1.0)*cj3*x14860*x14864)));
evalcond[4]=((((-1.0)*r02*sj3*x14865))+(((-1.0)*r01*x14856*x14864))+((r00*x14850*x14853))+((gconst50*x14854))+((r00*x14862)));
evalcond[5]=(((r21*x14853))+((cj2*sj1))+((r20*x14856))+(((-1.0)*cj3*x14852*x14864))+x14858+((r22*x14868))+((x14861*x14867)));
evalcond[6]=((((-1.0)*cj3*x14855*x14864))+x14851+((r11*x14853))+((r12*x14868))+((r10*x14856))+((x14859*x14867))+(((-1.0)*x14863)));
evalcond[7]=(((sj3*x14850*x14852))+((r20*x14862))+x14851+(((-1.0)*r21*x14856*x14864))+((gconst50*x14861))+(((-1.0)*x14863))+(((-1.0)*r22*sj3*x14865)));
evalcond[8]=((((-1.0)*sj1*x14857))+((r10*x14862))+((gconst50*x14859))+(((-1.0)*r12*sj3*x14865))+(((-1.0)*r11*x14856*x14864))+((r10*x14850*x14853))+(((-1.0)*x14858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14870 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14870)==0){
continue;
}
IkReal x14869=pow(x14870,-0.5);
CheckValue<IkReal> x14871 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14871.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14871.value))));
IkReal gconst52=((1.0)*r21*x14869);
IkReal gconst53=((-1.0)*r20*x14869);
CheckValue<IkReal> x14872 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14872.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14872.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14875 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14875.valid){
continue;
}
IkReal x14873=((1.0)*(x14875.value));
IkReal x14874=x14869;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14873)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14873)));
IkReal gconst52=((1.0)*r21*x14874);
IkReal gconst53=((-1.0)*r20*x14874);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14878 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14878.valid){
continue;
}
IkReal x14876=((1.0)*(x14878.value));
IkReal x14877=x14869;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14876)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14876)));
IkReal gconst52=((1.0)*r21*x14877);
IkReal gconst53=((-1.0)*r20*x14877);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14881 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14881.valid){
continue;
}
IkReal x14879=((1.0)*(x14881.value));
IkReal x14880=x14869;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14879)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14879)));
IkReal gconst52=((1.0)*r21*x14880);
IkReal gconst53=((-1.0)*r20*x14880);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14882=gconst52*gconst52;
IkReal x14883=gconst53*gconst53;
IkReal x14884=(gconst53*r01);
IkReal x14885=(cj3*r20);
IkReal x14886=(r22*sj3);
IkReal x14887=((1.0)*cj3);
IkReal x14888=(gconst52*sj3);
IkReal x14889=((1.0)*r00);
IkReal x14890=(gconst52*r00);
IkReal x14891=(r21*x14882);
CheckValue<IkReal> x14892 = IKatan2WithCheck(IkReal((((x14886*x14890))+((x14884*x14886)))),IkReal(((((-1.0)*gconst53*r20*x14888*x14889))+((r00*sj3*x14891))+(((-1.0)*r01*r20*sj3*x14883))+((r21*x14884*x14888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14892.valid){
continue;
}
CheckValue<IkReal> x14893=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14887*x14891))+((gconst52*x14884*x14885))+((cj3*gconst53*r21*x14890))+(((-1.0)*x14883*x14885*x14889))+(((-1.0)*r02*r22*x14887)))),-1);
if(!x14893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14892.value)+(((1.5707963267949)*(x14893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14894=IKsin(j4);
IkReal x14895=IKcos(j4);
IkReal x14896=(sj1*sj2);
IkReal x14897=((1.0)*cj1);
IkReal x14898=(cj3*gconst52);
IkReal x14899=(gconst53*sj3);
IkReal x14900=(cj3*gconst53);
IkReal x14901=(cj2*sj1);
IkReal x14902=(gconst52*sj3);
IkReal x14903=(cj2*x14897);
IkReal x14904=((1.0)*x14895);
IkReal x14905=((1.0)*x14894);
IkReal x14906=(gconst52*x14894);
IkReal x14907=(cj3*x14894);
evalcond[0]=(((r21*x14906))+(((-1.0)*r22*x14904))+(((-1.0)*gconst53*r20*x14905)));
evalcond[1]=((((-1.0)*r12*x14904))+((r11*x14906))+(((-1.0)*gconst53*r10*x14905)));
evalcond[2]=((-1.0)+((r01*x14906))+(((-1.0)*r02*x14904))+(((-1.0)*gconst53*r00*x14905)));
evalcond[3]=(((r00*x14902))+(((-1.0)*r00*x14900*x14904))+((r01*x14899))+((r02*x14907))+((r01*x14895*x14898)));
evalcond[4]=(((r01*x14900))+((r00*x14898))+(((-1.0)*r02*sj3*x14905))+(((-1.0)*r01*x14902*x14904))+((r00*x14895*x14899)));
evalcond[5]=(((r22*x14907))+x14901+((cj1*sj2))+((r21*x14899))+(((-1.0)*r20*x14900*x14904))+((r20*x14902))+((r21*x14895*x14898)));
evalcond[6]=(((r11*x14899))+(((-1.0)*x14903))+(((-1.0)*r10*x14900*x14904))+x14896+((r11*x14895*x14898))+((r12*x14907))+((r10*x14902)));
evalcond[7]=(((r21*x14900))+(((-1.0)*x14903))+x14896+(((-1.0)*r21*x14902*x14904))+(((-1.0)*r22*sj3*x14905))+((r20*x14898))+((r20*x14895*x14899)));
evalcond[8]=(((r10*x14898))+(((-1.0)*sj2*x14897))+((r11*x14900))+(((-1.0)*x14901))+((r10*x14895*x14899))+(((-1.0)*r11*x14902*x14904))+(((-1.0)*r12*sj3*x14905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14908=((1.0)*gconst53);
CheckValue<IkReal> x14909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14908))+(((-1.0)*gconst52*r10)))),-1);
if(!x14909.valid){
continue;
}
CheckValue<IkReal> x14910 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14909.value)))+(x14910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14911=IKsin(j4);
IkReal x14912=IKcos(j4);
IkReal x14913=(sj1*sj2);
IkReal x14914=((1.0)*cj1);
IkReal x14915=(cj3*gconst52);
IkReal x14916=(gconst53*sj3);
IkReal x14917=(cj3*gconst53);
IkReal x14918=(cj2*sj1);
IkReal x14919=(gconst52*sj3);
IkReal x14920=(cj2*x14914);
IkReal x14921=((1.0)*x14912);
IkReal x14922=((1.0)*x14911);
IkReal x14923=(gconst52*x14911);
IkReal x14924=(cj3*x14911);
evalcond[0]=(((r21*x14923))+(((-1.0)*r22*x14921))+(((-1.0)*gconst53*r20*x14922)));
evalcond[1]=((((-1.0)*r12*x14921))+((r11*x14923))+(((-1.0)*gconst53*r10*x14922)));
evalcond[2]=((-1.0)+((r01*x14923))+(((-1.0)*gconst53*r00*x14922))+(((-1.0)*r02*x14921)));
evalcond[3]=(((r01*x14916))+((r00*x14919))+(((-1.0)*r00*x14917*x14921))+((r01*x14912*x14915))+((r02*x14924)));
evalcond[4]=(((r01*x14917))+((r00*x14915))+(((-1.0)*r02*sj3*x14922))+(((-1.0)*r01*x14919*x14921))+((r00*x14912*x14916)));
evalcond[5]=(((r21*x14916))+x14918+((cj1*sj2))+((r21*x14912*x14915))+(((-1.0)*r20*x14917*x14921))+((r20*x14919))+((r22*x14924)));
evalcond[6]=(((r10*x14919))+x14913+((r11*x14916))+(((-1.0)*r10*x14917*x14921))+(((-1.0)*x14920))+((r11*x14912*x14915))+((r12*x14924)));
evalcond[7]=(((r21*x14917))+x14913+(((-1.0)*r22*sj3*x14922))+(((-1.0)*r21*x14919*x14921))+(((-1.0)*x14920))+((r20*x14912*x14916))+((r20*x14915)));
evalcond[8]=(((r10*x14915))+(((-1.0)*sj2*x14914))+(((-1.0)*r12*sj3*x14922))+((r11*x14917))+(((-1.0)*x14918))+(((-1.0)*r11*x14919*x14921))+((r10*x14912*x14916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14925 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14925.valid){
continue;
}
CheckValue<IkReal> x14926=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14925.value)+(((1.5707963267949)*(x14926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14927=IKsin(j4);
IkReal x14928=IKcos(j4);
IkReal x14929=(sj1*sj2);
IkReal x14930=((1.0)*cj1);
IkReal x14931=(cj3*gconst52);
IkReal x14932=(gconst53*sj3);
IkReal x14933=(cj3*gconst53);
IkReal x14934=(cj2*sj1);
IkReal x14935=(gconst52*sj3);
IkReal x14936=(cj2*x14930);
IkReal x14937=((1.0)*x14928);
IkReal x14938=((1.0)*x14927);
IkReal x14939=(gconst52*x14927);
IkReal x14940=(cj3*x14927);
evalcond[0]=(((r21*x14939))+(((-1.0)*r22*x14937))+(((-1.0)*gconst53*r20*x14938)));
evalcond[1]=((((-1.0)*r12*x14937))+((r11*x14939))+(((-1.0)*gconst53*r10*x14938)));
evalcond[2]=((-1.0)+((r01*x14939))+(((-1.0)*gconst53*r00*x14938))+(((-1.0)*r02*x14937)));
evalcond[3]=(((r01*x14928*x14931))+((r01*x14932))+((r00*x14935))+((r02*x14940))+(((-1.0)*r00*x14933*x14937)));
evalcond[4]=((((-1.0)*r02*sj3*x14938))+((r01*x14933))+((r00*x14928*x14932))+((r00*x14931))+(((-1.0)*r01*x14935*x14937)));
evalcond[5]=(x14934+((r22*x14940))+((cj1*sj2))+((r21*x14932))+((r21*x14928*x14931))+(((-1.0)*r20*x14933*x14937))+((r20*x14935)));
evalcond[6]=(((r12*x14940))+x14929+((r11*x14928*x14931))+((r10*x14935))+(((-1.0)*r10*x14933*x14937))+(((-1.0)*x14936))+((r11*x14932)));
evalcond[7]=(((r20*x14928*x14932))+x14929+(((-1.0)*r21*x14935*x14937))+(((-1.0)*r22*sj3*x14938))+((r21*x14933))+(((-1.0)*x14936))+((r20*x14931)));
evalcond[8]=((((-1.0)*x14934))+(((-1.0)*r12*sj3*x14938))+((r10*x14931))+((r10*x14928*x14932))+(((-1.0)*r11*x14935*x14937))+(((-1.0)*sj2*x14930))+((r11*x14933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14941=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14941);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14941);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14942=(r01*sj5);
IkReal x14943=((1.0)*cj5*r00);
j4eval[0]=(x14942+(((-1.0)*x14943)));
j4eval[1]=((((-1.0)*cj3*x14943))+((cj3*x14942)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14944=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14944);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14944);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14945=(cj5*r00);
IkReal x14946=(r01*sj5);
j4eval[0]=(x14946+(((-1.0)*x14945)));
j4eval[1]=(((sj3*x14945))+(((-1.0)*sj3*x14946)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14947=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14947);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14947);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14948=((1.0)*r00);
CheckValue<IkReal> x14949=IKPowWithIntegerCheck(cj3,-1);
if(!x14949.valid){
continue;
}
CheckValue<IkReal> x14950=IKPowWithIntegerCheck(r22,-1);
if(!x14950.valid){
continue;
}
CheckValue<IkReal> x14951=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14948))),-1);
if(!x14951.valid){
continue;
}
if( IKabs(((x14949.value)*(x14950.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14951.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14948)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14949.value)*(x14950.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14951.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14948))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14949.value)*(x14950.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14951.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14948))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14952=IKsin(j4);
IkReal x14953=IKcos(j4);
IkReal x14954=(sj1*sj2);
IkReal x14955=(cj5*sj3);
IkReal x14956=(r11*sj5);
IkReal x14957=(cj3*cj5);
IkReal x14958=((1.0)*cj1);
IkReal x14959=(cj3*sj5);
IkReal x14960=(sj3*sj5);
IkReal x14961=(cj2*sj1);
IkReal x14962=(r01*sj5);
IkReal x14963=((1.0)*sj3);
IkReal x14964=(cj2*x14958);
IkReal x14965=(r10*x14953);
IkReal x14966=(r22*x14952);
IkReal x14967=(cj3*x14953);
IkReal x14968=((1.0)*cj5*x14952);
evalcond[0]=((-1.0)*r22*x14953);
evalcond[1]=(((cj3*x14966))+x14961+((cj1*sj2)));
evalcond[2]=((((-1.0)*r10*x14968))+((x14952*x14956)));
evalcond[3]=((-1.0)+((x14952*x14962))+(((-1.0)*r00*x14968)));
evalcond[4]=(x14954+(((-1.0)*x14964))+(((-1.0)*x14963*x14966)));
evalcond[5]=(((r01*x14955))+((r01*x14953*x14959))+(((-1.0)*r00*x14953*x14957))+((r00*x14960)));
evalcond[6]=((((-1.0)*r01*x14953*x14960))+((r00*x14953*x14955))+((r01*x14957))+((r00*x14959)));
evalcond[7]=((((-1.0)*x14957*x14965))+x14954+((x14956*x14967))+(((-1.0)*x14964))+((r10*x14960))+((r11*x14955)));
evalcond[8]=((((-1.0)*x14961))+((x14955*x14965))+(((-1.0)*sj2*x14958))+((r10*x14959))+(((-1.0)*x14953*x14956*x14963))+((r11*x14957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14969=((1.0)*cj3);
IkReal x14970=(cj5*r00);
IkReal x14971=(r01*sj5);
CheckValue<IkReal> x14972=IKPowWithIntegerCheck(((((-1.0)*x14970))+x14971),-1);
if(!x14972.valid){
continue;
}
CheckValue<IkReal> x14973=IKPowWithIntegerCheck(((((-1.0)*sj3*x14971))+((sj3*x14970))),-1);
if(!x14973.valid){
continue;
}
if( IKabs(x14972.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14973.value)*(((((-1.0)*cj5*r01*x14969))+(((-1.0)*r00*sj5*x14969)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14972.value)+IKsqr(((x14973.value)*(((((-1.0)*cj5*r01*x14969))+(((-1.0)*r00*sj5*x14969))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14972.value, ((x14973.value)*(((((-1.0)*cj5*r01*x14969))+(((-1.0)*r00*sj5*x14969))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14974=IKsin(j4);
IkReal x14975=IKcos(j4);
IkReal x14976=(sj1*sj2);
IkReal x14977=(cj5*sj3);
IkReal x14978=(r11*sj5);
IkReal x14979=(cj3*cj5);
IkReal x14980=((1.0)*cj1);
IkReal x14981=(cj3*sj5);
IkReal x14982=(sj3*sj5);
IkReal x14983=(cj2*sj1);
IkReal x14984=(r01*sj5);
IkReal x14985=((1.0)*sj3);
IkReal x14986=(cj2*x14980);
IkReal x14987=(r10*x14975);
IkReal x14988=(r22*x14974);
IkReal x14989=(cj3*x14975);
IkReal x14990=((1.0)*cj5*x14974);
evalcond[0]=((-1.0)*r22*x14975);
evalcond[1]=(x14983+((cj1*sj2))+((cj3*x14988)));
evalcond[2]=(((x14974*x14978))+(((-1.0)*r10*x14990)));
evalcond[3]=((-1.0)+((x14974*x14984))+(((-1.0)*r00*x14990)));
evalcond[4]=(x14976+(((-1.0)*x14985*x14988))+(((-1.0)*x14986)));
evalcond[5]=(((r01*x14975*x14981))+((r00*x14982))+((r01*x14977))+(((-1.0)*r00*x14975*x14979)));
evalcond[6]=(((r00*x14975*x14977))+((r00*x14981))+(((-1.0)*r01*x14975*x14982))+((r01*x14979)));
evalcond[7]=(x14976+((r10*x14982))+((r11*x14977))+(((-1.0)*x14986))+(((-1.0)*x14979*x14987))+((x14978*x14989)));
evalcond[8]=((((-1.0)*sj2*x14980))+(((-1.0)*x14975*x14978*x14985))+((x14977*x14987))+((r10*x14981))+((r11*x14979))+(((-1.0)*x14983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14991=((1.0)*sj3);
IkReal x14992=(r01*sj5);
IkReal x14993=((1.0)*cj5*r00);
CheckValue<IkReal> x14994=IKPowWithIntegerCheck(((((-1.0)*x14993))+x14992),-1);
if(!x14994.valid){
continue;
}
CheckValue<IkReal> x14995=IKPowWithIntegerCheck(((((-1.0)*cj3*x14993))+((cj3*x14992))),-1);
if(!x14995.valid){
continue;
}
if( IKabs(x14994.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14995.value)*(((((-1.0)*cj5*r01*x14991))+(((-1.0)*r00*sj5*x14991)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14994.value)+IKsqr(((x14995.value)*(((((-1.0)*cj5*r01*x14991))+(((-1.0)*r00*sj5*x14991))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14994.value, ((x14995.value)*(((((-1.0)*cj5*r01*x14991))+(((-1.0)*r00*sj5*x14991))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14996=IKsin(j4);
IkReal x14997=IKcos(j4);
IkReal x14998=(sj1*sj2);
IkReal x14999=(cj5*sj3);
IkReal x15000=(r11*sj5);
IkReal x15001=(cj3*cj5);
IkReal x15002=((1.0)*cj1);
IkReal x15003=(cj3*sj5);
IkReal x15004=(sj3*sj5);
IkReal x15005=(cj2*sj1);
IkReal x15006=(r01*sj5);
IkReal x15007=((1.0)*sj3);
IkReal x15008=(cj2*x15002);
IkReal x15009=(r10*x14997);
IkReal x15010=(r22*x14996);
IkReal x15011=(cj3*x14997);
IkReal x15012=((1.0)*cj5*x14996);
evalcond[0]=((-1.0)*r22*x14997);
evalcond[1]=(((cj3*x15010))+((cj1*sj2))+x15005);
evalcond[2]=(((x14996*x15000))+(((-1.0)*r10*x15012)));
evalcond[3]=((-1.0)+((x14996*x15006))+(((-1.0)*r00*x15012)));
evalcond[4]=(x14998+(((-1.0)*x15007*x15010))+(((-1.0)*x15008)));
evalcond[5]=((((-1.0)*r00*x14997*x15001))+((r01*x14997*x15003))+((r00*x15004))+((r01*x14999)));
evalcond[6]=(((r00*x14997*x14999))+(((-1.0)*r01*x14997*x15004))+((r01*x15001))+((r00*x15003)));
evalcond[7]=((((-1.0)*x15001*x15009))+x14998+((r10*x15004))+((r11*x14999))+((x15000*x15011))+(((-1.0)*x15008)));
evalcond[8]=((((-1.0)*x14997*x15000*x15007))+(((-1.0)*sj2*x15002))+(((-1.0)*x15005))+((x14999*x15009))+((r10*x15003))+((r11*x15001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15013=cj5*cj5;
IkReal x15014=(cj3*r20);
IkReal x15015=(r21*sj3);
IkReal x15016=((1.0)*cj3);
IkReal x15017=(r01*r21);
IkReal x15018=(r01*sj3);
IkReal x15019=(r00*sj5);
IkReal x15020=(cj5*r01*sj5);
IkReal x15021=((1.0)*x15013);
CheckValue<IkReal> x15022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x15016))+(((-1.0)*r00*x15014*x15021))+((x15014*x15020))+((cj3*cj5*r21*x15019))+((cj3*x15013*x15017))+(((-1.0)*x15016*x15017)))),-1);
if(!x15022.valid){
continue;
}
CheckValue<IkReal> x15023 = IKatan2WithCheck(IkReal((((r22*sj3*x15019))+((cj5*r22*x15018)))),IkReal(((((-1.0)*r00*x15015*x15021))+(((-1.0)*cj5*r20*sj3*x15019))+((x15015*x15020))+((r00*x15015))+(((-1.0)*r20*x15018*x15021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15022.value)))+(x15023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15024=IKsin(j4);
IkReal x15025=IKcos(j4);
IkReal x15026=(sj1*sj2);
IkReal x15027=(r11*sj5);
IkReal x15028=(cj5*r10);
IkReal x15029=(cj5*r01);
IkReal x15030=(cj5*r00);
IkReal x15031=((1.0)*cj1);
IkReal x15032=(cj3*sj5);
IkReal x15033=(r21*sj5);
IkReal x15034=(cj5*sj3);
IkReal x15035=(sj3*sj5);
IkReal x15036=(cj2*sj1);
IkReal x15037=(r01*sj5);
IkReal x15038=(cj3*cj5);
IkReal x15039=(cj5*r20);
IkReal x15040=(cj2*x15031);
IkReal x15041=((1.0)*x15025);
IkReal x15042=((1.0)*x15024);
IkReal x15043=(cj3*x15025);
IkReal x15044=(sj3*x15025);
IkReal x15045=(cj3*x15024);
evalcond[0]=(((x15024*x15033))+(((-1.0)*r22*x15041))+(((-1.0)*x15039*x15042)));
evalcond[1]=((((-1.0)*x15028*x15042))+(((-1.0)*r12*x15041))+((x15024*x15027)));
evalcond[2]=((-1.0)+(((-1.0)*x15030*x15042))+((x15024*x15037))+(((-1.0)*r02*x15041)));
evalcond[3]=(((r02*x15045))+((r01*x15025*x15032))+((r00*x15035))+(((-1.0)*cj3*x15030*x15041))+((sj3*x15029)));
evalcond[4]=(((r00*x15032))+(((-1.0)*r01*x15035*x15041))+((cj3*x15029))+((x15030*x15044))+(((-1.0)*r02*sj3*x15042)));
evalcond[5]=(((r21*x15034))+((r22*x15045))+((cj1*sj2))+((r21*x15025*x15032))+x15036+((r20*x15035))+(((-1.0)*r20*x15038*x15041)));
evalcond[6]=((((-1.0)*x15040))+((x15027*x15043))+((r12*x15045))+x15026+((r10*x15035))+((r11*x15034))+(((-1.0)*cj3*x15028*x15041)));
evalcond[7]=((((-1.0)*x15040))+((r21*x15038))+(((-1.0)*sj3*x15033*x15041))+(((-1.0)*r22*sj3*x15042))+x15026+((r20*x15032))+((r20*x15025*x15034)));
evalcond[8]=((((-1.0)*sj2*x15031))+(((-1.0)*sj3*x15027*x15041))+(((-1.0)*r12*sj3*x15042))+(((-1.0)*x15036))+((x15028*x15044))+((r10*x15032))+((r11*x15038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15046=((1.0)*cj5);
CheckValue<IkReal> x15047=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15046)))),-1);
if(!x15047.valid){
continue;
}
CheckValue<IkReal> x15048 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x15046))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15047.value)))+(x15048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15049=IKsin(j4);
IkReal x15050=IKcos(j4);
IkReal x15051=(sj1*sj2);
IkReal x15052=(r11*sj5);
IkReal x15053=(cj5*r10);
IkReal x15054=(cj5*r01);
IkReal x15055=(cj5*r00);
IkReal x15056=((1.0)*cj1);
IkReal x15057=(cj3*sj5);
IkReal x15058=(r21*sj5);
IkReal x15059=(cj5*sj3);
IkReal x15060=(sj3*sj5);
IkReal x15061=(cj2*sj1);
IkReal x15062=(r01*sj5);
IkReal x15063=(cj3*cj5);
IkReal x15064=(cj5*r20);
IkReal x15065=(cj2*x15056);
IkReal x15066=((1.0)*x15050);
IkReal x15067=((1.0)*x15049);
IkReal x15068=(cj3*x15050);
IkReal x15069=(sj3*x15050);
IkReal x15070=(cj3*x15049);
evalcond[0]=(((x15049*x15058))+(((-1.0)*x15064*x15067))+(((-1.0)*r22*x15066)));
evalcond[1]=(((x15049*x15052))+(((-1.0)*x15053*x15067))+(((-1.0)*r12*x15066)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15066))+((x15049*x15062))+(((-1.0)*x15055*x15067)));
evalcond[3]=((((-1.0)*cj3*x15055*x15066))+((r02*x15070))+((r00*x15060))+((sj3*x15054))+((r01*x15050*x15057)));
evalcond[4]=((((-1.0)*r01*x15060*x15066))+(((-1.0)*r02*sj3*x15067))+((x15055*x15069))+((cj3*x15054))+((r00*x15057)));
evalcond[5]=(((r21*x15050*x15057))+((r20*x15060))+((r22*x15070))+((cj1*sj2))+x15061+((r21*x15059))+(((-1.0)*r20*x15063*x15066)));
evalcond[6]=(((r12*x15070))+((x15052*x15068))+x15051+((r10*x15060))+((r11*x15059))+(((-1.0)*cj3*x15053*x15066))+(((-1.0)*x15065)));
evalcond[7]=(((r20*x15057))+((r21*x15063))+x15051+(((-1.0)*sj3*x15058*x15066))+(((-1.0)*x15065))+((r20*x15050*x15059))+(((-1.0)*r22*sj3*x15067)));
evalcond[8]=((((-1.0)*sj3*x15052*x15066))+((r10*x15057))+(((-1.0)*r12*sj3*x15067))+((x15053*x15069))+(((-1.0)*x15061))+((r11*x15063))+(((-1.0)*sj2*x15056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15071=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15071.valid){
continue;
}
CheckValue<IkReal> x15072 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15071.value)))+(x15072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15073=IKsin(j4);
IkReal x15074=IKcos(j4);
IkReal x15075=(sj1*sj2);
IkReal x15076=(r11*sj5);
IkReal x15077=(cj5*r10);
IkReal x15078=(cj5*r01);
IkReal x15079=(cj5*r00);
IkReal x15080=((1.0)*cj1);
IkReal x15081=(cj3*sj5);
IkReal x15082=(r21*sj5);
IkReal x15083=(cj5*sj3);
IkReal x15084=(sj3*sj5);
IkReal x15085=(cj2*sj1);
IkReal x15086=(r01*sj5);
IkReal x15087=(cj3*cj5);
IkReal x15088=(cj5*r20);
IkReal x15089=(cj2*x15080);
IkReal x15090=((1.0)*x15074);
IkReal x15091=((1.0)*x15073);
IkReal x15092=(cj3*x15074);
IkReal x15093=(sj3*x15074);
IkReal x15094=(cj3*x15073);
evalcond[0]=((((-1.0)*r22*x15090))+(((-1.0)*x15088*x15091))+((x15073*x15082)));
evalcond[1]=((((-1.0)*x15077*x15091))+((x15073*x15076))+(((-1.0)*r12*x15090)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15090))+((x15073*x15086))+(((-1.0)*x15079*x15091)));
evalcond[3]=((((-1.0)*cj3*x15079*x15090))+((sj3*x15078))+((r02*x15094))+((r00*x15084))+((r01*x15074*x15081)));
evalcond[4]=(((x15079*x15093))+(((-1.0)*r01*x15084*x15090))+(((-1.0)*r02*sj3*x15091))+((cj3*x15078))+((r00*x15081)));
evalcond[5]=(((r21*x15074*x15081))+((cj1*sj2))+x15085+(((-1.0)*r20*x15087*x15090))+((r21*x15083))+((r20*x15084))+((r22*x15094)));
evalcond[6]=((((-1.0)*cj3*x15077*x15090))+(((-1.0)*x15089))+((x15076*x15092))+x15075+((r12*x15094))+((r11*x15083))+((r10*x15084)));
evalcond[7]=((((-1.0)*r22*sj3*x15091))+(((-1.0)*x15089))+x15075+(((-1.0)*sj3*x15082*x15090))+((r21*x15087))+((r20*x15074*x15083))+((r20*x15081)));
evalcond[8]=((((-1.0)*r12*sj3*x15091))+(((-1.0)*sj2*x15080))+((x15077*x15093))+(((-1.0)*sj3*x15076*x15090))+((r11*x15087))+(((-1.0)*x15085))+((r10*x15081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15095=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15095;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15096=((1.0)*cj5);
IkReal x15097=((((-1.0)*r21*x15096))+(((-1.0)*r20*sj5)));
j4eval[0]=x15097;
j4eval[1]=((IKabs(((((-1.0)*r10*x15096))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15097);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15098=cj5*cj5;
IkReal x15099=(cj3*r01);
IkReal x15100=(cj5*sj5);
IkReal x15101=((1.0)*cj3);
IkReal x15102=((((-1.0)*r00*r20*x15098*x15101))+(((-1.0)*r21*x15099))+(((-1.0)*r02*r22*x15101))+((r20*x15099*x15100))+((r21*x15098*x15099))+((cj3*r00*r21*x15100)));
j4eval[0]=x15102;
j4eval[1]=IKsign(x15102);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15103=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15103;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15103);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15104=((1.0)*cj5);
IkReal x15105=((((-1.0)*r21*x15104))+(((-1.0)*r20*sj5)));
j4eval[0]=x15105;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15104))+((r11*sj5))))));
j4eval[2]=IKsign(x15105);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15106=cj5*cj5;
IkReal x15107=r01*r01;
IkReal x15108=(cj5*r00);
IkReal x15109=(r01*sj5);
IkReal x15110=((((-2.0)*x15108*x15109))+x15107+(((-1.0)*x15106*x15107))+((x15106*(r00*r00)))+(r02*r02));
j4eval[0]=x15110;
j4eval[1]=((IKabs(r02))+(IKabs((x15108+(((-1.0)*x15109))))));
j4eval[2]=IKsign(x15110);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15111=cj5*cj5;
IkReal x15112=r01*r01;
IkReal x15113=(r01*sj5);
IkReal x15114=(cj5*r00);
CheckValue<IkReal> x15115 = IKatan2WithCheck(IkReal(((((-1.0)*x15113))+x15114)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15115.valid){
continue;
}
CheckValue<IkReal> x15116=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15111*x15112))+x15112+(r02*r02)+(((-2.0)*x15113*x15114))+((x15111*(r00*r00))))),-1);
if(!x15116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15115.value)+(((1.5707963267949)*(x15116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15117=IKsin(j4);
IkReal x15118=IKcos(j4);
IkReal x15119=(cj5*r10);
IkReal x15120=(r01*sj5);
IkReal x15121=(cj5*r00);
IkReal x15122=(cj5*r20);
IkReal x15123=((1.0)*x15118);
IkReal x15124=((1.0)*x15117);
IkReal x15125=(sj5*x15117);
evalcond[0]=(((r21*x15125))+(((-1.0)*r22*x15123))+(((-1.0)*x15122*x15124)));
evalcond[1]=((((-1.0)*x15119*x15124))+(((-1.0)*r12*x15123))+((r11*x15125)));
evalcond[2]=((((-1.0)*r02*x15124))+((x15118*x15121))+(((-1.0)*x15120*x15123)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15123))+(((-1.0)*x15121*x15124))+((x15117*x15120)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x15124))+(((-1.0)*r11*sj5*x15123))+((x15118*x15119)));
evalcond[5]=((((-1.0)*r21*sj5*x15123))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15124))+((x15118*x15122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15126=((1.0)*cj5);
CheckValue<IkReal> x15127=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15126))+(((-1.0)*r20*sj5)))),-1);
if(!x15127.valid){
continue;
}
CheckValue<IkReal> x15128 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15126))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15127.value)))+(x15128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15129=IKsin(j4);
IkReal x15130=IKcos(j4);
IkReal x15131=(cj5*r10);
IkReal x15132=(r01*sj5);
IkReal x15133=(cj5*r00);
IkReal x15134=(cj5*r20);
IkReal x15135=((1.0)*x15130);
IkReal x15136=((1.0)*x15129);
IkReal x15137=(sj5*x15129);
evalcond[0]=(((r21*x15137))+(((-1.0)*x15134*x15136))+(((-1.0)*r22*x15135)));
evalcond[1]=((((-1.0)*r12*x15135))+((r11*x15137))+(((-1.0)*x15131*x15136)));
evalcond[2]=(((x15130*x15133))+(((-1.0)*r02*x15136))+(((-1.0)*x15132*x15135)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15135))+((x15129*x15132))+(((-1.0)*x15133*x15136)));
evalcond[4]=(((x15130*x15131))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x15136))+(((-1.0)*r11*sj5*x15135)));
evalcond[5]=(((x15130*x15134))+(((-1.0)*r21*sj5*x15135))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15138 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15138.valid){
continue;
}
CheckValue<IkReal> x15139=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15138.value)+(((1.5707963267949)*(x15139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15140=IKsin(j4);
IkReal x15141=IKcos(j4);
IkReal x15142=(cj5*r10);
IkReal x15143=(r01*sj5);
IkReal x15144=(cj5*r00);
IkReal x15145=(cj5*r20);
IkReal x15146=((1.0)*x15141);
IkReal x15147=((1.0)*x15140);
IkReal x15148=(sj5*x15140);
evalcond[0]=(((r21*x15148))+(((-1.0)*x15145*x15147))+(((-1.0)*r22*x15146)));
evalcond[1]=(((r11*x15148))+(((-1.0)*x15142*x15147))+(((-1.0)*r12*x15146)));
evalcond[2]=((((-1.0)*r02*x15147))+(((-1.0)*x15143*x15146))+((x15141*x15144)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15146))+(((-1.0)*x15144*x15147))+((x15140*x15143)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x15146))+((x15141*x15142))+(((-1.0)*r12*x15147)));
evalcond[5]=((((-1.0)*r21*sj5*x15146))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15147))+((x15141*x15145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15149=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15149;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15149);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15150=((1.0)*cj5);
IkReal x15151=((((-1.0)*r21*x15150))+(((-1.0)*r20*sj5)));
j4eval[0]=x15151;
j4eval[1]=((IKabs(((((-1.0)*r10*x15150))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15152=cj5*cj5;
IkReal x15153=r01*r01;
IkReal x15154=(r01*sj5);
IkReal x15155=(cj5*r00);
IkReal x15156=(((x15152*x15153))+(((-1.0)*(r02*r02)))+(((-1.0)*x15152*(r00*r00)))+(((2.0)*x15154*x15155))+(((-1.0)*x15153)));
j4eval[0]=x15156;
j4eval[1]=IKsign(x15156);
j4eval[2]=((IKabs(r02))+(IKabs((x15154+(((-1.0)*x15155))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15157=cj5*cj5;
IkReal x15158=r01*r01;
IkReal x15159=(r01*sj5);
IkReal x15160=(cj5*r00);
CheckValue<IkReal> x15161 = IKatan2WithCheck(IkReal(((((-1.0)*x15160))+x15159)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15161.valid){
continue;
}
CheckValue<IkReal> x15162=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15157*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x15159*x15160))+((x15157*x15158))+(((-1.0)*x15158)))),-1);
if(!x15162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15161.value)+(((1.5707963267949)*(x15162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15163=IKcos(j4);
IkReal x15164=IKsin(j4);
IkReal x15165=(cj5*r00);
IkReal x15166=(cj5*r10);
IkReal x15167=(r21*sj5);
IkReal x15168=(cj5*r20);
IkReal x15169=((1.0)*x15163);
IkReal x15170=((1.0)*x15164);
IkReal x15171=(sj5*x15164);
IkReal x15172=(sj5*x15163);
evalcond[0]=(((r02*x15164))+(((-1.0)*x15165*x15169))+((r01*x15172)));
evalcond[1]=(((x15164*x15167))+(((-1.0)*r22*x15169))+(((-1.0)*x15168*x15170)));
evalcond[2]=(((r11*x15171))+(((-1.0)*x15166*x15170))+(((-1.0)*r12*x15169)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15169))+(((-1.0)*x15165*x15170))+((r01*x15171)));
evalcond[4]=(((cj2*sj1))+((r11*x15172))+((cj1*sj2))+((r12*x15164))+(((-1.0)*x15166*x15169)));
evalcond[5]=(((x15163*x15167))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15168*x15169))+((r22*x15164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15173=((1.0)*cj5);
CheckValue<IkReal> x15174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15173))+(((-1.0)*r20*sj5)))),-1);
if(!x15174.valid){
continue;
}
CheckValue<IkReal> x15175 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15174.value)))+(x15175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15176=IKcos(j4);
IkReal x15177=IKsin(j4);
IkReal x15178=(cj5*r00);
IkReal x15179=(cj5*r10);
IkReal x15180=(r21*sj5);
IkReal x15181=(cj5*r20);
IkReal x15182=((1.0)*x15176);
IkReal x15183=((1.0)*x15177);
IkReal x15184=(sj5*x15177);
IkReal x15185=(sj5*x15176);
evalcond[0]=(((r02*x15177))+((r01*x15185))+(((-1.0)*x15178*x15182)));
evalcond[1]=(((x15177*x15180))+(((-1.0)*x15181*x15183))+(((-1.0)*r22*x15182)));
evalcond[2]=(((r11*x15184))+(((-1.0)*r12*x15182))+(((-1.0)*x15179*x15183)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15182))+((r01*x15184))+(((-1.0)*x15178*x15183)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x15177))+((r11*x15185))+(((-1.0)*x15179*x15182)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15176*x15180))+((r22*x15177))+(((-1.0)*x15181*x15182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15186 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15186.valid){
continue;
}
CheckValue<IkReal> x15187=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15186.value)+(((1.5707963267949)*(x15187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15188=IKcos(j4);
IkReal x15189=IKsin(j4);
IkReal x15190=(cj5*r00);
IkReal x15191=(cj5*r10);
IkReal x15192=(r21*sj5);
IkReal x15193=(cj5*r20);
IkReal x15194=((1.0)*x15188);
IkReal x15195=((1.0)*x15189);
IkReal x15196=(sj5*x15189);
IkReal x15197=(sj5*x15188);
evalcond[0]=((((-1.0)*x15190*x15194))+((r02*x15189))+((r01*x15197)));
evalcond[1]=((((-1.0)*x15193*x15195))+(((-1.0)*r22*x15194))+((x15189*x15192)));
evalcond[2]=(((r11*x15196))+(((-1.0)*r12*x15194))+(((-1.0)*x15191*x15195)));
evalcond[3]=((1.0)+(((-1.0)*x15190*x15195))+(((-1.0)*r02*x15194))+((r01*x15196)));
evalcond[4]=(((cj2*sj1))+((r11*x15197))+((cj1*sj2))+((r12*x15189))+(((-1.0)*x15191*x15194)));
evalcond[5]=((((-1.0)*x15193*x15194))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15188*x15192))+((r22*x15189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15199 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15199)==0){
continue;
}
IkReal x15198=pow(x15199,-0.5);
CheckValue<IkReal> x15200 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15200.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15200.value));
IkReal gconst61=((-1.0)*r11*x15198);
IkReal gconst62=(r10*x15198);
CheckValue<IkReal> x15201 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15201.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15201.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15204 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15204.valid){
continue;
}
IkReal x15202=((-1.0)*(x15204.value));
IkReal x15203=x15198;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15202;
IkReal gconst60=x15202;
IkReal gconst61=((-1.0)*r11*x15203);
IkReal gconst62=(r10*x15203);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15207 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15207.valid){
continue;
}
IkReal x15205=((-1.0)*(x15207.value));
IkReal x15206=x15198;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15205;
IkReal gconst60=x15205;
IkReal gconst61=((-1.0)*r11*x15206);
IkReal gconst62=(r10*x15206);
CheckValue<IkReal> x15215=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15215.valid){
continue;
}
IkReal x15208=x15215.value;
IkReal x15209=(sj3*x15208);
IkReal x15210=(r20*x15209);
IkReal x15211=(r00*x15209);
IkReal x15212=(r01*x15209);
IkReal x15213=(r21*x15209);
IkReal x15214=(r10*r11*x15209);
j4eval[0]=IKsign((((r00*x15210*(r10*r10)))+((r21*x15212*(r11*r11)))+((r10*r11*r21*x15211))+((r01*r10*r11*x15210))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15216=gconst61*gconst61;
IkReal x15217=gconst62*gconst62;
IkReal x15218=(cj3*r01);
IkReal x15219=(r22*sj3);
IkReal x15220=(gconst61*r00);
IkReal x15221=((1.0)*cj3);
IkReal x15222=(gconst62*r01);
IkReal x15223=((1.0)*sj3);
IkReal x15224=(gconst61*gconst62*r20);
IkReal x15225=(r21*x15216);
IkReal x15226=(r20*x15217);
CheckValue<IkReal> x15227 = IKatan2WithCheck(IkReal((((x15219*x15220))+((x15219*x15222)))),IkReal((((gconst61*r21*sj3*x15222))+(((-1.0)*gconst62*r20*x15220*x15223))+((r00*sj3*x15225))+(((-1.0)*r01*x15223*x15226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15227.valid){
continue;
}
CheckValue<IkReal> x15228=IKPowWithIntegerCheck(IKsign((((cj3*gconst62*r21*x15220))+(((-1.0)*r00*x15221*x15226))+(((-1.0)*r02*r22*x15221))+(((-1.0)*x15218*x15225))+((x15218*x15224)))),-1);
if(!x15228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15227.value)+(((1.5707963267949)*(x15228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15229=IKsin(j4);
IkReal x15230=IKcos(j4);
IkReal x15231=(cj2*sj1);
IkReal x15232=(cj1*sj2);
IkReal x15233=(gconst61*sj3);
IkReal x15234=(cj3*gconst61);
IkReal x15235=(cj3*gconst62);
IkReal x15236=(sj1*sj2);
IkReal x15237=(gconst62*sj3);
IkReal x15238=(cj1*cj2);
IkReal x15239=((1.0)*x15230);
IkReal x15240=((1.0)*x15229);
IkReal x15241=(gconst61*x15229);
IkReal x15242=(cj3*x15229);
IkReal x15243=(x15232+x15231);
evalcond[0]=((((-1.0)*gconst62*r20*x15240))+((r21*x15241))+(((-1.0)*r22*x15239)));
evalcond[1]=((((-1.0)*gconst62*r10*x15240))+(((-1.0)*r12*x15239))+((r11*x15241)));
evalcond[2]=((1.0)+((r01*x15241))+(((-1.0)*r02*x15239))+(((-1.0)*gconst62*r00*x15240)));
evalcond[3]=(((r00*x15233))+((r01*x15237))+((r01*x15230*x15234))+(((-1.0)*r00*x15235*x15239))+((r02*x15242)));
evalcond[4]=(((r00*x15234))+((r01*x15235))+(((-1.0)*r01*x15233*x15239))+((r00*x15230*x15237))+(((-1.0)*r02*sj3*x15240)));
evalcond[5]=((((-1.0)*r20*x15235*x15239))+x15243+((r21*x15237))+((r21*x15230*x15234))+((r22*x15242))+((r20*x15233)));
evalcond[6]=((((-1.0)*r10*x15235*x15239))+(((-1.0)*x15236))+x15238+((r11*x15230*x15234))+((r10*x15233))+((r12*x15242))+((r11*x15237)));
evalcond[7]=((((-1.0)*r12*sj3*x15240))+x15243+((r10*x15230*x15237))+((r10*x15234))+(((-1.0)*r11*x15233*x15239))+((r11*x15235)));
evalcond[8]=((((-1.0)*x15238))+x15236+((r21*x15235))+(((-1.0)*r21*x15233*x15239))+((r20*x15230*x15237))+(((-1.0)*r22*sj3*x15240))+((r20*x15234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15244=gconst61*gconst61;
IkReal x15245=gconst62*gconst62;
IkReal x15246=(cj3*r22);
IkReal x15247=(gconst62*r01);
IkReal x15248=(gconst61*r00);
IkReal x15249=((1.0)*r20);
IkReal x15250=(cj3*r21);
IkReal x15251=(r21*sj3);
CheckValue<IkReal> x15252=IKPowWithIntegerCheck(IKsign((((r01*x15244*x15251))+((r00*r20*sj3*x15245))+(((-1.0)*gconst61*sj3*x15247*x15249))+(((-1.0)*gconst62*x15248*x15251))+((r02*r22*sj3)))),-1);
if(!x15252.valid){
continue;
}
CheckValue<IkReal> x15253 = IKatan2WithCheck(IkReal((((x15246*x15248))+((x15246*x15247)))),IkReal(((((-1.0)*cj3*gconst62*x15248*x15249))+((r00*x15244*x15250))+((gconst61*x15247*x15250))+(((-1.0)*cj3*r01*x15245*x15249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15252.value)))+(x15253.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15254=IKsin(j4);
IkReal x15255=IKcos(j4);
IkReal x15256=(cj2*sj1);
IkReal x15257=(cj1*sj2);
IkReal x15258=(gconst61*sj3);
IkReal x15259=(cj3*gconst61);
IkReal x15260=(cj3*gconst62);
IkReal x15261=(sj1*sj2);
IkReal x15262=(gconst62*sj3);
IkReal x15263=(cj1*cj2);
IkReal x15264=((1.0)*x15255);
IkReal x15265=((1.0)*x15254);
IkReal x15266=(gconst61*x15254);
IkReal x15267=(cj3*x15254);
IkReal x15268=(x15256+x15257);
evalcond[0]=((((-1.0)*gconst62*r20*x15265))+(((-1.0)*r22*x15264))+((r21*x15266)));
evalcond[1]=((((-1.0)*gconst62*r10*x15265))+(((-1.0)*r12*x15264))+((r11*x15266)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15264))+((r01*x15266))+(((-1.0)*gconst62*r00*x15265)));
evalcond[3]=(((r00*x15258))+((r01*x15255*x15259))+(((-1.0)*r00*x15260*x15264))+((r01*x15262))+((r02*x15267)));
evalcond[4]=(((r00*x15259))+(((-1.0)*r01*x15258*x15264))+((r00*x15255*x15262))+((r01*x15260))+(((-1.0)*r02*sj3*x15265)));
evalcond[5]=(x15268+((r22*x15267))+((r20*x15258))+(((-1.0)*r20*x15260*x15264))+((r21*x15255*x15259))+((r21*x15262)));
evalcond[6]=(((r12*x15267))+x15263+(((-1.0)*r10*x15260*x15264))+((r10*x15258))+(((-1.0)*x15261))+((r11*x15255*x15259))+((r11*x15262)));
evalcond[7]=((((-1.0)*r11*x15258*x15264))+(((-1.0)*r12*sj3*x15265))+x15268+((r10*x15255*x15262))+((r10*x15259))+((r11*x15260)));
evalcond[8]=(x15261+(((-1.0)*r21*x15258*x15264))+((r20*x15259))+(((-1.0)*r22*sj3*x15265))+(((-1.0)*x15263))+((r21*x15260))+((r20*x15255*x15262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15269=((1.0)*gconst62);
CheckValue<IkReal> x15270 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15269))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15270.valid){
continue;
}
CheckValue<IkReal> x15271=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15269)))),-1);
if(!x15271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15270.value)+(((1.5707963267949)*(x15271.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15272=IKsin(j4);
IkReal x15273=IKcos(j4);
IkReal x15274=(cj2*sj1);
IkReal x15275=(cj1*sj2);
IkReal x15276=(gconst61*sj3);
IkReal x15277=(cj3*gconst61);
IkReal x15278=(cj3*gconst62);
IkReal x15279=(sj1*sj2);
IkReal x15280=(gconst62*sj3);
IkReal x15281=(cj1*cj2);
IkReal x15282=((1.0)*x15273);
IkReal x15283=((1.0)*x15272);
IkReal x15284=(gconst61*x15272);
IkReal x15285=(cj3*x15272);
IkReal x15286=(x15274+x15275);
evalcond[0]=((((-1.0)*gconst62*r20*x15283))+(((-1.0)*r22*x15282))+((r21*x15284)));
evalcond[1]=((((-1.0)*r12*x15282))+((r11*x15284))+(((-1.0)*gconst62*r10*x15283)));
evalcond[2]=((1.0)+((r01*x15284))+(((-1.0)*gconst62*r00*x15283))+(((-1.0)*r02*x15282)));
evalcond[3]=(((r01*x15273*x15277))+((r01*x15280))+(((-1.0)*r00*x15278*x15282))+((r02*x15285))+((r00*x15276)));
evalcond[4]=((((-1.0)*r01*x15276*x15282))+((r00*x15273*x15280))+(((-1.0)*r02*sj3*x15283))+((r01*x15278))+((r00*x15277)));
evalcond[5]=(((r22*x15285))+x15286+((r20*x15276))+((r21*x15273*x15277))+(((-1.0)*r20*x15278*x15282))+((r21*x15280)));
evalcond[6]=((((-1.0)*r10*x15278*x15282))+x15281+((r10*x15276))+((r11*x15273*x15277))+(((-1.0)*x15279))+((r11*x15280))+((r12*x15285)));
evalcond[7]=(((r11*x15278))+(((-1.0)*r12*sj3*x15283))+x15286+((r10*x15273*x15280))+((r10*x15277))+(((-1.0)*r11*x15276*x15282)));
evalcond[8]=((((-1.0)*r21*x15276*x15282))+(((-1.0)*r22*sj3*x15283))+x15279+((r20*x15277))+((r21*x15278))+((r20*x15273*x15280))+(((-1.0)*x15281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15288 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15288)==0){
continue;
}
IkReal x15287=pow(x15288,-0.5);
CheckValue<IkReal> x15289 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15289.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15289.value))));
IkReal gconst64=((1.0)*r11*x15287);
IkReal gconst65=((-1.0)*r10*x15287);
CheckValue<IkReal> x15290 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15290.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15290.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15293 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15293.valid){
continue;
}
IkReal x15291=((1.0)*(x15293.value));
IkReal x15292=x15287;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15291)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15291)));
IkReal gconst64=((1.0)*r11*x15292);
IkReal gconst65=((-1.0)*r10*x15292);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15294=gconst64*gconst64;
IkReal x15295=gconst65*gconst65;
IkReal x15296=(gconst65*r01);
IkReal x15297=(cj3*r22);
IkReal x15298=(gconst64*r00);
IkReal x15299=(cj3*r21);
IkReal x15300=((1.0)*gconst64*sj3);
IkReal x15301=((1.0)*cj3*r20);
CheckValue<IkReal> x15302=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15295))+(((-1.0)*gconst65*r21*sj3*x15298))+((r02*r22*sj3))+(((-1.0)*r20*x15296*x15300))+((r01*r21*sj3*x15294)))),-1);
if(!x15302.valid){
continue;
}
CheckValue<IkReal> x15303 = IKatan2WithCheck(IkReal((((x15297*x15298))+((x15296*x15297)))),IkReal((((gconst64*x15296*x15299))+(((-1.0)*r01*x15295*x15301))+((r00*x15294*x15299))+(((-1.0)*gconst65*x15298*x15301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15302.value)))+(x15303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15304=IKsin(j4);
IkReal x15305=IKcos(j4);
IkReal x15306=(cj2*sj1);
IkReal x15307=(cj1*sj2);
IkReal x15308=(cj3*gconst64);
IkReal x15309=(gconst65*r21);
IkReal x15310=(sj1*sj2);
IkReal x15311=(gconst65*sj3);
IkReal x15312=(gconst64*sj3);
IkReal x15313=(cj3*gconst65);
IkReal x15314=(cj1*cj2);
IkReal x15315=((1.0)*x15305);
IkReal x15316=((1.0)*x15304);
IkReal x15317=(cj3*x15304);
IkReal x15318=(gconst64*x15304);
IkReal x15319=(x15306+x15307);
evalcond[0]=((((-1.0)*gconst65*r20*x15316))+((r21*x15318))+(((-1.0)*r22*x15315)));
evalcond[1]=(((r11*x15318))+(((-1.0)*gconst65*r10*x15316))+(((-1.0)*r12*x15315)));
evalcond[2]=((1.0)+((r01*x15318))+(((-1.0)*gconst65*r00*x15316))+(((-1.0)*r02*x15315)));
evalcond[3]=(((r01*x15311))+((r00*x15312))+((r01*x15305*x15308))+(((-1.0)*r00*x15313*x15315))+((r02*x15317)));
evalcond[4]=((((-1.0)*r01*x15312*x15315))+((r01*x15313))+((r00*x15308))+((r00*x15305*x15311))+(((-1.0)*r02*sj3*x15316)));
evalcond[5]=(((r21*x15305*x15308))+((sj3*x15309))+x15319+((r22*x15317))+(((-1.0)*r20*x15313*x15315))+((r20*x15312)));
evalcond[6]=(((r11*x15311))+(((-1.0)*x15310))+((r12*x15317))+x15314+((r10*x15312))+(((-1.0)*r10*x15313*x15315))+((r11*x15305*x15308)));
evalcond[7]=(((r11*x15313))+(((-1.0)*r11*x15312*x15315))+((r10*x15305*x15311))+x15319+(((-1.0)*r12*sj3*x15316))+((r10*x15308)));
evalcond[8]=((((-1.0)*x15314))+((r20*x15308))+x15310+(((-1.0)*r21*x15312*x15315))+(((-1.0)*r22*sj3*x15316))+((cj3*x15309))+((r20*x15305*x15311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15320=((1.0)*gconst65);
CheckValue<IkReal> x15321=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15320))+(((-1.0)*gconst64*r20)))),-1);
if(!x15321.valid){
continue;
}
CheckValue<IkReal> x15322 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x15320)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15321.value)))+(x15322.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15323=IKsin(j4);
IkReal x15324=IKcos(j4);
IkReal x15325=(cj2*sj1);
IkReal x15326=(cj1*sj2);
IkReal x15327=(cj3*gconst64);
IkReal x15328=(gconst65*r21);
IkReal x15329=(sj1*sj2);
IkReal x15330=(gconst65*sj3);
IkReal x15331=(gconst64*sj3);
IkReal x15332=(cj3*gconst65);
IkReal x15333=(cj1*cj2);
IkReal x15334=((1.0)*x15324);
IkReal x15335=((1.0)*x15323);
IkReal x15336=(cj3*x15323);
IkReal x15337=(gconst64*x15323);
IkReal x15338=(x15325+x15326);
evalcond[0]=(((r21*x15337))+(((-1.0)*gconst65*r20*x15335))+(((-1.0)*r22*x15334)));
evalcond[1]=(((r11*x15337))+(((-1.0)*r12*x15334))+(((-1.0)*gconst65*r10*x15335)));
evalcond[2]=((1.0)+((r01*x15337))+(((-1.0)*gconst65*r00*x15335))+(((-1.0)*r02*x15334)));
evalcond[3]=((((-1.0)*r00*x15332*x15334))+((r01*x15330))+((r00*x15331))+((r01*x15324*x15327))+((r02*x15336)));
evalcond[4]=(((r01*x15332))+((r00*x15324*x15330))+((r00*x15327))+(((-1.0)*r01*x15331*x15334))+(((-1.0)*r02*sj3*x15335)));
evalcond[5]=(((r20*x15331))+(((-1.0)*r20*x15332*x15334))+x15338+((r21*x15324*x15327))+((r22*x15336))+((sj3*x15328)));
evalcond[6]=(((r12*x15336))+(((-1.0)*x15329))+((r11*x15330))+x15333+((r11*x15324*x15327))+((r10*x15331))+(((-1.0)*r10*x15332*x15334)));
evalcond[7]=(((r11*x15332))+(((-1.0)*r12*sj3*x15335))+x15338+((r10*x15327))+(((-1.0)*r11*x15331*x15334))+((r10*x15324*x15330)));
evalcond[8]=((((-1.0)*x15333))+x15329+(((-1.0)*r22*sj3*x15335))+(((-1.0)*r21*x15331*x15334))+((r20*x15324*x15330))+((cj3*x15328))+((r20*x15327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15339=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15339);
rxp0_2=(py*r00);
rxp1_0=(r21*x15339);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15340=(r01*sj5);
IkReal x15341=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x15341))+x15340);
j4eval[1]=(((cj3*x15340))+(((-1.0)*cj3*x15341)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15342=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15342);
rxp0_2=(py*r00);
rxp1_0=(r21*x15342);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15343=(cj5*r00);
IkReal x15344=(r01*sj5);
j4eval[0]=(x15344+(((-1.0)*x15343)));
j4eval[1]=(((sj3*x15343))+(((-1.0)*sj3*x15344)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15345=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15345);
rxp0_2=(py*r00);
rxp1_0=(r21*x15345);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15346=((1.0)*r00);
CheckValue<IkReal> x15347=IKPowWithIntegerCheck(cj3,-1);
if(!x15347.valid){
continue;
}
CheckValue<IkReal> x15348=IKPowWithIntegerCheck(r12,-1);
if(!x15348.valid){
continue;
}
CheckValue<IkReal> x15349=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15346))),-1);
if(!x15349.valid){
continue;
}
if( IKabs(((x15347.value)*(x15348.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15349.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15346)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15347.value)*(x15348.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15349.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15346))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15347.value)*(x15348.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15349.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15346))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15350=IKsin(j4);
IkReal x15351=IKcos(j4);
IkReal x15352=(cj2*sj1);
IkReal x15353=(cj1*sj2);
IkReal x15354=(sj1*sj2);
IkReal x15355=(cj5*sj3);
IkReal x15356=(cj3*cj5);
IkReal x15357=(r21*sj5);
IkReal x15358=(cj1*cj2);
IkReal x15359=(r00*sj5);
IkReal x15360=(r01*sj5);
IkReal x15361=(r20*sj5);
IkReal x15362=((1.0)*x15350);
IkReal x15363=(r20*x15351);
IkReal x15364=(r00*x15351);
IkReal x15365=(cj3*x15351);
IkReal x15366=(x15353+x15352);
IkReal x15367=((1.0)*sj3*x15351);
evalcond[0]=((-1.0)*r12*x15351);
evalcond[1]=(((x15350*x15357))+(((-1.0)*cj5*r20*x15362)));
evalcond[2]=(x15358+(((-1.0)*x15354))+((cj3*r12*x15350)));
evalcond[3]=((((-1.0)*r12*sj3*x15362))+x15366);
evalcond[4]=((1.0)+((x15350*x15360))+(((-1.0)*cj5*r00*x15362)));
evalcond[5]=((((-1.0)*x15356*x15364))+((x15360*x15365))+((sj3*x15359))+((r01*x15355)));
evalcond[6]=((((-1.0)*x15360*x15367))+((cj3*x15359))+((x15355*x15364))+((r01*x15356)));
evalcond[7]=((((-1.0)*x15356*x15363))+x15366+((x15357*x15365))+((sj3*x15361))+((r21*x15355)));
evalcond[8]=(((cj3*x15361))+x15354+(((-1.0)*x15357*x15367))+(((-1.0)*x15358))+((x15355*x15363))+((r21*x15356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15368=((1.0)*r01);
IkReal x15369=(cj5*r00);
CheckValue<IkReal> x15370=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15369))),-1);
if(!x15370.valid){
continue;
}
CheckValue<IkReal> x15371=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x15368))+((sj3*x15369))),-1);
if(!x15371.valid){
continue;
}
if( IKabs(((-1.0)*(x15370.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15371.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15368)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15370.value)))+IKsqr(((x15371.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15368))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15370.value)), ((x15371.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15368))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15372=IKsin(j4);
IkReal x15373=IKcos(j4);
IkReal x15374=(cj2*sj1);
IkReal x15375=(cj1*sj2);
IkReal x15376=(sj1*sj2);
IkReal x15377=(cj5*sj3);
IkReal x15378=(cj3*cj5);
IkReal x15379=(r21*sj5);
IkReal x15380=(cj1*cj2);
IkReal x15381=(r00*sj5);
IkReal x15382=(r01*sj5);
IkReal x15383=(r20*sj5);
IkReal x15384=((1.0)*x15372);
IkReal x15385=(r20*x15373);
IkReal x15386=(r00*x15373);
IkReal x15387=(cj3*x15373);
IkReal x15388=(x15375+x15374);
IkReal x15389=((1.0)*sj3*x15373);
evalcond[0]=((-1.0)*r12*x15373);
evalcond[1]=((((-1.0)*cj5*r20*x15384))+((x15372*x15379)));
evalcond[2]=((((-1.0)*x15376))+((cj3*r12*x15372))+x15380);
evalcond[3]=((((-1.0)*r12*sj3*x15384))+x15388);
evalcond[4]=((1.0)+((x15372*x15382))+(((-1.0)*cj5*r00*x15384)));
evalcond[5]=(((x15382*x15387))+((r01*x15377))+((sj3*x15381))+(((-1.0)*x15378*x15386)));
evalcond[6]=(((x15377*x15386))+((r01*x15378))+(((-1.0)*x15382*x15389))+((cj3*x15381)));
evalcond[7]=(((r21*x15377))+x15388+((x15379*x15387))+((sj3*x15383))+(((-1.0)*x15378*x15385)));
evalcond[8]=((((-1.0)*x15379*x15389))+((x15377*x15385))+((r21*x15378))+((cj3*x15383))+x15376+(((-1.0)*x15380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15390=((1.0)*r00);
IkReal x15391=(r01*sj5);
CheckValue<IkReal> x15392=IKPowWithIntegerCheck(((((-1.0)*cj5*x15390))+x15391),-1);
if(!x15392.valid){
continue;
}
CheckValue<IkReal> x15393=IKPowWithIntegerCheck((((cj3*x15391))+(((-1.0)*cj3*cj5*x15390))),-1);
if(!x15393.valid){
continue;
}
if( IKabs(((-1.0)*(x15392.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15393.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15390)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15392.value)))+IKsqr(((x15393.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15390))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15392.value)), ((x15393.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15390))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15394=IKsin(j4);
IkReal x15395=IKcos(j4);
IkReal x15396=(cj2*sj1);
IkReal x15397=(cj1*sj2);
IkReal x15398=(sj1*sj2);
IkReal x15399=(cj5*sj3);
IkReal x15400=(cj3*cj5);
IkReal x15401=(r21*sj5);
IkReal x15402=(cj1*cj2);
IkReal x15403=(r00*sj5);
IkReal x15404=(r01*sj5);
IkReal x15405=(r20*sj5);
IkReal x15406=((1.0)*x15394);
IkReal x15407=(r20*x15395);
IkReal x15408=(r00*x15395);
IkReal x15409=(cj3*x15395);
IkReal x15410=(x15397+x15396);
IkReal x15411=((1.0)*sj3*x15395);
evalcond[0]=((-1.0)*r12*x15395);
evalcond[1]=(((x15394*x15401))+(((-1.0)*cj5*r20*x15406)));
evalcond[2]=(x15402+(((-1.0)*x15398))+((cj3*r12*x15394)));
evalcond[3]=(x15410+(((-1.0)*r12*sj3*x15406)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15406))+((x15394*x15404)));
evalcond[5]=((((-1.0)*x15400*x15408))+((sj3*x15403))+((x15404*x15409))+((r01*x15399)));
evalcond[6]=((((-1.0)*x15404*x15411))+((r01*x15400))+((x15399*x15408))+((cj3*x15403)));
evalcond[7]=(((x15401*x15409))+(((-1.0)*x15400*x15407))+((r21*x15399))+((sj3*x15405))+x15410);
evalcond[8]=((((-1.0)*x15402))+(((-1.0)*x15401*x15411))+x15398+((x15399*x15407))+((r21*x15400))+((cj3*x15405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15412=cj5*cj5;
IkReal x15413=(cj3*r20);
IkReal x15414=(r21*sj3);
IkReal x15415=((1.0)*cj3);
IkReal x15416=(r01*r21);
IkReal x15417=(r01*sj3);
IkReal x15418=(r00*sj5);
IkReal x15419=(cj5*r01*sj5);
IkReal x15420=((1.0)*x15412);
CheckValue<IkReal> x15421=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x15415))+((cj3*x15412*x15416))+(((-1.0)*r00*x15413*x15420))+((x15413*x15419))+((cj3*cj5*r21*x15418))+(((-1.0)*x15415*x15416)))),-1);
if(!x15421.valid){
continue;
}
CheckValue<IkReal> x15422 = IKatan2WithCheck(IkReal((((cj5*r22*x15417))+((r22*sj3*x15418)))),IkReal(((((-1.0)*r00*x15414*x15420))+(((-1.0)*r20*x15417*x15420))+((r00*x15414))+(((-1.0)*cj5*r20*sj3*x15418))+((x15414*x15419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15421.value)))+(x15422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15423=IKsin(j4);
IkReal x15424=IKcos(j4);
IkReal x15425=(cj2*sj1);
IkReal x15426=(cj1*sj2);
IkReal x15427=(r11*sj5);
IkReal x15428=(cj5*r10);
IkReal x15429=(sj1*sj2);
IkReal x15430=(cj5*r01);
IkReal x15431=(cj5*r00);
IkReal x15432=(cj3*sj5);
IkReal x15433=(r21*sj5);
IkReal x15434=(cj1*cj2);
IkReal x15435=(cj5*sj3);
IkReal x15436=(sj3*sj5);
IkReal x15437=(r01*sj5);
IkReal x15438=(cj3*cj5);
IkReal x15439=(cj5*r20);
IkReal x15440=((1.0)*x15424);
IkReal x15441=((1.0)*x15423);
IkReal x15442=(cj3*x15424);
IkReal x15443=(sj3*x15424);
IkReal x15444=(cj3*x15423);
IkReal x15445=(x15426+x15425);
evalcond[0]=((((-1.0)*x15439*x15441))+(((-1.0)*r22*x15440))+((x15423*x15433)));
evalcond[1]=((((-1.0)*x15428*x15441))+(((-1.0)*r12*x15440))+((x15423*x15427)));
evalcond[2]=((1.0)+(((-1.0)*x15431*x15441))+((x15423*x15437))+(((-1.0)*r02*x15440)));
evalcond[3]=(((r01*x15424*x15432))+((sj3*x15430))+(((-1.0)*cj3*x15431*x15440))+((r02*x15444))+((r00*x15436)));
evalcond[4]=(((x15431*x15443))+(((-1.0)*r02*sj3*x15441))+((cj3*x15430))+(((-1.0)*r01*x15436*x15440))+((r00*x15432)));
evalcond[5]=(((r21*x15424*x15432))+((r21*x15435))+(((-1.0)*r20*x15438*x15440))+((r22*x15444))+x15445+((r20*x15436)));
evalcond[6]=(((r10*x15436))+((r12*x15444))+(((-1.0)*x15429))+((x15427*x15442))+((r11*x15435))+x15434+(((-1.0)*cj3*x15428*x15440)));
evalcond[7]=(((r10*x15432))+(((-1.0)*sj3*x15427*x15440))+((r11*x15438))+x15445+((x15428*x15443))+(((-1.0)*r12*sj3*x15441)));
evalcond[8]=(((r21*x15438))+(((-1.0)*sj3*x15433*x15440))+(((-1.0)*r22*sj3*x15441))+((r20*x15424*x15435))+(((-1.0)*x15434))+x15429+((r20*x15432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15446=((1.0)*cj5);
CheckValue<IkReal> x15447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15446))+(((-1.0)*r20*sj5)))),-1);
if(!x15447.valid){
continue;
}
CheckValue<IkReal> x15448 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15447.value)))+(x15448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15449=IKsin(j4);
IkReal x15450=IKcos(j4);
IkReal x15451=(cj2*sj1);
IkReal x15452=(cj1*sj2);
IkReal x15453=(r11*sj5);
IkReal x15454=(cj5*r10);
IkReal x15455=(sj1*sj2);
IkReal x15456=(cj5*r01);
IkReal x15457=(cj5*r00);
IkReal x15458=(cj3*sj5);
IkReal x15459=(r21*sj5);
IkReal x15460=(cj1*cj2);
IkReal x15461=(cj5*sj3);
IkReal x15462=(sj3*sj5);
IkReal x15463=(r01*sj5);
IkReal x15464=(cj3*cj5);
IkReal x15465=(cj5*r20);
IkReal x15466=((1.0)*x15450);
IkReal x15467=((1.0)*x15449);
IkReal x15468=(cj3*x15450);
IkReal x15469=(sj3*x15450);
IkReal x15470=(cj3*x15449);
IkReal x15471=(x15452+x15451);
evalcond[0]=(((x15449*x15459))+(((-1.0)*r22*x15466))+(((-1.0)*x15465*x15467)));
evalcond[1]=(((x15449*x15453))+(((-1.0)*x15454*x15467))+(((-1.0)*r12*x15466)));
evalcond[2]=((1.0)+((x15449*x15463))+(((-1.0)*x15457*x15467))+(((-1.0)*r02*x15466)));
evalcond[3]=(((r02*x15470))+((r01*x15450*x15458))+((sj3*x15456))+(((-1.0)*cj3*x15457*x15466))+((r00*x15462)));
evalcond[4]=(((cj3*x15456))+((r00*x15458))+((x15457*x15469))+(((-1.0)*r01*x15462*x15466))+(((-1.0)*r02*sj3*x15467)));
evalcond[5]=(((r22*x15470))+((r21*x15461))+((r21*x15450*x15458))+(((-1.0)*r20*x15464*x15466))+x15471+((r20*x15462)));
evalcond[6]=(((x15453*x15468))+((r12*x15470))+x15460+((r11*x15461))+((r10*x15462))+(((-1.0)*cj3*x15454*x15466))+(((-1.0)*x15455)));
evalcond[7]=(((x15454*x15469))+((r10*x15458))+(((-1.0)*sj3*x15453*x15466))+x15471+((r11*x15464))+(((-1.0)*r12*sj3*x15467)));
evalcond[8]=(((r20*x15458))+(((-1.0)*x15460))+(((-1.0)*sj3*x15459*x15466))+((r21*x15464))+x15455+((r20*x15450*x15461))+(((-1.0)*r22*sj3*x15467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15472 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15472.valid){
continue;
}
CheckValue<IkReal> x15473=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15472.value)+(((1.5707963267949)*(x15473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15474=IKsin(j4);
IkReal x15475=IKcos(j4);
IkReal x15476=(cj2*sj1);
IkReal x15477=(cj1*sj2);
IkReal x15478=(r11*sj5);
IkReal x15479=(cj5*r10);
IkReal x15480=(sj1*sj2);
IkReal x15481=(cj5*r01);
IkReal x15482=(cj5*r00);
IkReal x15483=(cj3*sj5);
IkReal x15484=(r21*sj5);
IkReal x15485=(cj1*cj2);
IkReal x15486=(cj5*sj3);
IkReal x15487=(sj3*sj5);
IkReal x15488=(r01*sj5);
IkReal x15489=(cj3*cj5);
IkReal x15490=(cj5*r20);
IkReal x15491=((1.0)*x15475);
IkReal x15492=((1.0)*x15474);
IkReal x15493=(cj3*x15475);
IkReal x15494=(sj3*x15475);
IkReal x15495=(cj3*x15474);
IkReal x15496=(x15476+x15477);
evalcond[0]=(((x15474*x15484))+(((-1.0)*r22*x15491))+(((-1.0)*x15490*x15492)));
evalcond[1]=((((-1.0)*x15479*x15492))+((x15474*x15478))+(((-1.0)*r12*x15491)));
evalcond[2]=((1.0)+(((-1.0)*x15482*x15492))+((x15474*x15488))+(((-1.0)*r02*x15491)));
evalcond[3]=(((r01*x15475*x15483))+((sj3*x15481))+((r02*x15495))+(((-1.0)*cj3*x15482*x15491))+((r00*x15487)));
evalcond[4]=((((-1.0)*r02*sj3*x15492))+((cj3*x15481))+(((-1.0)*r01*x15487*x15491))+((x15482*x15494))+((r00*x15483)));
evalcond[5]=(((r21*x15475*x15483))+((r21*x15486))+(((-1.0)*r20*x15489*x15491))+x15496+((r22*x15495))+((r20*x15487)));
evalcond[6]=(((r12*x15495))+((r10*x15487))+(((-1.0)*cj3*x15479*x15491))+((r11*x15486))+x15485+(((-1.0)*x15480))+((x15478*x15493)));
evalcond[7]=(((x15479*x15494))+((r10*x15483))+(((-1.0)*sj3*x15478*x15491))+(((-1.0)*r12*sj3*x15492))+((r11*x15489))+x15496);
evalcond[8]=(((r20*x15475*x15486))+((r21*x15489))+(((-1.0)*r22*sj3*x15492))+(((-1.0)*sj3*x15484*x15491))+x15480+(((-1.0)*x15485))+((r20*x15483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15497=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15497);
rxp1_1=(px*r21);
rxp1_2=(r11*x15497);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15498=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15498);
rxp1_1=(px*r21);
rxp1_2=(r11*x15498);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15499=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x15499))+((r11*sj5)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15499)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15500=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15500);
rxp1_1=(px*r21);
rxp1_2=(r11*x15500);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15501=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15501);
rxp1_1=(px*r21);
rxp1_2=(r11*x15501);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15502=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15502);
rxp1_1=(px*r21);
rxp1_2=(r11*x15502);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15503=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15503);
rxp1_1=(px*r21);
rxp1_2=(r11*x15503);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15506=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15506.valid){
continue;
}
IkReal x15504=x15506.value;
IkReal x15505=(sj0*x15504);
cj4array[0]=(((cj1*sj2*x15505))+((cj2*sj1*x15505)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15507=IKsin(j4);
IkReal x15508=IKcos(j4);
IkReal x15509=(cj5*r20);
IkReal x15510=(r21*sj5);
IkReal x15511=((1.0)*x15507);
IkReal x15512=((1.0)*x15508);
evalcond[0]=((-1.0)*r02*x15507);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15512)));
evalcond[2]=((((-1.0)*x15509*x15511))+((x15507*x15510)));
evalcond[3]=(((r11*sj5*x15507))+(((-1.0)*cj5*r10*x15511)));
evalcond[4]=(((x15508*x15509))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15510*x15512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15514=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15514.valid){
continue;
}
IkReal x15513=x15514.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15513))+((cj1*cj2*x15513)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15515=IKsin(j4);
IkReal x15516=IKcos(j4);
IkReal x15517=(r11*sj5);
IkReal x15518=((1.0)*sj0);
IkReal x15519=((1.0)*x15516);
IkReal x15520=((1.0)*cj5*x15515);
evalcond[0]=((-1.0)*r02*x15515);
evalcond[1]=((((-1.0)*r02*x15519))+(((-1.0)*x15518)));
evalcond[2]=((((-1.0)*r20*x15520))+((r21*sj5*x15515)));
evalcond[3]=(((x15515*x15517))+(((-1.0)*r10*x15520)));
evalcond[4]=((((-1.0)*x15517*x15519))+(((-1.0)*cj1*sj2*x15518))+((cj5*r10*x15516))+(((-1.0)*cj2*sj1*x15518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15521=IKPowWithIntegerCheck(r02,-1);
if(!x15521.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15521.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15522=IKsin(j4);
IkReal x15523=IKcos(j4);
IkReal x15524=((1.0)*sj0);
IkReal x15525=(cj5*x15523);
IkReal x15526=(sj5*x15522);
IkReal x15527=((1.0)*sj5*x15523);
IkReal x15528=((1.0)*cj5*x15522);
evalcond[0]=((-1.0)*r02*x15522);
evalcond[1]=((((-1.0)*r20*x15528))+((r21*x15526)));
evalcond[2]=((((-1.0)*r10*x15528))+((r11*x15526)));
evalcond[3]=((((-1.0)*r21*x15527))+((r20*x15525))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*r11*x15527))+((r10*x15525))+(((-1.0)*cj2*sj1*x15524))+(((-1.0)*cj1*sj2*x15524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15529=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15529);
rxp1_1=(px*r21);
rxp1_2=(r11*x15529);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15530=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15530);
rxp1_1=(px*r21);
rxp1_2=(r11*x15530);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15531=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15531);
rxp1_1=(px*r21);
rxp1_2=(r11*x15531);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15534=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15534.valid){
continue;
}
IkReal x15532=x15534.value;
IkReal x15533=(sj0*x15532);
cj4array[0]=(((cj1*sj2*x15533))+((cj2*sj1*x15533)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15535=IKsin(j4);
IkReal x15536=IKcos(j4);
IkReal x15537=(r21*sj5);
IkReal x15538=((1.0)*cj5*r20);
evalcond[0]=(r02*x15535);
evalcond[1]=((((-1.0)*r02*x15536))+(((-1.0)*sj0)));
evalcond[2]=(((x15535*x15537))+(((-1.0)*x15535*x15538)));
evalcond[3]=(((r11*sj5*x15535))+(((-1.0)*cj5*r10*x15535)));
evalcond[4]=(((x15536*x15537))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15536*x15538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15540=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15540.valid){
continue;
}
IkReal x15539=x15540.value;
cj4array[0]=(((cj1*cj2*x15539))+(((-1.0)*sj1*sj2*x15539)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15541=IKsin(j4);
IkReal x15542=IKcos(j4);
IkReal x15543=((1.0)*sj0);
IkReal x15544=((1.0)*cj5);
IkReal x15545=(sj5*x15541);
evalcond[0]=(r02*x15541);
evalcond[1]=((((-1.0)*x15543))+(((-1.0)*r02*x15542)));
evalcond[2]=(((r21*x15545))+(((-1.0)*r20*x15541*x15544)));
evalcond[3]=((((-1.0)*r10*x15541*x15544))+((r11*x15545)));
evalcond[4]=((((-1.0)*r10*x15542*x15544))+(((-1.0)*cj1*sj2*x15543))+(((-1.0)*cj2*sj1*x15543))+((r11*sj5*x15542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15546=IKPowWithIntegerCheck(r02,-1);
if(!x15546.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15546.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15547=IKsin(j4);
IkReal x15548=IKcos(j4);
IkReal x15549=((1.0)*cj1);
IkReal x15550=(r21*sj5);
IkReal x15551=((1.0)*cj5);
IkReal x15552=(r11*sj5);
evalcond[0]=(r02*x15547);
evalcond[1]=(((x15547*x15550))+(((-1.0)*r20*x15547*x15551)));
evalcond[2]=(((x15547*x15552))+(((-1.0)*r10*x15547*x15551)));
evalcond[3]=((((-1.0)*cj2*x15549))+((sj1*sj2))+(((-1.0)*r20*x15548*x15551))+((x15548*x15550)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x15548*x15551))+((x15548*x15552))+(((-1.0)*sj0*sj2*x15549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15553 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15553.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15553.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15554 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15554.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15554.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15555=((-1.0)*r10);
CheckValue<IkReal> x15557 = IKatan2WithCheck(IkReal(x15555),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15557.valid){
continue;
}
IkReal x15556=((-1.0)*(x15557.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15555);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15556;
IkReal gconst66=x15556;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15558=((-1.0)*r10);
CheckValue<IkReal> x15560 = IKatan2WithCheck(IkReal(x15558),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15560.valid){
continue;
}
IkReal x15559=((-1.0)*(x15560.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15558);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15559;
IkReal gconst66=x15559;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15561=((-1.0)*r10);
CheckValue<IkReal> x15563 = IKatan2WithCheck(IkReal(x15561),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15563.valid){
continue;
}
IkReal x15562=((-1.0)*(x15563.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15561);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15562;
IkReal gconst66=x15562;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15564=((1.0)*gconst67);
IkReal x15565=(cj1*cj2);
IkReal x15566=((1.0)*sj1*sj2);
CheckValue<IkReal> x15567=IKPowWithIntegerCheck(cj3,-1);
if(!x15567.valid){
continue;
}
CheckValue<IkReal> x15568=IKPowWithIntegerCheck(r02,-1);
if(!x15568.valid){
continue;
}
CheckValue<IkReal> x15569=IKPowWithIntegerCheck((((gconst68*r20*sj3))+(((-1.0)*r21*sj3*x15564))),-1);
if(!x15569.valid){
continue;
}
if( IKabs(((x15567.value)*(x15568.value)*((((cj0*x15565))+(((-1.0)*cj0*x15566)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15569.value)*(((((-1.0)*cj3*r20*x15564))+x15565+(((-1.0)*x15566))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15567.value)*(x15568.value)*((((cj0*x15565))+(((-1.0)*cj0*x15566))))))+IKsqr(((x15569.value)*(((((-1.0)*cj3*r20*x15564))+x15565+(((-1.0)*x15566))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15567.value)*(x15568.value)*((((cj0*x15565))+(((-1.0)*cj0*x15566))))), ((x15569.value)*(((((-1.0)*cj3*r20*x15564))+x15565+(((-1.0)*x15566))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15570=IKsin(j4);
IkReal x15571=IKcos(j4);
IkReal x15572=(sj1*sj2);
IkReal x15573=(gconst68*sj3);
IkReal x15574=(gconst67*r11);
IkReal x15575=(gconst67*sj3);
IkReal x15576=((1.0)*gconst68);
IkReal x15577=(cj2*sj1);
IkReal x15578=((1.0)*cj0);
IkReal x15579=((1.0)*sj0);
IkReal x15580=(cj3*gconst67);
IkReal x15581=(cj3*gconst68);
IkReal x15582=(cj1*sj2);
IkReal x15583=(gconst67*r21);
IkReal x15584=((1.0)*cj1*cj2);
IkReal x15585=(cj3*x15571);
IkReal x15586=((1.0)*x15571);
IkReal x15587=(r02*x15570);
evalcond[0]=((((-1.0)*r02*x15586))+(((-1.0)*x15579)));
evalcond[1]=((((-1.0)*r20*x15570*x15576))+((x15570*x15583)));
evalcond[2]=(cj0+(((-1.0)*r10*x15570*x15576))+((x15570*x15574)));
evalcond[3]=(((cj0*x15572))+(((-1.0)*cj1*cj2*x15578))+((cj3*x15587)));
evalcond[4]=((((-1.0)*x15578*x15582))+(((-1.0)*x15577*x15578))+(((-1.0)*sj3*x15587)));
evalcond[5]=(((r21*x15571*x15580))+((r21*x15573))+((r20*x15575))+x15577+x15582+(((-1.0)*r20*x15576*x15585)));
evalcond[6]=(((r20*x15571*x15573))+(((-1.0)*x15584))+(((-1.0)*r21*x15575*x15586))+x15572+((r20*x15580))+((r21*x15581)));
evalcond[7]=(((sj0*x15572))+((r10*x15575))+(((-1.0)*cj1*cj2*x15579))+((r11*x15573))+(((-1.0)*r10*x15576*x15585))+((x15574*x15585)));
evalcond[8]=(((r11*x15581))+((r10*x15580))+(((-1.0)*x15579*x15582))+(((-1.0)*x15577*x15579))+((r10*x15571*x15573))+(((-1.0)*sj3*x15574*x15586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15590=IKPowWithIntegerCheck(r02,-1);
if(!x15590.valid){
continue;
}
IkReal x15588=x15590.value;
IkReal x15589=((1.0)*cj0);
CheckValue<IkReal> x15591=IKPowWithIntegerCheck(sj3,-1);
if(!x15591.valid){
continue;
}
if( IKabs((x15588*(x15591.value)*(((((-1.0)*cj1*sj2*x15589))+(((-1.0)*cj2*sj1*x15589)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15588)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15588*(x15591.value)*(((((-1.0)*cj1*sj2*x15589))+(((-1.0)*cj2*sj1*x15589))))))+IKsqr(((-1.0)*sj0*x15588))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15588*(x15591.value)*(((((-1.0)*cj1*sj2*x15589))+(((-1.0)*cj2*sj1*x15589))))), ((-1.0)*sj0*x15588));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15592=IKsin(j4);
IkReal x15593=IKcos(j4);
IkReal x15594=(sj1*sj2);
IkReal x15595=(gconst68*sj3);
IkReal x15596=(gconst67*r11);
IkReal x15597=(gconst67*sj3);
IkReal x15598=((1.0)*gconst68);
IkReal x15599=(cj2*sj1);
IkReal x15600=((1.0)*cj0);
IkReal x15601=((1.0)*sj0);
IkReal x15602=(cj3*gconst67);
IkReal x15603=(cj3*gconst68);
IkReal x15604=(cj1*sj2);
IkReal x15605=(gconst67*r21);
IkReal x15606=((1.0)*cj1*cj2);
IkReal x15607=(cj3*x15593);
IkReal x15608=((1.0)*x15593);
IkReal x15609=(r02*x15592);
evalcond[0]=((((-1.0)*r02*x15608))+(((-1.0)*x15601)));
evalcond[1]=(((x15592*x15605))+(((-1.0)*r20*x15592*x15598)));
evalcond[2]=(cj0+((x15592*x15596))+(((-1.0)*r10*x15592*x15598)));
evalcond[3]=(((cj0*x15594))+(((-1.0)*cj1*cj2*x15600))+((cj3*x15609)));
evalcond[4]=((((-1.0)*x15600*x15604))+(((-1.0)*sj3*x15609))+(((-1.0)*x15599*x15600)));
evalcond[5]=(((r21*x15595))+((r20*x15597))+(((-1.0)*r20*x15598*x15607))+x15604+x15599+((r21*x15593*x15602)));
evalcond[6]=(((r20*x15593*x15595))+(((-1.0)*x15606))+(((-1.0)*r21*x15597*x15608))+((r20*x15602))+x15594+((r21*x15603)));
evalcond[7]=(((x15596*x15607))+((sj0*x15594))+(((-1.0)*r10*x15598*x15607))+((r11*x15595))+((r10*x15597))+(((-1.0)*cj1*cj2*x15601)));
evalcond[8]=((((-1.0)*x15601*x15604))+((r10*x15602))+((r10*x15593*x15595))+(((-1.0)*x15599*x15601))+((r11*x15603))+(((-1.0)*sj3*x15596*x15608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15611=IKPowWithIntegerCheck(r02,-1);
if(!x15611.valid){
continue;
}
IkReal x15610=x15611.value;
CheckValue<IkReal> x15612=IKPowWithIntegerCheck(cj3,-1);
if(!x15612.valid){
continue;
}
if( IKabs((x15610*(x15612.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15610)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15610*(x15612.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15610))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15610*(x15612.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15610));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15613=IKsin(j4);
IkReal x15614=IKcos(j4);
IkReal x15615=(sj1*sj2);
IkReal x15616=(gconst68*sj3);
IkReal x15617=(gconst67*r11);
IkReal x15618=(gconst67*sj3);
IkReal x15619=((1.0)*gconst68);
IkReal x15620=(cj2*sj1);
IkReal x15621=((1.0)*cj0);
IkReal x15622=((1.0)*sj0);
IkReal x15623=(cj3*gconst67);
IkReal x15624=(cj3*gconst68);
IkReal x15625=(cj1*sj2);
IkReal x15626=(gconst67*r21);
IkReal x15627=((1.0)*cj1*cj2);
IkReal x15628=(cj3*x15614);
IkReal x15629=((1.0)*x15614);
IkReal x15630=(r02*x15613);
evalcond[0]=((((-1.0)*x15622))+(((-1.0)*r02*x15629)));
evalcond[1]=((((-1.0)*r20*x15613*x15619))+((x15613*x15626)));
evalcond[2]=(cj0+(((-1.0)*r10*x15613*x15619))+((x15613*x15617)));
evalcond[3]=(((cj3*x15630))+((cj0*x15615))+(((-1.0)*cj1*cj2*x15621)));
evalcond[4]=((((-1.0)*x15620*x15621))+(((-1.0)*sj3*x15630))+(((-1.0)*x15621*x15625)));
evalcond[5]=(((r21*x15616))+x15625+x15620+((r20*x15618))+((r21*x15614*x15623))+(((-1.0)*r20*x15619*x15628)));
evalcond[6]=(((r21*x15624))+((r20*x15614*x15616))+(((-1.0)*x15627))+x15615+((r20*x15623))+(((-1.0)*r21*x15618*x15629)));
evalcond[7]=(((sj0*x15615))+((r11*x15616))+((r10*x15618))+(((-1.0)*cj1*cj2*x15622))+((x15617*x15628))+(((-1.0)*r10*x15619*x15628)));
evalcond[8]=((((-1.0)*x15620*x15622))+((r10*x15614*x15616))+(((-1.0)*x15622*x15625))+(((-1.0)*sj3*x15617*x15629))+((r11*x15624))+((r10*x15623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15631=((-1.0)*r10);
CheckValue<IkReal> x15632 = IKatan2WithCheck(IkReal(x15631),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15632.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15632.value))));
IkReal gconst70=x15631;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15633 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15633.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15633.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15634=((-1.0)*r10);
IkReal x15635=((-1.0)*r11);
CheckValue<IkReal> x15637 = IKatan2WithCheck(IkReal(x15634),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15637.valid){
continue;
}
IkReal x15636=((1.0)*(x15637.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15634);
rxp1_1=(px*r21);
rxp1_2=(px*x15635);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15636)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15636)));
IkReal gconst70=x15634;
IkReal gconst71=x15635;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15638=((-1.0)*r10);
IkReal x15639=((-1.0)*r11);
CheckValue<IkReal> x15641 = IKatan2WithCheck(IkReal(x15638),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15641.valid){
continue;
}
IkReal x15640=((1.0)*(x15641.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15638);
rxp1_1=(px*r21);
rxp1_2=(px*x15639);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15640)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15640)));
IkReal gconst70=x15638;
IkReal gconst71=x15639;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15642=((-1.0)*r10);
IkReal x15643=((-1.0)*r11);
CheckValue<IkReal> x15645 = IKatan2WithCheck(IkReal(x15642),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15645.valid){
continue;
}
IkReal x15644=((1.0)*(x15645.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15642);
rxp1_1=(px*r21);
rxp1_2=(px*x15643);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15644)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15644)));
IkReal gconst70=x15642;
IkReal gconst71=x15643;
IkReal x15646=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15646))+(((-1.0)*r11*r20*x15646)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15647=((1.0)*r21);
IkReal x15648=(cj1*cj2);
IkReal x15649=((1.0)*sj1*sj2);
CheckValue<IkReal> x15650=IKPowWithIntegerCheck(cj3,-1);
if(!x15650.valid){
continue;
}
CheckValue<IkReal> x15651=IKPowWithIntegerCheck(r02,-1);
if(!x15651.valid){
continue;
}
CheckValue<IkReal> x15652=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15647))+((gconst71*r20*sj3))),-1);
if(!x15652.valid){
continue;
}
if( IKabs(((x15650.value)*(x15651.value)*((((cj0*x15648))+(((-1.0)*cj0*x15649)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15652.value)*((x15648+(((-1.0)*x15649))+(((-1.0)*cj3*gconst70*r20))+(((-1.0)*cj3*gconst71*x15647)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15650.value)*(x15651.value)*((((cj0*x15648))+(((-1.0)*cj0*x15649))))))+IKsqr(((x15652.value)*((x15648+(((-1.0)*x15649))+(((-1.0)*cj3*gconst70*r20))+(((-1.0)*cj3*gconst71*x15647))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15650.value)*(x15651.value)*((((cj0*x15648))+(((-1.0)*cj0*x15649))))), ((x15652.value)*((x15648+(((-1.0)*x15649))+(((-1.0)*cj3*gconst70*r20))+(((-1.0)*cj3*gconst71*x15647))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15653=IKsin(j4);
IkReal x15654=IKcos(j4);
IkReal x15655=(cj3*gconst70);
IkReal x15656=(sj1*sj2);
IkReal x15657=((1.0)*gconst71);
IkReal x15658=(gconst71*sj3);
IkReal x15659=(cj2*sj1);
IkReal x15660=((1.0)*sj0);
IkReal x15661=(gconst70*r11);
IkReal x15662=(gconst70*sj3);
IkReal x15663=((1.0)*cj0);
IkReal x15664=(cj3*gconst71);
IkReal x15665=(cj1*sj2);
IkReal x15666=((1.0)*cj1*cj2);
IkReal x15667=(r21*x15654);
IkReal x15668=(r10*x15654);
IkReal x15669=((1.0)*x15654);
IkReal x15670=(r02*x15653);
IkReal x15671=(r20*x15654);
evalcond[0]=((((-1.0)*x15660))+(((-1.0)*r02*x15669)));
evalcond[1]=(((gconst70*r21*x15653))+(((-1.0)*r20*x15653*x15657)));
evalcond[2]=((((-1.0)*r10*x15653*x15657))+cj0+((x15653*x15661)));
evalcond[3]=(((cj3*x15670))+(((-1.0)*cj1*cj2*x15663))+((cj0*x15656)));
evalcond[4]=((((-1.0)*sj3*x15670))+(((-1.0)*x15659*x15663))+(((-1.0)*x15663*x15665)));
evalcond[5]=((((-1.0)*cj3*x15657*x15671))+((x15655*x15667))+((r20*x15662))+x15659+x15665+((r21*x15658)));
evalcond[6]=((((-1.0)*x15666))+((x15658*x15671))+x15656+((r21*x15664))+(((-1.0)*x15662*x15667))+((r20*x15655)));
evalcond[7]=(((r11*x15654*x15655))+(((-1.0)*cj3*x15657*x15668))+((r10*x15662))+((r11*x15658))+(((-1.0)*cj1*cj2*x15660))+((sj0*x15656)));
evalcond[8]=(((r10*x15655))+((x15658*x15668))+((r11*x15664))+(((-1.0)*sj3*x15661*x15669))+(((-1.0)*x15659*x15660))+(((-1.0)*x15660*x15665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15674=IKPowWithIntegerCheck(r02,-1);
if(!x15674.valid){
continue;
}
IkReal x15672=x15674.value;
IkReal x15673=((1.0)*cj0);
CheckValue<IkReal> x15675=IKPowWithIntegerCheck(sj3,-1);
if(!x15675.valid){
continue;
}
if( IKabs((x15672*(x15675.value)*(((((-1.0)*cj1*sj2*x15673))+(((-1.0)*cj2*sj1*x15673)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15672)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15672*(x15675.value)*(((((-1.0)*cj1*sj2*x15673))+(((-1.0)*cj2*sj1*x15673))))))+IKsqr(((-1.0)*sj0*x15672))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15672*(x15675.value)*(((((-1.0)*cj1*sj2*x15673))+(((-1.0)*cj2*sj1*x15673))))), ((-1.0)*sj0*x15672));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15676=IKsin(j4);
IkReal x15677=IKcos(j4);
IkReal x15678=(cj3*gconst70);
IkReal x15679=(sj1*sj2);
IkReal x15680=((1.0)*gconst71);
IkReal x15681=(gconst71*sj3);
IkReal x15682=(cj2*sj1);
IkReal x15683=((1.0)*sj0);
IkReal x15684=(gconst70*r11);
IkReal x15685=(gconst70*sj3);
IkReal x15686=((1.0)*cj0);
IkReal x15687=(cj3*gconst71);
IkReal x15688=(cj1*sj2);
IkReal x15689=((1.0)*cj1*cj2);
IkReal x15690=(r21*x15677);
IkReal x15691=(r10*x15677);
IkReal x15692=((1.0)*x15677);
IkReal x15693=(r02*x15676);
IkReal x15694=(r20*x15677);
evalcond[0]=((((-1.0)*r02*x15692))+(((-1.0)*x15683)));
evalcond[1]=((((-1.0)*r20*x15676*x15680))+((gconst70*r21*x15676)));
evalcond[2]=((((-1.0)*r10*x15676*x15680))+cj0+((x15676*x15684)));
evalcond[3]=(((cj3*x15693))+((cj0*x15679))+(((-1.0)*cj1*cj2*x15686)));
evalcond[4]=((((-1.0)*x15686*x15688))+(((-1.0)*x15682*x15686))+(((-1.0)*sj3*x15693)));
evalcond[5]=(((r20*x15685))+(((-1.0)*cj3*x15680*x15694))+x15688+x15682+((x15678*x15690))+((r21*x15681)));
evalcond[6]=((((-1.0)*x15685*x15690))+((r20*x15678))+x15679+((x15681*x15694))+(((-1.0)*x15689))+((r21*x15687)));
evalcond[7]=(((r10*x15685))+(((-1.0)*cj3*x15680*x15691))+((sj0*x15679))+((r11*x15681))+(((-1.0)*cj1*cj2*x15683))+((r11*x15677*x15678)));
evalcond[8]=(((r10*x15678))+(((-1.0)*x15683*x15688))+((r11*x15687))+((x15681*x15691))+(((-1.0)*sj3*x15684*x15692))+(((-1.0)*x15682*x15683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15696=IKPowWithIntegerCheck(r02,-1);
if(!x15696.valid){
continue;
}
IkReal x15695=x15696.value;
CheckValue<IkReal> x15697=IKPowWithIntegerCheck(cj3,-1);
if(!x15697.valid){
continue;
}
if( IKabs((x15695*(x15697.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15695)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15695*(x15697.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15695))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15695*(x15697.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15695));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15698=IKsin(j4);
IkReal x15699=IKcos(j4);
IkReal x15700=(cj3*gconst70);
IkReal x15701=(sj1*sj2);
IkReal x15702=((1.0)*gconst71);
IkReal x15703=(gconst71*sj3);
IkReal x15704=(cj2*sj1);
IkReal x15705=((1.0)*sj0);
IkReal x15706=(gconst70*r11);
IkReal x15707=(gconst70*sj3);
IkReal x15708=((1.0)*cj0);
IkReal x15709=(cj3*gconst71);
IkReal x15710=(cj1*sj2);
IkReal x15711=((1.0)*cj1*cj2);
IkReal x15712=(r21*x15699);
IkReal x15713=(r10*x15699);
IkReal x15714=((1.0)*x15699);
IkReal x15715=(r02*x15698);
IkReal x15716=(r20*x15699);
evalcond[0]=((((-1.0)*x15705))+(((-1.0)*r02*x15714)));
evalcond[1]=((((-1.0)*r20*x15698*x15702))+((gconst70*r21*x15698)));
evalcond[2]=(((x15698*x15706))+cj0+(((-1.0)*r10*x15698*x15702)));
evalcond[3]=(((cj0*x15701))+(((-1.0)*cj1*cj2*x15708))+((cj3*x15715)));
evalcond[4]=((((-1.0)*x15704*x15708))+(((-1.0)*sj3*x15715))+(((-1.0)*x15708*x15710)));
evalcond[5]=(((r20*x15707))+(((-1.0)*cj3*x15702*x15716))+((x15700*x15712))+x15704+x15710+((r21*x15703)));
evalcond[6]=((((-1.0)*x15711))+((r20*x15700))+((x15703*x15716))+x15701+((r21*x15709))+(((-1.0)*x15707*x15712)));
evalcond[7]=(((r11*x15703))+((sj0*x15701))+(((-1.0)*cj3*x15702*x15713))+(((-1.0)*cj1*cj2*x15705))+((r10*x15707))+((r11*x15699*x15700)));
evalcond[8]=(((r11*x15709))+(((-1.0)*x15704*x15705))+((x15703*x15713))+((r10*x15700))+(((-1.0)*sj3*x15706*x15714))+(((-1.0)*x15705*x15710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15718=IKPowWithIntegerCheck(r02,-1);
if(!x15718.valid){
continue;
}
IkReal x15717=x15718.value;
CheckValue<IkReal> x15719=IKPowWithIntegerCheck(cj3,-1);
if(!x15719.valid){
continue;
}
if( IKabs((x15717*(x15719.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15717)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15717*(x15719.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15717))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15717*(x15719.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15717));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15720=IKsin(j4);
IkReal x15721=IKcos(j4);
IkReal x15722=(cj5*r10);
IkReal x15723=(sj1*sj2);
IkReal x15724=(cj5*sj3);
IkReal x15725=(r11*sj5);
IkReal x15726=(cj3*cj5);
IkReal x15727=(cj3*sj5);
IkReal x15728=(r21*sj5);
IkReal x15729=(cj2*sj1);
IkReal x15730=((1.0)*sj0);
IkReal x15731=((1.0)*cj0);
IkReal x15732=(sj3*sj5);
IkReal x15733=(cj1*sj2);
IkReal x15734=((1.0)*cj1*cj2);
IkReal x15735=((1.0)*x15720);
IkReal x15736=(r20*x15721);
IkReal x15737=(cj3*x15721);
IkReal x15738=(sj3*x15721);
evalcond[0]=((((-1.0)*r02*x15721))+(((-1.0)*x15730)));
evalcond[1]=(((x15720*x15728))+(((-1.0)*cj5*r20*x15735)));
evalcond[2]=(cj0+(((-1.0)*x15722*x15735))+((x15720*x15725)));
evalcond[3]=(((cj3*r02*x15720))+((cj0*x15723))+(((-1.0)*cj1*cj2*x15731)));
evalcond[4]=((((-1.0)*x15731*x15733))+(((-1.0)*r02*sj3*x15735))+(((-1.0)*x15729*x15731)));
evalcond[5]=(((r21*x15721*x15727))+((r20*x15732))+((r21*x15724))+(((-1.0)*x15726*x15736))+x15733+x15729);
evalcond[6]=((((-1.0)*x15734))+((x15724*x15736))+((r20*x15727))+(((-1.0)*x15728*x15738))+((r21*x15726))+x15723);
evalcond[7]=((((-1.0)*x15722*x15737))+((r11*x15724))+(((-1.0)*cj1*cj2*x15730))+((sj0*x15723))+((x15725*x15737))+((r10*x15732)));
evalcond[8]=(((x15722*x15738))+((r11*x15726))+(((-1.0)*x15725*x15738))+(((-1.0)*x15730*x15733))+((r10*x15727))+(((-1.0)*x15729*x15730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15739=((1.0)*sj3);
IkReal x15740=((1.0)*cj5);
CheckValue<IkReal> x15741=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15740))),-1);
if(!x15741.valid){
continue;
}
CheckValue<IkReal> x15742=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x15740))+((cj3*r21*sj5))),-1);
if(!x15742.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15741.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15742.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15739))+(((-1.0)*r20*sj5*x15739)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15741.value)))+IKsqr(((x15742.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15739))+(((-1.0)*r20*sj5*x15739))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15741.value)), ((x15742.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15739))+(((-1.0)*r20*sj5*x15739))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15743=IKsin(j4);
IkReal x15744=IKcos(j4);
IkReal x15745=(cj5*r10);
IkReal x15746=(sj1*sj2);
IkReal x15747=(cj5*sj3);
IkReal x15748=(r11*sj5);
IkReal x15749=(cj3*cj5);
IkReal x15750=(cj3*sj5);
IkReal x15751=(r21*sj5);
IkReal x15752=(cj2*sj1);
IkReal x15753=((1.0)*sj0);
IkReal x15754=((1.0)*cj0);
IkReal x15755=(sj3*sj5);
IkReal x15756=(cj1*sj2);
IkReal x15757=((1.0)*cj1*cj2);
IkReal x15758=((1.0)*x15743);
IkReal x15759=(r20*x15744);
IkReal x15760=(cj3*x15744);
IkReal x15761=(sj3*x15744);
evalcond[0]=((((-1.0)*r02*x15744))+(((-1.0)*x15753)));
evalcond[1]=(((x15743*x15751))+(((-1.0)*cj5*r20*x15758)));
evalcond[2]=(cj0+((x15743*x15748))+(((-1.0)*x15745*x15758)));
evalcond[3]=(((cj3*r02*x15743))+((cj0*x15746))+(((-1.0)*cj1*cj2*x15754)));
evalcond[4]=((((-1.0)*r02*sj3*x15758))+(((-1.0)*x15754*x15756))+(((-1.0)*x15752*x15754)));
evalcond[5]=(((r21*x15744*x15750))+((r20*x15755))+((r21*x15747))+x15752+x15756+(((-1.0)*x15749*x15759)));
evalcond[6]=((((-1.0)*x15757))+(((-1.0)*x15751*x15761))+((r20*x15750))+((r21*x15749))+x15746+((x15747*x15759)));
evalcond[7]=(((r10*x15755))+((r11*x15747))+((sj0*x15746))+(((-1.0)*cj1*cj2*x15753))+((x15748*x15760))+(((-1.0)*x15745*x15760)));
evalcond[8]=(((r10*x15750))+(((-1.0)*x15753*x15756))+((r11*x15749))+(((-1.0)*x15752*x15753))+((x15745*x15761))+(((-1.0)*x15748*x15761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15762=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15762.valid){
continue;
}
CheckValue<IkReal> x15763=IKPowWithIntegerCheck(r02,-1);
if(!x15763.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15762.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15763.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15762.value)))+IKsqr(((-1.0)*sj0*(x15763.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15762.value)), ((-1.0)*sj0*(x15763.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15764=IKsin(j4);
IkReal x15765=IKcos(j4);
IkReal x15766=(cj5*r10);
IkReal x15767=(sj1*sj2);
IkReal x15768=(cj5*sj3);
IkReal x15769=(r11*sj5);
IkReal x15770=(cj3*cj5);
IkReal x15771=(cj3*sj5);
IkReal x15772=(r21*sj5);
IkReal x15773=(cj2*sj1);
IkReal x15774=((1.0)*sj0);
IkReal x15775=((1.0)*cj0);
IkReal x15776=(sj3*sj5);
IkReal x15777=(cj1*sj2);
IkReal x15778=((1.0)*cj1*cj2);
IkReal x15779=((1.0)*x15764);
IkReal x15780=(r20*x15765);
IkReal x15781=(cj3*x15765);
IkReal x15782=(sj3*x15765);
evalcond[0]=((((-1.0)*r02*x15765))+(((-1.0)*x15774)));
evalcond[1]=(((x15764*x15772))+(((-1.0)*cj5*r20*x15779)));
evalcond[2]=(cj0+((x15764*x15769))+(((-1.0)*x15766*x15779)));
evalcond[3]=(((cj0*x15767))+(((-1.0)*cj1*cj2*x15775))+((cj3*r02*x15764)));
evalcond[4]=((((-1.0)*x15773*x15775))+(((-1.0)*r02*sj3*x15779))+(((-1.0)*x15775*x15777)));
evalcond[5]=(((r21*x15768))+((r21*x15765*x15771))+((r20*x15776))+x15777+x15773+(((-1.0)*x15770*x15780)));
evalcond[6]=(((r21*x15770))+((x15768*x15780))+(((-1.0)*x15772*x15782))+(((-1.0)*x15778))+((r20*x15771))+x15767);
evalcond[7]=(((r10*x15776))+((x15769*x15781))+(((-1.0)*x15766*x15781))+((sj0*x15767))+(((-1.0)*cj1*cj2*x15774))+((r11*x15768)));
evalcond[8]=(((r10*x15771))+(((-1.0)*x15773*x15774))+((x15766*x15782))+(((-1.0)*x15769*x15782))+((r11*x15770))+(((-1.0)*x15774*x15777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15783=((1.0)*sj0);
IkReal x15784=((1.0)*cj0);
CheckValue<IkReal> x15785 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15784))+(((-1.0)*r12*x15783)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x15783))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15785.valid){
continue;
}
CheckValue<IkReal> x15786=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15785.value)+(((1.5707963267949)*(x15786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15787=IKsin(j4);
IkReal x15788=IKcos(j4);
IkReal x15789=(r11*sj5);
IkReal x15790=(cj5*r10);
IkReal x15791=(sj1*sj2);
IkReal x15792=(cj5*sj3);
IkReal x15793=((1.0)*sj0);
IkReal x15794=(cj3*cj5);
IkReal x15795=(cj3*sj5);
IkReal x15796=(r21*sj5);
IkReal x15797=(cj2*sj1);
IkReal x15798=(sj3*sj5);
IkReal x15799=(r01*sj5);
IkReal x15800=((1.0)*cj0);
IkReal x15801=(cj1*sj2);
IkReal x15802=((1.0)*x15788);
IkReal x15803=((1.0)*x15787);
IkReal x15804=(cj3*x15788);
IkReal x15805=((1.0)*cj1*cj2);
IkReal x15806=(cj3*x15787);
evalcond[0]=((((-1.0)*cj5*r20*x15803))+((x15787*x15796))+(((-1.0)*r22*x15802)));
evalcond[1]=((((-1.0)*r12*x15802))+cj0+(((-1.0)*x15790*x15803))+((x15787*x15789)));
evalcond[2]=((((-1.0)*cj5*r00*x15803))+(((-1.0)*x15793))+((x15787*x15799))+(((-1.0)*r02*x15802)));
evalcond[3]=(((r20*x15798))+(((-1.0)*r20*x15794*x15802))+((r21*x15792))+x15797+((r22*x15806))+x15801+((r21*x15788*x15795)));
evalcond[4]=(((r20*x15788*x15792))+(((-1.0)*x15805))+(((-1.0)*sj3*x15796*x15802))+((r20*x15795))+((r21*x15794))+x15791+(((-1.0)*r22*sj3*x15803)));
evalcond[5]=((((-1.0)*r00*x15794*x15802))+((cj0*x15791))+((r01*x15788*x15795))+((r01*x15792))+((r02*x15806))+((r00*x15798))+(((-1.0)*cj1*cj2*x15800)));
evalcond[6]=(((r12*x15806))+((r11*x15792))+((x15789*x15804))+(((-1.0)*cj1*cj2*x15793))+((r10*x15798))+(((-1.0)*cj3*x15790*x15802))+((sj0*x15791)));
evalcond[7]=((((-1.0)*x15797*x15800))+(((-1.0)*x15800*x15801))+((r00*x15788*x15792))+(((-1.0)*r02*sj3*x15803))+((r01*x15794))+((r00*x15795))+(((-1.0)*r01*x15798*x15802)));
evalcond[8]=(((r11*x15794))+((sj3*x15788*x15790))+(((-1.0)*x15793*x15797))+((r10*x15795))+(((-1.0)*x15793*x15801))+(((-1.0)*r12*sj3*x15803))+(((-1.0)*sj3*x15789*x15802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15807=((1.0)*cj5);
CheckValue<IkReal> x15808 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x15807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15808.valid){
continue;
}
CheckValue<IkReal> x15809=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x15807))+(((-1.0)*r10*sj5)))),-1);
if(!x15809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15808.value)+(((1.5707963267949)*(x15809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15810=IKsin(j4);
IkReal x15811=IKcos(j4);
IkReal x15812=(r11*sj5);
IkReal x15813=(cj5*r10);
IkReal x15814=(sj1*sj2);
IkReal x15815=(cj5*sj3);
IkReal x15816=((1.0)*sj0);
IkReal x15817=(cj3*cj5);
IkReal x15818=(cj3*sj5);
IkReal x15819=(r21*sj5);
IkReal x15820=(cj2*sj1);
IkReal x15821=(sj3*sj5);
IkReal x15822=(r01*sj5);
IkReal x15823=((1.0)*cj0);
IkReal x15824=(cj1*sj2);
IkReal x15825=((1.0)*x15811);
IkReal x15826=((1.0)*x15810);
IkReal x15827=(cj3*x15811);
IkReal x15828=((1.0)*cj1*cj2);
IkReal x15829=(cj3*x15810);
evalcond[0]=((((-1.0)*cj5*r20*x15826))+(((-1.0)*r22*x15825))+((x15810*x15819)));
evalcond[1]=(cj0+(((-1.0)*x15813*x15826))+(((-1.0)*r12*x15825))+((x15810*x15812)));
evalcond[2]=((((-1.0)*r02*x15825))+(((-1.0)*x15816))+((x15810*x15822))+(((-1.0)*cj5*r00*x15826)));
evalcond[3]=(((r20*x15821))+(((-1.0)*r20*x15817*x15825))+((r22*x15829))+((r21*x15811*x15818))+((r21*x15815))+x15820+x15824);
evalcond[4]=(((r20*x15811*x15815))+(((-1.0)*x15828))+(((-1.0)*r22*sj3*x15826))+((r21*x15817))+((r20*x15818))+x15814+(((-1.0)*sj3*x15819*x15825)));
evalcond[5]=(((r00*x15821))+((r02*x15829))+((r01*x15811*x15818))+((cj0*x15814))+(((-1.0)*cj1*cj2*x15823))+(((-1.0)*r00*x15817*x15825))+((r01*x15815)));
evalcond[6]=(((r11*x15815))+(((-1.0)*cj1*cj2*x15816))+((sj0*x15814))+((x15812*x15827))+((r10*x15821))+(((-1.0)*cj3*x15813*x15825))+((r12*x15829)));
evalcond[7]=((((-1.0)*x15823*x15824))+(((-1.0)*r02*sj3*x15826))+((r00*x15811*x15815))+(((-1.0)*r01*x15821*x15825))+((r00*x15818))+((r01*x15817))+(((-1.0)*x15820*x15823)));
evalcond[8]=(((r11*x15817))+((r10*x15818))+((sj3*x15811*x15813))+(((-1.0)*x15816*x15824))+(((-1.0)*x15816*x15820))+(((-1.0)*r12*sj3*x15826))+(((-1.0)*sj3*x15812*x15825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15830=((1.0)*cj5);
CheckValue<IkReal> x15831 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15831.valid){
continue;
}
CheckValue<IkReal> x15832=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15830)))),-1);
if(!x15832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15831.value)+(((1.5707963267949)*(x15832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15833=IKsin(j4);
IkReal x15834=IKcos(j4);
IkReal x15835=(r11*sj5);
IkReal x15836=(cj5*r10);
IkReal x15837=(sj1*sj2);
IkReal x15838=(cj5*sj3);
IkReal x15839=((1.0)*sj0);
IkReal x15840=(cj3*cj5);
IkReal x15841=(cj3*sj5);
IkReal x15842=(r21*sj5);
IkReal x15843=(cj2*sj1);
IkReal x15844=(sj3*sj5);
IkReal x15845=(r01*sj5);
IkReal x15846=((1.0)*cj0);
IkReal x15847=(cj1*sj2);
IkReal x15848=((1.0)*x15834);
IkReal x15849=((1.0)*x15833);
IkReal x15850=(cj3*x15834);
IkReal x15851=((1.0)*cj1*cj2);
IkReal x15852=(cj3*x15833);
evalcond[0]=((((-1.0)*cj5*r20*x15849))+((x15833*x15842))+(((-1.0)*r22*x15848)));
evalcond[1]=(cj0+(((-1.0)*r12*x15848))+(((-1.0)*x15836*x15849))+((x15833*x15835)));
evalcond[2]=(((x15833*x15845))+(((-1.0)*cj5*r00*x15849))+(((-1.0)*x15839))+(((-1.0)*r02*x15848)));
evalcond[3]=(((r21*x15834*x15841))+(((-1.0)*r20*x15840*x15848))+((r20*x15844))+((r22*x15852))+x15843+x15847+((r21*x15838)));
evalcond[4]=((((-1.0)*sj3*x15842*x15848))+((r20*x15841))+((r20*x15834*x15838))+((r21*x15840))+(((-1.0)*r22*sj3*x15849))+(((-1.0)*x15851))+x15837);
evalcond[5]=((((-1.0)*r00*x15840*x15848))+((r00*x15844))+((cj0*x15837))+(((-1.0)*cj1*cj2*x15846))+((r01*x15834*x15841))+((r02*x15852))+((r01*x15838)));
evalcond[6]=(((r12*x15852))+(((-1.0)*cj3*x15836*x15848))+((sj0*x15837))+((r11*x15838))+((r10*x15844))+(((-1.0)*cj1*cj2*x15839))+((x15835*x15850)));
evalcond[7]=(((r01*x15840))+(((-1.0)*r02*sj3*x15849))+((r00*x15841))+(((-1.0)*x15846*x15847))+(((-1.0)*r01*x15844*x15848))+(((-1.0)*x15843*x15846))+((r00*x15834*x15838)));
evalcond[8]=(((r11*x15840))+((sj3*x15834*x15836))+((r10*x15841))+(((-1.0)*r12*sj3*x15849))+(((-1.0)*sj3*x15835*x15848))+(((-1.0)*x15839*x15847))+(((-1.0)*x15839*x15843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15853=cj5*cj5;
IkReal x15854=r21*r21;
IkReal x15855=r20*r20;
IkReal x15856=(r20*r21);
IkReal x15857=((1.0)*cj3);
IkReal x15858=((1.0)*cj5);
IkReal x15859=(cj1*sj2);
IkReal x15860=(cj5*sj5);
IkReal x15861=(sj3*sj5);
IkReal x15862=(cj2*sj1);
IkReal x15863=(r21*sj5);
CheckValue<IkReal> x15864=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15853*x15855*x15857))+((cj3*x15853*x15854))+(((-1.0)*x15854*x15857))+(((2.0)*cj3*x15856*x15860))+(((-1.0)*x15857*(r22*r22))))),-1);
if(!x15864.valid){
continue;
}
CheckValue<IkReal> x15865 = IKatan2WithCheck(IkReal((((r22*x15862))+((cj5*r21*r22*sj3))+((r20*r22*x15861))+((r22*x15859)))),IkReal(((((-2.0)*sj3*x15853*x15856))+(((-1.0)*x15855*x15858*x15861))+(((-1.0)*r20*x15858*x15859))+((sj3*x15856))+((x15862*x15863))+((x15859*x15863))+(((-1.0)*r20*x15858*x15862))+((sj3*x15854*x15860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15864.value)))+(x15865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15866=IKsin(j4);
IkReal x15867=IKcos(j4);
IkReal x15868=(cj3*r21);
IkReal x15869=(r21*sj5);
IkReal x15870=(r20*sj5);
IkReal x15871=(cj5*r20);
IkReal x15872=((1.0)*x15867);
IkReal x15873=((1.0)*x15866);
evalcond[0]=(((x15866*x15869))+(((-1.0)*x15871*x15873))+(((-1.0)*r22*x15872)));
evalcond[1]=(((cj2*sj1))+((cj3*r22*x15866))+((sj5*x15867*x15868))+((cj5*r21*sj3))+(((-1.0)*cj3*x15871*x15872))+((cj1*sj2))+((sj3*x15870)));
evalcond[2]=(((cj5*x15868))+((cj3*x15870))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x15873))+(((-1.0)*sj3*x15869*x15872))+((sj3*x15867*x15871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15874=(cj5*sj4);
IkReal x15875=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x15874))+(((-1.0)*cj4*r02))+((r01*x15875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15874))+(((-1.0)*r11*x15875))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x15874))+(((-1.0)*cj4*r02))+((r01*x15875))))+IKsqr((((r10*x15874))+(((-1.0)*r11*x15875))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x15874))+(((-1.0)*cj4*r02))+((r01*x15875))), (((r10*x15874))+(((-1.0)*r11*x15875))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15876=IKcos(j0);
IkReal x15877=IKsin(j0);
IkReal x15878=(r02*sj4);
IkReal x15879=((1.0)*sj3);
IkReal x15880=(r12*sj4);
IkReal x15881=((0.21325)*cj2);
IkReal x15882=((1.0)*cj3);
IkReal x15883=((1.0)*sj2);
IkReal x15884=(r11*sj5);
IkReal x15885=(cj5*r01);
IkReal x15886=(cj5*r11);
IkReal x15887=(r00*sj5);
IkReal x15888=((1.0)*cj2);
IkReal x15889=(r10*sj5);
IkReal x15890=((1.0)*cj4);
IkReal x15891=(cj1*x15877);
IkReal x15892=(cj4*cj5*r00);
IkReal x15893=(cj1*x15876);
IkReal x15894=(cj4*cj5*r10);
IkReal x15895=(cj4*r01*sj5);
IkReal x15896=((0.21325)*sj1*sj2);
IkReal x15897=(sj1*x15876);
IkReal x15898=((1.0)*cj5*sj4);
IkReal x15899=(sj1*x15877);
evalcond[0]=(((sj4*x15884))+(((-1.0)*r10*x15898))+(((-1.0)*r12*x15890))+x15876);
evalcond[1]=((((-1.0)*r02*x15890))+((r01*sj4*sj5))+(((-1.0)*r00*x15898))+(((-1.0)*x15877)));
evalcond[2]=((((-0.08535)*x15885))+(((-0.08535)*x15887))+(((-0.11235)*x15877))+((x15881*x15893))+(((-1.0)*px))+(((-1.0)*x15876*x15896))+(((0.24365)*x15893)));
evalcond[3]=((((-0.08535)*x15886))+(((-0.08535)*x15889))+(((0.11235)*x15876))+((x15881*x15891))+(((-1.0)*py))+(((-1.0)*x15877*x15896))+(((0.24365)*x15891)));
evalcond[4]=((((-1.0)*x15882*x15892))+(((-1.0)*x15888*x15893))+((cj3*x15878))+((cj3*x15895))+((sj3*x15887))+((sj3*x15885))+((sj2*x15897)));
evalcond[5]=((((-1.0)*x15882*x15894))+(((-1.0)*x15888*x15891))+((cj3*x15880))+((sj3*x15886))+((sj3*x15889))+((sj2*x15899))+((cj3*cj4*x15884)));
evalcond[6]=((((-1.0)*x15878*x15879))+(((-1.0)*x15888*x15897))+((cj3*x15885))+((cj3*x15887))+((sj3*x15892))+(((-1.0)*x15883*x15893))+(((-1.0)*x15879*x15895)));
evalcond[7]=((((-1.0)*x15888*x15899))+((cj3*x15886))+((cj3*x15889))+(((-1.0)*cj4*x15879*x15884))+((sj3*x15894))+(((-1.0)*x15879*x15880))+(((-1.0)*x15883*x15891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15900=cj5*cj5;
IkReal x15901=r21*r21;
IkReal x15902=r20*r20;
IkReal x15903=(r20*r21);
IkReal x15904=(sj1*sj2);
IkReal x15905=(r21*sj5);
IkReal x15906=(cj1*cj2);
IkReal x15907=(cj5*r20);
IkReal x15908=(cj5*sj5);
IkReal x15909=(cj3*r22);
IkReal x15910=(sj3*x15901);
CheckValue<IkReal> x15911=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x15903*x15908))+((sj3*x15900*x15902))+(((-1.0)*x15900*x15910))+x15910)),-1);
if(!x15911.valid){
continue;
}
CheckValue<IkReal> x15912 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15906))+((r20*sj5*x15909))+((r22*x15904))+((cj5*r21*x15909)))),IkReal(((((-1.0)*x15905*x15906))+((x15904*x15905))+(((-1.0)*x15904*x15907))+((cj3*x15903))+(((-2.0)*cj3*x15900*x15903))+((cj3*x15901*x15908))+(((-1.0)*cj3*x15902*x15908))+((x15906*x15907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15911.value)))+(x15912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15913=IKsin(j4);
IkReal x15914=IKcos(j4);
IkReal x15915=(cj3*r21);
IkReal x15916=(r21*sj5);
IkReal x15917=(r20*sj5);
IkReal x15918=(cj5*r20);
IkReal x15919=((1.0)*x15914);
IkReal x15920=((1.0)*x15913);
evalcond[0]=((((-1.0)*x15918*x15920))+((x15913*x15916))+(((-1.0)*r22*x15919)));
evalcond[1]=(((cj2*sj1))+((sj3*x15917))+((cj5*r21*sj3))+((cj3*r22*x15913))+((cj1*sj2))+(((-1.0)*cj3*x15918*x15919))+((sj5*x15914*x15915)));
evalcond[2]=(((cj5*x15915))+(((-1.0)*sj3*x15916*x15919))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x15914*x15918))+(((-1.0)*r22*sj3*x15920))+((cj3*x15917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15921=(cj5*sj4);
IkReal x15922=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15922))+(((-1.0)*r00*x15921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15921))+(((-1.0)*r11*x15922))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15922))+(((-1.0)*r00*x15921))))+IKsqr((((r10*x15921))+(((-1.0)*r11*x15922))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15922))+(((-1.0)*r00*x15921))), (((r10*x15921))+(((-1.0)*r11*x15922))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15923=IKcos(j0);
IkReal x15924=IKsin(j0);
IkReal x15925=(r02*sj4);
IkReal x15926=((1.0)*sj3);
IkReal x15927=(r12*sj4);
IkReal x15928=((0.21325)*cj2);
IkReal x15929=((1.0)*cj3);
IkReal x15930=((1.0)*sj2);
IkReal x15931=(r11*sj5);
IkReal x15932=(cj5*r01);
IkReal x15933=(cj5*r11);
IkReal x15934=(r00*sj5);
IkReal x15935=((1.0)*cj2);
IkReal x15936=(r10*sj5);
IkReal x15937=((1.0)*cj4);
IkReal x15938=(cj1*x15924);
IkReal x15939=(cj4*cj5*r00);
IkReal x15940=(cj1*x15923);
IkReal x15941=(cj4*cj5*r10);
IkReal x15942=(cj4*r01*sj5);
IkReal x15943=((0.21325)*sj1*sj2);
IkReal x15944=(sj1*x15923);
IkReal x15945=((1.0)*cj5*sj4);
IkReal x15946=(sj1*x15924);
evalcond[0]=((((-1.0)*r12*x15937))+((sj4*x15931))+(((-1.0)*r10*x15945))+x15923);
evalcond[1]=((((-1.0)*r00*x15945))+((r01*sj4*sj5))+(((-1.0)*x15924))+(((-1.0)*r02*x15937)));
evalcond[2]=(((x15928*x15940))+(((0.24365)*x15940))+(((-1.0)*px))+(((-0.08535)*x15932))+(((-0.08535)*x15934))+(((-0.11235)*x15924))+(((-1.0)*x15923*x15943)));
evalcond[3]=((((0.24365)*x15938))+(((0.11235)*x15923))+(((-1.0)*py))+(((-0.08535)*x15933))+(((-0.08535)*x15936))+((x15928*x15938))+(((-1.0)*x15924*x15943)));
evalcond[4]=(((cj3*x15942))+((cj3*x15925))+(((-1.0)*x15935*x15940))+(((-1.0)*x15929*x15939))+((sj2*x15944))+((sj3*x15934))+((sj3*x15932)));
evalcond[5]=((((-1.0)*x15929*x15941))+(((-1.0)*x15935*x15938))+((cj3*x15927))+((sj2*x15946))+((cj3*cj4*x15931))+((sj3*x15936))+((sj3*x15933)));
evalcond[6]=((((-1.0)*x15930*x15940))+(((-1.0)*x15925*x15926))+(((-1.0)*x15926*x15942))+(((-1.0)*x15935*x15944))+((cj3*x15932))+((cj3*x15934))+((sj3*x15939)));
evalcond[7]=((((-1.0)*x15935*x15946))+((cj3*x15933))+((cj3*x15936))+(((-1.0)*x15930*x15938))+(((-1.0)*x15926*x15927))+(((-1.0)*cj4*x15926*x15931))+((sj3*x15941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur3 (a4e74b5ac9729e4e55da62188f40fd43)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
