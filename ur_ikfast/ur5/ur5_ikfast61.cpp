/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-08-02 12:02:57.793123
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "../include/ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.39225)*x0);
x13=((0.09465)*x0);
x14=((1.0)*x11);
x15=((0.09465)*x11);
x16=((0.0823)*x5);
x17=((0.0823)*x6);
x18=((1.0)*x9);
x19=((0.39225)*x11);
x20=((1.0)*x5);
x21=((0.425)*x1);
x22=((1.0)*x0);
x23=(x1*x3);
x24=(x2*x4);
x25=(x1*x2);
x26=(x3*x4);
x27=(x0*x10);
x28=(x0*x9);
x29=(x10*x14);
x30=(x22*x23);
x31=(x14*x23);
x32=(x25+x26);
x33=((((-1.0)*x24))+(((1.0)*x23)));
x34=(x32*x5);
x35=(x33*x6);
x36=((((-1.0)*x30))+((x0*x24)));
x37=((((-1.0)*x31))+((x11*x24)));
x38=(x22*((x25+x26)));
x39=(x14*((x25+x26)));
x40=(x37*x5);
x41=(x38*x6);
x42=(x39*x6);
x43=(((x6*(((((-1.0)*x26))+(((-1.0)*x25))))))+((x33*x5)));
x44=(x41+((x36*x5)));
x45=(x42+x40);
x46=(((x6*((x30+(((-1.0)*x22*x24))))))+((x38*x5)));
x47=(((x39*x5))+((x6*(((((-1.0)*x14*x24))+x31)))));
x48=(x45*x9);
eerot[0]=(((x7*(((((-1.0)*x29))+((x44*x9))))))+((x46*x8)));
eerot[1]=(((x46*x7))+((x8*(((((-1.0)*x18*x44))+x29)))));
eerot[2]=(((x10*(((((-1.0)*x41))+(((-1.0)*x20*x36))))))+(((-1.0)*x14*x9)));
IkReal x49=((1.0)*x13);
eetrans[0]=(((x5*(((((-1.0)*x26*x49))+(((-1.0)*x25*x49))))))+((x0*x21))+(((-1.0)*x12*x24))+((x10*(((((-1.0)*x17*x38))+(((-1.0)*x16*x36))))))+(((-0.10915)*x11))+((x12*x23))+(((-0.0823)*x11*x9))+((x6*(((((-1.0)*x23*x49))+((x13*x24)))))));
eerot[3]=(((x7*((x48+x27))))+((x47*x8)));
eerot[4]=(((x8*(((((-1.0)*x18*x45))+(((-1.0)*x10*x22))))))+((x47*x7)));
eerot[5]=(((x10*(((((-1.0)*x42))+(((-1.0)*x20*x37))))))+x28);
IkReal x50=((1.0)*x15);
eetrans[1]=(((x19*x23))+(((0.10915)*x0))+(((-1.0)*x19*x24))+((x11*x21))+((x6*(((((-1.0)*x23*x50))+((x15*x24))))))+((x10*(((((-1.0)*x17*x39))+(((-1.0)*x16*x37))))))+(((0.0823)*x28))+((x5*(((((-1.0)*x25*x50))+(((-1.0)*x26*x50)))))));
eerot[6]=(((x7*x9*((x35+x34))))+((x43*x8)));
eerot[7]=(((x8*x9*(((((-1.0)*x35))+(((-1.0)*x34))))))+((x43*x7)));
eerot[8]=(x10*(((((-1.0)*x35))+(((-1.0)*x20*x32)))));
eetrans[2]=((0.08916)+((x5*(((((-0.09465)*x23))+(((0.09465)*x24))))))+((x10*(((((-1.0)*x17*x33))+(((-1.0)*x16*x32))))))+((x6*(((((0.09465)*x25))+(((0.09465)*x26))))))+(((-0.425)*x4))+(((-0.39225)*x25))+(((-0.39225)*x26)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.0823)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.0823)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.08916)+pz+(((-0.0823)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x51=((1.0)*px);
IkReal x52=((1.0)*pz);
IkReal x53=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x53))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x52)));
rxp0_2=((((-1.0)*r10*x51))+((py*r00)));
rxp1_0=((((-1.0)*r21*x53))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x52)));
rxp1_2=((((-1.0)*r11*x51))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x53)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x52)));
rxp2_2=((((-1.0)*r12*x51))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x54=((0.1893)*npx);
IkReal x55=((0.1893)*npy);
IkReal x56=((0.09465)*r22);
IkReal x57=((0.09465)*r21);
IkReal x58=((-0.09465)*r20);
IkReal x59=((-1.0)*r20);
IkReal x60=((-1.0)*rxp0_2);
IkReal x61=((-0.09465)*r21);
IkReal x62=((-1.0)*r21);
IkReal x63=((-1.0)*rxp1_2);
IkReal x64=((-1.0)*npx);
IkReal x65=((-1.0)*r22);
IkReal x66=((-1.0)*npz);
matrixinvcoeffs[0]=x58;
matrixinvcoeffs[1]=x54;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x59;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x60;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x58;
matrixinvcoeffs[19]=x54;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x59;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x60;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x61;
matrixinvcoeffs[33]=x55;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x62;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x63;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x61;
matrixinvcoeffs[51]=x55;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x62;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x63;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x65;
matrixinvcoeffs[76]=x56;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x66;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x56;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x63;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x61;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x63;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x57;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x59;
matrixinvcoeffs[133]=x64;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x59;
matrixinvcoeffs[151]=x64;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x58;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x65;
matrixinvcoeffs[165]=x66;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x56;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x65;
matrixinvcoeffs[183]=x66;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x62;
matrixinvcoeffs[204]=x57;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x63;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x57;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x64;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x58;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x59;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x58;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x60;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x67=pz*pz;
IkReal x68=pp*pp;
IkReal x69=((0.1893)*pz);
IkReal x70=((1.7)*pz);
IkReal x71=(gclwh15_9*npx);
IkReal x72=(gclwh6_11*r21);
IkReal x73=(pp*r22);
IkReal x74=((0.00702803935125)*r21);
IkReal x75=(gclwh5_9*npz);
IkReal x76=(gclwh8_11*r20);
IkReal x77=(npy*pz);
IkReal x78=((3.60823078949063e-5)*r22);
IkReal x79=(gclwh14_3*rxp0_2);
IkReal x80=((0.000977833645875)*r20);
IkReal x81=(npz*pz);
IkReal x82=((0.000977833645875)*r21);
IkReal x83=(gclwh10_12*r22);
IkReal x84=(gclwh10_2*rxp2_2);
IkReal x85=((0.00076243651125)*rxp1_2);
IkReal x86=((0.00600991575645741)*r20);
IkReal x87=((0.154705425)*rxp1_2);
IkReal x88=((0.017917245)*r21);
IkReal x89=(gclwh6_11*rxp1_2);
IkReal x90=((0.3786)*rxp1_2);
IkReal x91=(gclwh7_0*rxp1_2);
IkReal x92=((0.7572)*rxp1_2);
IkReal x93=((0.154705425)*rxp2_2);
IkReal x94=((2.0)*gclwh11_10);
IkReal x95=(gclwh12_8*r21);
IkReal x96=((0.81725)*pp);
IkReal x97=(pp*pz);
IkReal x98=(gclwh14_2*r20);
IkReal x99=(pp*r21);
IkReal x100=((2.0)*gclwh4_11);
IkReal x101=(gclwh8_12*r20);
IkReal x102=(npx*pz);
IkReal x103=(gclwh14_8*rxp0_2);
IkReal x104=((0.1893)*rxp2_2);
IkReal x105=(gclwh5_9*rxp2_2);
IkReal x106=((0.020662095)*rxp1_2);
IkReal x107=((0.007321434238125)*r21);
IkReal x108=((1.6345)*pz);
IkReal x109=((0.0089586225)*pz);
IkReal x110=(gclwh13_0*r21);
IkReal x111=(gclwh5_9*r22);
IkReal x112=(gclwh11_10*r22);
IkReal x113=(gclwh11_13*r22);
IkReal x114=((1.0)*r21);
IkReal x115=((0.3786)*rxp0_2);
IkReal x116=(gclwh14_14*rxp0_2);
IkReal x117=(pp*r20);
IkReal x118=((0.00195566729175)*r22);
IkReal x119=(gclwh15_10*rxp0_2);
IkReal x120=(gclwh14_8*r20);
IkReal x121=(gclwh12_8*rxp1_2);
IkReal x122=((2.0)*gclwh9_10);
IkReal x123=((2.0)*gclwh15_10);
IkReal x124=(gclwh5_15*rxp2_2);
IkReal x125=((2.0)*gclwh13_10);
IkReal x126=((0.00702803935125)*r20);
IkReal x127=(gclwh13_9*r21);
IkReal x128=(gclwh5_0*r22);
IkReal x129=((0.01464286847625)*r20);
IkReal x130=(gclwh15_1*r20);
IkReal x131=((0.000977833645875)*r22);
IkReal x132=((0.0089586225)*r20);
IkReal x133=((2.0)*gclwh10_11);
IkReal x134=(gclwh5_10*r22);
IkReal x135=((2.0)*pp);
IkReal x136=(gclwh15_9*r20);
IkReal x137=(gclwh1_3*r20);
IkReal x138=((0.00195566729175)*r20);
IkReal x139=(gclwh4_3*rxp2_2);
IkReal x140=((0.2183)*gclwh13_15);
IkReal x141=((2.0)*gclwh7_10);
IkReal x142=(gclwh15_0*r20);
IkReal x143=(gclwh9_0*r20);
IkReal x144=(gclwh15_15*rxp0_2);
IkReal x145=(gclwh2_1*r21);
IkReal x146=((4.0)*gclwh11_10);
IkReal x147=((0.30941085)*rxp0_2);
IkReal x148=(gclwh9_0*rxp0_2);
IkReal x149=(gclwh5_10*rxp2_2);
IkReal x150=((0.2183)*gclwh12_14);
IkReal x151=((0.2183)*gclwh14_14);
IkReal x152=(gclwh4_2*rxp2_2);
IkReal x153=((0.03275)*pp);
IkReal x154=((0.006199575)*rxp1_2);
IkReal x155=(gclwh12_2*rxp1_2);
IkReal x156=(gclwh5_0*rxp2_2);
IkReal x157=((3.60823078949063e-5)*r21);
IkReal x158=(gclwh14_11*rxp0_2);
IkReal x159=((0.020662095)*rxp0_2);
IkReal x160=(gclwh14_8*npx);
IkReal x161=((4.0)*gclwh9_10);
IkReal x162=((0.00195566729175)*r21);
IkReal x163=(gclwh8_12*rxp0_2);
IkReal x164=((0.01464286847625)*r21);
IkReal x165=((0.3786)*rxp2_2);
IkReal x166=((0.01464286847625)*r22);
IkReal x167=(gclwh7_13*r21);
IkReal x168=((4.0)*gclwh7_10);
IkReal x169=(gclwh13_0*rxp1_2);
IkReal x170=((0.1893)*rxp1_2);
IkReal x171=(gclwh6_2*r21);
IkReal x172=(gclwh5_1*rxp2_2);
IkReal x173=(gclwh8_2*rxp0_2);
IkReal x174=(gclwh9_10*r20);
IkReal x175=((4.0)*pp);
IkReal x176=(gclwh15_1*rxp0_2);
IkReal x177=(gclwh9_13*r20);
IkReal x178=((0.0089586225)*r21);
IkReal x179=(gclwh0_0*r20);
IkReal x180=(gclwh10_11*r22);
IkReal x181=((2.0)*gclwh12_11);
IkReal x182=((0.0655)*pz);
IkReal x183=((0.006199575)*rxp2_2);
IkReal x184=(gclwh12_14*rxp1_2);
IkReal x185=(gclwh15_0*rxp0_2);
IkReal x186=((2.0)*npx);
IkReal x187=(gclwh9_13*rxp0_2);
IkReal x188=((1.0)*pp);
IkReal x189=((4.0)*gclwh10_11);
IkReal x190=(gclwh15_9*rxp0_2);
IkReal x191=((3.60823078949063e-5)*r20);
IkReal x192=((0.00702803935125)*r22);
IkReal x193=(gclwh8_2*r20);
IkReal x194=((0.2183)*gclwh5_15);
IkReal x195=(gclwh10_2*r22);
IkReal x196=(gclwh5_1*r22);
IkReal x197=(gclwh13_9*rxp1_2);
IkReal x198=((2.0)*gclwh5_10);
IkReal x199=((0.020662095)*rxp2_2);
IkReal x200=(gclwh4_8*r22);
IkReal x201=((0.017917245)*r20);
IkReal x202=(gclwh7_0*r21);
IkReal x203=((0.00600991575645741)*r21);
IkReal x204=(gclwh11_0*r22);
IkReal x205=(gclwh6_12*r21);
IkReal x206=((0.2183)*gclwh15_15);
IkReal x207=(gclwh11_0*rxp2_2);
IkReal x208=((0.2183)*gclwh4_14);
IkReal x209=(gclwh4_14*rxp2_2);
IkReal x210=(gclwh6_2*rxp1_2);
IkReal x211=((0.1893)*rxp0_2);
IkReal x212=(gclwh4_8*rxp2_2);
IkReal x213=((0.12699240901125)*rxp1_2);
IkReal x214=(gclwh14_2*rxp0_2);
IkReal x215=(gclwh4_3*r22);
IkReal x216=((0.1893)*pp);
IkReal x217=(gclwh13_15*rxp1_2);
IkReal x218=(gclwh1_2*r20);
IkReal x219=((2.0)*gclwh14_11);
IkReal x220=(gclwh4_11*r22);
IkReal x221=((0.020662095)*x116);
IkReal x222=(gclwh6_5*x82);
IkReal x223=(gclwh8_5*x80);
IkReal x224=(gclwh12_14*x106);
IkReal x225=(gclwh10_5*x131);
IkReal x226=(gclwh4_14*x199);
IkReal x227=((0.0089586225)*x72);
IkReal x228=(gclwh12_11*x170);
IkReal x229=((0.017917245)*x121);
IkReal x230=((0.017917245)*x212);
IkReal x231=(gclwh4_11*x104);
IkReal x232=((0.0089586225)*x76);
IkReal x233=((0.1893)*x158);
IkReal x234=((0.0089586225)*x180);
IkReal x235=((0.017917245)*x103);
IkReal x236=((0.017917245)*x105);
IkReal x237=((0.0089586225)*x112);
IkReal x238=((0.1893)*x119);
IkReal x239=((0.017917245)*x197);
IkReal x240=(gclwh9_10*x132);
IkReal x241=((0.017917245)*x190);
IkReal x242=(gclwh13_10*x170);
IkReal x243=(gclwh7_10*x178);
IkReal x244=(gclwh5_10*x104);
IkReal x245=((0.020662095)*x144);
IkReal x246=(gclwh7_7*x82);
IkReal x247=(gclwh9_7*x80);
IkReal x248=(gclwh13_15*x106);
IkReal x249=((0.020662095)*x124);
IkReal x250=(gclwh11_7*x131);
IkReal x251=(gclwh10_5*x199);
IkReal x252=(gclwh8_5*x159);
IkReal x253=(gclwh14_14*x80);
IkReal x254=(gclwh6_5*x106);
IkReal x255=(gclwh4_14*x131);
IkReal x256=(gclwh12_14*x82);
IkReal x257=(gclwh8_11*x211);
IkReal x258=((0.000847933619625)*x95);
IkReal x259=(gclwh12_11*x178);
IkReal x260=(gclwh10_11*x104);
IkReal x261=((0.0089586225)*x220);
IkReal x262=((0.000847933619625)*x200);
IkReal x263=((0.1893)*x89);
IkReal x264=(gclwh14_11*x132);
IkReal x265=((0.000847933619625)*x120);
IkReal x266=(gclwh9_10*x211);
IkReal x267=(gclwh13_10*x178);
IkReal x268=(gclwh11_10*x104);
IkReal x269=((0.000847933619625)*x136);
IkReal x270=((0.0089586225)*x134);
IkReal x271=((0.000847933619625)*x111);
IkReal x272=(gclwh7_10*x170);
IkReal x273=((0.000847933619625)*x127);
IkReal x274=(gclwh15_10*x132);
IkReal x275=(gclwh5_15*x131);
IkReal x276=(gclwh7_7*x106);
IkReal x277=(gclwh13_15*x82);
IkReal x278=(gclwh15_15*x80);
IkReal x279=(gclwh9_7*x159);
IkReal x280=(gclwh11_7*x199);
IkReal x281=((0.017917245)*x180);
IkReal x282=(gclwh14_11*x115);
IkReal x283=((0.017917245)*x76);
IkReal x284=((0.04132419)*x116);
IkReal x285=((0.04132419)*x184);
IkReal x286=((0.04132419)*x209);
IkReal x287=(gclwh4_11*x165);
IkReal x288=((0.017917245)*x72);
IkReal x289=(gclwh12_11*x90);
IkReal x290=((0.04132419)*x124);
IkReal x291=((0.04132419)*x217);
IkReal x292=((0.04132419)*x144);
IkReal x293=((0.017917245)*x174);
IkReal x294=(gclwh15_10*x115);
IkReal x295=((0.017917245)*x112);
IkReal x296=(gclwh7_10*x88);
IkReal x297=((0.3786)*x149);
IkReal x298=(gclwh13_10*x90);
IkReal x299=((0.3786)*x89);
IkReal x300=(gclwh14_11*x201);
IkReal x301=(gclwh14_14*x138);
IkReal x302=(gclwh4_14*x118);
IkReal x303=(gclwh12_14*x162);
IkReal x304=(gclwh14_8*x117);
IkReal x305=((2.0)*x67);
IkReal x306=((1.0)*x68);
IkReal x307=(r21*x68);
IkReal x308=((0.2183)*gclwh10_5*x81);
IkReal x309=((0.2183)*gclwh8_5*x102);
IkReal x310=((0.10915)*gclwh6_5*x99);
IkReal x311=((0.2183)*gclwh6_5*x77);
IkReal x312=((0.10915)*gclwh8_5*x117);
IkReal x313=((0.10915)*gclwh10_5*x73);
IkReal x314=(gclwh12_3*pp*x170);
IkReal x315=(x133*x81);
IkReal x316=(x109*x193);
IkReal x317=((2.0)*gclwh8_11*x102);
IkReal x318=(gclwh10_2*pz*x73);
IkReal x319=(x214*x69);
IkReal x320=(x193*x97);
IkReal x321=(gclwh4_3*pp*x104);
IkReal x322=(x109*x195);
IkReal x323=(x155*x69);
IkReal x324=((2.0)*gclwh6_11*x77);
IkReal x325=(x152*x69);
IkReal x326=(x216*x79);
IkReal x327=(x109*x171);
IkReal x328=(gclwh13_1*pp*x170);
IkReal x329=(x109*x204);
IkReal x330=(x109*x143);
IkReal x331=(gclwh5_1*pp*x104);
IkReal x332=(x185*x69);
IkReal x333=(gclwh11_0*pz*x73);
IkReal x334=(x141*x77);
IkReal x335=(x143*x97);
IkReal x336=(x81*x94);
IkReal x337=(x176*x216);
IkReal x338=(x102*x122);
IkReal x339=(x109*x202);
IkReal x340=(x169*x69);
IkReal x341=(x156*x69);
IkReal x342=((0.10915)*gclwh7_7*x99);
IkReal x343=((0.2183)*gclwh9_7*x102);
IkReal x344=((0.2183)*gclwh11_7*x81);
IkReal x345=((0.10915)*gclwh9_7*x117);
IkReal x346=((0.2183)*gclwh7_7*x77);
IkReal x347=((0.10915)*gclwh11_7*x73);
IkReal x348=((0.10915)*gclwh14_14*x117);
IkReal x349=(x208*x81);
IkReal x350=(x150*x77);
IkReal x351=((0.10915)*gclwh12_14*x99);
IkReal x352=(x102*x151);
IkReal x353=((0.10915)*gclwh4_14*x73);
IkReal x354=((0.09465)*gclwh4_8*x73);
IkReal x355=(x97*x98);
IkReal x356=(gclwh12_3*x307);
IkReal x357=(x210*x69);
IkReal x358=(gclwh3_3*x307);
IkReal x359=(x137*x68);
IkReal x360=(gclwh3_2*r21*x109);
IkReal x361=(x102*x219);
IkReal x362=(x160*x69);
IkReal x363=(x109*x98);
IkReal x364=((0.09465)*pp*x95);
IkReal x365=(x215*x68);
IkReal x366=(x109*x218);
IkReal x367=(x173*x69);
IkReal x368=(x100*x81);
IkReal x369=(gclwh4_2*r22*x109);
IkReal x370=(gclwh4_8*npz*x69);
IkReal x371=(gclwh12_2*r21*x109);
IkReal x372=(x69*x84);
IkReal x373=((0.09465)*x304);
IkReal x374=(x181*x77);
IkReal x375=(gclwh12_8*npy*x69);
IkReal x376=(x130*x68);
IkReal x377=(x69*x75);
IkReal x378=(gclwh5_0*pz*x73);
IkReal x379=(gclwh13_9*npy*x69);
IkReal x380=(x109*x128);
IkReal x381=(x110*x97);
IkReal x382=((0.09465)*gclwh15_9*x117);
IkReal x383=(x102*x123);
IkReal x384=(x109*x110);
IkReal x385=(x145*x68);
IkReal x386=(gclwh2_0*r21*x109);
IkReal x387=(x148*x69);
IkReal x388=(x207*x69);
IkReal x389=(gclwh0_1*r20*x68);
IkReal x390=(x109*x179);
IkReal x391=((0.09465)*gclwh5_9*x73);
IkReal x392=(x69*x91);
IkReal x393=((0.09465)*gclwh13_9*x99);
IkReal x394=(x109*x142);
IkReal x395=(x69*x71);
IkReal x396=(x198*x81);
IkReal x397=(x125*x77);
IkReal x398=((0.10915)*gclwh13_15*x99);
IkReal x399=((0.10915)*gclwh5_15*x73);
IkReal x400=(x102*x206);
IkReal x401=((0.10915)*gclwh15_15*x117);
IkReal x402=(x194*x81);
IkReal x403=(x140*x77);
IkReal x404=(x135*x76);
IkReal x405=(x133*x73);
IkReal x406=((4.0)*gclwh6_11*x77);
IkReal x407=((4.0)*gclwh8_11*x102);
IkReal x408=(x135*x72);
IkReal x409=(x189*x81);
IkReal x410=(x73*x94);
IkReal x411=(x168*x77);
IkReal x412=(x117*x122);
IkReal x413=(x141*x99);
IkReal x414=(x102*x161);
IkReal x415=(x146*x81);
IkReal x416=(x117*x219);
IkReal x417=((4.0)*gclwh12_11*x77);
IkReal x418=((4.0)*gclwh4_11*x81);
IkReal x419=(x117*x151);
IkReal x420=((0.4366)*gclwh12_14*x77);
IkReal x421=((0.4366)*gclwh4_14*x81);
IkReal x422=(x150*x99);
IkReal x423=((0.4366)*gclwh14_14*x102);
IkReal x424=(x208*x73);
IkReal x425=(gclwh6_2*npy*x305);
IkReal x426=(gclwh6_2*x114*x97);
IkReal x427=(gclwh10_2*npz*x305);
IkReal x428=(gclwh8_2*x186*x67);
IkReal x429=(gclwh7_0*npy*x305);
IkReal x430=(gclwh9_0*x186*x67);
IkReal x431=(gclwh11_0*npz*x305);
IkReal x432=(gclwh7_0*x114*x97);
IkReal x433=(gclwh12_2*npy*x305);
IkReal x434=(gclwh3_2*npy*x305);
IkReal x435=(gclwh1_2*x186*x67);
IkReal x436=(gclwh14_3*x186*x97);
IkReal x437=(gclwh4_2*npz*x305);
IkReal x438=(gclwh4_3*x135*x81);
IkReal x439=(gclwh12_2*x114*x97);
IkReal x440=((1.0)*x218*x97);
IkReal x441=(gclwh3_3*x135*x77);
IkReal x442=((1.0)*gclwh4_2*pz*x73);
IkReal x443=(gclwh1_3*x186*x97);
IkReal x444=(gclwh3_2*x114*x97);
IkReal x445=(gclwh12_3*x135*x77);
IkReal x446=(gclwh14_2*x186*x67);
IkReal x447=(gclwh14_3*r20*x306);
IkReal x448=(gclwh0_0*x186*x67);
IkReal x449=(gclwh2_0*npy*x305);
IkReal x450=(gclwh5_1*x135*x81);
IkReal x451=(gclwh13_1*x135*x77);
IkReal x452=(gclwh15_0*x186*x67);
IkReal x453=(gclwh2_1*x135*x77);
IkReal x454=(gclwh0_1*x186*x97);
IkReal x455=(gclwh5_0*npz*x305);
IkReal x456=(gclwh13_0*npy*x305);
IkReal x457=((1.0)*x179*x97);
IkReal x458=((1.0)*x142*x97);
IkReal x459=(gclwh2_0*x114*x97);
IkReal x460=(gclwh13_1*x114*x68);
IkReal x461=(x196*x306);
IkReal x462=(gclwh15_1*x186*x97);
IkReal x463=(x286+x285);
IkReal x464=(x290+x291);
IkReal x465=(x251+x252);
IkReal x466=(x224+x226);
IkReal x467=(x249+x248);
IkReal x468=(x279+x280);
IkReal x469=(x324+x232+x233+x234);
IkReal x470=(x334+x238+x237+x240);
IkReal x471=(x397+x396+x274+x272);
IkReal x472=(x374+x368+x264+x263);
IkReal x473=(x301+x419+x421+x420);
IkReal x474=(x308+x309+x310+x222);
IkReal x475=(x350+x348+x349+x253);
IkReal x476=(x278+x401+x403+x402);
IkReal x477=(x342+x343+x344+x246);
IkReal x478=(x383+x267+x266+x268+x270);
IkReal x479=(x361+x259+x257+x261+x260);
IkReal x480=(x315+x317+x228+x227+x231);
IkReal x481=(x338+x336+x243+x242+x244);
IkReal x482=(x351+x353+x352+x255+x256);
IkReal x483=(x399+x398+x277+x275+x400);
IkReal x484=(x346+x347+x345+x250+x247);
IkReal x485=(x302+x303+x424+x423+x422);
IkReal x486=(x300+x299+x416+x417+x418);
IkReal x487=(x311+x313+x312+x223+x225);
IkReal x488=(x289+x288+x287+x407+x409+x408);
IkReal x489=(x298+x296+x297+x413+x414+x415);
IkReal x490=(x293+x294+x295+x412+x410+x411);
IkReal x491=(x283+x282+x281+x405+x404+x406);
IkReal x492=(((x100*x73))+(((4.0)*gclwh14_11*x102))+(((0.017917245)*x220))+((x181*x99))+((gclwh12_11*x88))+((gclwh10_11*x165))+((gclwh8_11*x115)));
IkReal x493=(x325+x326+x327+x323+x235+x428+x427+x426);
IkReal x494=(x339+x337+x340+x341+x241+x430+x431+x432);
IkReal x495=(x320+x321+x322+x319+x318+x314+x316+x229+x230+x425);
IkReal x496=(x333+x332+x331+x330+x335+x328+x329+x239+x236+x429);
IkReal x497=(x395+x394+x391+x393+x392+x273+x271+x458+x459+x456+x457+x454+x455+x453+x462+x461+x460);
IkReal x498=(x355+x354+x357+x356+x359+x358+x360+x362+x363+x364+x365+x366+x258+x262+x433+x434+x435+x436+x437+x69);
IkReal x499=(x375+x373+x372+x371+x370+x369+x367+x265+x438+x439+x445+x444+x447+x446+x441+x440+x443+x442);
IkReal x500=(x386+x387+x384+x385+x382+x380+x381+x388+x389+x379+x378+x377+x376+x390+x269+x449+x448+x452+x450+x451+x69);
op[0]=((((-0.81725)*gclwh10_12*x73))+(((1.6345)*gclwh8_12*x102))+(((-1.0)*x487))+((gclwh6_12*x107))+(((-1.6345)*gclwh6_12*x77))+(((-0.007321434238125)*x83))+(((-1.0)*gclwh4_8*x93))+((x205*x96))+x466+x474+(((-0.007321434238125)*x101))+(((-1.0)*x101*x96))+(((0.154705425)*x103))+(((1.6345)*gclwh10_12*x81))+(((-1.0)*gclwh12_8*x87))+(((-1.0)*x221)));
op[1]=((((-1.0)*x493))+(((-1.0)*x480))+((gclwh10_11*x73))+(((-0.12699240901125)*x139))+(((-1.0)*gclwh12_3*x213))+x495+x469+(((-1.0)*x188*x72))+((pp*x76))+(((0.12699240901125)*x79)));
op[2]=((-0.17125635)+(((-1.0)*x488))+x491);
op[3]=((((-1.569)*gclwh8_2*x102))+((gclwh8_2*x126))+(((-0.160905)*x103))+(((0.7845)*gclwh8_2*x117))+(((-1.0)*gclwh6_2*x74))+((gclwh10_2*x192))+(((-0.7845)*gclwh6_2*x99))+(((-0.14850585)*x152))+(((-0.14850585)*x155))+(((-1.0)*x463))+(((0.14850585)*x214))+(((0.160905)*x121))+x284+(((-1.569)*gclwh10_2*x81))+(((0.7845)*gclwh10_2*x73))+(((0.160905)*x212))+(((1.569)*gclwh6_2*x77)));
op[4]=((((-0.0655)*gclwh6_12*x77))+(((0.0655)*gclwh8_12*x102))+(((-1.0)*x487))+(((0.0655)*gclwh10_12*x81))+(((0.03275)*gclwh6_12*x99))+(((-1.0)*x466))+(((-0.000293394886875)*x101))+x221+((gclwh4_8*x183))+(((-0.000293394886875)*x83))+x474+(((-0.006199575)*x103))+(((0.006199575)*x121))+(((-0.03275)*gclwh10_12*x73))+(((0.000293394886875)*x205))+(((-1.0)*x101*x153)));
op[5]=((((-1.0)*gclwh10_11*x73))+(((-1.0)*x493))+(((-1.0)*x469))+x480+x495+(((-1.0)*gclwh12_3*x85))+(((-1.0)*x188*x76))+(((-0.00076243651125)*x139))+(((0.00076243651125)*x79))+((pp*x72)));
op[6]=((((0.12699240901125)*x176))+(((-1.0)*x494))+(((-1.0)*gclwh9_10*x117))+((gclwh7_10*x99))+(((-1.0)*x470))+(((-1.0)*gclwh11_10*x73))+x481+x496+(((-1.0)*gclwh13_1*x213))+(((-0.12699240901125)*x172)));
op[7]=(((gclwh7_13*x107))+(((-0.81725)*gclwh11_13*x73))+(((0.154705425)*x190))+(((-1.0)*gclwh13_9*x87))+(((1.6345)*gclwh9_13*x102))+(((-1.0)*x484))+(((-1.0)*x177*x96))+((x167*x96))+x467+x477+(((-1.0)*gclwh5_9*x93))+(((-0.007321434238125)*x113))+(((-1.0)*x245))+(((-0.007321434238125)*x177))+(((-1.6345)*gclwh7_13*x77))+(((1.6345)*gclwh11_13*x81)));
op[8]=(((gclwh11_0*x192))+(((-0.160905)*x197))+(((-1.0)*gclwh7_0*x74))+(((-0.160905)*x105))+(((0.14850585)*x185))+(((0.160905)*x190))+(((1.569)*gclwh7_0*x77))+(((-1.0)*x292))+(((-0.14850585)*x156))+(((-0.14850585)*x169))+((gclwh9_0*x126))+x464+(((-1.569)*gclwh9_0*x102))+(((-0.7845)*gclwh7_0*x99))+(((0.7845)*gclwh11_0*x73))+(((-1.569)*gclwh11_0*x81))+(((0.7845)*gclwh9_0*x117)));
op[9]=((-0.17125635)+(((-1.0)*x489))+x490);
op[10]=((((-1.0)*x494))+((gclwh11_10*x73))+(((-1.0)*x481))+(((-1.0)*gclwh7_10*x99))+x496+x470+(((0.00076243651125)*x176))+((gclwh9_10*x117))+(((-0.00076243651125)*x172))+(((-1.0)*gclwh13_1*x85)));
op[11]=((((0.000293394886875)*x167))+(((-0.03275)*gclwh9_13*x117))+(((0.03275)*gclwh7_13*x99))+(((-1.0)*x484))+(((-0.006199575)*x190))+(((-0.0655)*gclwh7_13*x77))+(((0.0655)*gclwh11_13*x81))+(((-0.03275)*gclwh11_13*x73))+(((-1.0)*x467))+((gclwh13_9*x154))+x245+(((-0.000293394886875)*x113))+x477+(((-0.000293394886875)*x177))+(((0.006199575)*x105))+(((0.0655)*gclwh9_13*x102)));
op[12]=((((-1.0)*x95*x96))+(((1.6345)*gclwh12_8*x77))+(((-0.007321434238125)*x200))+(((0.154705425)*x163))+(((-1.6345)*gclwh14_8*x102))+(((-0.007321434238125)*x95))+(((-1.0)*x475))+(((-0.81725)*gclwh4_8*x73))+((gclwh10_12*x93))+x482+x465+(((0.007321434238125)*x120))+((x120*x96))+(((1.6345)*gclwh4_8*x81))+(((-1.0)*x254))+(((-1.0)*gclwh6_12*x87)));
op[13]=((-0.679811285)+((gclwh3_3*x203))+(((1.341705325)*gclwh12_3*x77))+(((-1.0)*x499))+(((1.341705325)*gclwh4_3*x81))+(((-1.0)*gclwh12_3*x203))+(((-0.66189404)*gclwh12_3*x99))+(((-1.0)*x479))+(((-0.66189404)*gclwh4_3*x73))+(((-1.341705325)*gclwh14_3*x102))+(((-0.679811285)*gclwh1_3*x117))+(((-0.679811285)*gclwh3_3*x99))+(((1.341705325)*gclwh3_3*x77))+x498+x472+((gclwh1_3*x86))+((gclwh14_3*x86))+((gclwh14_11*x117))+(((-1.0)*gclwh12_11*x99))+(((1.341705325)*gclwh1_3*x102))+(((-0.00600991575645741)*x215))+(((-1.0)*gclwh4_11*x73))+(((0.66189404)*gclwh14_3*x117)));
op[14]=((-0.07735732)+(((-1.0)*x492))+x486);
op[15]=((((-0.7845)*gclwh4_2*x73))+((x160*x70))+(((-0.85)*x304))+(((-0.007614829125)*x120))+(((0.85)*gclwh4_8*x73))+(((-1.0)*gclwh4_2*x192))+(((1.569)*gclwh3_2*x77))+(((0.7845)*pp*x98))+(((-1.0)*x485))+(((-0.14850585)*x84))+(((1.569)*gclwh4_2*x81))+((gclwh3_2*x74))+(((-0.7845)*gclwh12_2*x99))+(((-1.0)*gclwh4_8*npz*x70))+(((1.569)*gclwh12_2*x77))+(((0.00702803935125)*x98))+(((0.85)*pp*x95))+(((0.14850585)*x210))+(((-0.14850585)*x173))+(((0.007614829125)*x95))+x473+(((-0.7845)*gclwh1_2*x117))+(((-0.7845)*gclwh3_2*x99))+(((-1.0)*gclwh12_2*x74))+((gclwh1_2*x126))+(((-1.0)*gclwh12_8*npy*x70))+(((1.569)*gclwh1_2*x102))+(((-1.569)*gclwh14_2*x102))+(((0.007614829125)*x200)));
op[16]=((((-1.0)*gclwh6_12*x154))+(((-0.0655)*gclwh4_8*x81))+(((-1.0)*x482))+(((0.03275)*gclwh4_8*x73))+(((-0.0655)*gclwh12_8*x77))+(((-0.000293394886875)*x120))+(((0.0655)*gclwh14_8*x102))+(((-0.03275)*x304))+((x153*x95))+(((0.006199575)*x163))+((gclwh10_12*x183))+(((0.000293394886875)*x95))+x465+x475+(((0.000293394886875)*x200))+(((-1.0)*x254)));
op[17]=((0.012986285)+(((0.008055325)*gclwh1_3*x102))+(((-0.00493096)*gclwh14_3*x117))+(((-1.0)*gclwh14_11*x117))+(((0.008055325)*gclwh3_3*x77))+(((-1.0)*x499))+(((-0.008055325)*gclwh14_3*x102))+(((-1.0)*x472))+(((-0.012986285)*gclwh3_3*x99))+(((0.008055325)*gclwh12_3*x77))+x498+x479+((gclwh3_3*x157))+(((0.00493096)*gclwh12_3*x99))+(((0.00493096)*gclwh4_3*x73))+(((3.60823078949063e-5)*x137))+(((-1.0)*gclwh4_3*x78))+((gclwh14_3*x191))+(((-0.012986285)*gclwh1_3*x117))+((gclwh12_11*x99))+((gclwh4_11*x73))+(((0.008055325)*gclwh4_3*x81))+(((-1.0)*gclwh12_3*x157)));
op[18]=((0.679811285)+((gclwh13_1*x203))+(((-1.0)*x497))+(((0.00600991575645741)*x196))+(((-1.341705325)*gclwh5_1*x81))+(((-0.66189404)*gclwh15_1*x117))+(((0.00600991575645741)*x145))+(((-1.0)*gclwh15_1*x86))+(((-0.679811285)*gclwh0_1*x117))+(((-1.0)*x478))+(((-1.341705325)*gclwh13_1*x77))+(((-1.0)*gclwh5_10*x73))+(((1.341705325)*gclwh15_1*x102))+(((-1.0)*gclwh13_10*x99))+((gclwh0_1*x86))+((gclwh15_10*x117))+x471+(((1.341705325)*gclwh0_1*x102))+(((0.66189404)*gclwh13_1*x99))+x500+(((1.341705325)*gclwh2_1*x77))+(((-0.679811285)*gclwh2_1*x99))+(((0.66189404)*gclwh5_1*x73)));
op[19]=((((-1.0)*x483))+(((-1.0)*x108*x75))+(((-1.0)*x468))+(((-0.154705425)*x187))+x276+(((-1.0)*gclwh11_13*x93))+((x108*x71))+x476+(((-0.007321434238125)*x136))+((x127*x96))+(((-1.6345)*gclwh13_9*x77))+((gclwh7_13*x87))+(((0.007321434238125)*x111))+((gclwh13_9*x107))+(((0.81725)*gclwh5_9*x73))+(((-1.0)*x136*x96)));
op[20]=((((-0.7845)*gclwh15_0*x117))+((gclwh15_15*x138))+(((-0.85)*gclwh15_9*x117))+((gclwh0_0*x126))+(((-0.14850585)*x91))+(((-0.007614829125)*x136))+(((0.007614829125)*x111))+(((-0.7845)*gclwh2_0*x99))+(((-1.0)*x70*x75))+(((-1.0)*x194*x73))+(((0.4366)*gclwh13_15*x77))+(((0.007614829125)*x127))+(((1.569)*gclwh0_0*x102))+(((1.569)*gclwh15_0*x102))+(((-1.0)*x140*x99))+(((-1.0)*gclwh13_9*npy*x70))+(((0.14850585)*x148))+(((-0.7845)*gclwh0_0*x117))+((gclwh2_0*x74))+(((-1.0)*gclwh15_0*x126))+((gclwh13_0*x74))+(((-1.0)*gclwh13_15*x162))+(((1.569)*gclwh2_0*x77))+(((0.85)*gclwh5_9*x73))+(((-1.0)*gclwh5_15*x118))+(((-1.569)*gclwh5_0*x81))+((x70*x71))+(((0.4366)*gclwh5_15*x81))+(((0.85)*gclwh13_9*x99))+(((0.7845)*gclwh5_0*x73))+(((0.00702803935125)*x128))+(((0.14850585)*x207))+((x117*x206))+(((0.7845)*gclwh13_0*x99))+(((-1.569)*gclwh13_0*x77))+(((-0.4366)*gclwh15_15*x102)));
op[21]=((-0.07735732)+(((-4.0)*gclwh5_10*x81))+(((-1.0)*gclwh7_10*x90))+((x198*x73))+((gclwh11_10*x165))+((x125*x99))+(((-4.0)*gclwh13_10*x77))+(((-1.0)*x117*x123))+(((-1.0)*gclwh15_10*x201))+(((0.017917245)*x134))+(((4.0)*gclwh15_10*x102))+((gclwh9_10*x115))+((gclwh13_10*x88)));
op[22]=((-0.012986285)+((gclwh5_1*x78))+(((0.008055325)*gclwh15_1*x102))+(((0.008055325)*gclwh2_1*x77))+(((3.60823078949063e-5)*x145))+(((-0.008055325)*gclwh5_1*x81))+(((-1.0)*x497))+(((-1.0)*gclwh15_10*x117))+(((0.008055325)*gclwh0_1*x102))+(((-0.00493096)*gclwh5_1*x73))+(((-0.012986285)*gclwh2_1*x99))+(((-1.0)*x471))+((gclwh5_10*x73))+(((-0.012986285)*gclwh0_1*x117))+x478+(((0.00493096)*gclwh15_1*x117))+x500+((gclwh0_1*x191))+(((-0.00493096)*gclwh13_1*x99))+(((-3.60823078949063e-5)*x130))+((gclwh13_10*x99))+(((-0.008055325)*gclwh13_1*x77))+((gclwh13_1*x157)));
op[23]=((((0.0655)*gclwh13_9*x77))+((x182*x75))+(((-0.006199575)*x187))+(((0.03275)*gclwh15_9*x117))+(((-0.03275)*gclwh13_9*x99))+(((-0.000293394886875)*x127))+((gclwh7_13*x154))+(((-1.0)*x476))+(((0.000293394886875)*x136))+(((-1.0)*x468))+(((-1.0)*x182*x71))+x276+(((-0.000293394886875)*x111))+x483+(((-0.03275)*gclwh5_9*x73))+(((-1.0)*gclwh11_13*x183)));
op[24]=((-0.35681135)+(((-1.0)*x488))+x491);
op[25]=(((gclwh8_2*x129))+(((-3.269)*gclwh10_2*x81))+(((-3.269)*gclwh8_2*x102))+((gclwh10_2*x166))+(((-1.0)*gclwh6_2*x164))+(((-1.0)*x463))+(((3.269)*gclwh6_2*x77))+(((-0.30941085)*x155))+(((-0.30941085)*x152))+x284+((gclwh14_2*x147))+(((-1.6345)*gclwh6_2*x99))+(((1.6345)*gclwh8_2*x117))+(((1.6345)*gclwh10_2*x73)));
op[26]=((((0.08264838)*x116))+(((1.569)*gclwh10_12*x73))+(((1.569)*pp*x101))+(((0.0140560787025)*x101))+(((-3.138)*gclwh8_12*x102))+(((-3.138)*gclwh10_12*x81))+(((-0.0140560787025)*x205))+(((-1.569)*gclwh6_12*x99))+(((0.0140560787025)*x83))+(((-0.08264838)*x184))+(((-0.08264838)*x209))+(((3.138)*gclwh6_12*x77)));
op[27]=((((-1.0)*x175*x76))+(((-0.03583449)*x76))+(((0.7572)*gclwh4_11*rxp2_2))+((x175*x72))+(((-0.03583449)*x180))+(((0.03583449)*x72))+(((-0.7572)*x158))+(((8.0)*gclwh10_11*x81))+(((-1.0)*x189*x73))+(((-8.0)*gclwh6_11*x77))+((gclwh12_11*x92))+(((8.0)*gclwh8_11*x102)));
op[28]=((-0.01429865)+(((-1.0)*x491))+x488);
op[29]=((((0.00058678977375)*x195))+(((0.00058678977375)*x193))+(((0.0655)*gclwh8_2*x117))+(((0.01239915)*x214))+(((-0.131)*gclwh8_2*x102))+x463+(((-0.131)*gclwh10_2*x81))+(((-0.0655)*gclwh6_2*x99))+(((-1.0)*x284))+(((0.131)*gclwh6_2*x77))+(((-0.00058678977375)*x171))+(((-0.01239915)*x152))+(((-0.01239915)*x155))+(((0.0655)*gclwh10_2*x73)));
op[30]=((((-3.269)*gclwh9_0*x102))+(((-1.6345)*gclwh7_0*x99))+(((1.6345)*gclwh11_0*x73))+(((-1.0)*x292))+(((-0.30941085)*x169))+(((3.269)*gclwh7_0*x77))+(((-1.0)*gclwh7_0*x164))+(((-0.30941085)*x156))+(((1.6345)*gclwh9_0*x117))+((gclwh9_0*x129))+x464+((gclwh15_0*x147))+(((-3.269)*gclwh11_0*x81))+((gclwh11_0*x166)));
op[31]=((-0.35681135)+(((-1.0)*x489))+x490);
op[32]=(((x146*x73))+(((0.03583449)*x174))+(((-1.0)*gclwh13_10*x92))+((x117*x161))+(((-8.0)*gclwh9_10*x102))+(((-0.03583449)*gclwh7_10*r21))+(((0.03583449)*x112))+(((8.0)*gclwh7_10*x77))+(((-0.7572)*x149))+(((-8.0)*gclwh11_10*x81))+(((-1.0)*x168*x99))+(((0.7572)*x119)));
op[33]=((((-0.0140560787025)*x167))+(((1.569)*gclwh9_13*x117))+(((0.0140560787025)*x113))+(((-0.08264838)*x217))+(((-3.138)*gclwh9_13*x102))+(((0.08264838)*x144))+(((3.138)*gclwh7_13*x77))+(((1.569)*gclwh11_13*x73))+(((0.0140560787025)*x177))+(((-3.138)*gclwh11_13*x81))+(((-1.569)*gclwh7_13*x99))+(((-0.08264838)*x124)));
op[34]=((((-0.0655)*gclwh7_0*x99))+(((-0.131)*gclwh9_0*x102))+(((0.00058678977375)*x143))+(((0.131)*gclwh7_0*x77))+(((-1.0)*x464))+x292+(((0.0655)*gclwh9_0*x117))+(((-0.00058678977375)*x202))+(((0.00058678977375)*x204))+(((0.0655)*gclwh11_0*x73))+(((-0.01239915)*x169))+(((-0.01239915)*x156))+(((0.01239915)*x185))+(((-0.131)*gclwh11_0*x81)));
op[35]=((-0.01429865)+(((-1.0)*x490))+x489);
op[36]=((1.31196768)+(((-1.0)*x492))+x486);
op[37]=((((-1.6345)*gclwh3_2*x99))+(((-1.0)*gclwh12_2*x164))+(((3.269)*gclwh12_2*x77))+(((-3.269)*gclwh14_2*x102))+(((-1.0)*x485))+(((-1.0)*gclwh4_2*x166))+(((-1.6345)*gclwh1_2*x117))+(((0.01464286847625)*x98))+(((3.269)*gclwh1_2*x102))+(((0.30941085)*x210))+x473+(((-1.6345)*gclwh12_2*x99))+(((-1.6345)*gclwh4_2*x73))+(((3.269)*gclwh3_2*x77))+(((-0.30941085)*x84))+((gclwh1_2*x129))+((gclwh3_2*x164))+(((-1.0)*gclwh8_2*x147))+(((3.269)*gclwh4_2*x81))+(((1.6345)*pp*x98)));
IkReal x501=pz*pz;
IkReal x502=pp*pp;
IkReal x503=((0.1893)*pz);
IkReal x504=((1.7)*pz);
IkReal x505=(gclwh15_9*npx);
IkReal x506=(pp*r21);
IkReal x507=(pp*r22);
IkReal x508=((0.00702803935125)*r21);
IkReal x509=(gclwh5_9*npz);
IkReal x510=(pp*r20);
IkReal x511=(npy*pz);
IkReal x512=((4.0)*gclwh12_11);
IkReal x513=((3.60823078949063e-5)*r22);
IkReal x514=(gclwh14_3*rxp0_2);
IkReal x515=((0.000977833645875)*r20);
IkReal x516=(npz*pz);
IkReal x517=((0.000977833645875)*r21);
IkReal x518=(gclwh10_2*rxp2_2);
IkReal x519=((0.00076243651125)*rxp1_2);
IkReal x520=((0.00600991575645741)*r20);
IkReal x521=((0.154705425)*rxp1_2);
IkReal x522=((0.4366)*gclwh5_15);
IkReal x523=(gclwh6_11*rxp1_2);
IkReal x524=(gclwh7_0*rxp1_2);
IkReal x525=((0.154705425)*rxp2_2);
IkReal x526=((2.0)*gclwh11_10);
IkReal x527=((0.2970117)*rxp1_2);
IkReal x528=((0.017917245)*r21);
IkReal x529=(gclwh14_2*pz);
IkReal x530=(gclwh12_8*r21);
IkReal x531=(gclwh14_2*rxp0_2);
IkReal x532=((2.0)*gclwh4_11);
IkReal x533=((0.007321434238125)*r20);
IkReal x534=(npx*pz);
IkReal x535=((0.4366)*gclwh15_15);
IkReal x536=(gclwh10_11*rxp2_2);
IkReal x537=(gclwh5_9*rxp2_2);
IkReal x538=((0.020662095)*rxp1_2);
IkReal x539=((0.007321434238125)*r21);
IkReal x540=(gclwh0_0*r20);
IkReal x541=((0.0089586225)*r21);
IkReal x542=(gclwh13_0*pz);
IkReal x543=((1.6345)*pz);
IkReal x544=((0.007321434238125)*r22);
IkReal x545=((1.0)*pz);
IkReal x546=(gclwh14_14*rxp0_2);
IkReal x547=(gclwh4_14*r22);
IkReal x548=((0.1893)*rxp0_2);
IkReal x549=((0.00058678977375)*r22);
IkReal x550=(gclwh12_8*rxp1_2);
IkReal x551=((2.0)*gclwh9_10);
IkReal x552=((0.1893)*rxp2_2);
IkReal x553=((2.0)*gclwh15_10);
IkReal x554=((4.0)*gclwh14_11);
IkReal x555=(gclwh5_15*rxp2_2);
IkReal x556=((0.020662095)*rxp0_2);
IkReal x557=((2.0)*gclwh13_10);
IkReal x558=((0.3786)*rxp1_2);
IkReal x559=(gclwh9_0*r20);
IkReal x560=(gclwh13_9*r21);
IkReal x561=(gclwh15_1*r20);
IkReal x562=((0.000977833645875)*r22);
IkReal x563=((0.006199575)*rxp0_2);
IkReal x564=(gclwh6_2*rxp1_2);
IkReal x565=((0.0089586225)*r20);
IkReal x566=((2.0)*gclwh10_11);
IkReal x567=((2.0)*pp);
IkReal x568=((0.00058678977375)*r21);
IkReal x569=(gclwh1_3*r20);
IkReal x570=(gclwh14_14*r20);
IkReal x571=(gclwh9_0*rxp0_2);
IkReal x572=(gclwh4_3*rxp2_2);
IkReal x573=(gclwh5_0*r22);
IkReal x574=((0.03583449)*r20);
IkReal x575=((0.00058678977375)*r20);
IkReal x576=((0.2183)*gclwh13_15);
IkReal x577=((2.0)*gclwh7_10);
IkReal x578=(gclwh2_1*r21);
IkReal x579=((4.0)*gclwh15_10);
IkReal x580=((0.0089586225)*pz);
IkReal x581=((0.2183)*gclwh12_14);
IkReal x582=((0.2183)*gclwh14_14);
IkReal x583=(gclwh11_0*rxp2_2);
IkReal x584=(gclwh8_2*rxp0_2);
IkReal x585=((0.3786)*rxp2_2);
IkReal x586=(gclwh12_2*rxp1_2);
IkReal x587=(gclwh5_0*rxp2_2);
IkReal x588=((3.60823078949063e-5)*r21);
IkReal x589=(gclwh15_9*r20);
IkReal x590=((0.3786)*rxp0_2);
IkReal x591=((0.006199575)*rxp1_2);
IkReal x592=(gclwh14_8*npx);
IkReal x593=(gclwh13_15*r21);
IkReal x594=((0.017917245)*r20);
IkReal x595=(gclwh5_15*r22);
IkReal x596=((0.000293394886875)*r21);
IkReal x597=(gclwh13_0*rxp1_2);
IkReal x598=(gclwh7_10*rxp1_2);
IkReal x599=((0.000293394886875)*r22);
IkReal x600=(gclwh5_1*rxp2_2);
IkReal x601=((0.154705425)*rxp0_2);
IkReal x602=((0.4366)*gclwh13_15);
IkReal x603=((0.0089586225)*r22);
IkReal x604=((0.2970117)*rxp2_2);
IkReal x605=(gclwh5_9*r22);
IkReal x606=((0.7572)*rxp0_2);
IkReal x607=((4.0)*gclwh4_11);
IkReal x608=(gclwh15_1*rxp0_2);
IkReal x609=((0.000293394886875)*r20);
IkReal x610=((2.0)*gclwh6_11);
IkReal x611=((0.4366)*gclwh12_14);
IkReal x612=((0.017917245)*r22);
IkReal x613=(gclwh15_0*r20);
IkReal x614=(gclwh15_15*r20);
IkReal x615=((2.0)*gclwh12_11);
IkReal x616=(gclwh14_8*rxp0_2);
IkReal x617=((0.0655)*pz);
IkReal x618=((0.006199575)*rxp2_2);
IkReal x619=((0.04132419)*rxp1_2);
IkReal x620=((0.4366)*gclwh4_14);
IkReal x621=(gclwh15_0*rxp0_2);
IkReal x622=(gclwh14_8*r20);
IkReal x623=((0.03583449)*r22);
IkReal x624=((2.0)*gclwh8_11);
IkReal x625=((4.0)*gclwh13_10);
IkReal x626=(gclwh15_9*rxp0_2);
IkReal x627=((3.60823078949063e-5)*r20);
IkReal x628=((0.00702803935125)*r22);
IkReal x629=((0.2183)*gclwh5_15);
IkReal x630=(gclwh5_1*r22);
IkReal x631=((4.0)*gclwh5_10);
IkReal x632=(gclwh13_9*rxp1_2);
IkReal x633=((2.0)*gclwh5_10);
IkReal x634=((0.4366)*gclwh14_14);
IkReal x635=((0.020662095)*rxp2_2);
IkReal x636=(gclwh4_8*r22);
IkReal x637=(gclwh4_2*rxp2_2);
IkReal x638=((0.00600991575645741)*r21);
IkReal x639=((0.2183)*gclwh15_15);
IkReal x640=((0.2183)*gclwh4_14);
IkReal x641=((0.00702803935125)*r20);
IkReal x642=(gclwh12_14*r21);
IkReal x643=(gclwh4_8*rxp2_2);
IkReal x644=((0.2970117)*rxp0_2);
IkReal x645=(gclwh8_2*pz);
IkReal x646=(gclwh13_1*rxp1_2);
IkReal x647=((0.1893)*pp);
IkReal x648=(gclwh12_3*rxp1_2);
IkReal x649=((0.01464286847625)*r21);
IkReal x650=((0.1893)*rxp1_2);
IkReal x651=(gclwh4_3*r22);
IkReal x652=((2.0)*gclwh14_11);
IkReal x653=((0.03583449)*r21);
IkReal x654=((0.00195566729175)*x593);
IkReal x655=((0.00195566729175)*x595);
IkReal x656=((0.00195566729175)*x614);
IkReal x657=(gclwh15_10*x594);
IkReal x658=(gclwh7_10*x558);
IkReal x659=(gclwh5_10*x612);
IkReal x660=(gclwh9_10*x590);
IkReal x661=(gclwh13_10*x528);
IkReal x662=(gclwh11_10*x585);
IkReal x663=(gclwh12_14*x538);
IkReal x664=(gclwh6_5*x517);
IkReal x665=(gclwh4_14*x635);
IkReal x666=(gclwh8_5*x515);
IkReal x667=((0.020662095)*x546);
IkReal x668=(gclwh10_5*x562);
IkReal x669=((0.017917245)*x550);
IkReal x670=(gclwh8_11*x565);
IkReal x671=(gclwh14_11*x548);
IkReal x672=((0.017917245)*x643);
IkReal x673=(gclwh10_11*x603);
IkReal x674=(gclwh6_11*x541);
IkReal x675=(gclwh12_11*x650);
IkReal x676=(gclwh4_11*x552);
IkReal x677=((0.017917245)*x616);
IkReal x678=((0.017917245)*x537);
IkReal x679=(gclwh13_10*x650);
IkReal x680=(gclwh7_10*x541);
IkReal x681=(gclwh5_10*x552);
IkReal x682=((0.017917245)*x632);
IkReal x683=((0.017917245)*x626);
IkReal x684=(gclwh11_10*x603);
IkReal x685=(gclwh15_10*x548);
IkReal x686=(gclwh9_10*x565);
IkReal x687=(gclwh13_15*x538);
IkReal x688=((0.020662095)*x555);
IkReal x689=(gclwh7_7*x517);
IkReal x690=(gclwh9_7*x515);
IkReal x691=(gclwh15_15*x556);
IkReal x692=(gclwh11_7*x562);
IkReal x693=(gclwh12_11*x528);
IkReal x694=((0.3786)*x536);
IkReal x695=(gclwh4_11*x612);
IkReal x696=(gclwh8_11*x590);
IkReal x697=((0.00195566729175)*x547);
IkReal x698=((0.00195566729175)*x642);
IkReal x699=((0.00195566729175)*x570);
IkReal x700=((0.000977833645875)*x547);
IkReal x701=(gclwh10_5*x635);
IkReal x702=(gclwh12_14*x517);
IkReal x703=(gclwh8_5*x556);
IkReal x704=(gclwh6_5*x538);
IkReal x705=(gclwh14_14*x515);
IkReal x706=((0.000847933619625)*x530);
IkReal x707=((0.1893)*x523);
IkReal x708=(gclwh14_11*x565);
IkReal x709=((0.000847933619625)*x636);
IkReal x710=(gclwh8_11*x548);
IkReal x711=(gclwh12_11*x541);
IkReal x712=((0.1893)*x536);
IkReal x713=(gclwh4_11*x603);
IkReal x714=((0.000847933619625)*x622);
IkReal x715=((0.1893)*x598);
IkReal x716=(gclwh15_10*x565);
IkReal x717=((0.000847933619625)*x589);
IkReal x718=((0.000847933619625)*x605);
IkReal x719=(gclwh9_10*x548);
IkReal x720=(gclwh13_10*x541);
IkReal x721=((0.000847933619625)*x560);
IkReal x722=(gclwh11_10*x552);
IkReal x723=(gclwh5_10*x603);
IkReal x724=(gclwh15_15*x515);
IkReal x725=(gclwh7_7*x538);
IkReal x726=(gclwh5_15*x562);
IkReal x727=(gclwh9_7*x556);
IkReal x728=(gclwh11_7*x635);
IkReal x729=(gclwh13_15*x517);
IkReal x730=((2.0)*x501);
IkReal x731=(r21*x502);
IkReal x732=((1.0)*x502);
IkReal x733=(x506*x576);
IkReal x734=(x534*x535);
IkReal x735=(x507*x629);
IkReal x736=(x511*x602);
IkReal x737=(x510*x639);
IkReal x738=(x516*x522);
IkReal x739=(x510*x553);
IkReal x740=(x516*x631);
IkReal x741=(x511*x625);
IkReal x742=(x506*x557);
IkReal x743=(x534*x579);
IkReal x744=(x507*x633);
IkReal x745=((0.2183)*gclwh10_5*x516);
IkReal x746=((0.2183)*gclwh8_5*x534);
IkReal x747=((0.10915)*gclwh6_5*x506);
IkReal x748=((0.2183)*gclwh6_5*x511);
IkReal x749=((0.10915)*gclwh8_5*x510);
IkReal x750=((0.10915)*gclwh10_5*x507);
IkReal x751=(x647*x648);
IkReal x752=(x511*x610);
IkReal x753=(x565*x645);
IkReal x754=(gclwh10_2*pz*x507);
IkReal x755=(x503*x531);
IkReal x756=(x510*x645);
IkReal x757=(gclwh4_3*pp*x552);
IkReal x758=(gclwh10_2*r22*x580);
IkReal x759=(x503*x586);
IkReal x760=(x516*x566);
IkReal x761=(x503*x637);
IkReal x762=(x514*x647);
IkReal x763=(x534*x624);
IkReal x764=(gclwh6_2*pz*x541);
IkReal x765=(x646*x647);
IkReal x766=(x516*x526);
IkReal x767=(x534*x551);
IkReal x768=(gclwh11_0*r22*x580);
IkReal x769=(x559*x580);
IkReal x770=(gclwh5_1*pp*x552);
IkReal x771=(x503*x621);
IkReal x772=(gclwh11_0*pz*x507);
IkReal x773=(gclwh9_0*pz*x510);
IkReal x774=(gclwh15_1*pp*x548);
IkReal x775=(gclwh7_0*pz*x541);
IkReal x776=(x503*x597);
IkReal x777=(x503*x587);
IkReal x778=(x511*x577);
IkReal x779=((0.10915)*gclwh7_7*x506);
IkReal x780=((0.2183)*gclwh9_7*x534);
IkReal x781=((0.2183)*gclwh11_7*x516);
IkReal x782=((0.10915)*gclwh9_7*x510);
IkReal x783=((0.2183)*gclwh7_7*x511);
IkReal x784=((0.10915)*gclwh11_7*x507);
IkReal x785=(x507*x532);
IkReal x786=(x506*x615);
IkReal x787=(x534*x554);
IkReal x788=(x506*x581);
IkReal x789=(x534*x634);
IkReal x790=(x507*x640);
IkReal x791=(x510*x582);
IkReal x792=(x511*x611);
IkReal x793=(x516*x620);
IkReal x794=((0.10915)*gclwh12_14*x506);
IkReal x795=(x534*x582);
IkReal x796=((0.10915)*gclwh4_14*x507);
IkReal x797=((0.10915)*gclwh14_14*x510);
IkReal x798=(x516*x640);
IkReal x799=(x511*x581);
IkReal x800=((0.09465)*gclwh4_8*x507);
IkReal x801=(x510*x529);
IkReal x802=(gclwh12_3*x731);
IkReal x803=(x516*x532);
IkReal x804=(x503*x564);
IkReal x805=(gclwh3_3*x731);
IkReal x806=(x502*x569);
IkReal x807=(gclwh3_2*pz*x541);
IkReal x808=(x503*x592);
IkReal x809=(x529*x565);
IkReal x810=((0.09465)*gclwh12_8*x506);
IkReal x811=(x502*x651);
IkReal x812=(gclwh1_2*pz*x565);
IkReal x813=(x511*x615);
IkReal x814=(x503*x584);
IkReal x815=(gclwh4_2*r22*x580);
IkReal x816=(gclwh4_8*npz*x503);
IkReal x817=(gclwh12_2*pz*x541);
IkReal x818=(x503*x518);
IkReal x819=(x534*x652);
IkReal x820=((0.09465)*gclwh14_8*x510);
IkReal x821=(gclwh12_8*npy*x503);
IkReal x822=(x502*x561);
IkReal x823=(x503*x509);
IkReal x824=(gclwh5_0*pz*x507);
IkReal x825=(gclwh13_9*npy*x503);
IkReal x826=(x573*x580);
IkReal x827=(x506*x542);
IkReal x828=((0.09465)*gclwh15_9*x510);
IkReal x829=(x541*x542);
IkReal x830=(x502*x578);
IkReal x831=(x516*x633);
IkReal x832=(gclwh2_0*pz*x541);
IkReal x833=(x503*x571);
IkReal x834=(x511*x557);
IkReal x835=(x503*x583);
IkReal x836=(gclwh0_1*r20*x502);
IkReal x837=(x540*x580);
IkReal x838=((0.09465)*gclwh5_9*x507);
IkReal x839=(x503*x524);
IkReal x840=((0.09465)*gclwh13_9*x506);
IkReal x841=(gclwh15_0*pz*x565);
IkReal x842=(x503*x505);
IkReal x843=(x534*x553);
IkReal x844=((0.10915)*gclwh15_15*x510);
IkReal x845=(x516*x629);
IkReal x846=(x511*x576);
IkReal x847=((0.10915)*gclwh13_15*x506);
IkReal x848=((0.10915)*gclwh5_15*x507);
IkReal x849=(x534*x639);
IkReal x850=(gclwh6_2*npy*x730);
IkReal x851=(gclwh6_2*x506*x545);
IkReal x852=(gclwh10_2*npz*x730);
IkReal x853=(gclwh8_2*npx*x730);
IkReal x854=(gclwh7_0*npy*x730);
IkReal x855=(gclwh9_0*npx*x730);
IkReal x856=(gclwh11_0*npz*x730);
IkReal x857=(gclwh7_0*x506*x545);
IkReal x858=(gclwh12_2*npy*x730);
IkReal x859=(gclwh3_2*npy*x730);
IkReal x860=(gclwh1_2*npx*x730);
IkReal x861=(gclwh14_3*x534*x567);
IkReal x862=(gclwh4_2*npz*x730);
IkReal x863=(gclwh4_3*x516*x567);
IkReal x864=(gclwh12_2*x506*x545);
IkReal x865=(gclwh1_2*x510*x545);
IkReal x866=(gclwh3_3*x511*x567);
IkReal x867=(gclwh4_2*x507*x545);
IkReal x868=(gclwh1_3*x534*x567);
IkReal x869=(gclwh3_2*x506*x545);
IkReal x870=(gclwh12_3*x511*x567);
IkReal x871=(gclwh14_2*npx*x730);
IkReal x872=(gclwh14_3*r20*x732);
IkReal x873=(gclwh0_0*npx*x730);
IkReal x874=(gclwh2_0*npy*x730);
IkReal x875=(gclwh5_1*x516*x567);
IkReal x876=(gclwh13_1*x511*x567);
IkReal x877=(gclwh15_0*npx*x730);
IkReal x878=(gclwh2_1*x511*x567);
IkReal x879=(gclwh0_1*x534*x567);
IkReal x880=(gclwh5_0*npz*x730);
IkReal x881=(gclwh13_0*npy*x730);
IkReal x882=(gclwh0_0*x510*x545);
IkReal x883=(gclwh15_0*x510*x545);
IkReal x884=(gclwh2_0*x506*x545);
IkReal x885=((1.0)*gclwh13_1*x731);
IkReal x886=(x630*x732);
IkReal x887=(gclwh15_1*x534*x567);
IkReal x888=(x663+x665);
IkReal x889=(x703+x701);
IkReal x890=(x688+x687);
IkReal x891=(x727+x728);
IkReal x892=(x686+x685+x684+x778);
IkReal x893=(x673+x670+x671+x752);
IkReal x894=(x708+x707+x813+x803);
IkReal x895=(x715+x716+x834+x831);
IkReal x896=(x656+x737+x736+x738);
IkReal x897=(x664+x746+x747+x745);
IkReal x898=(x705+x797+x799+x798);
IkReal x899=(x699+x791+x793+x792);
IkReal x900=(x689+x779+x780+x781);
IkReal x901=(x724+x845+x844+x846);
IkReal x902=(x719+x720+x722+x723+x843);
IkReal x903=(x711+x710+x713+x712+x819);
IkReal x904=(x679+x681+x680+x766+x767);
IkReal x905=(x676+x674+x675+x760+x763);
IkReal x906=(((x511*x512))+((x516*x607))+((gclwh14_11*x594))+((x510*x652))+(((0.3786)*x523)));
IkReal x907=(x697+x698+x790+x788+x789);
IkReal x908=(x657+x658+x739+x740+x741);
IkReal x909=(x702+x700+x795+x794+x796);
IkReal x910=(x726+x729+x847+x849+x848);
IkReal x911=(x668+x666+x750+x748+x749);
IkReal x912=(x654+x655+x735+x734+x733);
IkReal x913=(x690+x692+x782+x783+x784);
IkReal x914=(x659+x661+x660+x662+x744+x742+x743);
IkReal x915=(x694+x695+x696+x693+x786+x787+x785);
IkReal x916=(x683+x777+x776+x775+x774+x856+x857+x855);
IkReal x917=(x677+x759+x764+x761+x762+x852+x853+x851);
IkReal x918=(x678+x682+x773+x772+x771+x770+x768+x769+x765+x854);
IkReal x919=(x669+x672+x755+x754+x757+x756+x751+x753+x758+x850);
IkReal x920=(x718+x721+x878+x879+x885+x884+x887+x886+x881+x880+x883+x882+x838+x839+x841+x840+x842);
IkReal x921=(x503+x709+x706+x858+x859+x862+x861+x860+x812+x810+x811+x809+x808+x805+x804+x807+x806+x801+x800+x802);
IkReal x922=(x714+x869+x868+x867+x866+x865+x864+x863+x870+x871+x872+x818+x816+x817+x814+x815+x821+x820);
IkReal x923=(x503+x717+x873+x874+x875+x876+x877+x829+x828+x823+x822+x827+x826+x825+x824+x835+x836+x837+x830+x832+x833);
op[38]=((((-1.0)*x506*x611))+(((0.8732)*gclwh4_14*x516))+(((-1.0)*gclwh8_12*x644))+((x510*x634))+(((0.0039113345835)*x570))+(((-1.0)*gclwh10_12*x604))+(((-0.0039113345835)*x547))+(((-0.8732)*gclwh14_14*x534))+(((-1.0)*x507*x620))+(((-0.0039113345835)*x642))+((gclwh6_12*x527))+(((0.8732)*gclwh12_14*x511)));
op[39]=((-0.05940486)+(((8.0)*gclwh14_11*x534))+((gclwh8_11*x606))+(((-8.0)*gclwh12_11*x511))+(((-8.0)*gclwh4_11*x516))+(((0.7572)*x536))+((gclwh4_11*x623))+(((-1.0)*x510*x554))+((x507*x607))+(((-0.7572)*x523))+((gclwh12_11*x653))+((x506*x512))+(((-1.0)*gclwh14_11*x574)));
op[40]=((0.02168232)+(((-1.0)*x906))+x915);
op[41]=((((0.131)*gclwh12_2*x511))+((gclwh3_2*x568))+(((0.0655)*gclwh14_2*x510))+(((-0.131)*npx*x529))+(((-1.0)*gclwh12_2*x568))+((gclwh1_2*x575))+((gclwh14_2*x575))+(((-0.01239915)*x584))+(((-1.0)*x899))+(((0.131)*gclwh3_2*x511))+(((0.131)*gclwh4_2*x516))+(((-0.0655)*gclwh12_2*x506))+(((-0.0655)*gclwh1_2*x510))+(((0.131)*gclwh1_2*x534))+(((-0.0655)*gclwh4_2*x507))+x907+(((-0.0655)*gclwh3_2*x506))+(((-0.01239915)*x518))+(((0.01239915)*x564))+(((-1.0)*gclwh4_2*x549)));
op[42]=((((3.269)*gclwh15_0*x534))+(((-0.30941085)*x524))+(((-1.6345)*gclwh0_0*x510))+(((3.269)*gclwh0_0*x534))+(((0.30941085)*x583))+(((1.6345)*gclwh13_0*x506))+(((-1.0)*x912))+(((0.30941085)*x571))+(((3.269)*gclwh2_0*x511))+((gclwh13_0*x649))+(((0.01464286847625)*x573))+(((-0.01464286847625)*x613))+((gclwh2_0*x649))+(((-3.269)*gclwh13_0*x511))+(((-1.6345)*gclwh15_0*x510))+x896+(((0.01464286847625)*x540))+(((-1.6345)*gclwh2_0*x506))+(((-3.269)*gclwh5_0*x516))+(((1.6345)*gclwh5_0*x507)));
op[43]=((1.31196768)+(((-1.0)*x908))+x914);
op[44]=((0.05940486)+(((-8.0)*gclwh13_10*x511))+(((0.7572)*gclwh11_10*rxp2_2))+(((-1.0)*x510*x579))+((x506*x625))+((x507*x631))+((gclwh13_10*x653))+(((-0.7572)*x598))+(((8.0)*gclwh15_10*x534))+((gclwh9_10*x606))+(((-8.0)*gclwh5_10*x516))+((gclwh5_10*x623))+(((-1.0)*gclwh15_10*x574)));
op[45]=(((gclwh11_13*x604))+((gclwh9_13*x644))+(((-0.8732)*gclwh13_15*x511))+(((0.8732)*gclwh15_15*x534))+(((-1.0)*gclwh7_13*x527))+(((0.0039113345835)*x595))+(((0.0039113345835)*x593))+(((-0.0039113345835)*x614))+((x507*x522))+((x506*x602))+(((-1.0)*x510*x535))+(((-0.8732)*gclwh5_15*x516)));
op[46]=((((0.131)*gclwh15_0*x534))+(((-1.0)*gclwh15_0*x575))+(((0.00058678977375)*x540))+(((-0.131)*gclwh5_0*x516))+(((0.131)*gclwh0_0*x534))+(((-0.01239915)*x524))+((gclwh5_0*x549))+(((-1.0)*x896))+(((-0.0655)*gclwh0_0*x510))+(((0.01239915)*x571))+(((0.01239915)*x583))+((gclwh13_0*x568))+((gclwh2_0*x568))+(((-0.131)*gclwh13_0*x511))+(((-0.0655)*gclwh15_0*x510))+(((0.131)*gclwh2_0*x511))+(((-0.0655)*gclwh2_0*x506))+(((0.0655)*gclwh13_0*x506))+x912+(((0.0655)*gclwh5_0*x507)));
op[47]=((0.02168232)+(((-1.0)*x914))+x908);
op[48]=((((-1.0)*gclwh4_8*x525))+((gclwh10_12*x544))+(((1.6345)*gclwh6_12*x511))+((gclwh14_8*x601))+((gclwh8_12*x533))+(((-1.6345)*gclwh10_12*x516))+(((-1.0)*gclwh12_8*x521))+(((-1.0)*x911))+(((-1.0)*x888))+(((0.81725)*gclwh10_12*x507))+x667+(((-1.6345)*gclwh8_12*x534))+(((-1.0)*gclwh6_12*x539))+x897+(((-0.81725)*gclwh6_12*x506))+(((0.81725)*gclwh8_12*x510)));
op[49]=((((-1.0)*gclwh8_11*x510))+(((0.12699240901125)*x514))+(((-1.0)*gclwh10_11*x507))+(((-1.0)*x893))+(((-1.0)*x917))+(((-0.12699240901125)*x648))+((gclwh6_11*x506))+(((-0.12699240901125)*x572))+x919+x905);
op[50]=((0.17125635)+(((4.0)*gclwh10_11*x516))+((gclwh12_11*x558))+((gclwh6_11*x528))+(((4.0)*gclwh8_11*x534))+(((-1.0)*gclwh8_11*x594))+(((-1.0)*gclwh10_11*x612))+((x506*x610))+(((-1.0)*x507*x566))+(((-1.0)*x510*x624))+(((-1.0)*gclwh14_11*x590))+((gclwh4_11*x585))+(((-4.0)*gclwh6_11*x511)));
op[51]=((((0.14850585)*x586))+(((-0.160905)*x616))+(((-0.14850585)*x531))+(((-0.7845)*gclwh8_2*x510))+((gclwh6_2*x508))+(((0.7845)*gclwh6_2*x506))+(((-1.0)*gclwh10_2*x628))+(((-1.569)*gclwh6_2*x511))+(((0.04132419)*gclwh4_14*rxp2_2))+(((-1.0)*gclwh8_2*x641))+(((0.160905)*x643))+(((0.160905)*x550))+((gclwh12_14*x619))+(((0.14850585)*x637))+(((1.569)*gclwh10_2*x516))+(((1.569)*gclwh8_2*x534))+(((-0.04132419)*x546))+(((-0.7845)*gclwh10_2*x507)));
op[52]=((((-0.0655)*gclwh10_12*x516))+(((-1.0)*gclwh14_8*x563))+(((-0.0655)*gclwh8_12*x534))+(((0.03275)*gclwh8_12*x510))+(((-0.03275)*gclwh6_12*x506))+((gclwh4_8*x618))+(((-1.0)*x911))+(((0.006199575)*x550))+((gclwh10_12*x599))+(((-1.0)*gclwh6_12*x596))+(((0.0655)*gclwh6_12*x511))+(((-1.0)*x667))+(((0.03275)*gclwh10_12*x507))+x888+x897+((gclwh8_12*x609)));
op[53]=((((-1.0)*gclwh6_11*x506))+(((-1.0)*x905))+(((-1.0)*x917))+((gclwh8_11*x510))+((gclwh10_11*x507))+(((-0.00076243651125)*x572))+x893+x919+(((0.00076243651125)*x514))+(((-1.0)*gclwh12_3*x519)));
op[54]=(((gclwh11_10*x507))+(((-1.0)*x904))+(((-1.0)*x916))+(((-0.12699240901125)*x600))+(((-1.0)*gclwh7_10*x506))+(((-0.12699240901125)*x646))+(((0.12699240901125)*x608))+((gclwh9_10*x510))+x892+x918);
op[55]=((((-1.6345)*gclwh9_13*x534))+((gclwh15_9*x601))+(((0.81725)*gclwh11_13*x507))+(((-1.0)*gclwh5_9*x525))+(((-1.0)*x890))+(((-1.0)*x913))+(((-1.0)*gclwh7_13*x539))+(((-1.6345)*gclwh11_13*x516))+(((-0.81725)*gclwh7_13*x506))+x691+(((-1.0)*gclwh13_9*x521))+((gclwh11_13*x544))+x900+(((0.81725)*gclwh9_13*x510))+(((1.6345)*gclwh7_13*x511))+((gclwh9_13*x533)));
op[56]=((((-1.0)*gclwh13_15*x619))+(((-0.7845)*gclwh11_0*x507))+(((0.14850585)*x587))+(((-0.04132419)*x555))+(((-0.00702803935125)*x559))+(((-1.0)*gclwh11_0*x628))+((gclwh7_0*x508))+(((0.160905)*x626))+(((1.569)*gclwh9_0*x534))+(((-0.160905)*x632))+(((0.04132419)*gclwh15_15*rxp0_2))+(((-1.569)*gclwh7_0*x511))+(((0.7845)*gclwh7_0*x506))+(((0.14850585)*x597))+(((-0.160905)*x537))+(((-0.14850585)*x621))+(((1.569)*gclwh11_0*x516))+(((-0.7845)*gclwh9_0*x510)));
op[57]=((0.17125635)+((x506*x577))+(((-1.0)*gclwh15_10*x590))+((gclwh5_10*x585))+((gclwh13_10*x558))+(((-1.0)*x507*x526))+(((-1.0)*gclwh11_10*x612))+(((-4.0)*gclwh7_10*x511))+(((4.0)*gclwh11_10*x516))+((gclwh7_10*x528))+(((-1.0)*x510*x551))+(((4.0)*gclwh9_10*x534))+(((-1.0)*gclwh9_10*x594)));
op[58]=((((-1.0)*gclwh9_10*x510))+(((-1.0)*gclwh11_10*x507))+(((-0.00076243651125)*x600))+((gclwh7_10*x506))+(((-1.0)*x892))+(((-1.0)*x916))+(((-1.0)*gclwh13_1*x519))+(((0.00076243651125)*x608))+x918+x904);
op[59]=((((-0.0655)*gclwh9_13*x534))+(((0.0655)*gclwh7_13*x511))+((gclwh13_9*x591))+(((-0.03275)*gclwh7_13*x506))+(((-1.0)*x913))+(((-0.0655)*gclwh11_13*x516))+(((0.006199575)*x537))+(((-1.0)*gclwh7_13*x596))+(((-1.0)*x691))+(((0.03275)*gclwh9_13*x510))+x890+((gclwh9_13*x609))+((gclwh11_13*x599))+x900+(((-1.0)*gclwh15_9*x563))+(((0.03275)*gclwh11_13*x507)));
op[60]=((((-1.0)*gclwh4_8*x544))+(((0.81725)*gclwh14_8*x510))+(((-1.0)*x909))+(((-0.81725)*gclwh4_8*x507))+(((-0.007321434238125)*x530))+(((1.6345)*gclwh12_8*x511))+(((-1.0)*x704))+(((-0.81725)*gclwh12_8*x506))+((gclwh14_8*x533))+(((1.6345)*gclwh4_8*x516))+x889+x898+(((-1.0)*gclwh10_12*x525))+(((-1.0)*gclwh8_12*x601))+((gclwh6_12*x521))+(((-1.6345)*gclwh14_8*x534)));
op[61]=((0.679811285)+(((-1.0)*x922))+(((0.66189404)*gclwh14_3*x510))+((gclwh3_3*x638))+((gclwh1_3*x520))+(((-0.66189404)*gclwh12_3*x506))+(((1.341705325)*gclwh3_3*x511))+(((-0.00600991575645741)*x651))+(((-0.679811285)*gclwh1_3*x510))+(((-1.0)*x894))+((gclwh14_3*x520))+(((-0.66189404)*gclwh4_3*x507))+(((1.341705325)*gclwh12_3*x511))+((gclwh12_11*x506))+(((1.341705325)*gclwh1_3*x534))+(((-0.679811285)*gclwh3_3*x506))+(((-1.0)*gclwh12_3*x638))+(((1.341705325)*gclwh4_3*x516))+(((-1.341705325)*gclwh14_3*x534))+x921+x903+(((-1.0)*gclwh14_11*x510))+((gclwh4_11*x507)));
op[62]=((0.07735732)+(((-1.0)*x906))+x915);
op[63]=((((-0.14850585)*x564))+(((-1.569)*gclwh1_2*x534))+(((0.7845)*gclwh12_2*x506))+(((0.14850585)*x584))+(((0.85)*gclwh4_8*x507))+(((-1.569)*gclwh4_2*x516))+(((-1.0)*gclwh12_8*npy*x504))+(((-0.7845)*gclwh14_2*x510))+(((-1.0)*gclwh4_8*npz*x504))+(((0.7845)*gclwh1_2*x510))+(((0.14850585)*x518))+((x504*x592))+(((-1.0)*x899))+(((0.7845)*gclwh3_2*x506))+((gclwh12_2*x508))+(((-0.85)*gclwh14_8*x510))+(((-1.569)*gclwh3_2*x511))+(((-1.0)*gclwh14_2*x641))+(((0.85)*gclwh12_8*x506))+(((1.569)*npx*x529))+(((0.007614829125)*x530))+(((-1.0)*gclwh1_2*x641))+(((-1.569)*gclwh12_2*x511))+(((0.7845)*gclwh4_2*x507))+x907+(((0.007614829125)*x636))+(((-0.007614829125)*x622))+(((-1.0)*gclwh3_2*x508))+((gclwh4_2*x628)));
op[64]=(((gclwh6_12*x591))+(((-1.0)*gclwh14_8*x609))+(((-0.0655)*gclwh4_8*x516))+(((0.0655)*gclwh14_8*x534))+(((0.000293394886875)*x530))+(((-0.03275)*gclwh14_8*x510))+(((-1.0)*x898))+(((0.03275)*gclwh12_8*x506))+((gclwh4_8*x599))+(((-1.0)*x704))+x889+(((-0.0655)*gclwh12_8*x511))+(((-1.0)*gclwh10_12*x618))+x909+(((0.03275)*gclwh4_8*x507))+(((-1.0)*gclwh8_12*x563)));
op[65]=((-0.012986285)+(((-1.0)*x922))+(((3.60823078949063e-5)*x569))+(((-1.0)*gclwh12_11*x506))+(((0.00493096)*gclwh12_3*x506))+(((0.008055325)*gclwh12_3*x511))+(((-0.00493096)*gclwh14_3*x510))+(((-0.012986285)*gclwh1_3*x510))+(((-1.0)*x903))+((gclwh3_3*x588))+(((-1.0)*gclwh4_3*x513))+(((-1.0)*gclwh12_3*x588))+(((0.008055325)*gclwh3_3*x511))+(((-1.0)*gclwh4_11*x507))+(((-0.008055325)*gclwh14_3*x534))+(((0.008055325)*gclwh1_3*x534))+(((0.00493096)*gclwh4_3*x507))+((gclwh14_11*x510))+x894+(((0.008055325)*gclwh4_3*x516))+(((-0.012986285)*gclwh3_3*x506))+x921+((gclwh14_3*x627)));
op[66]=((-0.679811285)+(((-1.0)*x920))+(((-0.66189404)*gclwh15_1*x510))+((gclwh13_1*x638))+(((-1.341705325)*gclwh13_1*x511))+(((-0.679811285)*gclwh0_1*x510))+(((1.341705325)*gclwh15_1*x534))+(((1.341705325)*gclwh0_1*x534))+(((1.341705325)*gclwh2_1*x511))+(((-1.0)*gclwh15_1*x520))+(((-1.0)*x895))+(((0.00600991575645741)*x578))+((gclwh5_10*x507))+(((-0.679811285)*gclwh2_1*x506))+(((0.66189404)*gclwh13_1*x506))+(((-1.341705325)*gclwh5_1*x516))+((gclwh13_10*x506))+x923+x902+(((0.66189404)*gclwh5_1*x507))+((gclwh0_1*x520))+(((0.00600991575645741)*x630))+(((-1.0)*gclwh15_10*x510)));
op[67]=(((x505*x543))+(((-1.6345)*gclwh13_9*x511))+(((-0.81725)*gclwh15_9*x510))+(((0.81725)*gclwh13_9*x506))+(((-1.0)*x901))+(((-1.0)*x891))+(((-1.0)*gclwh7_13*x521))+((gclwh13_9*x539))+(((0.81725)*gclwh5_9*x507))+(((-1.0)*gclwh15_9*x533))+((gclwh11_13*x525))+(((-1.0)*x509*x543))+x725+((gclwh9_13*x601))+((gclwh5_9*x544))+x910);
op[68]=((((-1.0)*gclwh13_0*x508))+(((0.85)*gclwh13_9*x506))+(((-0.00702803935125)*x540))+(((0.007614829125)*x560))+(((-0.00702803935125)*x573))+(((0.7845)*gclwh15_0*x510))+(((-1.569)*gclwh0_0*x534))+(((1.569)*gclwh13_0*x511))+(((0.7845)*gclwh2_0*x506))+(((-1.0)*x896))+(((0.7845)*gclwh0_0*x510))+(((-0.7845)*gclwh5_0*x507))+(((1.569)*gclwh5_0*x516))+(((-1.0)*gclwh13_9*npy*x504))+(((0.007614829125)*x605))+(((0.00702803935125)*x613))+(((-1.569)*gclwh2_0*x511))+(((-0.14850585)*x571))+(((-0.85)*gclwh15_9*x510))+(((0.85)*gclwh5_9*x507))+(((0.14850585)*x524))+(((-1.569)*gclwh15_0*x534))+(((-0.7845)*gclwh13_0*x506))+(((-1.0)*x504*x509))+(((-0.007614829125)*x589))+(((-1.0)*gclwh2_0*x508))+(((-0.14850585)*x583))+((x504*x505))+x912);
op[69]=((0.07735732)+(((-1.0)*x914))+x908);
op[70]=((0.012986285)+(((-0.012986285)*gclwh0_1*x510))+(((-1.0)*x920))+((gclwh0_1*x627))+(((0.008055325)*gclwh2_1*x511))+(((-3.60823078949063e-5)*x561))+((gclwh13_1*x588))+(((-1.0)*gclwh5_10*x507))+(((0.008055325)*gclwh0_1*x534))+(((-1.0)*x902))+(((-0.008055325)*gclwh13_1*x511))+(((-0.00493096)*gclwh13_1*x506))+(((3.60823078949063e-5)*x578))+((gclwh15_10*x510))+(((0.008055325)*gclwh15_1*x534))+(((-0.008055325)*gclwh5_1*x516))+(((-0.00493096)*gclwh5_1*x507))+x895+(((0.00493096)*gclwh15_1*x510))+(((-1.0)*gclwh13_10*x506))+((gclwh5_1*x513))+(((-0.012986285)*gclwh2_1*x506))+x923);
op[71]=((((-1.0)*x505*x617))+(((0.03275)*gclwh15_9*x510))+((gclwh11_13*x618))+(((-1.0)*x891))+(((-1.0)*x910))+(((-0.000293394886875)*x560))+(((-0.03275)*gclwh13_9*x506))+((gclwh9_13*x563))+(((-1.0)*gclwh5_9*x599))+(((-1.0)*gclwh7_13*x591))+(((0.000293394886875)*x589))+(((0.0655)*gclwh13_9*x511))+x725+((x509*x617))+x901+(((-0.03275)*gclwh5_9*x507)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x924=htj1*htj1;
CheckValue<IkReal> x925=IKPowWithIntegerCheck(((1.0)+x924),-1);
if(!x925.valid){
continue;
}
cj1array[numsolutions]=((x925.value)*(((1.0)+(((-1.0)*x924)))));
CheckValue<IkReal> x926=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x926.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x926.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x927=htj2*htj2;
CheckValue<IkReal> x928=IKPowWithIntegerCheck(((1.0)+x927),-1);
if(!x928.valid){
continue;
}
cj2array[numsolutions]=((x928.value)*(((1.0)+(((-1.0)*x927)))));
CheckValue<IkReal> x929=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x929.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x929.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x930=htj3*htj3;
CheckValue<IkReal> x931=IKPowWithIntegerCheck(((1.0)+x930),-1);
if(!x931.valid){
continue;
}
cj3array[numsolutions]=((x931.value)*(((1.0)+(((-1.0)*x930)))));
CheckValue<IkReal> x932=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x932.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x932.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x933=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x933);
rxp1_0=(pz*r11);
rxp1_1=(r01*x933);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x934=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x934);
rxp1_0=(pz*r11);
rxp1_1=(r01*x934);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x935=IKPowWithIntegerCheck(r22,-1);
if(!x935.valid){
continue;
}
CheckValue<IkReal> x936=IKPowWithIntegerCheck(sj3,-1);
if(!x936.valid){
continue;
}
sj4array[0]=((x935.value)*(x936.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x937=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x937);
rxp1_0=(pz*r11);
rxp1_1=(r01*x937);
IkReal x938=((16.0)*sj4);
IkReal x939=(cj1*cj2);
IkReal x940=((4.0)*sj3);
IkReal x941=((8.0)*sj4);
IkReal x942=((4.0)*cj4);
IkReal x943=(sj1*sj2);
IkReal x944=((4.0)*sj4);
IkReal x945=(cj3*r02);
IkReal x946=((16.0)*sj3);
IkReal x947=((8.0)*sj3);
IkReal x948=((12.0)*cj4);
IkReal x949=((12.0)*sj4);
IkReal x950=(cj3*r12);
IkReal x951=(r11*x940);
IkReal x952=(r01*x940);
IkReal x953=(r01*x943);
IkReal x954=(cj3*cj4*r01);
IkReal x955=(cj3*cj4*r11);
IkReal x956=(cj3*r10*x942);
IkReal x957=(x949*x950);
IkReal x958=(cj3*r00*x942);
IkReal x959=(x945*x949);
IkReal x960=(r00*x943*x944);
IkReal x961=(r02*x943*x948);
IkReal x962=(r00*x939*x944);
IkReal x963=(r02*x939*x948);
IkReal x964=(r10*x943*x944);
IkReal x965=(r12*x939*x948);
IkReal x966=(r12*x943*x948);
IkReal x967=(r10*x939*x944);
IkReal x968=(x962+x951);
IkReal x969=(x964+x952);
IkReal x970=(x960+x956);
IkReal x971=(x963+x957);
IkReal x972=(x967+x958);
IkReal x973=(x966+x959);
j5eval[0]=((((0.5)*(IKabs((x970+x961+(((-1.0)*x968))+(((-1.0)*x971)))))))+(((0.5)*(IKabs(((((-1.0)*x944*x950))+(((-1.0)*r02*x939*x942))+x968+((r02*x942*x943))+(((-1.0)*x970)))))))+(((0.5)*(IKabs(((((-1.0)*x938*x953))+((r01*x938*x939))+(((-16.0)*x955))+(((-1.0)*r10*x946)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x938*x939))+(((-1.0)*r00*x946))+(((-16.0)*x954))+((r11*x938*x943)))))))+(((0.5)*(IKabs((x965+x969+(((-1.0)*x972))+(((-1.0)*x973)))))))+(((0.5)*(IKabs((x972+x965+(((-1.0)*x969))+(((-1.0)*x973)))))))+(IKabs(((((-8.0)*x955))+(((-1.0)*x941*x953))+(((-1.0)*r10*x947))+((r01*x939*x941)))))+(IKabs(((((-1.0)*r00*x947))+(((-1.0)*r11*x939*x941))+(((-8.0)*x954))+((r11*x941*x943)))))+(((0.5)*(IKabs((((r12*x939*x942))+(((-1.0)*x944*x945))+(((-1.0)*r12*x942*x943))+x969+(((-1.0)*x972)))))))+(((0.5)*(IKabs((x961+x968+(((-1.0)*x970))+(((-1.0)*x971))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x974=(r10*sj3);
IkReal x975=(r01*sj4);
IkReal x976=(cj1*cj2);
IkReal x977=(cj3*cj4);
IkReal x978=(sj1*sj2);
IkReal x979=(cj4*r02);
IkReal x980=((4.0)*r11*sj3);
IkReal x981=(cj3*r12*sj4);
IkReal x982=((4.0)*r00*sj4);
IkReal x983=((4.0)*r10*x977);
IkReal x984=((12.0)*x981);
IkReal x985=((4.0)*x981);
IkReal x986=(x976*x982);
IkReal x987=(x978*x982);
IkReal x988=((12.0)*x978*x979);
IkReal x989=((12.0)*x976*x979);
IkReal x990=((4.0)*x978*x979);
IkReal x991=((4.0)*x976*x979);
IkReal x992=(x986+x980);
IkReal x993=(x987+x983);
IkReal x994=(x991+x985);
IkReal x995=(x989+x984);
IkReal x996=((((-8.0)*x975*x978))+(((-8.0)*x974))+(((8.0)*x975*x976))+(((-8.0)*r11*x977)));
op[0]=((((-1.0)*x993))+(((-1.0)*x994))+x992+x990);
op[1]=x996;
op[2]=((((-1.0)*x993))+(((-1.0)*x995))+x992+x988);
op[3]=((((-16.0)*x975*x978))+(((-16.0)*r11*x977))+(((16.0)*x975*x976))+(((-16.0)*x974)));
op[4]=((((-1.0)*x992))+(((-1.0)*x995))+x993+x988);
op[5]=x996;
op[6]=((((-1.0)*x992))+(((-1.0)*x994))+x993+x990);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x997=(cj1*cj2);
IkReal x998=((4.0)*cj4);
IkReal x999=(sj1*sj2);
IkReal x1000=((4.0)*sj4);
IkReal x1001=(r00*sj3);
IkReal x1002=(cj3*r02);
IkReal x1003=((4.0)*r01*sj3);
IkReal x1004=((16.0)*r11*sj4);
IkReal x1005=(cj3*cj4*r01);
IkReal x1006=((12.0)*cj4*r12);
IkReal x1007=((8.0)*r11*sj4);
IkReal x1008=(cj3*r00*x998);
IkReal x1009=((12.0)*sj4*x1002);
IkReal x1010=(x1000*x1002);
IkReal x1011=(r10*x1000*x997);
IkReal x1012=(r10*x1000*x999);
IkReal x1013=(x1006*x997);
IkReal x1014=(x1006*x999);
IkReal x1015=(r12*x997*x998);
IkReal x1016=(r12*x998*x999);
IkReal x1017=(x1012+x1003);
IkReal x1018=(x1011+x1008);
IkReal x1019=(x1016+x1010);
IkReal x1020=(x1014+x1009);
IkReal x1021=((((-8.0)*x1001))+(((-8.0)*x1005))+(((-1.0)*x1007*x997))+((x1007*x999)));
j5evalpoly[0]=(x1018+x1015+(((htj5*htj5*htj5*htj5)*((x1017+x1013+(((-1.0)*x1018))+(((-1.0)*x1020))))))+(((-1.0)*x1019))+(((-1.0)*x1017))+((htj5*x1021))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1015+x1017+(((-1.0)*x1019))+(((-1.0)*x1018))))))+(((htj5*htj5)*((x1018+x1013+(((-1.0)*x1017))+(((-1.0)*x1020))))))+((x1021*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-16.0)*x1001))+(((-16.0)*x1005))+(((-1.0)*x1004*x997))+((x1004*x999)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1022=(cj5*sj4);
IkReal x1023=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1023))+(((-1.0)*r00*x1022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1023))+((cj4*r12))+((r10*x1022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1023))+(((-1.0)*r00*x1022))))+IKsqr(((((-1.0)*r11*x1023))+((cj4*r12))+((r10*x1022))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1023))+(((-1.0)*r00*x1022))), ((((-1.0)*r11*x1023))+((cj4*r12))+((r10*x1022))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1024=IKcos(j0);
IkReal x1025=IKsin(j0);
IkReal x1026=(r02*sj4);
IkReal x1027=((1.0)*sj3);
IkReal x1028=(r12*sj4);
IkReal x1029=(cj3*cj4);
IkReal x1030=((1.0)*cj5);
IkReal x1031=(r11*sj5);
IkReal x1032=((1.0)*cj1);
IkReal x1033=((0.39225)*sj1);
IkReal x1034=(cj5*r01);
IkReal x1035=(r01*sj5);
IkReal x1036=(r00*sj5);
IkReal x1037=((1.0)*sj1);
IkReal x1038=((0.39225)*cj2);
IkReal x1039=(cj5*r11);
IkReal x1040=(r10*sj5);
IkReal x1041=((1.0)*cj4);
IkReal x1042=(sj2*x1024);
IkReal x1043=(sj2*x1025);
IkReal x1044=(cj4*cj5*sj3);
IkReal x1045=(cj1*x1024);
IkReal x1046=(cj2*x1024);
IkReal x1047=(cj1*x1025);
IkReal x1048=(cj2*x1025);
evalcond[0]=(((sj4*x1031))+x1024+(((-1.0)*r12*x1041))+(((-1.0)*r10*sj4*x1030)));
evalcond[1]=((((-1.0)*r02*x1041))+((sj4*x1035))+(((-1.0)*x1025))+(((-1.0)*r00*sj4*x1030)));
evalcond[2]=((((-0.10915)*x1025))+((x1038*x1045))+(((-1.0)*x1033*x1042))+(((-1.0)*px))+(((-0.09465)*x1034))+(((-0.09465)*x1036))+(((0.425)*x1045)));
evalcond[3]=(((x1038*x1047))+(((0.10915)*x1024))+(((-1.0)*x1033*x1043))+(((-0.09465)*x1040))+(((-1.0)*py))+(((-0.09465)*x1039))+(((0.425)*x1047)));
evalcond[4]=((((-1.0)*x1032*x1046))+(((-1.0)*r00*x1029*x1030))+((sj3*x1036))+((sj3*x1034))+((sj1*x1042))+((x1029*x1035))+((cj3*x1026)));
evalcond[5]=((((-1.0)*x1032*x1048))+((sj3*x1040))+((sj3*x1039))+((sj1*x1043))+((x1029*x1031))+((cj3*x1028))+(((-1.0)*r10*x1029*x1030)));
evalcond[6]=((((-1.0)*x1032*x1042))+((cj3*x1034))+((cj3*x1036))+(((-1.0)*x1026*x1027))+(((-1.0)*x1037*x1046))+((r00*x1044))+(((-1.0)*cj4*x1027*x1035)));
evalcond[7]=((((-1.0)*x1032*x1043))+((cj3*x1039))+(((-1.0)*x1037*x1048))+((cj3*x1040))+((r10*x1044))+(((-1.0)*cj4*x1027*x1031))+(((-1.0)*x1027*x1028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1049=IKPowWithIntegerCheck(cj3,-1);
if(!x1049.valid){
continue;
}
CheckValue<IkReal> x1050=IKPowWithIntegerCheck(r22,-1);
if(!x1050.valid){
continue;
}
sj4array[0]=((-1.0)*(x1049.value)*(x1050.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1051=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1051);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1051);
IkReal x1052=((16.0)*sj4);
IkReal x1053=(cj1*cj2);
IkReal x1054=((4.0)*sj3);
IkReal x1055=((8.0)*sj4);
IkReal x1056=((4.0)*cj4);
IkReal x1057=(sj1*sj2);
IkReal x1058=((4.0)*sj4);
IkReal x1059=(cj3*r02);
IkReal x1060=((16.0)*sj3);
IkReal x1061=((8.0)*sj3);
IkReal x1062=((12.0)*cj4);
IkReal x1063=((12.0)*sj4);
IkReal x1064=(cj3*r12);
IkReal x1065=(r11*x1054);
IkReal x1066=(r01*x1054);
IkReal x1067=(r01*x1057);
IkReal x1068=(cj3*cj4*r01);
IkReal x1069=(cj3*cj4*r11);
IkReal x1070=(cj3*r10*x1056);
IkReal x1071=(x1063*x1064);
IkReal x1072=(cj3*r00*x1056);
IkReal x1073=(x1059*x1063);
IkReal x1074=(r00*x1057*x1058);
IkReal x1075=(r02*x1057*x1062);
IkReal x1076=(r00*x1053*x1058);
IkReal x1077=(r02*x1053*x1062);
IkReal x1078=(r10*x1057*x1058);
IkReal x1079=(r12*x1053*x1062);
IkReal x1080=(r12*x1057*x1062);
IkReal x1081=(r10*x1053*x1058);
IkReal x1082=(x1076+x1065);
IkReal x1083=(x1078+x1066);
IkReal x1084=(x1074+x1070);
IkReal x1085=(x1077+x1071);
IkReal x1086=(x1072+x1081);
IkReal x1087=(x1073+x1080);
j5eval[0]=((((0.5)*(IKabs((x1079+x1083+(((-1.0)*x1086))+(((-1.0)*x1087)))))))+(IKabs(((((-1.0)*r10*x1061))+(((-1.0)*x1055*x1067))+((r01*x1053*x1055))+(((-8.0)*x1069)))))+(((0.5)*(IKabs((x1082+(((-1.0)*x1058*x1064))+(((-1.0)*r02*x1053*x1056))+((r02*x1056*x1057))+(((-1.0)*x1084)))))))+(((0.5)*(IKabs((x1083+(((-1.0)*x1058*x1059))+(((-1.0)*r12*x1056*x1057))+(((-1.0)*x1086))+((r12*x1053*x1056)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1060))+(((-1.0)*x1052*x1067))+(((-16.0)*x1069))+((r01*x1052*x1053)))))))+(((0.5)*(IKabs((x1075+x1084+(((-1.0)*x1085))+(((-1.0)*x1082)))))))+(((0.5)*(IKabs((x1075+x1082+(((-1.0)*x1084))+(((-1.0)*x1085)))))))+(((0.5)*(IKabs((((r11*x1052*x1057))+(((-1.0)*r00*x1060))+(((-1.0)*r11*x1052*x1053))+(((-16.0)*x1068)))))))+(IKabs(((((-1.0)*r00*x1061))+(((-1.0)*r11*x1053*x1055))+((r11*x1055*x1057))+(((-8.0)*x1068)))))+(((0.5)*(IKabs((x1079+x1086+(((-1.0)*x1083))+(((-1.0)*x1087))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1088=(r10*sj3);
IkReal x1089=(r01*sj4);
IkReal x1090=(cj1*cj2);
IkReal x1091=(cj3*cj4);
IkReal x1092=(sj1*sj2);
IkReal x1093=(cj4*r02);
IkReal x1094=((4.0)*r11*sj3);
IkReal x1095=(cj3*r12*sj4);
IkReal x1096=((4.0)*r00*sj4);
IkReal x1097=((4.0)*r10*x1091);
IkReal x1098=((12.0)*x1095);
IkReal x1099=((4.0)*x1095);
IkReal x1100=(x1090*x1096);
IkReal x1101=(x1092*x1096);
IkReal x1102=((12.0)*x1092*x1093);
IkReal x1103=((12.0)*x1090*x1093);
IkReal x1104=((4.0)*x1092*x1093);
IkReal x1105=((4.0)*x1090*x1093);
IkReal x1106=(x1100+x1094);
IkReal x1107=(x1101+x1097);
IkReal x1108=(x1105+x1099);
IkReal x1109=(x1103+x1098);
IkReal x1110=((((-8.0)*r11*x1091))+(((-8.0)*x1089*x1092))+(((-8.0)*x1088))+(((8.0)*x1089*x1090)));
op[0]=(x1106+x1104+(((-1.0)*x1107))+(((-1.0)*x1108)));
op[1]=x1110;
op[2]=(x1106+x1102+(((-1.0)*x1107))+(((-1.0)*x1109)));
op[3]=((((-16.0)*x1089*x1092))+(((16.0)*x1089*x1090))+(((-16.0)*x1088))+(((-16.0)*r11*x1091)));
op[4]=(x1107+x1102+(((-1.0)*x1106))+(((-1.0)*x1109)));
op[5]=x1110;
op[6]=(x1107+x1104+(((-1.0)*x1106))+(((-1.0)*x1108)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1111=(cj1*cj2);
IkReal x1112=((4.0)*cj4);
IkReal x1113=(sj1*sj2);
IkReal x1114=((4.0)*sj4);
IkReal x1115=(r00*sj3);
IkReal x1116=(cj3*r02);
IkReal x1117=((4.0)*r01*sj3);
IkReal x1118=((16.0)*r11*sj4);
IkReal x1119=(cj3*cj4*r01);
IkReal x1120=((12.0)*cj4*r12);
IkReal x1121=((8.0)*r11*sj4);
IkReal x1122=(cj3*r00*x1112);
IkReal x1123=((12.0)*sj4*x1116);
IkReal x1124=(x1114*x1116);
IkReal x1125=(r10*x1111*x1114);
IkReal x1126=(r10*x1113*x1114);
IkReal x1127=(x1111*x1120);
IkReal x1128=(x1113*x1120);
IkReal x1129=(r12*x1111*x1112);
IkReal x1130=(r12*x1112*x1113);
IkReal x1131=(x1117+x1126);
IkReal x1132=(x1122+x1125);
IkReal x1133=(x1124+x1130);
IkReal x1134=(x1128+x1123);
IkReal x1135=(((x1113*x1121))+(((-1.0)*x1111*x1121))+(((-8.0)*x1119))+(((-8.0)*x1115)));
j5evalpoly[0]=(x1129+x1132+(((htj5*htj5*htj5)*((((x1113*x1118))+(((-16.0)*x1119))+(((-16.0)*x1115))+(((-1.0)*x1111*x1118))))))+(((-1.0)*x1133))+(((-1.0)*x1131))+(((htj5*htj5*htj5*htj5)*((x1127+x1131+(((-1.0)*x1134))+(((-1.0)*x1132))))))+((x1135*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*((x1127+x1132+(((-1.0)*x1134))+(((-1.0)*x1131))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1129+x1131+(((-1.0)*x1133))+(((-1.0)*x1132))))))+((htj5*x1135)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1136=(cj5*sj4);
IkReal x1137=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1137))+(((-1.0)*r00*x1136)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1137))+((r10*x1136))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1137))+(((-1.0)*r00*x1136))))+IKsqr(((((-1.0)*r11*x1137))+((r10*x1136))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1137))+(((-1.0)*r00*x1136))), ((((-1.0)*r11*x1137))+((r10*x1136))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1138=IKcos(j0);
IkReal x1139=IKsin(j0);
IkReal x1140=(r02*sj4);
IkReal x1141=((1.0)*sj3);
IkReal x1142=(r12*sj4);
IkReal x1143=(cj3*cj4);
IkReal x1144=((1.0)*cj5);
IkReal x1145=(r11*sj5);
IkReal x1146=((1.0)*cj1);
IkReal x1147=((0.39225)*sj1);
IkReal x1148=(cj5*r01);
IkReal x1149=(r01*sj5);
IkReal x1150=(r00*sj5);
IkReal x1151=((1.0)*sj1);
IkReal x1152=((0.39225)*cj2);
IkReal x1153=(cj5*r11);
IkReal x1154=(r10*sj5);
IkReal x1155=((1.0)*cj4);
IkReal x1156=(sj2*x1138);
IkReal x1157=(sj2*x1139);
IkReal x1158=(cj4*cj5*sj3);
IkReal x1159=(cj1*x1138);
IkReal x1160=(cj2*x1138);
IkReal x1161=(cj1*x1139);
IkReal x1162=(cj2*x1139);
evalcond[0]=(((sj4*x1145))+x1138+(((-1.0)*r10*sj4*x1144))+(((-1.0)*r12*x1155)));
evalcond[1]=(((sj4*x1149))+(((-1.0)*r02*x1155))+(((-1.0)*r00*sj4*x1144))+(((-1.0)*x1139)));
evalcond[2]=((((0.425)*x1159))+((x1152*x1159))+(((-1.0)*x1147*x1156))+(((-1.0)*px))+(((-0.10915)*x1139))+(((-0.09465)*x1148))+(((-0.09465)*x1150)));
evalcond[3]=((((0.10915)*x1138))+(((-1.0)*x1147*x1157))+(((-1.0)*py))+((x1152*x1161))+(((0.425)*x1161))+(((-0.09465)*x1154))+(((-0.09465)*x1153)));
evalcond[4]=(((x1143*x1149))+((cj3*x1140))+(((-1.0)*r00*x1143*x1144))+((sj3*x1150))+((sj3*x1148))+((sj1*x1156))+(((-1.0)*x1146*x1160)));
evalcond[5]=(((x1143*x1145))+((cj3*x1142))+((sj3*x1154))+((sj3*x1153))+(((-1.0)*r10*x1143*x1144))+((sj1*x1157))+(((-1.0)*x1146*x1162)));
evalcond[6]=(((r00*x1158))+(((-1.0)*x1140*x1141))+((cj3*x1150))+((cj3*x1148))+(((-1.0)*cj4*x1141*x1149))+(((-1.0)*x1151*x1160))+(((-1.0)*x1146*x1156)));
evalcond[7]=(((cj3*x1154))+((cj3*x1153))+(((-1.0)*x1141*x1142))+(((-1.0)*cj4*x1141*x1145))+(((-1.0)*x1151*x1162))+(((-1.0)*x1146*x1157))+((r10*x1158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1163=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1164=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1164);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1164);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1165=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1165);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1165);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1166=IKPowWithIntegerCheck(r22,-1);
if(!x1166.valid){
continue;
}
sj4array[0]=((-1.0)*(x1166.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1167=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1167);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1167);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1169 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1169.valid){
continue;
}
IkReal x1168=x1169.value;
j5array[0]=((-1.0)*x1168);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1168)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1170=(cj5*sj4);
IkReal x1171=(sj4*sj5);
if( IKabs((((r01*x1171))+(((-1.0)*r00*x1170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1170))+(((-1.0)*r11*x1171)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1171))+(((-1.0)*r00*x1170))))+IKsqr((((r10*x1170))+(((-1.0)*r11*x1171))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1171))+(((-1.0)*r00*x1170))), (((r10*x1170))+(((-1.0)*r11*x1171))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1172=IKcos(j0);
IkReal x1173=IKsin(j0);
IkReal x1174=(cj5*r01);
IkReal x1175=(sj4*sj5);
IkReal x1176=(cj5*r11);
IkReal x1177=((0.425)*cj1);
IkReal x1178=(r00*sj5);
IkReal x1179=(r10*sj5);
IkReal x1180=((1.0)*cj1*sj2);
IkReal x1181=((1.0)*cj2*sj1);
IkReal x1182=((1.0)*cj5*sj4);
evalcond[0]=(x1172+(((-1.0)*r10*x1182))+((r11*x1175)));
evalcond[1]=(((r01*x1175))+(((-1.0)*r00*x1182))+(((-1.0)*x1173)));
evalcond[2]=(x1174+x1178+(((-1.0)*x1172*x1180))+(((-1.0)*x1172*x1181)));
evalcond[3]=(x1176+x1179+(((-1.0)*x1173*x1181))+(((-1.0)*x1173*x1180)));
evalcond[4]=((((-0.10915)*x1173))+(((-0.09465)*x1178))+(((-0.09465)*x1174))+(((-1.0)*px))+((x1172*x1177)));
evalcond[5]=(((x1173*x1177))+(((-0.09465)*x1179))+(((-0.09465)*x1176))+(((0.10915)*x1172))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1183=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1183);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1183);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1184=IKPowWithIntegerCheck(r22,-1);
if(!x1184.valid){
continue;
}
sj4array[0]=((x1184.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1185=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1185);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1185);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1187 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1187.valid){
continue;
}
IkReal x1186=x1187.value;
j5array[0]=((-1.0)*x1186);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1186)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1188=(cj5*sj4);
IkReal x1189=(sj4*sj5);
if( IKabs((((r01*x1189))+(((-1.0)*r00*x1188)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1188))+(((-1.0)*r11*x1189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1189))+(((-1.0)*r00*x1188))))+IKsqr((((r10*x1188))+(((-1.0)*r11*x1189))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1189))+(((-1.0)*r00*x1188))), (((r10*x1188))+(((-1.0)*r11*x1189))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1190=IKcos(j0);
IkReal x1191=IKsin(j0);
IkReal x1192=(sj4*sj5);
IkReal x1193=(cj5*r11);
IkReal x1194=((1.0)*sj5);
IkReal x1195=((0.425)*cj1);
IkReal x1196=((0.09465)*sj5);
IkReal x1197=((1.0)*cj5);
IkReal x1198=((1.0)*cj1*sj2);
IkReal x1199=((1.0)*cj2*sj1);
evalcond[0]=(x1190+((r11*x1192))+(((-1.0)*r10*sj4*x1197)));
evalcond[1]=((((-1.0)*r00*sj4*x1197))+((r01*x1192))+(((-1.0)*x1191)));
evalcond[2]=((((-1.0)*r00*x1196))+(((-0.09465)*cj5*r01))+(((-0.10915)*x1191))+(((-1.0)*px))+((x1190*x1195)));
evalcond[3]=((((-0.09465)*x1193))+(((-1.0)*r10*x1196))+(((0.10915)*x1190))+(((-1.0)*py))+((x1191*x1195)));
evalcond[4]=((((-1.0)*r00*x1194))+(((-1.0)*x1190*x1198))+(((-1.0)*x1190*x1199))+(((-1.0)*r01*x1197)));
evalcond[5]=((((-1.0)*x1191*x1199))+(((-1.0)*x1191*x1198))+(((-1.0)*r10*x1194))+(((-1.0)*x1193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1200=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1200);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1200);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1201=IKPowWithIntegerCheck(r22,-1);
if(!x1201.valid){
continue;
}
sj4array[0]=((x1201.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1202=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1202);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1202);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1204 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1204.valid){
continue;
}
IkReal x1203=x1204.value;
j5array[0]=((-1.0)*x1203);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1203)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1205=(cj5*sj4);
IkReal x1206=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1205))+((r01*x1206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1205))+(((-1.0)*r11*x1206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1205))+((r01*x1206))))+IKsqr((((r10*x1205))+(((-1.0)*r11*x1206))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1205))+((r01*x1206))), (((r10*x1205))+(((-1.0)*r11*x1206))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1207=IKcos(j0);
IkReal x1208=IKsin(j0);
IkReal x1209=(cj5*r01);
IkReal x1210=(sj4*sj5);
IkReal x1211=(r00*sj5);
IkReal x1212=(sj1*sj2);
IkReal x1213=(cj5*r11);
IkReal x1214=((0.39225)*cj2);
IkReal x1215=(r10*sj5);
IkReal x1216=((0.39225)*x1212);
IkReal x1217=(cj1*x1207);
IkReal x1218=((1.0)*x1208);
IkReal x1219=((1.0)*cj5*sj4);
IkReal x1220=(cj1*x1208);
evalcond[0]=(x1207+((r11*x1210))+(((-1.0)*r10*x1219)));
evalcond[1]=((((-1.0)*r00*x1219))+((r01*x1210))+(((-1.0)*x1218)));
evalcond[2]=(x1209+x1211+(((-1.0)*cj2*x1217))+((x1207*x1212)));
evalcond[3]=(x1213+x1215+(((-1.0)*cj1*cj2*x1218))+((x1208*x1212)));
evalcond[4]=(((x1214*x1217))+(((0.425)*x1217))+(((-1.0)*x1207*x1216))+(((-0.09465)*x1211))+(((-0.10915)*x1208))+(((-1.0)*px))+(((-0.09465)*x1209)));
evalcond[5]=(((x1214*x1220))+(((-1.0)*x1208*x1216))+(((-0.09465)*x1213))+(((-0.09465)*x1215))+(((0.10915)*x1207))+(((-1.0)*py))+(((0.425)*x1220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1221=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1221);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1221);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1222=IKPowWithIntegerCheck(r22,-1);
if(!x1222.valid){
continue;
}
sj4array[0]=((-1.0)*(x1222.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1223=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1223);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1223);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1225 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1225.valid){
continue;
}
IkReal x1224=x1225.value;
j5array[0]=((-1.0)*x1224);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1224)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1226=(cj5*sj4);
IkReal x1227=(sj4*sj5);
if( IKabs((((r01*x1227))+(((-1.0)*r00*x1226)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1227))+((r10*x1226)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1227))+(((-1.0)*r00*x1226))))+IKsqr(((((-1.0)*r11*x1227))+((r10*x1226))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1227))+(((-1.0)*r00*x1226))), ((((-1.0)*r11*x1227))+((r10*x1226))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1228=IKcos(j0);
IkReal x1229=IKsin(j0);
IkReal x1230=(sj4*sj5);
IkReal x1231=(cj5*r11);
IkReal x1232=(cj5*r01);
IkReal x1233=((1.0)*sj5);
IkReal x1234=((0.09465)*sj5);
IkReal x1235=(sj1*sj2);
IkReal x1236=((0.39225)*cj2);
IkReal x1237=((0.39225)*x1235);
IkReal x1238=((1.0)*x1229);
IkReal x1239=(cj1*x1228);
IkReal x1240=((1.0)*cj5*sj4);
IkReal x1241=(cj1*x1229);
evalcond[0]=(x1228+(((-1.0)*r10*x1240))+((r11*x1230)));
evalcond[1]=(((r01*x1230))+(((-1.0)*x1238))+(((-1.0)*r00*x1240)));
evalcond[2]=((((-1.0)*r00*x1233))+(((-1.0)*x1232))+(((-1.0)*cj2*x1239))+((x1228*x1235)));
evalcond[3]=((((-1.0)*cj1*cj2*x1238))+(((-1.0)*x1231))+(((-1.0)*r10*x1233))+((x1229*x1235)));
evalcond[4]=((((-1.0)*r00*x1234))+(((-1.0)*px))+(((-1.0)*x1228*x1237))+(((-0.09465)*x1232))+(((0.425)*x1239))+((x1236*x1239))+(((-0.10915)*x1229)));
evalcond[5]=(((x1236*x1241))+(((-1.0)*py))+(((-0.09465)*x1231))+(((-1.0)*x1229*x1237))+(((0.10915)*x1228))+(((-1.0)*r10*x1234))+(((0.425)*x1241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1242=IKPowWithIntegerCheck(r22,-1);
if(!x1242.valid){
continue;
}
CheckValue<IkReal> x1243=IKPowWithIntegerCheck(sj3,-1);
if(!x1243.valid){
continue;
}
sj4array[0]=((x1242.value)*(x1243.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1244=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1244);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1244);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1245=((4.0)*r01);
IkReal x1246=((16.0)*r00);
IkReal x1247=(cj3*sj2);
IkReal x1248=((8.0)*r00);
IkReal x1249=(cj2*cj3);
IkReal x1250=(cj4*r01);
IkReal x1251=((16.0)*cj1);
IkReal x1252=((8.0)*sj1);
IkReal x1253=((16.0)*sj1);
IkReal x1254=((8.0)*cj1);
IkReal x1255=(sj2*sj3);
IkReal x1256=(cj2*sj3);
IkReal x1257=(sj1*x1256);
IkReal x1258=((4.0)*cj4*r00);
IkReal x1259=(((x1245*x1257))+((cj1*x1245*x1255))+((sj1*x1255*x1258))+((sj1*x1245*x1247)));
IkReal x1260=(((cj1*x1247*x1258))+((cj1*x1256*x1258))+((cj1*x1245*x1249))+((sj1*x1249*x1258)));
IkReal x1261=((((-1.0)*x1259))+x1260);
IkReal x1262=(((sj1*x1247*x1248))+((x1247*x1250*x1254))+((x1250*x1254*x1256))+(((-1.0)*x1250*x1252*x1255))+((cj1*x1248*x1255))+((x1249*x1250*x1252))+((x1248*x1257))+(((-1.0)*cj1*x1248*x1249)));
IkReal x1263=(x1259+(((-1.0)*x1260)));
op[0]=x1261;
op[1]=x1262;
op[2]=x1261;
op[3]=(((x1246*x1257))+((x1247*x1250*x1251))+((cj1*x1246*x1255))+(((-1.0)*x1250*x1253*x1255))+(((-1.0)*cj1*x1246*x1249))+((x1249*x1250*x1253))+((x1250*x1251*x1256))+((sj1*x1246*x1247)));
op[4]=x1263;
op[5]=x1262;
op[6]=x1263;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1264=(cj5*sj4);
IkReal x1265=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1264))+((r01*x1265)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1264))+(((-1.0)*r11*x1265)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1264))+((r01*x1265))))+IKsqr((((r10*x1264))+(((-1.0)*r11*x1265))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1264))+((r01*x1265))), (((r10*x1264))+(((-1.0)*r11*x1265))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1266=IKcos(j0);
IkReal x1267=IKsin(j0);
IkReal x1268=((0.39225)*sj1);
IkReal x1269=((1.0)*cj3);
IkReal x1270=((1.0)*cj1);
IkReal x1271=(r11*sj5);
IkReal x1272=(cj5*r01);
IkReal x1273=(cj5*r11);
IkReal x1274=(r01*sj5);
IkReal x1275=(cj3*cj4);
IkReal x1276=(r00*sj5);
IkReal x1277=((0.39225)*cj2);
IkReal x1278=((1.0)*sj1);
IkReal x1279=(r10*sj5);
IkReal x1280=(sj2*x1266);
IkReal x1281=(cj4*cj5*r00);
IkReal x1282=(cj1*x1267);
IkReal x1283=(sj2*x1267);
IkReal x1284=(cj4*cj5*r10);
IkReal x1285=((1.0)*cj4*sj3);
IkReal x1286=(cj1*x1266);
IkReal x1287=(cj2*x1266);
IkReal x1288=((1.0)*cj5*sj4);
evalcond[0]=(x1266+((sj4*x1271))+(((-1.0)*r10*x1288)));
evalcond[1]=(((sj4*x1274))+(((-1.0)*r00*x1288))+(((-1.0)*x1267)));
evalcond[2]=(((sj3*x1272))+((sj3*x1276))+(((-1.0)*x1270*x1287))+((x1274*x1275))+(((-1.0)*x1269*x1281))+((sj1*x1280)));
evalcond[3]=(((sj3*x1279))+((sj3*x1273))+(((-1.0)*x1269*x1284))+((x1271*x1275))+(((-1.0)*cj2*x1267*x1270))+((sj1*x1283)));
evalcond[4]=((((-1.0)*x1270*x1280))+((cj3*x1272))+((cj3*x1276))+(((-1.0)*x1278*x1287))+((sj3*x1281))+(((-1.0)*x1274*x1285)));
evalcond[5]=((((-1.0)*x1270*x1283))+((cj3*x1279))+((cj3*x1273))+(((-1.0)*x1271*x1285))+((sj3*x1284))+(((-1.0)*cj2*x1267*x1278)));
evalcond[6]=((((0.425)*x1286))+(((-0.09465)*x1272))+(((-0.09465)*x1276))+(((-0.10915)*x1267))+(((-1.0)*px))+((x1277*x1286))+(((-1.0)*x1268*x1280)));
evalcond[7]=((((0.425)*x1282))+(((-0.09465)*x1279))+(((-0.09465)*x1273))+(((0.10915)*x1266))+(((-1.0)*py))+((x1277*x1282))+(((-1.0)*x1268*x1283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1289=IKPowWithIntegerCheck(cj3,-1);
if(!x1289.valid){
continue;
}
CheckValue<IkReal> x1290=IKPowWithIntegerCheck(r22,-1);
if(!x1290.valid){
continue;
}
sj4array[0]=((-1.0)*(x1289.value)*(x1290.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1291=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1291);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1291);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1292=((4.0)*r01);
IkReal x1293=((16.0)*r00);
IkReal x1294=(cj3*sj2);
IkReal x1295=((8.0)*r00);
IkReal x1296=(cj2*cj3);
IkReal x1297=(cj4*r01);
IkReal x1298=((16.0)*cj1);
IkReal x1299=((8.0)*sj1);
IkReal x1300=((16.0)*sj1);
IkReal x1301=((8.0)*cj1);
IkReal x1302=(sj2*sj3);
IkReal x1303=(cj2*sj3);
IkReal x1304=(sj1*x1303);
IkReal x1305=((4.0)*cj4*r00);
IkReal x1306=(((x1292*x1304))+((sj1*x1302*x1305))+((cj1*x1292*x1302))+((sj1*x1292*x1294)));
IkReal x1307=(((sj1*x1296*x1305))+((cj1*x1294*x1305))+((cj1*x1303*x1305))+((cj1*x1292*x1296)));
IkReal x1308=(x1307+(((-1.0)*x1306)));
IkReal x1309=(((x1296*x1297*x1299))+(((-1.0)*x1297*x1299*x1302))+((x1295*x1304))+((sj1*x1294*x1295))+((x1294*x1297*x1301))+(((-1.0)*cj1*x1295*x1296))+((cj1*x1295*x1302))+((x1297*x1301*x1303)));
IkReal x1310=(x1306+(((-1.0)*x1307)));
op[0]=x1308;
op[1]=x1309;
op[2]=x1308;
op[3]=((((-1.0)*cj1*x1293*x1296))+((sj1*x1293*x1294))+((x1297*x1298*x1303))+((x1293*x1304))+((x1294*x1297*x1298))+((cj1*x1293*x1302))+(((-1.0)*x1297*x1300*x1302))+((x1296*x1297*x1300)));
op[4]=x1310;
op[5]=x1309;
op[6]=x1310;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1311=(cj5*sj4);
IkReal x1312=(sj4*sj5);
if( IKabs((((r01*x1312))+(((-1.0)*r00*x1311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1312))+((r10*x1311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1312))+(((-1.0)*r00*x1311))))+IKsqr(((((-1.0)*r11*x1312))+((r10*x1311))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1312))+(((-1.0)*r00*x1311))), ((((-1.0)*r11*x1312))+((r10*x1311))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1313=IKcos(j0);
IkReal x1314=IKsin(j0);
IkReal x1315=((0.39225)*sj1);
IkReal x1316=((1.0)*cj3);
IkReal x1317=((1.0)*cj1);
IkReal x1318=(r11*sj5);
IkReal x1319=(cj5*r01);
IkReal x1320=(cj5*r11);
IkReal x1321=(r01*sj5);
IkReal x1322=(cj3*cj4);
IkReal x1323=(r00*sj5);
IkReal x1324=((0.39225)*cj2);
IkReal x1325=((1.0)*sj1);
IkReal x1326=(r10*sj5);
IkReal x1327=(sj2*x1313);
IkReal x1328=(cj4*cj5*r00);
IkReal x1329=(cj1*x1314);
IkReal x1330=(sj2*x1314);
IkReal x1331=(cj4*cj5*r10);
IkReal x1332=((1.0)*cj4*sj3);
IkReal x1333=(cj1*x1313);
IkReal x1334=(cj2*x1313);
IkReal x1335=((1.0)*cj5*sj4);
evalcond[0]=(x1313+((sj4*x1318))+(((-1.0)*r10*x1335)));
evalcond[1]=((((-1.0)*x1314))+((sj4*x1321))+(((-1.0)*r00*x1335)));
evalcond[2]=(((sj3*x1319))+((sj3*x1323))+((x1321*x1322))+(((-1.0)*x1316*x1328))+((sj1*x1327))+(((-1.0)*x1317*x1334)));
evalcond[3]=(((sj3*x1320))+((sj3*x1326))+(((-1.0)*x1316*x1331))+((sj1*x1330))+(((-1.0)*cj2*x1314*x1317))+((x1318*x1322)));
evalcond[4]=((((-1.0)*x1325*x1334))+((sj3*x1328))+((cj3*x1319))+((cj3*x1323))+(((-1.0)*x1321*x1332))+(((-1.0)*x1317*x1327)));
evalcond[5]=((((-1.0)*x1318*x1332))+((sj3*x1331))+((cj3*x1320))+((cj3*x1326))+(((-1.0)*cj2*x1314*x1325))+(((-1.0)*x1317*x1330)));
evalcond[6]=((((-1.0)*x1315*x1327))+(((-0.10915)*x1314))+(((0.425)*x1333))+(((-1.0)*px))+((x1324*x1333))+(((-0.09465)*x1319))+(((-0.09465)*x1323)));
evalcond[7]=((((0.10915)*x1313))+((x1324*x1329))+(((-1.0)*py))+(((-1.0)*x1315*x1330))+(((-0.09465)*x1320))+(((-0.09465)*x1326))+(((0.425)*x1329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1338 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1338.valid){
continue;
}
IkReal x1336=((1.0)*(x1338.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1339=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1339.valid){
continue;
}
if( (((-1.0)*(x1339.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1339.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1337=((-1.0)*(IKasin(((-1.0)*(x1339.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1336))+(((-1.0)*x1337)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((1.0)*x1337))+(((-1.0)*x1336)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1340=cj5*cj5;
IkReal x1341=r21*r21;
IkReal x1342=(sj3*x1340);
IkReal x1343=(((sj3*(r22*r22)))+((x1342*(r20*r20)))+(((-1.0)*x1341*x1342))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1341)));
j4eval[0]=x1343;
j4eval[1]=IKsign(x1343);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1344=cj5*cj5;
IkReal x1345=r21*r21;
IkReal x1346=((1.0)*cj3);
IkReal x1347=(cj3*x1344);
IkReal x1348=((((-1.0)*x1344*x1346*(r20*r20)))+((x1345*x1347))+(((-1.0)*x1345*x1346))+(((2.0)*cj3*cj5*r20*r21*sj5))+(((-1.0)*x1346*(r22*r22))));
j4eval[0]=x1348;
j4eval[1]=IKsign(x1348);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1349=cj1*cj1;
IkReal x1350=cj2*cj2;
IkReal x1351=(cj1*sj1*sj2);
IkReal x1352=(cj2*x1349);
IkReal x1353=(x1349*x1350);
j0eval[0]=((6.19369221392727)+x1349+(((-12.4570625281677)*x1351))+(((-11.4971359451148)*cj2*x1351))+(((12.4570625281677)*x1352))+(((-5.74856797255738)*x1350))+(((11.4971359451148)*x1353)));
j0eval[1]=IKsign(((66309514.0)+(((133365000.0)*x1352))+(((123088050.0)*x1353))+(((10705975.0)*x1349))+(((-123088050.0)*cj2*x1351))+(((-133365000.0)*x1351))+(((-61544025.0)*x1350))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1354=((1.0)*cj5);
IkReal x1355=((1.0)*sj5);
IkReal x1356=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1356;
j0eval[1]=((IKabs(((((-1.0)*r00*x1355))+(((-1.0)*r01*x1354)))))+(IKabs(((((-1.0)*r10*x1355))+(((-1.0)*r11*x1354))))));
j0eval[2]=IKsign(x1356);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1357=cj5*cj5;
IkReal x1358=r21*r21;
IkReal x1359=(sj1*sj2);
IkReal x1360=(r21*sj5);
IkReal x1361=(cj5*r20);
IkReal x1362=(cj1*cj2);
IkReal x1363=(x1358+(((-2.0)*x1360*x1361))+(r22*r22)+(((-1.0)*x1357*x1358))+((x1357*(r20*r20))));
j4eval[0]=x1363;
j4eval[1]=IKsign(x1363);
j4eval[2]=((IKabs((((r22*x1359))+(((-1.0)*r22*x1362)))))+(IKabs((((x1361*x1362))+((x1359*x1360))+(((-1.0)*x1359*x1361))+(((-1.0)*x1360*x1362))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1364=IKsin(j0);
IkReal x1365=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x1364))+(((0.425)*x1365)));
evalcond[1]=((((0.10915)*x1365))+(((-1.0)*py))+(((0.425)*x1364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1366=((1.0)*cj5);
IkReal x1367=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1366)));
j4eval[0]=x1367;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1366))))));
j4eval[2]=IKsign(x1367);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1368=((1.0)*cj5);
IkReal x1369=((((-1.0)*r11*x1368))+(((-1.0)*r10*sj5)));
j4eval[0]=x1369;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1368))))));
j4eval[2]=IKsign(x1369);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1370=cj5*cj5;
IkReal x1371=((1.0)*sj5);
IkReal x1372=(cj5*r20);
IkReal x1373=(r11*r21);
IkReal x1374=(x1373+((r10*r20*x1370))+((r12*r22))+(((-1.0)*r11*x1371*x1372))+(((-1.0)*x1370*x1373))+(((-1.0)*cj5*r10*r21*x1371)));
j4eval[0]=x1374;
j4eval[1]=IKsign(x1374);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1371))+((cj0*x1372)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1375=cj5*cj5;
IkReal x1376=((1.0)*sj5);
IkReal x1377=(cj5*r20);
IkReal x1378=(r11*r21);
CheckValue<IkReal> x1379=IKPowWithIntegerCheck(IKsign((x1378+((r10*r20*x1375))+((r12*r22))+(((-1.0)*x1375*x1378))+(((-1.0)*cj5*r10*r21*x1376))+(((-1.0)*r11*x1376*x1377)))),-1);
if(!x1379.valid){
continue;
}
CheckValue<IkReal> x1380 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1376))+((cj0*x1377)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1379.value)))+(x1380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1381=IKsin(j4);
IkReal x1382=IKcos(j4);
IkReal x1383=((1.0)*sj0);
IkReal x1384=(cj5*r00);
IkReal x1385=(r11*sj5);
IkReal x1386=(cj5*r10);
IkReal x1387=(r21*sj5);
IkReal x1388=(cj5*r20);
IkReal x1389=(r01*sj5);
IkReal x1390=((1.0)*x1382);
IkReal x1391=((1.0)*x1381);
evalcond[0]=(((x1381*x1387))+(((-1.0)*r22*x1390))+(((-1.0)*x1388*x1391)));
evalcond[1]=((((-1.0)*r22*x1391))+(((-1.0)*x1387*x1390))+((x1382*x1388)));
evalcond[2]=(((x1381*x1385))+(((-1.0)*r12*x1390))+cj0+(((-1.0)*x1386*x1391)));
evalcond[3]=((((-1.0)*x1383))+((x1381*x1389))+(((-1.0)*x1384*x1391))+(((-1.0)*r02*x1390)));
evalcond[4]=((((-1.0)*r02*x1391))+(((-1.0)*x1389*x1390))+(((-1.0)*cj0))+((x1382*x1384)));
evalcond[5]=((((-1.0)*x1383))+(((-1.0)*x1385*x1390))+(((-1.0)*r12*x1391))+((x1382*x1386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1392=((1.0)*cj5);
CheckValue<IkReal> x1393 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1393.valid){
continue;
}
CheckValue<IkReal> x1394=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1392)))),-1);
if(!x1394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1393.value)+(((1.5707963267949)*(x1394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1395=IKsin(j4);
IkReal x1396=IKcos(j4);
IkReal x1397=((1.0)*sj0);
IkReal x1398=(cj5*r00);
IkReal x1399=(r11*sj5);
IkReal x1400=(cj5*r10);
IkReal x1401=(r21*sj5);
IkReal x1402=(cj5*r20);
IkReal x1403=(r01*sj5);
IkReal x1404=((1.0)*x1396);
IkReal x1405=((1.0)*x1395);
evalcond[0]=((((-1.0)*r22*x1404))+((x1395*x1401))+(((-1.0)*x1402*x1405)));
evalcond[1]=(((x1396*x1402))+(((-1.0)*r22*x1405))+(((-1.0)*x1401*x1404)));
evalcond[2]=((((-1.0)*r12*x1404))+cj0+((x1395*x1399))+(((-1.0)*x1400*x1405)));
evalcond[3]=((((-1.0)*x1398*x1405))+((x1395*x1403))+(((-1.0)*r02*x1404))+(((-1.0)*x1397)));
evalcond[4]=((((-1.0)*r02*x1405))+((x1396*x1398))+(((-1.0)*x1403*x1404))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1405))+(((-1.0)*x1399*x1404))+((x1396*x1400))+(((-1.0)*x1397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1406=((1.0)*cj5);
CheckValue<IkReal> x1407=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1406)))),-1);
if(!x1407.valid){
continue;
}
CheckValue<IkReal> x1408 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1407.value)))+(x1408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1409=IKsin(j4);
IkReal x1410=IKcos(j4);
IkReal x1411=((1.0)*sj0);
IkReal x1412=(cj5*r00);
IkReal x1413=(r11*sj5);
IkReal x1414=(cj5*r10);
IkReal x1415=(r21*sj5);
IkReal x1416=(cj5*r20);
IkReal x1417=(r01*sj5);
IkReal x1418=((1.0)*x1410);
IkReal x1419=((1.0)*x1409);
evalcond[0]=((((-1.0)*r22*x1418))+(((-1.0)*x1416*x1419))+((x1409*x1415)));
evalcond[1]=((((-1.0)*x1415*x1418))+(((-1.0)*r22*x1419))+((x1410*x1416)));
evalcond[2]=(cj0+(((-1.0)*x1414*x1419))+(((-1.0)*r12*x1418))+((x1409*x1413)));
evalcond[3]=((((-1.0)*x1411))+(((-1.0)*x1412*x1419))+(((-1.0)*r02*x1418))+((x1409*x1417)));
evalcond[4]=((((-1.0)*x1417*x1418))+(((-1.0)*r02*x1419))+((x1410*x1412))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1411))+(((-1.0)*x1413*x1418))+((x1410*x1414))+(((-1.0)*r12*x1419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1420=IKsin(j0);
IkReal x1421=IKcos(j0);
evalcond[0]=((((0.425)*x1421))+(((-1.0)*px))+(((-0.10915)*x1420)));
evalcond[1]=((((0.425)*x1420))+(((-1.0)*py))+(((0.10915)*x1421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1422=((1.0)*cj5);
IkReal x1423=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1422)));
j4eval[0]=x1423;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1422))))));
j4eval[2]=IKsign(x1423);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1424=cj5*cj5;
IkReal x1425=((1.0)*r21);
IkReal x1426=(cj5*sj5);
IkReal x1427=((1.0)*r20);
IkReal x1428=((((-1.0)*r00*x1425*x1426))+(((-1.0)*r01*x1424*x1425))+((r00*r20*x1424))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x1426*x1427)));
j4eval[0]=x1428;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1427)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1428);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1429=cj5*cj5;
IkReal x1430=(r21*sj5);
IkReal x1431=(r11*r21);
IkReal x1432=((1.0)*cj5*r20);
IkReal x1433=((((-1.0)*x1429*x1431))+(((-1.0)*cj5*r10*x1430))+(((-1.0)*r11*sj5*x1432))+((r12*r22))+x1431+((r10*r20*x1429)));
j4eval[0]=x1433;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1432))+((sj0*x1430))))));
j4eval[2]=IKsign(x1433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1434=cj5*cj5;
IkReal x1435=(r21*sj5);
IkReal x1436=(r11*r21);
IkReal x1437=((1.0)*cj5*r20);
CheckValue<IkReal> x1438 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1437))+((sj0*x1435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1438.valid){
continue;
}
CheckValue<IkReal> x1439=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1435))+((r10*r20*x1434))+(((-1.0)*r11*sj5*x1437))+((r12*r22))+(((-1.0)*x1434*x1436))+x1436)),-1);
if(!x1439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1438.value)+(((1.5707963267949)*(x1439.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1440=IKsin(j4);
IkReal x1441=IKcos(j4);
IkReal x1442=(r11*sj5);
IkReal x1443=(cj5*r00);
IkReal x1444=(cj5*r10);
IkReal x1445=(r21*sj5);
IkReal x1446=(cj5*r20);
IkReal x1447=(r01*sj5);
IkReal x1448=((1.0)*x1441);
IkReal x1449=((1.0)*x1440);
evalcond[0]=((((-1.0)*x1446*x1449))+(((-1.0)*r22*x1448))+((x1440*x1445)));
evalcond[1]=((((-1.0)*r22*x1449))+(((-1.0)*x1445*x1448))+((x1441*x1446)));
evalcond[2]=(cj0+((x1440*x1442))+(((-1.0)*r12*x1448))+(((-1.0)*x1444*x1449)));
evalcond[3]=(cj0+((x1441*x1443))+(((-1.0)*x1447*x1448))+(((-1.0)*r02*x1449)));
evalcond[4]=(sj0+((x1441*x1444))+(((-1.0)*r12*x1449))+(((-1.0)*x1442*x1448)));
evalcond[5]=((((-1.0)*sj0))+((x1440*x1447))+(((-1.0)*r02*x1448))+(((-1.0)*x1443*x1449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1450=cj5*cj5;
IkReal x1451=((1.0)*r21);
IkReal x1452=(cj5*sj5);
IkReal x1453=((1.0)*r20);
CheckValue<IkReal> x1454=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1452*x1453))+(((-1.0)*r00*x1451*x1452))+((r01*r21))+((r00*r20*x1450))+(((-1.0)*r01*x1450*x1451))+((r02*r22)))),-1);
if(!x1454.valid){
continue;
}
CheckValue<IkReal> x1455 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1454.value)))+(x1455.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1456=IKsin(j4);
IkReal x1457=IKcos(j4);
IkReal x1458=(r11*sj5);
IkReal x1459=(cj5*r00);
IkReal x1460=(cj5*r10);
IkReal x1461=(r21*sj5);
IkReal x1462=(cj5*r20);
IkReal x1463=(r01*sj5);
IkReal x1464=((1.0)*x1457);
IkReal x1465=((1.0)*x1456);
evalcond[0]=((((-1.0)*r22*x1464))+(((-1.0)*x1462*x1465))+((x1456*x1461)));
evalcond[1]=((((-1.0)*r22*x1465))+((x1457*x1462))+(((-1.0)*x1461*x1464)));
evalcond[2]=(((x1456*x1458))+cj0+(((-1.0)*x1460*x1465))+(((-1.0)*r12*x1464)));
evalcond[3]=((((-1.0)*r02*x1465))+cj0+(((-1.0)*x1463*x1464))+((x1457*x1459)));
evalcond[4]=(sj0+(((-1.0)*x1458*x1464))+((x1457*x1460))+(((-1.0)*r12*x1465)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1464))+(((-1.0)*x1459*x1465))+((x1456*x1463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1466=((1.0)*cj5);
CheckValue<IkReal> x1467 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1466)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1467.valid){
continue;
}
CheckValue<IkReal> x1468=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1466)))),-1);
if(!x1468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1467.value)+(((1.5707963267949)*(x1468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1469=IKsin(j4);
IkReal x1470=IKcos(j4);
IkReal x1471=(r11*sj5);
IkReal x1472=(cj5*r00);
IkReal x1473=(cj5*r10);
IkReal x1474=(r21*sj5);
IkReal x1475=(cj5*r20);
IkReal x1476=(r01*sj5);
IkReal x1477=((1.0)*x1470);
IkReal x1478=((1.0)*x1469);
evalcond[0]=((((-1.0)*r22*x1477))+(((-1.0)*x1475*x1478))+((x1469*x1474)));
evalcond[1]=((((-1.0)*r22*x1478))+(((-1.0)*x1474*x1477))+((x1470*x1475)));
evalcond[2]=(cj0+(((-1.0)*r12*x1477))+((x1469*x1471))+(((-1.0)*x1473*x1478)));
evalcond[3]=(cj0+(((-1.0)*x1476*x1477))+((x1470*x1472))+(((-1.0)*r02*x1478)));
evalcond[4]=(sj0+(((-1.0)*x1471*x1477))+(((-1.0)*r12*x1478))+((x1470*x1473)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1477))+(((-1.0)*x1472*x1478))+((x1469*x1476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1479=((1.0)*cj5);
IkReal x1480=((((-1.0)*r01*x1479))+(((-1.0)*r00*sj5)));
j4eval[0]=x1480;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1479)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1481=((1.0)*cj5);
IkReal x1482=((((-1.0)*r11*x1481))+(((-1.0)*r10*sj5)));
j4eval[0]=x1482;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1481))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1482);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1483=cj5*cj5;
IkReal x1484=((1.0)*sj5);
IkReal x1485=(cj5*r20);
IkReal x1486=(r11*r21);
IkReal x1487=((((-1.0)*x1483*x1486))+(((-1.0)*r11*x1484*x1485))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1484))+x1486+((r10*r20*x1483)));
j4eval[0]=x1487;
j4eval[1]=IKsign(x1487);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1484))+((cj0*x1485)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1488=cj5*cj5;
IkReal x1489=((1.0)*sj5);
IkReal x1490=(cj5*r20);
IkReal x1491=(r11*r21);
CheckValue<IkReal> x1492=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*cj5*r10*r21*x1489))+x1491+(((-1.0)*r11*x1489*x1490))+(((-1.0)*x1488*x1491))+((r10*r20*x1488)))),-1);
if(!x1492.valid){
continue;
}
CheckValue<IkReal> x1493 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1489))+((cj0*x1490)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1492.value)))+(x1493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1494=IKsin(j4);
IkReal x1495=IKcos(j4);
IkReal x1496=((1.0)*sj0);
IkReal x1497=(cj5*r00);
IkReal x1498=(r11*sj5);
IkReal x1499=(cj5*r10);
IkReal x1500=(r21*sj5);
IkReal x1501=(cj5*r20);
IkReal x1502=(r01*sj5);
IkReal x1503=((1.0)*x1495);
IkReal x1504=((1.0)*x1494);
evalcond[0]=(((x1494*x1500))+(((-1.0)*r22*x1503))+(((-1.0)*x1501*x1504)));
evalcond[1]=((((-1.0)*r22*x1504))+((x1495*x1501))+(((-1.0)*x1500*x1503)));
evalcond[2]=((((-1.0)*x1499*x1504))+cj0+((x1494*x1498))+(((-1.0)*r12*x1503)));
evalcond[3]=(((x1494*x1502))+(((-1.0)*x1496))+(((-1.0)*r02*x1503))+(((-1.0)*x1497*x1504)));
evalcond[4]=(((x1495*x1497))+(((-1.0)*r02*x1504))+(((-1.0)*x1502*x1503))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1498*x1503))+(((-1.0)*x1496))+((x1495*x1499))+(((-1.0)*r12*x1504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1505=((1.0)*cj5);
CheckValue<IkReal> x1506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1505)))),-1);
if(!x1506.valid){
continue;
}
CheckValue<IkReal> x1507 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1506.value)))+(x1507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1508=IKsin(j4);
IkReal x1509=IKcos(j4);
IkReal x1510=((1.0)*sj0);
IkReal x1511=(cj5*r00);
IkReal x1512=(r11*sj5);
IkReal x1513=(cj5*r10);
IkReal x1514=(r21*sj5);
IkReal x1515=(cj5*r20);
IkReal x1516=(r01*sj5);
IkReal x1517=((1.0)*x1509);
IkReal x1518=((1.0)*x1508);
evalcond[0]=((((-1.0)*x1515*x1518))+((x1508*x1514))+(((-1.0)*r22*x1517)));
evalcond[1]=(((x1509*x1515))+(((-1.0)*r22*x1518))+(((-1.0)*x1514*x1517)));
evalcond[2]=(((x1508*x1512))+cj0+(((-1.0)*x1513*x1518))+(((-1.0)*r12*x1517)));
evalcond[3]=(((x1508*x1516))+(((-1.0)*x1510))+(((-1.0)*r02*x1517))+(((-1.0)*x1511*x1518)));
evalcond[4]=(((x1509*x1511))+(((-1.0)*x1516*x1517))+(((-1.0)*r02*x1518))+(((-1.0)*cj0)));
evalcond[5]=(((x1509*x1513))+(((-1.0)*x1510))+(((-1.0)*x1512*x1517))+(((-1.0)*r12*x1518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1519=((1.0)*cj5);
CheckValue<IkReal> x1520 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1519))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1520.valid){
continue;
}
CheckValue<IkReal> x1521=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1519))+(((-1.0)*r00*sj5)))),-1);
if(!x1521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1520.value)+(((1.5707963267949)*(x1521.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1522=IKsin(j4);
IkReal x1523=IKcos(j4);
IkReal x1524=((1.0)*sj0);
IkReal x1525=(cj5*r00);
IkReal x1526=(r11*sj5);
IkReal x1527=(cj5*r10);
IkReal x1528=(r21*sj5);
IkReal x1529=(cj5*r20);
IkReal x1530=(r01*sj5);
IkReal x1531=((1.0)*x1523);
IkReal x1532=((1.0)*x1522);
evalcond[0]=((((-1.0)*x1529*x1532))+((x1522*x1528))+(((-1.0)*r22*x1531)));
evalcond[1]=((((-1.0)*r22*x1532))+((x1523*x1529))+(((-1.0)*x1528*x1531)));
evalcond[2]=((((-1.0)*r12*x1531))+cj0+((x1522*x1526))+(((-1.0)*x1527*x1532)));
evalcond[3]=((((-1.0)*x1525*x1532))+(((-1.0)*x1524))+((x1522*x1530))+(((-1.0)*r02*x1531)));
evalcond[4]=((((-1.0)*x1530*x1531))+((x1523*x1525))+(((-1.0)*r02*x1532))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1532))+(((-1.0)*x1524))+((x1523*x1527))+(((-1.0)*x1526*x1531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1533=((1.0)*cj5);
IkReal x1534=((((-1.0)*r01*x1533))+(((-1.0)*r00*sj5)));
j4eval[0]=x1534;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1533))))));
j4eval[2]=IKsign(x1534);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1535=cj5*cj5;
IkReal x1536=((1.0)*r21);
IkReal x1537=(cj5*sj5);
IkReal x1538=((1.0)*r20);
IkReal x1539=((((-1.0)*r00*x1536*x1537))+((r01*r21))+(((-1.0)*r01*x1535*x1536))+(((-1.0)*r01*x1537*x1538))+((r02*r22))+((r00*r20*x1535)));
j4eval[0]=x1539;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1538)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1540=cj5*cj5;
IkReal x1541=(r21*sj5);
IkReal x1542=(r11*r21);
IkReal x1543=((1.0)*cj5*r20);
IkReal x1544=((((-1.0)*cj5*r10*x1541))+(((-1.0)*r11*sj5*x1543))+((r12*r22))+x1542+(((-1.0)*x1540*x1542))+((r10*r20*x1540)));
j4eval[0]=x1544;
j4eval[1]=((IKabs((((sj0*x1541))+(((-1.0)*sj0*x1543)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1545=cj5*cj5;
IkReal x1546=(r21*sj5);
IkReal x1547=(r11*r21);
IkReal x1548=((1.0)*cj5*r20);
CheckValue<IkReal> x1549=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1546))+(((-1.0)*r11*sj5*x1548))+((r12*r22))+x1547+((r10*r20*x1545))+(((-1.0)*x1545*x1547)))),-1);
if(!x1549.valid){
continue;
}
CheckValue<IkReal> x1550 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1546))+(((-1.0)*sj0*x1548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1549.value)))+(x1550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1551=IKsin(j4);
IkReal x1552=IKcos(j4);
IkReal x1553=(r11*sj5);
IkReal x1554=(cj5*r00);
IkReal x1555=(cj5*r10);
IkReal x1556=(r21*sj5);
IkReal x1557=(cj5*r20);
IkReal x1558=(r01*sj5);
IkReal x1559=((1.0)*x1552);
IkReal x1560=((1.0)*x1551);
evalcond[0]=(((x1551*x1556))+(((-1.0)*r22*x1559))+(((-1.0)*x1557*x1560)));
evalcond[1]=(((x1552*x1557))+(((-1.0)*r22*x1560))+(((-1.0)*x1556*x1559)));
evalcond[2]=(((x1551*x1553))+cj0+(((-1.0)*x1555*x1560))+(((-1.0)*r12*x1559)));
evalcond[3]=((((-1.0)*x1558*x1559))+(((-1.0)*r02*x1560))+cj0+((x1552*x1554)));
evalcond[4]=(sj0+((x1552*x1555))+(((-1.0)*x1553*x1559))+(((-1.0)*r12*x1560)));
evalcond[5]=(((x1551*x1558))+(((-1.0)*sj0))+(((-1.0)*r02*x1559))+(((-1.0)*x1554*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1561=cj5*cj5;
IkReal x1562=((1.0)*r21);
IkReal x1563=(cj5*sj5);
IkReal x1564=((1.0)*r20);
CheckValue<IkReal> x1565=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1563*x1564))+((r01*r21))+(((-1.0)*r01*x1561*x1562))+((r00*r20*x1561))+(((-1.0)*r00*x1562*x1563))+((r02*r22)))),-1);
if(!x1565.valid){
continue;
}
CheckValue<IkReal> x1566 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1565.value)))+(x1566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1567=IKsin(j4);
IkReal x1568=IKcos(j4);
IkReal x1569=(r11*sj5);
IkReal x1570=(cj5*r00);
IkReal x1571=(cj5*r10);
IkReal x1572=(r21*sj5);
IkReal x1573=(cj5*r20);
IkReal x1574=(r01*sj5);
IkReal x1575=((1.0)*x1568);
IkReal x1576=((1.0)*x1567);
evalcond[0]=(((x1567*x1572))+(((-1.0)*x1573*x1576))+(((-1.0)*r22*x1575)));
evalcond[1]=((((-1.0)*x1572*x1575))+(((-1.0)*r22*x1576))+((x1568*x1573)));
evalcond[2]=(((x1567*x1569))+(((-1.0)*x1571*x1576))+cj0+(((-1.0)*r12*x1575)));
evalcond[3]=((((-1.0)*r02*x1576))+cj0+((x1568*x1570))+(((-1.0)*x1574*x1575)));
evalcond[4]=(sj0+((x1568*x1571))+(((-1.0)*x1569*x1575))+(((-1.0)*r12*x1576)));
evalcond[5]=((((-1.0)*r02*x1575))+((x1567*x1574))+(((-1.0)*sj0))+(((-1.0)*x1570*x1576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1577=((1.0)*cj5);
CheckValue<IkReal> x1578=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1577)))),-1);
if(!x1578.valid){
continue;
}
CheckValue<IkReal> x1579 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1578.value)))+(x1579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1580=IKsin(j4);
IkReal x1581=IKcos(j4);
IkReal x1582=(r11*sj5);
IkReal x1583=(cj5*r00);
IkReal x1584=(cj5*r10);
IkReal x1585=(r21*sj5);
IkReal x1586=(cj5*r20);
IkReal x1587=(r01*sj5);
IkReal x1588=((1.0)*x1581);
IkReal x1589=((1.0)*x1580);
evalcond[0]=(((x1580*x1585))+(((-1.0)*r22*x1588))+(((-1.0)*x1586*x1589)));
evalcond[1]=((((-1.0)*x1585*x1588))+(((-1.0)*r22*x1589))+((x1581*x1586)));
evalcond[2]=(cj0+(((-1.0)*x1584*x1589))+((x1580*x1582))+(((-1.0)*r12*x1588)));
evalcond[3]=(cj0+(((-1.0)*r02*x1589))+(((-1.0)*x1587*x1588))+((x1581*x1583)));
evalcond[4]=(sj0+(((-1.0)*r12*x1589))+(((-1.0)*x1582*x1588))+((x1581*x1584)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1588))+((x1580*x1587))+(((-1.0)*x1583*x1589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1590=IKcos(j0);
IkReal x1591=IKsin(j0);
evalcond[0]=((((-0.425)*x1590))+(((-1.0)*px))+(((-0.10915)*x1591)));
evalcond[1]=((((-0.425)*x1591))+(((-1.0)*py))+(((0.10915)*x1590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1592=((1.0)*cj5);
IkReal x1593=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1592)));
j4eval[0]=x1593;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1592))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1593);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1594=cj5*cj5;
IkReal x1595=((1.0)*r21);
IkReal x1596=(cj5*sj5);
IkReal x1597=((1.0)*r20);
IkReal x1598=((((-1.0)*r01*x1594*x1595))+(((-1.0)*r00*x1595*x1596))+(((-1.0)*r01*x1596*x1597))+((r01*r21))+((r00*r20*x1594))+((r02*r22)));
j4eval[0]=x1598;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1597)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1598);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1599=cj5*cj5;
IkReal x1600=(r21*sj5);
IkReal x1601=(r11*r21);
IkReal x1602=((1.0)*cj5*r20);
IkReal x1603=((((-1.0)*cj5*r10*x1600))+((r10*r20*x1599))+x1601+(((-1.0)*r11*sj5*x1602))+(((-1.0)*x1599*x1601))+((r12*r22)));
j4eval[0]=x1603;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1602))+((sj0*x1600)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1604=cj5*cj5;
IkReal x1605=(r21*sj5);
IkReal x1606=(r11*r21);
IkReal x1607=((1.0)*cj5*r20);
CheckValue<IkReal> x1608 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1607))+((sj0*x1605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1608.valid){
continue;
}
CheckValue<IkReal> x1609=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1605))+((r10*r20*x1604))+x1606+(((-1.0)*r11*sj5*x1607))+(((-1.0)*x1604*x1606))+((r12*r22)))),-1);
if(!x1609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1608.value)+(((1.5707963267949)*(x1609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1610=IKsin(j4);
IkReal x1611=IKcos(j4);
IkReal x1612=(r11*sj5);
IkReal x1613=(cj5*r00);
IkReal x1614=(cj5*r10);
IkReal x1615=(r21*sj5);
IkReal x1616=(cj5*r20);
IkReal x1617=(r01*sj5);
IkReal x1618=((1.0)*x1611);
IkReal x1619=((1.0)*x1610);
evalcond[0]=((((-1.0)*x1616*x1619))+(((-1.0)*r22*x1618))+((x1610*x1615)));
evalcond[1]=((((-1.0)*r22*x1619))+((x1611*x1616))+(((-1.0)*x1615*x1618)));
evalcond[2]=((((-1.0)*r12*x1618))+cj0+(((-1.0)*x1614*x1619))+((x1610*x1612)));
evalcond[3]=(cj0+(((-1.0)*r02*x1619))+(((-1.0)*x1617*x1618))+((x1611*x1613)));
evalcond[4]=((((-1.0)*r12*x1619))+sj0+(((-1.0)*x1612*x1618))+((x1611*x1614)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1618))+(((-1.0)*x1613*x1619))+((x1610*x1617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1620=cj5*cj5;
IkReal x1621=((1.0)*r21);
IkReal x1622=(cj5*sj5);
IkReal x1623=((1.0)*r20);
CheckValue<IkReal> x1624 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1623))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1624.valid){
continue;
}
CheckValue<IkReal> x1625=IKPowWithIntegerCheck(IKsign((((r00*r20*x1620))+((r01*r21))+(((-1.0)*r01*x1622*x1623))+(((-1.0)*r01*x1620*x1621))+((r02*r22))+(((-1.0)*r00*x1621*x1622)))),-1);
if(!x1625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1624.value)+(((1.5707963267949)*(x1625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1626=IKsin(j4);
IkReal x1627=IKcos(j4);
IkReal x1628=(r11*sj5);
IkReal x1629=(cj5*r00);
IkReal x1630=(cj5*r10);
IkReal x1631=(r21*sj5);
IkReal x1632=(cj5*r20);
IkReal x1633=(r01*sj5);
IkReal x1634=((1.0)*x1627);
IkReal x1635=((1.0)*x1626);
evalcond[0]=((((-1.0)*r22*x1634))+(((-1.0)*x1632*x1635))+((x1626*x1631)));
evalcond[1]=(((x1627*x1632))+(((-1.0)*r22*x1635))+(((-1.0)*x1631*x1634)));
evalcond[2]=(cj0+((x1626*x1628))+(((-1.0)*r12*x1634))+(((-1.0)*x1630*x1635)));
evalcond[3]=(((x1627*x1629))+cj0+(((-1.0)*x1633*x1634))+(((-1.0)*r02*x1635)));
evalcond[4]=(((x1627*x1630))+sj0+(((-1.0)*r12*x1635))+(((-1.0)*x1628*x1634)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1629*x1635))+(((-1.0)*r02*x1634))+((x1626*x1633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1636=((1.0)*cj5);
CheckValue<IkReal> x1637 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1637.valid){
continue;
}
CheckValue<IkReal> x1638=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1636))+(((-1.0)*r00*sj5)))),-1);
if(!x1638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1637.value)+(((1.5707963267949)*(x1638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1639=IKsin(j4);
IkReal x1640=IKcos(j4);
IkReal x1641=(r11*sj5);
IkReal x1642=(cj5*r00);
IkReal x1643=(cj5*r10);
IkReal x1644=(r21*sj5);
IkReal x1645=(cj5*r20);
IkReal x1646=(r01*sj5);
IkReal x1647=((1.0)*x1640);
IkReal x1648=((1.0)*x1639);
evalcond[0]=((((-1.0)*r22*x1647))+(((-1.0)*x1645*x1648))+((x1639*x1644)));
evalcond[1]=(((x1640*x1645))+(((-1.0)*r22*x1648))+(((-1.0)*x1644*x1647)));
evalcond[2]=(cj0+(((-1.0)*r12*x1647))+(((-1.0)*x1643*x1648))+((x1639*x1641)));
evalcond[3]=(((x1640*x1642))+(((-1.0)*x1646*x1647))+cj0+(((-1.0)*r02*x1648)));
evalcond[4]=(((x1640*x1643))+sj0+(((-1.0)*x1641*x1647))+(((-1.0)*r12*x1648)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1642*x1648))+((x1639*x1646))+(((-1.0)*r02*x1647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1649=IKcos(j0);
IkReal x1650=IKsin(j0);
evalcond[0]=((((-0.10915)*x1650))+(((-1.0)*px))+(((-0.425)*x1649)));
evalcond[1]=((((-0.425)*x1650))+(((-1.0)*py))+(((0.10915)*x1649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1651=((1.0)*cj5);
IkReal x1652=((((-1.0)*r01*x1651))+(((-1.0)*r00*sj5)));
j4eval[0]=x1652;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1651)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1652);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1653=((1.0)*cj5);
IkReal x1654=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1653)));
j4eval[0]=x1654;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1653))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1654);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1655=cj5*cj5;
IkReal x1656=((1.0)*sj5);
IkReal x1657=(cj5*r20);
IkReal x1658=(r11*r21);
IkReal x1659=((((-1.0)*r11*x1656*x1657))+(((-1.0)*cj5*r10*r21*x1656))+x1658+((r12*r22))+((r10*r20*x1655))+(((-1.0)*x1655*x1658)));
j4eval[0]=x1659;
j4eval[1]=IKsign(x1659);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1656))+((cj0*x1657))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1660=cj5*cj5;
IkReal x1661=((1.0)*sj5);
IkReal x1662=(cj5*r20);
IkReal x1663=(r11*r21);
CheckValue<IkReal> x1664 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1661))+((cj0*x1662)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1664.valid){
continue;
}
CheckValue<IkReal> x1665=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1661))+x1663+((r12*r22))+(((-1.0)*x1660*x1663))+(((-1.0)*r11*x1661*x1662))+((r10*r20*x1660)))),-1);
if(!x1665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1664.value)+(((1.5707963267949)*(x1665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1666=IKsin(j4);
IkReal x1667=IKcos(j4);
IkReal x1668=((1.0)*sj0);
IkReal x1669=(cj5*r00);
IkReal x1670=(r11*sj5);
IkReal x1671=(cj5*r10);
IkReal x1672=(r21*sj5);
IkReal x1673=(cj5*r20);
IkReal x1674=(r01*sj5);
IkReal x1675=((1.0)*x1667);
IkReal x1676=((1.0)*x1666);
evalcond[0]=(((x1666*x1672))+(((-1.0)*x1673*x1676))+(((-1.0)*r22*x1675)));
evalcond[1]=((((-1.0)*x1672*x1675))+((x1667*x1673))+(((-1.0)*r22*x1676)));
evalcond[2]=(((x1666*x1670))+cj0+(((-1.0)*x1671*x1676))+(((-1.0)*r12*x1675)));
evalcond[3]=(((x1666*x1674))+(((-1.0)*r02*x1675))+(((-1.0)*x1669*x1676))+(((-1.0)*x1668)));
evalcond[4]=((((-1.0)*r02*x1676))+((x1667*x1669))+(((-1.0)*x1674*x1675))+(((-1.0)*cj0)));
evalcond[5]=(((x1667*x1671))+(((-1.0)*r12*x1676))+(((-1.0)*x1668))+(((-1.0)*x1670*x1675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1677=((1.0)*cj5);
CheckValue<IkReal> x1678 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1677))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1678.valid){
continue;
}
CheckValue<IkReal> x1679=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1677)))),-1);
if(!x1679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1678.value)+(((1.5707963267949)*(x1679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1680=IKsin(j4);
IkReal x1681=IKcos(j4);
IkReal x1682=((1.0)*sj0);
IkReal x1683=(cj5*r00);
IkReal x1684=(r11*sj5);
IkReal x1685=(cj5*r10);
IkReal x1686=(r21*sj5);
IkReal x1687=(cj5*r20);
IkReal x1688=(r01*sj5);
IkReal x1689=((1.0)*x1681);
IkReal x1690=((1.0)*x1680);
evalcond[0]=(((x1680*x1686))+(((-1.0)*x1687*x1690))+(((-1.0)*r22*x1689)));
evalcond[1]=(((x1681*x1687))+(((-1.0)*x1686*x1689))+(((-1.0)*r22*x1690)));
evalcond[2]=((((-1.0)*r12*x1689))+((x1680*x1684))+cj0+(((-1.0)*x1685*x1690)));
evalcond[3]=((((-1.0)*x1682))+((x1680*x1688))+(((-1.0)*x1683*x1690))+(((-1.0)*r02*x1689)));
evalcond[4]=(((x1681*x1683))+(((-1.0)*r02*x1690))+(((-1.0)*cj0))+(((-1.0)*x1688*x1689)));
evalcond[5]=(((x1681*x1685))+(((-1.0)*x1682))+(((-1.0)*r12*x1690))+(((-1.0)*x1684*x1689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1691=((1.0)*cj5);
CheckValue<IkReal> x1692=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1691)))),-1);
if(!x1692.valid){
continue;
}
CheckValue<IkReal> x1693 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1691))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1692.value)))+(x1693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1694=IKsin(j4);
IkReal x1695=IKcos(j4);
IkReal x1696=((1.0)*sj0);
IkReal x1697=(cj5*r00);
IkReal x1698=(r11*sj5);
IkReal x1699=(cj5*r10);
IkReal x1700=(r21*sj5);
IkReal x1701=(cj5*r20);
IkReal x1702=(r01*sj5);
IkReal x1703=((1.0)*x1695);
IkReal x1704=((1.0)*x1694);
evalcond[0]=(((x1694*x1700))+(((-1.0)*r22*x1703))+(((-1.0)*x1701*x1704)));
evalcond[1]=((((-1.0)*x1700*x1703))+(((-1.0)*r22*x1704))+((x1695*x1701)));
evalcond[2]=(cj0+(((-1.0)*x1699*x1704))+((x1694*x1698))+(((-1.0)*r12*x1703)));
evalcond[3]=((((-1.0)*x1696))+((x1694*x1702))+(((-1.0)*r02*x1703))+(((-1.0)*x1697*x1704)));
evalcond[4]=((((-1.0)*x1702*x1703))+((x1695*x1697))+(((-1.0)*r02*x1704))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1698*x1703))+(((-1.0)*x1696))+((x1695*x1699))+(((-1.0)*r12*x1704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1705=((1.0)*cj5);
IkReal x1706=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1705)));
j4eval[0]=x1706;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1705))))));
j4eval[2]=IKsign(x1706);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1707=cj5*cj5;
IkReal x1708=((1.0)*r21);
IkReal x1709=(cj5*sj5);
IkReal x1710=((1.0)*r20);
IkReal x1711=((((-1.0)*r01*x1707*x1708))+((r01*r21))+((r00*r20*x1707))+(((-1.0)*r00*x1708*x1709))+((r02*r22))+(((-1.0)*r01*x1709*x1710)));
j4eval[0]=x1711;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1710)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1711);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1712=cj5*cj5;
IkReal x1713=(r21*sj5);
IkReal x1714=(r11*r21);
IkReal x1715=((1.0)*cj5*r20);
IkReal x1716=(x1714+(((-1.0)*r11*sj5*x1715))+((r10*r20*x1712))+((r12*r22))+(((-1.0)*x1712*x1714))+(((-1.0)*cj5*r10*x1713)));
j4eval[0]=x1716;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1715))+((sj0*x1713))))));
j4eval[2]=IKsign(x1716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1717=cj5*cj5;
IkReal x1718=(r21*sj5);
IkReal x1719=(r11*r21);
IkReal x1720=((1.0)*cj5*r20);
CheckValue<IkReal> x1721=IKPowWithIntegerCheck(IKsign((x1719+((r10*r20*x1717))+((r12*r22))+(((-1.0)*x1717*x1719))+(((-1.0)*r11*sj5*x1720))+(((-1.0)*cj5*r10*x1718)))),-1);
if(!x1721.valid){
continue;
}
CheckValue<IkReal> x1722 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1720))+((sj0*x1718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1721.value)))+(x1722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1723=IKsin(j4);
IkReal x1724=IKcos(j4);
IkReal x1725=(r11*sj5);
IkReal x1726=(cj5*r00);
IkReal x1727=(cj5*r10);
IkReal x1728=(r21*sj5);
IkReal x1729=(cj5*r20);
IkReal x1730=(r01*sj5);
IkReal x1731=((1.0)*x1724);
IkReal x1732=((1.0)*x1723);
evalcond[0]=(((x1723*x1728))+(((-1.0)*x1729*x1732))+(((-1.0)*r22*x1731)));
evalcond[1]=(((x1724*x1729))+(((-1.0)*x1728*x1731))+(((-1.0)*r22*x1732)));
evalcond[2]=(((x1723*x1725))+cj0+(((-1.0)*r12*x1731))+(((-1.0)*x1727*x1732)));
evalcond[3]=(((x1724*x1726))+cj0+(((-1.0)*x1730*x1731))+(((-1.0)*r02*x1732)));
evalcond[4]=(sj0+((x1724*x1727))+(((-1.0)*r12*x1732))+(((-1.0)*x1725*x1731)));
evalcond[5]=(((x1723*x1730))+(((-1.0)*sj0))+(((-1.0)*x1726*x1732))+(((-1.0)*r02*x1731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1733=cj5*cj5;
IkReal x1734=((1.0)*r21);
IkReal x1735=(cj5*sj5);
IkReal x1736=((1.0)*r20);
CheckValue<IkReal> x1737 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1737.valid){
continue;
}
CheckValue<IkReal> x1738=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1734*x1735))+(((-1.0)*r01*x1733*x1734))+((r01*r21))+(((-1.0)*r01*x1735*x1736))+((r02*r22))+((r00*r20*x1733)))),-1);
if(!x1738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1737.value)+(((1.5707963267949)*(x1738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1739=IKsin(j4);
IkReal x1740=IKcos(j4);
IkReal x1741=(r11*sj5);
IkReal x1742=(cj5*r00);
IkReal x1743=(cj5*r10);
IkReal x1744=(r21*sj5);
IkReal x1745=(cj5*r20);
IkReal x1746=(r01*sj5);
IkReal x1747=((1.0)*x1740);
IkReal x1748=((1.0)*x1739);
evalcond[0]=(((x1739*x1744))+(((-1.0)*r22*x1747))+(((-1.0)*x1745*x1748)));
evalcond[1]=((((-1.0)*r22*x1748))+(((-1.0)*x1744*x1747))+((x1740*x1745)));
evalcond[2]=((((-1.0)*r12*x1747))+((x1739*x1741))+cj0+(((-1.0)*x1743*x1748)));
evalcond[3]=(cj0+(((-1.0)*x1746*x1747))+((x1740*x1742))+(((-1.0)*r02*x1748)));
evalcond[4]=((((-1.0)*r12*x1748))+(((-1.0)*x1741*x1747))+sj0+((x1740*x1743)));
evalcond[5]=(((x1739*x1746))+(((-1.0)*sj0))+(((-1.0)*x1742*x1748))+(((-1.0)*r02*x1747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1749=((1.0)*cj5);
CheckValue<IkReal> x1750=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1749)))),-1);
if(!x1750.valid){
continue;
}
CheckValue<IkReal> x1751 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1750.value)))+(x1751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1752=IKsin(j4);
IkReal x1753=IKcos(j4);
IkReal x1754=(r11*sj5);
IkReal x1755=(cj5*r00);
IkReal x1756=(cj5*r10);
IkReal x1757=(r21*sj5);
IkReal x1758=(cj5*r20);
IkReal x1759=(r01*sj5);
IkReal x1760=((1.0)*x1753);
IkReal x1761=((1.0)*x1752);
evalcond[0]=(((x1752*x1757))+(((-1.0)*x1758*x1761))+(((-1.0)*r22*x1760)));
evalcond[1]=(((x1753*x1758))+(((-1.0)*x1757*x1760))+(((-1.0)*r22*x1761)));
evalcond[2]=(((x1752*x1754))+cj0+(((-1.0)*x1756*x1761))+(((-1.0)*r12*x1760)));
evalcond[3]=(((x1753*x1755))+cj0+(((-1.0)*r02*x1761))+(((-1.0)*x1759*x1760)));
evalcond[4]=(sj0+(((-1.0)*x1754*x1760))+((x1753*x1756))+(((-1.0)*r12*x1761)));
evalcond[5]=(((x1752*x1759))+(((-1.0)*sj0))+(((-1.0)*r02*x1760))+(((-1.0)*x1755*x1761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1762=((1.0)*cj5);
IkReal x1763=((((-1.0)*r01*x1762))+(((-1.0)*r00*sj5)));
j4eval[0]=x1763;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1762))))));
j4eval[2]=IKsign(x1763);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1764=((1.0)*cj5);
IkReal x1765=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1764)));
j4eval[0]=x1765;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1764))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1765);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1766=cj5*cj5;
IkReal x1767=((1.0)*sj5);
IkReal x1768=(cj5*r20);
IkReal x1769=(r11*r21);
IkReal x1770=(x1769+((r12*r22))+(((-1.0)*cj5*r10*r21*x1767))+((r10*r20*x1766))+(((-1.0)*r11*x1767*x1768))+(((-1.0)*x1766*x1769)));
j4eval[0]=x1770;
j4eval[1]=IKsign(x1770);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1767))+((cj0*x1768))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1771=cj5*cj5;
IkReal x1772=((1.0)*sj5);
IkReal x1773=(cj5*r20);
IkReal x1774=(r11*r21);
CheckValue<IkReal> x1775=IKPowWithIntegerCheck(IKsign((x1774+((r12*r22))+((r10*r20*x1771))+(((-1.0)*cj5*r10*r21*x1772))+(((-1.0)*x1771*x1774))+(((-1.0)*r11*x1772*x1773)))),-1);
if(!x1775.valid){
continue;
}
CheckValue<IkReal> x1776 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1772))+((cj0*x1773)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1775.value)))+(x1776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1777=IKsin(j4);
IkReal x1778=IKcos(j4);
IkReal x1779=((1.0)*sj0);
IkReal x1780=(cj5*r00);
IkReal x1781=(r11*sj5);
IkReal x1782=(cj5*r10);
IkReal x1783=(r21*sj5);
IkReal x1784=(cj5*r20);
IkReal x1785=(r01*sj5);
IkReal x1786=((1.0)*x1778);
IkReal x1787=((1.0)*x1777);
evalcond[0]=((((-1.0)*r22*x1786))+((x1777*x1783))+(((-1.0)*x1784*x1787)));
evalcond[1]=((((-1.0)*x1783*x1786))+(((-1.0)*r22*x1787))+((x1778*x1784)));
evalcond[2]=(cj0+((x1777*x1781))+(((-1.0)*r12*x1786))+(((-1.0)*x1782*x1787)));
evalcond[3]=(((x1777*x1785))+(((-1.0)*x1779))+(((-1.0)*x1780*x1787))+(((-1.0)*r02*x1786)));
evalcond[4]=(((x1778*x1780))+(((-1.0)*x1785*x1786))+(((-1.0)*r02*x1787))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1787))+((x1778*x1782))+(((-1.0)*x1779))+(((-1.0)*x1781*x1786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1788=((1.0)*cj5);
CheckValue<IkReal> x1789 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1789.valid){
continue;
}
CheckValue<IkReal> x1790=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1788)))),-1);
if(!x1790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1789.value)+(((1.5707963267949)*(x1790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1791=IKsin(j4);
IkReal x1792=IKcos(j4);
IkReal x1793=((1.0)*sj0);
IkReal x1794=(cj5*r00);
IkReal x1795=(r11*sj5);
IkReal x1796=(cj5*r10);
IkReal x1797=(r21*sj5);
IkReal x1798=(cj5*r20);
IkReal x1799=(r01*sj5);
IkReal x1800=((1.0)*x1792);
IkReal x1801=((1.0)*x1791);
evalcond[0]=((((-1.0)*x1798*x1801))+((x1791*x1797))+(((-1.0)*r22*x1800)));
evalcond[1]=((((-1.0)*x1797*x1800))+((x1792*x1798))+(((-1.0)*r22*x1801)));
evalcond[2]=(cj0+(((-1.0)*x1796*x1801))+((x1791*x1795))+(((-1.0)*r12*x1800)));
evalcond[3]=((((-1.0)*x1793))+(((-1.0)*x1794*x1801))+(((-1.0)*r02*x1800))+((x1791*x1799)));
evalcond[4]=((((-1.0)*x1799*x1800))+(((-1.0)*r02*x1801))+((x1792*x1794))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1793))+(((-1.0)*x1795*x1800))+((x1792*x1796))+(((-1.0)*r12*x1801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1802=((1.0)*cj5);
CheckValue<IkReal> x1803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1802))+(((-1.0)*r00*sj5)))),-1);
if(!x1803.valid){
continue;
}
CheckValue<IkReal> x1804 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1803.value)))+(x1804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1805=IKsin(j4);
IkReal x1806=IKcos(j4);
IkReal x1807=((1.0)*sj0);
IkReal x1808=(cj5*r00);
IkReal x1809=(r11*sj5);
IkReal x1810=(cj5*r10);
IkReal x1811=(r21*sj5);
IkReal x1812=(cj5*r20);
IkReal x1813=(r01*sj5);
IkReal x1814=((1.0)*x1806);
IkReal x1815=((1.0)*x1805);
evalcond[0]=((((-1.0)*x1812*x1815))+((x1805*x1811))+(((-1.0)*r22*x1814)));
evalcond[1]=((((-1.0)*x1811*x1814))+((x1806*x1812))+(((-1.0)*r22*x1815)));
evalcond[2]=(cj0+(((-1.0)*x1810*x1815))+(((-1.0)*r12*x1814))+((x1805*x1809)));
evalcond[3]=(((x1805*x1813))+(((-1.0)*x1808*x1815))+(((-1.0)*r02*x1814))+(((-1.0)*x1807)));
evalcond[4]=(((x1806*x1808))+(((-1.0)*x1813*x1814))+(((-1.0)*r02*x1815))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1809*x1814))+(((-1.0)*x1807))+(((-1.0)*r12*x1815))+((x1806*x1810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1816=(sj1*sj2);
IkReal x1817=(cj5*r01);
IkReal x1818=(cj1*cj2);
IkReal x1819=(r00*sj5);
IkReal x1820=((20000.0)*px);
IkReal x1821=((8500.0)*cj1);
CheckValue<IkReal> x1822=IKPowWithIntegerCheck(((((2183.0)*x1816))+(((-2183.0)*x1818))),-1);
if(!x1822.valid){
continue;
}
CheckValue<IkReal> x1823=IKPowWithIntegerCheck((x1816+(((-1.0)*x1818))),-1);
if(!x1823.valid){
continue;
}
if( IKabs(((x1822.value)*(((((-5952.0)*x1818*x1819))+(((-1.0)*x1817*x1821))+((x1818*x1820))+(((5952.0)*x1816*x1817))+(((5952.0)*x1816*x1819))+(((-1.0)*x1819*x1821))+(((-5952.0)*x1817*x1818))+(((-1.0)*x1816*x1820)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1823.value)*(((((-1.0)*x1817))+(((-1.0)*x1819)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1822.value)*(((((-5952.0)*x1818*x1819))+(((-1.0)*x1817*x1821))+((x1818*x1820))+(((5952.0)*x1816*x1817))+(((5952.0)*x1816*x1819))+(((-1.0)*x1819*x1821))+(((-5952.0)*x1817*x1818))+(((-1.0)*x1816*x1820))))))+IKsqr(((x1823.value)*(((((-1.0)*x1817))+(((-1.0)*x1819))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1822.value)*(((((-5952.0)*x1818*x1819))+(((-1.0)*x1817*x1821))+((x1818*x1820))+(((5952.0)*x1816*x1817))+(((5952.0)*x1816*x1819))+(((-1.0)*x1819*x1821))+(((-5952.0)*x1817*x1818))+(((-1.0)*x1816*x1820))))), ((x1823.value)*(((((-1.0)*x1817))+(((-1.0)*x1819))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1824=IKcos(j0);
IkReal x1825=IKsin(j0);
IkReal x1826=(cj5*r01);
IkReal x1827=(cj5*r11);
IkReal x1828=(r00*sj5);
IkReal x1829=(sj1*sj2);
IkReal x1830=((0.39225)*cj2);
IkReal x1831=((1.0)*cj2);
IkReal x1832=(r10*sj5);
IkReal x1833=((0.39225)*x1829);
IkReal x1834=(cj1*x1824);
IkReal x1835=(cj1*x1825);
evalcond[0]=(((x1824*x1829))+x1828+x1826+(((-1.0)*x1831*x1834)));
evalcond[1]=(((x1825*x1829))+x1827+x1832+(((-1.0)*x1831*x1835)));
evalcond[2]=((((-0.09465)*x1828))+(((-0.09465)*x1826))+(((-1.0)*px))+((x1830*x1834))+(((-0.10915)*x1825))+(((-1.0)*x1824*x1833))+(((0.425)*x1834)));
evalcond[3]=((((-0.09465)*x1827))+(((0.10915)*x1824))+(((-1.0)*x1825*x1833))+(((-1.0)*py))+((x1830*x1835))+(((-0.09465)*x1832))+(((0.425)*x1835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1836=((1.0)*cj5);
IkReal x1837=((((-1.0)*r01*x1836))+(((-1.0)*r00*sj5)));
j4eval[0]=x1837;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1836)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1837);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1838=((1.0)*cj5);
IkReal x1839=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1838)));
j4eval[0]=x1839;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1838))))));
j4eval[2]=IKsign(x1839);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1840=((1.0)*sj0);
IkReal x1841=((1.0)*cj0);
IkReal x1842=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1842;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1840))+(((-1.0)*r01*sj5*x1841)))))+(IKabs(((((-1.0)*r02*x1841))+(((-1.0)*r12*x1840))))));
j4eval[2]=IKsign(x1842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1843=((-1.0)*r20);
IkReal x1845 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1845)==0){
continue;
}
IkReal x1844=pow(x1845,-0.5);
CheckValue<IkReal> x1846 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1843),IKFAST_ATAN2_MAGTHRESH);
if(!x1846.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1846.value));
IkReal gconst79=(r21*x1844);
IkReal gconst80=(x1843*x1844);
CheckValue<IkReal> x1847 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1847.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1847.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1848=((-1.0)*r20);
IkReal x1849=x1844;
CheckValue<IkReal> x1851 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1848),IKFAST_ATAN2_MAGTHRESH);
if(!x1851.valid){
continue;
}
IkReal x1850=((-1.0)*(x1851.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1850;
IkReal gconst78=x1850;
IkReal gconst79=(r21*x1849);
IkReal gconst80=(x1848*x1849);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1852=((-1.0)*r20);
IkReal x1853=x1844;
CheckValue<IkReal> x1855 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1852),IKFAST_ATAN2_MAGTHRESH);
if(!x1855.valid){
continue;
}
IkReal x1854=((-1.0)*(x1855.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1854;
IkReal gconst78=x1854;
IkReal gconst79=(r21*x1853);
IkReal gconst80=(x1852*x1853);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1856=((-1.0)*r20);
IkReal x1857=x1844;
CheckValue<IkReal> x1859 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1856),IKFAST_ATAN2_MAGTHRESH);
if(!x1859.valid){
continue;
}
IkReal x1858=((-1.0)*(x1859.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1858;
IkReal gconst78=x1858;
IkReal gconst79=(r21*x1857);
IkReal gconst80=(x1856*x1857);
IkReal x1860=r22*r22;
CheckValue<IkReal> x1863=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1860))),-1);
if(!x1863.valid){
continue;
}
IkReal x1861=x1863.value;
IkReal x1862=(((x1861*(r21*r21*r21*r21)))+(((2.0)*x1861*(r20*r20)*(r21*r21)))+x1860+((x1861*(r20*r20*r20*r20))));
j4eval[0]=x1862;
j4eval[1]=IKsign(x1862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1864=(sj1*sj2);
IkReal x1865=(gconst80*r20);
IkReal x1866=(gconst79*r21);
IkReal x1867=(cj1*cj2);
CheckValue<IkReal> x1868 = IKatan2WithCheck(IkReal((((r22*x1864))+(((-1.0)*r22*x1867)))),IkReal(((((-1.0)*x1866*x1867))+((x1864*x1866))+(((-1.0)*x1864*x1865))+((x1865*x1867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1868.valid){
continue;
}
CheckValue<IkReal> x1869=IKPowWithIntegerCheck(IKsign(((x1866*x1866)+(r22*r22)+(((-2.0)*x1865*x1866))+(x1865*x1865))),-1);
if(!x1869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1868.value)+(((1.5707963267949)*(x1869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1870=IKsin(j4);
IkReal x1871=IKcos(j4);
IkReal x1872=(gconst79*r01);
IkReal x1873=(gconst79*r21);
IkReal x1874=((1.0)*cj2);
IkReal x1875=(gconst79*r11);
IkReal x1876=((1.0)*sj0);
IkReal x1877=(cj1*sj2);
IkReal x1878=((1.0)*x1871);
IkReal x1879=(gconst80*x1871);
IkReal x1880=((1.0)*x1870);
IkReal x1881=(gconst80*x1880);
evalcond[0]=((((-1.0)*r22*x1878))+(((-1.0)*r20*x1881))+((x1870*x1873)));
evalcond[1]=(cj0+(((-1.0)*r10*x1881))+(((-1.0)*r12*x1878))+((x1870*x1875)));
evalcond[2]=((((-1.0)*x1876))+(((-1.0)*r02*x1878))+(((-1.0)*r00*x1881))+((x1870*x1872)));
evalcond[3]=((((-1.0)*x1873*x1878))+(((-1.0)*r22*x1880))+((sj1*sj2))+((r20*x1879))+(((-1.0)*cj1*x1874)));
evalcond[4]=((((-1.0)*x1872*x1878))+(((-1.0)*cj0*x1877))+(((-1.0)*r02*x1880))+(((-1.0)*cj0*sj1*x1874))+((r00*x1879)));
evalcond[5]=((((-1.0)*x1876*x1877))+(((-1.0)*r12*x1880))+(((-1.0)*sj0*sj1*x1874))+((r10*x1879))+(((-1.0)*x1875*x1878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1882=((1.0)*gconst80);
CheckValue<IkReal> x1883 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1882))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1883.valid){
continue;
}
CheckValue<IkReal> x1884=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1882))+(((-1.0)*gconst79*r10)))),-1);
if(!x1884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1883.value)+(((1.5707963267949)*(x1884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1885=IKsin(j4);
IkReal x1886=IKcos(j4);
IkReal x1887=(gconst79*r01);
IkReal x1888=(gconst79*r21);
IkReal x1889=((1.0)*cj2);
IkReal x1890=(gconst79*r11);
IkReal x1891=((1.0)*sj0);
IkReal x1892=(cj1*sj2);
IkReal x1893=((1.0)*x1886);
IkReal x1894=(gconst80*x1886);
IkReal x1895=((1.0)*x1885);
IkReal x1896=(gconst80*x1895);
evalcond[0]=((((-1.0)*r22*x1893))+(((-1.0)*r20*x1896))+((x1885*x1888)));
evalcond[1]=(((x1885*x1890))+cj0+(((-1.0)*r10*x1896))+(((-1.0)*r12*x1893)));
evalcond[2]=((((-1.0)*r02*x1893))+(((-1.0)*r00*x1896))+((x1885*x1887))+(((-1.0)*x1891)));
evalcond[3]=(((r20*x1894))+(((-1.0)*cj1*x1889))+((sj1*sj2))+(((-1.0)*x1888*x1893))+(((-1.0)*r22*x1895)));
evalcond[4]=((((-1.0)*r02*x1895))+(((-1.0)*cj0*sj1*x1889))+((r00*x1894))+(((-1.0)*x1887*x1893))+(((-1.0)*cj0*x1892)));
evalcond[5]=((((-1.0)*sj0*sj1*x1889))+((r10*x1894))+(((-1.0)*x1891*x1892))+(((-1.0)*x1890*x1893))+(((-1.0)*r12*x1895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1897=((1.0)*gconst80);
CheckValue<IkReal> x1898 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1897))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1898.valid){
continue;
}
CheckValue<IkReal> x1899=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1897)))),-1);
if(!x1899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1898.value)+(((1.5707963267949)*(x1899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1900=IKsin(j4);
IkReal x1901=IKcos(j4);
IkReal x1902=(gconst79*r01);
IkReal x1903=(gconst79*r21);
IkReal x1904=((1.0)*cj2);
IkReal x1905=(gconst79*r11);
IkReal x1906=((1.0)*sj0);
IkReal x1907=(cj1*sj2);
IkReal x1908=((1.0)*x1901);
IkReal x1909=(gconst80*x1901);
IkReal x1910=((1.0)*x1900);
IkReal x1911=(gconst80*x1910);
evalcond[0]=((((-1.0)*r22*x1908))+((x1900*x1903))+(((-1.0)*r20*x1911)));
evalcond[1]=(cj0+((x1900*x1905))+(((-1.0)*r12*x1908))+(((-1.0)*r10*x1911)));
evalcond[2]=((((-1.0)*r00*x1911))+((x1900*x1902))+(((-1.0)*r02*x1908))+(((-1.0)*x1906)));
evalcond[3]=((((-1.0)*x1903*x1908))+(((-1.0)*r22*x1910))+(((-1.0)*cj1*x1904))+((sj1*sj2))+((r20*x1909)));
evalcond[4]=((((-1.0)*x1902*x1908))+(((-1.0)*r02*x1910))+((r00*x1909))+(((-1.0)*cj0*x1907))+(((-1.0)*cj0*sj1*x1904)));
evalcond[5]=((((-1.0)*r12*x1910))+(((-1.0)*x1905*x1908))+(((-1.0)*sj0*sj1*x1904))+(((-1.0)*x1906*x1907))+((r10*x1909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1912=((-1.0)*r21);
IkReal x1914 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1914)==0){
continue;
}
IkReal x1913=pow(x1914,-0.5);
CheckValue<IkReal> x1915 = IKatan2WithCheck(IkReal(x1912),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1915.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1915.value))));
IkReal gconst82=(x1912*x1913);
IkReal gconst83=((1.0)*r20*x1913);
CheckValue<IkReal> x1916 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1916.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1916.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1917=((-1.0)*r21);
CheckValue<IkReal> x1920 = IKatan2WithCheck(IkReal(x1917),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1920.valid){
continue;
}
IkReal x1918=((1.0)*(x1920.value));
IkReal x1919=x1913;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1918)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1918)));
IkReal gconst82=(x1917*x1919);
IkReal gconst83=((1.0)*r20*x1919);
IkReal x1921=r22*r22;
IkReal x1922=((1.0)*x1921);
CheckValue<IkReal> x1926=IKPowWithIntegerCheck(((-1.0)+x1921),-1);
if(!x1926.valid){
continue;
}
IkReal x1923=x1926.value;
if((((1.0)+(((-1.0)*x1922)))) < -0.00001)
continue;
IkReal x1924=IKsqrt(((1.0)+(((-1.0)*x1922))));
IkReal x1925=(cj0*x1923*x1924);
j4eval[0]=((IKabs(((((-1.0)*x1922*x1925))+x1925)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1927=((-1.0)*r21);
CheckValue<IkReal> x1930 = IKatan2WithCheck(IkReal(x1927),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1930.valid){
continue;
}
IkReal x1928=((1.0)*(x1930.value));
IkReal x1929=x1913;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1928)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1928)));
IkReal gconst82=(x1927*x1929);
IkReal gconst83=((1.0)*r20*x1929);
IkReal x1931=r22*r22;
IkReal x1932=((1.0)*x1931);
CheckValue<IkReal> x1936=IKPowWithIntegerCheck(((-1.0)+x1931),-1);
if(!x1936.valid){
continue;
}
IkReal x1933=x1936.value;
if((((1.0)+(((-1.0)*x1932)))) < -0.00001)
continue;
IkReal x1934=IKsqrt(((1.0)+(((-1.0)*x1932))));
IkReal x1935=(sj0*x1933*x1934);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x1932*x1935))+x1935))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1937=((-1.0)*r21);
CheckValue<IkReal> x1940 = IKatan2WithCheck(IkReal(x1937),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1940.valid){
continue;
}
IkReal x1938=((1.0)*(x1940.value));
IkReal x1939=x1913;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1938)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1938)));
IkReal gconst82=(x1937*x1939);
IkReal gconst83=((1.0)*r20*x1939);
IkReal x1941=r22*r22;
IkReal x1942=(r12*sj0);
IkReal x1943=(cj0*r02);
CheckValue<IkReal> x1947=IKPowWithIntegerCheck(((-1.0)+x1941),-1);
if(!x1947.valid){
continue;
}
IkReal x1944=x1947.value;
if((((1.0)+(((-1.0)*x1941)))) < -0.00001)
continue;
IkReal x1945=IKsqrt(((1.0)+(((-1.0)*x1941))));
IkReal x1946=(r22*x1944*x1945);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1943))+(((-1.0)*x1942)))))+(IKabs((((x1943*x1946))+((x1942*x1946))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1948=((1.0)*sj0);
IkReal x1949=((1.0)*cj0);
CheckValue<IkReal> x1950=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1950.valid){
continue;
}
CheckValue<IkReal> x1951 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1949))+(((-1.0)*r12*x1948)))),IkReal(((((-1.0)*gconst82*r01*x1949))+(((-1.0)*gconst82*r11*x1948))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1950.value)))+(x1951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1952=IKsin(j4);
IkReal x1953=IKcos(j4);
IkReal x1954=(gconst82*r11);
IkReal x1955=((1.0)*cj2);
IkReal x1956=((1.0)*sj0);
IkReal x1957=(cj1*sj2);
IkReal x1958=((1.0)*x1953);
IkReal x1959=(gconst83*x1953);
IkReal x1960=(gconst82*x1952);
IkReal x1961=((1.0)*x1952);
evalcond[0]=((((-1.0)*r22*x1958))+((r21*x1960))+(((-1.0)*gconst83*r20*x1961)));
evalcond[1]=(cj0+((x1952*x1954))+(((-1.0)*gconst83*r10*x1961))+(((-1.0)*r12*x1958)));
evalcond[2]=((((-1.0)*x1956))+(((-1.0)*r02*x1958))+((r01*x1960))+(((-1.0)*gconst83*r00*x1961)));
evalcond[3]=(((r20*x1959))+(((-1.0)*r22*x1961))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1958))+(((-1.0)*cj1*x1955)));
evalcond[4]=((((-1.0)*cj0*sj1*x1955))+(((-1.0)*cj0*x1957))+(((-1.0)*r02*x1961))+(((-1.0)*gconst82*r01*x1958))+((r00*x1959)));
evalcond[5]=((((-1.0)*x1954*x1958))+((r10*x1959))+(((-1.0)*r12*x1961))+(((-1.0)*sj0*sj1*x1955))+(((-1.0)*x1956*x1957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1962=((1.0)*gconst83);
CheckValue<IkReal> x1963 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1963.valid){
continue;
}
CheckValue<IkReal> x1964=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1962)))),-1);
if(!x1964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1963.value)+(((1.5707963267949)*(x1964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1965=IKsin(j4);
IkReal x1966=IKcos(j4);
IkReal x1967=(gconst82*r11);
IkReal x1968=((1.0)*cj2);
IkReal x1969=((1.0)*sj0);
IkReal x1970=(cj1*sj2);
IkReal x1971=((1.0)*x1966);
IkReal x1972=(gconst83*x1966);
IkReal x1973=(gconst82*x1965);
IkReal x1974=((1.0)*x1965);
evalcond[0]=((((-1.0)*r22*x1971))+((r21*x1973))+(((-1.0)*gconst83*r20*x1974)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1974))+((x1965*x1967))+(((-1.0)*r12*x1971)));
evalcond[2]=((((-1.0)*r02*x1971))+(((-1.0)*x1969))+((r01*x1973))+(((-1.0)*gconst83*r00*x1974)));
evalcond[3]=(((r20*x1972))+(((-1.0)*r22*x1974))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1971))+(((-1.0)*cj1*x1968)));
evalcond[4]=((((-1.0)*cj0*x1970))+(((-1.0)*cj0*sj1*x1968))+(((-1.0)*r02*x1974))+((r00*x1972))+(((-1.0)*gconst82*r01*x1971)));
evalcond[5]=((((-1.0)*sj0*sj1*x1968))+((r10*x1972))+(((-1.0)*r12*x1974))+(((-1.0)*x1969*x1970))+(((-1.0)*x1967*x1971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1975=((1.0)*gconst83);
CheckValue<IkReal> x1976 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1975))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1976.valid){
continue;
}
CheckValue<IkReal> x1977=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1975))+(((-1.0)*gconst82*r00)))),-1);
if(!x1977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1976.value)+(((1.5707963267949)*(x1977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1978=IKsin(j4);
IkReal x1979=IKcos(j4);
IkReal x1980=(gconst82*r11);
IkReal x1981=((1.0)*cj2);
IkReal x1982=((1.0)*sj0);
IkReal x1983=(cj1*sj2);
IkReal x1984=((1.0)*x1979);
IkReal x1985=(gconst83*x1979);
IkReal x1986=(gconst82*x1978);
IkReal x1987=((1.0)*x1978);
evalcond[0]=(((r21*x1986))+(((-1.0)*gconst83*r20*x1987))+(((-1.0)*r22*x1984)));
evalcond[1]=(cj0+((x1978*x1980))+(((-1.0)*r12*x1984))+(((-1.0)*gconst83*r10*x1987)));
evalcond[2]=((((-1.0)*x1982))+(((-1.0)*r02*x1984))+(((-1.0)*gconst83*r00*x1987))+((r01*x1986)));
evalcond[3]=((((-1.0)*gconst82*r21*x1984))+((sj1*sj2))+(((-1.0)*cj1*x1981))+(((-1.0)*r22*x1987))+((r20*x1985)));
evalcond[4]=((((-1.0)*r02*x1987))+(((-1.0)*gconst82*r01*x1984))+((r00*x1985))+(((-1.0)*cj0*sj1*x1981))+(((-1.0)*cj0*x1983)));
evalcond[5]=((((-1.0)*x1980*x1984))+((r10*x1985))+(((-1.0)*r12*x1987))+(((-1.0)*sj0*sj1*x1981))+(((-1.0)*x1982*x1983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1988=((-1.0)*r10);
IkReal x1990 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1990)==0){
continue;
}
IkReal x1989=pow(x1990,-0.5);
CheckValue<IkReal> x1991 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1988),IKFAST_ATAN2_MAGTHRESH);
if(!x1991.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1991.value));
IkReal gconst85=(r11*x1989);
IkReal gconst86=(x1988*x1989);
CheckValue<IkReal> x1992 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1992.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1992.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1993=((-1.0)*r10);
IkReal x1994=x1989;
CheckValue<IkReal> x1996 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1993),IKFAST_ATAN2_MAGTHRESH);
if(!x1996.valid){
continue;
}
IkReal x1995=((-1.0)*(x1996.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1995;
IkReal gconst84=x1995;
IkReal gconst85=(r11*x1994);
IkReal gconst86=(x1993*x1994);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1997=((1.0)*sj0);
IkReal x1998=((1.0)*gconst85);
CheckValue<IkReal> x1999=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1998)))),-1);
if(!x1999.valid){
continue;
}
CheckValue<IkReal> x2000 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1997)))),IkReal((((cj0*gconst86*r00))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x1998))+(((-1.0)*gconst85*r11*x1997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1999.value)))+(x2000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2001=IKsin(j4);
IkReal x2002=IKcos(j4);
IkReal x2003=(gconst85*r21);
IkReal x2004=(gconst86*r00);
IkReal x2005=(gconst86*r10);
IkReal x2006=((1.0)*cj2);
IkReal x2007=(gconst85*r11);
IkReal x2008=(gconst85*r01);
IkReal x2009=((1.0)*sj0);
IkReal x2010=(gconst86*r20);
IkReal x2011=(cj1*sj2);
IkReal x2012=((1.0)*x2002);
IkReal x2013=((1.0)*x2001);
evalcond[0]=((((-1.0)*x2010*x2013))+((x2001*x2003))+(((-1.0)*r22*x2012)));
evalcond[1]=(cj0+(((-1.0)*x2005*x2013))+(((-1.0)*r12*x2012))+((x2001*x2007)));
evalcond[2]=((((-1.0)*x2004*x2013))+(((-1.0)*x2009))+((x2001*x2008))+(((-1.0)*r02*x2012)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2003*x2012))+(((-1.0)*cj1*x2006))+((x2002*x2010))+(((-1.0)*r22*x2013)));
evalcond[4]=((((-1.0)*x2008*x2012))+((x2002*x2004))+(((-1.0)*r02*x2013))+(((-1.0)*cj0*x2011))+(((-1.0)*cj0*sj1*x2006)));
evalcond[5]=(((x2002*x2005))+(((-1.0)*x2009*x2011))+(((-1.0)*x2007*x2012))+(((-1.0)*sj0*sj1*x2006))+(((-1.0)*r12*x2013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2014=((1.0)*gconst86);
CheckValue<IkReal> x2015 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2014))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2015.valid){
continue;
}
CheckValue<IkReal> x2016=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x2014)))),-1);
if(!x2016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2015.value)+(((1.5707963267949)*(x2016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2017=IKsin(j4);
IkReal x2018=IKcos(j4);
IkReal x2019=(gconst85*r21);
IkReal x2020=(gconst86*r00);
IkReal x2021=(gconst86*r10);
IkReal x2022=((1.0)*cj2);
IkReal x2023=(gconst85*r11);
IkReal x2024=(gconst85*r01);
IkReal x2025=((1.0)*sj0);
IkReal x2026=(gconst86*r20);
IkReal x2027=(cj1*sj2);
IkReal x2028=((1.0)*x2018);
IkReal x2029=((1.0)*x2017);
evalcond[0]=((((-1.0)*r22*x2028))+(((-1.0)*x2026*x2029))+((x2017*x2019)));
evalcond[1]=((((-1.0)*x2021*x2029))+((x2017*x2023))+cj0+(((-1.0)*r12*x2028)));
evalcond[2]=(((x2017*x2024))+(((-1.0)*r02*x2028))+(((-1.0)*x2025))+(((-1.0)*x2020*x2029)));
evalcond[3]=((((-1.0)*r22*x2029))+((x2018*x2026))+(((-1.0)*cj1*x2022))+((sj1*sj2))+(((-1.0)*x2019*x2028)));
evalcond[4]=((((-1.0)*cj0*sj1*x2022))+((x2018*x2020))+(((-1.0)*r02*x2029))+(((-1.0)*cj0*x2027))+(((-1.0)*x2024*x2028)));
evalcond[5]=((((-1.0)*x2023*x2028))+((x2018*x2021))+(((-1.0)*r12*x2029))+(((-1.0)*x2025*x2027))+(((-1.0)*sj0*sj1*x2022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2030=((-1.0)*r11);
IkReal x2032 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2032)==0){
continue;
}
IkReal x2031=pow(x2032,-0.5);
CheckValue<IkReal> x2033 = IKatan2WithCheck(IkReal(x2030),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2033.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2033.value))));
IkReal gconst88=(x2030*x2031);
IkReal gconst89=((1.0)*r10*x2031);
CheckValue<IkReal> x2034 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2034.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2034.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2035=((-1.0)*r11);
CheckValue<IkReal> x2038 = IKatan2WithCheck(IkReal(x2035),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2038.valid){
continue;
}
IkReal x2036=((1.0)*(x2038.value));
IkReal x2037=x2031;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2036)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2036)));
IkReal gconst88=(x2035*x2037);
IkReal gconst89=((1.0)*r10*x2037);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2039=((-1.0)*r11);
CheckValue<IkReal> x2042 = IKatan2WithCheck(IkReal(x2039),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2042.valid){
continue;
}
IkReal x2040=((1.0)*(x2042.value));
IkReal x2041=x2031;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2040)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2040)));
IkReal gconst88=(x2039*x2041);
IkReal gconst89=((1.0)*r10*x2041);
IkReal x2043=r12*r12;
IkReal x2044=((1.0)*sj0);
IkReal x2045=(cj0*r02);
IkReal x2046=x2031;
j4eval[0]=((IKabs(((((-1.0)*x2045))+(((-1.0)*r12*x2044)))))+(IKabs(((((-1.0)*x2044*x2046))+((r12*x2045*x2046))+((sj0*x2043*x2046))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2047=((-1.0)*r11);
CheckValue<IkReal> x2050 = IKatan2WithCheck(IkReal(x2047),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2050.valid){
continue;
}
IkReal x2048=((1.0)*(x2050.value));
IkReal x2049=x2031;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2048)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2048)));
IkReal gconst88=(x2047*x2049);
IkReal gconst89=((1.0)*r10*x2049);
IkReal x2051=r12*r12;
IkReal x2052=(cj1*cj2*r22);
IkReal x2053=(r22*sj1*sj2);
CheckValue<IkReal> x2057=IKPowWithIntegerCheck(((-1.0)+x2051),-1);
if(!x2057.valid){
continue;
}
IkReal x2054=x2057.value;
if((((1.0)+(((-1.0)*x2051)))) < -0.00001)
continue;
IkReal x2055=IKsqrt(((1.0)+(((-1.0)*x2051))));
IkReal x2056=(r12*x2054*x2055);
j4eval[0]=((IKabs((x2053+(((-1.0)*x2052)))))+(IKabs(((((-1.0)*x2053*x2056))+((x2052*x2056))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2058=(cj1*cj2);
IkReal x2059=(gconst89*r20);
IkReal x2060=(gconst88*r21);
IkReal x2061=(sj1*sj2);
CheckValue<IkReal> x2062=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2059*x2060))+(r22*r22)+(x2059*x2059)+(x2060*x2060))),-1);
if(!x2062.valid){
continue;
}
CheckValue<IkReal> x2063 = IKatan2WithCheck(IkReal((((r22*x2061))+(((-1.0)*r22*x2058)))),IkReal(((((-1.0)*x2058*x2060))+((x2060*x2061))+(((-1.0)*x2059*x2061))+((x2058*x2059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2062.value)))+(x2063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2064=IKsin(j4);
IkReal x2065=IKcos(j4);
IkReal x2066=((1.0)*sj0);
IkReal x2067=((1.0)*cj2);
IkReal x2068=(gconst89*r20);
IkReal x2069=(gconst89*r10);
IkReal x2070=(gconst89*r00);
IkReal x2071=(cj1*sj2);
IkReal x2072=((1.0)*x2065);
IkReal x2073=((1.0)*x2064);
IkReal x2074=(gconst88*x2064);
evalcond[0]=((((-1.0)*r22*x2072))+(((-1.0)*x2068*x2073))+((r21*x2074)));
evalcond[1]=(cj0+(((-1.0)*r12*x2072))+((r11*x2074))+(((-1.0)*x2069*x2073)));
evalcond[2]=((((-1.0)*r02*x2072))+(((-1.0)*x2070*x2073))+(((-1.0)*x2066))+((r01*x2074)));
evalcond[3]=((((-1.0)*gconst88*r21*x2072))+(((-1.0)*r22*x2073))+((sj1*sj2))+(((-1.0)*cj1*x2067))+((x2065*x2068)));
evalcond[4]=((((-1.0)*r02*x2073))+(((-1.0)*cj0*sj1*x2067))+(((-1.0)*gconst88*r01*x2072))+((x2065*x2070))+(((-1.0)*cj0*x2071)));
evalcond[5]=((((-1.0)*r12*x2073))+(((-1.0)*gconst88*r11*x2072))+(((-1.0)*x2066*x2071))+(((-1.0)*cj2*sj1*x2066))+((x2065*x2069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2075=((1.0)*sj0);
IkReal x2076=((1.0)*cj0);
CheckValue<IkReal> x2077 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2076))+(((-1.0)*r12*x2075)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2075))+(((-1.0)*gconst88*r01*x2076))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2077.valid){
continue;
}
CheckValue<IkReal> x2078=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2077.value)+(((1.5707963267949)*(x2078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2079=IKsin(j4);
IkReal x2080=IKcos(j4);
IkReal x2081=((1.0)*sj0);
IkReal x2082=((1.0)*cj2);
IkReal x2083=(gconst89*r20);
IkReal x2084=(gconst89*r10);
IkReal x2085=(gconst89*r00);
IkReal x2086=(cj1*sj2);
IkReal x2087=((1.0)*x2080);
IkReal x2088=((1.0)*x2079);
IkReal x2089=(gconst88*x2079);
evalcond[0]=((((-1.0)*r22*x2087))+(((-1.0)*x2083*x2088))+((r21*x2089)));
evalcond[1]=(cj0+(((-1.0)*x2084*x2088))+(((-1.0)*r12*x2087))+((r11*x2089)));
evalcond[2]=((((-1.0)*r02*x2087))+(((-1.0)*x2085*x2088))+(((-1.0)*x2081))+((r01*x2089)));
evalcond[3]=((((-1.0)*cj1*x2082))+(((-1.0)*r22*x2088))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2087))+((x2080*x2083)));
evalcond[4]=((((-1.0)*r02*x2088))+(((-1.0)*cj0*sj1*x2082))+(((-1.0)*gconst88*r01*x2087))+(((-1.0)*cj0*x2086))+((x2080*x2085)));
evalcond[5]=((((-1.0)*gconst88*r11*x2087))+(((-1.0)*x2081*x2086))+(((-1.0)*cj2*sj1*x2081))+(((-1.0)*r12*x2088))+((x2080*x2084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2090=((1.0)*gconst89);
CheckValue<IkReal> x2091=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2090))+(((-1.0)*gconst88*r00)))),-1);
if(!x2091.valid){
continue;
}
CheckValue<IkReal> x2092 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2090))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2091.value)))+(x2092.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2093=IKsin(j4);
IkReal x2094=IKcos(j4);
IkReal x2095=((1.0)*sj0);
IkReal x2096=((1.0)*cj2);
IkReal x2097=(gconst89*r20);
IkReal x2098=(gconst89*r10);
IkReal x2099=(gconst89*r00);
IkReal x2100=(cj1*sj2);
IkReal x2101=((1.0)*x2094);
IkReal x2102=((1.0)*x2093);
IkReal x2103=(gconst88*x2093);
evalcond[0]=((((-1.0)*r22*x2101))+((r21*x2103))+(((-1.0)*x2097*x2102)));
evalcond[1]=((((-1.0)*r12*x2101))+cj0+((r11*x2103))+(((-1.0)*x2098*x2102)));
evalcond[2]=((((-1.0)*x2095))+(((-1.0)*r02*x2101))+(((-1.0)*x2099*x2102))+((r01*x2103)));
evalcond[3]=((((-1.0)*r22*x2102))+((x2094*x2097))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2101))+(((-1.0)*cj1*x2096)));
evalcond[4]=((((-1.0)*r02*x2102))+((x2094*x2099))+(((-1.0)*gconst88*r01*x2101))+(((-1.0)*cj0*x2100))+(((-1.0)*cj0*sj1*x2096)));
evalcond[5]=((((-1.0)*cj2*sj1*x2095))+(((-1.0)*gconst88*r11*x2101))+(((-1.0)*r12*x2102))+((x2094*x2098))+(((-1.0)*x2095*x2100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2104=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2104;
j4eval[1]=IKsign(x2104);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2105=((1.0)*cj5);
IkReal x2106=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2105)));
j4eval[0]=x2106;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2105)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2106);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2107=cj5*cj5;
IkReal x2108=r11*r11;
IkReal x2109=(r11*sj5);
IkReal x2110=(cj5*r10);
IkReal x2111=((r12*r12)+((x2107*(r10*r10)))+(((-2.0)*x2109*x2110))+x2108+(((-1.0)*x2107*x2108)));
j4eval[0]=x2111;
j4eval[1]=IKsign(x2111);
j4eval[2]=((IKabs(r12))+(IKabs((x2110+(((-1.0)*x2109))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2112=cj5*cj5;
IkReal x2113=r11*r11;
IkReal x2114=(cj5*r10);
IkReal x2115=(r11*sj5);
CheckValue<IkReal> x2116=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2112*(r10*r10)))+x2113+(((-1.0)*x2112*x2113))+(((-2.0)*x2114*x2115)))),-1);
if(!x2116.valid){
continue;
}
CheckValue<IkReal> x2117 = IKatan2WithCheck(IkReal((x2114+(((-1.0)*x2115)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2116.value)))+(x2117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2118=IKsin(j4);
IkReal x2119=IKcos(j4);
IkReal x2120=(cj5*r10);
IkReal x2121=(r01*sj5);
IkReal x2122=((1.0)*cj2);
IkReal x2123=(cj5*r00);
IkReal x2124=(cj5*r20);
IkReal x2125=((1.0)*x2119);
IkReal x2126=((1.0)*x2118);
IkReal x2127=(sj5*x2118);
evalcond[0]=((((-1.0)*r22*x2125))+((r21*x2127))+(((-1.0)*x2124*x2126)));
evalcond[1]=((((-1.0)*r02*x2125))+((x2118*x2121))+(((-1.0)*x2123*x2126)));
evalcond[2]=(((x2119*x2120))+(((-1.0)*r12*x2126))+(((-1.0)*r11*sj5*x2125)));
evalcond[3]=((1.0)+(((-1.0)*x2120*x2126))+((r11*x2127))+(((-1.0)*r12*x2125)));
evalcond[4]=((((-1.0)*r22*x2126))+((sj1*sj2))+(((-1.0)*cj1*x2122))+((x2119*x2124))+(((-1.0)*r21*sj5*x2125)));
evalcond[5]=((((-1.0)*r02*x2126))+(((-1.0)*cj1*sj2))+(((-1.0)*x2121*x2125))+((x2119*x2123))+(((-1.0)*sj1*x2122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2128=((1.0)*cj5);
CheckValue<IkReal> x2129 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2129.valid){
continue;
}
CheckValue<IkReal> x2130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2128))+(((-1.0)*r00*sj5)))),-1);
if(!x2130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2129.value)+(((1.5707963267949)*(x2130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2131=IKsin(j4);
IkReal x2132=IKcos(j4);
IkReal x2133=(cj5*r10);
IkReal x2134=(r01*sj5);
IkReal x2135=((1.0)*cj2);
IkReal x2136=(cj5*r00);
IkReal x2137=(cj5*r20);
IkReal x2138=((1.0)*x2132);
IkReal x2139=((1.0)*x2131);
IkReal x2140=(sj5*x2131);
evalcond[0]=((((-1.0)*r22*x2138))+(((-1.0)*x2137*x2139))+((r21*x2140)));
evalcond[1]=(((x2131*x2134))+(((-1.0)*x2136*x2139))+(((-1.0)*r02*x2138)));
evalcond[2]=((((-1.0)*r12*x2139))+(((-1.0)*r11*sj5*x2138))+((x2132*x2133)));
evalcond[3]=((1.0)+((r11*x2140))+(((-1.0)*r12*x2138))+(((-1.0)*x2133*x2139)));
evalcond[4]=((((-1.0)*r22*x2139))+((sj1*sj2))+(((-1.0)*cj1*x2135))+(((-1.0)*r21*sj5*x2138))+((x2132*x2137)));
evalcond[5]=((((-1.0)*sj1*x2135))+(((-1.0)*x2134*x2138))+(((-1.0)*cj1*sj2))+((x2132*x2136))+(((-1.0)*r02*x2139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2141=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2141.valid){
continue;
}
CheckValue<IkReal> x2142 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2141.value)))+(x2142.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2143=IKsin(j4);
IkReal x2144=IKcos(j4);
IkReal x2145=(cj5*r10);
IkReal x2146=(r01*sj5);
IkReal x2147=((1.0)*cj2);
IkReal x2148=(cj5*r00);
IkReal x2149=(cj5*r20);
IkReal x2150=((1.0)*x2144);
IkReal x2151=((1.0)*x2143);
IkReal x2152=(sj5*x2143);
evalcond[0]=((((-1.0)*x2149*x2151))+(((-1.0)*r22*x2150))+((r21*x2152)));
evalcond[1]=((((-1.0)*x2148*x2151))+((x2143*x2146))+(((-1.0)*r02*x2150)));
evalcond[2]=((((-1.0)*r11*sj5*x2150))+(((-1.0)*r12*x2151))+((x2144*x2145)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2150))+((r11*x2152))+(((-1.0)*x2145*x2151)));
evalcond[4]=(((sj1*sj2))+((x2144*x2149))+(((-1.0)*cj1*x2147))+(((-1.0)*r22*x2151))+(((-1.0)*r21*sj5*x2150)));
evalcond[5]=((((-1.0)*r02*x2151))+(((-1.0)*sj1*x2147))+(((-1.0)*cj1*sj2))+((x2144*x2148))+(((-1.0)*x2146*x2150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2153=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2153;
j4eval[1]=IKsign(x2153);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2154=((1.0)*cj5);
IkReal x2155=((((-1.0)*r21*x2154))+(((-1.0)*r20*sj5)));
j4eval[0]=x2155;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2154))+((r01*sj5))))));
j4eval[2]=IKsign(x2155);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2156=cj5*cj5;
IkReal x2157=r11*r11;
IkReal x2158=(cj5*r10);
IkReal x2159=(r11*sj5);
IkReal x2160=((((-1.0)*x2156*(r10*r10)))+((x2156*x2157))+(((2.0)*x2158*x2159))+(((-1.0)*(r12*r12)))+(((-1.0)*x2157)));
j4eval[0]=x2160;
j4eval[1]=((IKabs((x2158+(((-1.0)*x2159)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2160);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2161=cj5*cj5;
IkReal x2162=r11*r11;
IkReal x2163=(cj5*r10);
IkReal x2164=(r11*sj5);
CheckValue<IkReal> x2165 = IKatan2WithCheck(IkReal((x2163+(((-1.0)*x2164)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2165.valid){
continue;
}
CheckValue<IkReal> x2166=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2161*(r10*r10)))+(((2.0)*x2163*x2164))+((x2161*x2162))+(((-1.0)*(r12*r12)))+(((-1.0)*x2162)))),-1);
if(!x2166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2165.value)+(((1.5707963267949)*(x2166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2167=IKsin(j4);
IkReal x2168=IKcos(j4);
IkReal x2169=(cj5*r10);
IkReal x2170=(r01*sj5);
IkReal x2171=(cj5*r00);
IkReal x2172=(cj5*r20);
IkReal x2173=((1.0)*x2168);
IkReal x2174=((1.0)*x2167);
IkReal x2175=(sj5*x2167);
evalcond[0]=(((r21*x2175))+(((-1.0)*x2172*x2174))+(((-1.0)*r22*x2173)));
evalcond[1]=((((-1.0)*x2171*x2174))+(((-1.0)*r02*x2173))+((x2167*x2170)));
evalcond[2]=(((x2168*x2169))+(((-1.0)*r11*sj5*x2173))+(((-1.0)*r12*x2174)));
evalcond[3]=((-1.0)+((r11*x2175))+(((-1.0)*x2169*x2174))+(((-1.0)*r12*x2173)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2170*x2173))+((cj1*sj2))+(((-1.0)*r02*x2174))+((x2168*x2171)));
evalcond[5]=((((-1.0)*r21*sj5*x2173))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2168*x2172))+(((-1.0)*r22*x2174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2176=((1.0)*cj5);
CheckValue<IkReal> x2177=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2176))+(((-1.0)*r20*sj5)))),-1);
if(!x2177.valid){
continue;
}
CheckValue<IkReal> x2178 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2177.value)))+(x2178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2179=IKsin(j4);
IkReal x2180=IKcos(j4);
IkReal x2181=(cj5*r10);
IkReal x2182=(r01*sj5);
IkReal x2183=(cj5*r00);
IkReal x2184=(cj5*r20);
IkReal x2185=((1.0)*x2180);
IkReal x2186=((1.0)*x2179);
IkReal x2187=(sj5*x2179);
evalcond[0]=(((r21*x2187))+(((-1.0)*r22*x2185))+(((-1.0)*x2184*x2186)));
evalcond[1]=(((x2179*x2182))+(((-1.0)*r02*x2185))+(((-1.0)*x2183*x2186)));
evalcond[2]=((((-1.0)*r11*sj5*x2185))+((x2180*x2181))+(((-1.0)*r12*x2186)));
evalcond[3]=((-1.0)+(((-1.0)*x2181*x2186))+((r11*x2187))+(((-1.0)*r12*x2185)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2180*x2183))+(((-1.0)*r02*x2186))+(((-1.0)*x2182*x2185)));
evalcond[5]=((((-1.0)*r21*sj5*x2185))+((x2180*x2184))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2188 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2188.valid){
continue;
}
CheckValue<IkReal> x2189=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2188.value)+(((1.5707963267949)*(x2189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2190=IKsin(j4);
IkReal x2191=IKcos(j4);
IkReal x2192=(cj5*r10);
IkReal x2193=(r01*sj5);
IkReal x2194=(cj5*r00);
IkReal x2195=(cj5*r20);
IkReal x2196=((1.0)*x2191);
IkReal x2197=((1.0)*x2190);
IkReal x2198=(sj5*x2190);
evalcond[0]=((((-1.0)*x2195*x2197))+((r21*x2198))+(((-1.0)*r22*x2196)));
evalcond[1]=((((-1.0)*x2194*x2197))+((x2190*x2193))+(((-1.0)*r02*x2196)));
evalcond[2]=(((x2191*x2192))+(((-1.0)*r12*x2197))+(((-1.0)*r11*sj5*x2196)));
evalcond[3]=((-1.0)+(((-1.0)*x2192*x2197))+((r11*x2198))+(((-1.0)*r12*x2196)));
evalcond[4]=(((cj2*sj1))+((x2191*x2194))+(((-1.0)*x2193*x2196))+((cj1*sj2))+(((-1.0)*r02*x2197)));
evalcond[5]=(((x2191*x2195))+(((-1.0)*r21*sj5*x2196))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2199=((-1.0)*r00);
IkReal x2201 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2201)==0){
continue;
}
IkReal x2200=pow(x2201,-0.5);
CheckValue<IkReal> x2202 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2199),IKFAST_ATAN2_MAGTHRESH);
if(!x2202.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2202.value));
IkReal gconst91=(r01*x2200);
IkReal gconst92=(x2199*x2200);
CheckValue<IkReal> x2203 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2203.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2203.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2204=((-1.0)*r00);
IkReal x2205=x2200;
CheckValue<IkReal> x2207 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2204),IKFAST_ATAN2_MAGTHRESH);
if(!x2207.valid){
continue;
}
IkReal x2206=((-1.0)*(x2207.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2206;
IkReal gconst90=x2206;
IkReal gconst91=(r01*x2205);
IkReal gconst92=(x2204*x2205);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2208=((1.0)*sj0);
IkReal x2209=((1.0)*cj0);
CheckValue<IkReal> x2210 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2208))+(((-1.0)*r02*x2209)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x2209))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2210.valid){
continue;
}
CheckValue<IkReal> x2211=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2210.value)+(((1.5707963267949)*(x2211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2212=IKsin(j4);
IkReal x2213=IKcos(j4);
IkReal x2214=((1.0)*cj2);
IkReal x2215=(gconst92*r00);
IkReal x2216=(gconst92*r20);
IkReal x2217=((1.0)*sj0);
IkReal x2218=(gconst92*r10);
IkReal x2219=(cj1*sj2);
IkReal x2220=((1.0)*x2213);
IkReal x2221=(gconst91*x2212);
IkReal x2222=((1.0)*x2212);
evalcond[0]=(((r21*x2221))+(((-1.0)*r22*x2220))+(((-1.0)*x2216*x2222)));
evalcond[1]=(cj0+(((-1.0)*r12*x2220))+((r11*x2221))+(((-1.0)*x2218*x2222)));
evalcond[2]=((((-1.0)*x2217))+(((-1.0)*r02*x2220))+(((-1.0)*x2215*x2222))+((r01*x2221)));
evalcond[3]=((((-1.0)*gconst91*r21*x2220))+(((-1.0)*cj1*x2214))+((sj1*sj2))+(((-1.0)*r22*x2222))+((x2213*x2216)));
evalcond[4]=((((-1.0)*r02*x2222))+(((-1.0)*gconst91*r01*x2220))+(((-1.0)*cj0*sj1*x2214))+(((-1.0)*cj0*x2219))+((x2213*x2215)));
evalcond[5]=((((-1.0)*r12*x2222))+(((-1.0)*gconst91*r11*x2220))+(((-1.0)*x2217*x2219))+(((-1.0)*sj0*sj1*x2214))+((x2213*x2218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2223=((1.0)*gconst92);
CheckValue<IkReal> x2224=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2223)))),-1);
if(!x2224.valid){
continue;
}
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2223))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2224.value)))+(x2225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2226=IKsin(j4);
IkReal x2227=IKcos(j4);
IkReal x2228=((1.0)*cj2);
IkReal x2229=(gconst92*r00);
IkReal x2230=(gconst92*r20);
IkReal x2231=((1.0)*sj0);
IkReal x2232=(gconst92*r10);
IkReal x2233=(cj1*sj2);
IkReal x2234=((1.0)*x2227);
IkReal x2235=(gconst91*x2226);
IkReal x2236=((1.0)*x2226);
evalcond[0]=(((r21*x2235))+(((-1.0)*r22*x2234))+(((-1.0)*x2230*x2236)));
evalcond[1]=(cj0+(((-1.0)*x2232*x2236))+(((-1.0)*r12*x2234))+((r11*x2235)));
evalcond[2]=((((-1.0)*r02*x2234))+(((-1.0)*x2229*x2236))+(((-1.0)*x2231))+((r01*x2235)));
evalcond[3]=((((-1.0)*gconst91*r21*x2234))+((sj1*sj2))+((x2227*x2230))+(((-1.0)*r22*x2236))+(((-1.0)*cj1*x2228)));
evalcond[4]=((((-1.0)*r02*x2236))+((x2227*x2229))+(((-1.0)*cj0*x2233))+(((-1.0)*gconst91*r01*x2234))+(((-1.0)*cj0*sj1*x2228)));
evalcond[5]=((((-1.0)*sj0*sj1*x2228))+((x2227*x2232))+(((-1.0)*r12*x2236))+(((-1.0)*gconst91*r11*x2234))+(((-1.0)*x2231*x2233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2237=((-1.0)*r01);
IkReal x2239 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2239)==0){
continue;
}
IkReal x2238=pow(x2239,-0.5);
CheckValue<IkReal> x2240 = IKatan2WithCheck(IkReal(x2237),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2240.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2240.value))));
IkReal gconst94=(x2237*x2238);
IkReal gconst95=((1.0)*r00*x2238);
CheckValue<IkReal> x2241 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2241.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2241.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2242=((-1.0)*r01);
CheckValue<IkReal> x2245 = IKatan2WithCheck(IkReal(x2242),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2245.valid){
continue;
}
IkReal x2243=((1.0)*(x2245.value));
IkReal x2244=x2238;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2243)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2243)));
IkReal gconst94=(x2242*x2244);
IkReal gconst95=((1.0)*r00*x2244);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2246=((-1.0)*r01);
CheckValue<IkReal> x2249 = IKatan2WithCheck(IkReal(x2246),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2249.valid){
continue;
}
IkReal x2247=((1.0)*(x2249.value));
IkReal x2248=x2238;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2247)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2247)));
IkReal gconst94=(x2246*x2248);
IkReal gconst95=((1.0)*r00*x2248);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2250=((-1.0)*r01);
CheckValue<IkReal> x2253 = IKatan2WithCheck(IkReal(x2250),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2253.valid){
continue;
}
IkReal x2251=((1.0)*(x2253.value));
IkReal x2252=x2238;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2251)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2251)));
IkReal gconst94=(x2250*x2252);
IkReal gconst95=((1.0)*r00*x2252);
IkReal x2254=r02*r02;
IkReal x2255=(r12*sj0);
IkReal x2256=((1.0)*cj0);
IkReal x2257=x2238;
j4eval[0]=((IKabs(((((-1.0)*x2256*x2257))+((r02*x2255*x2257))+((cj0*x2254*x2257)))))+(IKabs(((((-1.0)*x2255))+(((-1.0)*r02*x2256))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2258=((1.0)*sj0);
IkReal x2259=((1.0)*cj0);
CheckValue<IkReal> x2260=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2260.valid){
continue;
}
CheckValue<IkReal> x2261 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2259))+(((-1.0)*r12*x2258)))),IkReal(((((-1.0)*gconst94*r11*x2258))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2259))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2260.value)))+(x2261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2262=IKsin(j4);
IkReal x2263=IKcos(j4);
IkReal x2264=(gconst94*r11);
IkReal x2265=((1.0)*cj2);
IkReal x2266=(gconst94*r21);
IkReal x2267=((1.0)*sj0);
IkReal x2268=(gconst94*r01);
IkReal x2269=(cj1*sj2);
IkReal x2270=((1.0)*x2263);
IkReal x2271=(gconst95*x2263);
IkReal x2272=((1.0)*x2262);
IkReal x2273=(gconst95*x2272);
evalcond[0]=((((-1.0)*r20*x2273))+(((-1.0)*r22*x2270))+((x2262*x2266)));
evalcond[1]=(cj0+((x2262*x2264))+(((-1.0)*r10*x2273))+(((-1.0)*r12*x2270)));
evalcond[2]=((((-1.0)*r00*x2273))+(((-1.0)*r02*x2270))+((x2262*x2268))+(((-1.0)*x2267)));
evalcond[3]=((((-1.0)*cj1*x2265))+(((-1.0)*x2266*x2270))+((sj1*sj2))+(((-1.0)*r22*x2272))+((r20*x2271)));
evalcond[4]=(((r00*x2271))+(((-1.0)*cj0*sj1*x2265))+(((-1.0)*r02*x2272))+(((-1.0)*x2268*x2270))+(((-1.0)*cj0*x2269)));
evalcond[5]=((((-1.0)*sj0*sj1*x2265))+((r10*x2271))+(((-1.0)*x2267*x2269))+(((-1.0)*r12*x2272))+(((-1.0)*x2264*x2270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2274=((1.0)*gconst95);
CheckValue<IkReal> x2275=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2274)))),-1);
if(!x2275.valid){
continue;
}
CheckValue<IkReal> x2276 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2275.value)))+(x2276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2277=IKsin(j4);
IkReal x2278=IKcos(j4);
IkReal x2279=(gconst94*r11);
IkReal x2280=((1.0)*cj2);
IkReal x2281=(gconst94*r21);
IkReal x2282=((1.0)*sj0);
IkReal x2283=(gconst94*r01);
IkReal x2284=(cj1*sj2);
IkReal x2285=((1.0)*x2278);
IkReal x2286=(gconst95*x2278);
IkReal x2287=((1.0)*x2277);
IkReal x2288=(gconst95*x2287);
evalcond[0]=(((x2277*x2281))+(((-1.0)*r20*x2288))+(((-1.0)*r22*x2285)));
evalcond[1]=(cj0+(((-1.0)*r12*x2285))+(((-1.0)*r10*x2288))+((x2277*x2279)));
evalcond[2]=((((-1.0)*r02*x2285))+(((-1.0)*x2282))+((x2277*x2283))+(((-1.0)*r00*x2288)));
evalcond[3]=(((r20*x2286))+((sj1*sj2))+(((-1.0)*x2281*x2285))+(((-1.0)*cj1*x2280))+(((-1.0)*r22*x2287)));
evalcond[4]=((((-1.0)*r02*x2287))+(((-1.0)*cj0*x2284))+(((-1.0)*cj0*sj1*x2280))+((r00*x2286))+(((-1.0)*x2283*x2285)));
evalcond[5]=((((-1.0)*x2282*x2284))+((r10*x2286))+(((-1.0)*r12*x2287))+(((-1.0)*x2279*x2285))+(((-1.0)*sj0*sj1*x2280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2289=((1.0)*gconst95);
CheckValue<IkReal> x2290=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2289)))),-1);
if(!x2290.valid){
continue;
}
CheckValue<IkReal> x2291 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2290.value)))+(x2291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2292=IKsin(j4);
IkReal x2293=IKcos(j4);
IkReal x2294=(gconst94*r11);
IkReal x2295=((1.0)*cj2);
IkReal x2296=(gconst94*r21);
IkReal x2297=((1.0)*sj0);
IkReal x2298=(gconst94*r01);
IkReal x2299=(cj1*sj2);
IkReal x2300=((1.0)*x2293);
IkReal x2301=(gconst95*x2293);
IkReal x2302=((1.0)*x2292);
IkReal x2303=(gconst95*x2302);
evalcond[0]=((((-1.0)*r22*x2300))+(((-1.0)*r20*x2303))+((x2292*x2296)));
evalcond[1]=((((-1.0)*r10*x2303))+cj0+((x2292*x2294))+(((-1.0)*r12*x2300)));
evalcond[2]=((((-1.0)*r00*x2303))+(((-1.0)*x2297))+((x2292*x2298))+(((-1.0)*r02*x2300)));
evalcond[3]=((((-1.0)*r22*x2302))+((r20*x2301))+((sj1*sj2))+(((-1.0)*x2296*x2300))+(((-1.0)*cj1*x2295)));
evalcond[4]=((((-1.0)*cj0*x2299))+(((-1.0)*x2298*x2300))+((r00*x2301))+(((-1.0)*cj0*sj1*x2295))+(((-1.0)*r02*x2302)));
evalcond[5]=(((r10*x2301))+(((-1.0)*sj0*sj1*x2295))+(((-1.0)*x2297*x2299))+(((-1.0)*x2294*x2300))+(((-1.0)*r12*x2302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2304=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2304;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2305=((1.0)*cj5);
IkReal x2306=((((-1.0)*r11*x2305))+(((-1.0)*r10*sj5)));
j4eval[0]=x2306;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2305))+((r21*sj5))))));
j4eval[2]=IKsign(x2306);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2307=cj5*cj5;
IkReal x2308=r01*r01;
IkReal x2309=(r01*sj5);
IkReal x2310=(cj5*r00);
IkReal x2311=((((-1.0)*x2308))+(((-1.0)*(r02*r02)))+((x2307*x2308))+(((2.0)*x2309*x2310))+(((-1.0)*x2307*(r00*r00))));
j4eval[0]=x2311;
j4eval[1]=IKsign(x2311);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2309))+x2310))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2312=cj5*cj5;
IkReal x2313=r01*r01;
IkReal x2314=(r01*sj5);
IkReal x2315=(cj5*r00);
CheckValue<IkReal> x2316=IKPowWithIntegerCheck(IKsign((((x2312*x2313))+(((-1.0)*x2313))+(((-1.0)*(r02*r02)))+(((2.0)*x2314*x2315))+(((-1.0)*x2312*(r00*r00))))),-1);
if(!x2316.valid){
continue;
}
CheckValue<IkReal> x2317 = IKatan2WithCheck(IkReal(((((-1.0)*x2314))+x2315)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2316.value)))+(x2317.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2318=IKsin(j4);
IkReal x2319=IKcos(j4);
IkReal x2320=(cj5*r10);
IkReal x2321=(r01*sj5);
IkReal x2322=((1.0)*cj2);
IkReal x2323=(cj5*r00);
IkReal x2324=(cj5*r20);
IkReal x2325=((1.0)*x2319);
IkReal x2326=((1.0)*x2318);
IkReal x2327=(sj5*x2318);
evalcond[0]=((((-1.0)*x2324*x2326))+(((-1.0)*r22*x2325))+((r21*x2327)));
evalcond[1]=(((r11*x2327))+(((-1.0)*x2320*x2326))+(((-1.0)*r12*x2325)));
evalcond[2]=((((-1.0)*x2321*x2325))+((x2319*x2323))+(((-1.0)*r02*x2326)));
evalcond[3]=((-1.0)+((x2318*x2321))+(((-1.0)*x2323*x2326))+(((-1.0)*r02*x2325)));
evalcond[4]=((((-1.0)*r22*x2326))+((x2319*x2324))+((sj1*sj2))+(((-1.0)*cj1*x2322))+(((-1.0)*r21*sj5*x2325)));
evalcond[5]=(((x2319*x2320))+(((-1.0)*r11*sj5*x2325))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2326))+(((-1.0)*sj1*x2322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2328=((1.0)*cj5);
CheckValue<IkReal> x2329=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2328)))),-1);
if(!x2329.valid){
continue;
}
CheckValue<IkReal> x2330 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2329.value)))+(x2330.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2331=IKsin(j4);
IkReal x2332=IKcos(j4);
IkReal x2333=(cj5*r10);
IkReal x2334=(r01*sj5);
IkReal x2335=((1.0)*cj2);
IkReal x2336=(cj5*r00);
IkReal x2337=(cj5*r20);
IkReal x2338=((1.0)*x2332);
IkReal x2339=((1.0)*x2331);
IkReal x2340=(sj5*x2331);
evalcond[0]=((((-1.0)*r22*x2338))+(((-1.0)*x2337*x2339))+((r21*x2340)));
evalcond[1]=(((r11*x2340))+(((-1.0)*x2333*x2339))+(((-1.0)*r12*x2338)));
evalcond[2]=(((x2332*x2336))+(((-1.0)*r02*x2339))+(((-1.0)*x2334*x2338)));
evalcond[3]=((-1.0)+((x2331*x2334))+(((-1.0)*r02*x2338))+(((-1.0)*x2336*x2339)));
evalcond[4]=(((x2332*x2337))+(((-1.0)*r22*x2339))+((sj1*sj2))+(((-1.0)*cj1*x2335))+(((-1.0)*r21*sj5*x2338)));
evalcond[5]=(((x2332*x2333))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2338))+(((-1.0)*sj1*x2335))+(((-1.0)*r12*x2339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2341=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2341.valid){
continue;
}
CheckValue<IkReal> x2342 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2341.value)))+(x2342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2343=IKsin(j4);
IkReal x2344=IKcos(j4);
IkReal x2345=(cj5*r10);
IkReal x2346=(r01*sj5);
IkReal x2347=((1.0)*cj2);
IkReal x2348=(cj5*r00);
IkReal x2349=(cj5*r20);
IkReal x2350=((1.0)*x2344);
IkReal x2351=((1.0)*x2343);
IkReal x2352=(sj5*x2343);
evalcond[0]=((((-1.0)*r22*x2350))+((r21*x2352))+(((-1.0)*x2349*x2351)));
evalcond[1]=((((-1.0)*x2345*x2351))+((r11*x2352))+(((-1.0)*r12*x2350)));
evalcond[2]=((((-1.0)*x2346*x2350))+((x2344*x2348))+(((-1.0)*r02*x2351)));
evalcond[3]=((-1.0)+(((-1.0)*x2348*x2351))+((x2343*x2346))+(((-1.0)*r02*x2350)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2347))+((x2344*x2349))+(((-1.0)*r22*x2351))+(((-1.0)*r21*sj5*x2350)));
evalcond[5]=((((-1.0)*r11*sj5*x2350))+(((-1.0)*sj1*x2347))+(((-1.0)*cj1*sj2))+((x2344*x2345))+(((-1.0)*r12*x2351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2353=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2353;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2353);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2354=((1.0)*cj5);
IkReal x2355=((((-1.0)*r21*x2354))+(((-1.0)*r20*sj5)));
j4eval[0]=x2355;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2354))))));
j4eval[2]=IKsign(x2355);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2356=cj5*cj5;
IkReal x2357=r01*r01;
IkReal x2358=(cj5*r00);
IkReal x2359=(r01*sj5);
IkReal x2360=(x2357+(((-1.0)*x2356*x2357))+(r02*r02)+(((-2.0)*x2358*x2359))+((x2356*(r00*r00))));
j4eval[0]=x2360;
j4eval[1]=((IKabs(r02))+(IKabs((x2358+(((-1.0)*x2359))))));
j4eval[2]=IKsign(x2360);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2361=cj5*cj5;
IkReal x2362=r01*r01;
IkReal x2363=(r01*sj5);
IkReal x2364=(cj5*r00);
CheckValue<IkReal> x2365 = IKatan2WithCheck(IkReal((x2364+(((-1.0)*x2363)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2365.valid){
continue;
}
CheckValue<IkReal> x2366=IKPowWithIntegerCheck(IKsign((x2362+(((-1.0)*x2361*x2362))+(((-2.0)*x2363*x2364))+((x2361*(r00*r00)))+(r02*r02))),-1);
if(!x2366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2365.value)+(((1.5707963267949)*(x2366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2367=IKsin(j4);
IkReal x2368=IKcos(j4);
IkReal x2369=(cj5*r10);
IkReal x2370=(r01*sj5);
IkReal x2371=(cj5*r00);
IkReal x2372=(cj5*r20);
IkReal x2373=((1.0)*x2368);
IkReal x2374=((1.0)*x2367);
IkReal x2375=(sj5*x2367);
evalcond[0]=((((-1.0)*x2372*x2374))+(((-1.0)*r22*x2373))+((r21*x2375)));
evalcond[1]=((((-1.0)*x2369*x2374))+(((-1.0)*r12*x2373))+((r11*x2375)));
evalcond[2]=(((x2368*x2371))+(((-1.0)*r02*x2374))+(((-1.0)*x2370*x2373)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2373))+((x2367*x2370))+(((-1.0)*x2371*x2374)));
evalcond[4]=((((-1.0)*r11*sj5*x2373))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x2374))+((x2368*x2369)));
evalcond[5]=(((x2368*x2372))+(((-1.0)*r21*sj5*x2373))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2376=((1.0)*cj5);
CheckValue<IkReal> x2377 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2376))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2377.valid){
continue;
}
CheckValue<IkReal> x2378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2376))+(((-1.0)*r20*sj5)))),-1);
if(!x2378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2377.value)+(((1.5707963267949)*(x2378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2379=IKsin(j4);
IkReal x2380=IKcos(j4);
IkReal x2381=(cj5*r10);
IkReal x2382=(r01*sj5);
IkReal x2383=(cj5*r00);
IkReal x2384=(cj5*r20);
IkReal x2385=((1.0)*x2380);
IkReal x2386=((1.0)*x2379);
IkReal x2387=(sj5*x2379);
evalcond[0]=((((-1.0)*r22*x2385))+((r21*x2387))+(((-1.0)*x2384*x2386)));
evalcond[1]=((((-1.0)*r12*x2385))+(((-1.0)*x2381*x2386))+((r11*x2387)));
evalcond[2]=((((-1.0)*r02*x2386))+(((-1.0)*x2382*x2385))+((x2380*x2383)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2385))+(((-1.0)*x2383*x2386))+((x2379*x2382)));
evalcond[4]=((((-1.0)*r12*x2386))+(((-1.0)*r11*sj5*x2385))+((cj2*sj1))+((cj1*sj2))+((x2380*x2381)));
evalcond[5]=((((-1.0)*r21*sj5*x2385))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2386))+((x2380*x2384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2388 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2388.valid){
continue;
}
CheckValue<IkReal> x2389=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2388.value)+(((1.5707963267949)*(x2389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2390=IKsin(j4);
IkReal x2391=IKcos(j4);
IkReal x2392=(cj5*r10);
IkReal x2393=(r01*sj5);
IkReal x2394=(cj5*r00);
IkReal x2395=(cj5*r20);
IkReal x2396=((1.0)*x2391);
IkReal x2397=((1.0)*x2390);
IkReal x2398=(sj5*x2390);
evalcond[0]=((((-1.0)*r22*x2396))+((r21*x2398))+(((-1.0)*x2395*x2397)));
evalcond[1]=(((r11*x2398))+(((-1.0)*x2392*x2397))+(((-1.0)*r12*x2396)));
evalcond[2]=((((-1.0)*r02*x2397))+((x2391*x2394))+(((-1.0)*x2393*x2396)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2396))+((x2390*x2393))+(((-1.0)*x2394*x2397)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2391*x2392))+(((-1.0)*r11*sj5*x2396))+(((-1.0)*r12*x2397)));
evalcond[5]=((((-1.0)*r21*sj5*x2396))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2391*x2395))+(((-1.0)*r22*x2397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2399=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2399);
rxp1_1=(px*r21);
rxp1_2=(r11*x2399);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2400=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2400);
rxp1_1=(px*r21);
rxp1_2=(r11*x2400);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2401=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2401);
rxp1_1=(px*r21);
rxp1_2=(r11*x2401);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2404=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2404.valid){
continue;
}
IkReal x2402=x2404.value;
IkReal x2403=(sj0*x2402);
cj4array[0]=(((cj1*sj2*x2403))+((cj2*sj1*x2403)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2405=IKsin(j4);
IkReal x2406=IKcos(j4);
IkReal x2407=(cj5*r20);
IkReal x2408=(r21*sj5);
IkReal x2409=((1.0)*x2405);
IkReal x2410=((1.0)*x2406);
evalcond[0]=((-1.0)*r02*x2405);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2410)));
evalcond[2]=((((-1.0)*x2407*x2409))+((x2405*x2408)));
evalcond[3]=(((r11*sj5*x2405))+(((-1.0)*cj5*r10*x2409)));
evalcond[4]=((((-1.0)*x2408*x2410))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2406*x2407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2412=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2412.valid){
continue;
}
IkReal x2411=x2412.value;
cj4array[0]=(((cj1*cj2*x2411))+(((-1.0)*sj1*sj2*x2411)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2413=IKsin(j4);
IkReal x2414=IKcos(j4);
IkReal x2415=(r11*sj5);
IkReal x2416=((1.0)*sj0);
IkReal x2417=((1.0)*x2414);
IkReal x2418=((1.0)*cj5*x2413);
evalcond[0]=((-1.0)*r02*x2413);
evalcond[1]=((((-1.0)*r02*x2417))+(((-1.0)*x2416)));
evalcond[2]=((((-1.0)*r20*x2418))+((r21*sj5*x2413)));
evalcond[3]=(((x2413*x2415))+(((-1.0)*r10*x2418)));
evalcond[4]=((((-1.0)*cj1*sj2*x2416))+(((-1.0)*x2415*x2417))+(((-1.0)*cj2*sj1*x2416))+((cj5*r10*x2414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2419=IKPowWithIntegerCheck(r02,-1);
if(!x2419.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2419.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2420=IKsin(j4);
IkReal x2421=IKcos(j4);
IkReal x2422=((1.0)*sj0);
IkReal x2423=(cj5*x2421);
IkReal x2424=(sj5*x2420);
IkReal x2425=((1.0)*sj5*x2421);
IkReal x2426=((1.0)*cj5*x2420);
evalcond[0]=((-1.0)*r02*x2420);
evalcond[1]=(((r21*x2424))+(((-1.0)*r20*x2426)));
evalcond[2]=((((-1.0)*r10*x2426))+((r11*x2424)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2425))+((r20*x2423)));
evalcond[4]=((((-1.0)*cj1*sj2*x2422))+((r10*x2423))+(((-1.0)*r11*x2425))+(((-1.0)*cj2*sj1*x2422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2427=((1.0)*sj0);
IkReal x2428=((1.0)*cj0);
CheckValue<IkReal> x2429 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2428))+(((-1.0)*r12*x2427)))),IkReal(((((-1.0)*r11*sj5*x2427))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x2428))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2429.valid){
continue;
}
CheckValue<IkReal> x2430=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2429.value)+(((1.5707963267949)*(x2430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2431=IKsin(j4);
IkReal x2432=IKcos(j4);
IkReal x2433=(cj5*r10);
IkReal x2434=(r01*sj5);
IkReal x2435=((1.0)*cj2);
IkReal x2436=(cj5*r00);
IkReal x2437=((1.0)*sj0);
IkReal x2438=(cj5*r20);
IkReal x2439=(cj1*sj2);
IkReal x2440=((1.0)*x2432);
IkReal x2441=((1.0)*x2431);
IkReal x2442=(sj5*x2431);
evalcond[0]=((((-1.0)*x2438*x2441))+(((-1.0)*r22*x2440))+((r21*x2442)));
evalcond[1]=(cj0+(((-1.0)*r12*x2440))+((r11*x2442))+(((-1.0)*x2433*x2441)));
evalcond[2]=((((-1.0)*x2437))+(((-1.0)*x2436*x2441))+((x2431*x2434))+(((-1.0)*r02*x2440)));
evalcond[3]=((((-1.0)*r21*sj5*x2440))+((sj1*sj2))+((x2432*x2438))+(((-1.0)*cj1*x2435))+(((-1.0)*r22*x2441)));
evalcond[4]=((((-1.0)*cj0*x2439))+((x2432*x2436))+(((-1.0)*x2434*x2440))+(((-1.0)*cj0*sj1*x2435))+(((-1.0)*r02*x2441)));
evalcond[5]=((((-1.0)*sj0*sj1*x2435))+(((-1.0)*r11*sj5*x2440))+((x2432*x2433))+(((-1.0)*r12*x2441))+(((-1.0)*x2437*x2439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2443=((1.0)*cj5);
CheckValue<IkReal> x2444=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2443)))),-1);
if(!x2444.valid){
continue;
}
CheckValue<IkReal> x2445 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2444.value)))+(x2445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2446=IKsin(j4);
IkReal x2447=IKcos(j4);
IkReal x2448=(cj5*r10);
IkReal x2449=(r01*sj5);
IkReal x2450=((1.0)*cj2);
IkReal x2451=(cj5*r00);
IkReal x2452=((1.0)*sj0);
IkReal x2453=(cj5*r20);
IkReal x2454=(cj1*sj2);
IkReal x2455=((1.0)*x2447);
IkReal x2456=((1.0)*x2446);
IkReal x2457=(sj5*x2446);
evalcond[0]=((((-1.0)*x2453*x2456))+(((-1.0)*r22*x2455))+((r21*x2457)));
evalcond[1]=(cj0+(((-1.0)*x2448*x2456))+(((-1.0)*r12*x2455))+((r11*x2457)));
evalcond[2]=(((x2446*x2449))+(((-1.0)*x2451*x2456))+(((-1.0)*x2452))+(((-1.0)*r02*x2455)));
evalcond[3]=(((x2447*x2453))+((sj1*sj2))+(((-1.0)*r22*x2456))+(((-1.0)*cj1*x2450))+(((-1.0)*r21*sj5*x2455)));
evalcond[4]=(((x2447*x2451))+(((-1.0)*cj0*x2454))+(((-1.0)*x2449*x2455))+(((-1.0)*cj0*sj1*x2450))+(((-1.0)*r02*x2456)));
evalcond[5]=(((x2447*x2448))+(((-1.0)*x2452*x2454))+(((-1.0)*r11*sj5*x2455))+(((-1.0)*r12*x2456))+(((-1.0)*sj0*sj1*x2450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2458=((1.0)*cj5);
CheckValue<IkReal> x2459 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2459.valid){
continue;
}
CheckValue<IkReal> x2460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2458)))),-1);
if(!x2460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2459.value)+(((1.5707963267949)*(x2460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2461=IKsin(j4);
IkReal x2462=IKcos(j4);
IkReal x2463=(cj5*r10);
IkReal x2464=(r01*sj5);
IkReal x2465=((1.0)*cj2);
IkReal x2466=(cj5*r00);
IkReal x2467=((1.0)*sj0);
IkReal x2468=(cj5*r20);
IkReal x2469=(cj1*sj2);
IkReal x2470=((1.0)*x2462);
IkReal x2471=((1.0)*x2461);
IkReal x2472=(sj5*x2461);
evalcond[0]=(((r21*x2472))+(((-1.0)*x2468*x2471))+(((-1.0)*r22*x2470)));
evalcond[1]=((((-1.0)*r12*x2470))+cj0+(((-1.0)*x2463*x2471))+((r11*x2472)));
evalcond[2]=(((x2461*x2464))+(((-1.0)*r02*x2470))+(((-1.0)*x2466*x2471))+(((-1.0)*x2467)));
evalcond[3]=(((x2462*x2468))+((sj1*sj2))+(((-1.0)*r21*sj5*x2470))+(((-1.0)*cj1*x2465))+(((-1.0)*r22*x2471)));
evalcond[4]=((((-1.0)*cj0*sj1*x2465))+((x2462*x2466))+(((-1.0)*cj0*x2469))+(((-1.0)*r02*x2471))+(((-1.0)*x2464*x2470)));
evalcond[5]=((((-1.0)*sj0*sj1*x2465))+(((-1.0)*r12*x2471))+((x2462*x2463))+(((-1.0)*r11*sj5*x2470))+(((-1.0)*x2467*x2469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2473=cj5*cj5;
IkReal x2474=r21*r21;
IkReal x2475=(sj1*sj2);
IkReal x2476=(r21*sj5);
IkReal x2477=(cj1*cj2);
IkReal x2478=(cj5*r20);
CheckValue<IkReal> x2479 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2477))+((r22*x2475)))),IkReal(((((-1.0)*x2475*x2478))+((x2477*x2478))+((x2475*x2476))+(((-1.0)*x2476*x2477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2479.valid){
continue;
}
CheckValue<IkReal> x2480=IKPowWithIntegerCheck(IKsign((x2474+((x2473*(r20*r20)))+(r22*r22)+(((-2.0)*x2476*x2478))+(((-1.0)*x2473*x2474)))),-1);
if(!x2480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2479.value)+(((1.5707963267949)*(x2480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2481=IKsin(j4);
IkReal x2482=IKcos(j4);
IkReal x2483=(r21*sj5);
IkReal x2484=(cj5*r20);
IkReal x2485=((1.0)*x2482);
IkReal x2486=((1.0)*x2481);
evalcond[0]=((((-1.0)*r22*x2485))+((x2481*x2483))+(((-1.0)*x2484*x2486)));
evalcond[1]=((((-1.0)*r22*x2486))+((x2482*x2484))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2483*x2485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2487=(cj5*sj4);
IkReal x2488=(sj4*sj5);
if( IKabs((((r01*x2488))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2487)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2487))+((cj4*r12))+(((-1.0)*r11*x2488)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2488))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2487))))+IKsqr((((r10*x2487))+((cj4*r12))+(((-1.0)*r11*x2488))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2488))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2487))), (((r10*x2487))+((cj4*r12))+(((-1.0)*r11*x2488))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2489=IKcos(j0);
IkReal x2490=IKsin(j0);
IkReal x2491=(cj4*cj5);
IkReal x2492=(cj5*r01);
IkReal x2493=((1.0)*cj1);
IkReal x2494=((0.39225)*sj1);
IkReal x2495=(r11*sj5);
IkReal x2496=((1.0)*sj4);
IkReal x2497=((0.39225)*cj2);
IkReal x2498=((1.0)*sj1);
IkReal x2499=(r00*sj5);
IkReal x2500=(cj5*r11);
IkReal x2501=((1.0)*cj4);
IkReal x2502=(r01*sj5);
IkReal x2503=(r10*sj5);
IkReal x2504=(sj2*x2489);
IkReal x2505=(sj2*x2490);
IkReal x2506=(cj1*x2489);
IkReal x2507=(cj1*x2490);
IkReal x2508=(cj2*x2489);
IkReal x2509=(cj2*x2490);
evalcond[0]=(x2489+(((-1.0)*r12*x2501))+(((-1.0)*cj5*r10*x2496))+((sj4*x2495)));
evalcond[1]=((((-1.0)*r02*x2501))+((sj4*x2502))+(((-1.0)*x2490))+(((-1.0)*cj5*r00*x2496)));
evalcond[2]=(x2499+x2492+(((-1.0)*x2493*x2508))+((sj1*x2504)));
evalcond[3]=(x2503+x2500+(((-1.0)*x2493*x2509))+((sj1*x2505)));
evalcond[4]=(((r00*x2491))+(((-1.0)*x2498*x2508))+(((-1.0)*x2493*x2504))+(((-1.0)*r02*x2496))+(((-1.0)*x2501*x2502)));
evalcond[5]=((((-1.0)*x2498*x2509))+(((-1.0)*x2493*x2505))+(((-1.0)*x2495*x2501))+(((-1.0)*r12*x2496))+((r10*x2491)));
evalcond[6]=(((x2497*x2506))+(((0.425)*x2506))+(((-1.0)*x2494*x2504))+(((-0.10915)*x2490))+(((-1.0)*px))+(((-0.09465)*x2492))+(((-0.09465)*x2499)));
evalcond[7]=(((x2497*x2507))+(((0.425)*x2507))+(((-1.0)*x2494*x2505))+(((-1.0)*py))+(((-0.09465)*x2503))+(((-0.09465)*x2500))+(((0.10915)*x2489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2510=((1.0)*cj5);
IkReal x2511=((1.0)*sj5);
CheckValue<IkReal> x2512 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2510))+(((-1.0)*r10*x2511)))),IkReal(((((-1.0)*r01*x2510))+(((-1.0)*r00*x2511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2512.valid){
continue;
}
CheckValue<IkReal> x2513=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2513.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2512.value)+(((1.5707963267949)*(x2513.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2514=IKcos(j0);
IkReal x2515=IKsin(j0);
IkReal x2516=(cj5*r01);
IkReal x2517=(cj5*r11);
IkReal x2518=(r00*sj5);
IkReal x2519=(sj1*sj2);
IkReal x2520=((0.39225)*cj2);
IkReal x2521=((1.0)*cj2);
IkReal x2522=(r10*sj5);
IkReal x2523=((0.39225)*x2519);
IkReal x2524=(cj1*x2514);
IkReal x2525=(cj1*x2515);
evalcond[0]=(x2518+x2516+((x2514*x2519))+(((-1.0)*x2521*x2524)));
evalcond[1]=(x2522+x2517+((x2515*x2519))+(((-1.0)*x2521*x2525)));
evalcond[2]=((((0.425)*x2524))+(((-0.10915)*x2515))+(((-1.0)*px))+(((-0.09465)*x2516))+(((-0.09465)*x2518))+((x2520*x2524))+(((-1.0)*x2514*x2523)));
evalcond[3]=((((0.425)*x2525))+(((-0.09465)*x2522))+(((-1.0)*x2515*x2523))+(((-1.0)*py))+(((-0.09465)*x2517))+((x2520*x2525))+(((0.10915)*x2514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2526=((1.0)*cj5);
IkReal x2527=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2526)));
j4eval[0]=x2527;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2526)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2528=((1.0)*cj5);
IkReal x2529=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2528)));
j4eval[0]=x2529;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2528))))));
j4eval[2]=IKsign(x2529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2530=((1.0)*sj0);
IkReal x2531=((1.0)*cj0);
IkReal x2532=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2532;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x2531))+(((-1.0)*r11*sj5*x2530))+((cj0*cj5*r00))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r02*x2531))+(((-1.0)*r12*x2530))))));
j4eval[2]=IKsign(x2532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2533=((-1.0)*r20);
IkReal x2535 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2535)==0){
continue;
}
IkReal x2534=pow(x2535,-0.5);
CheckValue<IkReal> x2536 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2533),IKFAST_ATAN2_MAGTHRESH);
if(!x2536.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2536.value));
IkReal gconst79=(r21*x2534);
IkReal gconst80=(x2533*x2534);
CheckValue<IkReal> x2537 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2537.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2537.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2538=((-1.0)*r20);
IkReal x2539=x2534;
CheckValue<IkReal> x2541 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2538),IKFAST_ATAN2_MAGTHRESH);
if(!x2541.valid){
continue;
}
IkReal x2540=((-1.0)*(x2541.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2540;
IkReal gconst78=x2540;
IkReal gconst79=(r21*x2539);
IkReal gconst80=(x2538*x2539);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2542=((-1.0)*r20);
IkReal x2543=x2534;
CheckValue<IkReal> x2545 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2542),IKFAST_ATAN2_MAGTHRESH);
if(!x2545.valid){
continue;
}
IkReal x2544=((-1.0)*(x2545.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2544;
IkReal gconst78=x2544;
IkReal gconst79=(r21*x2543);
IkReal gconst80=(x2542*x2543);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2546=((-1.0)*r20);
IkReal x2547=x2534;
CheckValue<IkReal> x2549 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2546),IKFAST_ATAN2_MAGTHRESH);
if(!x2549.valid){
continue;
}
IkReal x2548=((-1.0)*(x2549.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2548;
IkReal gconst78=x2548;
IkReal gconst79=(r21*x2547);
IkReal gconst80=(x2546*x2547);
IkReal x2550=r22*r22;
CheckValue<IkReal> x2553=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2550))),-1);
if(!x2553.valid){
continue;
}
IkReal x2551=x2553.value;
IkReal x2552=(x2550+(((2.0)*x2551*(r20*r20)*(r21*r21)))+((x2551*(r21*r21*r21*r21)))+((x2551*(r20*r20*r20*r20))));
j4eval[0]=x2552;
j4eval[1]=IKsign(x2552);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2554=(sj1*sj2);
IkReal x2555=(gconst80*r20);
IkReal x2556=(gconst79*r21);
IkReal x2557=(cj1*cj2);
CheckValue<IkReal> x2558 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2557))+((r22*x2554)))),IkReal((((x2555*x2557))+((x2554*x2556))+(((-1.0)*x2554*x2555))+(((-1.0)*x2556*x2557)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2558.valid){
continue;
}
CheckValue<IkReal> x2559=IKPowWithIntegerCheck(IKsign(((x2555*x2555)+(r22*r22)+(x2556*x2556)+(((-2.0)*x2555*x2556)))),-1);
if(!x2559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2558.value)+(((1.5707963267949)*(x2559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2560=IKsin(j4);
IkReal x2561=IKcos(j4);
IkReal x2562=(gconst79*r01);
IkReal x2563=(gconst79*r21);
IkReal x2564=((1.0)*cj2);
IkReal x2565=(gconst79*r11);
IkReal x2566=((1.0)*sj0);
IkReal x2567=(cj1*sj2);
IkReal x2568=((1.0)*x2561);
IkReal x2569=(gconst80*x2561);
IkReal x2570=((1.0)*x2560);
IkReal x2571=(gconst80*x2570);
evalcond[0]=(((x2560*x2563))+(((-1.0)*r22*x2568))+(((-1.0)*r20*x2571)));
evalcond[1]=(((x2560*x2565))+(((-1.0)*r10*x2571))+cj0+(((-1.0)*r12*x2568)));
evalcond[2]=(((x2560*x2562))+(((-1.0)*r02*x2568))+(((-1.0)*x2566))+(((-1.0)*r00*x2571)));
evalcond[3]=((((-1.0)*x2563*x2568))+(((-1.0)*cj1*x2564))+((sj1*sj2))+((r20*x2569))+(((-1.0)*r22*x2570)));
evalcond[4]=((((-1.0)*x2562*x2568))+(((-1.0)*cj0*x2567))+((r00*x2569))+(((-1.0)*cj0*sj1*x2564))+(((-1.0)*r02*x2570)));
evalcond[5]=((((-1.0)*r12*x2570))+(((-1.0)*x2566*x2567))+((r10*x2569))+(((-1.0)*sj0*sj1*x2564))+(((-1.0)*x2565*x2568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2572=((1.0)*gconst80);
CheckValue<IkReal> x2573 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2572))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2573.valid){
continue;
}
CheckValue<IkReal> x2574=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2572)))),-1);
if(!x2574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2573.value)+(((1.5707963267949)*(x2574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2575=IKsin(j4);
IkReal x2576=IKcos(j4);
IkReal x2577=(gconst79*r01);
IkReal x2578=(gconst79*r21);
IkReal x2579=((1.0)*cj2);
IkReal x2580=(gconst79*r11);
IkReal x2581=((1.0)*sj0);
IkReal x2582=(cj1*sj2);
IkReal x2583=((1.0)*x2576);
IkReal x2584=(gconst80*x2576);
IkReal x2585=((1.0)*x2575);
IkReal x2586=(gconst80*x2585);
evalcond[0]=(((x2575*x2578))+(((-1.0)*r20*x2586))+(((-1.0)*r22*x2583)));
evalcond[1]=(cj0+((x2575*x2580))+(((-1.0)*r10*x2586))+(((-1.0)*r12*x2583)));
evalcond[2]=((((-1.0)*r00*x2586))+((x2575*x2577))+(((-1.0)*r02*x2583))+(((-1.0)*x2581)));
evalcond[3]=(((r20*x2584))+((sj1*sj2))+(((-1.0)*x2578*x2583))+(((-1.0)*cj1*x2579))+(((-1.0)*r22*x2585)));
evalcond[4]=((((-1.0)*cj0*x2582))+((r00*x2584))+(((-1.0)*r02*x2585))+(((-1.0)*x2577*x2583))+(((-1.0)*cj0*sj1*x2579)));
evalcond[5]=(((r10*x2584))+(((-1.0)*sj0*sj1*x2579))+(((-1.0)*x2580*x2583))+(((-1.0)*r12*x2585))+(((-1.0)*x2581*x2582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2587=((1.0)*gconst80);
CheckValue<IkReal> x2588 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2588.valid){
continue;
}
CheckValue<IkReal> x2589=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2587))+(((-1.0)*gconst79*r00)))),-1);
if(!x2589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2588.value)+(((1.5707963267949)*(x2589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2590=IKsin(j4);
IkReal x2591=IKcos(j4);
IkReal x2592=(gconst79*r01);
IkReal x2593=(gconst79*r21);
IkReal x2594=((1.0)*cj2);
IkReal x2595=(gconst79*r11);
IkReal x2596=((1.0)*sj0);
IkReal x2597=(cj1*sj2);
IkReal x2598=((1.0)*x2591);
IkReal x2599=(gconst80*x2591);
IkReal x2600=((1.0)*x2590);
IkReal x2601=(gconst80*x2600);
evalcond[0]=((((-1.0)*r22*x2598))+(((-1.0)*r20*x2601))+((x2590*x2593)));
evalcond[1]=(cj0+(((-1.0)*r10*x2601))+(((-1.0)*r12*x2598))+((x2590*x2595)));
evalcond[2]=((((-1.0)*r02*x2598))+(((-1.0)*x2596))+(((-1.0)*r00*x2601))+((x2590*x2592)));
evalcond[3]=((((-1.0)*cj1*x2594))+(((-1.0)*x2593*x2598))+((sj1*sj2))+((r20*x2599))+(((-1.0)*r22*x2600)));
evalcond[4]=(((r00*x2599))+(((-1.0)*cj0*x2597))+(((-1.0)*r02*x2600))+(((-1.0)*cj0*sj1*x2594))+(((-1.0)*x2592*x2598)));
evalcond[5]=(((r10*x2599))+(((-1.0)*x2596*x2597))+(((-1.0)*x2595*x2598))+(((-1.0)*r12*x2600))+(((-1.0)*sj0*sj1*x2594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2602=((-1.0)*r21);
IkReal x2604 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2604)==0){
continue;
}
IkReal x2603=pow(x2604,-0.5);
CheckValue<IkReal> x2605 = IKatan2WithCheck(IkReal(x2602),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2605.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2605.value))));
IkReal gconst82=(x2602*x2603);
IkReal gconst83=((1.0)*r20*x2603);
CheckValue<IkReal> x2606 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2606.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2606.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2607=((-1.0)*r21);
CheckValue<IkReal> x2610 = IKatan2WithCheck(IkReal(x2607),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2610.valid){
continue;
}
IkReal x2608=((1.0)*(x2610.value));
IkReal x2609=x2603;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2608)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2608)));
IkReal gconst82=(x2607*x2609);
IkReal gconst83=((1.0)*r20*x2609);
IkReal x2611=r22*r22;
IkReal x2612=((1.0)*x2611);
CheckValue<IkReal> x2616=IKPowWithIntegerCheck(((-1.0)+x2611),-1);
if(!x2616.valid){
continue;
}
IkReal x2613=x2616.value;
if((((1.0)+(((-1.0)*x2612)))) < -0.00001)
continue;
IkReal x2614=IKsqrt(((1.0)+(((-1.0)*x2612))));
IkReal x2615=(cj0*x2613*x2614);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x2612*x2615))+x2615))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2617=((-1.0)*r21);
CheckValue<IkReal> x2620 = IKatan2WithCheck(IkReal(x2617),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2620.valid){
continue;
}
IkReal x2618=((1.0)*(x2620.value));
IkReal x2619=x2603;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2618)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2618)));
IkReal gconst82=(x2617*x2619);
IkReal gconst83=((1.0)*r20*x2619);
IkReal x2621=r22*r22;
IkReal x2622=((1.0)*x2621);
CheckValue<IkReal> x2626=IKPowWithIntegerCheck(((-1.0)+x2621),-1);
if(!x2626.valid){
continue;
}
IkReal x2623=x2626.value;
if((((1.0)+(((-1.0)*x2622)))) < -0.00001)
continue;
IkReal x2624=IKsqrt(((1.0)+(((-1.0)*x2622))));
IkReal x2625=(sj0*x2623*x2624);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2622*x2625))+x2625))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2627=((-1.0)*r21);
CheckValue<IkReal> x2630 = IKatan2WithCheck(IkReal(x2627),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2630.valid){
continue;
}
IkReal x2628=((1.0)*(x2630.value));
IkReal x2629=x2603;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2628)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2628)));
IkReal gconst82=(x2627*x2629);
IkReal gconst83=((1.0)*r20*x2629);
IkReal x2631=r22*r22;
IkReal x2632=(r12*sj0);
IkReal x2633=(cj0*r02);
CheckValue<IkReal> x2637=IKPowWithIntegerCheck(((-1.0)+x2631),-1);
if(!x2637.valid){
continue;
}
IkReal x2634=x2637.value;
if((((1.0)+(((-1.0)*x2631)))) < -0.00001)
continue;
IkReal x2635=IKsqrt(((1.0)+(((-1.0)*x2631))));
IkReal x2636=(r22*x2634*x2635);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x2632*x2636))+((x2633*x2636)))))+(IKabs(((((-1.0)*x2632))+(((-1.0)*x2633))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2638=((1.0)*sj0);
IkReal x2639=((1.0)*cj0);
CheckValue<IkReal> x2640=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2640.valid){
continue;
}
CheckValue<IkReal> x2641 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2639))+(((-1.0)*r12*x2638)))),IkReal(((((-1.0)*gconst82*r11*x2638))+(((-1.0)*gconst82*r01*x2639))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2640.value)))+(x2641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2642=IKsin(j4);
IkReal x2643=IKcos(j4);
IkReal x2644=(gconst82*r11);
IkReal x2645=((1.0)*cj2);
IkReal x2646=((1.0)*sj0);
IkReal x2647=(cj1*sj2);
IkReal x2648=((1.0)*x2643);
IkReal x2649=(gconst83*x2643);
IkReal x2650=(gconst82*x2642);
IkReal x2651=((1.0)*x2642);
evalcond[0]=((((-1.0)*gconst83*r20*x2651))+(((-1.0)*r22*x2648))+((r21*x2650)));
evalcond[1]=((((-1.0)*r12*x2648))+cj0+(((-1.0)*gconst83*r10*x2651))+((x2642*x2644)));
evalcond[2]=((((-1.0)*r02*x2648))+((r01*x2650))+(((-1.0)*x2646))+(((-1.0)*gconst83*r00*x2651)));
evalcond[3]=((((-1.0)*r22*x2651))+(((-1.0)*cj1*x2645))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2648))+((r20*x2649)));
evalcond[4]=((((-1.0)*r02*x2651))+(((-1.0)*cj0*sj1*x2645))+(((-1.0)*gconst82*r01*x2648))+((r00*x2649))+(((-1.0)*cj0*x2647)));
evalcond[5]=((((-1.0)*x2646*x2647))+(((-1.0)*x2644*x2648))+(((-1.0)*r12*x2651))+((r10*x2649))+(((-1.0)*sj0*sj1*x2645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2652=((1.0)*gconst83);
CheckValue<IkReal> x2653 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2653.valid){
continue;
}
CheckValue<IkReal> x2654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2652))+(((-1.0)*gconst82*r10)))),-1);
if(!x2654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2653.value)+(((1.5707963267949)*(x2654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2655=IKsin(j4);
IkReal x2656=IKcos(j4);
IkReal x2657=(gconst82*r11);
IkReal x2658=((1.0)*cj2);
IkReal x2659=((1.0)*sj0);
IkReal x2660=(cj1*sj2);
IkReal x2661=((1.0)*x2656);
IkReal x2662=(gconst83*x2656);
IkReal x2663=(gconst82*x2655);
IkReal x2664=((1.0)*x2655);
evalcond[0]=(((r21*x2663))+(((-1.0)*gconst83*r20*x2664))+(((-1.0)*r22*x2661)));
evalcond[1]=((((-1.0)*r12*x2661))+cj0+((x2655*x2657))+(((-1.0)*gconst83*r10*x2664)));
evalcond[2]=((((-1.0)*r02*x2661))+(((-1.0)*x2659))+((r01*x2663))+(((-1.0)*gconst83*r00*x2664)));
evalcond[3]=((((-1.0)*cj1*x2658))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2661))+(((-1.0)*r22*x2664))+((r20*x2662)));
evalcond[4]=((((-1.0)*cj0*x2660))+(((-1.0)*gconst82*r01*x2661))+(((-1.0)*r02*x2664))+(((-1.0)*cj0*sj1*x2658))+((r00*x2662)));
evalcond[5]=((((-1.0)*r12*x2664))+((r10*x2662))+(((-1.0)*sj0*sj1*x2658))+(((-1.0)*x2657*x2661))+(((-1.0)*x2659*x2660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2665=((1.0)*gconst83);
CheckValue<IkReal> x2666 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2666.valid){
continue;
}
CheckValue<IkReal> x2667=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2665))+(((-1.0)*gconst82*r00)))),-1);
if(!x2667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2666.value)+(((1.5707963267949)*(x2667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2668=IKsin(j4);
IkReal x2669=IKcos(j4);
IkReal x2670=(gconst82*r11);
IkReal x2671=((1.0)*cj2);
IkReal x2672=((1.0)*sj0);
IkReal x2673=(cj1*sj2);
IkReal x2674=((1.0)*x2669);
IkReal x2675=(gconst83*x2669);
IkReal x2676=(gconst82*x2668);
IkReal x2677=((1.0)*x2668);
evalcond[0]=(((r21*x2676))+(((-1.0)*r22*x2674))+(((-1.0)*gconst83*r20*x2677)));
evalcond[1]=((((-1.0)*r12*x2674))+cj0+((x2668*x2670))+(((-1.0)*gconst83*r10*x2677)));
evalcond[2]=((((-1.0)*r02*x2674))+(((-1.0)*x2672))+((r01*x2676))+(((-1.0)*gconst83*r00*x2677)));
evalcond[3]=((((-1.0)*cj1*x2671))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2674))+((r20*x2675))+(((-1.0)*r22*x2677)));
evalcond[4]=((((-1.0)*cj0*x2673))+(((-1.0)*cj0*sj1*x2671))+(((-1.0)*gconst82*r01*x2674))+(((-1.0)*r02*x2677))+((r00*x2675)));
evalcond[5]=((((-1.0)*r12*x2677))+(((-1.0)*x2670*x2674))+(((-1.0)*sj0*sj1*x2671))+((r10*x2675))+(((-1.0)*x2672*x2673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2678=((-1.0)*r10);
IkReal x2680 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2680)==0){
continue;
}
IkReal x2679=pow(x2680,-0.5);
CheckValue<IkReal> x2681 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2678),IKFAST_ATAN2_MAGTHRESH);
if(!x2681.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2681.value));
IkReal gconst85=(r11*x2679);
IkReal gconst86=(x2678*x2679);
CheckValue<IkReal> x2682 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2682.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2682.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2683=((-1.0)*r10);
IkReal x2684=x2679;
CheckValue<IkReal> x2686 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2683),IKFAST_ATAN2_MAGTHRESH);
if(!x2686.valid){
continue;
}
IkReal x2685=((-1.0)*(x2686.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2685;
IkReal gconst84=x2685;
IkReal gconst85=(r11*x2684);
IkReal gconst86=(x2683*x2684);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2687=((1.0)*sj0);
IkReal x2688=((1.0)*gconst85);
CheckValue<IkReal> x2689=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2688)))),-1);
if(!x2689.valid){
continue;
}
CheckValue<IkReal> x2690 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2687))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst85*r11*x2687))+((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2688))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2689.value)))+(x2690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2691=IKsin(j4);
IkReal x2692=IKcos(j4);
IkReal x2693=(gconst85*r21);
IkReal x2694=(gconst86*r00);
IkReal x2695=(gconst86*r10);
IkReal x2696=((1.0)*cj2);
IkReal x2697=(gconst85*r11);
IkReal x2698=(gconst85*r01);
IkReal x2699=((1.0)*sj0);
IkReal x2700=(gconst86*r20);
IkReal x2701=(cj1*sj2);
IkReal x2702=((1.0)*x2692);
IkReal x2703=((1.0)*x2691);
evalcond[0]=(((x2691*x2693))+(((-1.0)*r22*x2702))+(((-1.0)*x2700*x2703)));
evalcond[1]=(((x2691*x2697))+cj0+(((-1.0)*r12*x2702))+(((-1.0)*x2695*x2703)));
evalcond[2]=(((x2691*x2698))+(((-1.0)*r02*x2702))+(((-1.0)*x2699))+(((-1.0)*x2694*x2703)));
evalcond[3]=((((-1.0)*r22*x2703))+(((-1.0)*cj1*x2696))+((sj1*sj2))+((x2692*x2700))+(((-1.0)*x2693*x2702)));
evalcond[4]=((((-1.0)*cj0*x2701))+(((-1.0)*r02*x2703))+(((-1.0)*cj0*sj1*x2696))+((x2692*x2694))+(((-1.0)*x2698*x2702)));
evalcond[5]=((((-1.0)*x2697*x2702))+(((-1.0)*r12*x2703))+(((-1.0)*sj0*sj1*x2696))+(((-1.0)*x2699*x2701))+((x2692*x2695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2704=((1.0)*gconst86);
CheckValue<IkReal> x2705=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2704))+(((-1.0)*gconst85*r00)))),-1);
if(!x2705.valid){
continue;
}
CheckValue<IkReal> x2706 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2704))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2705.value)))+(x2706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2707=IKsin(j4);
IkReal x2708=IKcos(j4);
IkReal x2709=(gconst85*r21);
IkReal x2710=(gconst86*r00);
IkReal x2711=(gconst86*r10);
IkReal x2712=((1.0)*cj2);
IkReal x2713=(gconst85*r11);
IkReal x2714=(gconst85*r01);
IkReal x2715=((1.0)*sj0);
IkReal x2716=(gconst86*r20);
IkReal x2717=(cj1*sj2);
IkReal x2718=((1.0)*x2708);
IkReal x2719=((1.0)*x2707);
evalcond[0]=(((x2707*x2709))+(((-1.0)*r22*x2718))+(((-1.0)*x2716*x2719)));
evalcond[1]=(cj0+((x2707*x2713))+(((-1.0)*r12*x2718))+(((-1.0)*x2711*x2719)));
evalcond[2]=((((-1.0)*x2715))+((x2707*x2714))+(((-1.0)*r02*x2718))+(((-1.0)*x2710*x2719)));
evalcond[3]=(((x2708*x2716))+((sj1*sj2))+(((-1.0)*x2709*x2718))+(((-1.0)*r22*x2719))+(((-1.0)*cj1*x2712)));
evalcond[4]=(((x2708*x2710))+(((-1.0)*cj0*sj1*x2712))+(((-1.0)*r02*x2719))+(((-1.0)*x2714*x2718))+(((-1.0)*cj0*x2717)));
evalcond[5]=((((-1.0)*sj0*sj1*x2712))+((x2708*x2711))+(((-1.0)*x2713*x2718))+(((-1.0)*x2715*x2717))+(((-1.0)*r12*x2719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2720=((-1.0)*r11);
IkReal x2722 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2722)==0){
continue;
}
IkReal x2721=pow(x2722,-0.5);
CheckValue<IkReal> x2723 = IKatan2WithCheck(IkReal(x2720),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2723.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2723.value))));
IkReal gconst88=(x2720*x2721);
IkReal gconst89=((1.0)*r10*x2721);
CheckValue<IkReal> x2724 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2724.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2724.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2725=((-1.0)*r11);
CheckValue<IkReal> x2728 = IKatan2WithCheck(IkReal(x2725),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2728.valid){
continue;
}
IkReal x2726=((1.0)*(x2728.value));
IkReal x2727=x2721;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2726)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2726)));
IkReal gconst88=(x2725*x2727);
IkReal gconst89=((1.0)*r10*x2727);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2729=((-1.0)*r11);
CheckValue<IkReal> x2732 = IKatan2WithCheck(IkReal(x2729),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2732.valid){
continue;
}
IkReal x2730=((1.0)*(x2732.value));
IkReal x2731=x2721;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2730)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2730)));
IkReal gconst88=(x2729*x2731);
IkReal gconst89=((1.0)*r10*x2731);
IkReal x2733=r12*r12;
IkReal x2734=((1.0)*sj0);
IkReal x2735=(cj0*r02);
IkReal x2736=x2721;
j4eval[0]=((IKabs(((((-1.0)*x2735))+(((-1.0)*r12*x2734)))))+(IKabs((((r12*x2735*x2736))+(((-1.0)*x2734*x2736))+((sj0*x2733*x2736))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2737=((-1.0)*r11);
CheckValue<IkReal> x2740 = IKatan2WithCheck(IkReal(x2737),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2740.valid){
continue;
}
IkReal x2738=((1.0)*(x2740.value));
IkReal x2739=x2721;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2738)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2738)));
IkReal gconst88=(x2737*x2739);
IkReal gconst89=((1.0)*r10*x2739);
IkReal x2741=r12*r12;
IkReal x2742=(cj1*cj2*r22);
IkReal x2743=(r22*sj1*sj2);
CheckValue<IkReal> x2747=IKPowWithIntegerCheck(((-1.0)+x2741),-1);
if(!x2747.valid){
continue;
}
IkReal x2744=x2747.value;
if((((1.0)+(((-1.0)*x2741)))) < -0.00001)
continue;
IkReal x2745=IKsqrt(((1.0)+(((-1.0)*x2741))));
IkReal x2746=(r12*x2744*x2745);
j4eval[0]=((IKabs((((x2742*x2746))+(((-1.0)*x2743*x2746)))))+(IKabs((x2743+(((-1.0)*x2742))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2748=(cj1*cj2);
IkReal x2749=(gconst89*r20);
IkReal x2750=(gconst88*r21);
IkReal x2751=(sj1*sj2);
CheckValue<IkReal> x2752 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2748))+((r22*x2751)))),IkReal((((x2750*x2751))+(((-1.0)*x2749*x2751))+((x2748*x2749))+(((-1.0)*x2748*x2750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2752.valid){
continue;
}
CheckValue<IkReal> x2753=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2749*x2750))+(x2749*x2749)+(x2750*x2750))),-1);
if(!x2753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2752.value)+(((1.5707963267949)*(x2753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2754=IKsin(j4);
IkReal x2755=IKcos(j4);
IkReal x2756=((1.0)*sj0);
IkReal x2757=((1.0)*cj2);
IkReal x2758=(gconst89*r20);
IkReal x2759=(gconst89*r10);
IkReal x2760=(gconst89*r00);
IkReal x2761=(cj1*sj2);
IkReal x2762=((1.0)*x2755);
IkReal x2763=((1.0)*x2754);
IkReal x2764=(gconst88*x2754);
evalcond[0]=((((-1.0)*x2758*x2763))+((r21*x2764))+(((-1.0)*r22*x2762)));
evalcond[1]=(cj0+(((-1.0)*r12*x2762))+(((-1.0)*x2759*x2763))+((r11*x2764)));
evalcond[2]=(((r01*x2764))+(((-1.0)*x2760*x2763))+(((-1.0)*r02*x2762))+(((-1.0)*x2756)));
evalcond[3]=((((-1.0)*gconst88*r21*x2762))+((sj1*sj2))+((x2755*x2758))+(((-1.0)*cj1*x2757))+(((-1.0)*r22*x2763)));
evalcond[4]=((((-1.0)*cj0*x2761))+(((-1.0)*gconst88*r01*x2762))+((x2755*x2760))+(((-1.0)*r02*x2763))+(((-1.0)*cj0*sj1*x2757)));
evalcond[5]=((((-1.0)*r12*x2763))+(((-1.0)*cj2*sj1*x2756))+(((-1.0)*gconst88*r11*x2762))+((x2755*x2759))+(((-1.0)*x2756*x2761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2765=((1.0)*sj0);
IkReal x2766=((1.0)*cj0);
CheckValue<IkReal> x2767 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2765))+(((-1.0)*r02*x2766)))),IkReal(((((-1.0)*gconst88*r01*x2766))+(((-1.0)*gconst88*r11*x2765))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2767.valid){
continue;
}
CheckValue<IkReal> x2768=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2767.value)+(((1.5707963267949)*(x2768.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2769=IKsin(j4);
IkReal x2770=IKcos(j4);
IkReal x2771=((1.0)*sj0);
IkReal x2772=((1.0)*cj2);
IkReal x2773=(gconst89*r20);
IkReal x2774=(gconst89*r10);
IkReal x2775=(gconst89*r00);
IkReal x2776=(cj1*sj2);
IkReal x2777=((1.0)*x2770);
IkReal x2778=((1.0)*x2769);
IkReal x2779=(gconst88*x2769);
evalcond[0]=((((-1.0)*x2773*x2778))+((r21*x2779))+(((-1.0)*r22*x2777)));
evalcond[1]=(((r11*x2779))+cj0+(((-1.0)*r12*x2777))+(((-1.0)*x2774*x2778)));
evalcond[2]=(((r01*x2779))+(((-1.0)*r02*x2777))+(((-1.0)*x2775*x2778))+(((-1.0)*x2771)));
evalcond[3]=(((x2770*x2773))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2777))+(((-1.0)*cj1*x2772))+(((-1.0)*r22*x2778)));
evalcond[4]=(((x2770*x2775))+(((-1.0)*cj0*x2776))+(((-1.0)*r02*x2778))+(((-1.0)*gconst88*r01*x2777))+(((-1.0)*cj0*sj1*x2772)));
evalcond[5]=(((x2770*x2774))+(((-1.0)*gconst88*r11*x2777))+(((-1.0)*cj2*sj1*x2771))+(((-1.0)*r12*x2778))+(((-1.0)*x2771*x2776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2780=((1.0)*gconst89);
CheckValue<IkReal> x2781=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2780))+(((-1.0)*gconst88*r00)))),-1);
if(!x2781.valid){
continue;
}
CheckValue<IkReal> x2782 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2780))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2781.value)))+(x2782.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2783=IKsin(j4);
IkReal x2784=IKcos(j4);
IkReal x2785=((1.0)*sj0);
IkReal x2786=((1.0)*cj2);
IkReal x2787=(gconst89*r20);
IkReal x2788=(gconst89*r10);
IkReal x2789=(gconst89*r00);
IkReal x2790=(cj1*sj2);
IkReal x2791=((1.0)*x2784);
IkReal x2792=((1.0)*x2783);
IkReal x2793=(gconst88*x2783);
evalcond[0]=((((-1.0)*x2787*x2792))+((r21*x2793))+(((-1.0)*r22*x2791)));
evalcond[1]=(cj0+((r11*x2793))+(((-1.0)*x2788*x2792))+(((-1.0)*r12*x2791)));
evalcond[2]=((((-1.0)*x2785))+(((-1.0)*x2789*x2792))+((r01*x2793))+(((-1.0)*r02*x2791)));
evalcond[3]=((((-1.0)*cj1*x2786))+(((-1.0)*gconst88*r21*x2791))+((x2784*x2787))+((sj1*sj2))+(((-1.0)*r22*x2792)));
evalcond[4]=(((x2784*x2789))+(((-1.0)*cj0*sj1*x2786))+(((-1.0)*cj0*x2790))+(((-1.0)*gconst88*r01*x2791))+(((-1.0)*r02*x2792)));
evalcond[5]=((((-1.0)*cj2*sj1*x2785))+((x2784*x2788))+(((-1.0)*x2785*x2790))+(((-1.0)*gconst88*r11*x2791))+(((-1.0)*r12*x2792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2794=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2794;
j4eval[1]=IKsign(x2794);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2795=((1.0)*cj5);
IkReal x2796=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2795)));
j4eval[0]=x2796;
j4eval[1]=((IKabs(((((-1.0)*r20*x2795))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2796);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2797=cj5*cj5;
IkReal x2798=r11*r11;
IkReal x2799=(r11*sj5);
IkReal x2800=(cj5*r10);
IkReal x2801=(x2798+(r12*r12)+(((-1.0)*x2797*x2798))+(((-2.0)*x2799*x2800))+((x2797*(r10*r10))));
j4eval[0]=x2801;
j4eval[1]=IKsign(x2801);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2799))+x2800))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2802=cj5*cj5;
IkReal x2803=r11*r11;
IkReal x2804=(cj5*r10);
IkReal x2805=(r11*sj5);
CheckValue<IkReal> x2806=IKPowWithIntegerCheck(IKsign((((x2802*(r10*r10)))+(r12*r12)+(((-2.0)*x2804*x2805))+(((-1.0)*x2802*x2803))+x2803)),-1);
if(!x2806.valid){
continue;
}
CheckValue<IkReal> x2807 = IKatan2WithCheck(IkReal(((((-1.0)*x2805))+x2804)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2806.value)))+(x2807.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2808=IKsin(j4);
IkReal x2809=IKcos(j4);
IkReal x2810=(cj5*r10);
IkReal x2811=(r01*sj5);
IkReal x2812=((1.0)*cj2);
IkReal x2813=(cj5*r00);
IkReal x2814=(cj5*r20);
IkReal x2815=((1.0)*x2809);
IkReal x2816=((1.0)*x2808);
IkReal x2817=(sj5*x2808);
evalcond[0]=(((r21*x2817))+(((-1.0)*r22*x2815))+(((-1.0)*x2814*x2816)));
evalcond[1]=((((-1.0)*r02*x2815))+(((-1.0)*x2813*x2816))+((x2808*x2811)));
evalcond[2]=((((-1.0)*r12*x2816))+((x2809*x2810))+(((-1.0)*r11*sj5*x2815)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2815))+(((-1.0)*x2810*x2816))+((r11*x2817)));
evalcond[4]=(((x2809*x2814))+(((-1.0)*cj1*x2812))+((sj1*sj2))+(((-1.0)*r22*x2816))+(((-1.0)*r21*sj5*x2815)));
evalcond[5]=(((x2809*x2813))+(((-1.0)*r02*x2816))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2812))+(((-1.0)*x2811*x2815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2818=((1.0)*cj5);
CheckValue<IkReal> x2819 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2819.valid){
continue;
}
CheckValue<IkReal> x2820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2818)))),-1);
if(!x2820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2819.value)+(((1.5707963267949)*(x2820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2821=IKsin(j4);
IkReal x2822=IKcos(j4);
IkReal x2823=(cj5*r10);
IkReal x2824=(r01*sj5);
IkReal x2825=((1.0)*cj2);
IkReal x2826=(cj5*r00);
IkReal x2827=(cj5*r20);
IkReal x2828=((1.0)*x2822);
IkReal x2829=((1.0)*x2821);
IkReal x2830=(sj5*x2821);
evalcond[0]=((((-1.0)*r22*x2828))+((r21*x2830))+(((-1.0)*x2827*x2829)));
evalcond[1]=(((x2821*x2824))+(((-1.0)*x2826*x2829))+(((-1.0)*r02*x2828)));
evalcond[2]=(((x2822*x2823))+(((-1.0)*r12*x2829))+(((-1.0)*r11*sj5*x2828)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2828))+(((-1.0)*x2823*x2829))+((r11*x2830)));
evalcond[4]=(((x2822*x2827))+(((-1.0)*cj1*x2825))+((sj1*sj2))+(((-1.0)*r22*x2829))+(((-1.0)*r21*sj5*x2828)));
evalcond[5]=(((x2822*x2826))+(((-1.0)*x2824*x2828))+(((-1.0)*sj1*x2825))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2831=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2831.valid){
continue;
}
CheckValue<IkReal> x2832 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2831.value)))+(x2832.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2833=IKsin(j4);
IkReal x2834=IKcos(j4);
IkReal x2835=(cj5*r10);
IkReal x2836=(r01*sj5);
IkReal x2837=((1.0)*cj2);
IkReal x2838=(cj5*r00);
IkReal x2839=(cj5*r20);
IkReal x2840=((1.0)*x2834);
IkReal x2841=((1.0)*x2833);
IkReal x2842=(sj5*x2833);
evalcond[0]=(((r21*x2842))+(((-1.0)*x2839*x2841))+(((-1.0)*r22*x2840)));
evalcond[1]=((((-1.0)*r02*x2840))+(((-1.0)*x2838*x2841))+((x2833*x2836)));
evalcond[2]=(((x2834*x2835))+(((-1.0)*r12*x2841))+(((-1.0)*r11*sj5*x2840)));
evalcond[3]=((1.0)+((r11*x2842))+(((-1.0)*r12*x2840))+(((-1.0)*x2835*x2841)));
evalcond[4]=((((-1.0)*cj1*x2837))+((x2834*x2839))+((sj1*sj2))+(((-1.0)*r22*x2841))+(((-1.0)*r21*sj5*x2840)));
evalcond[5]=(((x2834*x2838))+(((-1.0)*sj1*x2837))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2841))+(((-1.0)*x2836*x2840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2843=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2843;
j4eval[1]=IKsign(x2843);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2844=((1.0)*cj5);
IkReal x2845=((((-1.0)*r21*x2844))+(((-1.0)*r20*sj5)));
j4eval[0]=x2845;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2844))))));
j4eval[2]=IKsign(x2845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2846=cj5*cj5;
IkReal x2847=r11*r11;
IkReal x2848=(cj5*r10);
IkReal x2849=(r11*sj5);
IkReal x2850=(((x2846*x2847))+(((-1.0)*x2846*(r10*r10)))+(((2.0)*x2848*x2849))+(((-1.0)*(r12*r12)))+(((-1.0)*x2847)));
j4eval[0]=x2850;
j4eval[1]=((IKabs(((((-1.0)*x2849))+x2848)))+(IKabs(r12)));
j4eval[2]=IKsign(x2850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2851=cj5*cj5;
IkReal x2852=r11*r11;
IkReal x2853=(cj5*r10);
IkReal x2854=(r11*sj5);
CheckValue<IkReal> x2855 = IKatan2WithCheck(IkReal(((((-1.0)*x2854))+x2853)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2855.valid){
continue;
}
CheckValue<IkReal> x2856=IKPowWithIntegerCheck(IKsign(((((2.0)*x2853*x2854))+(((-1.0)*x2851*(r10*r10)))+((x2851*x2852))+(((-1.0)*(r12*r12)))+(((-1.0)*x2852)))),-1);
if(!x2856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2855.value)+(((1.5707963267949)*(x2856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2857=IKsin(j4);
IkReal x2858=IKcos(j4);
IkReal x2859=(cj5*r10);
IkReal x2860=(r01*sj5);
IkReal x2861=(cj5*r00);
IkReal x2862=(cj5*r20);
IkReal x2863=((1.0)*x2858);
IkReal x2864=((1.0)*x2857);
IkReal x2865=(sj5*x2857);
evalcond[0]=((((-1.0)*x2862*x2864))+((r21*x2865))+(((-1.0)*r22*x2863)));
evalcond[1]=((((-1.0)*r02*x2863))+((x2857*x2860))+(((-1.0)*x2861*x2864)));
evalcond[2]=((((-1.0)*r12*x2864))+((x2858*x2859))+(((-1.0)*r11*sj5*x2863)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2863))+(((-1.0)*x2859*x2864))+((r11*x2865)));
evalcond[4]=((((-1.0)*r02*x2864))+((cj2*sj1))+((cj1*sj2))+((x2858*x2861))+(((-1.0)*x2860*x2863)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2864))+((x2858*x2862))+(((-1.0)*r21*sj5*x2863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2866=((1.0)*cj5);
CheckValue<IkReal> x2867 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2867.valid){
continue;
}
CheckValue<IkReal> x2868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2866))+(((-1.0)*r20*sj5)))),-1);
if(!x2868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2867.value)+(((1.5707963267949)*(x2868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2869=IKsin(j4);
IkReal x2870=IKcos(j4);
IkReal x2871=(cj5*r10);
IkReal x2872=(r01*sj5);
IkReal x2873=(cj5*r00);
IkReal x2874=(cj5*r20);
IkReal x2875=((1.0)*x2870);
IkReal x2876=((1.0)*x2869);
IkReal x2877=(sj5*x2869);
evalcond[0]=((((-1.0)*r22*x2875))+((r21*x2877))+(((-1.0)*x2874*x2876)));
evalcond[1]=((((-1.0)*r02*x2875))+((x2869*x2872))+(((-1.0)*x2873*x2876)));
evalcond[2]=(((x2870*x2871))+(((-1.0)*r11*sj5*x2875))+(((-1.0)*r12*x2876)));
evalcond[3]=((-1.0)+(((-1.0)*x2871*x2876))+((r11*x2877))+(((-1.0)*r12*x2875)));
evalcond[4]=(((cj2*sj1))+((x2870*x2873))+(((-1.0)*r02*x2876))+((cj1*sj2))+(((-1.0)*x2872*x2875)));
evalcond[5]=(((x2870*x2874))+(((-1.0)*r22*x2876))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2878 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2878.valid){
continue;
}
CheckValue<IkReal> x2879=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2878.value)+(((1.5707963267949)*(x2879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2880=IKsin(j4);
IkReal x2881=IKcos(j4);
IkReal x2882=(cj5*r10);
IkReal x2883=(r01*sj5);
IkReal x2884=(cj5*r00);
IkReal x2885=(cj5*r20);
IkReal x2886=((1.0)*x2881);
IkReal x2887=((1.0)*x2880);
IkReal x2888=(sj5*x2880);
evalcond[0]=((((-1.0)*r22*x2886))+((r21*x2888))+(((-1.0)*x2885*x2887)));
evalcond[1]=(((x2880*x2883))+(((-1.0)*r02*x2886))+(((-1.0)*x2884*x2887)));
evalcond[2]=((((-1.0)*r11*sj5*x2886))+((x2881*x2882))+(((-1.0)*r12*x2887)));
evalcond[3]=((-1.0)+(((-1.0)*x2882*x2887))+((r11*x2888))+(((-1.0)*r12*x2886)));
evalcond[4]=((((-1.0)*x2883*x2886))+((cj2*sj1))+(((-1.0)*r02*x2887))+((cj1*sj2))+((x2881*x2884)));
evalcond[5]=((((-1.0)*r22*x2887))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2881*x2885))+(((-1.0)*r21*sj5*x2886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2889=((-1.0)*r00);
IkReal x2891 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2891)==0){
continue;
}
IkReal x2890=pow(x2891,-0.5);
CheckValue<IkReal> x2892 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2889),IKFAST_ATAN2_MAGTHRESH);
if(!x2892.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2892.value));
IkReal gconst91=(r01*x2890);
IkReal gconst92=(x2889*x2890);
CheckValue<IkReal> x2893 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2893.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2893.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2894=((-1.0)*r00);
IkReal x2895=x2890;
CheckValue<IkReal> x2897 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2894),IKFAST_ATAN2_MAGTHRESH);
if(!x2897.valid){
continue;
}
IkReal x2896=((-1.0)*(x2897.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2896;
IkReal gconst90=x2896;
IkReal gconst91=(r01*x2895);
IkReal gconst92=(x2894*x2895);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2898=((1.0)*sj0);
IkReal x2899=((1.0)*cj0);
CheckValue<IkReal> x2900=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2900.valid){
continue;
}
CheckValue<IkReal> x2901 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2899))+(((-1.0)*r12*x2898)))),IkReal(((((-1.0)*gconst91*r11*x2898))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2900.value)))+(x2901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2902=IKsin(j4);
IkReal x2903=IKcos(j4);
IkReal x2904=((1.0)*cj2);
IkReal x2905=(gconst92*r00);
IkReal x2906=(gconst92*r20);
IkReal x2907=((1.0)*sj0);
IkReal x2908=(gconst92*r10);
IkReal x2909=(cj1*sj2);
IkReal x2910=((1.0)*x2903);
IkReal x2911=(gconst91*x2902);
IkReal x2912=((1.0)*x2902);
evalcond[0]=((((-1.0)*x2906*x2912))+((r21*x2911))+(((-1.0)*r22*x2910)));
evalcond[1]=(((r11*x2911))+cj0+(((-1.0)*r12*x2910))+(((-1.0)*x2908*x2912)));
evalcond[2]=(((r01*x2911))+(((-1.0)*x2907))+(((-1.0)*x2905*x2912))+(((-1.0)*r02*x2910)));
evalcond[3]=(((sj1*sj2))+((x2903*x2906))+(((-1.0)*cj1*x2904))+(((-1.0)*gconst91*r21*x2910))+(((-1.0)*r22*x2912)));
evalcond[4]=((((-1.0)*gconst91*r01*x2910))+(((-1.0)*cj0*x2909))+(((-1.0)*cj0*sj1*x2904))+((x2903*x2905))+(((-1.0)*r02*x2912)));
evalcond[5]=((((-1.0)*gconst91*r11*x2910))+(((-1.0)*r12*x2912))+((x2903*x2908))+(((-1.0)*sj0*sj1*x2904))+(((-1.0)*x2907*x2909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2913=((1.0)*gconst92);
CheckValue<IkReal> x2914 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2914.valid){
continue;
}
CheckValue<IkReal> x2915=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2913)))),-1);
if(!x2915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2914.value)+(((1.5707963267949)*(x2915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2916=IKsin(j4);
IkReal x2917=IKcos(j4);
IkReal x2918=((1.0)*cj2);
IkReal x2919=(gconst92*r00);
IkReal x2920=(gconst92*r20);
IkReal x2921=((1.0)*sj0);
IkReal x2922=(gconst92*r10);
IkReal x2923=(cj1*sj2);
IkReal x2924=((1.0)*x2917);
IkReal x2925=(gconst91*x2916);
IkReal x2926=((1.0)*x2916);
evalcond[0]=((((-1.0)*x2920*x2926))+((r21*x2925))+(((-1.0)*r22*x2924)));
evalcond[1]=(cj0+(((-1.0)*r12*x2924))+((r11*x2925))+(((-1.0)*x2922*x2926)));
evalcond[2]=((((-1.0)*r02*x2924))+(((-1.0)*x2921))+(((-1.0)*x2919*x2926))+((r01*x2925)));
evalcond[3]=((((-1.0)*gconst91*r21*x2924))+((sj1*sj2))+((x2917*x2920))+(((-1.0)*cj1*x2918))+(((-1.0)*r22*x2926)));
evalcond[4]=((((-1.0)*cj0*sj1*x2918))+(((-1.0)*r02*x2926))+((x2917*x2919))+(((-1.0)*cj0*x2923))+(((-1.0)*gconst91*r01*x2924)));
evalcond[5]=((((-1.0)*x2921*x2923))+((x2917*x2922))+(((-1.0)*r12*x2926))+(((-1.0)*gconst91*r11*x2924))+(((-1.0)*sj0*sj1*x2918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2927=((-1.0)*r01);
IkReal x2929 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2929)==0){
continue;
}
IkReal x2928=pow(x2929,-0.5);
CheckValue<IkReal> x2930 = IKatan2WithCheck(IkReal(x2927),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2930.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2930.value))));
IkReal gconst94=(x2927*x2928);
IkReal gconst95=((1.0)*r00*x2928);
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2931.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2932=((-1.0)*r01);
CheckValue<IkReal> x2935 = IKatan2WithCheck(IkReal(x2932),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2935.valid){
continue;
}
IkReal x2933=((1.0)*(x2935.value));
IkReal x2934=x2928;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2933)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2933)));
IkReal gconst94=(x2932*x2934);
IkReal gconst95=((1.0)*r00*x2934);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2936=((-1.0)*r01);
CheckValue<IkReal> x2939 = IKatan2WithCheck(IkReal(x2936),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2939.valid){
continue;
}
IkReal x2937=((1.0)*(x2939.value));
IkReal x2938=x2928;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2937)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2937)));
IkReal gconst94=(x2936*x2938);
IkReal gconst95=((1.0)*r00*x2938);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2940=((-1.0)*r01);
CheckValue<IkReal> x2943 = IKatan2WithCheck(IkReal(x2940),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2943.valid){
continue;
}
IkReal x2941=((1.0)*(x2943.value));
IkReal x2942=x2928;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2941)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2941)));
IkReal gconst94=(x2940*x2942);
IkReal gconst95=((1.0)*r00*x2942);
IkReal x2944=r02*r02;
IkReal x2945=(r12*sj0);
IkReal x2946=((1.0)*cj0);
IkReal x2947=x2928;
j4eval[0]=((IKabs(((((-1.0)*x2945))+(((-1.0)*r02*x2946)))))+(IKabs(((((-1.0)*x2946*x2947))+((cj0*x2944*x2947))+((r02*x2945*x2947))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2948=((1.0)*sj0);
IkReal x2949=((1.0)*cj0);
CheckValue<IkReal> x2950 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2948))+(((-1.0)*r02*x2949)))),IkReal(((((-1.0)*gconst94*r01*x2949))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2948))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2950.valid){
continue;
}
CheckValue<IkReal> x2951=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2950.value)+(((1.5707963267949)*(x2951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2952=IKsin(j4);
IkReal x2953=IKcos(j4);
IkReal x2954=(gconst94*r11);
IkReal x2955=((1.0)*cj2);
IkReal x2956=(gconst94*r21);
IkReal x2957=((1.0)*sj0);
IkReal x2958=(gconst94*r01);
IkReal x2959=(cj1*sj2);
IkReal x2960=((1.0)*x2953);
IkReal x2961=(gconst95*x2953);
IkReal x2962=((1.0)*x2952);
IkReal x2963=(gconst95*x2962);
evalcond[0]=((((-1.0)*r20*x2963))+((x2952*x2956))+(((-1.0)*r22*x2960)));
evalcond[1]=(cj0+((x2952*x2954))+(((-1.0)*r10*x2963))+(((-1.0)*r12*x2960)));
evalcond[2]=((((-1.0)*x2957))+(((-1.0)*r00*x2963))+(((-1.0)*r02*x2960))+((x2952*x2958)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2962))+((r20*x2961))+(((-1.0)*x2956*x2960))+(((-1.0)*cj1*x2955)));
evalcond[4]=((((-1.0)*cj0*x2959))+(((-1.0)*cj0*sj1*x2955))+(((-1.0)*r02*x2962))+((r00*x2961))+(((-1.0)*x2958*x2960)));
evalcond[5]=((((-1.0)*x2954*x2960))+(((-1.0)*sj0*sj1*x2955))+((r10*x2961))+(((-1.0)*x2957*x2959))+(((-1.0)*r12*x2962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2964=((1.0)*gconst95);
CheckValue<IkReal> x2965 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2965.valid){
continue;
}
CheckValue<IkReal> x2966=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2964))+(((-1.0)*gconst94*r10)))),-1);
if(!x2966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2965.value)+(((1.5707963267949)*(x2966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2967=IKsin(j4);
IkReal x2968=IKcos(j4);
IkReal x2969=(gconst94*r11);
IkReal x2970=((1.0)*cj2);
IkReal x2971=(gconst94*r21);
IkReal x2972=((1.0)*sj0);
IkReal x2973=(gconst94*r01);
IkReal x2974=(cj1*sj2);
IkReal x2975=((1.0)*x2968);
IkReal x2976=(gconst95*x2968);
IkReal x2977=((1.0)*x2967);
IkReal x2978=(gconst95*x2977);
evalcond[0]=((((-1.0)*r20*x2978))+(((-1.0)*r22*x2975))+((x2967*x2971)));
evalcond[1]=(cj0+(((-1.0)*r12*x2975))+(((-1.0)*r10*x2978))+((x2967*x2969)));
evalcond[2]=((((-1.0)*r02*x2975))+(((-1.0)*r00*x2978))+(((-1.0)*x2972))+((x2967*x2973)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2977))+(((-1.0)*cj1*x2970))+((r20*x2976))+(((-1.0)*x2971*x2975)));
evalcond[4]=((((-1.0)*cj0*x2974))+(((-1.0)*r02*x2977))+((r00*x2976))+(((-1.0)*cj0*sj1*x2970))+(((-1.0)*x2973*x2975)));
evalcond[5]=((((-1.0)*x2972*x2974))+(((-1.0)*r12*x2977))+((r10*x2976))+(((-1.0)*x2969*x2975))+(((-1.0)*sj0*sj1*x2970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2979=((1.0)*gconst95);
CheckValue<IkReal> x2980 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2980.valid){
continue;
}
CheckValue<IkReal> x2981=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2979)))),-1);
if(!x2981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2980.value)+(((1.5707963267949)*(x2981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2982=IKsin(j4);
IkReal x2983=IKcos(j4);
IkReal x2984=(gconst94*r11);
IkReal x2985=((1.0)*cj2);
IkReal x2986=(gconst94*r21);
IkReal x2987=((1.0)*sj0);
IkReal x2988=(gconst94*r01);
IkReal x2989=(cj1*sj2);
IkReal x2990=((1.0)*x2983);
IkReal x2991=(gconst95*x2983);
IkReal x2992=((1.0)*x2982);
IkReal x2993=(gconst95*x2992);
evalcond[0]=((((-1.0)*r22*x2990))+((x2982*x2986))+(((-1.0)*r20*x2993)));
evalcond[1]=(cj0+(((-1.0)*r12*x2990))+(((-1.0)*r10*x2993))+((x2982*x2984)));
evalcond[2]=((((-1.0)*x2987))+((x2982*x2988))+(((-1.0)*r02*x2990))+(((-1.0)*r00*x2993)));
evalcond[3]=((((-1.0)*r22*x2992))+(((-1.0)*cj1*x2985))+((r20*x2991))+((sj1*sj2))+(((-1.0)*x2986*x2990)));
evalcond[4]=(((r00*x2991))+(((-1.0)*cj0*x2989))+(((-1.0)*x2988*x2990))+(((-1.0)*cj0*sj1*x2985))+(((-1.0)*r02*x2992)));
evalcond[5]=((((-1.0)*x2984*x2990))+(((-1.0)*r12*x2992))+(((-1.0)*sj0*sj1*x2985))+(((-1.0)*x2987*x2989))+((r10*x2991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2994=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2994;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2995=((1.0)*cj5);
IkReal x2996=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2995)));
j4eval[0]=x2996;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2995))))));
j4eval[2]=IKsign(x2996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2997=cj5*cj5;
IkReal x2998=r01*r01;
IkReal x2999=(r01*sj5);
IkReal x3000=(cj5*r00);
IkReal x3001=((((-1.0)*(r02*r02)))+((x2997*x2998))+(((-1.0)*x2997*(r00*r00)))+(((-1.0)*x2998))+(((2.0)*x2999*x3000)));
j4eval[0]=x3001;
j4eval[1]=IKsign(x3001);
j4eval[2]=((IKabs(r02))+(IKabs((x3000+(((-1.0)*x2999))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3002=cj5*cj5;
IkReal x3003=r01*r01;
IkReal x3004=(r01*sj5);
IkReal x3005=(cj5*r00);
CheckValue<IkReal> x3006=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3003))+(((-1.0)*(r02*r02)))+(((2.0)*x3004*x3005))+((x3002*x3003))+(((-1.0)*x3002*(r00*r00))))),-1);
if(!x3006.valid){
continue;
}
CheckValue<IkReal> x3007 = IKatan2WithCheck(IkReal(((((-1.0)*x3004))+x3005)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3006.value)))+(x3007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3008=IKsin(j4);
IkReal x3009=IKcos(j4);
IkReal x3010=(cj5*r10);
IkReal x3011=(r01*sj5);
IkReal x3012=((1.0)*cj2);
IkReal x3013=(cj5*r00);
IkReal x3014=(cj5*r20);
IkReal x3015=((1.0)*x3009);
IkReal x3016=((1.0)*x3008);
IkReal x3017=(sj5*x3008);
evalcond[0]=((((-1.0)*r22*x3015))+(((-1.0)*x3014*x3016))+((r21*x3017)));
evalcond[1]=((((-1.0)*r12*x3015))+(((-1.0)*x3010*x3016))+((r11*x3017)));
evalcond[2]=(((x3009*x3013))+(((-1.0)*r02*x3016))+(((-1.0)*x3011*x3015)));
evalcond[3]=((-1.0)+((x3008*x3011))+(((-1.0)*r02*x3015))+(((-1.0)*x3013*x3016)));
evalcond[4]=(((x3009*x3014))+(((-1.0)*r22*x3016))+(((-1.0)*r21*sj5*x3015))+((sj1*sj2))+(((-1.0)*cj1*x3012)));
evalcond[5]=(((x3009*x3010))+(((-1.0)*r11*sj5*x3015))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3016))+(((-1.0)*sj1*x3012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3018=((1.0)*cj5);
CheckValue<IkReal> x3019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3018)))),-1);
if(!x3019.valid){
continue;
}
CheckValue<IkReal> x3020 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3019.value)))+(x3020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3021=IKsin(j4);
IkReal x3022=IKcos(j4);
IkReal x3023=(cj5*r10);
IkReal x3024=(r01*sj5);
IkReal x3025=((1.0)*cj2);
IkReal x3026=(cj5*r00);
IkReal x3027=(cj5*r20);
IkReal x3028=((1.0)*x3022);
IkReal x3029=((1.0)*x3021);
IkReal x3030=(sj5*x3021);
evalcond[0]=((((-1.0)*x3027*x3029))+((r21*x3030))+(((-1.0)*r22*x3028)));
evalcond[1]=((((-1.0)*r12*x3028))+((r11*x3030))+(((-1.0)*x3023*x3029)));
evalcond[2]=((((-1.0)*x3024*x3028))+(((-1.0)*r02*x3029))+((x3022*x3026)));
evalcond[3]=((-1.0)+(((-1.0)*x3026*x3029))+((x3021*x3024))+(((-1.0)*r02*x3028)));
evalcond[4]=((((-1.0)*cj1*x3025))+((sj1*sj2))+(((-1.0)*r22*x3029))+((x3022*x3027))+(((-1.0)*r21*sj5*x3028)));
evalcond[5]=((((-1.0)*r12*x3029))+(((-1.0)*r11*sj5*x3028))+(((-1.0)*sj1*x3025))+(((-1.0)*cj1*sj2))+((x3022*x3023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3031=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3031.valid){
continue;
}
CheckValue<IkReal> x3032 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3031.value)))+(x3032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3033=IKsin(j4);
IkReal x3034=IKcos(j4);
IkReal x3035=(cj5*r10);
IkReal x3036=(r01*sj5);
IkReal x3037=((1.0)*cj2);
IkReal x3038=(cj5*r00);
IkReal x3039=(cj5*r20);
IkReal x3040=((1.0)*x3034);
IkReal x3041=((1.0)*x3033);
IkReal x3042=(sj5*x3033);
evalcond[0]=(((r21*x3042))+(((-1.0)*r22*x3040))+(((-1.0)*x3039*x3041)));
evalcond[1]=((((-1.0)*r12*x3040))+(((-1.0)*x3035*x3041))+((r11*x3042)));
evalcond[2]=(((x3034*x3038))+(((-1.0)*x3036*x3040))+(((-1.0)*r02*x3041)));
evalcond[3]=((-1.0)+(((-1.0)*x3038*x3041))+((x3033*x3036))+(((-1.0)*r02*x3040)));
evalcond[4]=((((-1.0)*cj1*x3037))+((x3034*x3039))+(((-1.0)*r22*x3041))+((sj1*sj2))+(((-1.0)*r21*sj5*x3040)));
evalcond[5]=((((-1.0)*r12*x3041))+((x3034*x3035))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3040))+(((-1.0)*sj1*x3037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3043=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3043;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3044=((1.0)*cj5);
IkReal x3045=((((-1.0)*r21*x3044))+(((-1.0)*r20*sj5)));
j4eval[0]=x3045;
j4eval[1]=((IKabs(((((-1.0)*r10*x3044))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3046=cj5*cj5;
IkReal x3047=r01*r01;
IkReal x3048=(cj5*r00);
IkReal x3049=(r01*sj5);
IkReal x3050=(x3047+((x3046*(r00*r00)))+(((-2.0)*x3048*x3049))+(((-1.0)*x3046*x3047))+(r02*r02));
j4eval[0]=x3050;
j4eval[1]=((IKabs(r02))+(IKabs((x3048+(((-1.0)*x3049))))));
j4eval[2]=IKsign(x3050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3051=cj5*cj5;
IkReal x3052=r01*r01;
IkReal x3053=(r01*sj5);
IkReal x3054=(cj5*r00);
CheckValue<IkReal> x3055 = IKatan2WithCheck(IkReal((x3054+(((-1.0)*x3053)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3055.valid){
continue;
}
CheckValue<IkReal> x3056=IKPowWithIntegerCheck(IKsign((x3052+(((-2.0)*x3053*x3054))+(r02*r02)+((x3051*(r00*r00)))+(((-1.0)*x3051*x3052)))),-1);
if(!x3056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3055.value)+(((1.5707963267949)*(x3056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3057=IKsin(j4);
IkReal x3058=IKcos(j4);
IkReal x3059=(cj5*r10);
IkReal x3060=(r01*sj5);
IkReal x3061=(cj5*r00);
IkReal x3062=(cj5*r20);
IkReal x3063=((1.0)*x3058);
IkReal x3064=((1.0)*x3057);
IkReal x3065=(sj5*x3057);
evalcond[0]=((((-1.0)*r22*x3063))+(((-1.0)*x3062*x3064))+((r21*x3065)));
evalcond[1]=((((-1.0)*r12*x3063))+((r11*x3065))+(((-1.0)*x3059*x3064)));
evalcond[2]=((((-1.0)*x3060*x3063))+((x3058*x3061))+(((-1.0)*r02*x3064)));
evalcond[3]=((1.0)+(((-1.0)*x3061*x3064))+(((-1.0)*r02*x3063))+((x3057*x3060)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3063))+((cj1*sj2))+(((-1.0)*r12*x3064))+((x3058*x3059)));
evalcond[5]=((((-1.0)*r21*sj5*x3063))+(((-1.0)*r22*x3064))+((x3058*x3062))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3066=((1.0)*cj5);
CheckValue<IkReal> x3067 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3066))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3067.valid){
continue;
}
CheckValue<IkReal> x3068=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3066))+(((-1.0)*r20*sj5)))),-1);
if(!x3068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3067.value)+(((1.5707963267949)*(x3068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3069=IKsin(j4);
IkReal x3070=IKcos(j4);
IkReal x3071=(cj5*r10);
IkReal x3072=(r01*sj5);
IkReal x3073=(cj5*r00);
IkReal x3074=(cj5*r20);
IkReal x3075=((1.0)*x3070);
IkReal x3076=((1.0)*x3069);
IkReal x3077=(sj5*x3069);
evalcond[0]=((((-1.0)*r22*x3075))+(((-1.0)*x3074*x3076))+((r21*x3077)));
evalcond[1]=((((-1.0)*r12*x3075))+(((-1.0)*x3071*x3076))+((r11*x3077)));
evalcond[2]=((((-1.0)*x3072*x3075))+(((-1.0)*r02*x3076))+((x3070*x3073)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3075))+(((-1.0)*x3073*x3076))+((x3069*x3072)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x3075))+(((-1.0)*r12*x3076))+((x3070*x3071)));
evalcond[5]=((((-1.0)*r21*sj5*x3075))+(((-1.0)*r22*x3076))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3070*x3074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3078 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3078.valid){
continue;
}
CheckValue<IkReal> x3079=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3078.value)+(((1.5707963267949)*(x3079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3080=IKsin(j4);
IkReal x3081=IKcos(j4);
IkReal x3082=(cj5*r10);
IkReal x3083=(r01*sj5);
IkReal x3084=(cj5*r00);
IkReal x3085=(cj5*r20);
IkReal x3086=((1.0)*x3081);
IkReal x3087=((1.0)*x3080);
IkReal x3088=(sj5*x3080);
evalcond[0]=(((r21*x3088))+(((-1.0)*r22*x3086))+(((-1.0)*x3085*x3087)));
evalcond[1]=(((r11*x3088))+(((-1.0)*x3082*x3087))+(((-1.0)*r12*x3086)));
evalcond[2]=(((x3081*x3084))+(((-1.0)*x3083*x3086))+(((-1.0)*r02*x3087)));
evalcond[3]=((1.0)+((x3080*x3083))+(((-1.0)*r02*x3086))+(((-1.0)*x3084*x3087)));
evalcond[4]=(((cj2*sj1))+((x3081*x3082))+((cj1*sj2))+(((-1.0)*r12*x3087))+(((-1.0)*r11*sj5*x3086)));
evalcond[5]=(((x3081*x3085))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3086))+(((-1.0)*r22*x3087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3089=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3089);
rxp1_1=(px*r21);
rxp1_2=(r11*x3089);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3090=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3090);
rxp1_1=(px*r21);
rxp1_2=(r11*x3090);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3091=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3091);
rxp1_1=(px*r21);
rxp1_2=(r11*x3091);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3094=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3094.valid){
continue;
}
IkReal x3092=x3094.value;
IkReal x3093=(sj0*x3092);
cj4array[0]=(((cj2*sj1*x3093))+((cj1*sj2*x3093)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3095=IKsin(j4);
IkReal x3096=IKcos(j4);
IkReal x3097=(cj5*r20);
IkReal x3098=(r21*sj5);
IkReal x3099=((1.0)*x3095);
IkReal x3100=((1.0)*x3096);
evalcond[0]=((-1.0)*r02*x3095);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3100)));
evalcond[2]=(((x3095*x3098))+(((-1.0)*x3097*x3099)));
evalcond[3]=(((r11*sj5*x3095))+(((-1.0)*cj5*r10*x3099)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3096*x3097))+(((-1.0)*x3098*x3100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3102=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3102.valid){
continue;
}
IkReal x3101=x3102.value;
cj4array[0]=((((-1.0)*sj1*sj2*x3101))+((cj1*cj2*x3101)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3103=IKsin(j4);
IkReal x3104=IKcos(j4);
IkReal x3105=(r11*sj5);
IkReal x3106=((1.0)*sj0);
IkReal x3107=((1.0)*x3104);
IkReal x3108=((1.0)*cj5*x3103);
evalcond[0]=((-1.0)*r02*x3103);
evalcond[1]=((((-1.0)*x3106))+(((-1.0)*r02*x3107)));
evalcond[2]=((((-1.0)*r20*x3108))+((r21*sj5*x3103)));
evalcond[3]=((((-1.0)*r10*x3108))+((x3103*x3105)));
evalcond[4]=((((-1.0)*cj1*sj2*x3106))+(((-1.0)*cj2*sj1*x3106))+((cj5*r10*x3104))+(((-1.0)*x3105*x3107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3109=IKPowWithIntegerCheck(r02,-1);
if(!x3109.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3109.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3110=IKsin(j4);
IkReal x3111=IKcos(j4);
IkReal x3112=((1.0)*sj0);
IkReal x3113=(cj5*x3111);
IkReal x3114=(sj5*x3110);
IkReal x3115=((1.0)*sj5*x3111);
IkReal x3116=((1.0)*cj5*x3110);
evalcond[0]=((-1.0)*r02*x3110);
evalcond[1]=((((-1.0)*r20*x3116))+((r21*x3114)));
evalcond[2]=((((-1.0)*r10*x3116))+((r11*x3114)));
evalcond[3]=((((-1.0)*r21*x3115))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3113)));
evalcond[4]=((((-1.0)*cj1*sj2*x3112))+(((-1.0)*cj2*sj1*x3112))+(((-1.0)*r11*x3115))+((r10*x3113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3117=((1.0)*sj0);
IkReal x3118=((1.0)*cj0);
CheckValue<IkReal> x3119 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3118))+(((-1.0)*r12*x3117)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3117))+(((-1.0)*r01*sj5*x3118)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3119.valid){
continue;
}
CheckValue<IkReal> x3120=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3119.value)+(((1.5707963267949)*(x3120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3121=IKsin(j4);
IkReal x3122=IKcos(j4);
IkReal x3123=(cj5*r10);
IkReal x3124=(r01*sj5);
IkReal x3125=((1.0)*cj2);
IkReal x3126=(cj5*r00);
IkReal x3127=((1.0)*sj0);
IkReal x3128=(cj5*r20);
IkReal x3129=(cj1*sj2);
IkReal x3130=((1.0)*x3122);
IkReal x3131=((1.0)*x3121);
IkReal x3132=(sj5*x3121);
evalcond[0]=(((r21*x3132))+(((-1.0)*x3128*x3131))+(((-1.0)*r22*x3130)));
evalcond[1]=(cj0+(((-1.0)*x3123*x3131))+(((-1.0)*r12*x3130))+((r11*x3132)));
evalcond[2]=((((-1.0)*r02*x3130))+((x3121*x3124))+(((-1.0)*x3126*x3131))+(((-1.0)*x3127)));
evalcond[3]=((((-1.0)*r21*sj5*x3130))+((sj1*sj2))+(((-1.0)*cj1*x3125))+(((-1.0)*r22*x3131))+((x3122*x3128)));
evalcond[4]=((((-1.0)*cj0*sj1*x3125))+(((-1.0)*r02*x3131))+(((-1.0)*x3124*x3130))+(((-1.0)*cj0*x3129))+((x3122*x3126)));
evalcond[5]=((((-1.0)*r12*x3131))+(((-1.0)*r11*sj5*x3130))+(((-1.0)*x3127*x3129))+((x3122*x3123))+(((-1.0)*sj0*sj1*x3125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3133=((1.0)*cj5);
CheckValue<IkReal> x3134=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3133)))),-1);
if(!x3134.valid){
continue;
}
CheckValue<IkReal> x3135 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3133))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3134.value)))+(x3135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3136=IKsin(j4);
IkReal x3137=IKcos(j4);
IkReal x3138=(cj5*r10);
IkReal x3139=(r01*sj5);
IkReal x3140=((1.0)*cj2);
IkReal x3141=(cj5*r00);
IkReal x3142=((1.0)*sj0);
IkReal x3143=(cj5*r20);
IkReal x3144=(cj1*sj2);
IkReal x3145=((1.0)*x3137);
IkReal x3146=((1.0)*x3136);
IkReal x3147=(sj5*x3136);
evalcond[0]=((((-1.0)*x3143*x3146))+(((-1.0)*r22*x3145))+((r21*x3147)));
evalcond[1]=((((-1.0)*r12*x3145))+cj0+((r11*x3147))+(((-1.0)*x3138*x3146)));
evalcond[2]=((((-1.0)*x3142))+(((-1.0)*x3141*x3146))+(((-1.0)*r02*x3145))+((x3136*x3139)));
evalcond[3]=((((-1.0)*cj1*x3140))+(((-1.0)*r22*x3146))+((sj1*sj2))+(((-1.0)*r21*sj5*x3145))+((x3137*x3143)));
evalcond[4]=((((-1.0)*r02*x3146))+(((-1.0)*cj0*x3144))+(((-1.0)*cj0*sj1*x3140))+(((-1.0)*x3139*x3145))+((x3137*x3141)));
evalcond[5]=((((-1.0)*r12*x3146))+(((-1.0)*x3142*x3144))+(((-1.0)*sj0*sj1*x3140))+((x3137*x3138))+(((-1.0)*r11*sj5*x3145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3148=((1.0)*cj5);
CheckValue<IkReal> x3149=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3148)))),-1);
if(!x3149.valid){
continue;
}
CheckValue<IkReal> x3150 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3149.value)))+(x3150.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3151=IKsin(j4);
IkReal x3152=IKcos(j4);
IkReal x3153=(cj5*r10);
IkReal x3154=(r01*sj5);
IkReal x3155=((1.0)*cj2);
IkReal x3156=(cj5*r00);
IkReal x3157=((1.0)*sj0);
IkReal x3158=(cj5*r20);
IkReal x3159=(cj1*sj2);
IkReal x3160=((1.0)*x3152);
IkReal x3161=((1.0)*x3151);
IkReal x3162=(sj5*x3151);
evalcond[0]=((((-1.0)*x3158*x3161))+((r21*x3162))+(((-1.0)*r22*x3160)));
evalcond[1]=((((-1.0)*r12*x3160))+(((-1.0)*x3153*x3161))+cj0+((r11*x3162)));
evalcond[2]=((((-1.0)*x3157))+((x3151*x3154))+(((-1.0)*x3156*x3161))+(((-1.0)*r02*x3160)));
evalcond[3]=((((-1.0)*cj1*x3155))+((sj1*sj2))+(((-1.0)*r21*sj5*x3160))+((x3152*x3158))+(((-1.0)*r22*x3161)));
evalcond[4]=((((-1.0)*cj0*sj1*x3155))+(((-1.0)*r02*x3161))+(((-1.0)*x3154*x3160))+(((-1.0)*cj0*x3159))+((x3152*x3156)));
evalcond[5]=((((-1.0)*r12*x3161))+(((-1.0)*x3157*x3159))+(((-1.0)*sj0*sj1*x3155))+(((-1.0)*r11*sj5*x3160))+((x3152*x3153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3163=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3163;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3163);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3164=r21*r21;
IkReal x3165=cj5*cj5;
IkReal x3166=(sj1*sj2);
IkReal x3167=(r21*sj5);
IkReal x3168=(cj5*r20);
IkReal x3169=(cj1*cj2);
IkReal x3170=((((2.0)*x3167*x3168))+(((-1.0)*x3164))+(((-1.0)*(r22*r22)))+(((-1.0)*x3165*(r20*r20)))+((x3164*x3165)));
j4eval[0]=x3170;
j4eval[1]=((IKabs((((r22*x3166))+(((-1.0)*r22*x3169)))))+(IKabs((((x3166*x3167))+(((-1.0)*x3167*x3169))+(((-1.0)*x3166*x3168))+((x3168*x3169))))));
j4eval[2]=IKsign(x3170);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3171=IKsin(j0);
IkReal x3172=IKcos(j0);
evalcond[0]=((((0.425)*x3172))+(((-1.0)*px))+(((-0.10915)*x3171)));
evalcond[1]=((((0.10915)*x3172))+(((0.425)*x3171))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3173=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3173;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3174=((1.0)*cj5);
IkReal x3175=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3174)));
j4eval[0]=x3175;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3174))))));
j4eval[2]=IKsign(x3175);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3176=((1.0)*cj5);
IkReal x3177=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3176)));
j4eval[0]=x3177;
j4eval[1]=IKsign(x3177);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3176))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3178=((1.0)*cj5);
CheckValue<IkReal> x3179=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3178)))),-1);
if(!x3179.valid){
continue;
}
CheckValue<IkReal> x3180 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3178))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3179.value)))+(x3180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3181=IKcos(j4);
IkReal x3182=IKsin(j4);
IkReal x3183=((1.0)*sj0);
IkReal x3184=(cj5*r00);
IkReal x3185=(cj5*r10);
IkReal x3186=(cj5*r20);
IkReal x3187=((1.0)*x3181);
IkReal x3188=((1.0)*x3182);
IkReal x3189=(sj5*x3181);
IkReal x3190=(sj5*x3182);
evalcond[0]=(((r22*x3182))+(((-1.0)*x3186*x3187))+((r21*x3189)));
evalcond[1]=(((r21*x3190))+(((-1.0)*r22*x3187))+(((-1.0)*x3186*x3188)));
evalcond[2]=(cj0+(((-1.0)*x3185*x3188))+((r11*x3190))+(((-1.0)*r12*x3187)));
evalcond[3]=((((-1.0)*x3184*x3187))+((r01*x3189))+(((-1.0)*cj0))+((r02*x3182)));
evalcond[4]=((((-1.0)*x3185*x3187))+((r12*x3182))+((r11*x3189))+(((-1.0)*x3183)));
evalcond[5]=((((-1.0)*x3184*x3188))+(((-1.0)*r02*x3187))+((r01*x3190))+(((-1.0)*x3183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3191=((1.0)*cj5);
CheckValue<IkReal> x3192 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3192.valid){
continue;
}
CheckValue<IkReal> x3193=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3191))+(((-1.0)*r00*sj5)))),-1);
if(!x3193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3192.value)+(((1.5707963267949)*(x3193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3194=IKcos(j4);
IkReal x3195=IKsin(j4);
IkReal x3196=((1.0)*sj0);
IkReal x3197=(cj5*r00);
IkReal x3198=(cj5*r10);
IkReal x3199=(cj5*r20);
IkReal x3200=((1.0)*x3194);
IkReal x3201=((1.0)*x3195);
IkReal x3202=(sj5*x3194);
IkReal x3203=(sj5*x3195);
evalcond[0]=((((-1.0)*x3199*x3200))+((r22*x3195))+((r21*x3202)));
evalcond[1]=((((-1.0)*x3199*x3201))+(((-1.0)*r22*x3200))+((r21*x3203)));
evalcond[2]=(cj0+((r11*x3203))+(((-1.0)*r12*x3200))+(((-1.0)*x3198*x3201)));
evalcond[3]=(((r01*x3202))+(((-1.0)*x3197*x3200))+((r02*x3195))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3202))+((r12*x3195))+(((-1.0)*x3196))+(((-1.0)*x3198*x3200)));
evalcond[5]=((((-1.0)*r02*x3200))+((r01*x3203))+(((-1.0)*x3197*x3201))+(((-1.0)*x3196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3204 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3204.valid){
continue;
}
CheckValue<IkReal> x3205=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3204.value)+(((1.5707963267949)*(x3205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3206=IKcos(j4);
IkReal x3207=IKsin(j4);
IkReal x3208=((1.0)*sj0);
IkReal x3209=(cj5*r00);
IkReal x3210=(cj5*r10);
IkReal x3211=(cj5*r20);
IkReal x3212=((1.0)*x3206);
IkReal x3213=((1.0)*x3207);
IkReal x3214=(sj5*x3206);
IkReal x3215=(sj5*x3207);
evalcond[0]=((((-1.0)*x3211*x3212))+((r22*x3207))+((r21*x3214)));
evalcond[1]=((((-1.0)*x3211*x3213))+((r21*x3215))+(((-1.0)*r22*x3212)));
evalcond[2]=(cj0+(((-1.0)*x3210*x3213))+((r11*x3215))+(((-1.0)*r12*x3212)));
evalcond[3]=(((r01*x3214))+(((-1.0)*x3209*x3212))+((r02*x3207))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3210*x3212))+((r12*x3207))+((r11*x3214))+(((-1.0)*x3208)));
evalcond[5]=(((r01*x3215))+(((-1.0)*x3209*x3213))+(((-1.0)*x3208))+(((-1.0)*r02*x3212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3216=IKsin(j0);
IkReal x3217=IKcos(j0);
evalcond[0]=((((-0.10915)*x3216))+(((-1.0)*px))+(((0.425)*x3217)));
evalcond[1]=((((0.10915)*x3217))+(((-1.0)*py))+(((0.425)*x3216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3218=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3218;
j4eval[1]=IKsign(x3218);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3219=((1.0)*cj5);
IkReal x3220=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3219)));
j4eval[0]=x3220;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3219)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3220);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3221=cj5*cj5;
IkReal x3222=((1.0)*r20);
IkReal x3223=(r01*r21);
IkReal x3224=(r21*sj5);
IkReal x3225=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3224))+((x3221*x3223))+(((-1.0)*r00*x3221*x3222))+(((-1.0)*x3223)));
j4eval[0]=x3225;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3224))+(((-1.0)*cj0*cj5*x3222))))));
j4eval[2]=IKsign(x3225);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3226=cj5*cj5;
IkReal x3227=((1.0)*r20);
IkReal x3228=(r01*r21);
IkReal x3229=(r21*sj5);
CheckValue<IkReal> x3230 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3229))+(((-1.0)*cj0*cj5*x3227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3230.valid){
continue;
}
CheckValue<IkReal> x3231=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3229))+((x3226*x3228))+(((-1.0)*x3228))+(((-1.0)*r00*x3226*x3227)))),-1);
if(!x3231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3230.value)+(((1.5707963267949)*(x3231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3232=IKcos(j4);
IkReal x3233=IKsin(j4);
IkReal x3234=(cj5*r00);
IkReal x3235=(cj5*r10);
IkReal x3236=(cj5*r20);
IkReal x3237=((1.0)*x3232);
IkReal x3238=((1.0)*x3233);
IkReal x3239=(sj5*x3232);
IkReal x3240=(sj5*x3233);
evalcond[0]=(((r22*x3233))+(((-1.0)*x3236*x3237))+((r21*x3239)));
evalcond[1]=(((r21*x3240))+(((-1.0)*x3236*x3238))+(((-1.0)*r22*x3237)));
evalcond[2]=(cj0+((r01*x3239))+(((-1.0)*x3234*x3237))+((r02*x3233)));
evalcond[3]=(sj0+(((-1.0)*x3235*x3237))+((r11*x3239))+((r12*x3233)));
evalcond[4]=(cj0+(((-1.0)*x3235*x3238))+(((-1.0)*r12*x3237))+((r11*x3240)));
evalcond[5]=(((r01*x3240))+(((-1.0)*r02*x3237))+(((-1.0)*sj0))+(((-1.0)*x3234*x3238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3241=((1.0)*cj5);
CheckValue<IkReal> x3242 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3241)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3242.valid){
continue;
}
CheckValue<IkReal> x3243=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3241)))),-1);
if(!x3243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3242.value)+(((1.5707963267949)*(x3243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3244=IKcos(j4);
IkReal x3245=IKsin(j4);
IkReal x3246=(cj5*r00);
IkReal x3247=(cj5*r10);
IkReal x3248=(cj5*r20);
IkReal x3249=((1.0)*x3244);
IkReal x3250=((1.0)*x3245);
IkReal x3251=(sj5*x3244);
IkReal x3252=(sj5*x3245);
evalcond[0]=(((r22*x3245))+(((-1.0)*x3248*x3249))+((r21*x3251)));
evalcond[1]=(((r21*x3252))+(((-1.0)*x3248*x3250))+(((-1.0)*r22*x3249)));
evalcond[2]=(cj0+((r01*x3251))+((r02*x3245))+(((-1.0)*x3246*x3249)));
evalcond[3]=(sj0+((r11*x3251))+((r12*x3245))+(((-1.0)*x3247*x3249)));
evalcond[4]=(cj0+(((-1.0)*x3247*x3250))+((r11*x3252))+(((-1.0)*r12*x3249)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3246*x3250))+((r01*x3252))+(((-1.0)*r02*x3249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3253 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3253.valid){
continue;
}
CheckValue<IkReal> x3254=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3253.value)+(((1.5707963267949)*(x3254.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3255=IKcos(j4);
IkReal x3256=IKsin(j4);
IkReal x3257=(cj5*r00);
IkReal x3258=(cj5*r10);
IkReal x3259=(cj5*r20);
IkReal x3260=((1.0)*x3255);
IkReal x3261=((1.0)*x3256);
IkReal x3262=(sj5*x3255);
IkReal x3263=(sj5*x3256);
evalcond[0]=(((r21*x3262))+((r22*x3256))+(((-1.0)*x3259*x3260)));
evalcond[1]=(((r21*x3263))+(((-1.0)*r22*x3260))+(((-1.0)*x3259*x3261)));
evalcond[2]=((((-1.0)*x3257*x3260))+((r01*x3262))+cj0+((r02*x3256)));
evalcond[3]=(((r12*x3256))+sj0+((r11*x3262))+(((-1.0)*x3258*x3260)));
evalcond[4]=(cj0+(((-1.0)*r12*x3260))+((r11*x3263))+(((-1.0)*x3258*x3261)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3257*x3261))+((r01*x3263))+(((-1.0)*r02*x3260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3264=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3264;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3265=((1.0)*cj5);
IkReal x3266=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3265)));
j4eval[0]=x3266;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3265))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3267=((1.0)*cj5);
IkReal x3268=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3267)));
j4eval[0]=x3268;
j4eval[1]=IKsign(x3268);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3267))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3269=((1.0)*cj5);
CheckValue<IkReal> x3270=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3269)))),-1);
if(!x3270.valid){
continue;
}
CheckValue<IkReal> x3271 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3269)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3270.value)))+(x3271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3272=IKcos(j4);
IkReal x3273=IKsin(j4);
IkReal x3274=((1.0)*sj0);
IkReal x3275=(cj5*r00);
IkReal x3276=(cj5*r10);
IkReal x3277=(cj5*r20);
IkReal x3278=((1.0)*x3272);
IkReal x3279=((1.0)*x3273);
IkReal x3280=(sj5*x3272);
IkReal x3281=(sj5*x3273);
evalcond[0]=(((r21*x3280))+(((-1.0)*x3277*x3278))+((r22*x3273)));
evalcond[1]=(((r21*x3281))+(((-1.0)*x3277*x3279))+(((-1.0)*r22*x3278)));
evalcond[2]=((((-1.0)*x3276*x3279))+(((-1.0)*r12*x3278))+cj0+((r11*x3281)));
evalcond[3]=((((-1.0)*x3275*x3278))+((r02*x3273))+(((-1.0)*cj0))+((r01*x3280)));
evalcond[4]=((((-1.0)*x3276*x3278))+(((-1.0)*x3274))+((r12*x3273))+((r11*x3280)));
evalcond[5]=((((-1.0)*x3275*x3279))+(((-1.0)*x3274))+(((-1.0)*r02*x3278))+((r01*x3281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3282=((1.0)*cj5);
CheckValue<IkReal> x3283 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3282))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3283.valid){
continue;
}
CheckValue<IkReal> x3284=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3282)))),-1);
if(!x3284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3283.value)+(((1.5707963267949)*(x3284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3285=IKcos(j4);
IkReal x3286=IKsin(j4);
IkReal x3287=((1.0)*sj0);
IkReal x3288=(cj5*r00);
IkReal x3289=(cj5*r10);
IkReal x3290=(cj5*r20);
IkReal x3291=((1.0)*x3285);
IkReal x3292=((1.0)*x3286);
IkReal x3293=(sj5*x3285);
IkReal x3294=(sj5*x3286);
evalcond[0]=(((r22*x3286))+((r21*x3293))+(((-1.0)*x3290*x3291)));
evalcond[1]=((((-1.0)*r22*x3291))+((r21*x3294))+(((-1.0)*x3290*x3292)));
evalcond[2]=((((-1.0)*r12*x3291))+cj0+(((-1.0)*x3289*x3292))+((r11*x3294)));
evalcond[3]=(((r01*x3293))+((r02*x3286))+(((-1.0)*x3288*x3291))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3287))+(((-1.0)*x3289*x3291))+((r11*x3293))+((r12*x3286)));
evalcond[5]=(((r01*x3294))+(((-1.0)*x3287))+(((-1.0)*r02*x3291))+(((-1.0)*x3288*x3292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3295 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3295.valid){
continue;
}
CheckValue<IkReal> x3296=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3295.value)+(((1.5707963267949)*(x3296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3297=IKcos(j4);
IkReal x3298=IKsin(j4);
IkReal x3299=((1.0)*sj0);
IkReal x3300=(cj5*r00);
IkReal x3301=(cj5*r10);
IkReal x3302=(cj5*r20);
IkReal x3303=((1.0)*x3297);
IkReal x3304=((1.0)*x3298);
IkReal x3305=(sj5*x3297);
IkReal x3306=(sj5*x3298);
evalcond[0]=(((r21*x3305))+((r22*x3298))+(((-1.0)*x3302*x3303)));
evalcond[1]=(((r21*x3306))+(((-1.0)*r22*x3303))+(((-1.0)*x3302*x3304)));
evalcond[2]=(cj0+((r11*x3306))+(((-1.0)*x3301*x3304))+(((-1.0)*r12*x3303)));
evalcond[3]=(((r02*x3298))+((r01*x3305))+(((-1.0)*cj0))+(((-1.0)*x3300*x3303)));
evalcond[4]=((((-1.0)*x3299))+((r11*x3305))+(((-1.0)*x3301*x3303))+((r12*x3298)));
evalcond[5]=((((-1.0)*x3299))+(((-1.0)*r02*x3303))+((r01*x3306))+(((-1.0)*x3300*x3304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3307=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3307;
j4eval[1]=IKsign(x3307);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3308=((1.0)*cj5);
IkReal x3309=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3308)));
j4eval[0]=x3309;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3308)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3310=cj5*cj5;
IkReal x3311=((1.0)*r20);
IkReal x3312=(r01*r21);
IkReal x3313=(r21*sj5);
IkReal x3314=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3313))+(((-1.0)*r00*x3310*x3311))+(((-1.0)*x3312))+((x3310*x3312)));
j4eval[0]=x3314;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3313))+(((-1.0)*cj0*cj5*x3311))))));
j4eval[2]=IKsign(x3314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3315=cj5*cj5;
IkReal x3316=((1.0)*r20);
IkReal x3317=(r01*r21);
IkReal x3318=(r21*sj5);
CheckValue<IkReal> x3319=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3318))+((x3315*x3317))+(((-1.0)*r00*x3315*x3316))+(((-1.0)*x3317)))),-1);
if(!x3319.valid){
continue;
}
CheckValue<IkReal> x3320 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3318))+(((-1.0)*cj0*cj5*x3316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3319.value)))+(x3320.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3321=IKcos(j4);
IkReal x3322=IKsin(j4);
IkReal x3323=(cj5*r00);
IkReal x3324=(cj5*r10);
IkReal x3325=(cj5*r20);
IkReal x3326=((1.0)*x3321);
IkReal x3327=((1.0)*x3322);
IkReal x3328=(sj5*x3321);
IkReal x3329=(sj5*x3322);
evalcond[0]=(((r22*x3322))+(((-1.0)*x3325*x3326))+((r21*x3328)));
evalcond[1]=((((-1.0)*x3325*x3327))+((r21*x3329))+(((-1.0)*r22*x3326)));
evalcond[2]=(cj0+((r01*x3328))+(((-1.0)*x3323*x3326))+((r02*x3322)));
evalcond[3]=((((-1.0)*x3324*x3326))+((r12*x3322))+sj0+((r11*x3328)));
evalcond[4]=((((-1.0)*x3324*x3327))+cj0+((r11*x3329))+(((-1.0)*r12*x3326)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3326))+((r01*x3329))+(((-1.0)*x3323*x3327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3330=((1.0)*cj5);
CheckValue<IkReal> x3331=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3330)))),-1);
if(!x3331.valid){
continue;
}
CheckValue<IkReal> x3332 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3330)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3331.value)))+(x3332.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3333=IKcos(j4);
IkReal x3334=IKsin(j4);
IkReal x3335=(cj5*r00);
IkReal x3336=(cj5*r10);
IkReal x3337=(cj5*r20);
IkReal x3338=((1.0)*x3333);
IkReal x3339=((1.0)*x3334);
IkReal x3340=(sj5*x3333);
IkReal x3341=(sj5*x3334);
evalcond[0]=((((-1.0)*x3337*x3338))+((r21*x3340))+((r22*x3334)));
evalcond[1]=((((-1.0)*r22*x3338))+(((-1.0)*x3337*x3339))+((r21*x3341)));
evalcond[2]=(cj0+((r02*x3334))+(((-1.0)*x3335*x3338))+((r01*x3340)));
evalcond[3]=(sj0+((r12*x3334))+(((-1.0)*x3336*x3338))+((r11*x3340)));
evalcond[4]=(cj0+(((-1.0)*x3336*x3339))+((r11*x3341))+(((-1.0)*r12*x3338)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3338))+(((-1.0)*x3335*x3339))+((r01*x3341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3342 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3342.valid){
continue;
}
CheckValue<IkReal> x3343=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3342.value)+(((1.5707963267949)*(x3343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3344=IKcos(j4);
IkReal x3345=IKsin(j4);
IkReal x3346=(cj5*r00);
IkReal x3347=(cj5*r10);
IkReal x3348=(cj5*r20);
IkReal x3349=((1.0)*x3344);
IkReal x3350=((1.0)*x3345);
IkReal x3351=(sj5*x3344);
IkReal x3352=(sj5*x3345);
evalcond[0]=((((-1.0)*x3348*x3349))+((r22*x3345))+((r21*x3351)));
evalcond[1]=((((-1.0)*x3348*x3350))+((r21*x3352))+(((-1.0)*r22*x3349)));
evalcond[2]=(cj0+((r01*x3351))+(((-1.0)*x3346*x3349))+((r02*x3345)));
evalcond[3]=((((-1.0)*x3347*x3349))+sj0+((r11*x3351))+((r12*x3345)));
evalcond[4]=(cj0+((r11*x3352))+(((-1.0)*x3347*x3350))+(((-1.0)*r12*x3349)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3346*x3350))+((r01*x3352))+(((-1.0)*r02*x3349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3353=IKcos(j0);
IkReal x3354=IKsin(j0);
evalcond[0]=((((-0.10915)*x3354))+(((-1.0)*px))+(((-0.425)*x3353)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x3353))+(((-0.425)*x3354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3355=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3355;
j4eval[1]=IKsign(x3355);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3356=((1.0)*cj5);
IkReal x3357=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3356)));
j4eval[0]=x3357;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3356)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3357);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3358=cj5*cj5;
IkReal x3359=((1.0)*r20);
IkReal x3360=(r01*r21);
IkReal x3361=(r21*sj5);
IkReal x3362=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3358*x3360))+(((-1.0)*x3360))+((cj5*r00*x3361))+(((-1.0)*r00*x3358*x3359)));
j4eval[0]=x3362;
j4eval[1]=((IKabs((((cj0*x3361))+(((-1.0)*cj0*cj5*x3359)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3362);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3363=cj5*cj5;
IkReal x3364=((1.0)*r20);
IkReal x3365=(r01*r21);
IkReal x3366=(r21*sj5);
CheckValue<IkReal> x3367=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x3363*x3365))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3363*x3364))+(((-1.0)*x3365))+((cj5*r00*x3366)))),-1);
if(!x3367.valid){
continue;
}
CheckValue<IkReal> x3368 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3366))+(((-1.0)*cj0*cj5*x3364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3367.value)))+(x3368.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3369=IKcos(j4);
IkReal x3370=IKsin(j4);
IkReal x3371=(cj5*r00);
IkReal x3372=(cj5*r10);
IkReal x3373=(cj5*r20);
IkReal x3374=((1.0)*x3369);
IkReal x3375=((1.0)*x3370);
IkReal x3376=(sj5*x3369);
IkReal x3377=(sj5*x3370);
evalcond[0]=((((-1.0)*x3373*x3374))+((r22*x3370))+((r21*x3376)));
evalcond[1]=((((-1.0)*r22*x3374))+(((-1.0)*x3373*x3375))+((r21*x3377)));
evalcond[2]=(((r01*x3376))+cj0+((r02*x3370))+(((-1.0)*x3371*x3374)));
evalcond[3]=(((r12*x3370))+sj0+((r11*x3376))+(((-1.0)*x3372*x3374)));
evalcond[4]=(cj0+(((-1.0)*r12*x3374))+((r11*x3377))+(((-1.0)*x3372*x3375)));
evalcond[5]=(((r01*x3377))+(((-1.0)*sj0))+(((-1.0)*r02*x3374))+(((-1.0)*x3371*x3375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3378=((1.0)*cj5);
CheckValue<IkReal> x3379=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3378)))),-1);
if(!x3379.valid){
continue;
}
CheckValue<IkReal> x3380 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3378)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3379.value)))+(x3380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3381=IKcos(j4);
IkReal x3382=IKsin(j4);
IkReal x3383=(cj5*r00);
IkReal x3384=(cj5*r10);
IkReal x3385=(cj5*r20);
IkReal x3386=((1.0)*x3381);
IkReal x3387=((1.0)*x3382);
IkReal x3388=(sj5*x3381);
IkReal x3389=(sj5*x3382);
evalcond[0]=((((-1.0)*x3385*x3386))+((r21*x3388))+((r22*x3382)));
evalcond[1]=((((-1.0)*r22*x3386))+(((-1.0)*x3385*x3387))+((r21*x3389)));
evalcond[2]=(((r01*x3388))+cj0+(((-1.0)*x3383*x3386))+((r02*x3382)));
evalcond[3]=(sj0+(((-1.0)*x3384*x3386))+((r12*x3382))+((r11*x3388)));
evalcond[4]=(cj0+(((-1.0)*x3384*x3387))+((r11*x3389))+(((-1.0)*r12*x3386)));
evalcond[5]=(((r01*x3389))+(((-1.0)*sj0))+(((-1.0)*x3383*x3387))+(((-1.0)*r02*x3386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3390 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3390.valid){
continue;
}
CheckValue<IkReal> x3391=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3390.value)+(((1.5707963267949)*(x3391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3392=IKcos(j4);
IkReal x3393=IKsin(j4);
IkReal x3394=(cj5*r00);
IkReal x3395=(cj5*r10);
IkReal x3396=(cj5*r20);
IkReal x3397=((1.0)*x3392);
IkReal x3398=((1.0)*x3393);
IkReal x3399=(sj5*x3392);
IkReal x3400=(sj5*x3393);
evalcond[0]=((((-1.0)*x3396*x3397))+((r21*x3399))+((r22*x3393)));
evalcond[1]=((((-1.0)*r22*x3397))+(((-1.0)*x3396*x3398))+((r21*x3400)));
evalcond[2]=((((-1.0)*x3394*x3397))+cj0+((r01*x3399))+((r02*x3393)));
evalcond[3]=(sj0+(((-1.0)*x3395*x3397))+((r11*x3399))+((r12*x3393)));
evalcond[4]=(cj0+((r11*x3400))+(((-1.0)*x3395*x3398))+(((-1.0)*r12*x3397)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3394*x3398))+(((-1.0)*r02*x3397))+((r01*x3400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3401=IKcos(j0);
IkReal x3402=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x3402))+(((-0.425)*x3401)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x3401))+(((-0.425)*x3402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3403=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3403;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3403);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3404=((1.0)*cj5);
IkReal x3405=((((-1.0)*r01*x3404))+(((-1.0)*r00*sj5)));
j4eval[0]=x3405;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3404)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3405);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3406=((1.0)*cj5);
IkReal x3407=((((-1.0)*r01*x3406))+(((-1.0)*r00*sj5)));
j4eval[0]=x3407;
j4eval[1]=IKsign(x3407);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3406))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3408=((1.0)*cj5);
CheckValue<IkReal> x3409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3408))+(((-1.0)*r00*sj5)))),-1);
if(!x3409.valid){
continue;
}
CheckValue<IkReal> x3410 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3408))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3409.value)))+(x3410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3411=IKcos(j4);
IkReal x3412=IKsin(j4);
IkReal x3413=((1.0)*sj0);
IkReal x3414=(cj5*r00);
IkReal x3415=(cj5*r10);
IkReal x3416=(cj5*r20);
IkReal x3417=((1.0)*x3411);
IkReal x3418=((1.0)*x3412);
IkReal x3419=(sj5*x3411);
IkReal x3420=(sj5*x3412);
evalcond[0]=(((r22*x3412))+((r21*x3419))+(((-1.0)*x3416*x3417)));
evalcond[1]=((((-1.0)*r22*x3417))+((r21*x3420))+(((-1.0)*x3416*x3418)));
evalcond[2]=((((-1.0)*x3415*x3418))+cj0+(((-1.0)*r12*x3417))+((r11*x3420)));
evalcond[3]=(((r02*x3412))+(((-1.0)*x3414*x3417))+((r01*x3419))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3415*x3417))+((r12*x3412))+((r11*x3419))+(((-1.0)*x3413)));
evalcond[5]=((((-1.0)*x3414*x3418))+(((-1.0)*r02*x3417))+((r01*x3420))+(((-1.0)*x3413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3421=((1.0)*cj5);
CheckValue<IkReal> x3422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3421)))),-1);
if(!x3422.valid){
continue;
}
CheckValue<IkReal> x3423 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3422.value)))+(x3423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3424=IKcos(j4);
IkReal x3425=IKsin(j4);
IkReal x3426=((1.0)*sj0);
IkReal x3427=(cj5*r00);
IkReal x3428=(cj5*r10);
IkReal x3429=(cj5*r20);
IkReal x3430=((1.0)*x3424);
IkReal x3431=((1.0)*x3425);
IkReal x3432=(sj5*x3424);
IkReal x3433=(sj5*x3425);
evalcond[0]=(((r21*x3432))+((r22*x3425))+(((-1.0)*x3429*x3430)));
evalcond[1]=((((-1.0)*r22*x3430))+((r21*x3433))+(((-1.0)*x3429*x3431)));
evalcond[2]=((((-1.0)*x3428*x3431))+(((-1.0)*r12*x3430))+cj0+((r11*x3433)));
evalcond[3]=((((-1.0)*x3427*x3430))+((r01*x3432))+((r02*x3425))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3428*x3430))+(((-1.0)*x3426))+((r12*x3425))+((r11*x3432)));
evalcond[5]=((((-1.0)*x3427*x3431))+((r01*x3433))+(((-1.0)*x3426))+(((-1.0)*r02*x3430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3434 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3434.valid){
continue;
}
CheckValue<IkReal> x3435=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3434.value)+(((1.5707963267949)*(x3435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3436=IKcos(j4);
IkReal x3437=IKsin(j4);
IkReal x3438=((1.0)*sj0);
IkReal x3439=(cj5*r00);
IkReal x3440=(cj5*r10);
IkReal x3441=(cj5*r20);
IkReal x3442=((1.0)*x3436);
IkReal x3443=((1.0)*x3437);
IkReal x3444=(sj5*x3436);
IkReal x3445=(sj5*x3437);
evalcond[0]=(((r21*x3444))+(((-1.0)*x3441*x3442))+((r22*x3437)));
evalcond[1]=(((r21*x3445))+(((-1.0)*x3441*x3443))+(((-1.0)*r22*x3442)));
evalcond[2]=(((r11*x3445))+cj0+(((-1.0)*r12*x3442))+(((-1.0)*x3440*x3443)));
evalcond[3]=((((-1.0)*x3439*x3442))+((r01*x3444))+((r02*x3437))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3444))+(((-1.0)*x3438))+((r12*x3437))+(((-1.0)*x3440*x3442)));
evalcond[5]=((((-1.0)*x3439*x3443))+(((-1.0)*x3438))+(((-1.0)*r02*x3442))+((r01*x3445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3446=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3446;
j4eval[1]=IKsign(x3446);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3447=((1.0)*cj5);
IkReal x3448=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3447)));
j4eval[0]=x3448;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3447))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3448);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3449=cj5*cj5;
IkReal x3450=((1.0)*r20);
IkReal x3451=(r01*r21);
IkReal x3452=(r21*sj5);
IkReal x3453=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3451))+(((-1.0)*r00*x3449*x3450))+((cj5*r00*x3452))+((x3449*x3451)));
j4eval[0]=x3453;
j4eval[1]=((IKabs((((cj0*x3452))+(((-1.0)*cj0*cj5*x3450)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3454=cj5*cj5;
IkReal x3455=((1.0)*r20);
IkReal x3456=(r01*r21);
IkReal x3457=(r21*sj5);
CheckValue<IkReal> x3458=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3454*x3455))+(((-1.0)*x3456))+((x3454*x3456))+((cj5*r00*x3457)))),-1);
if(!x3458.valid){
continue;
}
CheckValue<IkReal> x3459 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3457))+(((-1.0)*cj0*cj5*x3455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3458.value)))+(x3459.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3460=IKcos(j4);
IkReal x3461=IKsin(j4);
IkReal x3462=(cj5*r00);
IkReal x3463=(cj5*r10);
IkReal x3464=(cj5*r20);
IkReal x3465=((1.0)*x3460);
IkReal x3466=((1.0)*x3461);
IkReal x3467=(sj5*x3460);
IkReal x3468=(sj5*x3461);
evalcond[0]=(((r21*x3467))+(((-1.0)*x3464*x3465))+((r22*x3461)));
evalcond[1]=((((-1.0)*r22*x3465))+((r21*x3468))+(((-1.0)*x3464*x3466)));
evalcond[2]=(cj0+(((-1.0)*x3462*x3465))+((r01*x3467))+((r02*x3461)));
evalcond[3]=((((-1.0)*x3463*x3465))+sj0+((r12*x3461))+((r11*x3467)));
evalcond[4]=((((-1.0)*x3463*x3466))+cj0+(((-1.0)*r12*x3465))+((r11*x3468)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3462*x3466))+(((-1.0)*r02*x3465))+((r01*x3468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3469=((1.0)*cj5);
CheckValue<IkReal> x3470=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3469)))),-1);
if(!x3470.valid){
continue;
}
CheckValue<IkReal> x3471 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3469)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3470.value)))+(x3471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3472=IKcos(j4);
IkReal x3473=IKsin(j4);
IkReal x3474=(cj5*r00);
IkReal x3475=(cj5*r10);
IkReal x3476=(cj5*r20);
IkReal x3477=((1.0)*x3472);
IkReal x3478=((1.0)*x3473);
IkReal x3479=(sj5*x3472);
IkReal x3480=(sj5*x3473);
evalcond[0]=(((r21*x3479))+(((-1.0)*x3476*x3477))+((r22*x3473)));
evalcond[1]=((((-1.0)*r22*x3477))+((r21*x3480))+(((-1.0)*x3476*x3478)));
evalcond[2]=(cj0+((r01*x3479))+(((-1.0)*x3474*x3477))+((r02*x3473)));
evalcond[3]=(sj0+((r12*x3473))+((r11*x3479))+(((-1.0)*x3475*x3477)));
evalcond[4]=(cj0+(((-1.0)*r12*x3477))+((r11*x3480))+(((-1.0)*x3475*x3478)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3477))+((r01*x3480))+(((-1.0)*x3474*x3478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3481 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3481.valid){
continue;
}
CheckValue<IkReal> x3482=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3481.value)+(((1.5707963267949)*(x3482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3483=IKcos(j4);
IkReal x3484=IKsin(j4);
IkReal x3485=(cj5*r00);
IkReal x3486=(cj5*r10);
IkReal x3487=(cj5*r20);
IkReal x3488=((1.0)*x3483);
IkReal x3489=((1.0)*x3484);
IkReal x3490=(sj5*x3483);
IkReal x3491=(sj5*x3484);
evalcond[0]=((((-1.0)*x3487*x3488))+((r21*x3490))+((r22*x3484)));
evalcond[1]=((((-1.0)*r22*x3488))+(((-1.0)*x3487*x3489))+((r21*x3491)));
evalcond[2]=(((r01*x3490))+cj0+(((-1.0)*x3485*x3488))+((r02*x3484)));
evalcond[3]=(sj0+((r12*x3484))+((r11*x3490))+(((-1.0)*x3486*x3488)));
evalcond[4]=(cj0+(((-1.0)*r12*x3488))+((r11*x3491))+(((-1.0)*x3486*x3489)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3491))+(((-1.0)*x3485*x3489))+(((-1.0)*r02*x3488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3492=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3492;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3493=((1.0)*cj5);
IkReal x3494=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3493)));
j4eval[0]=x3494;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3493))))));
j4eval[2]=IKsign(x3494);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3495=((1.0)*cj5);
IkReal x3496=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3495)));
j4eval[0]=x3496;
j4eval[1]=IKsign(x3496);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3495))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3497=((1.0)*cj5);
CheckValue<IkReal> x3498=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3497)))),-1);
if(!x3498.valid){
continue;
}
CheckValue<IkReal> x3499 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3497))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3498.value)))+(x3499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3500=IKcos(j4);
IkReal x3501=IKsin(j4);
IkReal x3502=((1.0)*sj0);
IkReal x3503=(cj5*r00);
IkReal x3504=(cj5*r10);
IkReal x3505=(cj5*r20);
IkReal x3506=((1.0)*x3500);
IkReal x3507=((1.0)*x3501);
IkReal x3508=(sj5*x3500);
IkReal x3509=(sj5*x3501);
evalcond[0]=(((r22*x3501))+(((-1.0)*x3505*x3506))+((r21*x3508)));
evalcond[1]=((((-1.0)*r22*x3506))+(((-1.0)*x3505*x3507))+((r21*x3509)));
evalcond[2]=((((-1.0)*r12*x3506))+cj0+((r11*x3509))+(((-1.0)*x3504*x3507)));
evalcond[3]=(((r01*x3508))+((r02*x3501))+(((-1.0)*x3503*x3506))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3502))+((r12*x3501))+((r11*x3508))+(((-1.0)*x3504*x3506)));
evalcond[5]=(((r01*x3509))+(((-1.0)*x3502))+(((-1.0)*r02*x3506))+(((-1.0)*x3503*x3507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3510=((1.0)*cj5);
CheckValue<IkReal> x3511 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3510)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3511.valid){
continue;
}
CheckValue<IkReal> x3512=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3510)))),-1);
if(!x3512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3511.value)+(((1.5707963267949)*(x3512.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3513=IKcos(j4);
IkReal x3514=IKsin(j4);
IkReal x3515=((1.0)*sj0);
IkReal x3516=(cj5*r00);
IkReal x3517=(cj5*r10);
IkReal x3518=(cj5*r20);
IkReal x3519=((1.0)*x3513);
IkReal x3520=((1.0)*x3514);
IkReal x3521=(sj5*x3513);
IkReal x3522=(sj5*x3514);
evalcond[0]=((((-1.0)*x3518*x3519))+((r21*x3521))+((r22*x3514)));
evalcond[1]=(((r21*x3522))+(((-1.0)*r22*x3519))+(((-1.0)*x3518*x3520)));
evalcond[2]=(cj0+(((-1.0)*x3517*x3520))+((r11*x3522))+(((-1.0)*r12*x3519)));
evalcond[3]=(((r01*x3521))+((r02*x3514))+(((-1.0)*cj0))+(((-1.0)*x3516*x3519)));
evalcond[4]=((((-1.0)*x3515))+(((-1.0)*x3517*x3519))+((r11*x3521))+((r12*x3514)));
evalcond[5]=((((-1.0)*r02*x3519))+((r01*x3522))+(((-1.0)*x3515))+(((-1.0)*x3516*x3520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3523 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3523.valid){
continue;
}
CheckValue<IkReal> x3524=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3523.value)+(((1.5707963267949)*(x3524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3525=IKcos(j4);
IkReal x3526=IKsin(j4);
IkReal x3527=((1.0)*sj0);
IkReal x3528=(cj5*r00);
IkReal x3529=(cj5*r10);
IkReal x3530=(cj5*r20);
IkReal x3531=((1.0)*x3525);
IkReal x3532=((1.0)*x3526);
IkReal x3533=(sj5*x3525);
IkReal x3534=(sj5*x3526);
evalcond[0]=(((r21*x3533))+((r22*x3526))+(((-1.0)*x3530*x3531)));
evalcond[1]=(((r21*x3534))+(((-1.0)*x3530*x3532))+(((-1.0)*r22*x3531)));
evalcond[2]=(((r11*x3534))+cj0+(((-1.0)*r12*x3531))+(((-1.0)*x3529*x3532)));
evalcond[3]=(((r02*x3526))+(((-1.0)*x3528*x3531))+((r01*x3533))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3533))+(((-1.0)*x3527))+(((-1.0)*x3529*x3531))+((r12*x3526)));
evalcond[5]=((((-1.0)*x3527))+(((-1.0)*r02*x3531))+(((-1.0)*x3528*x3532))+((r01*x3534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3535=(r00*sj5);
IkReal x3536=(cj5*r01);
IkReal x3537=(sj1*sj2);
IkReal x3538=(cj1*cj2);
IkReal x3539=((20000.0)*px);
IkReal x3540=((8500.0)*cj1);
IkReal x3541=((9738.0)*x3538);
CheckValue<IkReal> x3542=IKPowWithIntegerCheck(((((-2183.0)*x3538))+(((2183.0)*x3537))),-1);
if(!x3542.valid){
continue;
}
CheckValue<IkReal> x3543=IKPowWithIntegerCheck((x3537+(((-1.0)*x3538))),-1);
if(!x3543.valid){
continue;
}
if( IKabs(((x3542.value)*((((x3538*x3539))+(((-9738.0)*x3536*x3537))+((x3535*x3540))+((x3535*x3541))+(((-9738.0)*x3535*x3537))+((x3536*x3541))+((x3536*x3540))+(((-1.0)*x3537*x3539)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3543.value)*((x3535+x3536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3542.value)*((((x3538*x3539))+(((-9738.0)*x3536*x3537))+((x3535*x3540))+((x3535*x3541))+(((-9738.0)*x3535*x3537))+((x3536*x3541))+((x3536*x3540))+(((-1.0)*x3537*x3539))))))+IKsqr(((x3543.value)*((x3535+x3536))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3542.value)*((((x3538*x3539))+(((-9738.0)*x3536*x3537))+((x3535*x3540))+((x3535*x3541))+(((-9738.0)*x3535*x3537))+((x3536*x3541))+((x3536*x3540))+(((-1.0)*x3537*x3539))))), ((x3543.value)*((x3535+x3536))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3544=IKcos(j0);
IkReal x3545=IKsin(j0);
IkReal x3546=(cj5*r11);
IkReal x3547=(cj5*r01);
IkReal x3548=((1.0)*sj5);
IkReal x3549=((0.09465)*sj5);
IkReal x3550=(sj1*sj2);
IkReal x3551=((0.39225)*cj2);
IkReal x3552=((1.0)*cj2);
IkReal x3553=((0.39225)*x3550);
IkReal x3554=(cj1*x3544);
IkReal x3555=(cj1*x3545);
evalcond[0]=((((-1.0)*r00*x3548))+(((-1.0)*x3547))+((x3544*x3550))+(((-1.0)*x3552*x3554)));
evalcond[1]=((((-1.0)*r10*x3548))+(((-1.0)*x3546))+((x3545*x3550))+(((-1.0)*x3552*x3555)));
evalcond[2]=((((0.425)*x3554))+(((-0.09465)*x3547))+(((-1.0)*r00*x3549))+(((-1.0)*px))+((x3551*x3554))+(((-1.0)*x3544*x3553))+(((-0.10915)*x3545)));
evalcond[3]=((((0.425)*x3555))+(((-0.09465)*x3546))+(((-1.0)*x3545*x3553))+(((0.10915)*x3544))+(((-1.0)*r10*x3549))+(((-1.0)*py))+((x3551*x3555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3556=((1.0)*cj5);
IkReal x3557=((((-1.0)*r01*x3556))+(((-1.0)*r00*sj5)));
j4eval[0]=x3557;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3556)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3558=((1.0)*cj5);
IkReal x3559=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3558)));
j4eval[0]=x3559;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3558))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3560=((1.0)*sj0);
IkReal x3561=((1.0)*cj0);
IkReal x3562=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3562;
j4eval[1]=((IKabs(((((-1.0)*r02*x3561))+(((-1.0)*r12*x3560)))))+(IKabs(((((-1.0)*r01*sj5*x3561))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3560))))));
j4eval[2]=IKsign(x3562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3563=((-1.0)*r20);
IkReal x3565 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3565)==0){
continue;
}
IkReal x3564=pow(x3565,-0.5);
CheckValue<IkReal> x3566 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3563),IKFAST_ATAN2_MAGTHRESH);
if(!x3566.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3566.value));
IkReal gconst97=(r21*x3564);
IkReal gconst98=(x3563*x3564);
CheckValue<IkReal> x3567 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3567.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3567.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3568=((-1.0)*r20);
IkReal x3569=x3564;
CheckValue<IkReal> x3571 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3568),IKFAST_ATAN2_MAGTHRESH);
if(!x3571.valid){
continue;
}
IkReal x3570=((-1.0)*(x3571.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3570;
IkReal gconst96=x3570;
IkReal gconst97=(r21*x3569);
IkReal gconst98=(x3568*x3569);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3572=((-1.0)*r20);
IkReal x3573=x3564;
CheckValue<IkReal> x3575 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3572),IKFAST_ATAN2_MAGTHRESH);
if(!x3575.valid){
continue;
}
IkReal x3574=((-1.0)*(x3575.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3574;
IkReal gconst96=x3574;
IkReal gconst97=(r21*x3573);
IkReal gconst98=(x3572*x3573);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3576=((-1.0)*r20);
IkReal x3577=x3564;
CheckValue<IkReal> x3579 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3576),IKFAST_ATAN2_MAGTHRESH);
if(!x3579.valid){
continue;
}
IkReal x3578=((-1.0)*(x3579.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3578;
IkReal gconst96=x3578;
IkReal gconst97=(r21*x3577);
IkReal gconst98=(x3576*x3577);
IkReal x3580=((1.0)*(r22*r22));
CheckValue<IkReal> x3584=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3580))),-1);
if(!x3584.valid){
continue;
}
IkReal x3581=x3584.value;
IkReal x3582=((1.0)*x3581);
IkReal x3583=((((-1.0)*x3582*(r21*r21*r21*r21)))+(((-2.0)*x3581*(r20*r20)*(r21*r21)))+(((-1.0)*x3582*(r20*r20*r20*r20)))+(((-1.0)*x3580)));
j4eval[0]=x3583;
j4eval[1]=IKsign(x3583);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3585=(cj1*cj2);
IkReal x3586=(gconst98*r20);
IkReal x3587=(sj1*sj2);
IkReal x3588=(gconst97*r21);
CheckValue<IkReal> x3589=IKPowWithIntegerCheck(IKsign(((((2.0)*x3586*x3588))+(((-1.0)*(x3586*x3586)))+(((-1.0)*(x3588*x3588)))+(((-1.0)*(r22*r22))))),-1);
if(!x3589.valid){
continue;
}
CheckValue<IkReal> x3590 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3585))+((r22*x3587)))),IkReal((((x3585*x3586))+(((-1.0)*x3586*x3587))+(((-1.0)*x3585*x3588))+((x3587*x3588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3589.value)))+(x3590.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3591=IKsin(j4);
IkReal x3592=IKcos(j4);
IkReal x3593=(gconst98*r10);
IkReal x3594=(gconst97*r21);
IkReal x3595=(gconst98*r20);
IkReal x3596=((1.0)*cj2);
IkReal x3597=((1.0)*sj0);
IkReal x3598=(gconst98*r00);
IkReal x3599=(cj1*sj2);
IkReal x3600=((1.0)*x3592);
IkReal x3601=((1.0)*x3591);
IkReal x3602=(gconst97*x3591);
IkReal x3603=(gconst97*x3592);
evalcond[0]=(((x3591*x3594))+(((-1.0)*r22*x3600))+(((-1.0)*x3595*x3601)));
evalcond[1]=(((r11*x3602))+cj0+(((-1.0)*r12*x3600))+(((-1.0)*x3593*x3601)));
evalcond[2]=((((-1.0)*x3598*x3601))+(((-1.0)*r02*x3600))+((r01*x3602))+(((-1.0)*x3597)));
evalcond[3]=((((-1.0)*cj1*x3596))+((sj1*sj2))+((x3592*x3594))+(((-1.0)*x3595*x3600))+((r22*x3591)));
evalcond[4]=(((r02*x3591))+(((-1.0)*cj0*x3599))+(((-1.0)*x3598*x3600))+((r01*x3603))+(((-1.0)*cj0*sj1*x3596)));
evalcond[5]=(((r11*x3603))+((r12*x3591))+(((-1.0)*x3593*x3600))+(((-1.0)*x3597*x3599))+(((-1.0)*sj0*sj1*x3596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3604=((1.0)*gconst98);
CheckValue<IkReal> x3605=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3604))+(((-1.0)*gconst97*r10)))),-1);
if(!x3605.valid){
continue;
}
CheckValue<IkReal> x3606 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3605.value)))+(x3606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3607=IKsin(j4);
IkReal x3608=IKcos(j4);
IkReal x3609=(gconst98*r10);
IkReal x3610=(gconst97*r21);
IkReal x3611=(gconst98*r20);
IkReal x3612=((1.0)*cj2);
IkReal x3613=((1.0)*sj0);
IkReal x3614=(gconst98*r00);
IkReal x3615=(cj1*sj2);
IkReal x3616=((1.0)*x3608);
IkReal x3617=((1.0)*x3607);
IkReal x3618=(gconst97*x3607);
IkReal x3619=(gconst97*x3608);
evalcond[0]=((((-1.0)*x3611*x3617))+((x3607*x3610))+(((-1.0)*r22*x3616)));
evalcond[1]=(((r11*x3618))+cj0+(((-1.0)*r12*x3616))+(((-1.0)*x3609*x3617)));
evalcond[2]=((((-1.0)*r02*x3616))+(((-1.0)*x3614*x3617))+((r01*x3618))+(((-1.0)*x3613)));
evalcond[3]=((((-1.0)*x3611*x3616))+((x3608*x3610))+((r22*x3607))+((sj1*sj2))+(((-1.0)*cj1*x3612)));
evalcond[4]=(((r02*x3607))+(((-1.0)*x3614*x3616))+(((-1.0)*cj0*sj1*x3612))+((r01*x3619))+(((-1.0)*cj0*x3615)));
evalcond[5]=(((r11*x3619))+(((-1.0)*x3613*x3615))+(((-1.0)*x3609*x3616))+(((-1.0)*sj0*sj1*x3612))+((r12*x3607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3620=((1.0)*gconst98);
CheckValue<IkReal> x3621 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3620))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3621.valid){
continue;
}
CheckValue<IkReal> x3622=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3620))+(((-1.0)*gconst97*r00)))),-1);
if(!x3622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3621.value)+(((1.5707963267949)*(x3622.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3623=IKsin(j4);
IkReal x3624=IKcos(j4);
IkReal x3625=(gconst98*r10);
IkReal x3626=(gconst97*r21);
IkReal x3627=(gconst98*r20);
IkReal x3628=((1.0)*cj2);
IkReal x3629=((1.0)*sj0);
IkReal x3630=(gconst98*r00);
IkReal x3631=(cj1*sj2);
IkReal x3632=((1.0)*x3624);
IkReal x3633=((1.0)*x3623);
IkReal x3634=(gconst97*x3623);
IkReal x3635=(gconst97*x3624);
evalcond[0]=((((-1.0)*x3627*x3633))+(((-1.0)*r22*x3632))+((x3623*x3626)));
evalcond[1]=(((r11*x3634))+cj0+(((-1.0)*r12*x3632))+(((-1.0)*x3625*x3633)));
evalcond[2]=((((-1.0)*x3629))+(((-1.0)*x3630*x3633))+(((-1.0)*r02*x3632))+((r01*x3634)));
evalcond[3]=((((-1.0)*x3627*x3632))+((sj1*sj2))+((x3624*x3626))+(((-1.0)*cj1*x3628))+((r22*x3623)));
evalcond[4]=((((-1.0)*x3630*x3632))+((r02*x3623))+((r01*x3635))+(((-1.0)*cj0*x3631))+(((-1.0)*cj0*sj1*x3628)));
evalcond[5]=(((r11*x3635))+((r12*x3623))+(((-1.0)*x3625*x3632))+(((-1.0)*sj0*sj1*x3628))+(((-1.0)*x3629*x3631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3636=((-1.0)*r21);
IkReal x3638 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3638)==0){
continue;
}
IkReal x3637=pow(x3638,-0.5);
CheckValue<IkReal> x3639 = IKatan2WithCheck(IkReal(x3636),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3639.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3639.value))));
IkReal gconst100=(x3636*x3637);
IkReal gconst101=((1.0)*r20*x3637);
CheckValue<IkReal> x3640 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3640.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3640.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3641=((-1.0)*r21);
CheckValue<IkReal> x3644 = IKatan2WithCheck(IkReal(x3641),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3644.valid){
continue;
}
IkReal x3642=((1.0)*(x3644.value));
IkReal x3643=x3637;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3642)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3642)));
IkReal gconst100=(x3641*x3643);
IkReal gconst101=((1.0)*r20*x3643);
IkReal x3645=r22*r22;
IkReal x3646=((1.0)*x3645);
CheckValue<IkReal> x3650=IKPowWithIntegerCheck(((-1.0)+x3645),-1);
if(!x3650.valid){
continue;
}
IkReal x3647=x3650.value;
if((((1.0)+(((-1.0)*x3646)))) < -0.00001)
continue;
IkReal x3648=IKsqrt(((1.0)+(((-1.0)*x3646))));
IkReal x3649=(cj0*x3647*x3648);
j4eval[0]=((IKabs(((((-1.0)*x3646*x3649))+x3649)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3651=((-1.0)*r21);
CheckValue<IkReal> x3654 = IKatan2WithCheck(IkReal(x3651),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3654.valid){
continue;
}
IkReal x3652=((1.0)*(x3654.value));
IkReal x3653=x3637;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3652)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3652)));
IkReal gconst100=(x3651*x3653);
IkReal gconst101=((1.0)*r20*x3653);
IkReal x3655=r22*r22;
IkReal x3656=((1.0)*x3655);
CheckValue<IkReal> x3660=IKPowWithIntegerCheck(((-1.0)+x3655),-1);
if(!x3660.valid){
continue;
}
IkReal x3657=x3660.value;
if((((1.0)+(((-1.0)*x3656)))) < -0.00001)
continue;
IkReal x3658=IKsqrt(((1.0)+(((-1.0)*x3656))));
IkReal x3659=(sj0*x3657*x3658);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3659+(((-1.0)*x3656*x3659))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3661=((-1.0)*r21);
CheckValue<IkReal> x3664 = IKatan2WithCheck(IkReal(x3661),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3664.valid){
continue;
}
IkReal x3662=((1.0)*(x3664.value));
IkReal x3663=x3637;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3662)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3662)));
IkReal gconst100=(x3661*x3663);
IkReal gconst101=((1.0)*r20*x3663);
IkReal x3665=r22*r22;
IkReal x3666=(r12*sj0);
IkReal x3667=(cj0*r02);
CheckValue<IkReal> x3671=IKPowWithIntegerCheck(((-1.0)+x3665),-1);
if(!x3671.valid){
continue;
}
IkReal x3668=x3671.value;
if((((1.0)+(((-1.0)*x3665)))) < -0.00001)
continue;
IkReal x3669=IKsqrt(((1.0)+(((-1.0)*x3665))));
IkReal x3670=(r22*x3668*x3669);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3667))+(((-1.0)*x3666)))))+(IKabs((((x3667*x3670))+((x3666*x3670))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3672=((1.0)*sj0);
IkReal x3673=((1.0)*gconst100);
CheckValue<IkReal> x3674=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3673))+(((-1.0)*gconst101*r21)))),-1);
if(!x3674.valid){
continue;
}
CheckValue<IkReal> x3675 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3672))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3672))+((gconst101*r10*sj0))+(((-1.0)*cj0*r01*x3673))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3674.value)))+(x3675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3676=IKsin(j4);
IkReal x3677=IKcos(j4);
IkReal x3678=(gconst101*r20);
IkReal x3679=(gconst101*r10);
IkReal x3680=((1.0)*cj2);
IkReal x3681=(gconst101*r00);
IkReal x3682=((1.0)*sj0);
IkReal x3683=(cj1*sj2);
IkReal x3684=((1.0)*x3677);
IkReal x3685=((1.0)*x3676);
IkReal x3686=(gconst100*x3676);
IkReal x3687=(gconst100*x3677);
evalcond[0]=((((-1.0)*r22*x3684))+((r21*x3686))+(((-1.0)*x3678*x3685)));
evalcond[1]=(cj0+(((-1.0)*x3679*x3685))+(((-1.0)*r12*x3684))+((r11*x3686)));
evalcond[2]=(((r01*x3686))+(((-1.0)*x3682))+(((-1.0)*r02*x3684))+(((-1.0)*x3681*x3685)));
evalcond[3]=(((r21*x3687))+((sj1*sj2))+(((-1.0)*cj1*x3680))+((r22*x3676))+(((-1.0)*x3678*x3684)));
evalcond[4]=(((r01*x3687))+(((-1.0)*cj0*x3683))+((r02*x3676))+(((-1.0)*cj0*sj1*x3680))+(((-1.0)*x3681*x3684)));
evalcond[5]=((((-1.0)*sj0*sj1*x3680))+((r12*x3676))+(((-1.0)*x3682*x3683))+(((-1.0)*x3679*x3684))+((r11*x3687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3688=((1.0)*gconst101);
CheckValue<IkReal> x3689=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3688)))),-1);
if(!x3689.valid){
continue;
}
CheckValue<IkReal> x3690 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3688))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3689.value)))+(x3690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3691=IKsin(j4);
IkReal x3692=IKcos(j4);
IkReal x3693=(gconst101*r20);
IkReal x3694=(gconst101*r10);
IkReal x3695=((1.0)*cj2);
IkReal x3696=(gconst101*r00);
IkReal x3697=((1.0)*sj0);
IkReal x3698=(cj1*sj2);
IkReal x3699=((1.0)*x3692);
IkReal x3700=((1.0)*x3691);
IkReal x3701=(gconst100*x3691);
IkReal x3702=(gconst100*x3692);
evalcond[0]=((((-1.0)*x3693*x3700))+(((-1.0)*r22*x3699))+((r21*x3701)));
evalcond[1]=(cj0+((r11*x3701))+(((-1.0)*r12*x3699))+(((-1.0)*x3694*x3700)));
evalcond[2]=(((r01*x3701))+(((-1.0)*r02*x3699))+(((-1.0)*x3697))+(((-1.0)*x3696*x3700)));
evalcond[3]=((((-1.0)*cj1*x3695))+((sj1*sj2))+((r21*x3702))+((r22*x3691))+(((-1.0)*x3693*x3699)));
evalcond[4]=((((-1.0)*cj0*x3698))+((r01*x3702))+((r02*x3691))+(((-1.0)*cj0*sj1*x3695))+(((-1.0)*x3696*x3699)));
evalcond[5]=(((r11*x3702))+(((-1.0)*x3697*x3698))+(((-1.0)*sj0*sj1*x3695))+(((-1.0)*x3694*x3699))+((r12*x3691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3703=((1.0)*gconst101);
CheckValue<IkReal> x3704=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3703))+(((-1.0)*gconst100*r00)))),-1);
if(!x3704.valid){
continue;
}
CheckValue<IkReal> x3705 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3704.value)))+(x3705.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3706=IKsin(j4);
IkReal x3707=IKcos(j4);
IkReal x3708=(gconst101*r20);
IkReal x3709=(gconst101*r10);
IkReal x3710=((1.0)*cj2);
IkReal x3711=(gconst101*r00);
IkReal x3712=((1.0)*sj0);
IkReal x3713=(cj1*sj2);
IkReal x3714=((1.0)*x3707);
IkReal x3715=((1.0)*x3706);
IkReal x3716=(gconst100*x3706);
IkReal x3717=(gconst100*x3707);
evalcond[0]=(((r21*x3716))+(((-1.0)*x3708*x3715))+(((-1.0)*r22*x3714)));
evalcond[1]=(((r11*x3716))+cj0+(((-1.0)*r12*x3714))+(((-1.0)*x3709*x3715)));
evalcond[2]=((((-1.0)*x3711*x3715))+(((-1.0)*r02*x3714))+(((-1.0)*x3712))+((r01*x3716)));
evalcond[3]=((((-1.0)*cj1*x3710))+((sj1*sj2))+((r21*x3717))+(((-1.0)*x3708*x3714))+((r22*x3706)));
evalcond[4]=((((-1.0)*x3711*x3714))+(((-1.0)*cj0*x3713))+((r01*x3717))+((r02*x3706))+(((-1.0)*cj0*sj1*x3710)));
evalcond[5]=(((r11*x3717))+((r12*x3706))+(((-1.0)*sj0*sj1*x3710))+(((-1.0)*x3709*x3714))+(((-1.0)*x3712*x3713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3718=((-1.0)*r10);
IkReal x3720 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3720)==0){
continue;
}
IkReal x3719=pow(x3720,-0.5);
CheckValue<IkReal> x3721 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3718),IKFAST_ATAN2_MAGTHRESH);
if(!x3721.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3721.value));
IkReal gconst103=(r11*x3719);
IkReal gconst104=(x3718*x3719);
CheckValue<IkReal> x3722 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3722.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3722.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3723=((-1.0)*r10);
IkReal x3724=x3719;
CheckValue<IkReal> x3726 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3723),IKFAST_ATAN2_MAGTHRESH);
if(!x3726.valid){
continue;
}
IkReal x3725=((-1.0)*(x3726.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3725;
IkReal gconst102=x3725;
IkReal gconst103=(r11*x3724);
IkReal gconst104=(x3723*x3724);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3727=((1.0)*sj0);
IkReal x3728=((1.0)*gconst103);
CheckValue<IkReal> x3729=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3728)))),-1);
if(!x3729.valid){
continue;
}
CheckValue<IkReal> x3730 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3727))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3728))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x3727))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3729.value)))+(x3730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3731=IKsin(j4);
IkReal x3732=IKcos(j4);
IkReal x3733=(gconst103*r11);
IkReal x3734=((1.0)*cj2);
IkReal x3735=((1.0)*sj0);
IkReal x3736=(cj1*sj2);
IkReal x3737=((1.0)*x3732);
IkReal x3738=(gconst103*x3732);
IkReal x3739=(gconst103*x3731);
IkReal x3740=((1.0)*gconst104*x3731);
evalcond[0]=((((-1.0)*r20*x3740))+(((-1.0)*r22*x3737))+((r21*x3739)));
evalcond[1]=(cj0+((x3731*x3733))+(((-1.0)*r12*x3737))+(((-1.0)*r10*x3740)));
evalcond[2]=((((-1.0)*x3735))+(((-1.0)*r00*x3740))+((r01*x3739))+(((-1.0)*r02*x3737)));
evalcond[3]=((((-1.0)*cj1*x3734))+((sj1*sj2))+((r22*x3731))+(((-1.0)*gconst104*r20*x3737))+((r21*x3738)));
evalcond[4]=((((-1.0)*gconst104*r00*x3737))+((r01*x3738))+(((-1.0)*cj0*x3736))+((r02*x3731))+(((-1.0)*cj0*sj1*x3734)));
evalcond[5]=((((-1.0)*sj0*sj1*x3734))+((x3732*x3733))+((r12*x3731))+(((-1.0)*x3735*x3736))+(((-1.0)*gconst104*r10*x3737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3741=((1.0)*gconst104);
CheckValue<IkReal> x3742=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3741)))),-1);
if(!x3742.valid){
continue;
}
CheckValue<IkReal> x3743 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3741))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3742.value)))+(x3743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3744=IKsin(j4);
IkReal x3745=IKcos(j4);
IkReal x3746=(gconst103*r11);
IkReal x3747=((1.0)*cj2);
IkReal x3748=((1.0)*sj0);
IkReal x3749=(cj1*sj2);
IkReal x3750=((1.0)*x3745);
IkReal x3751=(gconst103*x3745);
IkReal x3752=(gconst103*x3744);
IkReal x3753=((1.0)*gconst104*x3744);
evalcond[0]=((((-1.0)*r22*x3750))+(((-1.0)*r20*x3753))+((r21*x3752)));
evalcond[1]=(cj0+((x3744*x3746))+(((-1.0)*r12*x3750))+(((-1.0)*r10*x3753)));
evalcond[2]=(((r01*x3752))+(((-1.0)*r00*x3753))+(((-1.0)*x3748))+(((-1.0)*r02*x3750)));
evalcond[3]=((((-1.0)*gconst104*r20*x3750))+((sj1*sj2))+((r22*x3744))+((r21*x3751))+(((-1.0)*cj1*x3747)));
evalcond[4]=((((-1.0)*gconst104*r00*x3750))+(((-1.0)*cj0*x3749))+((r01*x3751))+((r02*x3744))+(((-1.0)*cj0*sj1*x3747)));
evalcond[5]=((((-1.0)*x3748*x3749))+(((-1.0)*sj0*sj1*x3747))+((r12*x3744))+(((-1.0)*gconst104*r10*x3750))+((x3745*x3746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3754=((-1.0)*r11);
IkReal x3756 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3756)==0){
continue;
}
IkReal x3755=pow(x3756,-0.5);
CheckValue<IkReal> x3757 = IKatan2WithCheck(IkReal(x3754),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3757.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3757.value))));
IkReal gconst106=(x3754*x3755);
IkReal gconst107=((1.0)*r10*x3755);
CheckValue<IkReal> x3758 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3758.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3758.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3759=((-1.0)*r11);
CheckValue<IkReal> x3762 = IKatan2WithCheck(IkReal(x3759),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3762.valid){
continue;
}
IkReal x3760=((1.0)*(x3762.value));
IkReal x3761=x3755;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3760)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3760)));
IkReal gconst106=(x3759*x3761);
IkReal gconst107=((1.0)*r10*x3761);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3763=((-1.0)*r11);
CheckValue<IkReal> x3766 = IKatan2WithCheck(IkReal(x3763),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3766.valid){
continue;
}
IkReal x3764=((1.0)*(x3766.value));
IkReal x3765=x3755;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3764)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3764)));
IkReal gconst106=(x3763*x3765);
IkReal gconst107=((1.0)*r10*x3765);
IkReal x3767=r12*r12;
IkReal x3768=((1.0)*sj0);
IkReal x3769=(cj0*r02);
IkReal x3770=x3755;
j4eval[0]=((IKabs((((r12*x3769*x3770))+((sj0*x3767*x3770))+(((-1.0)*x3768*x3770)))))+(IKabs(((((-1.0)*x3769))+(((-1.0)*r12*x3768))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3771=((-1.0)*r11);
CheckValue<IkReal> x3774 = IKatan2WithCheck(IkReal(x3771),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3774.valid){
continue;
}
IkReal x3772=((1.0)*(x3774.value));
IkReal x3773=x3755;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3772)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3772)));
IkReal gconst106=(x3771*x3773);
IkReal gconst107=((1.0)*r10*x3773);
IkReal x3775=r12*r12;
IkReal x3776=((1.0)+(((-1.0)*x3775)));
IkReal x3777=(r22*sj1*sj2);
IkReal x3778=(cj1*cj2*r22);
CheckValue<IkReal> x3785=IKPowWithIntegerCheck(x3776,-1);
if(!x3785.valid){
continue;
}
IkReal x3779=x3785.value;
CheckValue<IkReal> x3786=IKPowWithIntegerCheck(((-1.0)+x3775),-1);
if(!x3786.valid){
continue;
}
IkReal x3780=x3786.value;
IkReal x3781=((1.0)*x3779);
if((x3776) < -0.00001)
continue;
IkReal x3782=IKsqrt(x3776);
IkReal x3783=(r12*x3780*x3782);
IkReal x3784=((((-2.0)*r10*r11*r20*r21*x3779))+(((-1.0)*x3781*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3781*(r11*r11)*(r21*r21))));
j4eval[0]=x3784;
j4eval[1]=((IKabs((((x3778*x3783))+(((-1.0)*x3777*x3783)))))+(IKabs(((((-1.0)*x3778))+x3777))));
j4eval[2]=IKsign(x3784);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3787=(sj1*sj2);
IkReal x3788=(gconst106*r21);
IkReal x3789=(gconst107*r20);
IkReal x3790=(cj1*cj2);
CheckValue<IkReal> x3791 = IKatan2WithCheck(IkReal((((r22*x3787))+(((-1.0)*r22*x3790)))),IkReal(((((-1.0)*x3787*x3789))+((x3787*x3788))+((x3789*x3790))+(((-1.0)*x3788*x3790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3791.valid){
continue;
}
CheckValue<IkReal> x3792=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3789*x3789)))+(((-1.0)*(x3788*x3788)))+(((-1.0)*(r22*r22)))+(((2.0)*x3788*x3789)))),-1);
if(!x3792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3791.value)+(((1.5707963267949)*(x3792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3793=IKsin(j4);
IkReal x3794=IKcos(j4);
IkReal x3795=(gconst107*r10);
IkReal x3796=(gconst107*r00);
IkReal x3797=((1.0)*cj2);
IkReal x3798=(gconst107*r20);
IkReal x3799=((1.0)*sj0);
IkReal x3800=(cj1*sj2);
IkReal x3801=((1.0)*x3794);
IkReal x3802=(gconst106*x3794);
IkReal x3803=(gconst106*x3793);
IkReal x3804=((1.0)*x3793);
evalcond[0]=(((r21*x3803))+(((-1.0)*x3798*x3804))+(((-1.0)*r22*x3801)));
evalcond[1]=(((r11*x3803))+cj0+(((-1.0)*r12*x3801))+(((-1.0)*x3795*x3804)));
evalcond[2]=((((-1.0)*x3799))+((r01*x3803))+(((-1.0)*x3796*x3804))+(((-1.0)*r02*x3801)));
evalcond[3]=(((r22*x3793))+((r21*x3802))+((sj1*sj2))+(((-1.0)*cj1*x3797))+(((-1.0)*x3798*x3801)));
evalcond[4]=(((r01*x3802))+(((-1.0)*x3796*x3801))+((r02*x3793))+(((-1.0)*cj0*sj1*x3797))+(((-1.0)*cj0*x3800)));
evalcond[5]=((((-1.0)*sj0*sj1*x3797))+((r11*x3802))+(((-1.0)*x3799*x3800))+((r12*x3793))+(((-1.0)*x3795*x3801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3805=((1.0)*sj0);
IkReal x3806=((1.0)*gconst106);
CheckValue<IkReal> x3807=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3806)))),-1);
if(!x3807.valid){
continue;
}
CheckValue<IkReal> x3808 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3805)))),IkReal(((((-1.0)*gconst106*r11*x3805))+(((-1.0)*cj0*r01*x3806))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3807.value)))+(x3808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3809=IKsin(j4);
IkReal x3810=IKcos(j4);
IkReal x3811=(gconst107*r10);
IkReal x3812=(gconst107*r00);
IkReal x3813=((1.0)*cj2);
IkReal x3814=(gconst107*r20);
IkReal x3815=((1.0)*sj0);
IkReal x3816=(cj1*sj2);
IkReal x3817=((1.0)*x3810);
IkReal x3818=(gconst106*x3810);
IkReal x3819=(gconst106*x3809);
IkReal x3820=((1.0)*x3809);
evalcond[0]=((((-1.0)*r22*x3817))+((r21*x3819))+(((-1.0)*x3814*x3820)));
evalcond[1]=((((-1.0)*r12*x3817))+cj0+((r11*x3819))+(((-1.0)*x3811*x3820)));
evalcond[2]=((((-1.0)*r02*x3817))+(((-1.0)*x3815))+(((-1.0)*x3812*x3820))+((r01*x3819)));
evalcond[3]=(((r21*x3818))+((r22*x3809))+(((-1.0)*x3814*x3817))+(((-1.0)*cj1*x3813))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x3816))+((r02*x3809))+(((-1.0)*x3812*x3817))+(((-1.0)*cj0*sj1*x3813))+((r01*x3818)));
evalcond[5]=((((-1.0)*sj0*sj1*x3813))+(((-1.0)*x3815*x3816))+((r11*x3818))+((r12*x3809))+(((-1.0)*x3811*x3817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3821=((1.0)*gconst107);
CheckValue<IkReal> x3822 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3821)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3822.valid){
continue;
}
CheckValue<IkReal> x3823=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3821)))),-1);
if(!x3823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3822.value)+(((1.5707963267949)*(x3823.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3824=IKsin(j4);
IkReal x3825=IKcos(j4);
IkReal x3826=(gconst107*r10);
IkReal x3827=(gconst107*r00);
IkReal x3828=((1.0)*cj2);
IkReal x3829=(gconst107*r20);
IkReal x3830=((1.0)*sj0);
IkReal x3831=(cj1*sj2);
IkReal x3832=((1.0)*x3825);
IkReal x3833=(gconst106*x3825);
IkReal x3834=(gconst106*x3824);
IkReal x3835=((1.0)*x3824);
evalcond[0]=((((-1.0)*x3829*x3835))+((r21*x3834))+(((-1.0)*r22*x3832)));
evalcond[1]=(cj0+(((-1.0)*r12*x3832))+((r11*x3834))+(((-1.0)*x3826*x3835)));
evalcond[2]=(((r01*x3834))+(((-1.0)*x3827*x3835))+(((-1.0)*r02*x3832))+(((-1.0)*x3830)));
evalcond[3]=((((-1.0)*x3829*x3832))+((sj1*sj2))+(((-1.0)*cj1*x3828))+((r22*x3824))+((r21*x3833)));
evalcond[4]=(((r01*x3833))+((r02*x3824))+(((-1.0)*cj0*x3831))+(((-1.0)*cj0*sj1*x3828))+(((-1.0)*x3827*x3832)));
evalcond[5]=(((r12*x3824))+(((-1.0)*x3830*x3831))+(((-1.0)*sj0*sj1*x3828))+((r11*x3833))+(((-1.0)*x3826*x3832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3836=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3836;
j4eval[1]=IKsign(x3836);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3837=((1.0)*cj5);
IkReal x3838=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3837)));
j4eval[0]=x3838;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x3837))+((r21*sj5))))));
j4eval[2]=IKsign(x3838);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3839=(sj1*sj2);
IkReal x3840=(cj5*r10);
IkReal x3841=(r11*sj5);
IkReal x3842=(cj1*cj2);
IkReal x3843=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3843;
j4eval[1]=((IKabs((((r12*x3842))+(((-1.0)*r12*x3839)))))+(IKabs(((((-1.0)*x3839*x3840))+((x3839*x3841))+((x3840*x3842))+(((-1.0)*x3841*x3842))))));
j4eval[2]=IKsign(x3843);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3844=(sj1*sj2);
IkReal x3845=(cj5*r10);
IkReal x3846=(r11*sj5);
IkReal x3847=(cj1*cj2);
CheckValue<IkReal> x3848 = IKatan2WithCheck(IkReal(((((-1.0)*x3844*x3845))+(((-1.0)*x3846*x3847))+((x3844*x3846))+((x3845*x3847)))),IkReal((((r12*x3847))+(((-1.0)*r12*x3844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3848.valid){
continue;
}
CheckValue<IkReal> x3849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3848.value)+(((1.5707963267949)*(x3849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3850=IKcos(j4);
IkReal x3851=IKsin(j4);
IkReal x3852=(cj5*r00);
IkReal x3853=(cj5*r10);
IkReal x3854=(r21*sj5);
IkReal x3855=((1.0)*cj2);
IkReal x3856=(cj5*r20);
IkReal x3857=((1.0)*x3850);
IkReal x3858=((1.0)*x3851);
IkReal x3859=(sj5*x3851);
IkReal x3860=(sj5*x3850);
evalcond[0]=(((r11*x3860))+(((-1.0)*x3853*x3857))+((r12*x3851)));
evalcond[1]=((((-1.0)*x3856*x3858))+((x3851*x3854))+(((-1.0)*r22*x3857)));
evalcond[2]=(((r01*x3859))+(((-1.0)*x3852*x3858))+(((-1.0)*r02*x3857)));
evalcond[3]=((1.0)+((r11*x3859))+(((-1.0)*x3853*x3858))+(((-1.0)*r12*x3857)));
evalcond[4]=(((x3850*x3854))+((sj1*sj2))+(((-1.0)*x3856*x3857))+(((-1.0)*cj1*x3855))+((r22*x3851)));
evalcond[5]=(((r02*x3851))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3855))+((r01*x3860))+(((-1.0)*x3852*x3857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3861=((1.0)*cj5);
CheckValue<IkReal> x3862 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3861))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3862.valid){
continue;
}
CheckValue<IkReal> x3863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3861)))),-1);
if(!x3863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3862.value)+(((1.5707963267949)*(x3863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3864=IKcos(j4);
IkReal x3865=IKsin(j4);
IkReal x3866=(cj5*r00);
IkReal x3867=(cj5*r10);
IkReal x3868=(r21*sj5);
IkReal x3869=((1.0)*cj2);
IkReal x3870=(cj5*r20);
IkReal x3871=((1.0)*x3864);
IkReal x3872=((1.0)*x3865);
IkReal x3873=(sj5*x3865);
IkReal x3874=(sj5*x3864);
evalcond[0]=((((-1.0)*x3867*x3871))+((r11*x3874))+((r12*x3865)));
evalcond[1]=(((x3865*x3868))+(((-1.0)*x3870*x3872))+(((-1.0)*r22*x3871)));
evalcond[2]=((((-1.0)*x3866*x3872))+((r01*x3873))+(((-1.0)*r02*x3871)));
evalcond[3]=((1.0)+(((-1.0)*x3867*x3872))+(((-1.0)*r12*x3871))+((r11*x3873)));
evalcond[4]=(((x3864*x3868))+((sj1*sj2))+(((-1.0)*x3870*x3871))+(((-1.0)*cj1*x3869))+((r22*x3865)));
evalcond[5]=(((r02*x3865))+(((-1.0)*x3866*x3871))+((r01*x3874))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3875=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3875.valid){
continue;
}
CheckValue<IkReal> x3876 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3875.value)))+(x3876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3877=IKcos(j4);
IkReal x3878=IKsin(j4);
IkReal x3879=(cj5*r00);
IkReal x3880=(cj5*r10);
IkReal x3881=(r21*sj5);
IkReal x3882=((1.0)*cj2);
IkReal x3883=(cj5*r20);
IkReal x3884=((1.0)*x3877);
IkReal x3885=((1.0)*x3878);
IkReal x3886=(sj5*x3878);
IkReal x3887=(sj5*x3877);
evalcond[0]=((((-1.0)*x3880*x3884))+((r11*x3887))+((r12*x3878)));
evalcond[1]=(((x3878*x3881))+(((-1.0)*x3883*x3885))+(((-1.0)*r22*x3884)));
evalcond[2]=((((-1.0)*x3879*x3885))+(((-1.0)*r02*x3884))+((r01*x3886)));
evalcond[3]=((1.0)+(((-1.0)*x3880*x3885))+((r11*x3886))+(((-1.0)*r12*x3884)));
evalcond[4]=((((-1.0)*cj1*x3882))+((x3877*x3881))+(((-1.0)*x3883*x3884))+((sj1*sj2))+((r22*x3878)));
evalcond[5]=((((-1.0)*sj1*x3882))+(((-1.0)*x3879*x3884))+(((-1.0)*cj1*sj2))+((r01*x3887))+((r02*x3878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3888=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3888;
j4eval[1]=IKsign(x3888);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3889=((1.0)*cj5);
IkReal x3890=((((-1.0)*r21*x3889))+(((-1.0)*r20*sj5)));
j4eval[0]=x3890;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3889))))));
j4eval[2]=IKsign(x3890);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3891=cj5*cj5;
IkReal x3892=r11*r11;
IkReal x3893=(r11*sj5);
IkReal x3894=(cj5*r10);
IkReal x3895=((r12*r12)+((x3891*(r10*r10)))+x3892+(((-1.0)*x3891*x3892))+(((-2.0)*x3893*x3894)));
j4eval[0]=x3895;
j4eval[1]=IKsign(x3895);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3894))+x3893))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3896=cj5*cj5;
IkReal x3897=r11*r11;
IkReal x3898=(cj5*r10);
IkReal x3899=(r11*sj5);
CheckValue<IkReal> x3900=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3896*(r10*r10)))+(((-2.0)*x3898*x3899))+x3897+(((-1.0)*x3896*x3897)))),-1);
if(!x3900.valid){
continue;
}
CheckValue<IkReal> x3901 = IKatan2WithCheck(IkReal(((((-1.0)*x3898))+x3899)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3900.value)))+(x3901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3902=IKcos(j4);
IkReal x3903=IKsin(j4);
IkReal x3904=(cj5*r00);
IkReal x3905=(cj5*r10);
IkReal x3906=(r21*sj5);
IkReal x3907=(cj5*r20);
IkReal x3908=((1.0)*x3902);
IkReal x3909=((1.0)*x3903);
IkReal x3910=(sj5*x3903);
IkReal x3911=(sj5*x3902);
evalcond[0]=((((-1.0)*x3905*x3908))+((r12*x3903))+((r11*x3911)));
evalcond[1]=(((x3903*x3906))+(((-1.0)*r22*x3908))+(((-1.0)*x3907*x3909)));
evalcond[2]=((((-1.0)*x3904*x3909))+((r01*x3910))+(((-1.0)*r02*x3908)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3908))+(((-1.0)*x3905*x3909))+((r11*x3910)));
evalcond[4]=((((-1.0)*x3904*x3908))+((cj2*sj1))+((cj1*sj2))+((r01*x3911))+((r02*x3903)));
evalcond[5]=(((r22*x3903))+((x3902*x3906))+(((-1.0)*cj1*cj2))+(((-1.0)*x3907*x3908))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3912=((1.0)*cj5);
CheckValue<IkReal> x3913=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3912))+(((-1.0)*r20*sj5)))),-1);
if(!x3913.valid){
continue;
}
CheckValue<IkReal> x3914 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3913.value)))+(x3914.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3915=IKcos(j4);
IkReal x3916=IKsin(j4);
IkReal x3917=(cj5*r00);
IkReal x3918=(cj5*r10);
IkReal x3919=(r21*sj5);
IkReal x3920=(cj5*r20);
IkReal x3921=((1.0)*x3915);
IkReal x3922=((1.0)*x3916);
IkReal x3923=(sj5*x3916);
IkReal x3924=(sj5*x3915);
evalcond[0]=(((r11*x3924))+(((-1.0)*x3918*x3921))+((r12*x3916)));
evalcond[1]=((((-1.0)*x3920*x3922))+(((-1.0)*r22*x3921))+((x3916*x3919)));
evalcond[2]=((((-1.0)*r02*x3921))+(((-1.0)*x3917*x3922))+((r01*x3923)));
evalcond[3]=((-1.0)+((r11*x3923))+(((-1.0)*r12*x3921))+(((-1.0)*x3918*x3922)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3917*x3921))+((r02*x3916))+((r01*x3924)));
evalcond[5]=(((x3915*x3919))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3920*x3921))+((r22*x3916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3925 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3925.valid){
continue;
}
CheckValue<IkReal> x3926=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3925.value)+(((1.5707963267949)*(x3926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3927=IKcos(j4);
IkReal x3928=IKsin(j4);
IkReal x3929=(cj5*r00);
IkReal x3930=(cj5*r10);
IkReal x3931=(r21*sj5);
IkReal x3932=(cj5*r20);
IkReal x3933=((1.0)*x3927);
IkReal x3934=((1.0)*x3928);
IkReal x3935=(sj5*x3928);
IkReal x3936=(sj5*x3927);
evalcond[0]=(((r12*x3928))+(((-1.0)*x3930*x3933))+((r11*x3936)));
evalcond[1]=((((-1.0)*x3932*x3934))+(((-1.0)*r22*x3933))+((x3928*x3931)));
evalcond[2]=((((-1.0)*x3929*x3934))+((r01*x3935))+(((-1.0)*r02*x3933)));
evalcond[3]=((-1.0)+(((-1.0)*x3930*x3934))+(((-1.0)*r12*x3933))+((r11*x3935)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3929*x3933))+((r01*x3936))+((cj1*sj2))+((r02*x3928)));
evalcond[5]=((((-1.0)*x3932*x3933))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3927*x3931))+((r22*x3928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3937=((-1.0)*r00);
IkReal x3939 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3939)==0){
continue;
}
IkReal x3938=pow(x3939,-0.5);
CheckValue<IkReal> x3940 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3937),IKFAST_ATAN2_MAGTHRESH);
if(!x3940.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3940.value));
IkReal gconst109=(r01*x3938);
IkReal gconst110=(x3937*x3938);
CheckValue<IkReal> x3941 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3941.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3941.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3942=((-1.0)*r00);
IkReal x3943=x3938;
CheckValue<IkReal> x3945 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3942),IKFAST_ATAN2_MAGTHRESH);
if(!x3945.valid){
continue;
}
IkReal x3944=((-1.0)*(x3945.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3944;
IkReal gconst108=x3944;
IkReal gconst109=(r01*x3943);
IkReal gconst110=(x3942*x3943);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3946=((1.0)*sj0);
IkReal x3947=((1.0)*gconst109);
CheckValue<IkReal> x3948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3947))+(((-1.0)*gconst110*r21)))),-1);
if(!x3948.valid){
continue;
}
CheckValue<IkReal> x3949 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3946)))),IkReal(((((-1.0)*cj0*r01*x3947))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3948.value)))+(x3949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3950=IKsin(j4);
IkReal x3951=IKcos(j4);
IkReal x3952=(gconst109*r21);
IkReal x3953=((1.0)*cj2);
IkReal x3954=((1.0)*sj0);
IkReal x3955=(cj1*sj2);
IkReal x3956=((1.0)*x3951);
IkReal x3957=(gconst109*x3950);
IkReal x3958=(gconst109*x3951);
IkReal x3959=((1.0)*gconst110*x3950);
evalcond[0]=((((-1.0)*r22*x3956))+((x3950*x3952))+(((-1.0)*r20*x3959)));
evalcond[1]=(cj0+(((-1.0)*r12*x3956))+((r11*x3957))+(((-1.0)*r10*x3959)));
evalcond[2]=(((r01*x3957))+(((-1.0)*r00*x3959))+(((-1.0)*x3954))+(((-1.0)*r02*x3956)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3953))+(((-1.0)*gconst110*r20*x3956))+((x3951*x3952))+((r22*x3950)));
evalcond[4]=((((-1.0)*cj0*sj1*x3953))+((r01*x3958))+(((-1.0)*cj0*x3955))+((r02*x3950))+(((-1.0)*gconst110*r00*x3956)));
evalcond[5]=((((-1.0)*x3954*x3955))+(((-1.0)*sj0*sj1*x3953))+((r11*x3958))+(((-1.0)*gconst110*r10*x3956))+((r12*x3950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3960=((1.0)*gconst110);
CheckValue<IkReal> x3961 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3960))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3961.valid){
continue;
}
CheckValue<IkReal> x3962=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3960)))),-1);
if(!x3962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3961.value)+(((1.5707963267949)*(x3962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3963=IKsin(j4);
IkReal x3964=IKcos(j4);
IkReal x3965=(gconst109*r21);
IkReal x3966=((1.0)*cj2);
IkReal x3967=((1.0)*sj0);
IkReal x3968=(cj1*sj2);
IkReal x3969=((1.0)*x3964);
IkReal x3970=(gconst109*x3963);
IkReal x3971=(gconst109*x3964);
IkReal x3972=((1.0)*gconst110*x3963);
evalcond[0]=((((-1.0)*r20*x3972))+(((-1.0)*r22*x3969))+((x3963*x3965)));
evalcond[1]=(cj0+((r11*x3970))+(((-1.0)*r10*x3972))+(((-1.0)*r12*x3969)));
evalcond[2]=((((-1.0)*x3967))+(((-1.0)*r02*x3969))+((r01*x3970))+(((-1.0)*r00*x3972)));
evalcond[3]=((((-1.0)*gconst110*r20*x3969))+((r22*x3963))+((sj1*sj2))+((x3964*x3965))+(((-1.0)*cj1*x3966)));
evalcond[4]=((((-1.0)*cj0*x3968))+(((-1.0)*gconst110*r00*x3969))+((r02*x3963))+(((-1.0)*cj0*sj1*x3966))+((r01*x3971)));
evalcond[5]=((((-1.0)*gconst110*r10*x3969))+((r11*x3971))+((r12*x3963))+(((-1.0)*x3967*x3968))+(((-1.0)*sj0*sj1*x3966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3973=((-1.0)*r01);
IkReal x3975 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3975)==0){
continue;
}
IkReal x3974=pow(x3975,-0.5);
CheckValue<IkReal> x3976 = IKatan2WithCheck(IkReal(x3973),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3976.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3976.value))));
IkReal gconst112=(x3973*x3974);
IkReal gconst113=((1.0)*r00*x3974);
CheckValue<IkReal> x3977 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3977.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3977.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3978=((-1.0)*r01);
CheckValue<IkReal> x3981 = IKatan2WithCheck(IkReal(x3978),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3981.valid){
continue;
}
IkReal x3979=((1.0)*(x3981.value));
IkReal x3980=x3974;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3979)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3979)));
IkReal gconst112=(x3978*x3980);
IkReal gconst113=((1.0)*r00*x3980);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3982=((-1.0)*r01);
CheckValue<IkReal> x3985 = IKatan2WithCheck(IkReal(x3982),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3985.valid){
continue;
}
IkReal x3983=((1.0)*(x3985.value));
IkReal x3984=x3974;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3983)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3983)));
IkReal gconst112=(x3982*x3984);
IkReal gconst113=((1.0)*r00*x3984);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3986=((-1.0)*r01);
CheckValue<IkReal> x3989 = IKatan2WithCheck(IkReal(x3986),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3989.valid){
continue;
}
IkReal x3987=((1.0)*(x3989.value));
IkReal x3988=x3974;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3987)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3987)));
IkReal gconst112=(x3986*x3988);
IkReal gconst113=((1.0)*r00*x3988);
IkReal x3990=r02*r02;
IkReal x3991=(r12*sj0);
IkReal x3992=((1.0)*cj0);
IkReal x3993=x3974;
j4eval[0]=((IKabs((((r02*x3991*x3993))+(((-1.0)*x3992*x3993))+((cj0*x3990*x3993)))))+(IKabs(((((-1.0)*r02*x3992))+(((-1.0)*x3991))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3994=((1.0)*sj0);
IkReal x3995=((1.0)*gconst112);
CheckValue<IkReal> x3996=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x3995)))),-1);
if(!x3996.valid){
continue;
}
CheckValue<IkReal> x3997 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3994))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3995))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x3994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3996.value)))+(x3997.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3998=IKsin(j4);
IkReal x3999=IKcos(j4);
IkReal x4000=(gconst113*r20);
IkReal x4001=(gconst112*r21);
IkReal x4002=((1.0)*cj2);
IkReal x4003=(gconst113*r00);
IkReal x4004=(gconst113*r10);
IkReal x4005=((1.0)*sj0);
IkReal x4006=(cj1*sj2);
IkReal x4007=((1.0)*x3999);
IkReal x4008=((1.0)*x3998);
IkReal x4009=(gconst112*x3999);
IkReal x4010=(gconst112*x3998);
evalcond[0]=((((-1.0)*r22*x4007))+(((-1.0)*x4000*x4008))+((x3998*x4001)));
evalcond[1]=(cj0+(((-1.0)*r12*x4007))+((r11*x4010))+(((-1.0)*x4004*x4008)));
evalcond[2]=((((-1.0)*r02*x4007))+(((-1.0)*x4005))+((r01*x4010))+(((-1.0)*x4003*x4008)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4000*x4007))+(((-1.0)*cj1*x4002))+((r22*x3998))+((x3999*x4001)));
evalcond[4]=((((-1.0)*cj0*x4006))+((r01*x4009))+((r02*x3998))+(((-1.0)*cj0*sj1*x4002))+(((-1.0)*x4003*x4007)));
evalcond[5]=(((r12*x3998))+(((-1.0)*sj0*sj1*x4002))+(((-1.0)*x4005*x4006))+(((-1.0)*x4004*x4007))+((r11*x4009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4011=((1.0)*gconst113);
CheckValue<IkReal> x4012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4011))+(((-1.0)*gconst112*r10)))),-1);
if(!x4012.valid){
continue;
}
CheckValue<IkReal> x4013 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4012.value)))+(x4013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4014=IKsin(j4);
IkReal x4015=IKcos(j4);
IkReal x4016=(gconst113*r20);
IkReal x4017=(gconst112*r21);
IkReal x4018=((1.0)*cj2);
IkReal x4019=(gconst113*r00);
IkReal x4020=(gconst113*r10);
IkReal x4021=((1.0)*sj0);
IkReal x4022=(cj1*sj2);
IkReal x4023=((1.0)*x4015);
IkReal x4024=((1.0)*x4014);
IkReal x4025=(gconst112*x4015);
IkReal x4026=(gconst112*x4014);
evalcond[0]=((((-1.0)*r22*x4023))+(((-1.0)*x4016*x4024))+((x4014*x4017)));
evalcond[1]=((((-1.0)*r12*x4023))+cj0+((r11*x4026))+(((-1.0)*x4020*x4024)));
evalcond[2]=((((-1.0)*r02*x4023))+((r01*x4026))+(((-1.0)*x4021))+(((-1.0)*x4019*x4024)));
evalcond[3]=((((-1.0)*cj1*x4018))+((sj1*sj2))+((r22*x4014))+((x4015*x4017))+(((-1.0)*x4016*x4023)));
evalcond[4]=(((r02*x4014))+(((-1.0)*cj0*x4022))+(((-1.0)*cj0*sj1*x4018))+((r01*x4025))+(((-1.0)*x4019*x4023)));
evalcond[5]=((((-1.0)*sj0*sj1*x4018))+((r12*x4014))+(((-1.0)*x4021*x4022))+((r11*x4025))+(((-1.0)*x4020*x4023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4027=((1.0)*gconst113);
CheckValue<IkReal> x4028=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4027))+(((-1.0)*gconst112*r00)))),-1);
if(!x4028.valid){
continue;
}
CheckValue<IkReal> x4029 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4028.value)))+(x4029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4030=IKsin(j4);
IkReal x4031=IKcos(j4);
IkReal x4032=(gconst113*r20);
IkReal x4033=(gconst112*r21);
IkReal x4034=((1.0)*cj2);
IkReal x4035=(gconst113*r00);
IkReal x4036=(gconst113*r10);
IkReal x4037=((1.0)*sj0);
IkReal x4038=(cj1*sj2);
IkReal x4039=((1.0)*x4031);
IkReal x4040=((1.0)*x4030);
IkReal x4041=(gconst112*x4031);
IkReal x4042=(gconst112*x4030);
evalcond[0]=((((-1.0)*r22*x4039))+(((-1.0)*x4032*x4040))+((x4030*x4033)));
evalcond[1]=(cj0+(((-1.0)*x4036*x4040))+(((-1.0)*r12*x4039))+((r11*x4042)));
evalcond[2]=((((-1.0)*x4035*x4040))+(((-1.0)*x4037))+((r01*x4042))+(((-1.0)*r02*x4039)));
evalcond[3]=((((-1.0)*cj1*x4034))+((sj1*sj2))+(((-1.0)*x4032*x4039))+((x4031*x4033))+((r22*x4030)));
evalcond[4]=((((-1.0)*cj0*x4038))+((r02*x4030))+(((-1.0)*x4035*x4039))+((r01*x4041))+(((-1.0)*cj0*sj1*x4034)));
evalcond[5]=((((-1.0)*x4037*x4038))+((r11*x4041))+(((-1.0)*x4036*x4039))+((r12*x4030))+(((-1.0)*sj0*sj1*x4034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4043=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4043;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4044=((1.0)*cj5);
IkReal x4045=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4044)));
j4eval[0]=x4045;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4044))+((r21*sj5))))));
j4eval[2]=IKsign(x4045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4046=cj5*cj5;
IkReal x4047=r01*r01;
IkReal x4048=(cj5*r00);
IkReal x4049=(r01*sj5);
IkReal x4050=((((-2.0)*x4048*x4049))+x4047+(((-1.0)*x4046*x4047))+((x4046*(r00*r00)))+(r02*r02));
j4eval[0]=x4050;
j4eval[1]=IKsign(x4050);
j4eval[2]=((IKabs(r02))+(IKabs((x4049+(((-1.0)*x4048))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4051=cj5*cj5;
IkReal x4052=r01*r01;
IkReal x4053=(r01*sj5);
IkReal x4054=(cj5*r00);
CheckValue<IkReal> x4055=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4053*x4054))+(((-1.0)*x4051*x4052))+x4052+((x4051*(r00*r00)))+(r02*r02))),-1);
if(!x4055.valid){
continue;
}
CheckValue<IkReal> x4056 = IKatan2WithCheck(IkReal((x4053+(((-1.0)*x4054)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4055.value)))+(x4056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4057=IKcos(j4);
IkReal x4058=IKsin(j4);
IkReal x4059=(cj5*r00);
IkReal x4060=(cj5*r10);
IkReal x4061=(r21*sj5);
IkReal x4062=((1.0)*cj2);
IkReal x4063=(cj5*r20);
IkReal x4064=((1.0)*x4057);
IkReal x4065=((1.0)*x4058);
IkReal x4066=(sj5*x4058);
IkReal x4067=(sj5*x4057);
evalcond[0]=(((r02*x4058))+(((-1.0)*x4059*x4064))+((r01*x4067)));
evalcond[1]=((((-1.0)*x4063*x4065))+(((-1.0)*r22*x4064))+((x4058*x4061)));
evalcond[2]=((((-1.0)*x4060*x4065))+(((-1.0)*r12*x4064))+((r11*x4066)));
evalcond[3]=((-1.0)+(((-1.0)*x4059*x4065))+(((-1.0)*r02*x4064))+((r01*x4066)));
evalcond[4]=((((-1.0)*x4063*x4064))+((sj1*sj2))+((x4057*x4061))+(((-1.0)*cj1*x4062))+((r22*x4058)));
evalcond[5]=((((-1.0)*x4060*x4064))+(((-1.0)*cj1*sj2))+((r11*x4067))+((r12*x4058))+(((-1.0)*sj1*x4062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4068=((1.0)*cj5);
CheckValue<IkReal> x4069 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4068))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4069.valid){
continue;
}
CheckValue<IkReal> x4070=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4068)))),-1);
if(!x4070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4069.value)+(((1.5707963267949)*(x4070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4071=IKcos(j4);
IkReal x4072=IKsin(j4);
IkReal x4073=(cj5*r00);
IkReal x4074=(cj5*r10);
IkReal x4075=(r21*sj5);
IkReal x4076=((1.0)*cj2);
IkReal x4077=(cj5*r20);
IkReal x4078=((1.0)*x4071);
IkReal x4079=((1.0)*x4072);
IkReal x4080=(sj5*x4072);
IkReal x4081=(sj5*x4071);
evalcond[0]=(((r01*x4081))+((r02*x4072))+(((-1.0)*x4073*x4078)));
evalcond[1]=((((-1.0)*r22*x4078))+((x4072*x4075))+(((-1.0)*x4077*x4079)));
evalcond[2]=((((-1.0)*x4074*x4079))+(((-1.0)*r12*x4078))+((r11*x4080)));
evalcond[3]=((-1.0)+((r01*x4080))+(((-1.0)*r02*x4078))+(((-1.0)*x4073*x4079)));
evalcond[4]=(((r22*x4072))+((sj1*sj2))+(((-1.0)*cj1*x4076))+((x4071*x4075))+(((-1.0)*x4077*x4078)));
evalcond[5]=(((r12*x4072))+(((-1.0)*x4074*x4078))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4076))+((r11*x4081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4082=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4082.valid){
continue;
}
CheckValue<IkReal> x4083 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4082.value)))+(x4083.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4084=IKcos(j4);
IkReal x4085=IKsin(j4);
IkReal x4086=(cj5*r00);
IkReal x4087=(cj5*r10);
IkReal x4088=(r21*sj5);
IkReal x4089=((1.0)*cj2);
IkReal x4090=(cj5*r20);
IkReal x4091=((1.0)*x4084);
IkReal x4092=((1.0)*x4085);
IkReal x4093=(sj5*x4085);
IkReal x4094=(sj5*x4084);
evalcond[0]=(((r01*x4094))+(((-1.0)*x4086*x4091))+((r02*x4085)));
evalcond[1]=(((x4085*x4088))+(((-1.0)*x4090*x4092))+(((-1.0)*r22*x4091)));
evalcond[2]=((((-1.0)*r12*x4091))+((r11*x4093))+(((-1.0)*x4087*x4092)));
evalcond[3]=((-1.0)+((r01*x4093))+(((-1.0)*x4086*x4092))+(((-1.0)*r02*x4091)));
evalcond[4]=(((x4084*x4088))+(((-1.0)*x4090*x4091))+((sj1*sj2))+(((-1.0)*cj1*x4089))+((r22*x4085)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4094))+(((-1.0)*sj1*x4089))+((r12*x4085))+(((-1.0)*x4087*x4091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4095=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4095;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4096=((1.0)*cj5);
IkReal x4097=((((-1.0)*r21*x4096))+(((-1.0)*r20*sj5)));
j4eval[0]=x4097;
j4eval[1]=((IKabs(((((-1.0)*r10*x4096))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4097);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4098=cj5*cj5;
IkReal x4099=r01*r01;
IkReal x4100=(r01*sj5);
IkReal x4101=(cj5*r00);
IkReal x4102=(((x4098*x4099))+(((-1.0)*(r02*r02)))+(((-1.0)*x4098*(r00*r00)))+(((-1.0)*x4099))+(((2.0)*x4100*x4101)));
j4eval[0]=x4102;
j4eval[1]=IKsign(x4102);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4101))+x4100))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4103=cj5*cj5;
IkReal x4104=r01*r01;
IkReal x4105=(r01*sj5);
IkReal x4106=(cj5*r00);
CheckValue<IkReal> x4107 = IKatan2WithCheck(IkReal(((((-1.0)*x4106))+x4105)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4107.valid){
continue;
}
CheckValue<IkReal> x4108=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4104))+(((-1.0)*(r02*r02)))+((x4103*x4104))+(((2.0)*x4105*x4106))+(((-1.0)*x4103*(r00*r00))))),-1);
if(!x4108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4107.value)+(((1.5707963267949)*(x4108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4109=IKcos(j4);
IkReal x4110=IKsin(j4);
IkReal x4111=(cj5*r00);
IkReal x4112=(cj5*r10);
IkReal x4113=(r21*sj5);
IkReal x4114=(cj5*r20);
IkReal x4115=((1.0)*x4109);
IkReal x4116=((1.0)*x4110);
IkReal x4117=(sj5*x4110);
IkReal x4118=(sj5*x4109);
evalcond[0]=((((-1.0)*x4111*x4115))+((r02*x4110))+((r01*x4118)));
evalcond[1]=((((-1.0)*r22*x4115))+(((-1.0)*x4114*x4116))+((x4110*x4113)));
evalcond[2]=((((-1.0)*r12*x4115))+(((-1.0)*x4112*x4116))+((r11*x4117)));
evalcond[3]=((1.0)+(((-1.0)*x4111*x4116))+(((-1.0)*r02*x4115))+((r01*x4117)));
evalcond[4]=(((r12*x4110))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4112*x4115))+((r11*x4118)));
evalcond[5]=(((x4109*x4113))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4110))+(((-1.0)*x4114*x4115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4119=((1.0)*cj5);
CheckValue<IkReal> x4120 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4120.valid){
continue;
}
CheckValue<IkReal> x4121=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4119))+(((-1.0)*r20*sj5)))),-1);
if(!x4121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4120.value)+(((1.5707963267949)*(x4121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4122=IKcos(j4);
IkReal x4123=IKsin(j4);
IkReal x4124=(cj5*r00);
IkReal x4125=(cj5*r10);
IkReal x4126=(r21*sj5);
IkReal x4127=(cj5*r20);
IkReal x4128=((1.0)*x4122);
IkReal x4129=((1.0)*x4123);
IkReal x4130=(sj5*x4123);
IkReal x4131=(sj5*x4122);
evalcond[0]=((((-1.0)*x4124*x4128))+((r02*x4123))+((r01*x4131)));
evalcond[1]=((((-1.0)*r22*x4128))+(((-1.0)*x4127*x4129))+((x4123*x4126)));
evalcond[2]=((((-1.0)*r12*x4128))+((r11*x4130))+(((-1.0)*x4125*x4129)));
evalcond[3]=((1.0)+(((-1.0)*x4124*x4129))+((r01*x4130))+(((-1.0)*r02*x4128)));
evalcond[4]=(((r12*x4123))+((cj2*sj1))+((cj1*sj2))+((r11*x4131))+(((-1.0)*x4125*x4128)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4123))+(((-1.0)*x4127*x4128))+((x4122*x4126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4132 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4132.valid){
continue;
}
CheckValue<IkReal> x4133=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4132.value)+(((1.5707963267949)*(x4133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4134=IKcos(j4);
IkReal x4135=IKsin(j4);
IkReal x4136=(cj5*r00);
IkReal x4137=(cj5*r10);
IkReal x4138=(r21*sj5);
IkReal x4139=(cj5*r20);
IkReal x4140=((1.0)*x4134);
IkReal x4141=((1.0)*x4135);
IkReal x4142=(sj5*x4135);
IkReal x4143=(sj5*x4134);
evalcond[0]=(((r01*x4143))+(((-1.0)*x4136*x4140))+((r02*x4135)));
evalcond[1]=((((-1.0)*x4139*x4141))+((x4135*x4138))+(((-1.0)*r22*x4140)));
evalcond[2]=(((r11*x4142))+(((-1.0)*r12*x4140))+(((-1.0)*x4137*x4141)));
evalcond[3]=((1.0)+((r01*x4142))+(((-1.0)*r02*x4140))+(((-1.0)*x4136*x4141)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4143))+((r12*x4135))+(((-1.0)*x4137*x4140)));
evalcond[5]=(((r22*x4135))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4134*x4138))+(((-1.0)*x4139*x4140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4144=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4144);
rxp1_1=(px*r21);
rxp1_2=(r11*x4144);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4145=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4145);
rxp1_1=(px*r21);
rxp1_2=(r11*x4145);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4146=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4146);
rxp1_1=(px*r21);
rxp1_2=(r11*x4146);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4149=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4149.valid){
continue;
}
IkReal x4147=x4149.value;
IkReal x4148=(sj0*x4147);
cj4array[0]=(((cj1*sj2*x4148))+((cj2*sj1*x4148)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4150=IKsin(j4);
IkReal x4151=IKcos(j4);
IkReal x4152=(r21*sj5);
IkReal x4153=((1.0)*cj5*r20);
evalcond[0]=(r02*x4150);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4151)));
evalcond[2]=(((x4150*x4152))+(((-1.0)*x4150*x4153)));
evalcond[3]=((((-1.0)*cj5*r10*x4150))+((r11*sj5*x4150)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4151*x4153))+((x4151*x4152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4155=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4155.valid){
continue;
}
IkReal x4154=x4155.value;
cj4array[0]=(((cj1*cj2*x4154))+(((-1.0)*sj1*sj2*x4154)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4156=IKsin(j4);
IkReal x4157=IKcos(j4);
IkReal x4158=((1.0)*sj0);
IkReal x4159=((1.0)*cj5);
IkReal x4160=(sj5*x4156);
evalcond[0]=(r02*x4156);
evalcond[1]=((((-1.0)*x4158))+(((-1.0)*r02*x4157)));
evalcond[2]=((((-1.0)*r20*x4156*x4159))+((r21*x4160)));
evalcond[3]=((((-1.0)*r10*x4156*x4159))+((r11*x4160)));
evalcond[4]=(((r11*sj5*x4157))+(((-1.0)*cj1*sj2*x4158))+(((-1.0)*r10*x4157*x4159))+(((-1.0)*cj2*sj1*x4158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4161=IKPowWithIntegerCheck(r02,-1);
if(!x4161.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4161.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4162=IKsin(j4);
IkReal x4163=IKcos(j4);
IkReal x4164=((1.0)*cj1);
IkReal x4165=(r21*sj5);
IkReal x4166=((1.0)*cj5);
IkReal x4167=(r11*sj5);
evalcond[0]=(r02*x4162);
evalcond[1]=((((-1.0)*r20*x4162*x4166))+((x4162*x4165)));
evalcond[2]=((((-1.0)*r10*x4162*x4166))+((x4162*x4167)));
evalcond[3]=((((-1.0)*cj2*x4164))+((sj1*sj2))+(((-1.0)*r20*x4163*x4166))+((x4163*x4165)));
evalcond[4]=((((-1.0)*sj0*sj2*x4164))+(((-1.0)*cj2*sj0*sj1))+((x4163*x4167))+(((-1.0)*r10*x4163*x4166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4168=((1.0)*sj0);
IkReal x4169=((1.0)*cj0);
CheckValue<IkReal> x4170 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4169))+(((-1.0)*r12*x4168)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4169))+(((-1.0)*r11*sj5*x4168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4170.valid){
continue;
}
CheckValue<IkReal> x4171=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4170.value)+(((1.5707963267949)*(x4171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4172=IKsin(j4);
IkReal x4173=IKcos(j4);
IkReal x4174=(cj5*r00);
IkReal x4175=(cj5*r10);
IkReal x4176=(r21*sj5);
IkReal x4177=((1.0)*cj2);
IkReal x4178=((1.0)*sj0);
IkReal x4179=(cj1*sj2);
IkReal x4180=(cj5*r20);
IkReal x4181=((1.0)*x4173);
IkReal x4182=((1.0)*x4172);
IkReal x4183=(sj5*x4172);
IkReal x4184=(sj5*x4173);
evalcond[0]=((((-1.0)*x4180*x4182))+(((-1.0)*r22*x4181))+((x4172*x4176)));
evalcond[1]=((((-1.0)*r12*x4181))+cj0+((r11*x4183))+(((-1.0)*x4175*x4182)));
evalcond[2]=((((-1.0)*x4178))+(((-1.0)*x4174*x4182))+(((-1.0)*r02*x4181))+((r01*x4183)));
evalcond[3]=((((-1.0)*cj1*x4177))+((x4173*x4176))+(((-1.0)*x4180*x4181))+((r22*x4172))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x4174*x4181))+(((-1.0)*cj0*x4179))+((r01*x4184))+((r02*x4172))+(((-1.0)*cj0*sj1*x4177)));
evalcond[5]=(((r12*x4172))+((r11*x4184))+(((-1.0)*x4175*x4181))+(((-1.0)*x4178*x4179))+(((-1.0)*sj0*sj1*x4177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4185=((1.0)*cj5);
CheckValue<IkReal> x4186=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4185))+(((-1.0)*r10*sj5)))),-1);
if(!x4186.valid){
continue;
}
CheckValue<IkReal> x4187 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4185))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4186.value)))+(x4187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4188=IKsin(j4);
IkReal x4189=IKcos(j4);
IkReal x4190=(cj5*r00);
IkReal x4191=(cj5*r10);
IkReal x4192=(r21*sj5);
IkReal x4193=((1.0)*cj2);
IkReal x4194=((1.0)*sj0);
IkReal x4195=(cj1*sj2);
IkReal x4196=(cj5*r20);
IkReal x4197=((1.0)*x4189);
IkReal x4198=((1.0)*x4188);
IkReal x4199=(sj5*x4188);
IkReal x4200=(sj5*x4189);
evalcond[0]=((((-1.0)*x4196*x4198))+((x4188*x4192))+(((-1.0)*r22*x4197)));
evalcond[1]=((((-1.0)*r12*x4197))+((r11*x4199))+cj0+(((-1.0)*x4191*x4198)));
evalcond[2]=((((-1.0)*x4194))+(((-1.0)*r02*x4197))+((r01*x4199))+(((-1.0)*x4190*x4198)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4196*x4197))+((r22*x4188))+((x4189*x4192))+(((-1.0)*cj1*x4193)));
evalcond[4]=(((r02*x4188))+(((-1.0)*cj0*sj1*x4193))+(((-1.0)*cj0*x4195))+((r01*x4200))+(((-1.0)*x4190*x4197)));
evalcond[5]=(((r12*x4188))+((r11*x4200))+(((-1.0)*x4194*x4195))+(((-1.0)*x4191*x4197))+(((-1.0)*sj0*sj1*x4193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4201=((1.0)*cj5);
CheckValue<IkReal> x4202 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4202.valid){
continue;
}
CheckValue<IkReal> x4203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4201))+(((-1.0)*r00*sj5)))),-1);
if(!x4203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4202.value)+(((1.5707963267949)*(x4203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4204=IKsin(j4);
IkReal x4205=IKcos(j4);
IkReal x4206=(cj5*r00);
IkReal x4207=(cj5*r10);
IkReal x4208=(r21*sj5);
IkReal x4209=((1.0)*cj2);
IkReal x4210=((1.0)*sj0);
IkReal x4211=(cj1*sj2);
IkReal x4212=(cj5*r20);
IkReal x4213=((1.0)*x4205);
IkReal x4214=((1.0)*x4204);
IkReal x4215=(sj5*x4204);
IkReal x4216=(sj5*x4205);
evalcond[0]=(((x4204*x4208))+(((-1.0)*x4212*x4214))+(((-1.0)*r22*x4213)));
evalcond[1]=(cj0+((r11*x4215))+(((-1.0)*r12*x4213))+(((-1.0)*x4207*x4214)));
evalcond[2]=((((-1.0)*r02*x4213))+(((-1.0)*x4206*x4214))+((r01*x4215))+(((-1.0)*x4210)));
evalcond[3]=(((r22*x4204))+((x4205*x4208))+((sj1*sj2))+(((-1.0)*x4212*x4213))+(((-1.0)*cj1*x4209)));
evalcond[4]=((((-1.0)*cj0*x4211))+((r02*x4204))+(((-1.0)*cj0*sj1*x4209))+(((-1.0)*x4206*x4213))+((r01*x4216)));
evalcond[5]=((((-1.0)*x4210*x4211))+((r11*x4216))+(((-1.0)*x4207*x4213))+(((-1.0)*sj0*sj1*x4209))+((r12*x4204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4217=r21*r21;
IkReal x4218=cj5*cj5;
IkReal x4219=(sj1*sj2);
IkReal x4220=(r21*sj5);
IkReal x4221=(cj1*cj2);
IkReal x4222=(cj5*r20);
CheckValue<IkReal> x4223 = IKatan2WithCheck(IkReal((((r22*x4219))+(((-1.0)*r22*x4221)))),IkReal(((((-1.0)*x4219*x4222))+(((-1.0)*x4220*x4221))+((x4219*x4220))+((x4221*x4222)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4223.valid){
continue;
}
CheckValue<IkReal> x4224=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4218*(r20*r20)))+((x4217*x4218))+(((2.0)*x4220*x4222))+(((-1.0)*(r22*r22)))+(((-1.0)*x4217)))),-1);
if(!x4224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4223.value)+(((1.5707963267949)*(x4224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4225=IKsin(j4);
IkReal x4226=IKcos(j4);
IkReal x4227=(r21*sj5);
IkReal x4228=(cj5*r20);
IkReal x4229=((1.0)*x4226);
evalcond[0]=((((-1.0)*r22*x4229))+((x4225*x4227))+(((-1.0)*x4225*x4228)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4225))+((x4226*x4227))+(((-1.0)*x4228*x4229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4230=(cj5*sj4);
IkReal x4231=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x4231))+(((-1.0)*r00*x4230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4230))+(((-1.0)*r11*x4231))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x4231))+(((-1.0)*r00*x4230))))+IKsqr((((r10*x4230))+(((-1.0)*r11*x4231))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x4231))+(((-1.0)*r00*x4230))), (((r10*x4230))+(((-1.0)*r11*x4231))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4232=IKcos(j0);
IkReal x4233=IKsin(j0);
IkReal x4234=((1.0)*cj1);
IkReal x4235=((0.39225)*sj1);
IkReal x4236=(r11*sj5);
IkReal x4237=(cj5*r11);
IkReal x4238=((1.0)*sj5);
IkReal x4239=((1.0)*sj1);
IkReal x4240=((0.09465)*sj5);
IkReal x4241=((1.0)*cj5);
IkReal x4242=((0.425)*cj1);
IkReal x4243=((1.0)*cj4);
IkReal x4244=(r01*sj5);
IkReal x4245=(sj2*x4232);
IkReal x4246=(sj2*x4233);
IkReal x4247=(cj4*x4241);
IkReal x4248=((0.39225)*cj1*cj2);
IkReal x4249=(cj2*x4232);
IkReal x4250=(cj2*x4233);
evalcond[0]=(((sj4*x4236))+(((-1.0)*r12*x4243))+x4232+(((-1.0)*r10*sj4*x4241)));
evalcond[1]=(((sj4*x4244))+(((-1.0)*x4233))+(((-1.0)*r02*x4243))+(((-1.0)*r00*sj4*x4241)));
evalcond[2]=((((-1.0)*r01*x4241))+((sj1*x4245))+(((-1.0)*r00*x4238))+(((-1.0)*x4234*x4249)));
evalcond[3]=((((-1.0)*x4234*x4250))+((sj1*x4246))+(((-1.0)*x4237))+(((-1.0)*r10*x4238)));
evalcond[4]=(((cj4*x4244))+((r02*sj4))+(((-1.0)*x4239*x4249))+(((-1.0)*x4234*x4245))+(((-1.0)*r00*x4247)));
evalcond[5]=(((cj4*x4236))+(((-1.0)*x4239*x4250))+((r12*sj4))+(((-1.0)*r10*x4247))+(((-1.0)*x4234*x4246)));
evalcond[6]=(((x4232*x4242))+((x4232*x4248))+(((-0.09465)*cj5*r01))+(((-0.10915)*x4233))+(((-1.0)*x4235*x4245))+(((-1.0)*px))+(((-1.0)*r00*x4240)));
evalcond[7]=((((-0.09465)*x4237))+(((0.10915)*x4232))+(((-1.0)*x4235*x4246))+(((-1.0)*py))+(((-1.0)*r10*x4240))+((x4233*x4242))+((x4233*x4248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4251 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4251.valid){
continue;
}
CheckValue<IkReal> x4252=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4252.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4251.value)+(((1.5707963267949)*(x4252.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4253=IKcos(j0);
IkReal x4254=IKsin(j0);
IkReal x4255=(cj5*r11);
IkReal x4256=(cj5*r01);
IkReal x4257=((1.0)*sj5);
IkReal x4258=((0.09465)*sj5);
IkReal x4259=(sj1*sj2);
IkReal x4260=((0.39225)*cj2);
IkReal x4261=((1.0)*cj2);
IkReal x4262=((0.39225)*x4259);
IkReal x4263=(cj1*x4253);
IkReal x4264=(cj1*x4254);
evalcond[0]=(((x4253*x4259))+(((-1.0)*x4261*x4263))+(((-1.0)*x4256))+(((-1.0)*r00*x4257)));
evalcond[1]=((((-1.0)*x4261*x4264))+(((-1.0)*x4255))+(((-1.0)*r10*x4257))+((x4254*x4259)));
evalcond[2]=((((-0.10915)*x4254))+(((-1.0)*px))+(((-0.09465)*x4256))+(((0.425)*x4263))+(((-1.0)*r00*x4258))+((x4260*x4263))+(((-1.0)*x4253*x4262)));
evalcond[3]=((((-1.0)*py))+(((-0.09465)*x4255))+(((0.425)*x4264))+(((-1.0)*x4254*x4262))+(((0.10915)*x4253))+((x4260*x4264))+(((-1.0)*r10*x4258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4265=((1.0)*cj5);
IkReal x4266=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4265)));
j4eval[0]=x4266;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4265)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4267=((1.0)*cj5);
IkReal x4268=((((-1.0)*r11*x4267))+(((-1.0)*r10*sj5)));
j4eval[0]=x4268;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4267))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4269=((1.0)*sj0);
IkReal x4270=((1.0)*cj0);
IkReal x4271=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4271;
j4eval[1]=((IKabs(((((-1.0)*r12*x4269))+(((-1.0)*r02*x4270)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4270))+(((-1.0)*r11*sj5*x4269))))));
j4eval[2]=IKsign(x4271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4272=((-1.0)*r20);
IkReal x4274 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4274)==0){
continue;
}
IkReal x4273=pow(x4274,-0.5);
CheckValue<IkReal> x4275 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4272),IKFAST_ATAN2_MAGTHRESH);
if(!x4275.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4275.value));
IkReal gconst97=(r21*x4273);
IkReal gconst98=(x4272*x4273);
CheckValue<IkReal> x4276 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4276.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4276.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4277=((-1.0)*r20);
IkReal x4278=x4273;
CheckValue<IkReal> x4280 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4277),IKFAST_ATAN2_MAGTHRESH);
if(!x4280.valid){
continue;
}
IkReal x4279=((-1.0)*(x4280.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4279;
IkReal gconst96=x4279;
IkReal gconst97=(r21*x4278);
IkReal gconst98=(x4277*x4278);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4281=((-1.0)*r20);
IkReal x4282=x4273;
CheckValue<IkReal> x4284 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4281),IKFAST_ATAN2_MAGTHRESH);
if(!x4284.valid){
continue;
}
IkReal x4283=((-1.0)*(x4284.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4283;
IkReal gconst96=x4283;
IkReal gconst97=(r21*x4282);
IkReal gconst98=(x4281*x4282);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4285=((-1.0)*r20);
IkReal x4286=x4273;
CheckValue<IkReal> x4288 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4285),IKFAST_ATAN2_MAGTHRESH);
if(!x4288.valid){
continue;
}
IkReal x4287=((-1.0)*(x4288.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4287;
IkReal gconst96=x4287;
IkReal gconst97=(r21*x4286);
IkReal gconst98=(x4285*x4286);
IkReal x4289=((1.0)*(r22*r22));
CheckValue<IkReal> x4293=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4289))),-1);
if(!x4293.valid){
continue;
}
IkReal x4290=x4293.value;
IkReal x4291=((1.0)*x4290);
IkReal x4292=((((-1.0)*x4289))+(((-1.0)*x4291*(r21*r21*r21*r21)))+(((-2.0)*x4290*(r20*r20)*(r21*r21)))+(((-1.0)*x4291*(r20*r20*r20*r20))));
j4eval[0]=x4292;
j4eval[1]=IKsign(x4292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4294=(cj1*cj2);
IkReal x4295=(gconst98*r20);
IkReal x4296=(sj1*sj2);
IkReal x4297=(gconst97*r21);
CheckValue<IkReal> x4298=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4297*x4297)))+(((-1.0)*(x4295*x4295)))+(((-1.0)*(r22*r22)))+(((2.0)*x4295*x4297)))),-1);
if(!x4298.valid){
continue;
}
CheckValue<IkReal> x4299 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4294))+((r22*x4296)))),IkReal(((((-1.0)*x4295*x4296))+((x4296*x4297))+((x4294*x4295))+(((-1.0)*x4294*x4297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4298.value)))+(x4299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4300=IKsin(j4);
IkReal x4301=IKcos(j4);
IkReal x4302=(gconst98*r10);
IkReal x4303=(gconst97*r21);
IkReal x4304=(gconst98*r20);
IkReal x4305=((1.0)*cj2);
IkReal x4306=((1.0)*sj0);
IkReal x4307=(gconst98*r00);
IkReal x4308=(cj1*sj2);
IkReal x4309=((1.0)*x4301);
IkReal x4310=((1.0)*x4300);
IkReal x4311=(gconst97*x4300);
IkReal x4312=(gconst97*x4301);
evalcond[0]=(((x4300*x4303))+(((-1.0)*r22*x4309))+(((-1.0)*x4304*x4310)));
evalcond[1]=((((-1.0)*r12*x4309))+cj0+((r11*x4311))+(((-1.0)*x4302*x4310)));
evalcond[2]=((((-1.0)*x4307*x4310))+((r01*x4311))+(((-1.0)*r02*x4309))+(((-1.0)*x4306)));
evalcond[3]=(((x4301*x4303))+((r22*x4300))+((sj1*sj2))+(((-1.0)*cj1*x4305))+(((-1.0)*x4304*x4309)));
evalcond[4]=((((-1.0)*cj0*sj1*x4305))+((r02*x4300))+((r01*x4312))+(((-1.0)*cj0*x4308))+(((-1.0)*x4307*x4309)));
evalcond[5]=(((r12*x4300))+(((-1.0)*sj0*sj1*x4305))+((r11*x4312))+(((-1.0)*x4306*x4308))+(((-1.0)*x4302*x4309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4313=((1.0)*gconst98);
CheckValue<IkReal> x4314=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4313))+(((-1.0)*gconst97*r10)))),-1);
if(!x4314.valid){
continue;
}
CheckValue<IkReal> x4315 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4314.value)))+(x4315.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4316=IKsin(j4);
IkReal x4317=IKcos(j4);
IkReal x4318=(gconst98*r10);
IkReal x4319=(gconst97*r21);
IkReal x4320=(gconst98*r20);
IkReal x4321=((1.0)*cj2);
IkReal x4322=((1.0)*sj0);
IkReal x4323=(gconst98*r00);
IkReal x4324=(cj1*sj2);
IkReal x4325=((1.0)*x4317);
IkReal x4326=((1.0)*x4316);
IkReal x4327=(gconst97*x4316);
IkReal x4328=(gconst97*x4317);
evalcond[0]=(((x4316*x4319))+(((-1.0)*r22*x4325))+(((-1.0)*x4320*x4326)));
evalcond[1]=(cj0+(((-1.0)*r12*x4325))+((r11*x4327))+(((-1.0)*x4318*x4326)));
evalcond[2]=((((-1.0)*r02*x4325))+(((-1.0)*x4322))+(((-1.0)*x4323*x4326))+((r01*x4327)));
evalcond[3]=(((x4317*x4319))+((sj1*sj2))+(((-1.0)*x4320*x4325))+(((-1.0)*cj1*x4321))+((r22*x4316)));
evalcond[4]=((((-1.0)*x4323*x4325))+(((-1.0)*cj0*sj1*x4321))+(((-1.0)*cj0*x4324))+((r02*x4316))+((r01*x4328)));
evalcond[5]=(((r12*x4316))+(((-1.0)*sj0*sj1*x4321))+(((-1.0)*x4322*x4324))+((r11*x4328))+(((-1.0)*x4318*x4325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4329=((1.0)*gconst98);
CheckValue<IkReal> x4330 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4329))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4330.valid){
continue;
}
CheckValue<IkReal> x4331=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4329))+(((-1.0)*gconst97*r00)))),-1);
if(!x4331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4330.value)+(((1.5707963267949)*(x4331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4332=IKsin(j4);
IkReal x4333=IKcos(j4);
IkReal x4334=(gconst98*r10);
IkReal x4335=(gconst97*r21);
IkReal x4336=(gconst98*r20);
IkReal x4337=((1.0)*cj2);
IkReal x4338=((1.0)*sj0);
IkReal x4339=(gconst98*r00);
IkReal x4340=(cj1*sj2);
IkReal x4341=((1.0)*x4333);
IkReal x4342=((1.0)*x4332);
IkReal x4343=(gconst97*x4332);
IkReal x4344=(gconst97*x4333);
evalcond[0]=(((x4332*x4335))+(((-1.0)*r22*x4341))+(((-1.0)*x4336*x4342)));
evalcond[1]=(cj0+(((-1.0)*r12*x4341))+((r11*x4343))+(((-1.0)*x4334*x4342)));
evalcond[2]=((((-1.0)*r02*x4341))+(((-1.0)*x4339*x4342))+(((-1.0)*x4338))+((r01*x4343)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4337))+((x4333*x4335))+((r22*x4332))+(((-1.0)*x4336*x4341)));
evalcond[4]=((((-1.0)*x4339*x4341))+(((-1.0)*cj0*sj1*x4337))+((r02*x4332))+(((-1.0)*cj0*x4340))+((r01*x4344)));
evalcond[5]=((((-1.0)*sj0*sj1*x4337))+((r12*x4332))+(((-1.0)*x4338*x4340))+((r11*x4344))+(((-1.0)*x4334*x4341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4345=((-1.0)*r21);
IkReal x4347 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4347)==0){
continue;
}
IkReal x4346=pow(x4347,-0.5);
CheckValue<IkReal> x4348 = IKatan2WithCheck(IkReal(x4345),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4348.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4348.value))));
IkReal gconst100=(x4345*x4346);
IkReal gconst101=((1.0)*r20*x4346);
CheckValue<IkReal> x4349 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4349.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4349.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4350=((-1.0)*r21);
CheckValue<IkReal> x4353 = IKatan2WithCheck(IkReal(x4350),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4353.valid){
continue;
}
IkReal x4351=((1.0)*(x4353.value));
IkReal x4352=x4346;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4351)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4351)));
IkReal gconst100=(x4350*x4352);
IkReal gconst101=((1.0)*r20*x4352);
IkReal x4354=r22*r22;
IkReal x4355=((1.0)*x4354);
CheckValue<IkReal> x4359=IKPowWithIntegerCheck(((-1.0)+x4354),-1);
if(!x4359.valid){
continue;
}
IkReal x4356=x4359.value;
if((((1.0)+(((-1.0)*x4355)))) < -0.00001)
continue;
IkReal x4357=IKsqrt(((1.0)+(((-1.0)*x4355))));
IkReal x4358=(cj0*x4356*x4357);
j4eval[0]=((IKabs((x4358+(((-1.0)*x4355*x4358)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4360=((-1.0)*r21);
CheckValue<IkReal> x4363 = IKatan2WithCheck(IkReal(x4360),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4363.valid){
continue;
}
IkReal x4361=((1.0)*(x4363.value));
IkReal x4362=x4346;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4361)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4361)));
IkReal gconst100=(x4360*x4362);
IkReal gconst101=((1.0)*r20*x4362);
IkReal x4364=r22*r22;
IkReal x4365=((1.0)*x4364);
CheckValue<IkReal> x4369=IKPowWithIntegerCheck(((-1.0)+x4364),-1);
if(!x4369.valid){
continue;
}
IkReal x4366=x4369.value;
if((((1.0)+(((-1.0)*x4365)))) < -0.00001)
continue;
IkReal x4367=IKsqrt(((1.0)+(((-1.0)*x4365))));
IkReal x4368=(sj0*x4366*x4367);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4365*x4368))+x4368))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4370=((-1.0)*r21);
CheckValue<IkReal> x4373 = IKatan2WithCheck(IkReal(x4370),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4373.valid){
continue;
}
IkReal x4371=((1.0)*(x4373.value));
IkReal x4372=x4346;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4371)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4371)));
IkReal gconst100=(x4370*x4372);
IkReal gconst101=((1.0)*r20*x4372);
IkReal x4374=r22*r22;
IkReal x4375=(r12*sj0);
IkReal x4376=(cj0*r02);
CheckValue<IkReal> x4380=IKPowWithIntegerCheck(((-1.0)+x4374),-1);
if(!x4380.valid){
continue;
}
IkReal x4377=x4380.value;
if((((1.0)+(((-1.0)*x4374)))) < -0.00001)
continue;
IkReal x4378=IKsqrt(((1.0)+(((-1.0)*x4374))));
IkReal x4379=(r22*x4377*x4378);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4376*x4379))+((x4375*x4379)))))+(IKabs(((((-1.0)*x4375))+(((-1.0)*x4376))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4381=((1.0)*sj0);
IkReal x4382=((1.0)*gconst100);
CheckValue<IkReal> x4383 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4381))+(((-1.0)*cj0*r02)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4381))+(((-1.0)*cj0*r01*x4382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4383.valid){
continue;
}
CheckValue<IkReal> x4384=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x4382)))),-1);
if(!x4384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4383.value)+(((1.5707963267949)*(x4384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4385=IKsin(j4);
IkReal x4386=IKcos(j4);
IkReal x4387=(gconst101*r20);
IkReal x4388=(gconst101*r10);
IkReal x4389=((1.0)*cj2);
IkReal x4390=(gconst101*r00);
IkReal x4391=((1.0)*sj0);
IkReal x4392=(cj1*sj2);
IkReal x4393=((1.0)*x4386);
IkReal x4394=((1.0)*x4385);
IkReal x4395=(gconst100*x4385);
IkReal x4396=(gconst100*x4386);
evalcond[0]=((((-1.0)*x4387*x4394))+(((-1.0)*r22*x4393))+((r21*x4395)));
evalcond[1]=((((-1.0)*r12*x4393))+cj0+(((-1.0)*x4388*x4394))+((r11*x4395)));
evalcond[2]=((((-1.0)*x4391))+((r01*x4395))+(((-1.0)*r02*x4393))+(((-1.0)*x4390*x4394)));
evalcond[3]=((((-1.0)*x4387*x4393))+((r22*x4385))+((sj1*sj2))+((r21*x4396))+(((-1.0)*cj1*x4389)));
evalcond[4]=(((r01*x4396))+(((-1.0)*cj0*sj1*x4389))+((r02*x4385))+(((-1.0)*x4390*x4393))+(((-1.0)*cj0*x4392)));
evalcond[5]=((((-1.0)*x4388*x4393))+(((-1.0)*x4391*x4392))+((r11*x4396))+((r12*x4385))+(((-1.0)*sj0*sj1*x4389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4397=((1.0)*gconst101);
CheckValue<IkReal> x4398 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4397))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4398.valid){
continue;
}
CheckValue<IkReal> x4399=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4397))+(((-1.0)*gconst100*r10)))),-1);
if(!x4399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4398.value)+(((1.5707963267949)*(x4399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4400=IKsin(j4);
IkReal x4401=IKcos(j4);
IkReal x4402=(gconst101*r20);
IkReal x4403=(gconst101*r10);
IkReal x4404=((1.0)*cj2);
IkReal x4405=(gconst101*r00);
IkReal x4406=((1.0)*sj0);
IkReal x4407=(cj1*sj2);
IkReal x4408=((1.0)*x4401);
IkReal x4409=((1.0)*x4400);
IkReal x4410=(gconst100*x4400);
IkReal x4411=(gconst100*x4401);
evalcond[0]=(((r21*x4410))+(((-1.0)*x4402*x4409))+(((-1.0)*r22*x4408)));
evalcond[1]=(((r11*x4410))+cj0+(((-1.0)*x4403*x4409))+(((-1.0)*r12*x4408)));
evalcond[2]=(((r01*x4410))+(((-1.0)*r02*x4408))+(((-1.0)*x4406))+(((-1.0)*x4405*x4409)));
evalcond[3]=(((r21*x4411))+((r22*x4400))+((sj1*sj2))+(((-1.0)*x4402*x4408))+(((-1.0)*cj1*x4404)));
evalcond[4]=((((-1.0)*cj0*x4407))+((r01*x4411))+(((-1.0)*x4405*x4408))+((r02*x4400))+(((-1.0)*cj0*sj1*x4404)));
evalcond[5]=(((r11*x4411))+(((-1.0)*x4403*x4408))+((r12*x4400))+(((-1.0)*x4406*x4407))+(((-1.0)*sj0*sj1*x4404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4412=((1.0)*gconst101);
CheckValue<IkReal> x4413 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4413.valid){
continue;
}
CheckValue<IkReal> x4414=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4412)))),-1);
if(!x4414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4413.value)+(((1.5707963267949)*(x4414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4415=IKsin(j4);
IkReal x4416=IKcos(j4);
IkReal x4417=(gconst101*r20);
IkReal x4418=(gconst101*r10);
IkReal x4419=((1.0)*cj2);
IkReal x4420=(gconst101*r00);
IkReal x4421=((1.0)*sj0);
IkReal x4422=(cj1*sj2);
IkReal x4423=((1.0)*x4416);
IkReal x4424=((1.0)*x4415);
IkReal x4425=(gconst100*x4415);
IkReal x4426=(gconst100*x4416);
evalcond[0]=((((-1.0)*x4417*x4424))+(((-1.0)*r22*x4423))+((r21*x4425)));
evalcond[1]=(cj0+(((-1.0)*r12*x4423))+(((-1.0)*x4418*x4424))+((r11*x4425)));
evalcond[2]=((((-1.0)*x4421))+(((-1.0)*x4420*x4424))+((r01*x4425))+(((-1.0)*r02*x4423)));
evalcond[3]=(((r22*x4415))+(((-1.0)*x4417*x4423))+((sj1*sj2))+((r21*x4426))+(((-1.0)*cj1*x4419)));
evalcond[4]=((((-1.0)*cj0*sj1*x4419))+(((-1.0)*x4420*x4423))+(((-1.0)*cj0*x4422))+((r01*x4426))+((r02*x4415)));
evalcond[5]=(((r12*x4415))+(((-1.0)*x4421*x4422))+(((-1.0)*sj0*sj1*x4419))+(((-1.0)*x4418*x4423))+((r11*x4426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4427=((-1.0)*r10);
IkReal x4429 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4429)==0){
continue;
}
IkReal x4428=pow(x4429,-0.5);
CheckValue<IkReal> x4430 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4427),IKFAST_ATAN2_MAGTHRESH);
if(!x4430.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4430.value));
IkReal gconst103=(r11*x4428);
IkReal gconst104=(x4427*x4428);
CheckValue<IkReal> x4431 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4431.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4431.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4432=((-1.0)*r10);
IkReal x4433=x4428;
CheckValue<IkReal> x4435 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4432),IKFAST_ATAN2_MAGTHRESH);
if(!x4435.valid){
continue;
}
IkReal x4434=((-1.0)*(x4435.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4434;
IkReal gconst102=x4434;
IkReal gconst103=(r11*x4433);
IkReal gconst104=(x4432*x4433);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4436=((1.0)*sj0);
IkReal x4437=((1.0)*gconst103);
CheckValue<IkReal> x4438=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4437)))),-1);
if(!x4438.valid){
continue;
}
CheckValue<IkReal> x4439 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4436)))),IkReal(((((-1.0)*gconst103*r11*x4436))+(((-1.0)*cj0*r01*x4437))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4438.value)))+(x4439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4440=IKsin(j4);
IkReal x4441=IKcos(j4);
IkReal x4442=(gconst103*r11);
IkReal x4443=((1.0)*cj2);
IkReal x4444=((1.0)*sj0);
IkReal x4445=(cj1*sj2);
IkReal x4446=((1.0)*x4441);
IkReal x4447=(gconst103*x4441);
IkReal x4448=(gconst103*x4440);
IkReal x4449=((1.0)*gconst104*x4440);
evalcond[0]=(((r21*x4448))+(((-1.0)*r22*x4446))+(((-1.0)*r20*x4449)));
evalcond[1]=(cj0+(((-1.0)*r12*x4446))+((x4440*x4442))+(((-1.0)*r10*x4449)));
evalcond[2]=((((-1.0)*x4444))+((r01*x4448))+(((-1.0)*r02*x4446))+(((-1.0)*r00*x4449)));
evalcond[3]=(((r21*x4447))+((sj1*sj2))+(((-1.0)*cj1*x4443))+((r22*x4440))+(((-1.0)*gconst104*r20*x4446)));
evalcond[4]=((((-1.0)*gconst104*r00*x4446))+((r01*x4447))+(((-1.0)*cj0*sj1*x4443))+(((-1.0)*cj0*x4445))+((r02*x4440)));
evalcond[5]=((((-1.0)*x4444*x4445))+((x4441*x4442))+(((-1.0)*gconst104*r10*x4446))+((r12*x4440))+(((-1.0)*sj0*sj1*x4443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4450=((1.0)*gconst104);
CheckValue<IkReal> x4451 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4450))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4451.valid){
continue;
}
CheckValue<IkReal> x4452=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4450)))),-1);
if(!x4452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4451.value)+(((1.5707963267949)*(x4452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4453=IKsin(j4);
IkReal x4454=IKcos(j4);
IkReal x4455=(gconst103*r11);
IkReal x4456=((1.0)*cj2);
IkReal x4457=((1.0)*sj0);
IkReal x4458=(cj1*sj2);
IkReal x4459=((1.0)*x4454);
IkReal x4460=(gconst103*x4454);
IkReal x4461=(gconst103*x4453);
IkReal x4462=((1.0)*gconst104*x4453);
evalcond[0]=((((-1.0)*r22*x4459))+((r21*x4461))+(((-1.0)*r20*x4462)));
evalcond[1]=(cj0+((x4453*x4455))+(((-1.0)*r12*x4459))+(((-1.0)*r10*x4462)));
evalcond[2]=((((-1.0)*x4457))+(((-1.0)*r02*x4459))+((r01*x4461))+(((-1.0)*r00*x4462)));
evalcond[3]=((((-1.0)*gconst104*r20*x4459))+((sj1*sj2))+(((-1.0)*cj1*x4456))+((r21*x4460))+((r22*x4453)));
evalcond[4]=((((-1.0)*gconst104*r00*x4459))+(((-1.0)*cj0*sj1*x4456))+((r01*x4460))+(((-1.0)*cj0*x4458))+((r02*x4453)));
evalcond[5]=((((-1.0)*x4457*x4458))+(((-1.0)*gconst104*r10*x4459))+((r12*x4453))+(((-1.0)*sj0*sj1*x4456))+((x4454*x4455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4463=((-1.0)*r11);
IkReal x4465 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4465)==0){
continue;
}
IkReal x4464=pow(x4465,-0.5);
CheckValue<IkReal> x4466 = IKatan2WithCheck(IkReal(x4463),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4466.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4466.value))));
IkReal gconst106=(x4463*x4464);
IkReal gconst107=((1.0)*r10*x4464);
CheckValue<IkReal> x4467 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4467.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4467.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4468=((-1.0)*r11);
CheckValue<IkReal> x4471 = IKatan2WithCheck(IkReal(x4468),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4471.valid){
continue;
}
IkReal x4469=((1.0)*(x4471.value));
IkReal x4470=x4464;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4469)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4469)));
IkReal gconst106=(x4468*x4470);
IkReal gconst107=((1.0)*r10*x4470);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4472=((-1.0)*r11);
CheckValue<IkReal> x4475 = IKatan2WithCheck(IkReal(x4472),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4475.valid){
continue;
}
IkReal x4473=((1.0)*(x4475.value));
IkReal x4474=x4464;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4473)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4473)));
IkReal gconst106=(x4472*x4474);
IkReal gconst107=((1.0)*r10*x4474);
IkReal x4476=r12*r12;
IkReal x4477=((1.0)*sj0);
IkReal x4478=(cj0*r02);
IkReal x4479=x4464;
j4eval[0]=((IKabs((((sj0*x4476*x4479))+(((-1.0)*x4477*x4479))+((r12*x4478*x4479)))))+(IKabs(((((-1.0)*r12*x4477))+(((-1.0)*x4478))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4480=((-1.0)*r11);
CheckValue<IkReal> x4483 = IKatan2WithCheck(IkReal(x4480),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4483.valid){
continue;
}
IkReal x4481=((1.0)*(x4483.value));
IkReal x4482=x4464;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4481)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4481)));
IkReal gconst106=(x4480*x4482);
IkReal gconst107=((1.0)*r10*x4482);
IkReal x4484=r12*r12;
IkReal x4485=((1.0)+(((-1.0)*x4484)));
IkReal x4486=(r22*sj1*sj2);
IkReal x4487=(cj1*cj2*r22);
CheckValue<IkReal> x4494=IKPowWithIntegerCheck(x4485,-1);
if(!x4494.valid){
continue;
}
IkReal x4488=x4494.value;
CheckValue<IkReal> x4495=IKPowWithIntegerCheck(((-1.0)+x4484),-1);
if(!x4495.valid){
continue;
}
IkReal x4489=x4495.value;
IkReal x4490=((1.0)*x4488);
if((x4485) < -0.00001)
continue;
IkReal x4491=IKsqrt(x4485);
IkReal x4492=(r12*x4489*x4491);
IkReal x4493=((((-1.0)*x4490*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x4488))+(((-1.0)*(r22*r22)))+(((-1.0)*x4490*(r11*r11)*(r21*r21))));
j4eval[0]=x4493;
j4eval[1]=((IKabs(((((-1.0)*x4487))+x4486)))+(IKabs(((((-1.0)*x4486*x4492))+((x4487*x4492))))));
j4eval[2]=IKsign(x4493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4496=(sj1*sj2);
IkReal x4497=(gconst106*r21);
IkReal x4498=(gconst107*r20);
IkReal x4499=(cj1*cj2);
CheckValue<IkReal> x4500 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4499))+((r22*x4496)))),IkReal(((((-1.0)*x4496*x4498))+(((-1.0)*x4497*x4499))+((x4498*x4499))+((x4496*x4497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4500.valid){
continue;
}
CheckValue<IkReal> x4501=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4498*x4498)))+(((-1.0)*(x4497*x4497)))+(((-1.0)*(r22*r22)))+(((2.0)*x4497*x4498)))),-1);
if(!x4501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4500.value)+(((1.5707963267949)*(x4501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4502=IKsin(j4);
IkReal x4503=IKcos(j4);
IkReal x4504=(gconst107*r10);
IkReal x4505=(gconst107*r00);
IkReal x4506=((1.0)*cj2);
IkReal x4507=(gconst107*r20);
IkReal x4508=((1.0)*sj0);
IkReal x4509=(cj1*sj2);
IkReal x4510=((1.0)*x4503);
IkReal x4511=(gconst106*x4503);
IkReal x4512=(gconst106*x4502);
IkReal x4513=((1.0)*x4502);
evalcond[0]=(((r21*x4512))+(((-1.0)*x4507*x4513))+(((-1.0)*r22*x4510)));
evalcond[1]=(cj0+(((-1.0)*r12*x4510))+(((-1.0)*x4504*x4513))+((r11*x4512)));
evalcond[2]=((((-1.0)*r02*x4510))+(((-1.0)*x4508))+(((-1.0)*x4505*x4513))+((r01*x4512)));
evalcond[3]=((((-1.0)*cj1*x4506))+((r22*x4502))+((sj1*sj2))+((r21*x4511))+(((-1.0)*x4507*x4510)));
evalcond[4]=((((-1.0)*x4505*x4510))+((r02*x4502))+(((-1.0)*cj0*x4509))+((r01*x4511))+(((-1.0)*cj0*sj1*x4506)));
evalcond[5]=(((r12*x4502))+(((-1.0)*x4508*x4509))+(((-1.0)*x4504*x4510))+((r11*x4511))+(((-1.0)*sj0*sj1*x4506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4514=((1.0)*sj0);
IkReal x4515=((1.0)*gconst106);
CheckValue<IkReal> x4516=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4515)))),-1);
if(!x4516.valid){
continue;
}
CheckValue<IkReal> x4517 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4514))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4515))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x4514))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4516.value)))+(x4517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4518=IKsin(j4);
IkReal x4519=IKcos(j4);
IkReal x4520=(gconst107*r10);
IkReal x4521=(gconst107*r00);
IkReal x4522=((1.0)*cj2);
IkReal x4523=(gconst107*r20);
IkReal x4524=((1.0)*sj0);
IkReal x4525=(cj1*sj2);
IkReal x4526=((1.0)*x4519);
IkReal x4527=(gconst106*x4519);
IkReal x4528=(gconst106*x4518);
IkReal x4529=((1.0)*x4518);
evalcond[0]=(((r21*x4528))+(((-1.0)*r22*x4526))+(((-1.0)*x4523*x4529)));
evalcond[1]=((((-1.0)*r12*x4526))+((r11*x4528))+cj0+(((-1.0)*x4520*x4529)));
evalcond[2]=(((r01*x4528))+(((-1.0)*x4524))+(((-1.0)*x4521*x4529))+(((-1.0)*r02*x4526)));
evalcond[3]=(((r21*x4527))+((sj1*sj2))+(((-1.0)*cj1*x4522))+(((-1.0)*x4523*x4526))+((r22*x4518)));
evalcond[4]=(((r02*x4518))+((r01*x4527))+(((-1.0)*cj0*sj1*x4522))+(((-1.0)*x4521*x4526))+(((-1.0)*cj0*x4525)));
evalcond[5]=(((r11*x4527))+(((-1.0)*x4520*x4526))+((r12*x4518))+(((-1.0)*x4524*x4525))+(((-1.0)*sj0*sj1*x4522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4530=((1.0)*gconst107);
CheckValue<IkReal> x4531 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4530))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4531.valid){
continue;
}
CheckValue<IkReal> x4532=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4530)))),-1);
if(!x4532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4531.value)+(((1.5707963267949)*(x4532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4533=IKsin(j4);
IkReal x4534=IKcos(j4);
IkReal x4535=(gconst107*r10);
IkReal x4536=(gconst107*r00);
IkReal x4537=((1.0)*cj2);
IkReal x4538=(gconst107*r20);
IkReal x4539=((1.0)*sj0);
IkReal x4540=(cj1*sj2);
IkReal x4541=((1.0)*x4534);
IkReal x4542=(gconst106*x4534);
IkReal x4543=(gconst106*x4533);
IkReal x4544=((1.0)*x4533);
evalcond[0]=((((-1.0)*r22*x4541))+(((-1.0)*x4538*x4544))+((r21*x4543)));
evalcond[1]=(cj0+(((-1.0)*x4535*x4544))+(((-1.0)*r12*x4541))+((r11*x4543)));
evalcond[2]=((((-1.0)*r02*x4541))+(((-1.0)*x4539))+(((-1.0)*x4536*x4544))+((r01*x4543)));
evalcond[3]=((((-1.0)*cj1*x4537))+((sj1*sj2))+((r22*x4533))+(((-1.0)*x4538*x4541))+((r21*x4542)));
evalcond[4]=((((-1.0)*cj0*x4540))+(((-1.0)*x4536*x4541))+((r01*x4542))+((r02*x4533))+(((-1.0)*cj0*sj1*x4537)));
evalcond[5]=(((r12*x4533))+(((-1.0)*x4535*x4541))+((r11*x4542))+(((-1.0)*x4539*x4540))+(((-1.0)*sj0*sj1*x4537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4545=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4545;
j4eval[1]=IKsign(x4545);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4546=((1.0)*cj5);
IkReal x4547=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4546)));
j4eval[0]=x4547;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4546)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4547);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4548=(sj1*sj2);
IkReal x4549=(cj5*r10);
IkReal x4550=(r11*sj5);
IkReal x4551=(cj1*cj2);
IkReal x4552=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4552;
j4eval[1]=((IKabs((((r12*x4551))+(((-1.0)*r12*x4548)))))+(IKabs(((((-1.0)*x4550*x4551))+(((-1.0)*x4548*x4549))+((x4548*x4550))+((x4549*x4551))))));
j4eval[2]=IKsign(x4552);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4553=(sj1*sj2);
IkReal x4554=(cj5*r10);
IkReal x4555=(r11*sj5);
IkReal x4556=(cj1*cj2);
CheckValue<IkReal> x4557=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4557.valid){
continue;
}
CheckValue<IkReal> x4558 = IKatan2WithCheck(IkReal((((x4553*x4555))+(((-1.0)*x4555*x4556))+(((-1.0)*x4553*x4554))+((x4554*x4556)))),IkReal((((r12*x4556))+(((-1.0)*r12*x4553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4557.value)))+(x4558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4559=IKcos(j4);
IkReal x4560=IKsin(j4);
IkReal x4561=(cj5*r00);
IkReal x4562=(cj5*r10);
IkReal x4563=(r21*sj5);
IkReal x4564=((1.0)*cj2);
IkReal x4565=(cj5*r20);
IkReal x4566=((1.0)*x4559);
IkReal x4567=((1.0)*x4560);
IkReal x4568=(sj5*x4560);
IkReal x4569=(sj5*x4559);
evalcond[0]=(((r11*x4569))+((r12*x4560))+(((-1.0)*x4562*x4566)));
evalcond[1]=((((-1.0)*r22*x4566))+((x4560*x4563))+(((-1.0)*x4565*x4567)));
evalcond[2]=((((-1.0)*r02*x4566))+(((-1.0)*x4561*x4567))+((r01*x4568)));
evalcond[3]=((1.0)+((r11*x4568))+(((-1.0)*r12*x4566))+(((-1.0)*x4562*x4567)));
evalcond[4]=(((r22*x4560))+(((-1.0)*cj1*x4564))+((sj1*sj2))+((x4559*x4563))+(((-1.0)*x4565*x4566)));
evalcond[5]=((((-1.0)*sj1*x4564))+((r02*x4560))+(((-1.0)*cj1*sj2))+(((-1.0)*x4561*x4566))+((r01*x4569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4570=((1.0)*cj5);
CheckValue<IkReal> x4571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4570))+(((-1.0)*r00*sj5)))),-1);
if(!x4571.valid){
continue;
}
CheckValue<IkReal> x4572 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4571.value)))+(x4572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4573=IKcos(j4);
IkReal x4574=IKsin(j4);
IkReal x4575=(cj5*r00);
IkReal x4576=(cj5*r10);
IkReal x4577=(r21*sj5);
IkReal x4578=((1.0)*cj2);
IkReal x4579=(cj5*r20);
IkReal x4580=((1.0)*x4573);
IkReal x4581=((1.0)*x4574);
IkReal x4582=(sj5*x4574);
IkReal x4583=(sj5*x4573);
evalcond[0]=(((r12*x4574))+((r11*x4583))+(((-1.0)*x4576*x4580)));
evalcond[1]=((((-1.0)*r22*x4580))+(((-1.0)*x4579*x4581))+((x4574*x4577)));
evalcond[2]=((((-1.0)*x4575*x4581))+(((-1.0)*r02*x4580))+((r01*x4582)));
evalcond[3]=((1.0)+((r11*x4582))+(((-1.0)*r12*x4580))+(((-1.0)*x4576*x4581)));
evalcond[4]=((((-1.0)*x4579*x4580))+(((-1.0)*cj1*x4578))+((r22*x4574))+((sj1*sj2))+((x4573*x4577)));
evalcond[5]=((((-1.0)*x4575*x4580))+(((-1.0)*sj1*x4578))+((r02*x4574))+(((-1.0)*cj1*sj2))+((r01*x4583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4584=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4584.valid){
continue;
}
CheckValue<IkReal> x4585 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4584.value)))+(x4585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4586=IKcos(j4);
IkReal x4587=IKsin(j4);
IkReal x4588=(cj5*r00);
IkReal x4589=(cj5*r10);
IkReal x4590=(r21*sj5);
IkReal x4591=((1.0)*cj2);
IkReal x4592=(cj5*r20);
IkReal x4593=((1.0)*x4586);
IkReal x4594=((1.0)*x4587);
IkReal x4595=(sj5*x4587);
IkReal x4596=(sj5*x4586);
evalcond[0]=((((-1.0)*x4589*x4593))+((r11*x4596))+((r12*x4587)));
evalcond[1]=((((-1.0)*r22*x4593))+(((-1.0)*x4592*x4594))+((x4587*x4590)));
evalcond[2]=((((-1.0)*r02*x4593))+(((-1.0)*x4588*x4594))+((r01*x4595)));
evalcond[3]=((1.0)+(((-1.0)*x4589*x4594))+((r11*x4595))+(((-1.0)*r12*x4593)));
evalcond[4]=(((r22*x4587))+((sj1*sj2))+(((-1.0)*x4592*x4593))+(((-1.0)*cj1*x4591))+((x4586*x4590)));
evalcond[5]=(((r02*x4587))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4591))+(((-1.0)*x4588*x4593))+((r01*x4596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4597=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4597;
j4eval[1]=IKsign(x4597);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4598=((1.0)*cj5);
IkReal x4599=((((-1.0)*r21*x4598))+(((-1.0)*r20*sj5)));
j4eval[0]=x4599;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4598))))));
j4eval[2]=IKsign(x4599);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4600=cj5*cj5;
IkReal x4601=r11*r11;
IkReal x4602=(r11*sj5);
IkReal x4603=(cj5*r10);
IkReal x4604=((r12*r12)+(((-2.0)*x4602*x4603))+x4601+((x4600*(r10*r10)))+(((-1.0)*x4600*x4601)));
j4eval[0]=x4604;
j4eval[1]=IKsign(x4604);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4603))+x4602))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4605=cj5*cj5;
IkReal x4606=r11*r11;
IkReal x4607=(cj5*r10);
IkReal x4608=(r11*sj5);
CheckValue<IkReal> x4609 = IKatan2WithCheck(IkReal(((((-1.0)*x4607))+x4608)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4609.valid){
continue;
}
CheckValue<IkReal> x4610=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4606+(((-1.0)*x4605*x4606))+(((-2.0)*x4607*x4608))+((x4605*(r10*r10))))),-1);
if(!x4610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4609.value)+(((1.5707963267949)*(x4610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4611=IKcos(j4);
IkReal x4612=IKsin(j4);
IkReal x4613=(cj5*r00);
IkReal x4614=(cj5*r10);
IkReal x4615=(r21*sj5);
IkReal x4616=(cj5*r20);
IkReal x4617=((1.0)*x4611);
IkReal x4618=((1.0)*x4612);
IkReal x4619=(sj5*x4612);
IkReal x4620=(sj5*x4611);
evalcond[0]=(((r11*x4620))+((r12*x4612))+(((-1.0)*x4614*x4617)));
evalcond[1]=((((-1.0)*r22*x4617))+(((-1.0)*x4616*x4618))+((x4612*x4615)));
evalcond[2]=((((-1.0)*r02*x4617))+((r01*x4619))+(((-1.0)*x4613*x4618)));
evalcond[3]=((-1.0)+((r11*x4619))+(((-1.0)*r12*x4617))+(((-1.0)*x4614*x4618)));
evalcond[4]=(((cj2*sj1))+((r02*x4612))+((cj1*sj2))+((r01*x4620))+(((-1.0)*x4613*x4617)));
evalcond[5]=((((-1.0)*cj1*cj2))+((x4611*x4615))+((sj1*sj2))+((r22*x4612))+(((-1.0)*x4616*x4617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4621=((1.0)*cj5);
CheckValue<IkReal> x4622 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4622.valid){
continue;
}
CheckValue<IkReal> x4623=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4621))+(((-1.0)*r20*sj5)))),-1);
if(!x4623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4622.value)+(((1.5707963267949)*(x4623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4624=IKcos(j4);
IkReal x4625=IKsin(j4);
IkReal x4626=(cj5*r00);
IkReal x4627=(cj5*r10);
IkReal x4628=(r21*sj5);
IkReal x4629=(cj5*r20);
IkReal x4630=((1.0)*x4624);
IkReal x4631=((1.0)*x4625);
IkReal x4632=(sj5*x4625);
IkReal x4633=(sj5*x4624);
evalcond[0]=(((r12*x4625))+((r11*x4633))+(((-1.0)*x4627*x4630)));
evalcond[1]=(((x4625*x4628))+(((-1.0)*x4629*x4631))+(((-1.0)*r22*x4630)));
evalcond[2]=(((r01*x4632))+(((-1.0)*r02*x4630))+(((-1.0)*x4626*x4631)));
evalcond[3]=((-1.0)+((r11*x4632))+(((-1.0)*x4627*x4631))+(((-1.0)*r12*x4630)));
evalcond[4]=(((cj2*sj1))+((r01*x4633))+((cj1*sj2))+((r02*x4625))+(((-1.0)*x4626*x4630)));
evalcond[5]=(((x4624*x4628))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4625))+(((-1.0)*x4629*x4630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4634 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4634.valid){
continue;
}
CheckValue<IkReal> x4635=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4634.value)+(((1.5707963267949)*(x4635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4636=IKcos(j4);
IkReal x4637=IKsin(j4);
IkReal x4638=(cj5*r00);
IkReal x4639=(cj5*r10);
IkReal x4640=(r21*sj5);
IkReal x4641=(cj5*r20);
IkReal x4642=((1.0)*x4636);
IkReal x4643=((1.0)*x4637);
IkReal x4644=(sj5*x4637);
IkReal x4645=(sj5*x4636);
evalcond[0]=(((r12*x4637))+((r11*x4645))+(((-1.0)*x4639*x4642)));
evalcond[1]=((((-1.0)*r22*x4642))+(((-1.0)*x4641*x4643))+((x4637*x4640)));
evalcond[2]=((((-1.0)*r02*x4642))+((r01*x4644))+(((-1.0)*x4638*x4643)));
evalcond[3]=((-1.0)+((r11*x4644))+(((-1.0)*r12*x4642))+(((-1.0)*x4639*x4643)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4645))+((r02*x4637))+(((-1.0)*x4638*x4642)));
evalcond[5]=(((x4636*x4640))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4641*x4642))+((r22*x4637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4646=((-1.0)*r00);
IkReal x4648 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4648)==0){
continue;
}
IkReal x4647=pow(x4648,-0.5);
CheckValue<IkReal> x4649 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4646),IKFAST_ATAN2_MAGTHRESH);
if(!x4649.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4649.value));
IkReal gconst109=(r01*x4647);
IkReal gconst110=(x4646*x4647);
CheckValue<IkReal> x4650 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4650.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4650.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4651=((-1.0)*r00);
IkReal x4652=x4647;
CheckValue<IkReal> x4654 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4651),IKFAST_ATAN2_MAGTHRESH);
if(!x4654.valid){
continue;
}
IkReal x4653=((-1.0)*(x4654.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4653;
IkReal gconst108=x4653;
IkReal gconst109=(r01*x4652);
IkReal gconst110=(x4651*x4652);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4655=((1.0)*sj0);
IkReal x4656=((1.0)*gconst109);
CheckValue<IkReal> x4657 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4655)))),IkReal(((((-1.0)*cj0*r01*x4656))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4657.valid){
continue;
}
CheckValue<IkReal> x4658=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4656))+(((-1.0)*gconst110*r21)))),-1);
if(!x4658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4657.value)+(((1.5707963267949)*(x4658.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4659=IKsin(j4);
IkReal x4660=IKcos(j4);
IkReal x4661=(gconst109*r21);
IkReal x4662=((1.0)*cj2);
IkReal x4663=((1.0)*sj0);
IkReal x4664=(cj1*sj2);
IkReal x4665=((1.0)*x4660);
IkReal x4666=(gconst109*x4659);
IkReal x4667=(gconst109*x4660);
IkReal x4668=((1.0)*gconst110*x4659);
evalcond[0]=((((-1.0)*r20*x4668))+((x4659*x4661))+(((-1.0)*r22*x4665)));
evalcond[1]=(cj0+(((-1.0)*r10*x4668))+((r11*x4666))+(((-1.0)*r12*x4665)));
evalcond[2]=(((r01*x4666))+(((-1.0)*r00*x4668))+(((-1.0)*x4663))+(((-1.0)*r02*x4665)));
evalcond[3]=((((-1.0)*gconst110*r20*x4665))+((sj1*sj2))+((r22*x4659))+((x4660*x4661))+(((-1.0)*cj1*x4662)));
evalcond[4]=((((-1.0)*cj0*x4664))+((r01*x4667))+((r02*x4659))+(((-1.0)*cj0*sj1*x4662))+(((-1.0)*gconst110*r00*x4665)));
evalcond[5]=(((r12*x4659))+(((-1.0)*gconst110*r10*x4665))+(((-1.0)*x4663*x4664))+((r11*x4667))+(((-1.0)*sj0*sj1*x4662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4669=((1.0)*gconst110);
CheckValue<IkReal> x4670=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4669))+(((-1.0)*gconst109*r10)))),-1);
if(!x4670.valid){
continue;
}
CheckValue<IkReal> x4671 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4669))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4670.value)))+(x4671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4672=IKsin(j4);
IkReal x4673=IKcos(j4);
IkReal x4674=(gconst109*r21);
IkReal x4675=((1.0)*cj2);
IkReal x4676=((1.0)*sj0);
IkReal x4677=(cj1*sj2);
IkReal x4678=((1.0)*x4673);
IkReal x4679=(gconst109*x4672);
IkReal x4680=(gconst109*x4673);
IkReal x4681=((1.0)*gconst110*x4672);
evalcond[0]=(((x4672*x4674))+(((-1.0)*r22*x4678))+(((-1.0)*r20*x4681)));
evalcond[1]=(cj0+((r11*x4679))+(((-1.0)*r12*x4678))+(((-1.0)*r10*x4681)));
evalcond[2]=((((-1.0)*r02*x4678))+(((-1.0)*r00*x4681))+(((-1.0)*x4676))+((r01*x4679)));
evalcond[3]=((((-1.0)*cj1*x4675))+((x4673*x4674))+((sj1*sj2))+((r22*x4672))+(((-1.0)*gconst110*r20*x4678)));
evalcond[4]=(((r02*x4672))+(((-1.0)*cj0*x4677))+(((-1.0)*cj0*sj1*x4675))+((r01*x4680))+(((-1.0)*gconst110*r00*x4678)));
evalcond[5]=((((-1.0)*gconst110*r10*x4678))+(((-1.0)*x4676*x4677))+(((-1.0)*sj0*sj1*x4675))+((r12*x4672))+((r11*x4680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4682=((-1.0)*r01);
IkReal x4684 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4684)==0){
continue;
}
IkReal x4683=pow(x4684,-0.5);
CheckValue<IkReal> x4685 = IKatan2WithCheck(IkReal(x4682),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4685.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4685.value))));
IkReal gconst112=(x4682*x4683);
IkReal gconst113=((1.0)*r00*x4683);
CheckValue<IkReal> x4686 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4686.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4686.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4687=((-1.0)*r01);
CheckValue<IkReal> x4690 = IKatan2WithCheck(IkReal(x4687),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4690.valid){
continue;
}
IkReal x4688=((1.0)*(x4690.value));
IkReal x4689=x4683;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4688)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4688)));
IkReal gconst112=(x4687*x4689);
IkReal gconst113=((1.0)*r00*x4689);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4691=((-1.0)*r01);
CheckValue<IkReal> x4694 = IKatan2WithCheck(IkReal(x4691),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4694.valid){
continue;
}
IkReal x4692=((1.0)*(x4694.value));
IkReal x4693=x4683;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4692)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4692)));
IkReal gconst112=(x4691*x4693);
IkReal gconst113=((1.0)*r00*x4693);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4695=((-1.0)*r01);
CheckValue<IkReal> x4698 = IKatan2WithCheck(IkReal(x4695),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4698.valid){
continue;
}
IkReal x4696=((1.0)*(x4698.value));
IkReal x4697=x4683;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4696)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4696)));
IkReal gconst112=(x4695*x4697);
IkReal gconst113=((1.0)*r00*x4697);
IkReal x4699=r02*r02;
IkReal x4700=(r12*sj0);
IkReal x4701=((1.0)*cj0);
IkReal x4702=x4683;
j4eval[0]=((IKabs((((cj0*x4699*x4702))+((r02*x4700*x4702))+(((-1.0)*x4701*x4702)))))+(IKabs(((((-1.0)*x4700))+(((-1.0)*r02*x4701))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4703=((1.0)*sj0);
IkReal x4704=((1.0)*gconst112);
CheckValue<IkReal> x4705=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x4704)))),-1);
if(!x4705.valid){
continue;
}
CheckValue<IkReal> x4706 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4703))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4704))+(((-1.0)*gconst112*r11*x4703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4705.value)))+(x4706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4707=IKsin(j4);
IkReal x4708=IKcos(j4);
IkReal x4709=(gconst113*r20);
IkReal x4710=(gconst112*r21);
IkReal x4711=((1.0)*cj2);
IkReal x4712=(gconst113*r00);
IkReal x4713=(gconst113*r10);
IkReal x4714=((1.0)*sj0);
IkReal x4715=(cj1*sj2);
IkReal x4716=((1.0)*x4708);
IkReal x4717=((1.0)*x4707);
IkReal x4718=(gconst112*x4708);
IkReal x4719=(gconst112*x4707);
evalcond[0]=((((-1.0)*x4709*x4717))+(((-1.0)*r22*x4716))+((x4707*x4710)));
evalcond[1]=(cj0+(((-1.0)*r12*x4716))+(((-1.0)*x4713*x4717))+((r11*x4719)));
evalcond[2]=((((-1.0)*x4712*x4717))+(((-1.0)*r02*x4716))+((r01*x4719))+(((-1.0)*x4714)));
evalcond[3]=((((-1.0)*x4709*x4716))+((sj1*sj2))+(((-1.0)*cj1*x4711))+((x4708*x4710))+((r22*x4707)));
evalcond[4]=((((-1.0)*x4712*x4716))+(((-1.0)*cj0*x4715))+((r01*x4718))+(((-1.0)*cj0*sj1*x4711))+((r02*x4707)));
evalcond[5]=((((-1.0)*x4714*x4715))+(((-1.0)*sj0*sj1*x4711))+(((-1.0)*x4713*x4716))+((r11*x4718))+((r12*x4707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4720=((1.0)*gconst113);
CheckValue<IkReal> x4721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4720))+(((-1.0)*gconst112*r10)))),-1);
if(!x4721.valid){
continue;
}
CheckValue<IkReal> x4722 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4721.value)))+(x4722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4723=IKsin(j4);
IkReal x4724=IKcos(j4);
IkReal x4725=(gconst113*r20);
IkReal x4726=(gconst112*r21);
IkReal x4727=((1.0)*cj2);
IkReal x4728=(gconst113*r00);
IkReal x4729=(gconst113*r10);
IkReal x4730=((1.0)*sj0);
IkReal x4731=(cj1*sj2);
IkReal x4732=((1.0)*x4724);
IkReal x4733=((1.0)*x4723);
IkReal x4734=(gconst112*x4724);
IkReal x4735=(gconst112*x4723);
evalcond[0]=(((x4723*x4726))+(((-1.0)*x4725*x4733))+(((-1.0)*r22*x4732)));
evalcond[1]=(((r11*x4735))+cj0+(((-1.0)*r12*x4732))+(((-1.0)*x4729*x4733)));
evalcond[2]=((((-1.0)*x4728*x4733))+(((-1.0)*x4730))+((r01*x4735))+(((-1.0)*r02*x4732)));
evalcond[3]=((((-1.0)*cj1*x4727))+((sj1*sj2))+(((-1.0)*x4725*x4732))+((x4724*x4726))+((r22*x4723)));
evalcond[4]=((((-1.0)*x4728*x4732))+((r02*x4723))+(((-1.0)*cj0*sj1*x4727))+(((-1.0)*cj0*x4731))+((r01*x4734)));
evalcond[5]=(((r11*x4734))+(((-1.0)*x4730*x4731))+(((-1.0)*sj0*sj1*x4727))+(((-1.0)*x4729*x4732))+((r12*x4723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4736=((1.0)*gconst113);
CheckValue<IkReal> x4737 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4736))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4737.valid){
continue;
}
CheckValue<IkReal> x4738=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4736))+(((-1.0)*gconst112*r00)))),-1);
if(!x4738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4737.value)+(((1.5707963267949)*(x4738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4739=IKsin(j4);
IkReal x4740=IKcos(j4);
IkReal x4741=(gconst113*r20);
IkReal x4742=(gconst112*r21);
IkReal x4743=((1.0)*cj2);
IkReal x4744=(gconst113*r00);
IkReal x4745=(gconst113*r10);
IkReal x4746=((1.0)*sj0);
IkReal x4747=(cj1*sj2);
IkReal x4748=((1.0)*x4740);
IkReal x4749=((1.0)*x4739);
IkReal x4750=(gconst112*x4740);
IkReal x4751=(gconst112*x4739);
evalcond[0]=((((-1.0)*r22*x4748))+(((-1.0)*x4741*x4749))+((x4739*x4742)));
evalcond[1]=((((-1.0)*r12*x4748))+cj0+((r11*x4751))+(((-1.0)*x4745*x4749)));
evalcond[2]=(((r01*x4751))+(((-1.0)*x4744*x4749))+(((-1.0)*x4746))+(((-1.0)*r02*x4748)));
evalcond[3]=(((x4740*x4742))+(((-1.0)*cj1*x4743))+((sj1*sj2))+(((-1.0)*x4741*x4748))+((r22*x4739)));
evalcond[4]=(((r01*x4750))+(((-1.0)*cj0*x4747))+(((-1.0)*x4744*x4748))+((r02*x4739))+(((-1.0)*cj0*sj1*x4743)));
evalcond[5]=(((r11*x4750))+(((-1.0)*x4746*x4747))+(((-1.0)*x4745*x4748))+(((-1.0)*sj0*sj1*x4743))+((r12*x4739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4752=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4752;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4752);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4753=((1.0)*cj5);
IkReal x4754=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4753)));
j4eval[0]=x4754;
j4eval[1]=((IKabs(((((-1.0)*r20*x4753))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4754);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4755=cj5*cj5;
IkReal x4756=r01*r01;
IkReal x4757=(cj5*r00);
IkReal x4758=(r01*sj5);
IkReal x4759=((((-1.0)*x4755*x4756))+((x4755*(r00*r00)))+(((-2.0)*x4757*x4758))+x4756+(r02*r02));
j4eval[0]=x4759;
j4eval[1]=IKsign(x4759);
j4eval[2]=((IKabs(r02))+(IKabs((x4758+(((-1.0)*x4757))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4760=cj5*cj5;
IkReal x4761=r01*r01;
IkReal x4762=(r01*sj5);
IkReal x4763=(cj5*r00);
CheckValue<IkReal> x4764=IKPowWithIntegerCheck(IKsign((x4761+((x4760*(r00*r00)))+(((-2.0)*x4762*x4763))+(r02*r02)+(((-1.0)*x4760*x4761)))),-1);
if(!x4764.valid){
continue;
}
CheckValue<IkReal> x4765 = IKatan2WithCheck(IkReal(((((-1.0)*x4763))+x4762)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4764.value)))+(x4765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4766=IKcos(j4);
IkReal x4767=IKsin(j4);
IkReal x4768=(cj5*r00);
IkReal x4769=(cj5*r10);
IkReal x4770=(r21*sj5);
IkReal x4771=((1.0)*cj2);
IkReal x4772=(cj5*r20);
IkReal x4773=((1.0)*x4766);
IkReal x4774=((1.0)*x4767);
IkReal x4775=(sj5*x4767);
IkReal x4776=(sj5*x4766);
evalcond[0]=(((r02*x4767))+((r01*x4776))+(((-1.0)*x4768*x4773)));
evalcond[1]=((((-1.0)*r22*x4773))+((x4767*x4770))+(((-1.0)*x4772*x4774)));
evalcond[2]=((((-1.0)*x4769*x4774))+((r11*x4775))+(((-1.0)*r12*x4773)));
evalcond[3]=((-1.0)+((r01*x4775))+(((-1.0)*x4768*x4774))+(((-1.0)*r02*x4773)));
evalcond[4]=(((r22*x4767))+(((-1.0)*cj1*x4771))+((x4766*x4770))+((sj1*sj2))+(((-1.0)*x4772*x4773)));
evalcond[5]=((((-1.0)*x4769*x4773))+((r11*x4776))+(((-1.0)*sj1*x4771))+(((-1.0)*cj1*sj2))+((r12*x4767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4777=((1.0)*cj5);
CheckValue<IkReal> x4778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4777))+(((-1.0)*r10*sj5)))),-1);
if(!x4778.valid){
continue;
}
CheckValue<IkReal> x4779 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4778.value)))+(x4779.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4780=IKcos(j4);
IkReal x4781=IKsin(j4);
IkReal x4782=(cj5*r00);
IkReal x4783=(cj5*r10);
IkReal x4784=(r21*sj5);
IkReal x4785=((1.0)*cj2);
IkReal x4786=(cj5*r20);
IkReal x4787=((1.0)*x4780);
IkReal x4788=((1.0)*x4781);
IkReal x4789=(sj5*x4781);
IkReal x4790=(sj5*x4780);
evalcond[0]=(((r02*x4781))+((r01*x4790))+(((-1.0)*x4782*x4787)));
evalcond[1]=((((-1.0)*x4786*x4788))+(((-1.0)*r22*x4787))+((x4781*x4784)));
evalcond[2]=((((-1.0)*x4783*x4788))+((r11*x4789))+(((-1.0)*r12*x4787)));
evalcond[3]=((-1.0)+((r01*x4789))+(((-1.0)*x4782*x4788))+(((-1.0)*r02*x4787)));
evalcond[4]=(((x4780*x4784))+((r22*x4781))+(((-1.0)*x4786*x4787))+((sj1*sj2))+(((-1.0)*cj1*x4785)));
evalcond[5]=(((r12*x4781))+(((-1.0)*x4783*x4787))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4785))+((r11*x4790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4791=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4791.valid){
continue;
}
CheckValue<IkReal> x4792 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4791.value)))+(x4792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4793=IKcos(j4);
IkReal x4794=IKsin(j4);
IkReal x4795=(cj5*r00);
IkReal x4796=(cj5*r10);
IkReal x4797=(r21*sj5);
IkReal x4798=((1.0)*cj2);
IkReal x4799=(cj5*r20);
IkReal x4800=((1.0)*x4793);
IkReal x4801=((1.0)*x4794);
IkReal x4802=(sj5*x4794);
IkReal x4803=(sj5*x4793);
evalcond[0]=(((r01*x4803))+((r02*x4794))+(((-1.0)*x4795*x4800)));
evalcond[1]=((((-1.0)*r22*x4800))+(((-1.0)*x4799*x4801))+((x4794*x4797)));
evalcond[2]=((((-1.0)*x4796*x4801))+(((-1.0)*r12*x4800))+((r11*x4802)));
evalcond[3]=((-1.0)+((r01*x4802))+(((-1.0)*r02*x4800))+(((-1.0)*x4795*x4801)));
evalcond[4]=(((x4793*x4797))+((sj1*sj2))+(((-1.0)*x4799*x4800))+(((-1.0)*cj1*x4798))+((r22*x4794)));
evalcond[5]=((((-1.0)*sj1*x4798))+(((-1.0)*x4796*x4800))+(((-1.0)*cj1*sj2))+((r12*x4794))+((r11*x4803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4804=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4804;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4805=((1.0)*cj5);
IkReal x4806=((((-1.0)*r21*x4805))+(((-1.0)*r20*sj5)));
j4eval[0]=x4806;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4805))))));
j4eval[2]=IKsign(x4806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4807=cj5*cj5;
IkReal x4808=r01*r01;
IkReal x4809=(r01*sj5);
IkReal x4810=(cj5*r00);
IkReal x4811=((((-1.0)*(r02*r02)))+(((-1.0)*x4807*(r00*r00)))+(((-1.0)*x4808))+((x4807*x4808))+(((2.0)*x4809*x4810)));
j4eval[0]=x4811;
j4eval[1]=IKsign(x4811);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4810))+x4809))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4812=cj5*cj5;
IkReal x4813=r01*r01;
IkReal x4814=(r01*sj5);
IkReal x4815=(cj5*r00);
CheckValue<IkReal> x4816=IKPowWithIntegerCheck(IKsign(((((2.0)*x4814*x4815))+((x4812*x4813))+(((-1.0)*x4813))+(((-1.0)*(r02*r02)))+(((-1.0)*x4812*(r00*r00))))),-1);
if(!x4816.valid){
continue;
}
CheckValue<IkReal> x4817 = IKatan2WithCheck(IkReal(((((-1.0)*x4815))+x4814)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4816.value)))+(x4817.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4818=IKcos(j4);
IkReal x4819=IKsin(j4);
IkReal x4820=(cj5*r00);
IkReal x4821=(cj5*r10);
IkReal x4822=(r21*sj5);
IkReal x4823=(cj5*r20);
IkReal x4824=((1.0)*x4818);
IkReal x4825=((1.0)*x4819);
IkReal x4826=(sj5*x4819);
IkReal x4827=(sj5*x4818);
evalcond[0]=(((r02*x4819))+(((-1.0)*x4820*x4824))+((r01*x4827)));
evalcond[1]=(((x4819*x4822))+(((-1.0)*x4823*x4825))+(((-1.0)*r22*x4824)));
evalcond[2]=(((r11*x4826))+(((-1.0)*x4821*x4825))+(((-1.0)*r12*x4824)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4824))+(((-1.0)*x4820*x4825))+((r01*x4826)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4827))+((r12*x4819))+(((-1.0)*x4821*x4824)));
evalcond[5]=(((x4818*x4822))+(((-1.0)*x4823*x4824))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4828=((1.0)*cj5);
CheckValue<IkReal> x4829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4828))+(((-1.0)*r20*sj5)))),-1);
if(!x4829.valid){
continue;
}
CheckValue<IkReal> x4830 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4828))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4829.value)))+(x4830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4831=IKcos(j4);
IkReal x4832=IKsin(j4);
IkReal x4833=(cj5*r00);
IkReal x4834=(cj5*r10);
IkReal x4835=(r21*sj5);
IkReal x4836=(cj5*r20);
IkReal x4837=((1.0)*x4831);
IkReal x4838=((1.0)*x4832);
IkReal x4839=(sj5*x4832);
IkReal x4840=(sj5*x4831);
evalcond[0]=((((-1.0)*x4833*x4837))+((r01*x4840))+((r02*x4832)));
evalcond[1]=((((-1.0)*r22*x4837))+((x4832*x4835))+(((-1.0)*x4836*x4838)));
evalcond[2]=(((r11*x4839))+(((-1.0)*x4834*x4838))+(((-1.0)*r12*x4837)));
evalcond[3]=((1.0)+((r01*x4839))+(((-1.0)*x4833*x4838))+(((-1.0)*r02*x4837)));
evalcond[4]=(((r12*x4832))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4834*x4837))+((r11*x4840)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4832))+((x4831*x4835))+(((-1.0)*x4836*x4837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4841 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4841.valid){
continue;
}
CheckValue<IkReal> x4842=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4841.value)+(((1.5707963267949)*(x4842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4843=IKcos(j4);
IkReal x4844=IKsin(j4);
IkReal x4845=(cj5*r00);
IkReal x4846=(cj5*r10);
IkReal x4847=(r21*sj5);
IkReal x4848=(cj5*r20);
IkReal x4849=((1.0)*x4843);
IkReal x4850=((1.0)*x4844);
IkReal x4851=(sj5*x4844);
IkReal x4852=(sj5*x4843);
evalcond[0]=(((r02*x4844))+((r01*x4852))+(((-1.0)*x4845*x4849)));
evalcond[1]=(((x4844*x4847))+(((-1.0)*x4848*x4850))+(((-1.0)*r22*x4849)));
evalcond[2]=((((-1.0)*x4846*x4850))+(((-1.0)*r12*x4849))+((r11*x4851)));
evalcond[3]=((1.0)+((r01*x4851))+(((-1.0)*r02*x4849))+(((-1.0)*x4845*x4850)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4846*x4849))+((r12*x4844))+((r11*x4852)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4844))+(((-1.0)*x4848*x4849))+((x4843*x4847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4853=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4853);
rxp1_1=(px*r21);
rxp1_2=(r11*x4853);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4854=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4854);
rxp1_1=(px*r21);
rxp1_2=(r11*x4854);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4855=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4855);
rxp1_1=(px*r21);
rxp1_2=(r11*x4855);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4858=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4858.valid){
continue;
}
IkReal x4856=x4858.value;
IkReal x4857=(sj0*x4856);
cj4array[0]=(((cj1*sj2*x4857))+((cj2*sj1*x4857)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4859=IKsin(j4);
IkReal x4860=IKcos(j4);
IkReal x4861=(r21*sj5);
IkReal x4862=((1.0)*cj5*r20);
evalcond[0]=(r02*x4859);
evalcond[1]=((((-1.0)*r02*x4860))+(((-1.0)*sj0)));
evalcond[2]=(((x4859*x4861))+(((-1.0)*x4859*x4862)));
evalcond[3]=(((r11*sj5*x4859))+(((-1.0)*cj5*r10*x4859)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4860*x4861))+(((-1.0)*x4860*x4862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4864=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4864.valid){
continue;
}
IkReal x4863=x4864.value;
cj4array[0]=(((cj1*cj2*x4863))+(((-1.0)*sj1*sj2*x4863)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4865=IKsin(j4);
IkReal x4866=IKcos(j4);
IkReal x4867=((1.0)*sj0);
IkReal x4868=((1.0)*cj5);
IkReal x4869=(sj5*x4865);
evalcond[0]=(r02*x4865);
evalcond[1]=((((-1.0)*r02*x4866))+(((-1.0)*x4867)));
evalcond[2]=((((-1.0)*r20*x4865*x4868))+((r21*x4869)));
evalcond[3]=(((r11*x4869))+(((-1.0)*r10*x4865*x4868)));
evalcond[4]=((((-1.0)*r10*x4866*x4868))+(((-1.0)*cj2*sj1*x4867))+((r11*sj5*x4866))+(((-1.0)*cj1*sj2*x4867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4870=IKPowWithIntegerCheck(r02,-1);
if(!x4870.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4870.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4871=IKsin(j4);
IkReal x4872=IKcos(j4);
IkReal x4873=((1.0)*cj1);
IkReal x4874=(r21*sj5);
IkReal x4875=((1.0)*cj5);
IkReal x4876=(r11*sj5);
evalcond[0]=(r02*x4871);
evalcond[1]=((((-1.0)*r20*x4871*x4875))+((x4871*x4874)));
evalcond[2]=((((-1.0)*r10*x4871*x4875))+((x4871*x4876)));
evalcond[3]=((((-1.0)*cj2*x4873))+((sj1*sj2))+((x4872*x4874))+(((-1.0)*r20*x4872*x4875)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x4872*x4876))+(((-1.0)*sj0*sj2*x4873))+(((-1.0)*r10*x4872*x4875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4877=((1.0)*sj0);
IkReal x4878=((1.0)*cj0);
CheckValue<IkReal> x4879 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4877))+(((-1.0)*r02*x4878)))),IkReal(((((-1.0)*r01*sj5*x4878))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4879.valid){
continue;
}
CheckValue<IkReal> x4880=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4879.value)+(((1.5707963267949)*(x4880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4881=IKsin(j4);
IkReal x4882=IKcos(j4);
IkReal x4883=(cj5*r00);
IkReal x4884=(cj5*r10);
IkReal x4885=(r21*sj5);
IkReal x4886=((1.0)*cj2);
IkReal x4887=((1.0)*sj0);
IkReal x4888=(cj1*sj2);
IkReal x4889=(cj5*r20);
IkReal x4890=((1.0)*x4882);
IkReal x4891=((1.0)*x4881);
IkReal x4892=(sj5*x4881);
IkReal x4893=(sj5*x4882);
evalcond[0]=(((x4881*x4885))+(((-1.0)*x4889*x4891))+(((-1.0)*r22*x4890)));
evalcond[1]=(((r11*x4892))+(((-1.0)*r12*x4890))+cj0+(((-1.0)*x4884*x4891)));
evalcond[2]=((((-1.0)*x4887))+(((-1.0)*x4883*x4891))+(((-1.0)*r02*x4890))+((r01*x4892)));
evalcond[3]=((((-1.0)*cj1*x4886))+((sj1*sj2))+((r22*x4881))+(((-1.0)*x4889*x4890))+((x4882*x4885)));
evalcond[4]=((((-1.0)*cj0*x4888))+(((-1.0)*x4883*x4890))+((r02*x4881))+(((-1.0)*cj0*sj1*x4886))+((r01*x4893)));
evalcond[5]=(((r11*x4893))+((r12*x4881))+(((-1.0)*sj0*sj1*x4886))+(((-1.0)*x4884*x4890))+(((-1.0)*x4887*x4888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4894=((1.0)*cj5);
CheckValue<IkReal> x4895=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4894))+(((-1.0)*r10*sj5)))),-1);
if(!x4895.valid){
continue;
}
CheckValue<IkReal> x4896 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4894))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4895.value)))+(x4896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4897=IKsin(j4);
IkReal x4898=IKcos(j4);
IkReal x4899=(cj5*r00);
IkReal x4900=(cj5*r10);
IkReal x4901=(r21*sj5);
IkReal x4902=((1.0)*cj2);
IkReal x4903=((1.0)*sj0);
IkReal x4904=(cj1*sj2);
IkReal x4905=(cj5*r20);
IkReal x4906=((1.0)*x4898);
IkReal x4907=((1.0)*x4897);
IkReal x4908=(sj5*x4897);
IkReal x4909=(sj5*x4898);
evalcond[0]=((((-1.0)*x4905*x4907))+(((-1.0)*r22*x4906))+((x4897*x4901)));
evalcond[1]=((((-1.0)*r12*x4906))+cj0+((r11*x4908))+(((-1.0)*x4900*x4907)));
evalcond[2]=((((-1.0)*x4899*x4907))+(((-1.0)*x4903))+(((-1.0)*r02*x4906))+((r01*x4908)));
evalcond[3]=((((-1.0)*x4905*x4906))+((sj1*sj2))+((r22*x4897))+((x4898*x4901))+(((-1.0)*cj1*x4902)));
evalcond[4]=((((-1.0)*x4899*x4906))+(((-1.0)*cj0*x4904))+((r02*x4897))+(((-1.0)*cj0*sj1*x4902))+((r01*x4909)));
evalcond[5]=(((r12*x4897))+(((-1.0)*sj0*sj1*x4902))+(((-1.0)*x4903*x4904))+((r11*x4909))+(((-1.0)*x4900*x4906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4910=((1.0)*cj5);
CheckValue<IkReal> x4911 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4910))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4911.valid){
continue;
}
CheckValue<IkReal> x4912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4910)))),-1);
if(!x4912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4911.value)+(((1.5707963267949)*(x4912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4913=IKsin(j4);
IkReal x4914=IKcos(j4);
IkReal x4915=(cj5*r00);
IkReal x4916=(cj5*r10);
IkReal x4917=(r21*sj5);
IkReal x4918=((1.0)*cj2);
IkReal x4919=((1.0)*sj0);
IkReal x4920=(cj1*sj2);
IkReal x4921=(cj5*r20);
IkReal x4922=((1.0)*x4914);
IkReal x4923=((1.0)*x4913);
IkReal x4924=(sj5*x4913);
IkReal x4925=(sj5*x4914);
evalcond[0]=(((x4913*x4917))+(((-1.0)*r22*x4922))+(((-1.0)*x4921*x4923)));
evalcond[1]=(cj0+(((-1.0)*x4916*x4923))+(((-1.0)*r12*x4922))+((r11*x4924)));
evalcond[2]=((((-1.0)*r02*x4922))+(((-1.0)*x4919))+(((-1.0)*x4915*x4923))+((r01*x4924)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4921*x4922))+((x4914*x4917))+(((-1.0)*cj1*x4918))+((r22*x4913)));
evalcond[4]=((((-1.0)*cj0*sj1*x4918))+((r02*x4913))+(((-1.0)*x4915*x4922))+((r01*x4925))+(((-1.0)*cj0*x4920)));
evalcond[5]=((((-1.0)*x4916*x4922))+(((-1.0)*sj0*sj1*x4918))+(((-1.0)*x4919*x4920))+((r12*x4913))+((r11*x4925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4926=((1.0)*cj5);
IkReal x4927=((1.0)*sj5);
IkReal x4928=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4928;
j0eval[1]=((IKabs(((((-1.0)*r11*x4926))+(((-1.0)*r10*x4927)))))+(IKabs(((((-1.0)*r01*x4926))+(((-1.0)*r00*x4927))))));
j0eval[2]=IKsign(x4928);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4929=r21*r21;
IkReal x4930=cj5*cj5;
IkReal x4931=(cj2*sj1);
IkReal x4932=(cj1*sj2);
IkReal x4933=(r21*sj5);
IkReal x4934=((1.0)*cj5*r20);
IkReal x4935=((((-1.0)*x4930*(r20*r20)))+(((2.0)*cj5*r20*x4933))+(((-1.0)*x4929))+(((-1.0)*(r22*r22)))+((x4929*x4930)));
j4eval[0]=x4935;
j4eval[1]=((IKabs((((r22*x4931))+((r22*x4932)))))+(IKabs((((x4932*x4933))+(((-1.0)*x4931*x4934))+(((-1.0)*x4932*x4934))+((x4931*x4933))))));
j4eval[2]=IKsign(x4935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4936=cj1*cj1;
IkReal x4937=(cj2*sj2);
IkReal x4938=(cj2*sj1);
IkReal x4939=(cj1*sj1);
j0eval[0]=(x4937+x4939+(((-2.0)*x4936*x4937))+(((-1.08349267049076)*cj1*x4938))+(((-1.08349267049076)*sj2*x4936))+(((-2.0)*cj1*cj2*x4938)));
j0eval[1]=((((-1.0)*x4938))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4940=IKsin(j0);
IkReal x4941=IKcos(j0);
evalcond[0]=((((-0.10915)*x4940))+(((0.81725)*x4941))+(((-1.0)*px)));
evalcond[1]=((((0.81725)*x4940))+(((-1.0)*py))+(((0.10915)*x4941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4942=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4942;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4943=((1.0)*cj5);
IkReal x4944=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4943)));
j4eval[0]=x4944;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x4943))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4945=((1.0)*cj5);
IkReal x4946=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4945)));
j4eval[0]=x4946;
j4eval[1]=IKsign(x4946);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x4945))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4947=((1.0)*cj5);
CheckValue<IkReal> x4948 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4947))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4948.valid){
continue;
}
CheckValue<IkReal> x4949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4947)))),-1);
if(!x4949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4948.value)+(((1.5707963267949)*(x4949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4950=IKcos(j4);
IkReal x4951=IKsin(j4);
IkReal x4952=((1.0)*sj0);
IkReal x4953=(cj5*r00);
IkReal x4954=(cj5*r10);
IkReal x4955=(cj5*r20);
IkReal x4956=((1.0)*x4950);
IkReal x4957=((1.0)*x4951);
IkReal x4958=(sj5*x4950);
IkReal x4959=(sj5*x4951);
evalcond[0]=(((r22*x4951))+(((-1.0)*x4955*x4956))+((r21*x4958)));
evalcond[1]=((((-1.0)*x4955*x4957))+(((-1.0)*r22*x4956))+((r21*x4959)));
evalcond[2]=(cj0+((r11*x4959))+(((-1.0)*r12*x4956))+(((-1.0)*x4954*x4957)));
evalcond[3]=(((r02*x4951))+((r01*x4958))+(((-1.0)*x4953*x4956))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4951))+(((-1.0)*x4952))+((r11*x4958))+(((-1.0)*x4954*x4956)));
evalcond[5]=((((-1.0)*x4952))+(((-1.0)*r02*x4956))+((r01*x4959))+(((-1.0)*x4953*x4957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4960=((1.0)*cj5);
CheckValue<IkReal> x4961=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4960)))),-1);
if(!x4961.valid){
continue;
}
CheckValue<IkReal> x4962 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4961.value)))+(x4962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4963=IKcos(j4);
IkReal x4964=IKsin(j4);
IkReal x4965=((1.0)*sj0);
IkReal x4966=(cj5*r00);
IkReal x4967=(cj5*r10);
IkReal x4968=(cj5*r20);
IkReal x4969=((1.0)*x4963);
IkReal x4970=((1.0)*x4964);
IkReal x4971=(sj5*x4963);
IkReal x4972=(sj5*x4964);
evalcond[0]=((((-1.0)*x4968*x4969))+((r22*x4964))+((r21*x4971)));
evalcond[1]=((((-1.0)*x4968*x4970))+(((-1.0)*r22*x4969))+((r21*x4972)));
evalcond[2]=(cj0+((r11*x4972))+(((-1.0)*r12*x4969))+(((-1.0)*x4967*x4970)));
evalcond[3]=(((r02*x4964))+(((-1.0)*x4966*x4969))+(((-1.0)*cj0))+((r01*x4971)));
evalcond[4]=(((r12*x4964))+(((-1.0)*x4965))+((r11*x4971))+(((-1.0)*x4967*x4969)));
evalcond[5]=((((-1.0)*x4965))+(((-1.0)*r02*x4969))+(((-1.0)*x4966*x4970))+((r01*x4972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4973 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4973.valid){
continue;
}
CheckValue<IkReal> x4974=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4973.value)+(((1.5707963267949)*(x4974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4975=IKcos(j4);
IkReal x4976=IKsin(j4);
IkReal x4977=((1.0)*sj0);
IkReal x4978=(cj5*r00);
IkReal x4979=(cj5*r10);
IkReal x4980=(cj5*r20);
IkReal x4981=((1.0)*x4975);
IkReal x4982=((1.0)*x4976);
IkReal x4983=(sj5*x4975);
IkReal x4984=(sj5*x4976);
evalcond[0]=(((r22*x4976))+((r21*x4983))+(((-1.0)*x4980*x4981)));
evalcond[1]=((((-1.0)*r22*x4981))+((r21*x4984))+(((-1.0)*x4980*x4982)));
evalcond[2]=(cj0+((r11*x4984))+(((-1.0)*r12*x4981))+(((-1.0)*x4979*x4982)));
evalcond[3]=(((r01*x4983))+((r02*x4976))+(((-1.0)*x4978*x4981))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4983))+((r12*x4976))+(((-1.0)*x4977))+(((-1.0)*x4979*x4981)));
evalcond[5]=(((r01*x4984))+(((-1.0)*x4977))+(((-1.0)*x4978*x4982))+(((-1.0)*r02*x4981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4985=IKsin(j0);
IkReal x4986=IKcos(j0);
evalcond[0]=((((-0.10915)*x4985))+(((0.03275)*x4986))+(((-1.0)*px)));
evalcond[1]=((((0.03275)*x4985))+(((-1.0)*py))+(((0.10915)*x4986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4987=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4987;
j4eval[1]=IKsign(x4987);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4988=((1.0)*cj5);
IkReal x4989=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4988)));
j4eval[0]=x4989;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4988)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4990=cj5*cj5;
IkReal x4991=((1.0)*r20);
IkReal x4992=(r01*r21);
IkReal x4993=(r21*sj5);
IkReal x4994=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4992))+((cj5*r00*x4993))+((x4990*x4992))+(((-1.0)*r00*x4990*x4991)));
j4eval[0]=x4994;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x4991))+((cj0*x4993))))));
j4eval[2]=IKsign(x4994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4995=cj5*cj5;
IkReal x4996=((1.0)*r20);
IkReal x4997=(r01*r21);
IkReal x4998=(r21*sj5);
CheckValue<IkReal> x4999 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4996))+((cj0*x4998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4999.valid){
continue;
}
CheckValue<IkReal> x5000=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x4995*x4997))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4995*x4996))+(((-1.0)*x4997))+((cj5*r00*x4998)))),-1);
if(!x5000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4999.value)+(((1.5707963267949)*(x5000.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5001=IKcos(j4);
IkReal x5002=IKsin(j4);
IkReal x5003=(cj5*r00);
IkReal x5004=(cj5*r10);
IkReal x5005=(cj5*r20);
IkReal x5006=((1.0)*x5001);
IkReal x5007=((1.0)*x5002);
IkReal x5008=(sj5*x5001);
IkReal x5009=(sj5*x5002);
evalcond[0]=(((r22*x5002))+((r21*x5008))+(((-1.0)*x5005*x5006)));
evalcond[1]=(((r21*x5009))+(((-1.0)*x5005*x5007))+(((-1.0)*r22*x5006)));
evalcond[2]=((((-1.0)*x5003*x5006))+cj0+((r02*x5002))+((r01*x5008)));
evalcond[3]=(((r12*x5002))+sj0+((r11*x5008))+(((-1.0)*x5004*x5006)));
evalcond[4]=(((r11*x5009))+cj0+(((-1.0)*x5004*x5007))+(((-1.0)*r12*x5006)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5003*x5007))+((r01*x5009))+(((-1.0)*r02*x5006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5010=((1.0)*cj5);
CheckValue<IkReal> x5011=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5010)))),-1);
if(!x5011.valid){
continue;
}
CheckValue<IkReal> x5012 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5010)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5011.value)))+(x5012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5013=IKcos(j4);
IkReal x5014=IKsin(j4);
IkReal x5015=(cj5*r00);
IkReal x5016=(cj5*r10);
IkReal x5017=(cj5*r20);
IkReal x5018=((1.0)*x5013);
IkReal x5019=((1.0)*x5014);
IkReal x5020=(sj5*x5013);
IkReal x5021=(sj5*x5014);
evalcond[0]=((((-1.0)*x5017*x5018))+((r22*x5014))+((r21*x5020)));
evalcond[1]=((((-1.0)*x5017*x5019))+(((-1.0)*r22*x5018))+((r21*x5021)));
evalcond[2]=(cj0+((r02*x5014))+((r01*x5020))+(((-1.0)*x5015*x5018)));
evalcond[3]=(((r11*x5020))+sj0+(((-1.0)*x5016*x5018))+((r12*x5014)));
evalcond[4]=(((r11*x5021))+cj0+(((-1.0)*x5016*x5019))+(((-1.0)*r12*x5018)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5018))+((r01*x5021))+(((-1.0)*x5015*x5019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5022 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5022.valid){
continue;
}
CheckValue<IkReal> x5023=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5022.value)+(((1.5707963267949)*(x5023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5024=IKcos(j4);
IkReal x5025=IKsin(j4);
IkReal x5026=(cj5*r00);
IkReal x5027=(cj5*r10);
IkReal x5028=(cj5*r20);
IkReal x5029=((1.0)*x5024);
IkReal x5030=((1.0)*x5025);
IkReal x5031=(sj5*x5024);
IkReal x5032=(sj5*x5025);
evalcond[0]=((((-1.0)*x5028*x5029))+((r22*x5025))+((r21*x5031)));
evalcond[1]=((((-1.0)*x5028*x5030))+((r21*x5032))+(((-1.0)*r22*x5029)));
evalcond[2]=(((r02*x5025))+cj0+((r01*x5031))+(((-1.0)*x5026*x5029)));
evalcond[3]=(sj0+((r12*x5025))+((r11*x5031))+(((-1.0)*x5027*x5029)));
evalcond[4]=((((-1.0)*x5027*x5030))+cj0+((r11*x5032))+(((-1.0)*r12*x5029)));
evalcond[5]=((((-1.0)*r02*x5029))+(((-1.0)*sj0))+((r01*x5032))+(((-1.0)*x5026*x5030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5033=IKsin(j0);
IkReal x5034=IKcos(j0);
IkReal x5035=(r00*sj5);
IkReal x5036=(r10*sj5);
IkReal x5037=(cj5*r11);
IkReal x5038=(cj5*r01);
evalcond[0]=((((-1.0)*x5034))+x5038+x5035);
evalcond[1]=((((-1.0)*x5033))+x5036+x5037);
evalcond[2]=((((-0.09465)*x5038))+(((-0.09465)*x5035))+(((-1.0)*px))+(((-0.10915)*x5033)));
evalcond[3]=((((-0.09465)*x5036))+(((-0.09465)*x5037))+(((0.10915)*x5034))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5039=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5039;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5040=((1.0)*cj5);
IkReal x5041=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5040)));
j4eval[0]=x5041;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5040))+((r11*sj5))))));
j4eval[2]=IKsign(x5041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5042=cj5*cj5;
IkReal x5043=(r01*r11);
IkReal x5044=((1.0)*r00);
IkReal x5045=(r01*sj5);
IkReal x5046=((((-1.0)*r02*r12))+(((-1.0)*r10*x5042*x5044))+((x5042*x5043))+(((-1.0)*x5043))+((cj5*r10*x5045))+((cj5*r00*r11*sj5)));
j4eval[0]=x5046;
j4eval[1]=IKsign(x5046);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5045))+(((-1.0)*cj0*cj5*x5044))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5047=cj5*cj5;
IkReal x5048=(r01*r11);
IkReal x5049=(cj5*r00);
IkReal x5050=(r01*sj5);
CheckValue<IkReal> x5051 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5049))+((cj0*x5050)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5051.valid){
continue;
}
CheckValue<IkReal> x5052=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((cj5*r10*x5050))+(((-1.0)*x5048))+((x5047*x5048))+(((-1.0)*r00*r10*x5047))+((r11*sj5*x5049)))),-1);
if(!x5052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5051.value)+(((1.5707963267949)*(x5052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5053=IKcos(j4);
IkReal x5054=IKsin(j4);
IkReal x5055=(cj5*r00);
IkReal x5056=(r01*sj5);
IkReal x5057=(cj5*r10);
IkReal x5058=(cj5*r20);
IkReal x5059=((1.0)*x5053);
IkReal x5060=((1.0)*x5054);
IkReal x5061=(sj5*x5054);
IkReal x5062=(sj5*x5053);
evalcond[0]=((((-1.0)*x5055*x5059))+((x5053*x5056))+((r02*x5054)));
evalcond[1]=(((r12*x5054))+((r11*x5062))+(((-1.0)*x5057*x5059)));
evalcond[2]=((((-1.0)*x5058*x5060))+(((-1.0)*r22*x5059))+((r21*x5061)));
evalcond[3]=((1.0)+((r22*x5054))+((r21*x5062))+(((-1.0)*x5058*x5059)));
evalcond[4]=(cj0+(((-1.0)*r12*x5059))+(((-1.0)*x5057*x5060))+((r11*x5061)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5055*x5060))+(((-1.0)*r02*x5059))+((x5054*x5056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5063=((1.0)*cj5);
CheckValue<IkReal> x5064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5063)))),-1);
if(!x5064.valid){
continue;
}
CheckValue<IkReal> x5065 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5063)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5064.value)))+(x5065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5066=IKcos(j4);
IkReal x5067=IKsin(j4);
IkReal x5068=(cj5*r00);
IkReal x5069=(r01*sj5);
IkReal x5070=(cj5*r10);
IkReal x5071=(cj5*r20);
IkReal x5072=((1.0)*x5066);
IkReal x5073=((1.0)*x5067);
IkReal x5074=(sj5*x5067);
IkReal x5075=(sj5*x5066);
evalcond[0]=(((x5066*x5069))+((r02*x5067))+(((-1.0)*x5068*x5072)));
evalcond[1]=((((-1.0)*x5070*x5072))+((r12*x5067))+((r11*x5075)));
evalcond[2]=(((r21*x5074))+(((-1.0)*r22*x5072))+(((-1.0)*x5071*x5073)));
evalcond[3]=((1.0)+((r21*x5075))+((r22*x5067))+(((-1.0)*x5071*x5072)));
evalcond[4]=(cj0+(((-1.0)*x5070*x5073))+(((-1.0)*r12*x5072))+((r11*x5074)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5072))+((x5067*x5069))+(((-1.0)*x5068*x5073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5076 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5076.valid){
continue;
}
CheckValue<IkReal> x5077=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5076.value)+(((1.5707963267949)*(x5077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5078=IKcos(j4);
IkReal x5079=IKsin(j4);
IkReal x5080=(cj5*r00);
IkReal x5081=(r01*sj5);
IkReal x5082=(cj5*r10);
IkReal x5083=(cj5*r20);
IkReal x5084=((1.0)*x5078);
IkReal x5085=((1.0)*x5079);
IkReal x5086=(sj5*x5079);
IkReal x5087=(sj5*x5078);
evalcond[0]=((((-1.0)*x5080*x5084))+((r02*x5079))+((x5078*x5081)));
evalcond[1]=((((-1.0)*x5082*x5084))+((r11*x5087))+((r12*x5079)));
evalcond[2]=(((r21*x5086))+(((-1.0)*x5083*x5085))+(((-1.0)*r22*x5084)));
evalcond[3]=((1.0)+((r21*x5087))+(((-1.0)*x5083*x5084))+((r22*x5079)));
evalcond[4]=((((-1.0)*r12*x5084))+cj0+(((-1.0)*x5082*x5085))+((r11*x5086)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5080*x5085))+((x5079*x5081))+(((-1.0)*r02*x5084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5088=IKcos(j0);
IkReal x5089=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x5088))+(((-0.10915)*x5089)));
evalcond[1]=((((0.10915)*x5088))+(((-1.0)*py))+(((-0.39225)*x5089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5090=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5090;
j4eval[1]=IKsign(x5090);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5091=((1.0)*cj5);
IkReal x5092=((((-1.0)*r11*x5091))+(((-1.0)*r10*sj5)));
j4eval[0]=x5092;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5091)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5092);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5093=cj5*cj5;
IkReal x5094=((1.0)*r20);
IkReal x5095=(r01*r21);
IkReal x5096=(r21*sj5);
IkReal x5097=(((cj5*r01*r20*sj5))+((x5093*x5095))+(((-1.0)*r02*r22))+(((-1.0)*x5095))+((cj5*r00*x5096))+(((-1.0)*r00*x5093*x5094)));
j4eval[0]=x5097;
j4eval[1]=((IKabs((((cj0*x5096))+(((-1.0)*cj0*cj5*x5094)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5097);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5098=cj5*cj5;
IkReal x5099=((1.0)*r20);
IkReal x5100=(r01*r21);
IkReal x5101=(r21*sj5);
CheckValue<IkReal> x5102=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5098*x5100))+(((-1.0)*x5100))+(((-1.0)*r00*x5098*x5099))+((cj5*r00*x5101)))),-1);
if(!x5102.valid){
continue;
}
CheckValue<IkReal> x5103 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5101))+(((-1.0)*cj0*cj5*x5099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5102.value)))+(x5103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5104=IKcos(j4);
IkReal x5105=IKsin(j4);
IkReal x5106=(cj5*r00);
IkReal x5107=(cj5*r10);
IkReal x5108=(cj5*r20);
IkReal x5109=((1.0)*x5104);
IkReal x5110=((1.0)*x5105);
IkReal x5111=(sj5*x5104);
IkReal x5112=(sj5*x5105);
evalcond[0]=(((r22*x5105))+((r21*x5111))+(((-1.0)*x5108*x5109)));
evalcond[1]=((((-1.0)*r22*x5109))+((r21*x5112))+(((-1.0)*x5108*x5110)));
evalcond[2]=(((r01*x5111))+(((-1.0)*x5106*x5109))+cj0+((r02*x5105)));
evalcond[3]=(((r12*x5105))+sj0+(((-1.0)*x5107*x5109))+((r11*x5111)));
evalcond[4]=(cj0+(((-1.0)*x5107*x5110))+(((-1.0)*r12*x5109))+((r11*x5112)));
evalcond[5]=(((r01*x5112))+(((-1.0)*sj0))+(((-1.0)*r02*x5109))+(((-1.0)*x5106*x5110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5113=((1.0)*cj5);
CheckValue<IkReal> x5114=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5113)))),-1);
if(!x5114.valid){
continue;
}
CheckValue<IkReal> x5115 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5113)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5114.value)))+(x5115.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5116=IKcos(j4);
IkReal x5117=IKsin(j4);
IkReal x5118=(cj5*r00);
IkReal x5119=(cj5*r10);
IkReal x5120=(cj5*r20);
IkReal x5121=((1.0)*x5116);
IkReal x5122=((1.0)*x5117);
IkReal x5123=(sj5*x5116);
IkReal x5124=(sj5*x5117);
evalcond[0]=(((r22*x5117))+((r21*x5123))+(((-1.0)*x5120*x5121)));
evalcond[1]=(((r21*x5124))+(((-1.0)*x5120*x5122))+(((-1.0)*r22*x5121)));
evalcond[2]=(cj0+((r02*x5117))+((r01*x5123))+(((-1.0)*x5118*x5121)));
evalcond[3]=(sj0+((r11*x5123))+(((-1.0)*x5119*x5121))+((r12*x5117)));
evalcond[4]=(cj0+((r11*x5124))+(((-1.0)*r12*x5121))+(((-1.0)*x5119*x5122)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5124))+(((-1.0)*x5118*x5122))+(((-1.0)*r02*x5121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5125 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5125.valid){
continue;
}
CheckValue<IkReal> x5126=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5125.value)+(((1.5707963267949)*(x5126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5127=IKcos(j4);
IkReal x5128=IKsin(j4);
IkReal x5129=(cj5*r00);
IkReal x5130=(cj5*r10);
IkReal x5131=(cj5*r20);
IkReal x5132=((1.0)*x5127);
IkReal x5133=((1.0)*x5128);
IkReal x5134=(sj5*x5127);
IkReal x5135=(sj5*x5128);
evalcond[0]=(((r22*x5128))+(((-1.0)*x5131*x5132))+((r21*x5134)));
evalcond[1]=((((-1.0)*x5131*x5133))+((r21*x5135))+(((-1.0)*r22*x5132)));
evalcond[2]=(cj0+((r01*x5134))+(((-1.0)*x5129*x5132))+((r02*x5128)));
evalcond[3]=(sj0+((r12*x5128))+((r11*x5134))+(((-1.0)*x5130*x5132)));
evalcond[4]=(cj0+((r11*x5135))+(((-1.0)*x5130*x5133))+(((-1.0)*r12*x5132)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5135))+(((-1.0)*x5129*x5133))+(((-1.0)*r02*x5132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5136=((1.0)*sj5);
IkReal x5137=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5136))+(((-1.0)*r11*x5137)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5137))+(((-1.0)*r00*x5136)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5136))+(((-1.0)*r11*x5137))))+IKsqr(((((-1.0)*r01*x5137))+(((-1.0)*r00*x5136))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5136))+(((-1.0)*r11*x5137))), ((((-1.0)*r01*x5137))+(((-1.0)*r00*x5136))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5138=IKsin(j0);
IkReal x5139=IKcos(j0);
IkReal x5140=(r00*sj5);
IkReal x5141=(r10*sj5);
IkReal x5142=(cj5*r11);
IkReal x5143=(cj5*r01);
evalcond[0]=(x5143+x5140+x5139);
evalcond[1]=(x5142+x5141+x5138);
evalcond[2]=((((-0.09465)*x5143))+(((-0.09465)*x5140))+(((-0.10915)*x5138))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x5142))+(((-0.09465)*x5141))+(((0.10915)*x5139))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5144=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5144;
j4eval[1]=IKsign(x5144);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5145=((1.0)*cj5);
IkReal x5146=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5145)));
j4eval[0]=x5146;
j4eval[1]=IKsign(x5146);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5145))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5147=cj5*cj5;
IkReal x5148=(r01*r11);
IkReal x5149=((1.0)*r00);
IkReal x5150=(r01*sj5);
IkReal x5151=(((cj5*r10*x5150))+((x5147*x5148))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5147*x5149))+(((-1.0)*x5148))+((cj5*r00*r11*sj5)));
j4eval[0]=x5151;
j4eval[1]=IKsign(x5151);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5150))+(((-1.0)*cj0*cj5*x5149))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5152=cj5*cj5;
IkReal x5153=(r01*r11);
IkReal x5154=(cj5*r00);
IkReal x5155=(r01*sj5);
CheckValue<IkReal> x5156 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5154))+((cj0*x5155)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5156.valid){
continue;
}
CheckValue<IkReal> x5157=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5155))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x5152))+(((-1.0)*x5153))+((x5152*x5153))+((r11*sj5*x5154)))),-1);
if(!x5157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5156.value)+(((1.5707963267949)*(x5157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5158=IKcos(j4);
IkReal x5159=IKsin(j4);
IkReal x5160=(cj5*r00);
IkReal x5161=(r01*sj5);
IkReal x5162=(cj5*r10);
IkReal x5163=(cj5*r20);
IkReal x5164=((1.0)*x5158);
IkReal x5165=((1.0)*x5159);
IkReal x5166=(sj5*x5159);
IkReal x5167=(sj5*x5158);
evalcond[0]=((((-1.0)*x5160*x5164))+((x5158*x5161))+((r02*x5159)));
evalcond[1]=(((r12*x5159))+(((-1.0)*x5162*x5164))+((r11*x5167)));
evalcond[2]=((((-1.0)*r22*x5164))+((r21*x5166))+(((-1.0)*x5163*x5165)));
evalcond[3]=((-1.0)+((r21*x5167))+(((-1.0)*x5163*x5164))+((r22*x5159)));
evalcond[4]=(cj0+(((-1.0)*r12*x5164))+(((-1.0)*x5162*x5165))+((r11*x5166)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5160*x5165))+(((-1.0)*r02*x5164))+((x5159*x5161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5168=((1.0)*cj5);
CheckValue<IkReal> x5169 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5168)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5169.valid){
continue;
}
CheckValue<IkReal> x5170=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5168)))),-1);
if(!x5170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5169.value)+(((1.5707963267949)*(x5170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5171=IKcos(j4);
IkReal x5172=IKsin(j4);
IkReal x5173=(cj5*r00);
IkReal x5174=(r01*sj5);
IkReal x5175=(cj5*r10);
IkReal x5176=(cj5*r20);
IkReal x5177=((1.0)*x5171);
IkReal x5178=((1.0)*x5172);
IkReal x5179=(sj5*x5172);
IkReal x5180=(sj5*x5171);
evalcond[0]=((((-1.0)*x5173*x5177))+((r02*x5172))+((x5171*x5174)));
evalcond[1]=((((-1.0)*x5175*x5177))+((r12*x5172))+((r11*x5180)));
evalcond[2]=((((-1.0)*x5176*x5178))+(((-1.0)*r22*x5177))+((r21*x5179)));
evalcond[3]=((-1.0)+(((-1.0)*x5176*x5177))+((r21*x5180))+((r22*x5172)));
evalcond[4]=((((-1.0)*x5175*x5178))+cj0+(((-1.0)*r12*x5177))+((r11*x5179)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5173*x5178))+(((-1.0)*r02*x5177))+((x5172*x5174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5181=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5181.valid){
continue;
}
CheckValue<IkReal> x5182 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5181.value)))+(x5182.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5183=IKcos(j4);
IkReal x5184=IKsin(j4);
IkReal x5185=(cj5*r00);
IkReal x5186=(r01*sj5);
IkReal x5187=(cj5*r10);
IkReal x5188=(cj5*r20);
IkReal x5189=((1.0)*x5183);
IkReal x5190=((1.0)*x5184);
IkReal x5191=(sj5*x5184);
IkReal x5192=(sj5*x5183);
evalcond[0]=(((x5183*x5186))+(((-1.0)*x5185*x5189))+((r02*x5184)));
evalcond[1]=(((r11*x5192))+(((-1.0)*x5187*x5189))+((r12*x5184)));
evalcond[2]=((((-1.0)*r22*x5189))+((r21*x5191))+(((-1.0)*x5188*x5190)));
evalcond[3]=((-1.0)+((r22*x5184))+(((-1.0)*x5188*x5189))+((r21*x5192)));
evalcond[4]=(cj0+((r11*x5191))+(((-1.0)*x5187*x5190))+(((-1.0)*r12*x5189)));
evalcond[5]=((((-1.0)*x5185*x5190))+(((-1.0)*sj0))+(((-1.0)*r02*x5189))+((x5184*x5186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5193=IKsin(j0);
IkReal x5194=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x5193))+(((0.39225)*x5194)));
evalcond[1]=((((0.10915)*x5194))+(((-1.0)*py))+(((0.39225)*x5193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5195=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5195;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5195);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5196=((1.0)*cj5);
IkReal x5197=((((-1.0)*r01*x5196))+(((-1.0)*r00*sj5)));
j4eval[0]=x5197;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5196))))));
j4eval[2]=IKsign(x5197);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5198=((1.0)*cj5);
IkReal x5199=((((-1.0)*r01*x5198))+(((-1.0)*r00*sj5)));
j4eval[0]=x5199;
j4eval[1]=IKsign(x5199);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5198)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5200=((1.0)*cj5);
CheckValue<IkReal> x5201 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5200))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5201.valid){
continue;
}
CheckValue<IkReal> x5202=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5200)))),-1);
if(!x5202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5201.value)+(((1.5707963267949)*(x5202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5203=IKcos(j4);
IkReal x5204=IKsin(j4);
IkReal x5205=((1.0)*sj0);
IkReal x5206=(cj5*r00);
IkReal x5207=(cj5*r10);
IkReal x5208=(cj5*r20);
IkReal x5209=((1.0)*x5203);
IkReal x5210=((1.0)*x5204);
IkReal x5211=(sj5*x5203);
IkReal x5212=(sj5*x5204);
evalcond[0]=(((r22*x5204))+(((-1.0)*x5208*x5209))+((r21*x5211)));
evalcond[1]=((((-1.0)*r22*x5209))+((r21*x5212))+(((-1.0)*x5208*x5210)));
evalcond[2]=(cj0+((r11*x5212))+(((-1.0)*r12*x5209))+(((-1.0)*x5207*x5210)));
evalcond[3]=(((r01*x5211))+(((-1.0)*x5206*x5209))+((r02*x5204))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5205))+((r11*x5211))+((r12*x5204))+(((-1.0)*x5207*x5209)));
evalcond[5]=((((-1.0)*x5205))+((r01*x5212))+(((-1.0)*r02*x5209))+(((-1.0)*x5206*x5210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5213=((1.0)*cj5);
CheckValue<IkReal> x5214 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5214.valid){
continue;
}
CheckValue<IkReal> x5215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5213)))),-1);
if(!x5215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5214.value)+(((1.5707963267949)*(x5215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5216=IKcos(j4);
IkReal x5217=IKsin(j4);
IkReal x5218=((1.0)*sj0);
IkReal x5219=(cj5*r00);
IkReal x5220=(cj5*r10);
IkReal x5221=(cj5*r20);
IkReal x5222=((1.0)*x5216);
IkReal x5223=((1.0)*x5217);
IkReal x5224=(sj5*x5216);
IkReal x5225=(sj5*x5217);
evalcond[0]=(((r21*x5224))+(((-1.0)*x5221*x5222))+((r22*x5217)));
evalcond[1]=(((r21*x5225))+(((-1.0)*x5221*x5223))+(((-1.0)*r22*x5222)));
evalcond[2]=(cj0+(((-1.0)*r12*x5222))+(((-1.0)*x5220*x5223))+((r11*x5225)));
evalcond[3]=((((-1.0)*x5219*x5222))+((r02*x5217))+((r01*x5224))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5218))+((r12*x5217))+(((-1.0)*x5220*x5222))+((r11*x5224)));
evalcond[5]=((((-1.0)*x5218))+(((-1.0)*x5219*x5223))+(((-1.0)*r02*x5222))+((r01*x5225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5226 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5226.valid){
continue;
}
CheckValue<IkReal> x5227=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5226.value)+(((1.5707963267949)*(x5227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5228=IKcos(j4);
IkReal x5229=IKsin(j4);
IkReal x5230=((1.0)*sj0);
IkReal x5231=(cj5*r00);
IkReal x5232=(cj5*r10);
IkReal x5233=(cj5*r20);
IkReal x5234=((1.0)*x5228);
IkReal x5235=((1.0)*x5229);
IkReal x5236=(sj5*x5228);
IkReal x5237=(sj5*x5229);
evalcond[0]=(((r22*x5229))+((r21*x5236))+(((-1.0)*x5233*x5234)));
evalcond[1]=((((-1.0)*r22*x5234))+((r21*x5237))+(((-1.0)*x5233*x5235)));
evalcond[2]=(cj0+((r11*x5237))+(((-1.0)*r12*x5234))+(((-1.0)*x5232*x5235)));
evalcond[3]=(((r02*x5229))+((r01*x5236))+(((-1.0)*x5231*x5234))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5230))+((r11*x5236))+(((-1.0)*x5232*x5234))+((r12*x5229)));
evalcond[5]=((((-1.0)*x5230))+(((-1.0)*r02*x5234))+((r01*x5237))+(((-1.0)*x5231*x5235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5238=IKcos(j0);
IkReal x5239=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x5238))+(((-0.10915)*x5239)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x5238))+(((-0.81725)*x5239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5240=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5240;
j4eval[1]=IKsign(x5240);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5241=((1.0)*cj5);
IkReal x5242=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5241)));
j4eval[0]=x5242;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5241))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5243=cj5*cj5;
IkReal x5244=((1.0)*r20);
IkReal x5245=(r01*r21);
IkReal x5246=(r21*sj5);
IkReal x5247=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5245))+(((-1.0)*r00*x5243*x5244))+((x5243*x5245))+((cj5*r00*x5246)));
j4eval[0]=x5247;
j4eval[1]=((IKabs((((cj0*x5246))+(((-1.0)*cj0*cj5*x5244)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5248=cj5*cj5;
IkReal x5249=((1.0)*r20);
IkReal x5250=(r01*r21);
IkReal x5251=(r21*sj5);
CheckValue<IkReal> x5252 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5251))+(((-1.0)*cj0*cj5*x5249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5252.valid){
continue;
}
CheckValue<IkReal> x5253=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x5251))+(((-1.0)*r02*r22))+(((-1.0)*x5250))+(((-1.0)*r00*x5248*x5249))+((x5248*x5250)))),-1);
if(!x5253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5252.value)+(((1.5707963267949)*(x5253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5254=IKcos(j4);
IkReal x5255=IKsin(j4);
IkReal x5256=(cj5*r00);
IkReal x5257=(cj5*r10);
IkReal x5258=(cj5*r20);
IkReal x5259=((1.0)*x5254);
IkReal x5260=((1.0)*x5255);
IkReal x5261=(sj5*x5254);
IkReal x5262=(sj5*x5255);
evalcond[0]=(((r22*x5255))+(((-1.0)*x5258*x5259))+((r21*x5261)));
evalcond[1]=((((-1.0)*x5258*x5260))+(((-1.0)*r22*x5259))+((r21*x5262)));
evalcond[2]=(cj0+((r01*x5261))+(((-1.0)*x5256*x5259))+((r02*x5255)));
evalcond[3]=(sj0+((r12*x5255))+((r11*x5261))+(((-1.0)*x5257*x5259)));
evalcond[4]=(cj0+((r11*x5262))+(((-1.0)*r12*x5259))+(((-1.0)*x5257*x5260)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5259))+((r01*x5262))+(((-1.0)*x5256*x5260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5263=((1.0)*cj5);
CheckValue<IkReal> x5264=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5263)))),-1);
if(!x5264.valid){
continue;
}
CheckValue<IkReal> x5265 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5263)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5264.value)))+(x5265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5266=IKcos(j4);
IkReal x5267=IKsin(j4);
IkReal x5268=(cj5*r00);
IkReal x5269=(cj5*r10);
IkReal x5270=(cj5*r20);
IkReal x5271=((1.0)*x5266);
IkReal x5272=((1.0)*x5267);
IkReal x5273=(sj5*x5266);
IkReal x5274=(sj5*x5267);
evalcond[0]=(((r21*x5273))+(((-1.0)*x5270*x5271))+((r22*x5267)));
evalcond[1]=(((r21*x5274))+(((-1.0)*x5270*x5272))+(((-1.0)*r22*x5271)));
evalcond[2]=(((r02*x5267))+cj0+((r01*x5273))+(((-1.0)*x5268*x5271)));
evalcond[3]=(sj0+((r12*x5267))+(((-1.0)*x5269*x5271))+((r11*x5273)));
evalcond[4]=(cj0+(((-1.0)*r12*x5271))+(((-1.0)*x5269*x5272))+((r11*x5274)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5274))+(((-1.0)*r02*x5271))+(((-1.0)*x5268*x5272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5275 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5275.valid){
continue;
}
CheckValue<IkReal> x5276=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5275.value)+(((1.5707963267949)*(x5276.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5277=IKcos(j4);
IkReal x5278=IKsin(j4);
IkReal x5279=(cj5*r00);
IkReal x5280=(cj5*r10);
IkReal x5281=(cj5*r20);
IkReal x5282=((1.0)*x5277);
IkReal x5283=((1.0)*x5278);
IkReal x5284=(sj5*x5277);
IkReal x5285=(sj5*x5278);
evalcond[0]=((((-1.0)*x5281*x5282))+((r22*x5278))+((r21*x5284)));
evalcond[1]=((((-1.0)*r22*x5282))+(((-1.0)*x5281*x5283))+((r21*x5285)));
evalcond[2]=(((r02*x5278))+(((-1.0)*x5279*x5282))+cj0+((r01*x5284)));
evalcond[3]=(sj0+((r11*x5284))+(((-1.0)*x5280*x5282))+((r12*x5278)));
evalcond[4]=(cj0+(((-1.0)*r12*x5282))+((r11*x5285))+(((-1.0)*x5280*x5283)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5279*x5283))+((r01*x5285))+(((-1.0)*r02*x5282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5286=IKcos(j0);
IkReal x5287=IKsin(j0);
evalcond[0]=((((-0.03275)*x5286))+(((-1.0)*px))+(((-0.10915)*x5287)));
evalcond[1]=((((-0.03275)*x5287))+(((-1.0)*py))+(((0.10915)*x5286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5288=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5288;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5289=((1.0)*cj5);
IkReal x5290=((((-1.0)*r01*x5289))+(((-1.0)*r00*sj5)));
j4eval[0]=x5290;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5289)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5291=((1.0)*cj5);
IkReal x5292=((((-1.0)*r01*x5291))+(((-1.0)*r00*sj5)));
j4eval[0]=x5292;
j4eval[1]=IKsign(x5292);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5291))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5293=((1.0)*cj5);
CheckValue<IkReal> x5294 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5293)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5294.valid){
continue;
}
CheckValue<IkReal> x5295=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5293))+(((-1.0)*r00*sj5)))),-1);
if(!x5295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5294.value)+(((1.5707963267949)*(x5295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5296=IKcos(j4);
IkReal x5297=IKsin(j4);
IkReal x5298=((1.0)*sj0);
IkReal x5299=(cj5*r00);
IkReal x5300=(cj5*r10);
IkReal x5301=(cj5*r20);
IkReal x5302=((1.0)*x5296);
IkReal x5303=((1.0)*x5297);
IkReal x5304=(sj5*x5296);
IkReal x5305=(sj5*x5297);
evalcond[0]=(((r21*x5304))+((r22*x5297))+(((-1.0)*x5301*x5302)));
evalcond[1]=((((-1.0)*r22*x5302))+((r21*x5305))+(((-1.0)*x5301*x5303)));
evalcond[2]=(cj0+(((-1.0)*r12*x5302))+(((-1.0)*x5300*x5303))+((r11*x5305)));
evalcond[3]=(((r02*x5297))+((r01*x5304))+(((-1.0)*x5299*x5302))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5297))+(((-1.0)*x5300*x5302))+(((-1.0)*x5298))+((r11*x5304)));
evalcond[5]=((((-1.0)*x5298))+(((-1.0)*r02*x5302))+((r01*x5305))+(((-1.0)*x5299*x5303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5306=((1.0)*cj5);
CheckValue<IkReal> x5307 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5307.valid){
continue;
}
CheckValue<IkReal> x5308=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5306)))),-1);
if(!x5308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5307.value)+(((1.5707963267949)*(x5308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5309=IKcos(j4);
IkReal x5310=IKsin(j4);
IkReal x5311=((1.0)*sj0);
IkReal x5312=(cj5*r00);
IkReal x5313=(cj5*r10);
IkReal x5314=(cj5*r20);
IkReal x5315=((1.0)*x5309);
IkReal x5316=((1.0)*x5310);
IkReal x5317=(sj5*x5309);
IkReal x5318=(sj5*x5310);
evalcond[0]=((((-1.0)*x5314*x5315))+((r22*x5310))+((r21*x5317)));
evalcond[1]=((((-1.0)*x5314*x5316))+((r21*x5318))+(((-1.0)*r22*x5315)));
evalcond[2]=((((-1.0)*r12*x5315))+cj0+(((-1.0)*x5313*x5316))+((r11*x5318)));
evalcond[3]=(((r01*x5317))+(((-1.0)*x5312*x5315))+((r02*x5310))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5311))+(((-1.0)*x5313*x5315))+((r11*x5317))+((r12*x5310)));
evalcond[5]=(((r01*x5318))+(((-1.0)*x5312*x5316))+(((-1.0)*x5311))+(((-1.0)*r02*x5315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5319 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5319.valid){
continue;
}
CheckValue<IkReal> x5320=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5319.value)+(((1.5707963267949)*(x5320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5321=IKcos(j4);
IkReal x5322=IKsin(j4);
IkReal x5323=((1.0)*sj0);
IkReal x5324=(cj5*r00);
IkReal x5325=(cj5*r10);
IkReal x5326=(cj5*r20);
IkReal x5327=((1.0)*x5321);
IkReal x5328=((1.0)*x5322);
IkReal x5329=(sj5*x5321);
IkReal x5330=(sj5*x5322);
evalcond[0]=((((-1.0)*x5326*x5327))+((r22*x5322))+((r21*x5329)));
evalcond[1]=((((-1.0)*x5326*x5328))+(((-1.0)*r22*x5327))+((r21*x5330)));
evalcond[2]=((((-1.0)*x5325*x5328))+cj0+((r11*x5330))+(((-1.0)*r12*x5327)));
evalcond[3]=(((r01*x5329))+(((-1.0)*x5324*x5327))+((r02*x5322))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5325*x5327))+((r11*x5329))+((r12*x5322))+(((-1.0)*x5323)));
evalcond[5]=((((-1.0)*r02*x5327))+((r01*x5330))+(((-1.0)*x5323))+(((-1.0)*x5324*x5328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5331=((1.0)*sj5);
IkReal x5332=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5332))+(((-1.0)*r10*x5331)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5331))+(((-1.0)*r01*x5332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5332))+(((-1.0)*r10*x5331))))+IKsqr(((((-1.0)*r00*x5331))+(((-1.0)*r01*x5332))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5332))+(((-1.0)*r10*x5331))), ((((-1.0)*r00*x5331))+(((-1.0)*r01*x5332))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5333=IKsin(j0);
IkReal x5334=IKcos(j0);
IkReal x5335=(r00*sj5);
IkReal x5336=(r10*sj5);
IkReal x5337=(cj5*r11);
IkReal x5338=(cj5*r01);
evalcond[0]=(x5335+x5334+x5338);
evalcond[1]=(x5333+x5337+x5336);
evalcond[2]=((((-1.0)*px))+(((-0.09465)*x5335))+(((-0.09465)*x5338))+(((-0.10915)*x5333)));
evalcond[3]=((((-1.0)*py))+(((0.10915)*x5334))+(((-0.09465)*x5337))+(((-0.09465)*x5336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5339=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5339;
j4eval[1]=IKsign(x5339);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5340=((1.0)*cj5);
IkReal x5341=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5340)));
j4eval[0]=x5341;
j4eval[1]=IKsign(x5341);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5340))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5342=cj5*cj5;
IkReal x5343=(r01*r11);
IkReal x5344=((1.0)*r00);
IkReal x5345=(r01*sj5);
IkReal x5346=(((cj5*r10*x5345))+(((-1.0)*r10*x5342*x5344))+((x5342*x5343))+(((-1.0)*r02*r12))+(((-1.0)*x5343))+((cj5*r00*r11*sj5)));
j4eval[0]=x5346;
j4eval[1]=IKsign(x5346);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5345))+(((-1.0)*cj0*cj5*x5344))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5347=cj5*cj5;
IkReal x5348=(r01*r11);
IkReal x5349=(cj5*r00);
IkReal x5350=(r01*sj5);
CheckValue<IkReal> x5351=IKPowWithIntegerCheck(IKsign((((x5347*x5348))+(((-1.0)*r00*r10*x5347))+(((-1.0)*r02*r12))+((r11*sj5*x5349))+(((-1.0)*x5348))+((cj5*r10*x5350)))),-1);
if(!x5351.valid){
continue;
}
CheckValue<IkReal> x5352 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5349))+((cj0*x5350)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5351.value)))+(x5352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5353=IKcos(j4);
IkReal x5354=IKsin(j4);
IkReal x5355=(cj5*r00);
IkReal x5356=(r01*sj5);
IkReal x5357=(cj5*r10);
IkReal x5358=(cj5*r20);
IkReal x5359=((1.0)*x5353);
IkReal x5360=((1.0)*x5354);
IkReal x5361=(sj5*x5354);
IkReal x5362=(sj5*x5353);
evalcond[0]=((((-1.0)*x5355*x5359))+((x5353*x5356))+((r02*x5354)));
evalcond[1]=((((-1.0)*x5357*x5359))+((r12*x5354))+((r11*x5362)));
evalcond[2]=(((r21*x5361))+(((-1.0)*x5358*x5360))+(((-1.0)*r22*x5359)));
evalcond[3]=((-1.0)+(((-1.0)*x5358*x5359))+((r22*x5354))+((r21*x5362)));
evalcond[4]=(cj0+(((-1.0)*r12*x5359))+(((-1.0)*x5357*x5360))+((r11*x5361)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5359))+((x5354*x5356))+(((-1.0)*x5355*x5360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5363=((1.0)*cj5);
CheckValue<IkReal> x5364=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5363)))),-1);
if(!x5364.valid){
continue;
}
CheckValue<IkReal> x5365 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5363)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5364.value)))+(x5365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5366=IKcos(j4);
IkReal x5367=IKsin(j4);
IkReal x5368=(cj5*r00);
IkReal x5369=(r01*sj5);
IkReal x5370=(cj5*r10);
IkReal x5371=(cj5*r20);
IkReal x5372=((1.0)*x5366);
IkReal x5373=((1.0)*x5367);
IkReal x5374=(sj5*x5367);
IkReal x5375=(sj5*x5366);
evalcond[0]=(((r02*x5367))+((x5366*x5369))+(((-1.0)*x5368*x5372)));
evalcond[1]=(((r12*x5367))+(((-1.0)*x5370*x5372))+((r11*x5375)));
evalcond[2]=((((-1.0)*r22*x5372))+((r21*x5374))+(((-1.0)*x5371*x5373)));
evalcond[3]=((-1.0)+((r22*x5367))+((r21*x5375))+(((-1.0)*x5371*x5372)));
evalcond[4]=(cj0+(((-1.0)*r12*x5372))+(((-1.0)*x5370*x5373))+((r11*x5374)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5372))+((x5367*x5369))+(((-1.0)*x5368*x5373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5376=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5376.valid){
continue;
}
CheckValue<IkReal> x5377 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5376.value)))+(x5377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5378=IKcos(j4);
IkReal x5379=IKsin(j4);
IkReal x5380=(cj5*r00);
IkReal x5381=(r01*sj5);
IkReal x5382=(cj5*r10);
IkReal x5383=(cj5*r20);
IkReal x5384=((1.0)*x5378);
IkReal x5385=((1.0)*x5379);
IkReal x5386=(sj5*x5379);
IkReal x5387=(sj5*x5378);
evalcond[0]=(((x5378*x5381))+((r02*x5379))+(((-1.0)*x5380*x5384)));
evalcond[1]=((((-1.0)*x5382*x5384))+((r11*x5387))+((r12*x5379)));
evalcond[2]=((((-1.0)*x5383*x5385))+(((-1.0)*r22*x5384))+((r21*x5386)));
evalcond[3]=((-1.0)+((r22*x5379))+(((-1.0)*x5383*x5384))+((r21*x5387)));
evalcond[4]=((((-1.0)*x5382*x5385))+cj0+((r11*x5386))+(((-1.0)*r12*x5384)));
evalcond[5]=((((-1.0)*sj0))+((x5379*x5381))+(((-1.0)*r02*x5384))+(((-1.0)*x5380*x5385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5388=IKsin(j0);
IkReal x5389=IKcos(j0);
evalcond[0]=((((-0.10915)*x5388))+(((0.39225)*x5389))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x5388))+(((0.10915)*x5389))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5390=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5390;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5391=((1.0)*cj5);
IkReal x5392=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5391)));
j4eval[0]=x5392;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5391)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5393=((1.0)*cj5);
IkReal x5394=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5393)));
j4eval[0]=x5394;
j4eval[1]=IKsign(x5394);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x5393))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5395=((1.0)*cj5);
CheckValue<IkReal> x5396 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5395))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5396.valid){
continue;
}
CheckValue<IkReal> x5397=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5395)))),-1);
if(!x5397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5396.value)+(((1.5707963267949)*(x5397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5398=IKcos(j4);
IkReal x5399=IKsin(j4);
IkReal x5400=((1.0)*sj0);
IkReal x5401=(cj5*r00);
IkReal x5402=(cj5*r10);
IkReal x5403=(cj5*r20);
IkReal x5404=((1.0)*x5398);
IkReal x5405=((1.0)*x5399);
IkReal x5406=(sj5*x5398);
IkReal x5407=(sj5*x5399);
evalcond[0]=(((r21*x5406))+((r22*x5399))+(((-1.0)*x5403*x5404)));
evalcond[1]=(((r21*x5407))+(((-1.0)*x5403*x5405))+(((-1.0)*r22*x5404)));
evalcond[2]=(cj0+(((-1.0)*r12*x5404))+(((-1.0)*x5402*x5405))+((r11*x5407)));
evalcond[3]=(((r02*x5399))+((r01*x5406))+(((-1.0)*cj0))+(((-1.0)*x5401*x5404)));
evalcond[4]=((((-1.0)*x5402*x5404))+(((-1.0)*x5400))+((r12*x5399))+((r11*x5406)));
evalcond[5]=((((-1.0)*r02*x5404))+(((-1.0)*x5400))+((r01*x5407))+(((-1.0)*x5401*x5405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5408=((1.0)*cj5);
CheckValue<IkReal> x5409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5408))+(((-1.0)*r00*sj5)))),-1);
if(!x5409.valid){
continue;
}
CheckValue<IkReal> x5410 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5408))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5409.value)))+(x5410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5411=IKcos(j4);
IkReal x5412=IKsin(j4);
IkReal x5413=((1.0)*sj0);
IkReal x5414=(cj5*r00);
IkReal x5415=(cj5*r10);
IkReal x5416=(cj5*r20);
IkReal x5417=((1.0)*x5411);
IkReal x5418=((1.0)*x5412);
IkReal x5419=(sj5*x5411);
IkReal x5420=(sj5*x5412);
evalcond[0]=((((-1.0)*x5416*x5417))+((r22*x5412))+((r21*x5419)));
evalcond[1]=((((-1.0)*x5416*x5418))+((r21*x5420))+(((-1.0)*r22*x5417)));
evalcond[2]=((((-1.0)*x5415*x5418))+cj0+(((-1.0)*r12*x5417))+((r11*x5420)));
evalcond[3]=((((-1.0)*x5414*x5417))+((r02*x5412))+((r01*x5419))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5419))+(((-1.0)*x5415*x5417))+(((-1.0)*x5413))+((r12*x5412)));
evalcond[5]=((((-1.0)*r02*x5417))+((r01*x5420))+(((-1.0)*x5414*x5418))+(((-1.0)*x5413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5421 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5421.valid){
continue;
}
CheckValue<IkReal> x5422=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5421.value)+(((1.5707963267949)*(x5422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5423=IKcos(j4);
IkReal x5424=IKsin(j4);
IkReal x5425=((1.0)*sj0);
IkReal x5426=(cj5*r00);
IkReal x5427=(cj5*r10);
IkReal x5428=(cj5*r20);
IkReal x5429=((1.0)*x5423);
IkReal x5430=((1.0)*x5424);
IkReal x5431=(sj5*x5423);
IkReal x5432=(sj5*x5424);
evalcond[0]=(((r22*x5424))+(((-1.0)*x5428*x5429))+((r21*x5431)));
evalcond[1]=((((-1.0)*x5428*x5430))+(((-1.0)*r22*x5429))+((r21*x5432)));
evalcond[2]=(cj0+(((-1.0)*x5427*x5430))+((r11*x5432))+(((-1.0)*r12*x5429)));
evalcond[3]=((((-1.0)*x5426*x5429))+((r02*x5424))+((r01*x5431))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5425))+((r12*x5424))+(((-1.0)*x5427*x5429))+((r11*x5431)));
evalcond[5]=((((-1.0)*x5425))+(((-1.0)*x5426*x5430))+(((-1.0)*r02*x5429))+((r01*x5432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5433=IKsin(j0);
IkReal x5434=IKcos(j0);
IkReal x5435=(r00*sj5);
IkReal x5436=(r10*sj5);
IkReal x5437=(cj5*r11);
IkReal x5438=(cj5*r01);
evalcond[0]=(x5435+x5438+(((-1.0)*x5434)));
evalcond[1]=(x5436+x5437+(((-1.0)*x5433)));
evalcond[2]=((((-0.10915)*x5433))+(((-0.09465)*x5435))+(((-0.09465)*x5438))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x5436))+(((-0.09465)*x5437))+(((-1.0)*py))+(((0.10915)*x5434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5439=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5439;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5439);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5440=((1.0)*cj5);
IkReal x5441=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5440)));
j4eval[0]=x5441;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5440))+((r11*sj5))))));
j4eval[2]=IKsign(x5441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5442=cj5*cj5;
IkReal x5443=(r01*r11);
IkReal x5444=((1.0)*r00);
IkReal x5445=(r01*sj5);
IkReal x5446=((((-1.0)*x5443))+(((-1.0)*r10*x5442*x5444))+(((-1.0)*r02*r12))+((cj5*r10*x5445))+((x5442*x5443))+((cj5*r00*r11*sj5)));
j4eval[0]=x5446;
j4eval[1]=IKsign(x5446);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5444))+((cj0*x5445))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5447=cj5*cj5;
IkReal x5448=(r01*r11);
IkReal x5449=(cj5*r00);
IkReal x5450=(r01*sj5);
CheckValue<IkReal> x5451 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5449))+((cj0*x5450)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5451.valid){
continue;
}
CheckValue<IkReal> x5452=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5448))+(((-1.0)*r02*r12))+((cj5*r10*x5450))+(((-1.0)*r00*r10*x5447))+((r11*sj5*x5449))+((x5447*x5448)))),-1);
if(!x5452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5451.value)+(((1.5707963267949)*(x5452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5453=IKcos(j4);
IkReal x5454=IKsin(j4);
IkReal x5455=(cj5*r00);
IkReal x5456=(r01*sj5);
IkReal x5457=(cj5*r10);
IkReal x5458=(cj5*r20);
IkReal x5459=((1.0)*x5453);
IkReal x5460=((1.0)*x5454);
IkReal x5461=(sj5*x5454);
IkReal x5462=(sj5*x5453);
evalcond[0]=((((-1.0)*x5455*x5459))+((r02*x5454))+((x5453*x5456)));
evalcond[1]=(((r12*x5454))+((r11*x5462))+(((-1.0)*x5457*x5459)));
evalcond[2]=((((-1.0)*x5458*x5460))+((r21*x5461))+(((-1.0)*r22*x5459)));
evalcond[3]=((1.0)+(((-1.0)*x5458*x5459))+((r22*x5454))+((r21*x5462)));
evalcond[4]=((((-1.0)*r12*x5459))+cj0+((r11*x5461))+(((-1.0)*x5457*x5460)));
evalcond[5]=((((-1.0)*sj0))+((x5454*x5456))+(((-1.0)*r02*x5459))+(((-1.0)*x5455*x5460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5463=((1.0)*cj5);
CheckValue<IkReal> x5464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5463))+(((-1.0)*r00*sj5)))),-1);
if(!x5464.valid){
continue;
}
CheckValue<IkReal> x5465 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5463))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5464.value)))+(x5465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5466=IKcos(j4);
IkReal x5467=IKsin(j4);
IkReal x5468=(cj5*r00);
IkReal x5469=(r01*sj5);
IkReal x5470=(cj5*r10);
IkReal x5471=(cj5*r20);
IkReal x5472=((1.0)*x5466);
IkReal x5473=((1.0)*x5467);
IkReal x5474=(sj5*x5467);
IkReal x5475=(sj5*x5466);
evalcond[0]=(((x5466*x5469))+(((-1.0)*x5468*x5472))+((r02*x5467)));
evalcond[1]=(((r12*x5467))+(((-1.0)*x5470*x5472))+((r11*x5475)));
evalcond[2]=((((-1.0)*r22*x5472))+(((-1.0)*x5471*x5473))+((r21*x5474)));
evalcond[3]=((1.0)+((r22*x5467))+(((-1.0)*x5471*x5472))+((r21*x5475)));
evalcond[4]=(cj0+(((-1.0)*r12*x5472))+(((-1.0)*x5470*x5473))+((r11*x5474)));
evalcond[5]=(((x5467*x5469))+(((-1.0)*sj0))+(((-1.0)*x5468*x5473))+(((-1.0)*r02*x5472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5476 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5476.valid){
continue;
}
CheckValue<IkReal> x5477=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5476.value)+(((1.5707963267949)*(x5477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5478=IKcos(j4);
IkReal x5479=IKsin(j4);
IkReal x5480=(cj5*r00);
IkReal x5481=(r01*sj5);
IkReal x5482=(cj5*r10);
IkReal x5483=(cj5*r20);
IkReal x5484=((1.0)*x5478);
IkReal x5485=((1.0)*x5479);
IkReal x5486=(sj5*x5479);
IkReal x5487=(sj5*x5478);
evalcond[0]=(((x5478*x5481))+(((-1.0)*x5480*x5484))+((r02*x5479)));
evalcond[1]=(((r11*x5487))+((r12*x5479))+(((-1.0)*x5482*x5484)));
evalcond[2]=((((-1.0)*x5483*x5485))+(((-1.0)*r22*x5484))+((r21*x5486)));
evalcond[3]=((1.0)+(((-1.0)*x5483*x5484))+((r21*x5487))+((r22*x5479)));
evalcond[4]=((((-1.0)*r12*x5484))+cj0+((r11*x5486))+(((-1.0)*x5482*x5485)));
evalcond[5]=((((-1.0)*sj0))+((x5479*x5481))+(((-1.0)*x5480*x5485))+(((-1.0)*r02*x5484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5488=IKcos(j0);
IkReal x5489=IKsin(j0);
evalcond[0]=((((-0.39225)*x5488))+(((-0.10915)*x5489))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x5488))+(((-0.39225)*x5489))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5490=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5490;
j4eval[1]=IKsign(x5490);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5491=((1.0)*cj5);
IkReal x5492=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5491)));
j4eval[0]=x5492;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5491)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5493=cj5*cj5;
IkReal x5494=((1.0)*r20);
IkReal x5495=(r01*r21);
IkReal x5496=(r21*sj5);
IkReal x5497=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5493*x5494))+((x5493*x5495))+((cj5*r00*x5496))+(((-1.0)*x5495)));
j4eval[0]=x5497;
j4eval[1]=((IKabs((((cj0*x5496))+(((-1.0)*cj0*cj5*x5494)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5498=cj5*cj5;
IkReal x5499=((1.0)*r20);
IkReal x5500=(r01*r21);
IkReal x5501=(r21*sj5);
CheckValue<IkReal> x5502 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5499))+((cj0*x5501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5502.valid){
continue;
}
CheckValue<IkReal> x5503=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5498*x5500))+(((-1.0)*x5500))+(((-1.0)*r00*x5498*x5499))+((cj5*r00*x5501)))),-1);
if(!x5503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5502.value)+(((1.5707963267949)*(x5503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5504=IKcos(j4);
IkReal x5505=IKsin(j4);
IkReal x5506=(cj5*r00);
IkReal x5507=(cj5*r10);
IkReal x5508=(cj5*r20);
IkReal x5509=((1.0)*x5504);
IkReal x5510=((1.0)*x5505);
IkReal x5511=(sj5*x5504);
IkReal x5512=(sj5*x5505);
evalcond[0]=(((r21*x5511))+((r22*x5505))+(((-1.0)*x5508*x5509)));
evalcond[1]=((((-1.0)*r22*x5509))+((r21*x5512))+(((-1.0)*x5508*x5510)));
evalcond[2]=(cj0+((r02*x5505))+(((-1.0)*x5506*x5509))+((r01*x5511)));
evalcond[3]=(sj0+((r12*x5505))+(((-1.0)*x5507*x5509))+((r11*x5511)));
evalcond[4]=(cj0+(((-1.0)*r12*x5509))+(((-1.0)*x5507*x5510))+((r11*x5512)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5509))+(((-1.0)*x5506*x5510))+((r01*x5512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5513=((1.0)*cj5);
CheckValue<IkReal> x5514 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5513)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5514.valid){
continue;
}
CheckValue<IkReal> x5515=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5513)))),-1);
if(!x5515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5514.value)+(((1.5707963267949)*(x5515.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5516=IKcos(j4);
IkReal x5517=IKsin(j4);
IkReal x5518=(cj5*r00);
IkReal x5519=(cj5*r10);
IkReal x5520=(cj5*r20);
IkReal x5521=((1.0)*x5516);
IkReal x5522=((1.0)*x5517);
IkReal x5523=(sj5*x5516);
IkReal x5524=(sj5*x5517);
evalcond[0]=(((r21*x5523))+((r22*x5517))+(((-1.0)*x5520*x5521)));
evalcond[1]=((((-1.0)*r22*x5521))+((r21*x5524))+(((-1.0)*x5520*x5522)));
evalcond[2]=(cj0+((r02*x5517))+((r01*x5523))+(((-1.0)*x5518*x5521)));
evalcond[3]=(sj0+((r12*x5517))+((r11*x5523))+(((-1.0)*x5519*x5521)));
evalcond[4]=(cj0+((r11*x5524))+(((-1.0)*x5519*x5522))+(((-1.0)*r12*x5521)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5521))+((r01*x5524))+(((-1.0)*x5518*x5522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5525 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5525.valid){
continue;
}
CheckValue<IkReal> x5526=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5525.value)+(((1.5707963267949)*(x5526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5527=IKcos(j4);
IkReal x5528=IKsin(j4);
IkReal x5529=(cj5*r00);
IkReal x5530=(cj5*r10);
IkReal x5531=(cj5*r20);
IkReal x5532=((1.0)*x5527);
IkReal x5533=((1.0)*x5528);
IkReal x5534=(sj5*x5527);
IkReal x5535=(sj5*x5528);
evalcond[0]=(((r22*x5528))+((r21*x5534))+(((-1.0)*x5531*x5532)));
evalcond[1]=((((-1.0)*r22*x5532))+((r21*x5535))+(((-1.0)*x5531*x5533)));
evalcond[2]=(((r02*x5528))+cj0+((r01*x5534))+(((-1.0)*x5529*x5532)));
evalcond[3]=(sj0+(((-1.0)*x5530*x5532))+((r11*x5534))+((r12*x5528)));
evalcond[4]=(cj0+(((-1.0)*x5530*x5533))+((r11*x5535))+(((-1.0)*r12*x5532)));
evalcond[5]=((((-1.0)*r02*x5532))+(((-1.0)*sj0))+((r01*x5535))+(((-1.0)*x5529*x5533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5536=cj1*cj1;
IkReal x5537=(cj1*sj1);
IkReal x5538=(cj5*r01);
IkReal x5539=(r00*sj5);
IkReal x5540=(r10*sj5);
IkReal x5541=(cj5*r11);
IkReal x5542=(cj1*sj2);
IkReal x5543=((20000.0)*py);
IkReal x5544=(cj2*sj1);
IkReal x5545=((1893.0)*x5544);
IkReal x5546=(sj2*x5536);
CheckValue<IkReal> x5547=IKPowWithIntegerCheck(((((-8500.0)*cj2*x5537))+(((7845.0)*x5537))+(((-8500.0)*x5546))+(((-15690.0)*x5537*(cj2*cj2)))+(((-15690.0)*cj2*x5546))+(((7845.0)*cj2*sj2))),-1);
if(!x5547.valid){
continue;
}
CheckValue<IkReal> x5548=IKPowWithIntegerCheck(((((-1.0)*x5544))+(((-1.0)*x5542))),-1);
if(!x5548.valid){
continue;
}
if( IKabs(((x5547.value)*(((((-1.0)*x5543*x5544))+(((-1.0)*x5542*x5543))+(((-1893.0)*x5541*x5542))+(((-1.0)*x5541*x5545))+(((-1893.0)*x5540*x5542))+(((-1.0)*x5540*x5545))+(((2183.0)*x5538))+(((2183.0)*x5539)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5548.value)*(((((-1.0)*x5539))+(((-1.0)*x5538)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5547.value)*(((((-1.0)*x5543*x5544))+(((-1.0)*x5542*x5543))+(((-1893.0)*x5541*x5542))+(((-1.0)*x5541*x5545))+(((-1893.0)*x5540*x5542))+(((-1.0)*x5540*x5545))+(((2183.0)*x5538))+(((2183.0)*x5539))))))+IKsqr(((x5548.value)*(((((-1.0)*x5539))+(((-1.0)*x5538))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5547.value)*(((((-1.0)*x5543*x5544))+(((-1.0)*x5542*x5543))+(((-1893.0)*x5541*x5542))+(((-1.0)*x5541*x5545))+(((-1893.0)*x5540*x5542))+(((-1.0)*x5540*x5545))+(((2183.0)*x5538))+(((2183.0)*x5539))))), ((x5548.value)*(((((-1.0)*x5539))+(((-1.0)*x5538))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5549=IKcos(j0);
IkReal x5550=IKsin(j0);
IkReal x5551=(cj5*r01);
IkReal x5552=((1.0)*cj1);
IkReal x5553=((0.39225)*sj1);
IkReal x5554=(cj5*r11);
IkReal x5555=(r00*sj5);
IkReal x5556=((0.39225)*cj2);
IkReal x5557=(r10*sj5);
IkReal x5558=(sj2*x5549);
IkReal x5559=(sj2*x5550);
IkReal x5560=(cj1*x5549);
IkReal x5561=((1.0)*cj2*sj1);
IkReal x5562=(cj1*x5550);
evalcond[0]=((((-1.0)*x5549*x5561))+x5555+x5551+(((-1.0)*x5552*x5558)));
evalcond[1]=(x5554+x5557+(((-1.0)*x5552*x5559))+(((-1.0)*x5550*x5561)));
evalcond[2]=((((0.425)*x5560))+((x5556*x5560))+(((-1.0)*x5553*x5558))+(((-0.09465)*x5555))+(((-0.09465)*x5551))+(((-1.0)*px))+(((-0.10915)*x5550)));
evalcond[3]=((((0.10915)*x5549))+(((0.425)*x5562))+((x5556*x5562))+(((-1.0)*x5553*x5559))+(((-0.09465)*x5554))+(((-0.09465)*x5557))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5563=((1.0)*cj5);
IkReal x5564=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5563)));
j4eval[0]=x5564;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x5563))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x5564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5565=((1.0)*cj5);
IkReal x5566=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5565)));
j4eval[0]=x5566;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5565))))));
j4eval[2]=IKsign(x5566);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5567=((1.0)*sj0);
IkReal x5568=((1.0)*cj0);
IkReal x5569=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5569;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x5568))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5567)))))+(IKabs(((((-1.0)*r12*x5567))+(((-1.0)*r02*x5568))))));
j4eval[2]=IKsign(x5569);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5570=((-1.0)*r20);
IkReal x5572 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5572)==0){
continue;
}
IkReal x5571=pow(x5572,-0.5);
CheckValue<IkReal> x5573 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5570),IKFAST_ATAN2_MAGTHRESH);
if(!x5573.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5573.value));
IkReal gconst115=(r21*x5571);
IkReal gconst116=(x5570*x5571);
CheckValue<IkReal> x5574 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5574.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5574.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5575=((-1.0)*r20);
IkReal x5576=x5571;
CheckValue<IkReal> x5578 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5575),IKFAST_ATAN2_MAGTHRESH);
if(!x5578.valid){
continue;
}
IkReal x5577=((-1.0)*(x5578.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5577;
IkReal gconst114=x5577;
IkReal gconst115=(r21*x5576);
IkReal gconst116=(x5575*x5576);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5579=((-1.0)*r20);
IkReal x5580=x5571;
CheckValue<IkReal> x5582 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5579),IKFAST_ATAN2_MAGTHRESH);
if(!x5582.valid){
continue;
}
IkReal x5581=((-1.0)*(x5582.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5581;
IkReal gconst114=x5581;
IkReal gconst115=(r21*x5580);
IkReal gconst116=(x5579*x5580);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5583=((-1.0)*r20);
IkReal x5584=x5571;
CheckValue<IkReal> x5586 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5583),IKFAST_ATAN2_MAGTHRESH);
if(!x5586.valid){
continue;
}
IkReal x5585=((-1.0)*(x5586.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5585;
IkReal gconst114=x5585;
IkReal gconst115=(r21*x5584);
IkReal gconst116=(x5583*x5584);
IkReal x5587=((1.0)*(r22*r22));
CheckValue<IkReal> x5591=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5587))),-1);
if(!x5591.valid){
continue;
}
IkReal x5588=x5591.value;
IkReal x5589=((1.0)*x5588);
IkReal x5590=((((-1.0)*x5589*(r20*r20*r20*r20)))+(((-1.0)*x5587))+(((-1.0)*x5589*(r21*r21*r21*r21)))+(((-2.0)*x5588*(r20*r20)*(r21*r21))));
j4eval[0]=x5590;
j4eval[1]=IKsign(x5590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5592=(cj2*sj1);
IkReal x5593=(gconst115*r21);
IkReal x5594=(cj1*sj2);
IkReal x5595=((1.0)*gconst116*r20);
CheckValue<IkReal> x5596 = IKatan2WithCheck(IkReal((((r22*x5592))+((r22*x5594)))),IkReal((((x5592*x5593))+((x5593*x5594))+(((-1.0)*x5592*x5595))+(((-1.0)*x5594*x5595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5596.valid){
continue;
}
CheckValue<IkReal> x5597=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5593*x5593)))+(((2.0)*gconst116*r20*x5593))+(((-1.0)*gconst116*r20*x5595))+(((-1.0)*(r22*r22))))),-1);
if(!x5597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5596.value)+(((1.5707963267949)*(x5597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5598=IKsin(j4);
IkReal x5599=IKcos(j4);
IkReal x5600=(sj1*sj2);
IkReal x5601=((1.0)*x5599);
IkReal x5602=((1.0)*cj1*cj2);
IkReal x5603=(gconst115*x5598);
IkReal x5604=(gconst115*x5599);
IkReal x5605=((1.0)*gconst116*x5598);
evalcond[0]=((((-1.0)*r22*x5601))+((r21*x5603))+(((-1.0)*r20*x5605)));
evalcond[1]=((((-1.0)*r10*x5605))+cj0+(((-1.0)*r12*x5601))+((r11*x5603)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5605))+((r01*x5603))+(((-1.0)*r02*x5601)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5601))+((r21*x5604))+((r22*x5598)));
evalcond[4]=((((-1.0)*cj0*x5602))+((r02*x5598))+((r01*x5604))+(((-1.0)*gconst116*r00*x5601))+((cj0*x5600)));
evalcond[5]=(((sj0*x5600))+((r12*x5598))+(((-1.0)*gconst116*r10*x5601))+(((-1.0)*sj0*x5602))+((r11*x5604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5606=((1.0)*gconst116);
CheckValue<IkReal> x5607 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5607.valid){
continue;
}
CheckValue<IkReal> x5608=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5606)))),-1);
if(!x5608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5607.value)+(((1.5707963267949)*(x5608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5609=IKsin(j4);
IkReal x5610=IKcos(j4);
IkReal x5611=(sj1*sj2);
IkReal x5612=((1.0)*x5610);
IkReal x5613=((1.0)*cj1*cj2);
IkReal x5614=(gconst115*x5609);
IkReal x5615=(gconst115*x5610);
IkReal x5616=((1.0)*gconst116*x5609);
evalcond[0]=((((-1.0)*r22*x5612))+((r21*x5614))+(((-1.0)*r20*x5616)));
evalcond[1]=(cj0+(((-1.0)*r10*x5616))+(((-1.0)*r12*x5612))+((r11*x5614)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5616))+((r01*x5614))+(((-1.0)*r02*x5612)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5612))+((cj1*sj2))+((r21*x5615))+((r22*x5609)));
evalcond[4]=(((cj0*x5611))+((r02*x5609))+(((-1.0)*cj0*x5613))+((r01*x5615))+(((-1.0)*gconst116*r00*x5612)));
evalcond[5]=(((sj0*x5611))+(((-1.0)*gconst116*r10*x5612))+((r12*x5609))+(((-1.0)*sj0*x5613))+((r11*x5615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5617=((1.0)*gconst116);
CheckValue<IkReal> x5618=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5617))+(((-1.0)*gconst115*r00)))),-1);
if(!x5618.valid){
continue;
}
CheckValue<IkReal> x5619 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5617))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5618.value)))+(x5619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5620=IKsin(j4);
IkReal x5621=IKcos(j4);
IkReal x5622=(sj1*sj2);
IkReal x5623=((1.0)*x5621);
IkReal x5624=((1.0)*cj1*cj2);
IkReal x5625=(gconst115*x5620);
IkReal x5626=(gconst115*x5621);
IkReal x5627=((1.0)*gconst116*x5620);
evalcond[0]=((((-1.0)*r22*x5623))+((r21*x5625))+(((-1.0)*r20*x5627)));
evalcond[1]=(cj0+(((-1.0)*r10*x5627))+(((-1.0)*r12*x5623))+((r11*x5625)));
evalcond[2]=((((-1.0)*r00*x5627))+(((-1.0)*sj0))+((r01*x5625))+(((-1.0)*r02*x5623)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5623))+((r21*x5626))+((r22*x5620)));
evalcond[4]=(((cj0*x5622))+(((-1.0)*cj0*x5624))+((r02*x5620))+((r01*x5626))+(((-1.0)*gconst116*r00*x5623)));
evalcond[5]=(((sj0*x5622))+(((-1.0)*gconst116*r10*x5623))+((r12*x5620))+((r11*x5626))+(((-1.0)*sj0*x5624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5628=((-1.0)*r21);
IkReal x5630 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5630)==0){
continue;
}
IkReal x5629=pow(x5630,-0.5);
CheckValue<IkReal> x5631 = IKatan2WithCheck(IkReal(x5628),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5631.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5631.value))));
IkReal gconst118=(x5628*x5629);
IkReal gconst119=((1.0)*r20*x5629);
CheckValue<IkReal> x5632 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5632.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5632.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5633=((-1.0)*r21);
CheckValue<IkReal> x5636 = IKatan2WithCheck(IkReal(x5633),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5636.valid){
continue;
}
IkReal x5634=((1.0)*(x5636.value));
IkReal x5635=x5629;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5634)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5634)));
IkReal gconst118=(x5633*x5635);
IkReal gconst119=((1.0)*r20*x5635);
IkReal x5637=r22*r22;
IkReal x5638=((1.0)*x5637);
CheckValue<IkReal> x5642=IKPowWithIntegerCheck(((-1.0)+x5637),-1);
if(!x5642.valid){
continue;
}
IkReal x5639=x5642.value;
if((((1.0)+(((-1.0)*x5638)))) < -0.00001)
continue;
IkReal x5640=IKsqrt(((1.0)+(((-1.0)*x5638))));
IkReal x5641=(cj0*x5639*x5640);
j4eval[0]=((IKabs((x5641+(((-1.0)*x5638*x5641)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5643=((-1.0)*r21);
CheckValue<IkReal> x5646 = IKatan2WithCheck(IkReal(x5643),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5646.valid){
continue;
}
IkReal x5644=((1.0)*(x5646.value));
IkReal x5645=x5629;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5644)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5644)));
IkReal gconst118=(x5643*x5645);
IkReal gconst119=((1.0)*r20*x5645);
IkReal x5647=r22*r22;
IkReal x5648=((1.0)*x5647);
CheckValue<IkReal> x5652=IKPowWithIntegerCheck(((-1.0)+x5647),-1);
if(!x5652.valid){
continue;
}
IkReal x5649=x5652.value;
if((((1.0)+(((-1.0)*x5648)))) < -0.00001)
continue;
IkReal x5650=IKsqrt(((1.0)+(((-1.0)*x5648))));
IkReal x5651=(sj0*x5649*x5650);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5651+(((-1.0)*x5648*x5651))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5653=((-1.0)*r21);
CheckValue<IkReal> x5656 = IKatan2WithCheck(IkReal(x5653),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5656.valid){
continue;
}
IkReal x5654=((1.0)*(x5656.value));
IkReal x5655=x5629;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5654)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5654)));
IkReal gconst118=(x5653*x5655);
IkReal gconst119=((1.0)*r20*x5655);
IkReal x5657=r22*r22;
IkReal x5658=(r12*sj0);
IkReal x5659=(cj0*r02);
CheckValue<IkReal> x5663=IKPowWithIntegerCheck(((-1.0)+x5657),-1);
if(!x5663.valid){
continue;
}
IkReal x5660=x5663.value;
if((((1.0)+(((-1.0)*x5657)))) < -0.00001)
continue;
IkReal x5661=IKsqrt(((1.0)+(((-1.0)*x5657))));
IkReal x5662=(r22*x5660*x5661);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5658))+(((-1.0)*x5659)))))+(IKabs((((x5659*x5662))+((x5658*x5662))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5664=((1.0)*sj0);
IkReal x5665=((1.0)*gconst118);
CheckValue<IkReal> x5666 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5664)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5665))+(((-1.0)*gconst118*r11*x5664))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5666.valid){
continue;
}
CheckValue<IkReal> x5667=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5665)))),-1);
if(!x5667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5666.value)+(((1.5707963267949)*(x5667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5668=IKsin(j4);
IkReal x5669=IKcos(j4);
IkReal x5670=(gconst118*r01);
IkReal x5671=(sj1*sj2);
IkReal x5672=(gconst119*r20);
IkReal x5673=(gconst119*r10);
IkReal x5674=(gconst119*r00);
IkReal x5675=(gconst118*r21);
IkReal x5676=(gconst118*r11);
IkReal x5677=((1.0)*x5669);
IkReal x5678=((1.0)*cj1*cj2);
IkReal x5679=((1.0)*x5668);
evalcond[0]=((((-1.0)*x5672*x5679))+((x5668*x5675))+(((-1.0)*r22*x5677)));
evalcond[1]=(((x5668*x5676))+cj0+(((-1.0)*r12*x5677))+(((-1.0)*x5673*x5679)));
evalcond[2]=(((x5668*x5670))+(((-1.0)*sj0))+(((-1.0)*x5674*x5679))+(((-1.0)*r02*x5677)));
evalcond[3]=((((-1.0)*x5672*x5677))+((cj2*sj1))+((r22*x5668))+((cj1*sj2))+((x5669*x5675)));
evalcond[4]=(((cj0*x5671))+((r02*x5668))+(((-1.0)*cj0*x5678))+((x5669*x5670))+(((-1.0)*x5674*x5677)));
evalcond[5]=(((sj0*x5671))+((x5669*x5676))+((r12*x5668))+(((-1.0)*x5673*x5677))+(((-1.0)*sj0*x5678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5680=((1.0)*gconst119);
CheckValue<IkReal> x5681 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5680))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5681.valid){
continue;
}
CheckValue<IkReal> x5682=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5680)))),-1);
if(!x5682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5681.value)+(((1.5707963267949)*(x5682.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5683=IKsin(j4);
IkReal x5684=IKcos(j4);
IkReal x5685=(gconst118*r01);
IkReal x5686=(sj1*sj2);
IkReal x5687=(gconst119*r20);
IkReal x5688=(gconst119*r10);
IkReal x5689=(gconst119*r00);
IkReal x5690=(gconst118*r21);
IkReal x5691=(gconst118*r11);
IkReal x5692=((1.0)*x5684);
IkReal x5693=((1.0)*cj1*cj2);
IkReal x5694=((1.0)*x5683);
evalcond[0]=(((x5683*x5690))+(((-1.0)*r22*x5692))+(((-1.0)*x5687*x5694)));
evalcond[1]=(cj0+((x5683*x5691))+(((-1.0)*x5688*x5694))+(((-1.0)*r12*x5692)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5692))+((x5683*x5685))+(((-1.0)*x5689*x5694)));
evalcond[3]=(((cj2*sj1))+((r22*x5683))+((cj1*sj2))+(((-1.0)*x5687*x5692))+((x5684*x5690)));
evalcond[4]=((((-1.0)*cj0*x5693))+((r02*x5683))+((x5684*x5685))+(((-1.0)*x5689*x5692))+((cj0*x5686)));
evalcond[5]=((((-1.0)*sj0*x5693))+((sj0*x5686))+((x5684*x5691))+((r12*x5683))+(((-1.0)*x5688*x5692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5695=((1.0)*gconst119);
CheckValue<IkReal> x5696 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5696.valid){
continue;
}
CheckValue<IkReal> x5697=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5695)))),-1);
if(!x5697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5696.value)+(((1.5707963267949)*(x5697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5698=IKsin(j4);
IkReal x5699=IKcos(j4);
IkReal x5700=(gconst118*r01);
IkReal x5701=(sj1*sj2);
IkReal x5702=(gconst119*r20);
IkReal x5703=(gconst119*r10);
IkReal x5704=(gconst119*r00);
IkReal x5705=(gconst118*r21);
IkReal x5706=(gconst118*r11);
IkReal x5707=((1.0)*x5699);
IkReal x5708=((1.0)*cj1*cj2);
IkReal x5709=((1.0)*x5698);
evalcond[0]=((((-1.0)*x5702*x5709))+(((-1.0)*r22*x5707))+((x5698*x5705)));
evalcond[1]=((((-1.0)*r12*x5707))+cj0+(((-1.0)*x5703*x5709))+((x5698*x5706)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5704*x5709))+(((-1.0)*r02*x5707))+((x5698*x5700)));
evalcond[3]=(((cj2*sj1))+((r22*x5698))+(((-1.0)*x5702*x5707))+((cj1*sj2))+((x5699*x5705)));
evalcond[4]=(((r02*x5698))+(((-1.0)*x5704*x5707))+(((-1.0)*cj0*x5708))+((x5699*x5700))+((cj0*x5701)));
evalcond[5]=(((sj0*x5701))+(((-1.0)*x5703*x5707))+(((-1.0)*sj0*x5708))+((r12*x5698))+((x5699*x5706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5710=((-1.0)*r10);
IkReal x5712 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5712)==0){
continue;
}
IkReal x5711=pow(x5712,-0.5);
CheckValue<IkReal> x5713 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5710),IKFAST_ATAN2_MAGTHRESH);
if(!x5713.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5713.value));
IkReal gconst121=(r11*x5711);
IkReal gconst122=(x5710*x5711);
CheckValue<IkReal> x5714 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5714.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5714.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5715=((-1.0)*r10);
IkReal x5716=x5711;
CheckValue<IkReal> x5718 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5715),IKFAST_ATAN2_MAGTHRESH);
if(!x5718.valid){
continue;
}
IkReal x5717=((-1.0)*(x5718.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5717;
IkReal gconst120=x5717;
IkReal gconst121=(r11*x5716);
IkReal gconst122=(x5715*x5716);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5719=((1.0)*sj0);
IkReal x5720=((1.0)*gconst121);
CheckValue<IkReal> x5721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5720))+(((-1.0)*gconst122*r21)))),-1);
if(!x5721.valid){
continue;
}
CheckValue<IkReal> x5722 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5719)))),IkReal(((((-1.0)*cj0*r01*x5720))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5719))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5721.value)))+(x5722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5723=IKsin(j4);
IkReal x5724=IKcos(j4);
IkReal x5725=(gconst121*r11);
IkReal x5726=(sj1*sj2);
IkReal x5727=(gconst122*r00);
IkReal x5728=(gconst122*r10);
IkReal x5729=(gconst122*r20);
IkReal x5730=((1.0)*x5724);
IkReal x5731=((1.0)*cj1*cj2);
IkReal x5732=((1.0)*x5723);
IkReal x5733=(gconst121*x5723);
IkReal x5734=(gconst121*x5724);
evalcond[0]=(((r21*x5733))+(((-1.0)*x5729*x5732))+(((-1.0)*r22*x5730)));
evalcond[1]=(((x5723*x5725))+cj0+(((-1.0)*x5728*x5732))+(((-1.0)*r12*x5730)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5733))+(((-1.0)*r02*x5730))+(((-1.0)*x5727*x5732)));
evalcond[3]=(((cj2*sj1))+((r21*x5734))+(((-1.0)*x5729*x5730))+((cj1*sj2))+((r22*x5723)));
evalcond[4]=(((r01*x5734))+(((-1.0)*x5727*x5730))+(((-1.0)*cj0*x5731))+((cj0*x5726))+((r02*x5723)));
evalcond[5]=(((sj0*x5726))+((x5724*x5725))+(((-1.0)*x5728*x5730))+((r12*x5723))+(((-1.0)*sj0*x5731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5735=((1.0)*gconst122);
CheckValue<IkReal> x5736=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5735)))),-1);
if(!x5736.valid){
continue;
}
CheckValue<IkReal> x5737 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5735))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5736.value)))+(x5737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5738=IKsin(j4);
IkReal x5739=IKcos(j4);
IkReal x5740=(gconst121*r11);
IkReal x5741=(sj1*sj2);
IkReal x5742=(gconst122*r00);
IkReal x5743=(gconst122*r10);
IkReal x5744=(gconst122*r20);
IkReal x5745=((1.0)*x5739);
IkReal x5746=((1.0)*cj1*cj2);
IkReal x5747=((1.0)*x5738);
IkReal x5748=(gconst121*x5738);
IkReal x5749=(gconst121*x5739);
evalcond[0]=((((-1.0)*r22*x5745))+(((-1.0)*x5744*x5747))+((r21*x5748)));
evalcond[1]=(cj0+(((-1.0)*r12*x5745))+((x5738*x5740))+(((-1.0)*x5743*x5747)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5748))+(((-1.0)*r02*x5745))+(((-1.0)*x5742*x5747)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5744*x5745))+((r21*x5749))+((r22*x5738)));
evalcond[4]=(((r01*x5749))+(((-1.0)*cj0*x5746))+((r02*x5738))+(((-1.0)*x5742*x5745))+((cj0*x5741)));
evalcond[5]=(((r12*x5738))+((sj0*x5741))+(((-1.0)*x5743*x5745))+((x5739*x5740))+(((-1.0)*sj0*x5746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5750=((-1.0)*r11);
IkReal x5752 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5752)==0){
continue;
}
IkReal x5751=pow(x5752,-0.5);
CheckValue<IkReal> x5753 = IKatan2WithCheck(IkReal(x5750),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5753.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5753.value))));
IkReal gconst124=(x5750*x5751);
IkReal gconst125=((1.0)*r10*x5751);
CheckValue<IkReal> x5754 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5754.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5754.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5755=((-1.0)*r11);
CheckValue<IkReal> x5758 = IKatan2WithCheck(IkReal(x5755),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5758.valid){
continue;
}
IkReal x5756=((1.0)*(x5758.value));
IkReal x5757=x5751;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5756)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5756)));
IkReal gconst124=(x5755*x5757);
IkReal gconst125=((1.0)*r10*x5757);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5759=((-1.0)*r11);
CheckValue<IkReal> x5762 = IKatan2WithCheck(IkReal(x5759),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5762.valid){
continue;
}
IkReal x5760=((1.0)*(x5762.value));
IkReal x5761=x5751;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5760)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5760)));
IkReal gconst124=(x5759*x5761);
IkReal gconst125=((1.0)*r10*x5761);
IkReal x5763=r12*r12;
IkReal x5764=((1.0)*sj0);
IkReal x5765=(cj0*r02);
IkReal x5766=x5751;
j4eval[0]=((IKabs((((r12*x5765*x5766))+((sj0*x5763*x5766))+(((-1.0)*x5764*x5766)))))+(IKabs(((((-1.0)*r12*x5764))+(((-1.0)*x5765))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5767=((-1.0)*r11);
CheckValue<IkReal> x5770 = IKatan2WithCheck(IkReal(x5767),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5770.valid){
continue;
}
IkReal x5768=((1.0)*(x5770.value));
IkReal x5769=x5751;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5768)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5768)));
IkReal gconst124=(x5767*x5769);
IkReal gconst125=((1.0)*r10*x5769);
IkReal x5771=r12*r12;
IkReal x5772=((1.0)+(((-1.0)*x5771)));
IkReal x5773=(cj2*r22*sj1);
IkReal x5774=(cj1*r22*sj2);
CheckValue<IkReal> x5781=IKPowWithIntegerCheck(x5772,-1);
if(!x5781.valid){
continue;
}
IkReal x5775=x5781.value;
CheckValue<IkReal> x5782=IKPowWithIntegerCheck(((-1.0)+x5771),-1);
if(!x5782.valid){
continue;
}
IkReal x5776=x5782.value;
IkReal x5777=((1.0)*x5775);
if((x5772) < -0.00001)
continue;
IkReal x5778=IKsqrt(x5772);
IkReal x5779=((1.0)*r12*x5776*x5778);
IkReal x5780=((((-2.0)*r10*r11*r20*r21*x5775))+(((-1.0)*x5777*(r11*r11)*(r21*r21)))+(((-1.0)*x5777*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x5780;
j4eval[1]=IKsign(x5780);
j4eval[2]=((IKabs((x5773+x5774)))+(IKabs(((((-1.0)*x5774*x5779))+(((-1.0)*x5773*x5779))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5783=(gconst124*r21);
IkReal x5784=(cj1*sj2);
IkReal x5785=(cj2*sj1);
IkReal x5786=(gconst125*r20);
CheckValue<IkReal> x5787=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5783*x5783)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5786*x5786)))+(((2.0)*x5783*x5786)))),-1);
if(!x5787.valid){
continue;
}
CheckValue<IkReal> x5788 = IKatan2WithCheck(IkReal((((r22*x5784))+((r22*x5785)))),IkReal(((((-1.0)*x5784*x5786))+(((-1.0)*x5785*x5786))+((x5783*x5785))+((x5783*x5784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5787.value)))+(x5788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5789=IKsin(j4);
IkReal x5790=IKcos(j4);
IkReal x5791=(sj1*sj2);
IkReal x5792=(gconst125*r20);
IkReal x5793=(gconst124*r01);
IkReal x5794=(gconst125*r00);
IkReal x5795=(gconst125*r10);
IkReal x5796=((1.0)*x5790);
IkReal x5797=((1.0)*cj1*cj2);
IkReal x5798=((1.0)*x5789);
IkReal x5799=(gconst124*x5789);
IkReal x5800=(gconst124*x5790);
evalcond[0]=((((-1.0)*x5792*x5798))+((r21*x5799))+(((-1.0)*r22*x5796)));
evalcond[1]=(cj0+((r11*x5799))+(((-1.0)*x5795*x5798))+(((-1.0)*r12*x5796)));
evalcond[2]=((((-1.0)*sj0))+((x5789*x5793))+(((-1.0)*x5794*x5798))+(((-1.0)*r02*x5796)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5792*x5796))+((cj1*sj2))+((r21*x5800))+((r22*x5789)));
evalcond[4]=((((-1.0)*x5794*x5796))+(((-1.0)*cj0*x5797))+((cj0*x5791))+((x5790*x5793))+((r02*x5789)));
evalcond[5]=(((r12*x5789))+((r11*x5800))+((sj0*x5791))+(((-1.0)*x5795*x5796))+(((-1.0)*sj0*x5797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5801=((1.0)*sj0);
IkReal x5802=((1.0)*cj0);
CheckValue<IkReal> x5803 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5801))+(((-1.0)*r02*x5802)))),IkReal(((((-1.0)*gconst124*r11*x5801))+((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x5802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5803.valid){
continue;
}
CheckValue<IkReal> x5804=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5803.value)+(((1.5707963267949)*(x5804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5805=IKsin(j4);
IkReal x5806=IKcos(j4);
IkReal x5807=(sj1*sj2);
IkReal x5808=(gconst125*r20);
IkReal x5809=(gconst124*r01);
IkReal x5810=(gconst125*r00);
IkReal x5811=(gconst125*r10);
IkReal x5812=((1.0)*x5806);
IkReal x5813=((1.0)*cj1*cj2);
IkReal x5814=((1.0)*x5805);
IkReal x5815=(gconst124*x5805);
IkReal x5816=(gconst124*x5806);
evalcond[0]=(((r21*x5815))+(((-1.0)*x5808*x5814))+(((-1.0)*r22*x5812)));
evalcond[1]=((((-1.0)*r12*x5812))+cj0+(((-1.0)*x5811*x5814))+((r11*x5815)));
evalcond[2]=((((-1.0)*sj0))+((x5805*x5809))+(((-1.0)*r02*x5812))+(((-1.0)*x5810*x5814)));
evalcond[3]=(((r21*x5816))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5808*x5812))+((r22*x5805)));
evalcond[4]=((((-1.0)*cj0*x5813))+((x5806*x5809))+((cj0*x5807))+(((-1.0)*x5810*x5812))+((r02*x5805)));
evalcond[5]=((((-1.0)*sj0*x5813))+(((-1.0)*x5811*x5812))+((r11*x5816))+((r12*x5805))+((sj0*x5807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5817=((1.0)*gconst125);
CheckValue<IkReal> x5818 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5817))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5818.valid){
continue;
}
CheckValue<IkReal> x5819=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5817)))),-1);
if(!x5819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5818.value)+(((1.5707963267949)*(x5819.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5820=IKsin(j4);
IkReal x5821=IKcos(j4);
IkReal x5822=(sj1*sj2);
IkReal x5823=(gconst125*r20);
IkReal x5824=(gconst124*r01);
IkReal x5825=(gconst125*r00);
IkReal x5826=(gconst125*r10);
IkReal x5827=((1.0)*x5821);
IkReal x5828=((1.0)*cj1*cj2);
IkReal x5829=((1.0)*x5820);
IkReal x5830=(gconst124*x5820);
IkReal x5831=(gconst124*x5821);
evalcond[0]=((((-1.0)*r22*x5827))+((r21*x5830))+(((-1.0)*x5823*x5829)));
evalcond[1]=(cj0+((r11*x5830))+(((-1.0)*x5826*x5829))+(((-1.0)*r12*x5827)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5827))+((x5820*x5824))+(((-1.0)*x5825*x5829)));
evalcond[3]=(((r21*x5831))+((cj2*sj1))+(((-1.0)*x5823*x5827))+((cj1*sj2))+((r22*x5820)));
evalcond[4]=(((r02*x5820))+((x5821*x5824))+((cj0*x5822))+(((-1.0)*cj0*x5828))+(((-1.0)*x5825*x5827)));
evalcond[5]=(((r12*x5820))+((sj0*x5822))+((r11*x5831))+(((-1.0)*sj0*x5828))+(((-1.0)*x5826*x5827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5832=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5832;
j4eval[1]=IKsign(x5832);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5833=((1.0)*cj5);
IkReal x5834=((((-1.0)*r01*x5833))+(((-1.0)*r00*sj5)));
j4eval[0]=x5834;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5833))+((r21*sj5))))));
j4eval[2]=IKsign(x5834);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5835=cj5*cj5;
IkReal x5836=r11*r11;
IkReal x5837=(cj5*r10);
IkReal x5838=(r11*sj5);
IkReal x5839=(((x5835*x5836))+(((-1.0)*x5835*(r10*r10)))+(((2.0)*x5837*x5838))+(((-1.0)*(r12*r12)))+(((-1.0)*x5836)));
j4eval[0]=x5839;
j4eval[1]=IKsign(x5839);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5837))+x5838))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5840=cj5*cj5;
IkReal x5841=r11*r11;
IkReal x5842=(cj5*r10);
IkReal x5843=(r11*sj5);
CheckValue<IkReal> x5844=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5841))+(((-1.0)*x5840*(r10*r10)))+((x5840*x5841))+(((2.0)*x5842*x5843))+(((-1.0)*(r12*r12))))),-1);
if(!x5844.valid){
continue;
}
CheckValue<IkReal> x5845 = IKatan2WithCheck(IkReal(((((-1.0)*x5842))+x5843)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5844.value)))+(x5845.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5846=IKcos(j4);
IkReal x5847=IKsin(j4);
IkReal x5848=(cj5*r00);
IkReal x5849=(cj5*r10);
IkReal x5850=(r21*sj5);
IkReal x5851=(cj5*r20);
IkReal x5852=((1.0)*x5846);
IkReal x5853=((1.0)*x5847);
IkReal x5854=(sj5*x5847);
IkReal x5855=(sj5*x5846);
evalcond[0]=((((-1.0)*x5849*x5852))+((r11*x5855))+((r12*x5847)));
evalcond[1]=(((x5847*x5850))+(((-1.0)*r22*x5852))+(((-1.0)*x5851*x5853)));
evalcond[2]=(((r01*x5854))+(((-1.0)*x5848*x5853))+(((-1.0)*r02*x5852)));
evalcond[3]=((1.0)+(((-1.0)*x5849*x5853))+((r11*x5854))+(((-1.0)*r12*x5852)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5851*x5852))+((r22*x5847))+((x5846*x5850)));
evalcond[5]=(((r01*x5855))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5848*x5852))+((r02*x5847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5856=((1.0)*cj5);
CheckValue<IkReal> x5857 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5856))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5857.valid){
continue;
}
CheckValue<IkReal> x5858=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5856)))),-1);
if(!x5858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5857.value)+(((1.5707963267949)*(x5858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5859=IKcos(j4);
IkReal x5860=IKsin(j4);
IkReal x5861=(cj5*r00);
IkReal x5862=(cj5*r10);
IkReal x5863=(r21*sj5);
IkReal x5864=(cj5*r20);
IkReal x5865=((1.0)*x5859);
IkReal x5866=((1.0)*x5860);
IkReal x5867=(sj5*x5860);
IkReal x5868=(sj5*x5859);
evalcond[0]=((((-1.0)*x5862*x5865))+((r11*x5868))+((r12*x5860)));
evalcond[1]=(((x5860*x5863))+(((-1.0)*r22*x5865))+(((-1.0)*x5864*x5866)));
evalcond[2]=((((-1.0)*x5861*x5866))+(((-1.0)*r02*x5865))+((r01*x5867)));
evalcond[3]=((1.0)+(((-1.0)*x5862*x5866))+((r11*x5867))+(((-1.0)*r12*x5865)));
evalcond[4]=(((cj2*sj1))+((r22*x5860))+((cj1*sj2))+(((-1.0)*x5864*x5865))+((x5859*x5863)));
evalcond[5]=((((-1.0)*x5861*x5865))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5860))+((r01*x5868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5869=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5869.valid){
continue;
}
CheckValue<IkReal> x5870 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5869.value)))+(x5870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5871=IKcos(j4);
IkReal x5872=IKsin(j4);
IkReal x5873=(cj5*r00);
IkReal x5874=(cj5*r10);
IkReal x5875=(r21*sj5);
IkReal x5876=(cj5*r20);
IkReal x5877=((1.0)*x5871);
IkReal x5878=((1.0)*x5872);
IkReal x5879=(sj5*x5872);
IkReal x5880=(sj5*x5871);
evalcond[0]=(((r11*x5880))+(((-1.0)*x5874*x5877))+((r12*x5872)));
evalcond[1]=((((-1.0)*r22*x5877))+((x5872*x5875))+(((-1.0)*x5876*x5878)));
evalcond[2]=((((-1.0)*r02*x5877))+(((-1.0)*x5873*x5878))+((r01*x5879)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5877))+(((-1.0)*x5874*x5878))+((r11*x5879)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5872))+((x5871*x5875))+(((-1.0)*x5876*x5877)));
evalcond[5]=(((r01*x5880))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5873*x5877))+((r02*x5872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5881=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5881;
j4eval[1]=IKsign(x5881);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5882=((1.0)*cj5);
IkReal x5883=((((-1.0)*r21*x5882))+(((-1.0)*r20*sj5)));
j4eval[0]=x5883;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x5882)))))+(IKabs(r02)));
j4eval[2]=IKsign(x5883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5884=cj5*cj5;
IkReal x5885=r11*r11;
IkReal x5886=(r11*sj5);
IkReal x5887=(cj5*r10);
IkReal x5888=((r12*r12)+((x5884*(r10*r10)))+(((-2.0)*x5886*x5887))+x5885+(((-1.0)*x5884*x5885)));
j4eval[0]=x5888;
j4eval[1]=IKsign(x5888);
j4eval[2]=((IKabs(((((-1.0)*x5887))+x5886)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5889=cj5*cj5;
IkReal x5890=r11*r11;
IkReal x5891=(cj5*r10);
IkReal x5892=(r11*sj5);
CheckValue<IkReal> x5893 = IKatan2WithCheck(IkReal(((((-1.0)*x5891))+x5892)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5893.valid){
continue;
}
CheckValue<IkReal> x5894=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5889*x5890))+((x5889*(r10*r10)))+(((-2.0)*x5891*x5892))+x5890)),-1);
if(!x5894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5893.value)+(((1.5707963267949)*(x5894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5895=IKcos(j4);
IkReal x5896=IKsin(j4);
IkReal x5897=(cj5*r00);
IkReal x5898=(cj5*r10);
IkReal x5899=(r21*sj5);
IkReal x5900=(cj5*r20);
IkReal x5901=((1.0)*x5895);
IkReal x5902=((1.0)*x5896);
IkReal x5903=(sj5*x5896);
IkReal x5904=(sj5*x5895);
evalcond[0]=((((-1.0)*x5898*x5901))+((r12*x5896))+((r11*x5904)));
evalcond[1]=((((-1.0)*r22*x5901))+(((-1.0)*x5900*x5902))+((x5896*x5899)));
evalcond[2]=((((-1.0)*x5897*x5902))+(((-1.0)*r02*x5901))+((r01*x5903)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5901))+(((-1.0)*x5898*x5902))+((r11*x5903)));
evalcond[4]=(((r22*x5896))+((cj2*sj1))+((cj1*sj2))+((x5895*x5899))+(((-1.0)*x5900*x5901)));
evalcond[5]=((((-1.0)*x5897*x5901))+(((-1.0)*sj1*sj2))+((r02*x5896))+((cj1*cj2))+((r01*x5904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5905=((1.0)*cj5);
CheckValue<IkReal> x5906 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x5905))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5906.valid){
continue;
}
CheckValue<IkReal> x5907=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5905))+(((-1.0)*r20*sj5)))),-1);
if(!x5907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5906.value)+(((1.5707963267949)*(x5907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5908=IKcos(j4);
IkReal x5909=IKsin(j4);
IkReal x5910=(cj5*r00);
IkReal x5911=(cj5*r10);
IkReal x5912=(r21*sj5);
IkReal x5913=(cj5*r20);
IkReal x5914=((1.0)*x5908);
IkReal x5915=((1.0)*x5909);
IkReal x5916=(sj5*x5909);
IkReal x5917=(sj5*x5908);
evalcond[0]=(((r12*x5909))+(((-1.0)*x5911*x5914))+((r11*x5917)));
evalcond[1]=(((x5909*x5912))+(((-1.0)*r22*x5914))+(((-1.0)*x5913*x5915)));
evalcond[2]=(((r01*x5916))+(((-1.0)*x5910*x5915))+(((-1.0)*r02*x5914)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5914))+(((-1.0)*x5911*x5915))+((r11*x5916)));
evalcond[4]=(((cj2*sj1))+((r22*x5909))+((cj1*sj2))+((x5908*x5912))+(((-1.0)*x5913*x5914)));
evalcond[5]=(((r01*x5917))+(((-1.0)*sj1*sj2))+((r02*x5909))+(((-1.0)*x5910*x5914))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5918 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5918.valid){
continue;
}
CheckValue<IkReal> x5919=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5918.value)+(((1.5707963267949)*(x5919.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5920=IKcos(j4);
IkReal x5921=IKsin(j4);
IkReal x5922=(cj5*r00);
IkReal x5923=(cj5*r10);
IkReal x5924=(r21*sj5);
IkReal x5925=(cj5*r20);
IkReal x5926=((1.0)*x5920);
IkReal x5927=((1.0)*x5921);
IkReal x5928=(sj5*x5921);
IkReal x5929=(sj5*x5920);
evalcond[0]=(((r11*x5929))+((r12*x5921))+(((-1.0)*x5923*x5926)));
evalcond[1]=((((-1.0)*r22*x5926))+((x5921*x5924))+(((-1.0)*x5925*x5927)));
evalcond[2]=((((-1.0)*r02*x5926))+((r01*x5928))+(((-1.0)*x5922*x5927)));
evalcond[3]=((-1.0)+((r11*x5928))+(((-1.0)*r12*x5926))+(((-1.0)*x5923*x5927)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5925*x5926))+((cj1*sj2))+((x5920*x5924))+((r22*x5921)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r01*x5929))+(((-1.0)*x5922*x5926))+((r02*x5921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5930=((-1.0)*r00);
IkReal x5932 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5932)==0){
continue;
}
IkReal x5931=pow(x5932,-0.5);
CheckValue<IkReal> x5933 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5930),IKFAST_ATAN2_MAGTHRESH);
if(!x5933.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5933.value));
IkReal gconst127=(r01*x5931);
IkReal gconst128=(x5930*x5931);
CheckValue<IkReal> x5934 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5934.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5934.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5935=((-1.0)*r00);
IkReal x5936=x5931;
CheckValue<IkReal> x5938 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5935),IKFAST_ATAN2_MAGTHRESH);
if(!x5938.valid){
continue;
}
IkReal x5937=((-1.0)*(x5938.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5937;
IkReal gconst126=x5937;
IkReal gconst127=(r01*x5936);
IkReal gconst128=(x5935*x5936);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5939=((1.0)*sj0);
IkReal x5940=((1.0)*gconst127);
CheckValue<IkReal> x5941=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5940)))),-1);
if(!x5941.valid){
continue;
}
CheckValue<IkReal> x5942 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5939)))),IkReal(((((-1.0)*cj0*r01*x5940))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5941.value)))+(x5942.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5943=IKsin(j4);
IkReal x5944=IKcos(j4);
IkReal x5945=(gconst127*r01);
IkReal x5946=(sj1*sj2);
IkReal x5947=(gconst128*r10);
IkReal x5948=(gconst128*r00);
IkReal x5949=(gconst128*r20);
IkReal x5950=((1.0)*x5944);
IkReal x5951=((1.0)*cj1*cj2);
IkReal x5952=((1.0)*x5943);
IkReal x5953=(gconst127*x5944);
IkReal x5954=(gconst127*x5943);
evalcond[0]=(((r21*x5954))+(((-1.0)*r22*x5950))+(((-1.0)*x5949*x5952)));
evalcond[1]=(cj0+(((-1.0)*x5947*x5952))+((r11*x5954))+(((-1.0)*r12*x5950)));
evalcond[2]=(((x5943*x5945))+(((-1.0)*sj0))+(((-1.0)*r02*x5950))+(((-1.0)*x5948*x5952)));
evalcond[3]=(((cj2*sj1))+((r21*x5953))+((cj1*sj2))+((r22*x5943))+(((-1.0)*x5949*x5950)));
evalcond[4]=(((cj0*x5946))+((x5944*x5945))+(((-1.0)*x5948*x5950))+(((-1.0)*cj0*x5951))+((r02*x5943)));
evalcond[5]=((((-1.0)*x5947*x5950))+((r11*x5953))+((r12*x5943))+((sj0*x5946))+(((-1.0)*sj0*x5951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5955=((1.0)*gconst128);
CheckValue<IkReal> x5956=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5955))+(((-1.0)*gconst127*r10)))),-1);
if(!x5956.valid){
continue;
}
CheckValue<IkReal> x5957 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5956.value)))+(x5957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5958=IKsin(j4);
IkReal x5959=IKcos(j4);
IkReal x5960=(gconst127*r01);
IkReal x5961=(sj1*sj2);
IkReal x5962=(gconst128*r10);
IkReal x5963=(gconst128*r00);
IkReal x5964=(gconst128*r20);
IkReal x5965=((1.0)*x5959);
IkReal x5966=((1.0)*cj1*cj2);
IkReal x5967=((1.0)*x5958);
IkReal x5968=(gconst127*x5959);
IkReal x5969=(gconst127*x5958);
evalcond[0]=((((-1.0)*r22*x5965))+((r21*x5969))+(((-1.0)*x5964*x5967)));
evalcond[1]=(cj0+(((-1.0)*r12*x5965))+((r11*x5969))+(((-1.0)*x5962*x5967)));
evalcond[2]=((((-1.0)*sj0))+((x5958*x5960))+(((-1.0)*x5963*x5967))+(((-1.0)*r02*x5965)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5968))+((r22*x5958))+(((-1.0)*x5964*x5965)));
evalcond[4]=(((cj0*x5961))+((x5959*x5960))+((r02*x5958))+(((-1.0)*cj0*x5966))+(((-1.0)*x5963*x5965)));
evalcond[5]=((((-1.0)*sj0*x5966))+((r12*x5958))+((r11*x5968))+((sj0*x5961))+(((-1.0)*x5962*x5965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5970=((-1.0)*r01);
IkReal x5972 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5972)==0){
continue;
}
IkReal x5971=pow(x5972,-0.5);
CheckValue<IkReal> x5973 = IKatan2WithCheck(IkReal(x5970),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5973.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5973.value))));
IkReal gconst130=(x5970*x5971);
IkReal gconst131=((1.0)*r00*x5971);
CheckValue<IkReal> x5974 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5974.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5974.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5975=((-1.0)*r01);
CheckValue<IkReal> x5978 = IKatan2WithCheck(IkReal(x5975),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5978.valid){
continue;
}
IkReal x5976=((1.0)*(x5978.value));
IkReal x5977=x5971;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5976)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5976)));
IkReal gconst130=(x5975*x5977);
IkReal gconst131=((1.0)*r00*x5977);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5979=((-1.0)*r01);
CheckValue<IkReal> x5982 = IKatan2WithCheck(IkReal(x5979),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5982.valid){
continue;
}
IkReal x5980=((1.0)*(x5982.value));
IkReal x5981=x5971;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5980)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5980)));
IkReal gconst130=(x5979*x5981);
IkReal gconst131=((1.0)*r00*x5981);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5983=((-1.0)*r01);
CheckValue<IkReal> x5986 = IKatan2WithCheck(IkReal(x5983),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5986.valid){
continue;
}
IkReal x5984=((1.0)*(x5986.value));
IkReal x5985=x5971;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5984)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5984)));
IkReal gconst130=(x5983*x5985);
IkReal gconst131=((1.0)*r00*x5985);
IkReal x5987=r02*r02;
IkReal x5988=(r12*sj0);
IkReal x5989=((1.0)*cj0);
IkReal x5990=x5971;
j4eval[0]=((IKabs((((r02*x5988*x5990))+((cj0*x5987*x5990))+(((-1.0)*x5989*x5990)))))+(IKabs(((((-1.0)*x5988))+(((-1.0)*r02*x5989))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5991=((1.0)*sj0);
IkReal x5992=((1.0)*gconst130);
CheckValue<IkReal> x5993 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5991))+(((-1.0)*cj0*r02)))),IkReal((((gconst131*r10*sj0))+(((-1.0)*gconst130*r11*x5991))+(((-1.0)*cj0*r01*x5992))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5993.valid){
continue;
}
CheckValue<IkReal> x5994=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5992))+(((-1.0)*gconst131*r21)))),-1);
if(!x5994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5993.value)+(((1.5707963267949)*(x5994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5995=IKsin(j4);
IkReal x5996=IKcos(j4);
IkReal x5997=(gconst131*r10);
IkReal x5998=(sj1*sj2);
IkReal x5999=(gconst131*r20);
IkReal x6000=(gconst131*r00);
IkReal x6001=((1.0)*x5996);
IkReal x6002=((1.0)*cj1*cj2);
IkReal x6003=(gconst130*x5995);
IkReal x6004=((1.0)*x5995);
IkReal x6005=(gconst130*x5996);
evalcond[0]=(((r21*x6003))+(((-1.0)*r22*x6001))+(((-1.0)*x5999*x6004)));
evalcond[1]=(cj0+((r11*x6003))+(((-1.0)*r12*x6001))+(((-1.0)*x5997*x6004)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6000*x6004))+((r01*x6003))+(((-1.0)*r02*x6001)));
evalcond[3]=(((r21*x6005))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5999*x6001))+((r22*x5995)));
evalcond[4]=(((r02*x5995))+(((-1.0)*cj0*x6002))+((cj0*x5998))+(((-1.0)*x6000*x6001))+((r01*x6005)));
evalcond[5]=(((r12*x5995))+(((-1.0)*sj0*x6002))+((sj0*x5998))+((r11*x6005))+(((-1.0)*x5997*x6001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6006=((1.0)*gconst131);
CheckValue<IkReal> x6007=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6006))+(((-1.0)*gconst130*r10)))),-1);
if(!x6007.valid){
continue;
}
CheckValue<IkReal> x6008 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6007.value)))+(x6008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6009=IKsin(j4);
IkReal x6010=IKcos(j4);
IkReal x6011=(gconst131*r10);
IkReal x6012=(sj1*sj2);
IkReal x6013=(gconst131*r20);
IkReal x6014=(gconst131*r00);
IkReal x6015=((1.0)*x6010);
IkReal x6016=((1.0)*cj1*cj2);
IkReal x6017=(gconst130*x6009);
IkReal x6018=((1.0)*x6009);
IkReal x6019=(gconst130*x6010);
evalcond[0]=(((r21*x6017))+(((-1.0)*r22*x6015))+(((-1.0)*x6013*x6018)));
evalcond[1]=(((r11*x6017))+cj0+(((-1.0)*r12*x6015))+(((-1.0)*x6011*x6018)));
evalcond[2]=(((r01*x6017))+(((-1.0)*sj0))+(((-1.0)*r02*x6015))+(((-1.0)*x6014*x6018)));
evalcond[3]=(((cj2*sj1))+((r22*x6009))+((r21*x6019))+((cj1*sj2))+(((-1.0)*x6013*x6015)));
evalcond[4]=(((r01*x6019))+((cj0*x6012))+((r02*x6009))+(((-1.0)*cj0*x6016))+(((-1.0)*x6014*x6015)));
evalcond[5]=(((r12*x6009))+((r11*x6019))+(((-1.0)*sj0*x6016))+(((-1.0)*x6011*x6015))+((sj0*x6012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6020=((1.0)*gconst131);
CheckValue<IkReal> x6021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6020))+(((-1.0)*gconst130*r00)))),-1);
if(!x6021.valid){
continue;
}
CheckValue<IkReal> x6022 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6020))+((cj0*gconst130*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6021.value)))+(x6022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6023=IKsin(j4);
IkReal x6024=IKcos(j4);
IkReal x6025=(gconst131*r10);
IkReal x6026=(sj1*sj2);
IkReal x6027=(gconst131*r20);
IkReal x6028=(gconst131*r00);
IkReal x6029=((1.0)*x6024);
IkReal x6030=((1.0)*cj1*cj2);
IkReal x6031=(gconst130*x6023);
IkReal x6032=((1.0)*x6023);
IkReal x6033=(gconst130*x6024);
evalcond[0]=(((r21*x6031))+(((-1.0)*r22*x6029))+(((-1.0)*x6027*x6032)));
evalcond[1]=(cj0+((r11*x6031))+(((-1.0)*x6025*x6032))+(((-1.0)*r12*x6029)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6029))+((r01*x6031))+(((-1.0)*x6028*x6032)));
evalcond[3]=((((-1.0)*x6027*x6029))+((cj2*sj1))+((r21*x6033))+((cj1*sj2))+((r22*x6023)));
evalcond[4]=(((r02*x6023))+(((-1.0)*x6028*x6029))+(((-1.0)*cj0*x6030))+((cj0*x6026))+((r01*x6033)));
evalcond[5]=(((sj0*x6026))+(((-1.0)*x6025*x6029))+(((-1.0)*sj0*x6030))+((r11*x6033))+((r12*x6023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6034=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6034;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6035=((1.0)*cj5);
IkReal x6036=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6035)));
j4eval[0]=x6036;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6035))))));
j4eval[2]=IKsign(x6036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6037=cj5*cj5;
IkReal x6038=r01*r01;
IkReal x6039=(cj5*r00);
IkReal x6040=(r01*sj5);
IkReal x6041=(x6038+(((-2.0)*x6039*x6040))+((x6037*(r00*r00)))+(((-1.0)*x6037*x6038))+(r02*r02));
j4eval[0]=x6041;
j4eval[1]=IKsign(x6041);
j4eval[2]=((IKabs((x6040+(((-1.0)*x6039)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6042=cj5*cj5;
IkReal x6043=r01*r01;
IkReal x6044=(r01*sj5);
IkReal x6045=(cj5*r00);
CheckValue<IkReal> x6046=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6042*x6043))+x6043+(((-2.0)*x6044*x6045))+((x6042*(r00*r00)))+(r02*r02))),-1);
if(!x6046.valid){
continue;
}
CheckValue<IkReal> x6047 = IKatan2WithCheck(IkReal((x6044+(((-1.0)*x6045)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6046.value)))+(x6047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6048=IKcos(j4);
IkReal x6049=IKsin(j4);
IkReal x6050=(cj5*r00);
IkReal x6051=(cj5*r10);
IkReal x6052=(r21*sj5);
IkReal x6053=(cj5*r20);
IkReal x6054=((1.0)*x6048);
IkReal x6055=((1.0)*x6049);
IkReal x6056=(sj5*x6049);
IkReal x6057=(sj5*x6048);
evalcond[0]=(((r01*x6057))+(((-1.0)*x6050*x6054))+((r02*x6049)));
evalcond[1]=((((-1.0)*x6053*x6055))+(((-1.0)*r22*x6054))+((x6049*x6052)));
evalcond[2]=((((-1.0)*x6051*x6055))+(((-1.0)*r12*x6054))+((r11*x6056)));
evalcond[3]=((-1.0)+((r01*x6056))+(((-1.0)*x6050*x6055))+(((-1.0)*r02*x6054)));
evalcond[4]=((((-1.0)*x6053*x6054))+((cj2*sj1))+((cj1*sj2))+((r22*x6049))+((x6048*x6052)));
evalcond[5]=((((-1.0)*x6051*x6054))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6049))+((r11*x6057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6058=((1.0)*cj5);
CheckValue<IkReal> x6059=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6058)))),-1);
if(!x6059.valid){
continue;
}
CheckValue<IkReal> x6060 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6059.value)))+(x6060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6061=IKcos(j4);
IkReal x6062=IKsin(j4);
IkReal x6063=(cj5*r00);
IkReal x6064=(cj5*r10);
IkReal x6065=(r21*sj5);
IkReal x6066=(cj5*r20);
IkReal x6067=((1.0)*x6061);
IkReal x6068=((1.0)*x6062);
IkReal x6069=(sj5*x6062);
IkReal x6070=(sj5*x6061);
evalcond[0]=(((r01*x6070))+(((-1.0)*x6063*x6067))+((r02*x6062)));
evalcond[1]=((((-1.0)*r22*x6067))+((x6062*x6065))+(((-1.0)*x6066*x6068)));
evalcond[2]=((((-1.0)*x6064*x6068))+((r11*x6069))+(((-1.0)*r12*x6067)));
evalcond[3]=((-1.0)+((r01*x6069))+(((-1.0)*r02*x6067))+(((-1.0)*x6063*x6068)));
evalcond[4]=(((cj2*sj1))+((x6061*x6065))+((cj1*sj2))+((r22*x6062))+(((-1.0)*x6066*x6067)));
evalcond[5]=(((r11*x6070))+(((-1.0)*x6064*x6067))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6071=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6071.valid){
continue;
}
CheckValue<IkReal> x6072 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6071.value)))+(x6072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6073=IKcos(j4);
IkReal x6074=IKsin(j4);
IkReal x6075=(cj5*r00);
IkReal x6076=(cj5*r10);
IkReal x6077=(r21*sj5);
IkReal x6078=(cj5*r20);
IkReal x6079=((1.0)*x6073);
IkReal x6080=((1.0)*x6074);
IkReal x6081=(sj5*x6074);
IkReal x6082=(sj5*x6073);
evalcond[0]=(((r01*x6082))+(((-1.0)*x6075*x6079))+((r02*x6074)));
evalcond[1]=(((x6074*x6077))+(((-1.0)*x6078*x6080))+(((-1.0)*r22*x6079)));
evalcond[2]=((((-1.0)*r12*x6079))+((r11*x6081))+(((-1.0)*x6076*x6080)));
evalcond[3]=((-1.0)+((r01*x6081))+(((-1.0)*r02*x6079))+(((-1.0)*x6075*x6080)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6074))+(((-1.0)*x6078*x6079))+((x6073*x6077)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6076*x6079))+((r11*x6082))+((r12*x6074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6083=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6083;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6084=((1.0)*cj5);
IkReal x6085=((((-1.0)*r21*x6084))+(((-1.0)*r20*sj5)));
j4eval[0]=x6085;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6084))))));
j4eval[2]=IKsign(x6085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6086=(r01*sj5);
IkReal x6087=(cj1*sj2);
IkReal x6088=(cj2*sj1);
IkReal x6089=((1.0)*r02);
IkReal x6090=((1.0)*cj5*r00);
IkReal x6091=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6091;
j4eval[1]=((IKabs(((((-1.0)*x6088*x6089))+(((-1.0)*x6087*x6089)))))+(IKabs(((((-1.0)*x6087*x6090))+((x6086*x6087))+((x6086*x6088))+(((-1.0)*x6088*x6090))))));
j4eval[2]=IKsign(x6091);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6092=(r01*sj5);
IkReal x6093=(cj1*sj2);
IkReal x6094=(cj2*sj1);
IkReal x6095=((1.0)*r02);
IkReal x6096=((1.0)*cj5*r00);
CheckValue<IkReal> x6097 = IKatan2WithCheck(IkReal((((x6092*x6094))+((x6092*x6093))+(((-1.0)*x6093*x6096))+(((-1.0)*x6094*x6096)))),IkReal(((((-1.0)*x6093*x6095))+(((-1.0)*x6094*x6095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6097.valid){
continue;
}
CheckValue<IkReal> x6098=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6097.value)+(((1.5707963267949)*(x6098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6099=IKcos(j4);
IkReal x6100=IKsin(j4);
IkReal x6101=(cj5*r00);
IkReal x6102=(cj5*r10);
IkReal x6103=(r21*sj5);
IkReal x6104=(cj5*r20);
IkReal x6105=((1.0)*x6099);
IkReal x6106=((1.0)*x6100);
IkReal x6107=(sj5*x6100);
IkReal x6108=(sj5*x6099);
evalcond[0]=((((-1.0)*x6101*x6105))+((r02*x6100))+((r01*x6108)));
evalcond[1]=((((-1.0)*x6104*x6106))+((x6100*x6103))+(((-1.0)*r22*x6105)));
evalcond[2]=(((r11*x6107))+(((-1.0)*x6102*x6106))+(((-1.0)*r12*x6105)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6105))+(((-1.0)*x6101*x6106))+((r01*x6107)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6104*x6105))+((r22*x6100))+((cj1*sj2))+((x6099*x6103)));
evalcond[5]=(((r11*x6108))+(((-1.0)*x6102*x6105))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x6100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6109=((1.0)*cj5);
CheckValue<IkReal> x6110=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6109))+(((-1.0)*r20*sj5)))),-1);
if(!x6110.valid){
continue;
}
CheckValue<IkReal> x6111 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6109)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6110.value)))+(x6111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6112=IKcos(j4);
IkReal x6113=IKsin(j4);
IkReal x6114=(cj5*r00);
IkReal x6115=(cj5*r10);
IkReal x6116=(r21*sj5);
IkReal x6117=(cj5*r20);
IkReal x6118=((1.0)*x6112);
IkReal x6119=((1.0)*x6113);
IkReal x6120=(sj5*x6113);
IkReal x6121=(sj5*x6112);
evalcond[0]=(((r01*x6121))+((r02*x6113))+(((-1.0)*x6114*x6118)));
evalcond[1]=(((x6113*x6116))+(((-1.0)*r22*x6118))+(((-1.0)*x6117*x6119)));
evalcond[2]=((((-1.0)*r12*x6118))+(((-1.0)*x6115*x6119))+((r11*x6120)));
evalcond[3]=((1.0)+((r01*x6120))+(((-1.0)*x6114*x6119))+(((-1.0)*r02*x6118)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6113))+((x6112*x6116))+(((-1.0)*x6117*x6118)));
evalcond[5]=((((-1.0)*x6115*x6118))+(((-1.0)*sj1*sj2))+((r12*x6113))+((cj1*cj2))+((r11*x6121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6122 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6122.valid){
continue;
}
CheckValue<IkReal> x6123=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6122.value)+(((1.5707963267949)*(x6123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6124=IKcos(j4);
IkReal x6125=IKsin(j4);
IkReal x6126=(cj5*r00);
IkReal x6127=(cj5*r10);
IkReal x6128=(r21*sj5);
IkReal x6129=(cj5*r20);
IkReal x6130=((1.0)*x6124);
IkReal x6131=((1.0)*x6125);
IkReal x6132=(sj5*x6125);
IkReal x6133=(sj5*x6124);
evalcond[0]=((((-1.0)*x6126*x6130))+((r02*x6125))+((r01*x6133)));
evalcond[1]=(((x6125*x6128))+(((-1.0)*x6129*x6131))+(((-1.0)*r22*x6130)));
evalcond[2]=(((r11*x6132))+(((-1.0)*x6127*x6131))+(((-1.0)*r12*x6130)));
evalcond[3]=((1.0)+(((-1.0)*x6126*x6131))+((r01*x6132))+(((-1.0)*r02*x6130)));
evalcond[4]=(((cj2*sj1))+((x6124*x6128))+((cj1*sj2))+(((-1.0)*x6129*x6130))+((r22*x6125)));
evalcond[5]=(((r11*x6133))+((r12*x6125))+(((-1.0)*sj1*sj2))+(((-1.0)*x6127*x6130))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6134=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6134);
rxp1_1=(px*r21);
rxp1_2=(r11*x6134);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6135=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6135);
rxp1_1=(px*r21);
rxp1_2=(r11*x6135);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6136=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6136);
rxp1_1=(px*r21);
rxp1_2=(r11*x6136);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6139=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6139.valid){
continue;
}
IkReal x6137=x6139.value;
IkReal x6138=(sj0*x6137);
cj4array[0]=(((cj1*cj2*x6138))+(((-1.0)*sj1*sj2*x6138)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6140=IKsin(j4);
IkReal x6141=IKcos(j4);
IkReal x6142=(r21*sj5);
IkReal x6143=((1.0)*cj5*r20);
evalcond[0]=(r02*x6140);
evalcond[1]=((((-1.0)*r02*x6141))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x6140*x6143))+((x6140*x6142)));
evalcond[3]=(((r11*sj5*x6140))+(((-1.0)*cj5*r10*x6140)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6141*x6143))+((x6141*x6142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6146=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6146.valid){
continue;
}
IkReal x6144=x6146.value;
IkReal x6145=((1.0)*x6144);
cj4array[0]=((((-1.0)*cj2*sj1*x6145))+(((-1.0)*cj1*sj2*x6145)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6147=IKsin(j4);
IkReal x6148=IKcos(j4);
IkReal x6149=((1.0)*sj0);
IkReal x6150=((1.0)*cj5);
IkReal x6151=(sj5*x6147);
evalcond[0]=(r02*x6147);
evalcond[1]=((((-1.0)*x6149))+(((-1.0)*r02*x6148)));
evalcond[2]=(((r21*x6151))+(((-1.0)*r20*x6147*x6150)));
evalcond[3]=((((-1.0)*r10*x6147*x6150))+((r11*x6151)));
evalcond[4]=(((r11*sj5*x6148))+(((-1.0)*r10*x6148*x6150))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6152=IKPowWithIntegerCheck(r02,-1);
if(!x6152.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6152.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6153=IKsin(j4);
IkReal x6154=IKcos(j4);
IkReal x6155=(r21*sj5);
IkReal x6156=((1.0)*cj5);
IkReal x6157=(r11*sj5);
evalcond[0]=(r02*x6153);
evalcond[1]=(((x6153*x6155))+(((-1.0)*r20*x6153*x6156)));
evalcond[2]=(((x6153*x6157))+(((-1.0)*r10*x6153*x6156)));
evalcond[3]=(((cj2*sj1))+((x6154*x6155))+((cj1*sj2))+(((-1.0)*r20*x6154*x6156)));
evalcond[4]=(((x6154*x6157))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r10*x6154*x6156))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6158=((1.0)*sj0);
IkReal x6159=((1.0)*cj0);
CheckValue<IkReal> x6160 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6159))+(((-1.0)*r12*x6158)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6159))+(((-1.0)*r11*sj5*x6158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6160.valid){
continue;
}
CheckValue<IkReal> x6161=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6160.value)+(((1.5707963267949)*(x6161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6162=IKsin(j4);
IkReal x6163=IKcos(j4);
IkReal x6164=(cj5*r00);
IkReal x6165=(cj5*r10);
IkReal x6166=(r21*sj5);
IkReal x6167=(sj1*sj2);
IkReal x6168=(cj5*r20);
IkReal x6169=((1.0)*x6163);
IkReal x6170=((1.0)*cj1*cj2);
IkReal x6171=((1.0)*x6162);
IkReal x6172=(sj5*x6162);
IkReal x6173=(sj5*x6163);
evalcond[0]=((((-1.0)*x6168*x6171))+((x6162*x6166))+(((-1.0)*r22*x6169)));
evalcond[1]=(cj0+((r11*x6172))+(((-1.0)*r12*x6169))+(((-1.0)*x6165*x6171)));
evalcond[2]=((((-1.0)*x6164*x6171))+(((-1.0)*sj0))+((r01*x6172))+(((-1.0)*r02*x6169)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6168*x6169))+((cj1*sj2))+((x6163*x6166))+((r22*x6162)));
evalcond[4]=((((-1.0)*cj0*x6170))+((r02*x6162))+((r01*x6173))+((cj0*x6167))+(((-1.0)*x6164*x6169)));
evalcond[5]=((((-1.0)*sj0*x6170))+((sj0*x6167))+((r12*x6162))+((r11*x6173))+(((-1.0)*x6165*x6169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6174=((1.0)*cj5);
CheckValue<IkReal> x6175 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6174))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6175.valid){
continue;
}
CheckValue<IkReal> x6176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6174)))),-1);
if(!x6176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6175.value)+(((1.5707963267949)*(x6176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6177=IKsin(j4);
IkReal x6178=IKcos(j4);
IkReal x6179=(cj5*r00);
IkReal x6180=(cj5*r10);
IkReal x6181=(r21*sj5);
IkReal x6182=(sj1*sj2);
IkReal x6183=(cj5*r20);
IkReal x6184=((1.0)*x6178);
IkReal x6185=((1.0)*cj1*cj2);
IkReal x6186=((1.0)*x6177);
IkReal x6187=(sj5*x6177);
IkReal x6188=(sj5*x6178);
evalcond[0]=((((-1.0)*r22*x6184))+((x6177*x6181))+(((-1.0)*x6183*x6186)));
evalcond[1]=(cj0+(((-1.0)*r12*x6184))+((r11*x6187))+(((-1.0)*x6180*x6186)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6184))+((r01*x6187))+(((-1.0)*x6179*x6186)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6183*x6184))+((r22*x6177))+((x6178*x6181)));
evalcond[4]=(((r01*x6188))+((r02*x6177))+((cj0*x6182))+(((-1.0)*x6179*x6184))+(((-1.0)*cj0*x6185)));
evalcond[5]=(((r12*x6177))+((r11*x6188))+((sj0*x6182))+(((-1.0)*sj0*x6185))+(((-1.0)*x6180*x6184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6189=((1.0)*cj5);
CheckValue<IkReal> x6190 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6190.valid){
continue;
}
CheckValue<IkReal> x6191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6189))+(((-1.0)*r00*sj5)))),-1);
if(!x6191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6190.value)+(((1.5707963267949)*(x6191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6192=IKsin(j4);
IkReal x6193=IKcos(j4);
IkReal x6194=(cj5*r00);
IkReal x6195=(cj5*r10);
IkReal x6196=(r21*sj5);
IkReal x6197=(sj1*sj2);
IkReal x6198=(cj5*r20);
IkReal x6199=((1.0)*x6193);
IkReal x6200=((1.0)*cj1*cj2);
IkReal x6201=((1.0)*x6192);
IkReal x6202=(sj5*x6192);
IkReal x6203=(sj5*x6193);
evalcond[0]=((((-1.0)*x6198*x6201))+(((-1.0)*r22*x6199))+((x6192*x6196)));
evalcond[1]=(cj0+(((-1.0)*r12*x6199))+(((-1.0)*x6195*x6201))+((r11*x6202)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6202))+(((-1.0)*x6194*x6201))+(((-1.0)*r02*x6199)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6198*x6199))+((r22*x6192))+((x6193*x6196)));
evalcond[4]=(((r01*x6203))+((r02*x6192))+(((-1.0)*x6194*x6199))+(((-1.0)*cj0*x6200))+((cj0*x6197)));
evalcond[5]=(((r12*x6192))+((sj0*x6197))+(((-1.0)*x6195*x6199))+((r11*x6203))+(((-1.0)*sj0*x6200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6204=r21*r21;
IkReal x6205=cj5*cj5;
IkReal x6206=(cj2*sj1);
IkReal x6207=(cj1*sj2);
IkReal x6208=(r21*sj5);
IkReal x6209=((1.0)*cj5*r20);
CheckValue<IkReal> x6210 = IKatan2WithCheck(IkReal((((r22*x6206))+((r22*x6207)))),IkReal((((x6207*x6208))+(((-1.0)*x6207*x6209))+(((-1.0)*x6206*x6209))+((x6206*x6208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6210.valid){
continue;
}
CheckValue<IkReal> x6211=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6204))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x6208))+((x6204*x6205))+(((-1.0)*x6205*(r20*r20))))),-1);
if(!x6211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6210.value)+(((1.5707963267949)*(x6211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6212=IKsin(j4);
IkReal x6213=IKcos(j4);
IkReal x6214=(r21*sj5);
IkReal x6215=(cj5*r20);
IkReal x6216=((1.0)*x6213);
evalcond[0]=(((x6212*x6214))+(((-1.0)*x6212*x6215))+(((-1.0)*r22*x6216)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((x6213*x6214))+(((-1.0)*x6215*x6216))+((r22*x6212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6217=(cj5*sj4);
IkReal x6218=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6218))+(((-1.0)*r00*x6217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6217))+(((-1.0)*r11*x6218))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6218))+(((-1.0)*r00*x6217))))+IKsqr((((r10*x6217))+(((-1.0)*r11*x6218))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6218))+(((-1.0)*r00*x6217))), (((r10*x6217))+(((-1.0)*r11*x6218))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6219=IKcos(j0);
IkReal x6220=IKsin(j0);
IkReal x6221=(cj5*r01);
IkReal x6222=((1.0)*cj1);
IkReal x6223=((0.39225)*sj1);
IkReal x6224=(r11*sj5);
IkReal x6225=((0.39225)*cj2);
IkReal x6226=((1.0)*sj1);
IkReal x6227=(r00*sj5);
IkReal x6228=(cj5*r11);
IkReal x6229=((1.0)*cj4);
IkReal x6230=(r01*sj5);
IkReal x6231=(r10*sj5);
IkReal x6232=(sj2*x6219);
IkReal x6233=(sj2*x6220);
IkReal x6234=(cj5*x6229);
IkReal x6235=(cj1*x6219);
IkReal x6236=(cj1*x6220);
IkReal x6237=(cj2*x6219);
IkReal x6238=((1.0)*cj5*sj4);
IkReal x6239=(cj2*x6220);
evalcond[0]=(x6219+(((-1.0)*r10*x6238))+(((-1.0)*r12*x6229))+((sj4*x6224)));
evalcond[1]=(((sj4*x6230))+(((-1.0)*x6220))+(((-1.0)*r00*x6238))+(((-1.0)*r02*x6229)));
evalcond[2]=((((-1.0)*x6222*x6232))+x6221+x6227+(((-1.0)*x6226*x6237)));
evalcond[3]=((((-1.0)*x6222*x6233))+x6228+x6231+(((-1.0)*x6226*x6239)));
evalcond[4]=((((-1.0)*x6222*x6237))+((sj1*x6232))+((r02*sj4))+(((-1.0)*r00*x6234))+((cj4*x6230)));
evalcond[5]=((((-1.0)*x6222*x6239))+(((-1.0)*r10*x6234))+((sj1*x6233))+((r12*sj4))+((cj4*x6224)));
evalcond[6]=((((-0.09465)*x6221))+(((-0.09465)*x6227))+((x6225*x6235))+(((-0.10915)*x6220))+(((-1.0)*px))+(((0.425)*x6235))+(((-1.0)*x6223*x6232)));
evalcond[7]=((((-0.09465)*x6228))+((x6225*x6236))+(((-0.09465)*x6231))+(((0.10915)*x6219))+(((-1.0)*py))+(((0.425)*x6236))+(((-1.0)*x6223*x6233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6240=((1.0)*cj5);
IkReal x6241=((1.0)*sj5);
CheckValue<IkReal> x6242 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x6241))+(((-1.0)*r11*x6240)))),IkReal(((((-1.0)*r01*x6240))+(((-1.0)*r00*x6241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6242.valid){
continue;
}
CheckValue<IkReal> x6243=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6243.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6242.value)+(((1.5707963267949)*(x6243.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6244=IKcos(j0);
IkReal x6245=IKsin(j0);
IkReal x6246=(cj5*r01);
IkReal x6247=((1.0)*cj1);
IkReal x6248=((0.39225)*sj1);
IkReal x6249=(cj5*r11);
IkReal x6250=(r00*sj5);
IkReal x6251=((0.39225)*cj2);
IkReal x6252=(r10*sj5);
IkReal x6253=(sj2*x6244);
IkReal x6254=(sj2*x6245);
IkReal x6255=(cj1*x6244);
IkReal x6256=((1.0)*cj2*sj1);
IkReal x6257=(cj1*x6245);
evalcond[0]=(x6246+x6250+(((-1.0)*x6247*x6253))+(((-1.0)*x6244*x6256)));
evalcond[1]=(x6249+x6252+(((-1.0)*x6247*x6254))+(((-1.0)*x6245*x6256)));
evalcond[2]=((((-0.09465)*x6246))+(((-0.09465)*x6250))+((x6251*x6255))+(((-1.0)*px))+(((-0.10915)*x6245))+(((-1.0)*x6248*x6253))+(((0.425)*x6255)));
evalcond[3]=((((-0.09465)*x6249))+(((-0.09465)*x6252))+((x6251*x6257))+(((-1.0)*py))+(((-1.0)*x6248*x6254))+(((0.425)*x6257))+(((0.10915)*x6244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6258=((1.0)*cj5);
IkReal x6259=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6258)));
j4eval[0]=x6259;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6258))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6260=((1.0)*cj5);
IkReal x6261=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6260)));
j4eval[0]=x6261;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6260))))));
j4eval[2]=IKsign(x6261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6262=((1.0)*sj0);
IkReal x6263=((1.0)*cj0);
IkReal x6264=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6264;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6262))+(((-1.0)*r01*sj5*x6263)))))+(IKabs(((((-1.0)*r02*x6263))+(((-1.0)*r12*x6262))))));
j4eval[2]=IKsign(x6264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6265=((-1.0)*r20);
IkReal x6267 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6267)==0){
continue;
}
IkReal x6266=pow(x6267,-0.5);
CheckValue<IkReal> x6268 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6265),IKFAST_ATAN2_MAGTHRESH);
if(!x6268.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6268.value));
IkReal gconst115=(r21*x6266);
IkReal gconst116=(x6265*x6266);
CheckValue<IkReal> x6269 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6269.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6269.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6270=((-1.0)*r20);
IkReal x6271=x6266;
CheckValue<IkReal> x6273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6270),IKFAST_ATAN2_MAGTHRESH);
if(!x6273.valid){
continue;
}
IkReal x6272=((-1.0)*(x6273.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6272;
IkReal gconst114=x6272;
IkReal gconst115=(r21*x6271);
IkReal gconst116=(x6270*x6271);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6274=((-1.0)*r20);
IkReal x6275=x6266;
CheckValue<IkReal> x6277 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6274),IKFAST_ATAN2_MAGTHRESH);
if(!x6277.valid){
continue;
}
IkReal x6276=((-1.0)*(x6277.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6276;
IkReal gconst114=x6276;
IkReal gconst115=(r21*x6275);
IkReal gconst116=(x6274*x6275);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6278=((-1.0)*r20);
IkReal x6279=x6266;
CheckValue<IkReal> x6281 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6278),IKFAST_ATAN2_MAGTHRESH);
if(!x6281.valid){
continue;
}
IkReal x6280=((-1.0)*(x6281.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6280;
IkReal gconst114=x6280;
IkReal gconst115=(r21*x6279);
IkReal gconst116=(x6278*x6279);
IkReal x6282=((1.0)*(r22*r22));
CheckValue<IkReal> x6286=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6282))),-1);
if(!x6286.valid){
continue;
}
IkReal x6283=x6286.value;
IkReal x6284=((1.0)*x6283);
IkReal x6285=((((-2.0)*x6283*(r20*r20)*(r21*r21)))+(((-1.0)*x6284*(r20*r20*r20*r20)))+(((-1.0)*x6282))+(((-1.0)*x6284*(r21*r21*r21*r21))));
j4eval[0]=x6285;
j4eval[1]=IKsign(x6285);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6287=(cj2*sj1);
IkReal x6288=(gconst115*r21);
IkReal x6289=(cj1*sj2);
IkReal x6290=((1.0)*gconst116*r20);
CheckValue<IkReal> x6291=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6288*x6288)))+(((-1.0)*gconst116*r20*x6290))+(((2.0)*gconst116*r20*x6288))+(((-1.0)*(r22*r22))))),-1);
if(!x6291.valid){
continue;
}
CheckValue<IkReal> x6292 = IKatan2WithCheck(IkReal((((r22*x6289))+((r22*x6287)))),IkReal(((((-1.0)*x6289*x6290))+((x6288*x6289))+((x6287*x6288))+(((-1.0)*x6287*x6290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6291.value)))+(x6292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6293=IKsin(j4);
IkReal x6294=IKcos(j4);
IkReal x6295=(sj1*sj2);
IkReal x6296=((1.0)*x6294);
IkReal x6297=((1.0)*cj1*cj2);
IkReal x6298=(gconst115*x6293);
IkReal x6299=(gconst115*x6294);
IkReal x6300=((1.0)*gconst116*x6293);
evalcond[0]=((((-1.0)*r22*x6296))+(((-1.0)*r20*x6300))+((r21*x6298)));
evalcond[1]=(cj0+(((-1.0)*r10*x6300))+((r11*x6298))+(((-1.0)*r12*x6296)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6298))+(((-1.0)*r02*x6296))+(((-1.0)*r00*x6300)));
evalcond[3]=(((cj2*sj1))+((r22*x6293))+((cj1*sj2))+(((-1.0)*gconst116*r20*x6296))+((r21*x6299)));
evalcond[4]=(((r01*x6299))+(((-1.0)*gconst116*r00*x6296))+((cj0*x6295))+((r02*x6293))+(((-1.0)*cj0*x6297)));
evalcond[5]=(((r11*x6299))+((r12*x6293))+(((-1.0)*gconst116*r10*x6296))+((sj0*x6295))+(((-1.0)*sj0*x6297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6301=((1.0)*gconst116);
CheckValue<IkReal> x6302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6301))+(((-1.0)*gconst115*r10)))),-1);
if(!x6302.valid){
continue;
}
CheckValue<IkReal> x6303 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x6301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6302.value)))+(x6303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6304=IKsin(j4);
IkReal x6305=IKcos(j4);
IkReal x6306=(sj1*sj2);
IkReal x6307=((1.0)*x6305);
IkReal x6308=((1.0)*cj1*cj2);
IkReal x6309=(gconst115*x6304);
IkReal x6310=(gconst115*x6305);
IkReal x6311=((1.0)*gconst116*x6304);
evalcond[0]=(((r21*x6309))+(((-1.0)*r20*x6311))+(((-1.0)*r22*x6307)));
evalcond[1]=(cj0+(((-1.0)*r12*x6307))+(((-1.0)*r10*x6311))+((r11*x6309)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6307))+((r01*x6309))+(((-1.0)*r00*x6311)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6304))+((r21*x6310))+(((-1.0)*gconst116*r20*x6307)));
evalcond[4]=(((r01*x6310))+((r02*x6304))+((cj0*x6306))+(((-1.0)*gconst116*r00*x6307))+(((-1.0)*cj0*x6308)));
evalcond[5]=(((r11*x6310))+(((-1.0)*sj0*x6308))+((r12*x6304))+(((-1.0)*gconst116*r10*x6307))+((sj0*x6306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6312=((1.0)*gconst116);
CheckValue<IkReal> x6313=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6312)))),-1);
if(!x6313.valid){
continue;
}
CheckValue<IkReal> x6314 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6313.value)))+(x6314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6315=IKsin(j4);
IkReal x6316=IKcos(j4);
IkReal x6317=(sj1*sj2);
IkReal x6318=((1.0)*x6316);
IkReal x6319=((1.0)*cj1*cj2);
IkReal x6320=(gconst115*x6315);
IkReal x6321=(gconst115*x6316);
IkReal x6322=((1.0)*gconst116*x6315);
evalcond[0]=((((-1.0)*r22*x6318))+(((-1.0)*r20*x6322))+((r21*x6320)));
evalcond[1]=(((r11*x6320))+cj0+(((-1.0)*r12*x6318))+(((-1.0)*r10*x6322)));
evalcond[2]=((((-1.0)*r00*x6322))+(((-1.0)*sj0))+(((-1.0)*r02*x6318))+((r01*x6320)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6315))+(((-1.0)*gconst116*r20*x6318))+((r21*x6321)));
evalcond[4]=(((r02*x6315))+((cj0*x6317))+((r01*x6321))+(((-1.0)*gconst116*r00*x6318))+(((-1.0)*cj0*x6319)));
evalcond[5]=(((r11*x6321))+(((-1.0)*sj0*x6319))+(((-1.0)*gconst116*r10*x6318))+((r12*x6315))+((sj0*x6317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6323=((-1.0)*r21);
IkReal x6325 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6325)==0){
continue;
}
IkReal x6324=pow(x6325,-0.5);
CheckValue<IkReal> x6326 = IKatan2WithCheck(IkReal(x6323),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6326.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6326.value))));
IkReal gconst118=(x6323*x6324);
IkReal gconst119=((1.0)*r20*x6324);
CheckValue<IkReal> x6327 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6327.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6327.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6328=((-1.0)*r21);
CheckValue<IkReal> x6331 = IKatan2WithCheck(IkReal(x6328),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6331.valid){
continue;
}
IkReal x6329=((1.0)*(x6331.value));
IkReal x6330=x6324;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6329)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6329)));
IkReal gconst118=(x6328*x6330);
IkReal gconst119=((1.0)*r20*x6330);
IkReal x6332=r22*r22;
IkReal x6333=((1.0)*x6332);
CheckValue<IkReal> x6337=IKPowWithIntegerCheck(((-1.0)+x6332),-1);
if(!x6337.valid){
continue;
}
IkReal x6334=x6337.value;
if((((1.0)+(((-1.0)*x6333)))) < -0.00001)
continue;
IkReal x6335=IKsqrt(((1.0)+(((-1.0)*x6333))));
IkReal x6336=(cj0*x6334*x6335);
j4eval[0]=((IKabs(((((-1.0)*x6333*x6336))+x6336)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6338=((-1.0)*r21);
CheckValue<IkReal> x6341 = IKatan2WithCheck(IkReal(x6338),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6341.valid){
continue;
}
IkReal x6339=((1.0)*(x6341.value));
IkReal x6340=x6324;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6339)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6339)));
IkReal gconst118=(x6338*x6340);
IkReal gconst119=((1.0)*r20*x6340);
IkReal x6342=r22*r22;
IkReal x6343=((1.0)*x6342);
CheckValue<IkReal> x6347=IKPowWithIntegerCheck(((-1.0)+x6342),-1);
if(!x6347.valid){
continue;
}
IkReal x6344=x6347.value;
if((((1.0)+(((-1.0)*x6343)))) < -0.00001)
continue;
IkReal x6345=IKsqrt(((1.0)+(((-1.0)*x6343))));
IkReal x6346=(sj0*x6344*x6345);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6346+(((-1.0)*x6343*x6346))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6348=((-1.0)*r21);
CheckValue<IkReal> x6351 = IKatan2WithCheck(IkReal(x6348),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6351.valid){
continue;
}
IkReal x6349=((1.0)*(x6351.value));
IkReal x6350=x6324;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6349)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6349)));
IkReal gconst118=(x6348*x6350);
IkReal gconst119=((1.0)*r20*x6350);
IkReal x6352=r22*r22;
IkReal x6353=(r12*sj0);
IkReal x6354=(cj0*r02);
CheckValue<IkReal> x6358=IKPowWithIntegerCheck(((-1.0)+x6352),-1);
if(!x6358.valid){
continue;
}
IkReal x6355=x6358.value;
if((((1.0)+(((-1.0)*x6352)))) < -0.00001)
continue;
IkReal x6356=IKsqrt(((1.0)+(((-1.0)*x6352))));
IkReal x6357=(r22*x6355*x6356);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6353))+(((-1.0)*x6354)))))+(IKabs((((x6353*x6357))+((x6354*x6357))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6359=((1.0)*sj0);
IkReal x6360=((1.0)*gconst118);
CheckValue<IkReal> x6361 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6359)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6359))+(((-1.0)*cj0*r01*x6360))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6361.valid){
continue;
}
CheckValue<IkReal> x6362=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6360)))),-1);
if(!x6362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6361.value)+(((1.5707963267949)*(x6362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6363=IKsin(j4);
IkReal x6364=IKcos(j4);
IkReal x6365=(gconst118*r01);
IkReal x6366=(sj1*sj2);
IkReal x6367=(gconst119*r20);
IkReal x6368=(gconst119*r10);
IkReal x6369=(gconst119*r00);
IkReal x6370=(gconst118*r21);
IkReal x6371=(gconst118*r11);
IkReal x6372=((1.0)*x6364);
IkReal x6373=((1.0)*cj1*cj2);
IkReal x6374=((1.0)*x6363);
evalcond[0]=((((-1.0)*x6367*x6374))+((x6363*x6370))+(((-1.0)*r22*x6372)));
evalcond[1]=((((-1.0)*x6368*x6374))+cj0+(((-1.0)*r12*x6372))+((x6363*x6371)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6372))+((x6363*x6365))+(((-1.0)*x6369*x6374)));
evalcond[3]=(((x6364*x6370))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6367*x6372))+((r22*x6363)));
evalcond[4]=(((cj0*x6366))+((r02*x6363))+(((-1.0)*x6369*x6372))+(((-1.0)*cj0*x6373))+((x6364*x6365)));
evalcond[5]=(((x6364*x6371))+(((-1.0)*x6368*x6372))+(((-1.0)*sj0*x6373))+((r12*x6363))+((sj0*x6366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6375=((1.0)*gconst119);
CheckValue<IkReal> x6376 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6375))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6376.valid){
continue;
}
CheckValue<IkReal> x6377=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6375)))),-1);
if(!x6377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6376.value)+(((1.5707963267949)*(x6377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6378=IKsin(j4);
IkReal x6379=IKcos(j4);
IkReal x6380=(gconst118*r01);
IkReal x6381=(sj1*sj2);
IkReal x6382=(gconst119*r20);
IkReal x6383=(gconst119*r10);
IkReal x6384=(gconst119*r00);
IkReal x6385=(gconst118*r21);
IkReal x6386=(gconst118*r11);
IkReal x6387=((1.0)*x6379);
IkReal x6388=((1.0)*cj1*cj2);
IkReal x6389=((1.0)*x6378);
evalcond[0]=((((-1.0)*x6382*x6389))+(((-1.0)*r22*x6387))+((x6378*x6385)));
evalcond[1]=(cj0+(((-1.0)*x6383*x6389))+(((-1.0)*r12*x6387))+((x6378*x6386)));
evalcond[2]=((((-1.0)*x6384*x6389))+(((-1.0)*sj0))+((x6378*x6380))+(((-1.0)*r02*x6387)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6382*x6387))+((cj1*sj2))+((x6379*x6385))+((r22*x6378)));
evalcond[4]=((((-1.0)*x6384*x6387))+((cj0*x6381))+(((-1.0)*cj0*x6388))+((x6379*x6380))+((r02*x6378)));
evalcond[5]=(((sj0*x6381))+(((-1.0)*x6383*x6387))+((r12*x6378))+(((-1.0)*sj0*x6388))+((x6379*x6386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6390=((1.0)*gconst119);
CheckValue<IkReal> x6391=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6390)))),-1);
if(!x6391.valid){
continue;
}
CheckValue<IkReal> x6392 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6391.value)))+(x6392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6393=IKsin(j4);
IkReal x6394=IKcos(j4);
IkReal x6395=(gconst118*r01);
IkReal x6396=(sj1*sj2);
IkReal x6397=(gconst119*r20);
IkReal x6398=(gconst119*r10);
IkReal x6399=(gconst119*r00);
IkReal x6400=(gconst118*r21);
IkReal x6401=(gconst118*r11);
IkReal x6402=((1.0)*x6394);
IkReal x6403=((1.0)*cj1*cj2);
IkReal x6404=((1.0)*x6393);
evalcond[0]=(((x6393*x6400))+(((-1.0)*r22*x6402))+(((-1.0)*x6397*x6404)));
evalcond[1]=(((x6393*x6401))+cj0+(((-1.0)*r12*x6402))+(((-1.0)*x6398*x6404)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6402))+((x6393*x6395))+(((-1.0)*x6399*x6404)));
evalcond[3]=(((cj2*sj1))+((x6394*x6400))+((cj1*sj2))+(((-1.0)*x6397*x6402))+((r22*x6393)));
evalcond[4]=(((cj0*x6396))+((x6394*x6395))+(((-1.0)*cj0*x6403))+(((-1.0)*x6399*x6402))+((r02*x6393)));
evalcond[5]=(((x6394*x6401))+((r12*x6393))+((sj0*x6396))+(((-1.0)*sj0*x6403))+(((-1.0)*x6398*x6402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6405=((-1.0)*r10);
IkReal x6407 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6407)==0){
continue;
}
IkReal x6406=pow(x6407,-0.5);
CheckValue<IkReal> x6408 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6405),IKFAST_ATAN2_MAGTHRESH);
if(!x6408.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6408.value));
IkReal gconst121=(r11*x6406);
IkReal gconst122=(x6405*x6406);
CheckValue<IkReal> x6409 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6409.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6409.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6410=((-1.0)*r10);
IkReal x6411=x6406;
CheckValue<IkReal> x6413 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6410),IKFAST_ATAN2_MAGTHRESH);
if(!x6413.valid){
continue;
}
IkReal x6412=((-1.0)*(x6413.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6412;
IkReal gconst120=x6412;
IkReal gconst121=(r11*x6411);
IkReal gconst122=(x6410*x6411);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6414=((1.0)*sj0);
IkReal x6415=((1.0)*gconst121);
CheckValue<IkReal> x6416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6415))+(((-1.0)*gconst122*r21)))),-1);
if(!x6416.valid){
continue;
}
CheckValue<IkReal> x6417 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6414)))),IkReal(((((-1.0)*cj0*r01*x6415))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x6414))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6416.value)))+(x6417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6418=IKsin(j4);
IkReal x6419=IKcos(j4);
IkReal x6420=(gconst121*r11);
IkReal x6421=(sj1*sj2);
IkReal x6422=(gconst122*r00);
IkReal x6423=(gconst122*r10);
IkReal x6424=(gconst122*r20);
IkReal x6425=((1.0)*x6419);
IkReal x6426=((1.0)*cj1*cj2);
IkReal x6427=((1.0)*x6418);
IkReal x6428=(gconst121*x6418);
IkReal x6429=(gconst121*x6419);
evalcond[0]=(((r21*x6428))+(((-1.0)*r22*x6425))+(((-1.0)*x6424*x6427)));
evalcond[1]=(cj0+((x6418*x6420))+(((-1.0)*x6423*x6427))+(((-1.0)*r12*x6425)));
evalcond[2]=((((-1.0)*x6422*x6427))+(((-1.0)*sj0))+((r01*x6428))+(((-1.0)*r02*x6425)));
evalcond[3]=(((r21*x6429))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6424*x6425))+((r22*x6418)));
evalcond[4]=((((-1.0)*x6422*x6425))+((r02*x6418))+(((-1.0)*cj0*x6426))+((r01*x6429))+((cj0*x6421)));
evalcond[5]=((((-1.0)*sj0*x6426))+((r12*x6418))+((x6419*x6420))+((sj0*x6421))+(((-1.0)*x6423*x6425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6430=((1.0)*gconst122);
CheckValue<IkReal> x6431 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6430))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6431.valid){
continue;
}
CheckValue<IkReal> x6432=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6430))+(((-1.0)*gconst121*r00)))),-1);
if(!x6432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6431.value)+(((1.5707963267949)*(x6432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6433=IKsin(j4);
IkReal x6434=IKcos(j4);
IkReal x6435=(gconst121*r11);
IkReal x6436=(sj1*sj2);
IkReal x6437=(gconst122*r00);
IkReal x6438=(gconst122*r10);
IkReal x6439=(gconst122*r20);
IkReal x6440=((1.0)*x6434);
IkReal x6441=((1.0)*cj1*cj2);
IkReal x6442=((1.0)*x6433);
IkReal x6443=(gconst121*x6433);
IkReal x6444=(gconst121*x6434);
evalcond[0]=((((-1.0)*x6439*x6442))+((r21*x6443))+(((-1.0)*r22*x6440)));
evalcond[1]=(cj0+(((-1.0)*x6438*x6442))+((x6433*x6435))+(((-1.0)*r12*x6440)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6443))+(((-1.0)*r02*x6440))+(((-1.0)*x6437*x6442)));
evalcond[3]=(((r22*x6433))+((cj2*sj1))+(((-1.0)*x6439*x6440))+((cj1*sj2))+((r21*x6444)));
evalcond[4]=(((r01*x6444))+((cj0*x6436))+((r02*x6433))+(((-1.0)*x6437*x6440))+(((-1.0)*cj0*x6441)));
evalcond[5]=((((-1.0)*sj0*x6441))+((r12*x6433))+((x6434*x6435))+(((-1.0)*x6438*x6440))+((sj0*x6436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6445=((-1.0)*r11);
IkReal x6447 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6447)==0){
continue;
}
IkReal x6446=pow(x6447,-0.5);
CheckValue<IkReal> x6448 = IKatan2WithCheck(IkReal(x6445),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6448.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6448.value))));
IkReal gconst124=(x6445*x6446);
IkReal gconst125=((1.0)*r10*x6446);
CheckValue<IkReal> x6449 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6449.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6449.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6450=((-1.0)*r11);
CheckValue<IkReal> x6453 = IKatan2WithCheck(IkReal(x6450),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6453.valid){
continue;
}
IkReal x6451=((1.0)*(x6453.value));
IkReal x6452=x6446;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6451)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6451)));
IkReal gconst124=(x6450*x6452);
IkReal gconst125=((1.0)*r10*x6452);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6454=((-1.0)*r11);
CheckValue<IkReal> x6457 = IKatan2WithCheck(IkReal(x6454),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6457.valid){
continue;
}
IkReal x6455=((1.0)*(x6457.value));
IkReal x6456=x6446;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6455)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6455)));
IkReal gconst124=(x6454*x6456);
IkReal gconst125=((1.0)*r10*x6456);
IkReal x6458=r12*r12;
IkReal x6459=((1.0)*sj0);
IkReal x6460=(cj0*r02);
IkReal x6461=x6446;
j4eval[0]=((IKabs((((r12*x6460*x6461))+((sj0*x6458*x6461))+(((-1.0)*x6459*x6461)))))+(IKabs(((((-1.0)*r12*x6459))+(((-1.0)*x6460))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6462=((-1.0)*r11);
CheckValue<IkReal> x6465 = IKatan2WithCheck(IkReal(x6462),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6465.valid){
continue;
}
IkReal x6463=((1.0)*(x6465.value));
IkReal x6464=x6446;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6463)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6463)));
IkReal gconst124=(x6462*x6464);
IkReal gconst125=((1.0)*r10*x6464);
IkReal x6466=r12*r12;
IkReal x6467=((1.0)+(((-1.0)*x6466)));
IkReal x6468=(cj2*r22*sj1);
IkReal x6469=(cj1*r22*sj2);
CheckValue<IkReal> x6476=IKPowWithIntegerCheck(x6467,-1);
if(!x6476.valid){
continue;
}
IkReal x6470=x6476.value;
CheckValue<IkReal> x6477=IKPowWithIntegerCheck(((-1.0)+x6466),-1);
if(!x6477.valid){
continue;
}
IkReal x6471=x6477.value;
IkReal x6472=((1.0)*x6470);
if((x6467) < -0.00001)
continue;
IkReal x6473=IKsqrt(x6467);
IkReal x6474=((1.0)*r12*x6471*x6473);
IkReal x6475=((((-2.0)*r10*r11*r20*r21*x6470))+(((-1.0)*x6472*(r11*r11)*(r21*r21)))+(((-1.0)*x6472*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x6475;
j4eval[1]=IKsign(x6475);
j4eval[2]=((IKabs((x6468+x6469)))+(IKabs(((((-1.0)*x6468*x6474))+(((-1.0)*x6469*x6474))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6478=(gconst124*r21);
IkReal x6479=(cj1*sj2);
IkReal x6480=(cj2*sj1);
IkReal x6481=(gconst125*r20);
CheckValue<IkReal> x6482=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6481*x6481)))+(((2.0)*x6478*x6481))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6478*x6478))))),-1);
if(!x6482.valid){
continue;
}
CheckValue<IkReal> x6483 = IKatan2WithCheck(IkReal((((r22*x6479))+((r22*x6480)))),IkReal((((x6478*x6479))+(((-1.0)*x6480*x6481))+(((-1.0)*x6479*x6481))+((x6478*x6480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6482.value)))+(x6483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6484=IKsin(j4);
IkReal x6485=IKcos(j4);
IkReal x6486=(sj1*sj2);
IkReal x6487=(gconst125*r20);
IkReal x6488=(gconst124*r01);
IkReal x6489=(gconst125*r00);
IkReal x6490=(gconst125*r10);
IkReal x6491=((1.0)*x6485);
IkReal x6492=((1.0)*cj1*cj2);
IkReal x6493=((1.0)*x6484);
IkReal x6494=(gconst124*x6484);
IkReal x6495=(gconst124*x6485);
evalcond[0]=((((-1.0)*x6487*x6493))+(((-1.0)*r22*x6491))+((r21*x6494)));
evalcond[1]=(cj0+((r11*x6494))+(((-1.0)*r12*x6491))+(((-1.0)*x6490*x6493)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6491))+(((-1.0)*x6489*x6493))+((x6484*x6488)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6487*x6491))+((cj1*sj2))+((r22*x6484))+((r21*x6495)));
evalcond[4]=((((-1.0)*x6489*x6491))+((cj0*x6486))+((r02*x6484))+((x6485*x6488))+(((-1.0)*cj0*x6492)));
evalcond[5]=(((r11*x6495))+(((-1.0)*sj0*x6492))+((r12*x6484))+(((-1.0)*x6490*x6491))+((sj0*x6486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6496=((1.0)*sj0);
IkReal x6497=((1.0)*cj0);
CheckValue<IkReal> x6498 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6497))+(((-1.0)*r12*x6496)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x6496))+(((-1.0)*gconst124*r01*x6497))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6498.valid){
continue;
}
CheckValue<IkReal> x6499=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6498.value)+(((1.5707963267949)*(x6499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6500=IKsin(j4);
IkReal x6501=IKcos(j4);
IkReal x6502=(sj1*sj2);
IkReal x6503=(gconst125*r20);
IkReal x6504=(gconst124*r01);
IkReal x6505=(gconst125*r00);
IkReal x6506=(gconst125*r10);
IkReal x6507=((1.0)*x6501);
IkReal x6508=((1.0)*cj1*cj2);
IkReal x6509=((1.0)*x6500);
IkReal x6510=(gconst124*x6500);
IkReal x6511=(gconst124*x6501);
evalcond[0]=((((-1.0)*x6503*x6509))+(((-1.0)*r22*x6507))+((r21*x6510)));
evalcond[1]=((((-1.0)*r12*x6507))+cj0+((r11*x6510))+(((-1.0)*x6506*x6509)));
evalcond[2]=(((x6500*x6504))+(((-1.0)*sj0))+(((-1.0)*r02*x6507))+(((-1.0)*x6505*x6509)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6503*x6507))+((cj1*sj2))+((r22*x6500))+((r21*x6511)));
evalcond[4]=(((r02*x6500))+(((-1.0)*cj0*x6508))+((cj0*x6502))+((x6501*x6504))+(((-1.0)*x6505*x6507)));
evalcond[5]=(((r12*x6500))+((sj0*x6502))+((r11*x6511))+(((-1.0)*sj0*x6508))+(((-1.0)*x6506*x6507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6512=((1.0)*gconst125);
CheckValue<IkReal> x6513=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6512)))),-1);
if(!x6513.valid){
continue;
}
CheckValue<IkReal> x6514 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6512))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6513.value)))+(x6514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6515=IKsin(j4);
IkReal x6516=IKcos(j4);
IkReal x6517=(sj1*sj2);
IkReal x6518=(gconst125*r20);
IkReal x6519=(gconst124*r01);
IkReal x6520=(gconst125*r00);
IkReal x6521=(gconst125*r10);
IkReal x6522=((1.0)*x6516);
IkReal x6523=((1.0)*cj1*cj2);
IkReal x6524=((1.0)*x6515);
IkReal x6525=(gconst124*x6515);
IkReal x6526=(gconst124*x6516);
evalcond[0]=((((-1.0)*x6518*x6524))+(((-1.0)*r22*x6522))+((r21*x6525)));
evalcond[1]=(cj0+(((-1.0)*x6521*x6524))+(((-1.0)*r12*x6522))+((r11*x6525)));
evalcond[2]=(((x6515*x6519))+(((-1.0)*sj0))+(((-1.0)*r02*x6522))+(((-1.0)*x6520*x6524)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6518*x6522))+((cj1*sj2))+((r21*x6526))+((r22*x6515)));
evalcond[4]=(((cj0*x6517))+(((-1.0)*cj0*x6523))+(((-1.0)*x6520*x6522))+((r02*x6515))+((x6516*x6519)));
evalcond[5]=((((-1.0)*x6521*x6522))+((r12*x6515))+((sj0*x6517))+((r11*x6526))+(((-1.0)*sj0*x6523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6527=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6527;
j4eval[1]=IKsign(x6527);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6528=((1.0)*cj5);
IkReal x6529=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6528)));
j4eval[0]=x6529;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6528))))));
j4eval[2]=IKsign(x6529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6530=cj5*cj5;
IkReal x6531=r11*r11;
IkReal x6532=(cj5*r10);
IkReal x6533=(r11*sj5);
IkReal x6534=((((-1.0)*x6530*(r10*r10)))+(((-1.0)*x6531))+(((2.0)*x6532*x6533))+((x6530*x6531))+(((-1.0)*(r12*r12))));
j4eval[0]=x6534;
j4eval[1]=IKsign(x6534);
j4eval[2]=((IKabs((x6533+(((-1.0)*x6532)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6535=cj5*cj5;
IkReal x6536=r11*r11;
IkReal x6537=(cj5*r10);
IkReal x6538=(r11*sj5);
CheckValue<IkReal> x6539=IKPowWithIntegerCheck(IKsign(((((2.0)*x6537*x6538))+(((-1.0)*x6536))+(((-1.0)*x6535*(r10*r10)))+(((-1.0)*(r12*r12)))+((x6535*x6536)))),-1);
if(!x6539.valid){
continue;
}
CheckValue<IkReal> x6540 = IKatan2WithCheck(IkReal((x6538+(((-1.0)*x6537)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6539.value)))+(x6540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6541=IKcos(j4);
IkReal x6542=IKsin(j4);
IkReal x6543=(cj5*r00);
IkReal x6544=(cj5*r10);
IkReal x6545=(r21*sj5);
IkReal x6546=(cj5*r20);
IkReal x6547=((1.0)*x6541);
IkReal x6548=((1.0)*x6542);
IkReal x6549=(sj5*x6542);
IkReal x6550=(sj5*x6541);
evalcond[0]=(((r11*x6550))+((r12*x6542))+(((-1.0)*x6544*x6547)));
evalcond[1]=((((-1.0)*r22*x6547))+((x6542*x6545))+(((-1.0)*x6546*x6548)));
evalcond[2]=((((-1.0)*r02*x6547))+(((-1.0)*x6543*x6548))+((r01*x6549)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6547))+((r11*x6549))+(((-1.0)*x6544*x6548)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6541*x6545))+(((-1.0)*x6546*x6547))+((r22*x6542)));
evalcond[5]=(((r02*x6542))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6543*x6547))+((r01*x6550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6551=((1.0)*cj5);
CheckValue<IkReal> x6552 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6552.valid){
continue;
}
CheckValue<IkReal> x6553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6551)))),-1);
if(!x6553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6552.value)+(((1.5707963267949)*(x6553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6554=IKcos(j4);
IkReal x6555=IKsin(j4);
IkReal x6556=(cj5*r00);
IkReal x6557=(cj5*r10);
IkReal x6558=(r21*sj5);
IkReal x6559=(cj5*r20);
IkReal x6560=((1.0)*x6554);
IkReal x6561=((1.0)*x6555);
IkReal x6562=(sj5*x6555);
IkReal x6563=(sj5*x6554);
evalcond[0]=(((r11*x6563))+(((-1.0)*x6557*x6560))+((r12*x6555)));
evalcond[1]=((((-1.0)*r22*x6560))+(((-1.0)*x6559*x6561))+((x6555*x6558)));
evalcond[2]=((((-1.0)*x6556*x6561))+(((-1.0)*r02*x6560))+((r01*x6562)));
evalcond[3]=((1.0)+((r11*x6562))+(((-1.0)*x6557*x6561))+(((-1.0)*r12*x6560)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6555))+((x6554*x6558))+(((-1.0)*x6559*x6560)));
evalcond[5]=(((r02*x6555))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6556*x6560))+((r01*x6563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6564=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6564.valid){
continue;
}
CheckValue<IkReal> x6565 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6564.value)))+(x6565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6566=IKcos(j4);
IkReal x6567=IKsin(j4);
IkReal x6568=(cj5*r00);
IkReal x6569=(cj5*r10);
IkReal x6570=(r21*sj5);
IkReal x6571=(cj5*r20);
IkReal x6572=((1.0)*x6566);
IkReal x6573=((1.0)*x6567);
IkReal x6574=(sj5*x6567);
IkReal x6575=(sj5*x6566);
evalcond[0]=(((r12*x6567))+((r11*x6575))+(((-1.0)*x6569*x6572)));
evalcond[1]=((((-1.0)*x6571*x6573))+((x6567*x6570))+(((-1.0)*r22*x6572)));
evalcond[2]=(((r01*x6574))+(((-1.0)*x6568*x6573))+(((-1.0)*r02*x6572)));
evalcond[3]=((1.0)+((r11*x6574))+(((-1.0)*x6569*x6573))+(((-1.0)*r12*x6572)));
evalcond[4]=((((-1.0)*x6571*x6572))+((cj2*sj1))+((r22*x6567))+((cj1*sj2))+((x6566*x6570)));
evalcond[5]=(((r01*x6575))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6567))+(((-1.0)*x6568*x6572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6576=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6576;
j4eval[1]=IKsign(x6576);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6577=((1.0)*cj5);
IkReal x6578=((((-1.0)*r21*x6577))+(((-1.0)*r20*sj5)));
j4eval[0]=x6578;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6577))))));
j4eval[2]=IKsign(x6578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6579=cj5*cj5;
IkReal x6580=r11*r11;
IkReal x6581=(r11*sj5);
IkReal x6582=(cj5*r10);
IkReal x6583=(((x6579*(r10*r10)))+(r12*r12)+x6580+(((-2.0)*x6581*x6582))+(((-1.0)*x6579*x6580)));
j4eval[0]=x6583;
j4eval[1]=IKsign(x6583);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6582))+x6581))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6584=cj5*cj5;
IkReal x6585=r11*r11;
IkReal x6586=(cj5*r10);
IkReal x6587=(r11*sj5);
CheckValue<IkReal> x6588 = IKatan2WithCheck(IkReal(((((-1.0)*x6586))+x6587)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6588.valid){
continue;
}
CheckValue<IkReal> x6589=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6584*x6585))+x6585+((x6584*(r10*r10)))+(((-2.0)*x6586*x6587)))),-1);
if(!x6589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6588.value)+(((1.5707963267949)*(x6589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6590=IKcos(j4);
IkReal x6591=IKsin(j4);
IkReal x6592=(cj5*r00);
IkReal x6593=(cj5*r10);
IkReal x6594=(r21*sj5);
IkReal x6595=(cj5*r20);
IkReal x6596=((1.0)*x6590);
IkReal x6597=((1.0)*x6591);
IkReal x6598=(sj5*x6591);
IkReal x6599=(sj5*x6590);
evalcond[0]=(((r12*x6591))+((r11*x6599))+(((-1.0)*x6593*x6596)));
evalcond[1]=(((x6591*x6594))+(((-1.0)*r22*x6596))+(((-1.0)*x6595*x6597)));
evalcond[2]=((((-1.0)*r02*x6596))+((r01*x6598))+(((-1.0)*x6592*x6597)));
evalcond[3]=((-1.0)+((r11*x6598))+(((-1.0)*r12*x6596))+(((-1.0)*x6593*x6597)));
evalcond[4]=(((cj2*sj1))+((r22*x6591))+((cj1*sj2))+((x6590*x6594))+(((-1.0)*x6595*x6596)));
evalcond[5]=(((r02*x6591))+(((-1.0)*sj1*sj2))+((r01*x6599))+(((-1.0)*x6592*x6596))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6600=((1.0)*cj5);
CheckValue<IkReal> x6601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6600))+(((-1.0)*r20*sj5)))),-1);
if(!x6601.valid){
continue;
}
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6601.value)))+(x6602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6603=IKcos(j4);
IkReal x6604=IKsin(j4);
IkReal x6605=(cj5*r00);
IkReal x6606=(cj5*r10);
IkReal x6607=(r21*sj5);
IkReal x6608=(cj5*r20);
IkReal x6609=((1.0)*x6603);
IkReal x6610=((1.0)*x6604);
IkReal x6611=(sj5*x6604);
IkReal x6612=(sj5*x6603);
evalcond[0]=(((r11*x6612))+(((-1.0)*x6606*x6609))+((r12*x6604)));
evalcond[1]=((((-1.0)*x6608*x6610))+(((-1.0)*r22*x6609))+((x6604*x6607)));
evalcond[2]=((((-1.0)*x6605*x6610))+((r01*x6611))+(((-1.0)*r02*x6609)));
evalcond[3]=((-1.0)+(((-1.0)*x6606*x6610))+((r11*x6611))+(((-1.0)*r12*x6609)));
evalcond[4]=(((cj2*sj1))+((r22*x6604))+((cj1*sj2))+(((-1.0)*x6608*x6609))+((x6603*x6607)));
evalcond[5]=(((r01*x6612))+(((-1.0)*sj1*sj2))+((r02*x6604))+((cj1*cj2))+(((-1.0)*x6605*x6609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6613 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6613.valid){
continue;
}
CheckValue<IkReal> x6614=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6613.value)+(((1.5707963267949)*(x6614.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6615=IKcos(j4);
IkReal x6616=IKsin(j4);
IkReal x6617=(cj5*r00);
IkReal x6618=(cj5*r10);
IkReal x6619=(r21*sj5);
IkReal x6620=(cj5*r20);
IkReal x6621=((1.0)*x6615);
IkReal x6622=((1.0)*x6616);
IkReal x6623=(sj5*x6616);
IkReal x6624=(sj5*x6615);
evalcond[0]=((((-1.0)*x6618*x6621))+((r12*x6616))+((r11*x6624)));
evalcond[1]=((((-1.0)*x6620*x6622))+(((-1.0)*r22*x6621))+((x6616*x6619)));
evalcond[2]=(((r01*x6623))+(((-1.0)*r02*x6621))+(((-1.0)*x6617*x6622)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6621))+(((-1.0)*x6618*x6622))+((r11*x6623)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6620*x6621))+((cj1*sj2))+((r22*x6616))+((x6615*x6619)));
evalcond[5]=(((r02*x6616))+((r01*x6624))+(((-1.0)*sj1*sj2))+(((-1.0)*x6617*x6621))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6625=((-1.0)*r00);
IkReal x6627 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6627)==0){
continue;
}
IkReal x6626=pow(x6627,-0.5);
CheckValue<IkReal> x6628 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6625),IKFAST_ATAN2_MAGTHRESH);
if(!x6628.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6628.value));
IkReal gconst127=(r01*x6626);
IkReal gconst128=(x6625*x6626);
CheckValue<IkReal> x6629 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6629.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6629.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6630=((-1.0)*r00);
IkReal x6631=x6626;
CheckValue<IkReal> x6633 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6630),IKFAST_ATAN2_MAGTHRESH);
if(!x6633.valid){
continue;
}
IkReal x6632=((-1.0)*(x6633.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6632;
IkReal gconst126=x6632;
IkReal gconst127=(r01*x6631);
IkReal gconst128=(x6630*x6631);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6634=((1.0)*sj0);
IkReal x6635=((1.0)*gconst127);
CheckValue<IkReal> x6636=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6635)))),-1);
if(!x6636.valid){
continue;
}
CheckValue<IkReal> x6637 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6634)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6634))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6636.value)))+(x6637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6638=IKsin(j4);
IkReal x6639=IKcos(j4);
IkReal x6640=(gconst127*r01);
IkReal x6641=(sj1*sj2);
IkReal x6642=(gconst128*r10);
IkReal x6643=(gconst128*r00);
IkReal x6644=(gconst128*r20);
IkReal x6645=((1.0)*x6639);
IkReal x6646=((1.0)*cj1*cj2);
IkReal x6647=((1.0)*x6638);
IkReal x6648=(gconst127*x6639);
IkReal x6649=(gconst127*x6638);
evalcond[0]=((((-1.0)*r22*x6645))+((r21*x6649))+(((-1.0)*x6644*x6647)));
evalcond[1]=(cj0+(((-1.0)*x6642*x6647))+((r11*x6649))+(((-1.0)*r12*x6645)));
evalcond[2]=((((-1.0)*sj0))+((x6638*x6640))+(((-1.0)*x6643*x6647))+(((-1.0)*r02*x6645)));
evalcond[3]=(((cj2*sj1))+((r21*x6648))+((cj1*sj2))+((r22*x6638))+(((-1.0)*x6644*x6645)));
evalcond[4]=(((x6639*x6640))+(((-1.0)*x6643*x6645))+(((-1.0)*cj0*x6646))+((cj0*x6641))+((r02*x6638)));
evalcond[5]=((((-1.0)*x6642*x6645))+((r11*x6648))+((r12*x6638))+(((-1.0)*sj0*x6646))+((sj0*x6641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6650=((1.0)*gconst128);
CheckValue<IkReal> x6651 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6650))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6651.valid){
continue;
}
CheckValue<IkReal> x6652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6650))+(((-1.0)*gconst127*r10)))),-1);
if(!x6652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6651.value)+(((1.5707963267949)*(x6652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6653=IKsin(j4);
IkReal x6654=IKcos(j4);
IkReal x6655=(gconst127*r01);
IkReal x6656=(sj1*sj2);
IkReal x6657=(gconst128*r10);
IkReal x6658=(gconst128*r00);
IkReal x6659=(gconst128*r20);
IkReal x6660=((1.0)*x6654);
IkReal x6661=((1.0)*cj1*cj2);
IkReal x6662=((1.0)*x6653);
IkReal x6663=(gconst127*x6654);
IkReal x6664=(gconst127*x6653);
evalcond[0]=((((-1.0)*x6659*x6662))+((r21*x6664))+(((-1.0)*r22*x6660)));
evalcond[1]=(cj0+(((-1.0)*x6657*x6662))+((r11*x6664))+(((-1.0)*r12*x6660)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6658*x6662))+((x6653*x6655))+(((-1.0)*r02*x6660)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6659*x6660))+((r21*x6663))+((r22*x6653)));
evalcond[4]=((((-1.0)*x6658*x6660))+((r02*x6653))+(((-1.0)*cj0*x6661))+((x6654*x6655))+((cj0*x6656)));
evalcond[5]=((((-1.0)*x6657*x6660))+((r12*x6653))+(((-1.0)*sj0*x6661))+((r11*x6663))+((sj0*x6656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6665=((-1.0)*r01);
IkReal x6667 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6667)==0){
continue;
}
IkReal x6666=pow(x6667,-0.5);
CheckValue<IkReal> x6668 = IKatan2WithCheck(IkReal(x6665),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6668.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6668.value))));
IkReal gconst130=(x6665*x6666);
IkReal gconst131=((1.0)*r00*x6666);
CheckValue<IkReal> x6669 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6669.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6669.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6670=((-1.0)*r01);
CheckValue<IkReal> x6673 = IKatan2WithCheck(IkReal(x6670),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6673.valid){
continue;
}
IkReal x6671=((1.0)*(x6673.value));
IkReal x6672=x6666;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6671)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6671)));
IkReal gconst130=(x6670*x6672);
IkReal gconst131=((1.0)*r00*x6672);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6674=((-1.0)*r01);
CheckValue<IkReal> x6677 = IKatan2WithCheck(IkReal(x6674),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6677.valid){
continue;
}
IkReal x6675=((1.0)*(x6677.value));
IkReal x6676=x6666;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6675)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6675)));
IkReal gconst130=(x6674*x6676);
IkReal gconst131=((1.0)*r00*x6676);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6678=((-1.0)*r01);
CheckValue<IkReal> x6681 = IKatan2WithCheck(IkReal(x6678),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6681.valid){
continue;
}
IkReal x6679=((1.0)*(x6681.value));
IkReal x6680=x6666;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6679)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6679)));
IkReal gconst130=(x6678*x6680);
IkReal gconst131=((1.0)*r00*x6680);
IkReal x6682=r02*r02;
IkReal x6683=(r12*sj0);
IkReal x6684=((1.0)*cj0);
IkReal x6685=x6666;
j4eval[0]=((IKabs((((cj0*x6682*x6685))+(((-1.0)*x6684*x6685))+((r02*x6683*x6685)))))+(IKabs(((((-1.0)*r02*x6684))+(((-1.0)*x6683))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6686=((1.0)*sj0);
IkReal x6687=((1.0)*gconst130);
CheckValue<IkReal> x6688 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6686)))),IkReal(((((-1.0)*gconst130*r11*x6686))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6687))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6688.valid){
continue;
}
CheckValue<IkReal> x6689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6687))+(((-1.0)*gconst131*r21)))),-1);
if(!x6689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6688.value)+(((1.5707963267949)*(x6689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6690=IKsin(j4);
IkReal x6691=IKcos(j4);
IkReal x6692=(gconst131*r10);
IkReal x6693=(sj1*sj2);
IkReal x6694=(gconst131*r20);
IkReal x6695=(gconst131*r00);
IkReal x6696=((1.0)*x6691);
IkReal x6697=((1.0)*cj1*cj2);
IkReal x6698=(gconst130*x6690);
IkReal x6699=((1.0)*x6690);
IkReal x6700=(gconst130*x6691);
evalcond[0]=((((-1.0)*x6694*x6699))+((r21*x6698))+(((-1.0)*r22*x6696)));
evalcond[1]=(((r11*x6698))+cj0+(((-1.0)*r12*x6696))+(((-1.0)*x6692*x6699)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6696))+((r01*x6698))+(((-1.0)*x6695*x6699)));
evalcond[3]=((((-1.0)*x6694*x6696))+((cj2*sj1))+((r21*x6700))+((r22*x6690))+((cj1*sj2)));
evalcond[4]=(((cj0*x6693))+((r01*x6700))+(((-1.0)*cj0*x6697))+(((-1.0)*x6695*x6696))+((r02*x6690)));
evalcond[5]=(((r12*x6690))+(((-1.0)*sj0*x6697))+((sj0*x6693))+((r11*x6700))+(((-1.0)*x6692*x6696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6701=((1.0)*gconst131);
CheckValue<IkReal> x6702=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x6701)))),-1);
if(!x6702.valid){
continue;
}
CheckValue<IkReal> x6703 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6702.value)))+(x6703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6704=IKsin(j4);
IkReal x6705=IKcos(j4);
IkReal x6706=(gconst131*r10);
IkReal x6707=(sj1*sj2);
IkReal x6708=(gconst131*r20);
IkReal x6709=(gconst131*r00);
IkReal x6710=((1.0)*x6705);
IkReal x6711=((1.0)*cj1*cj2);
IkReal x6712=(gconst130*x6704);
IkReal x6713=((1.0)*x6704);
IkReal x6714=(gconst130*x6705);
evalcond[0]=((((-1.0)*x6708*x6713))+((r21*x6712))+(((-1.0)*r22*x6710)));
evalcond[1]=(cj0+((r11*x6712))+(((-1.0)*r12*x6710))+(((-1.0)*x6706*x6713)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6710))+(((-1.0)*x6709*x6713))+((r01*x6712)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6708*x6710))+((r21*x6714))+((r22*x6704)));
evalcond[4]=((((-1.0)*cj0*x6711))+((cj0*x6707))+(((-1.0)*x6709*x6710))+((r01*x6714))+((r02*x6704)));
evalcond[5]=((((-1.0)*sj0*x6711))+((r11*x6714))+((sj0*x6707))+((r12*x6704))+(((-1.0)*x6706*x6710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6715=((1.0)*gconst131);
CheckValue<IkReal> x6716=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6715))+(((-1.0)*gconst130*r00)))),-1);
if(!x6716.valid){
continue;
}
CheckValue<IkReal> x6717 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6715))+((cj0*gconst130*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6716.value)))+(x6717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6718=IKsin(j4);
IkReal x6719=IKcos(j4);
IkReal x6720=(gconst131*r10);
IkReal x6721=(sj1*sj2);
IkReal x6722=(gconst131*r20);
IkReal x6723=(gconst131*r00);
IkReal x6724=((1.0)*x6719);
IkReal x6725=((1.0)*cj1*cj2);
IkReal x6726=(gconst130*x6718);
IkReal x6727=((1.0)*x6718);
IkReal x6728=(gconst130*x6719);
evalcond[0]=((((-1.0)*r22*x6724))+(((-1.0)*x6722*x6727))+((r21*x6726)));
evalcond[1]=(((r11*x6726))+cj0+(((-1.0)*r12*x6724))+(((-1.0)*x6720*x6727)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6723*x6727))+(((-1.0)*r02*x6724))+((r01*x6726)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6718))+(((-1.0)*x6722*x6724))+((r21*x6728)));
evalcond[4]=(((cj0*x6721))+(((-1.0)*x6723*x6724))+((r02*x6718))+(((-1.0)*cj0*x6725))+((r01*x6728)));
evalcond[5]=(((r11*x6728))+(((-1.0)*sj0*x6725))+(((-1.0)*x6720*x6724))+((sj0*x6721))+((r12*x6718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6729=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6729;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6729);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6730=((1.0)*cj5);
IkReal x6731=((((-1.0)*r11*x6730))+(((-1.0)*r10*sj5)));
j4eval[0]=x6731;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6730))+((r21*sj5))))));
j4eval[2]=IKsign(x6731);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6732=cj5*cj5;
IkReal x6733=r01*r01;
IkReal x6734=(cj5*r00);
IkReal x6735=(r01*sj5);
IkReal x6736=((((-1.0)*x6732*x6733))+x6733+(((-2.0)*x6734*x6735))+((x6732*(r00*r00)))+(r02*r02));
j4eval[0]=x6736;
j4eval[1]=IKsign(x6736);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6734))+x6735))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6737=cj5*cj5;
IkReal x6738=r01*r01;
IkReal x6739=(r01*sj5);
IkReal x6740=(cj5*r00);
CheckValue<IkReal> x6741 = IKatan2WithCheck(IkReal(((((-1.0)*x6740))+x6739)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6741.valid){
continue;
}
CheckValue<IkReal> x6742=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6739*x6740))+x6738+((x6737*(r00*r00)))+(r02*r02)+(((-1.0)*x6737*x6738)))),-1);
if(!x6742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6741.value)+(((1.5707963267949)*(x6742.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6743=IKcos(j4);
IkReal x6744=IKsin(j4);
IkReal x6745=(cj5*r00);
IkReal x6746=(cj5*r10);
IkReal x6747=(r21*sj5);
IkReal x6748=(cj5*r20);
IkReal x6749=((1.0)*x6743);
IkReal x6750=((1.0)*x6744);
IkReal x6751=(sj5*x6744);
IkReal x6752=(sj5*x6743);
evalcond[0]=(((r02*x6744))+((r01*x6752))+(((-1.0)*x6745*x6749)));
evalcond[1]=((((-1.0)*r22*x6749))+(((-1.0)*x6748*x6750))+((x6744*x6747)));
evalcond[2]=((((-1.0)*r12*x6749))+(((-1.0)*x6746*x6750))+((r11*x6751)));
evalcond[3]=((-1.0)+((r01*x6751))+(((-1.0)*r02*x6749))+(((-1.0)*x6745*x6750)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6743*x6747))+(((-1.0)*x6748*x6749))+((r22*x6744)));
evalcond[5]=((((-1.0)*x6746*x6749))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6752))+((r12*x6744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6753=((1.0)*cj5);
CheckValue<IkReal> x6754 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6753))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6754.valid){
continue;
}
CheckValue<IkReal> x6755=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6753)))),-1);
if(!x6755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6754.value)+(((1.5707963267949)*(x6755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6756=IKcos(j4);
IkReal x6757=IKsin(j4);
IkReal x6758=(cj5*r00);
IkReal x6759=(cj5*r10);
IkReal x6760=(r21*sj5);
IkReal x6761=(cj5*r20);
IkReal x6762=((1.0)*x6756);
IkReal x6763=((1.0)*x6757);
IkReal x6764=(sj5*x6757);
IkReal x6765=(sj5*x6756);
evalcond[0]=(((r01*x6765))+(((-1.0)*x6758*x6762))+((r02*x6757)));
evalcond[1]=(((x6757*x6760))+(((-1.0)*r22*x6762))+(((-1.0)*x6761*x6763)));
evalcond[2]=((((-1.0)*x6759*x6763))+((r11*x6764))+(((-1.0)*r12*x6762)));
evalcond[3]=((-1.0)+((r01*x6764))+(((-1.0)*x6758*x6763))+(((-1.0)*r02*x6762)));
evalcond[4]=(((cj2*sj1))+((r22*x6757))+((x6756*x6760))+((cj1*sj2))+(((-1.0)*x6761*x6762)));
evalcond[5]=((((-1.0)*x6759*x6762))+((r12*x6757))+(((-1.0)*cj1*cj2))+((r11*x6765))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6766=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6766.valid){
continue;
}
CheckValue<IkReal> x6767 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6766.value)))+(x6767.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6768=IKcos(j4);
IkReal x6769=IKsin(j4);
IkReal x6770=(cj5*r00);
IkReal x6771=(cj5*r10);
IkReal x6772=(r21*sj5);
IkReal x6773=(cj5*r20);
IkReal x6774=((1.0)*x6768);
IkReal x6775=((1.0)*x6769);
IkReal x6776=(sj5*x6769);
IkReal x6777=(sj5*x6768);
evalcond[0]=((((-1.0)*x6770*x6774))+((r02*x6769))+((r01*x6777)));
evalcond[1]=((((-1.0)*r22*x6774))+((x6769*x6772))+(((-1.0)*x6773*x6775)));
evalcond[2]=(((r11*x6776))+(((-1.0)*r12*x6774))+(((-1.0)*x6771*x6775)));
evalcond[3]=((-1.0)+(((-1.0)*x6770*x6775))+(((-1.0)*r02*x6774))+((r01*x6776)));
evalcond[4]=(((cj2*sj1))+((r22*x6769))+((cj1*sj2))+(((-1.0)*x6773*x6774))+((x6768*x6772)));
evalcond[5]=(((r11*x6777))+((r12*x6769))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6771*x6774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6778=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6778;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6778);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6779=((1.0)*cj5);
IkReal x6780=((((-1.0)*r21*x6779))+(((-1.0)*r20*sj5)));
j4eval[0]=x6780;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6779))))));
j4eval[2]=IKsign(x6780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6781=(r01*sj5);
IkReal x6782=(cj1*sj2);
IkReal x6783=(cj2*sj1);
IkReal x6784=((1.0)*r02);
IkReal x6785=((1.0)*cj5*r00);
IkReal x6786=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6786;
j4eval[1]=((IKabs(((((-1.0)*x6782*x6785))+((x6781*x6782))+((x6781*x6783))+(((-1.0)*x6783*x6785)))))+(IKabs(((((-1.0)*x6782*x6784))+(((-1.0)*x6783*x6784))))));
j4eval[2]=IKsign(x6786);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6787=(r01*sj5);
IkReal x6788=(cj1*sj2);
IkReal x6789=(cj2*sj1);
IkReal x6790=((1.0)*r02);
IkReal x6791=((1.0)*cj5*r00);
CheckValue<IkReal> x6792 = IKatan2WithCheck(IkReal(((((-1.0)*x6789*x6791))+(((-1.0)*x6788*x6791))+((x6787*x6789))+((x6787*x6788)))),IkReal(((((-1.0)*x6789*x6790))+(((-1.0)*x6788*x6790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6792.valid){
continue;
}
CheckValue<IkReal> x6793=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6792.value)+(((1.5707963267949)*(x6793.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6794=IKcos(j4);
IkReal x6795=IKsin(j4);
IkReal x6796=(cj5*r00);
IkReal x6797=(cj5*r10);
IkReal x6798=(r21*sj5);
IkReal x6799=(cj5*r20);
IkReal x6800=((1.0)*x6794);
IkReal x6801=((1.0)*x6795);
IkReal x6802=(sj5*x6795);
IkReal x6803=(sj5*x6794);
evalcond[0]=((((-1.0)*x6796*x6800))+((r02*x6795))+((r01*x6803)));
evalcond[1]=((((-1.0)*r22*x6800))+((x6795*x6798))+(((-1.0)*x6799*x6801)));
evalcond[2]=((((-1.0)*r12*x6800))+((r11*x6802))+(((-1.0)*x6797*x6801)));
evalcond[3]=((1.0)+(((-1.0)*x6796*x6801))+(((-1.0)*r02*x6800))+((r01*x6802)));
evalcond[4]=(((cj2*sj1))+((r22*x6795))+((cj1*sj2))+((x6794*x6798))+(((-1.0)*x6799*x6800)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x6803))+(((-1.0)*x6797*x6800))+((r12*x6795))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6804=((1.0)*cj5);
CheckValue<IkReal> x6805 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6805.valid){
continue;
}
CheckValue<IkReal> x6806=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6804))+(((-1.0)*r20*sj5)))),-1);
if(!x6806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6805.value)+(((1.5707963267949)*(x6806.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6807=IKcos(j4);
IkReal x6808=IKsin(j4);
IkReal x6809=(cj5*r00);
IkReal x6810=(cj5*r10);
IkReal x6811=(r21*sj5);
IkReal x6812=(cj5*r20);
IkReal x6813=((1.0)*x6807);
IkReal x6814=((1.0)*x6808);
IkReal x6815=(sj5*x6808);
IkReal x6816=(sj5*x6807);
evalcond[0]=((((-1.0)*x6809*x6813))+((r01*x6816))+((r02*x6808)));
evalcond[1]=((((-1.0)*x6812*x6814))+((x6808*x6811))+(((-1.0)*r22*x6813)));
evalcond[2]=(((r11*x6815))+(((-1.0)*x6810*x6814))+(((-1.0)*r12*x6813)));
evalcond[3]=((1.0)+(((-1.0)*x6809*x6814))+(((-1.0)*r02*x6813))+((r01*x6815)));
evalcond[4]=(((cj2*sj1))+((x6807*x6811))+((r22*x6808))+((cj1*sj2))+(((-1.0)*x6812*x6813)));
evalcond[5]=(((r11*x6816))+(((-1.0)*sj1*sj2))+(((-1.0)*x6810*x6813))+((r12*x6808))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6817 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6817.valid){
continue;
}
CheckValue<IkReal> x6818=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6817.value)+(((1.5707963267949)*(x6818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6819=IKcos(j4);
IkReal x6820=IKsin(j4);
IkReal x6821=(cj5*r00);
IkReal x6822=(cj5*r10);
IkReal x6823=(r21*sj5);
IkReal x6824=(cj5*r20);
IkReal x6825=((1.0)*x6819);
IkReal x6826=((1.0)*x6820);
IkReal x6827=(sj5*x6820);
IkReal x6828=(sj5*x6819);
evalcond[0]=(((r02*x6820))+((r01*x6828))+(((-1.0)*x6821*x6825)));
evalcond[1]=(((x6820*x6823))+(((-1.0)*x6824*x6826))+(((-1.0)*r22*x6825)));
evalcond[2]=((((-1.0)*r12*x6825))+((r11*x6827))+(((-1.0)*x6822*x6826)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6825))+((r01*x6827))+(((-1.0)*x6821*x6826)));
evalcond[4]=(((cj2*sj1))+((r22*x6820))+((cj1*sj2))+(((-1.0)*x6824*x6825))+((x6819*x6823)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x6820))+((r11*x6828))+((cj1*cj2))+(((-1.0)*x6822*x6825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6829=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6829);
rxp1_1=(px*r21);
rxp1_2=(r11*x6829);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6830=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6830);
rxp1_1=(px*r21);
rxp1_2=(r11*x6830);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6831=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6831);
rxp1_1=(px*r21);
rxp1_2=(r11*x6831);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6834=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6834.valid){
continue;
}
IkReal x6832=x6834.value;
IkReal x6833=(sj0*x6832);
cj4array[0]=(((cj1*cj2*x6833))+(((-1.0)*sj1*sj2*x6833)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6835=IKsin(j4);
IkReal x6836=IKcos(j4);
IkReal x6837=(r21*sj5);
IkReal x6838=((1.0)*cj5*r20);
evalcond[0]=(r02*x6835);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6836)));
evalcond[2]=(((x6835*x6837))+(((-1.0)*x6835*x6838)));
evalcond[3]=((((-1.0)*cj5*r10*x6835))+((r11*sj5*x6835)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6836*x6837))+(((-1.0)*x6836*x6838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6841=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6841.valid){
continue;
}
IkReal x6839=x6841.value;
IkReal x6840=((1.0)*x6839);
cj4array[0]=((((-1.0)*cj1*sj2*x6840))+(((-1.0)*cj2*sj1*x6840)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6842=IKsin(j4);
IkReal x6843=IKcos(j4);
IkReal x6844=((1.0)*sj0);
IkReal x6845=((1.0)*cj5);
IkReal x6846=(sj5*x6842);
evalcond[0]=(r02*x6842);
evalcond[1]=((((-1.0)*x6844))+(((-1.0)*r02*x6843)));
evalcond[2]=(((r21*x6846))+(((-1.0)*r20*x6842*x6845)));
evalcond[3]=(((r11*x6846))+(((-1.0)*r10*x6842*x6845)));
evalcond[4]=(((r11*sj5*x6843))+(((-1.0)*r10*x6843*x6845))+(((-1.0)*cj1*cj2*x6844))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6847=IKPowWithIntegerCheck(r02,-1);
if(!x6847.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6847.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6848=IKsin(j4);
IkReal x6849=IKcos(j4);
IkReal x6850=(r21*sj5);
IkReal x6851=((1.0)*cj5);
IkReal x6852=(r11*sj5);
evalcond[0]=(r02*x6848);
evalcond[1]=(((x6848*x6850))+(((-1.0)*r20*x6848*x6851)));
evalcond[2]=(((x6848*x6852))+(((-1.0)*r10*x6848*x6851)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x6849*x6851))+((cj1*sj2))+((x6849*x6850)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*r10*x6849*x6851))+((x6849*x6852))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6853=((1.0)*sj0);
IkReal x6854=((1.0)*cj0);
CheckValue<IkReal> x6855 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6854))+(((-1.0)*r12*x6853)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6853))+(((-1.0)*r01*sj5*x6854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6855.valid){
continue;
}
CheckValue<IkReal> x6856=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6855.value)+(((1.5707963267949)*(x6856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6857=IKsin(j4);
IkReal x6858=IKcos(j4);
IkReal x6859=(cj5*r00);
IkReal x6860=(cj5*r10);
IkReal x6861=(r21*sj5);
IkReal x6862=(sj1*sj2);
IkReal x6863=(cj5*r20);
IkReal x6864=((1.0)*x6858);
IkReal x6865=((1.0)*cj1*cj2);
IkReal x6866=((1.0)*x6857);
IkReal x6867=(sj5*x6857);
IkReal x6868=(sj5*x6858);
evalcond[0]=((((-1.0)*r22*x6864))+(((-1.0)*x6863*x6866))+((x6857*x6861)));
evalcond[1]=(((r11*x6867))+(((-1.0)*x6860*x6866))+cj0+(((-1.0)*r12*x6864)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6864))+((r01*x6867))+(((-1.0)*x6859*x6866)));
evalcond[3]=(((cj2*sj1))+((r22*x6857))+((cj1*sj2))+(((-1.0)*x6863*x6864))+((x6858*x6861)));
evalcond[4]=(((r02*x6857))+((cj0*x6862))+((r01*x6868))+(((-1.0)*x6859*x6864))+(((-1.0)*cj0*x6865)));
evalcond[5]=(((sj0*x6862))+((r11*x6868))+(((-1.0)*x6860*x6864))+((r12*x6857))+(((-1.0)*sj0*x6865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6869=((1.0)*cj5);
CheckValue<IkReal> x6870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6869)))),-1);
if(!x6870.valid){
continue;
}
CheckValue<IkReal> x6871 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6869))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6870.value)))+(x6871.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6872=IKsin(j4);
IkReal x6873=IKcos(j4);
IkReal x6874=(cj5*r00);
IkReal x6875=(cj5*r10);
IkReal x6876=(r21*sj5);
IkReal x6877=(sj1*sj2);
IkReal x6878=(cj5*r20);
IkReal x6879=((1.0)*x6873);
IkReal x6880=((1.0)*cj1*cj2);
IkReal x6881=((1.0)*x6872);
IkReal x6882=(sj5*x6872);
IkReal x6883=(sj5*x6873);
evalcond[0]=(((x6872*x6876))+(((-1.0)*r22*x6879))+(((-1.0)*x6878*x6881)));
evalcond[1]=((((-1.0)*x6875*x6881))+((r11*x6882))+cj0+(((-1.0)*r12*x6879)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6879))+((r01*x6882))+(((-1.0)*x6874*x6881)));
evalcond[3]=(((cj2*sj1))+((r22*x6872))+((cj1*sj2))+(((-1.0)*x6878*x6879))+((x6873*x6876)));
evalcond[4]=(((r02*x6872))+((cj0*x6877))+(((-1.0)*x6874*x6879))+((r01*x6883))+(((-1.0)*cj0*x6880)));
evalcond[5]=((((-1.0)*x6875*x6879))+((sj0*x6877))+((r11*x6883))+((r12*x6872))+(((-1.0)*sj0*x6880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6884=((1.0)*cj5);
CheckValue<IkReal> x6885 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6885.valid){
continue;
}
CheckValue<IkReal> x6886=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6884)))),-1);
if(!x6886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6885.value)+(((1.5707963267949)*(x6886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6887=IKsin(j4);
IkReal x6888=IKcos(j4);
IkReal x6889=(cj5*r00);
IkReal x6890=(cj5*r10);
IkReal x6891=(r21*sj5);
IkReal x6892=(sj1*sj2);
IkReal x6893=(cj5*r20);
IkReal x6894=((1.0)*x6888);
IkReal x6895=((1.0)*cj1*cj2);
IkReal x6896=((1.0)*x6887);
IkReal x6897=(sj5*x6887);
IkReal x6898=(sj5*x6888);
evalcond[0]=((((-1.0)*x6893*x6896))+(((-1.0)*r22*x6894))+((x6887*x6891)));
evalcond[1]=(cj0+(((-1.0)*x6890*x6896))+(((-1.0)*r12*x6894))+((r11*x6897)));
evalcond[2]=((((-1.0)*x6889*x6896))+(((-1.0)*sj0))+(((-1.0)*r02*x6894))+((r01*x6897)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6893*x6894))+((x6888*x6891))+((r22*x6887)));
evalcond[4]=((((-1.0)*cj0*x6895))+(((-1.0)*x6889*x6894))+((r02*x6887))+((cj0*x6892))+((r01*x6898)));
evalcond[5]=((((-1.0)*x6890*x6894))+((sj0*x6892))+(((-1.0)*sj0*x6895))+((r11*x6898))+((r12*x6887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6899=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6899;
j0eval[1]=IKsign(x6899);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6900=cj5*cj5;
IkReal x6901=r21*r21;
IkReal x6902=(cj2*sj1);
IkReal x6903=(cj1*sj2);
IkReal x6904=(r21*sj5);
IkReal x6905=((1.0)*cj5*r20);
IkReal x6906=((r22*r22)+((x6900*(r20*r20)))+x6901+(((-2.0)*cj5*r20*x6904))+(((-1.0)*x6900*x6901)));
j4eval[0]=x6906;
j4eval[1]=IKsign(x6906);
j4eval[2]=((IKabs((((r22*x6903))+((r22*x6902)))))+(IKabs((((x6903*x6904))+((x6902*x6904))+(((-1.0)*x6903*x6905))+(((-1.0)*x6902*x6905))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6907=cj1*cj1;
IkReal x6908=(cj2*sj2);
IkReal x6909=(cj2*sj1);
IkReal x6910=(cj1*sj1);
j0eval[0]=((((-1.08349267049076)*cj1*x6909))+(((-2.0)*cj1*cj2*x6909))+(((-2.0)*x6907*x6908))+x6910+x6908+(((-1.08349267049076)*sj2*x6907)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6909)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6911=IKsin(j0);
IkReal x6912=IKcos(j0);
evalcond[0]=((((0.81725)*x6912))+(((-1.0)*px))+(((-0.10915)*x6911)));
evalcond[1]=((((0.81725)*x6911))+(((-1.0)*py))+(((0.10915)*x6912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6913=((1.0)*cj5);
IkReal x6914=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6913)));
j4eval[0]=x6914;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6913))))));
j4eval[2]=IKsign(x6914);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6915=((1.0)*cj5);
IkReal x6916=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6915)));
j4eval[0]=x6916;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6915))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6917=cj5*cj5;
IkReal x6918=((1.0)*sj5);
IkReal x6919=(cj5*r20);
IkReal x6920=(r11*r21);
IkReal x6921=(((r12*r22))+(((-1.0)*x6917*x6920))+(((-1.0)*r11*x6918*x6919))+((r10*r20*x6917))+(((-1.0)*cj5*r10*r21*x6918))+x6920);
j4eval[0]=x6921;
j4eval[1]=IKsign(x6921);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6918))+((cj0*x6919)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6922=cj5*cj5;
IkReal x6923=((1.0)*sj5);
IkReal x6924=(cj5*r20);
IkReal x6925=(r11*r21);
CheckValue<IkReal> x6926=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6923))+(((-1.0)*x6922*x6925))+((r12*r22))+x6925+((r10*r20*x6922))+(((-1.0)*r11*x6923*x6924)))),-1);
if(!x6926.valid){
continue;
}
CheckValue<IkReal> x6927 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6923))+((cj0*x6924)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6926.value)))+(x6927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6928=IKsin(j4);
IkReal x6929=IKcos(j4);
IkReal x6930=((1.0)*sj0);
IkReal x6931=(cj5*r00);
IkReal x6932=(r11*sj5);
IkReal x6933=(cj5*r10);
IkReal x6934=(r21*sj5);
IkReal x6935=(cj5*r20);
IkReal x6936=(r01*sj5);
IkReal x6937=((1.0)*x6929);
IkReal x6938=((1.0)*x6928);
evalcond[0]=((((-1.0)*r22*x6937))+(((-1.0)*x6935*x6938))+((x6928*x6934)));
evalcond[1]=((((-1.0)*r22*x6938))+(((-1.0)*x6934*x6937))+((x6929*x6935)));
evalcond[2]=(cj0+(((-1.0)*r12*x6937))+((x6928*x6932))+(((-1.0)*x6933*x6938)));
evalcond[3]=((((-1.0)*r02*x6937))+((x6928*x6936))+(((-1.0)*x6930))+(((-1.0)*x6931*x6938)));
evalcond[4]=((((-1.0)*r02*x6938))+((x6929*x6931))+(((-1.0)*x6936*x6937))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6932*x6937))+(((-1.0)*r12*x6938))+((x6929*x6933))+(((-1.0)*x6930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6939=((1.0)*cj5);
CheckValue<IkReal> x6940 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6940.valid){
continue;
}
CheckValue<IkReal> x6941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6939)))),-1);
if(!x6941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6940.value)+(((1.5707963267949)*(x6941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6942=IKsin(j4);
IkReal x6943=IKcos(j4);
IkReal x6944=((1.0)*sj0);
IkReal x6945=(cj5*r00);
IkReal x6946=(r11*sj5);
IkReal x6947=(cj5*r10);
IkReal x6948=(r21*sj5);
IkReal x6949=(cj5*r20);
IkReal x6950=(r01*sj5);
IkReal x6951=((1.0)*x6943);
IkReal x6952=((1.0)*x6942);
evalcond[0]=(((x6942*x6948))+(((-1.0)*x6949*x6952))+(((-1.0)*r22*x6951)));
evalcond[1]=((((-1.0)*x6948*x6951))+((x6943*x6949))+(((-1.0)*r22*x6952)));
evalcond[2]=(cj0+(((-1.0)*r12*x6951))+((x6942*x6946))+(((-1.0)*x6947*x6952)));
evalcond[3]=((((-1.0)*x6944))+(((-1.0)*x6945*x6952))+((x6942*x6950))+(((-1.0)*r02*x6951)));
evalcond[4]=((((-1.0)*x6950*x6951))+((x6943*x6945))+(((-1.0)*r02*x6952))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6952))+(((-1.0)*x6944))+((x6943*x6947))+(((-1.0)*x6946*x6951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6953=((1.0)*cj5);
CheckValue<IkReal> x6954 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6954.valid){
continue;
}
CheckValue<IkReal> x6955=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6953)))),-1);
if(!x6955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6954.value)+(((1.5707963267949)*(x6955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6956=IKsin(j4);
IkReal x6957=IKcos(j4);
IkReal x6958=((1.0)*sj0);
IkReal x6959=(cj5*r00);
IkReal x6960=(r11*sj5);
IkReal x6961=(cj5*r10);
IkReal x6962=(r21*sj5);
IkReal x6963=(cj5*r20);
IkReal x6964=(r01*sj5);
IkReal x6965=((1.0)*x6957);
IkReal x6966=((1.0)*x6956);
evalcond[0]=(((x6956*x6962))+(((-1.0)*r22*x6965))+(((-1.0)*x6963*x6966)));
evalcond[1]=((((-1.0)*r22*x6966))+(((-1.0)*x6962*x6965))+((x6957*x6963)));
evalcond[2]=(cj0+(((-1.0)*x6961*x6966))+(((-1.0)*r12*x6965))+((x6956*x6960)));
evalcond[3]=((((-1.0)*r02*x6965))+(((-1.0)*x6959*x6966))+(((-1.0)*x6958))+((x6956*x6964)));
evalcond[4]=((((-1.0)*x6964*x6965))+(((-1.0)*r02*x6966))+((x6957*x6959))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6958))+(((-1.0)*r12*x6966))+(((-1.0)*x6960*x6965))+((x6957*x6961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6967=IKsin(j0);
IkReal x6968=IKcos(j0);
evalcond[0]=((((0.03275)*x6968))+(((-1.0)*px))+(((-0.10915)*x6967)));
evalcond[1]=((((0.10915)*x6968))+(((0.03275)*x6967))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6969=((1.0)*cj5);
IkReal x6970=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6969)));
j4eval[0]=x6970;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6969))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6971=cj5*cj5;
IkReal x6972=((1.0)*r21);
IkReal x6973=(cj5*sj5);
IkReal x6974=((1.0)*r20);
IkReal x6975=((((-1.0)*r00*x6972*x6973))+(((-1.0)*r01*x6973*x6974))+((r01*r21))+((r00*r20*x6971))+((r02*r22))+(((-1.0)*r01*x6971*x6972)));
j4eval[0]=x6975;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6974)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6976=cj5*cj5;
IkReal x6977=(r21*sj5);
IkReal x6978=(r11*r21);
IkReal x6979=((1.0)*cj5*r20);
IkReal x6980=(((r10*r20*x6976))+(((-1.0)*cj5*r10*x6977))+(((-1.0)*r11*sj5*x6979))+((r12*r22))+x6978+(((-1.0)*x6976*x6978)));
j4eval[0]=x6980;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6977))+(((-1.0)*sj0*x6979))))));
j4eval[2]=IKsign(x6980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6981=cj5*cj5;
IkReal x6982=(r21*sj5);
IkReal x6983=(r11*r21);
IkReal x6984=((1.0)*cj5*r20);
CheckValue<IkReal> x6985 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6984))+((sj0*x6982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6985.valid){
continue;
}
CheckValue<IkReal> x6986=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*r11*sj5*x6984))+(((-1.0)*cj5*r10*x6982))+x6983+((r10*r20*x6981))+(((-1.0)*x6981*x6983)))),-1);
if(!x6986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6985.value)+(((1.5707963267949)*(x6986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6987=IKsin(j4);
IkReal x6988=IKcos(j4);
IkReal x6989=(r11*sj5);
IkReal x6990=(cj5*r00);
IkReal x6991=(cj5*r10);
IkReal x6992=(r21*sj5);
IkReal x6993=(cj5*r20);
IkReal x6994=(r01*sj5);
IkReal x6995=((1.0)*x6988);
IkReal x6996=((1.0)*x6987);
evalcond[0]=((((-1.0)*x6993*x6996))+((x6987*x6992))+(((-1.0)*r22*x6995)));
evalcond[1]=((((-1.0)*r22*x6996))+(((-1.0)*x6992*x6995))+((x6988*x6993)));
evalcond[2]=((((-1.0)*r12*x6995))+cj0+((x6987*x6989))+(((-1.0)*x6991*x6996)));
evalcond[3]=(cj0+(((-1.0)*x6994*x6995))+((x6988*x6990))+(((-1.0)*r02*x6996)));
evalcond[4]=((((-1.0)*r12*x6996))+sj0+((x6988*x6991))+(((-1.0)*x6989*x6995)));
evalcond[5]=((((-1.0)*sj0))+((x6987*x6994))+(((-1.0)*x6990*x6996))+(((-1.0)*r02*x6995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6997=cj5*cj5;
IkReal x6998=((1.0)*r21);
IkReal x6999=(cj5*sj5);
IkReal x7000=((1.0)*r20);
CheckValue<IkReal> x7001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6998*x6999))+((r01*r21))+(((-1.0)*r01*x6997*x6998))+((r00*r20*x6997))+((r02*r22))+(((-1.0)*r01*x6999*x7000)))),-1);
if(!x7001.valid){
continue;
}
CheckValue<IkReal> x7002 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7001.value)))+(x7002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7003=IKsin(j4);
IkReal x7004=IKcos(j4);
IkReal x7005=(r11*sj5);
IkReal x7006=(cj5*r00);
IkReal x7007=(cj5*r10);
IkReal x7008=(r21*sj5);
IkReal x7009=(cj5*r20);
IkReal x7010=(r01*sj5);
IkReal x7011=((1.0)*x7004);
IkReal x7012=((1.0)*x7003);
evalcond[0]=((((-1.0)*x7009*x7012))+(((-1.0)*r22*x7011))+((x7003*x7008)));
evalcond[1]=((((-1.0)*r22*x7012))+(((-1.0)*x7008*x7011))+((x7004*x7009)));
evalcond[2]=(cj0+((x7003*x7005))+(((-1.0)*r12*x7011))+(((-1.0)*x7007*x7012)));
evalcond[3]=(cj0+(((-1.0)*x7010*x7011))+((x7004*x7006))+(((-1.0)*r02*x7012)));
evalcond[4]=(sj0+((x7004*x7007))+(((-1.0)*r12*x7012))+(((-1.0)*x7005*x7011)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7006*x7012))+((x7003*x7010))+(((-1.0)*r02*x7011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7013=((1.0)*cj5);
CheckValue<IkReal> x7014 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7014.valid){
continue;
}
CheckValue<IkReal> x7015=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7013)))),-1);
if(!x7015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7014.value)+(((1.5707963267949)*(x7015.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7016=IKsin(j4);
IkReal x7017=IKcos(j4);
IkReal x7018=(r11*sj5);
IkReal x7019=(cj5*r00);
IkReal x7020=(cj5*r10);
IkReal x7021=(r21*sj5);
IkReal x7022=(cj5*r20);
IkReal x7023=(r01*sj5);
IkReal x7024=((1.0)*x7017);
IkReal x7025=((1.0)*x7016);
evalcond[0]=((((-1.0)*r22*x7024))+((x7016*x7021))+(((-1.0)*x7022*x7025)));
evalcond[1]=((((-1.0)*r22*x7025))+(((-1.0)*x7021*x7024))+((x7017*x7022)));
evalcond[2]=((((-1.0)*r12*x7024))+cj0+((x7016*x7018))+(((-1.0)*x7020*x7025)));
evalcond[3]=(cj0+(((-1.0)*r02*x7025))+(((-1.0)*x7023*x7024))+((x7017*x7019)));
evalcond[4]=((((-1.0)*r12*x7025))+sj0+(((-1.0)*x7018*x7024))+((x7017*x7020)));
evalcond[5]=((((-1.0)*sj0))+((x7016*x7023))+(((-1.0)*x7019*x7025))+(((-1.0)*r02*x7024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7026=((1.0)*sj5);
IkReal x7027=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7027))+(((-1.0)*r10*x7026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7026))+(((-1.0)*r01*x7027)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7027))+(((-1.0)*r10*x7026))))+IKsqr(((((-1.0)*r00*x7026))+(((-1.0)*r01*x7027))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7027))+(((-1.0)*r10*x7026))), ((((-1.0)*r00*x7026))+(((-1.0)*r01*x7027))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7028=IKsin(j0);
IkReal x7029=IKcos(j0);
IkReal x7030=((1.0)*cj5);
IkReal x7031=((1.0)*sj5);
IkReal x7032=((0.09465)*cj5);
IkReal x7033=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r01*x7030))+(((-1.0)*x7029))+(((-1.0)*r00*x7031)));
evalcond[1]=((((-1.0)*r11*x7030))+(((-1.0)*x7028))+(((-1.0)*r10*x7031)));
evalcond[2]=((((-1.0)*r01*x7032))+(((-1.0)*r00*x7033))+(((-0.10915)*x7028))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*r11*x7032))+(((-1.0)*py))+(((0.10915)*x7029))+(((-1.0)*r10*x7033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7034=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7034;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7035=((1.0)*cj5);
IkReal x7036=((((-1.0)*r01*x7035))+(((-1.0)*r00*sj5)));
j4eval[0]=x7036;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7035)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7037=cj5*cj5;
IkReal x7038=r21*r21;
IkReal x7039=(r21*sj5);
IkReal x7040=(cj5*r20);
IkReal x7041=(x7038+(r22*r22)+(((-1.0)*x7037*x7038))+((x7037*(r20*r20)))+(((-2.0)*x7039*x7040)));
j4eval[0]=x7041;
j4eval[1]=IKsign(x7041);
j4eval[2]=((IKabs(r22))+(IKabs((x7039+(((-1.0)*x7040))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7042=cj5*cj5;
IkReal x7043=r21*r21;
IkReal x7044=(r21*sj5);
IkReal x7045=(cj5*r20);
CheckValue<IkReal> x7046=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7042*x7043))+x7043+(r22*r22)+(((-2.0)*x7044*x7045))+((x7042*(r20*r20))))),-1);
if(!x7046.valid){
continue;
}
CheckValue<IkReal> x7047 = IKatan2WithCheck(IkReal(r22),IkReal((x7044+(((-1.0)*x7045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7046.value)))+(x7047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7048=IKsin(j4);
IkReal x7049=IKcos(j4);
IkReal x7050=(r11*sj5);
IkReal x7051=(r21*sj5);
IkReal x7052=(cj5*r00);
IkReal x7053=(cj5*r20);
IkReal x7054=(r01*sj5);
IkReal x7055=(cj5*r10);
IkReal x7056=((1.0)*x7049);
IkReal x7057=((1.0)*x7048);
evalcond[0]=((((-1.0)*r22*x7056))+(((-1.0)*x7053*x7057))+((x7048*x7051)));
evalcond[1]=((((-1.0)*x7054*x7056))+((x7049*x7052))+(((-1.0)*r02*x7057)));
evalcond[2]=((((-1.0)*r12*x7057))+((x7049*x7055))+(((-1.0)*x7050*x7056)));
evalcond[3]=(cj0+(((-1.0)*r12*x7056))+(((-1.0)*x7055*x7057))+((x7048*x7050)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7057))+(((-1.0)*x7051*x7056))+((x7049*x7053)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7052*x7057))+((x7048*x7054))+(((-1.0)*r02*x7056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7058=((1.0)*cj5);
CheckValue<IkReal> x7059=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7058))+(((-1.0)*r00*sj5)))),-1);
if(!x7059.valid){
continue;
}
CheckValue<IkReal> x7060 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7058))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7059.value)))+(x7060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7061=IKsin(j4);
IkReal x7062=IKcos(j4);
IkReal x7063=(r11*sj5);
IkReal x7064=(r21*sj5);
IkReal x7065=(cj5*r00);
IkReal x7066=(cj5*r20);
IkReal x7067=(r01*sj5);
IkReal x7068=(cj5*r10);
IkReal x7069=((1.0)*x7062);
IkReal x7070=((1.0)*x7061);
evalcond[0]=((((-1.0)*x7066*x7070))+((x7061*x7064))+(((-1.0)*r22*x7069)));
evalcond[1]=(((x7062*x7065))+(((-1.0)*x7067*x7069))+(((-1.0)*r02*x7070)));
evalcond[2]=(((x7062*x7068))+(((-1.0)*x7063*x7069))+(((-1.0)*r12*x7070)));
evalcond[3]=(cj0+(((-1.0)*x7068*x7070))+(((-1.0)*r12*x7069))+((x7061*x7063)));
evalcond[4]=((1.0)+((x7062*x7066))+(((-1.0)*x7064*x7069))+(((-1.0)*r22*x7070)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7065*x7070))+((x7061*x7067))+(((-1.0)*r02*x7069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7071 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7071.valid){
continue;
}
CheckValue<IkReal> x7072=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7071.value)+(((1.5707963267949)*(x7072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7073=IKsin(j4);
IkReal x7074=IKcos(j4);
IkReal x7075=(r11*sj5);
IkReal x7076=(r21*sj5);
IkReal x7077=(cj5*r00);
IkReal x7078=(cj5*r20);
IkReal x7079=(r01*sj5);
IkReal x7080=(cj5*r10);
IkReal x7081=((1.0)*x7074);
IkReal x7082=((1.0)*x7073);
evalcond[0]=(((x7073*x7076))+(((-1.0)*r22*x7081))+(((-1.0)*x7078*x7082)));
evalcond[1]=(((x7074*x7077))+(((-1.0)*x7079*x7081))+(((-1.0)*r02*x7082)));
evalcond[2]=(((x7074*x7080))+(((-1.0)*x7075*x7081))+(((-1.0)*r12*x7082)));
evalcond[3]=(cj0+((x7073*x7075))+(((-1.0)*r12*x7081))+(((-1.0)*x7080*x7082)));
evalcond[4]=((1.0)+((x7074*x7078))+(((-1.0)*x7076*x7081))+(((-1.0)*r22*x7082)));
evalcond[5]=((((-1.0)*sj0))+((x7073*x7079))+(((-1.0)*r02*x7081))+(((-1.0)*x7077*x7082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7083=IKcos(j0);
IkReal x7084=IKsin(j0);
evalcond[0]=((((-0.10915)*x7084))+(((-1.0)*px))+(((-0.39225)*x7083)));
evalcond[1]=((((-1.0)*py))+(((-0.39225)*x7084))+(((0.10915)*x7083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7085=((1.0)*cj5);
IkReal x7086=((((-1.0)*r01*x7085))+(((-1.0)*r00*sj5)));
j4eval[0]=x7086;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7085)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7086);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7087=cj5*cj5;
IkReal x7088=((1.0)*r21);
IkReal x7089=(cj5*sj5);
IkReal x7090=((1.0)*r20);
IkReal x7091=(((r01*r21))+(((-1.0)*r00*x7088*x7089))+((r00*r20*x7087))+((r02*r22))+(((-1.0)*r01*x7087*x7088))+(((-1.0)*r01*x7089*x7090)));
j4eval[0]=x7091;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7090))))));
j4eval[2]=IKsign(x7091);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7092=cj5*cj5;
IkReal x7093=(r21*sj5);
IkReal x7094=(r11*r21);
IkReal x7095=((1.0)*cj5*r20);
IkReal x7096=(x7094+(((-1.0)*cj5*r10*x7093))+((r12*r22))+((r10*r20*x7092))+(((-1.0)*x7092*x7094))+(((-1.0)*r11*sj5*x7095)));
j4eval[0]=x7096;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7093))+(((-1.0)*sj0*x7095))))));
j4eval[2]=IKsign(x7096);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7097=cj5*cj5;
IkReal x7098=(r21*sj5);
IkReal x7099=(r11*r21);
IkReal x7100=((1.0)*cj5*r20);
CheckValue<IkReal> x7101=IKPowWithIntegerCheck(IKsign((x7099+(((-1.0)*cj5*r10*x7098))+(((-1.0)*x7097*x7099))+((r12*r22))+((r10*r20*x7097))+(((-1.0)*r11*sj5*x7100)))),-1);
if(!x7101.valid){
continue;
}
CheckValue<IkReal> x7102 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7098))+(((-1.0)*sj0*x7100)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7101.value)))+(x7102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7103=IKsin(j4);
IkReal x7104=IKcos(j4);
IkReal x7105=(r11*sj5);
IkReal x7106=(cj5*r00);
IkReal x7107=(cj5*r10);
IkReal x7108=(r21*sj5);
IkReal x7109=(cj5*r20);
IkReal x7110=(r01*sj5);
IkReal x7111=((1.0)*x7104);
IkReal x7112=((1.0)*x7103);
evalcond[0]=((((-1.0)*r22*x7111))+(((-1.0)*x7109*x7112))+((x7103*x7108)));
evalcond[1]=((((-1.0)*r22*x7112))+((x7104*x7109))+(((-1.0)*x7108*x7111)));
evalcond[2]=((((-1.0)*x7107*x7112))+cj0+(((-1.0)*r12*x7111))+((x7103*x7105)));
evalcond[3]=(cj0+(((-1.0)*x7110*x7111))+(((-1.0)*r02*x7112))+((x7104*x7106)));
evalcond[4]=(sj0+(((-1.0)*r12*x7112))+((x7104*x7107))+(((-1.0)*x7105*x7111)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7111))+(((-1.0)*x7106*x7112))+((x7103*x7110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7113=cj5*cj5;
IkReal x7114=((1.0)*r21);
IkReal x7115=(cj5*sj5);
IkReal x7116=((1.0)*r20);
CheckValue<IkReal> x7117 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7117.valid){
continue;
}
CheckValue<IkReal> x7118=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7113*x7114))+((r01*r21))+(((-1.0)*r01*x7115*x7116))+((r00*r20*x7113))+((r02*r22))+(((-1.0)*r00*x7114*x7115)))),-1);
if(!x7118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7117.value)+(((1.5707963267949)*(x7118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7119=IKsin(j4);
IkReal x7120=IKcos(j4);
IkReal x7121=(r11*sj5);
IkReal x7122=(cj5*r00);
IkReal x7123=(cj5*r10);
IkReal x7124=(r21*sj5);
IkReal x7125=(cj5*r20);
IkReal x7126=(r01*sj5);
IkReal x7127=((1.0)*x7120);
IkReal x7128=((1.0)*x7119);
evalcond[0]=(((x7119*x7124))+(((-1.0)*r22*x7127))+(((-1.0)*x7125*x7128)));
evalcond[1]=(((x7120*x7125))+(((-1.0)*r22*x7128))+(((-1.0)*x7124*x7127)));
evalcond[2]=((((-1.0)*x7123*x7128))+cj0+((x7119*x7121))+(((-1.0)*r12*x7127)));
evalcond[3]=(cj0+((x7120*x7122))+(((-1.0)*x7126*x7127))+(((-1.0)*r02*x7128)));
evalcond[4]=(sj0+(((-1.0)*x7121*x7127))+((x7120*x7123))+(((-1.0)*r12*x7128)));
evalcond[5]=((((-1.0)*sj0))+((x7119*x7126))+(((-1.0)*x7122*x7128))+(((-1.0)*r02*x7127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7129=((1.0)*cj5);
CheckValue<IkReal> x7130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7129)))),-1);
if(!x7130.valid){
continue;
}
CheckValue<IkReal> x7131 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7130.value)))+(x7131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7132=IKsin(j4);
IkReal x7133=IKcos(j4);
IkReal x7134=(r11*sj5);
IkReal x7135=(cj5*r00);
IkReal x7136=(cj5*r10);
IkReal x7137=(r21*sj5);
IkReal x7138=(cj5*r20);
IkReal x7139=(r01*sj5);
IkReal x7140=((1.0)*x7133);
IkReal x7141=((1.0)*x7132);
evalcond[0]=((((-1.0)*r22*x7140))+(((-1.0)*x7138*x7141))+((x7132*x7137)));
evalcond[1]=((((-1.0)*r22*x7141))+((x7133*x7138))+(((-1.0)*x7137*x7140)));
evalcond[2]=(cj0+(((-1.0)*x7136*x7141))+((x7132*x7134))+(((-1.0)*r12*x7140)));
evalcond[3]=(cj0+((x7133*x7135))+(((-1.0)*x7139*x7140))+(((-1.0)*r02*x7141)));
evalcond[4]=(sj0+((x7133*x7136))+(((-1.0)*x7134*x7140))+(((-1.0)*r12*x7141)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7135*x7141))+((x7132*x7139))+(((-1.0)*r02*x7140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7142=IKsin(j0);
IkReal x7143=IKcos(j0);
IkReal x7144=((1.0)*cj5);
IkReal x7145=((1.0)*sj5);
IkReal x7146=((0.09465)*cj5);
IkReal x7147=((0.09465)*sj5);
evalcond[0]=(x7143+(((-1.0)*r01*x7144))+(((-1.0)*r00*x7145)));
evalcond[1]=(x7142+(((-1.0)*r11*x7144))+(((-1.0)*r10*x7145)));
evalcond[2]=((((-0.10915)*x7142))+(((-1.0)*r01*x7146))+(((-1.0)*px))+(((-1.0)*r00*x7147)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r11*x7146))+(((0.10915)*x7143))+(((-1.0)*r10*x7147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7148=((1.0)*sj5);
IkReal x7149=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7148)));
j4eval[0]=x7149;
j4eval[1]=IKsign(x7149);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7148))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7150=((1.0)*cj5);
IkReal x7151=((((-1.0)*r01*x7150))+(((-1.0)*r00*sj5)));
j4eval[0]=x7151;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7150)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7152=r21*r21;
IkReal x7153=cj5*cj5;
IkReal x7154=(r21*sj5);
IkReal x7155=(cj5*r20);
IkReal x7156=((((2.0)*x7154*x7155))+(((-1.0)*x7153*(r20*r20)))+(((-1.0)*x7152))+(((-1.0)*(r22*r22)))+((x7152*x7153)));
j4eval[0]=x7156;
j4eval[1]=((IKabs((x7154+(((-1.0)*x7155)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7157=r21*r21;
IkReal x7158=cj5*cj5;
IkReal x7159=(r21*sj5);
IkReal x7160=(cj5*r20);
CheckValue<IkReal> x7161 = IKatan2WithCheck(IkReal(r22),IkReal((x7159+(((-1.0)*x7160)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7161.valid){
continue;
}
CheckValue<IkReal> x7162=IKPowWithIntegerCheck(IKsign(((((2.0)*x7159*x7160))+(((-1.0)*x7157))+(((-1.0)*(r22*r22)))+(((-1.0)*x7158*(r20*r20)))+((x7157*x7158)))),-1);
if(!x7162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7161.value)+(((1.5707963267949)*(x7162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7163=IKsin(j4);
IkReal x7164=IKcos(j4);
IkReal x7165=(r11*sj5);
IkReal x7166=(r21*sj5);
IkReal x7167=(cj5*r00);
IkReal x7168=(cj5*r20);
IkReal x7169=(r01*sj5);
IkReal x7170=(cj5*r10);
IkReal x7171=((1.0)*x7164);
IkReal x7172=((1.0)*x7163);
evalcond[0]=((((-1.0)*x7168*x7172))+(((-1.0)*r22*x7171))+((x7163*x7166)));
evalcond[1]=((((-1.0)*x7169*x7171))+(((-1.0)*r02*x7172))+((x7164*x7167)));
evalcond[2]=((((-1.0)*r12*x7172))+(((-1.0)*x7165*x7171))+((x7164*x7170)));
evalcond[3]=((((-1.0)*x7170*x7172))+cj0+(((-1.0)*r12*x7171))+((x7163*x7165)));
evalcond[4]=((-1.0)+((x7164*x7168))+(((-1.0)*r22*x7172))+(((-1.0)*x7166*x7171)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7171))+(((-1.0)*x7167*x7172))+((x7163*x7169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7173=((1.0)*cj5);
CheckValue<IkReal> x7174 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7173))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7174.valid){
continue;
}
CheckValue<IkReal> x7175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7173)))),-1);
if(!x7175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7174.value)+(((1.5707963267949)*(x7175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7176=IKsin(j4);
IkReal x7177=IKcos(j4);
IkReal x7178=(r11*sj5);
IkReal x7179=(r21*sj5);
IkReal x7180=(cj5*r00);
IkReal x7181=(cj5*r20);
IkReal x7182=(r01*sj5);
IkReal x7183=(cj5*r10);
IkReal x7184=((1.0)*x7177);
IkReal x7185=((1.0)*x7176);
evalcond[0]=(((x7176*x7179))+(((-1.0)*x7181*x7185))+(((-1.0)*r22*x7184)));
evalcond[1]=((((-1.0)*x7182*x7184))+(((-1.0)*r02*x7185))+((x7177*x7180)));
evalcond[2]=((((-1.0)*x7178*x7184))+((x7177*x7183))+(((-1.0)*r12*x7185)));
evalcond[3]=(((x7176*x7178))+cj0+(((-1.0)*x7183*x7185))+(((-1.0)*r12*x7184)));
evalcond[4]=((-1.0)+(((-1.0)*x7179*x7184))+(((-1.0)*r22*x7185))+((x7177*x7181)));
evalcond[5]=((((-1.0)*sj0))+((x7176*x7182))+(((-1.0)*r02*x7184))+(((-1.0)*x7180*x7185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7186=((1.0)*sj5);
CheckValue<IkReal> x7187 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7186))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7187.valid){
continue;
}
CheckValue<IkReal> x7188=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7186)))),-1);
if(!x7188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7187.value)+(((1.5707963267949)*(x7188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7189=IKsin(j4);
IkReal x7190=IKcos(j4);
IkReal x7191=(r11*sj5);
IkReal x7192=(r21*sj5);
IkReal x7193=(cj5*r00);
IkReal x7194=(cj5*r20);
IkReal x7195=(r01*sj5);
IkReal x7196=(cj5*r10);
IkReal x7197=((1.0)*x7190);
IkReal x7198=((1.0)*x7189);
evalcond[0]=(((x7189*x7192))+(((-1.0)*x7194*x7198))+(((-1.0)*r22*x7197)));
evalcond[1]=(((x7190*x7193))+(((-1.0)*x7195*x7197))+(((-1.0)*r02*x7198)));
evalcond[2]=(((x7190*x7196))+(((-1.0)*x7191*x7197))+(((-1.0)*r12*x7198)));
evalcond[3]=(cj0+(((-1.0)*x7196*x7198))+((x7189*x7191))+(((-1.0)*r12*x7197)));
evalcond[4]=((-1.0)+((x7190*x7194))+(((-1.0)*r22*x7198))+(((-1.0)*x7192*x7197)));
evalcond[5]=((((-1.0)*sj0))+((x7189*x7195))+(((-1.0)*x7193*x7198))+(((-1.0)*r02*x7197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7199=IKsin(j0);
IkReal x7200=IKcos(j0);
evalcond[0]=((((0.39225)*x7200))+(((-1.0)*px))+(((-0.10915)*x7199)));
evalcond[1]=((((0.39225)*x7199))+(((-1.0)*py))+(((0.10915)*x7200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7201=((1.0)*cj5);
IkReal x7202=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7201)));
j4eval[0]=x7202;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7201))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7203=((1.0)*cj5);
IkReal x7204=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7203)));
j4eval[0]=x7204;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7203))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7204);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7205=cj5*cj5;
IkReal x7206=((1.0)*sj5);
IkReal x7207=(cj5*r20);
IkReal x7208=(r11*r21);
IkReal x7209=(x7208+(((-1.0)*r11*x7206*x7207))+((r10*r20*x7205))+(((-1.0)*x7205*x7208))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7206)));
j4eval[0]=x7209;
j4eval[1]=IKsign(x7209);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7206))+((cj0*x7207)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7210=cj5*cj5;
IkReal x7211=((1.0)*sj5);
IkReal x7212=(cj5*r20);
IkReal x7213=(r11*r21);
CheckValue<IkReal> x7214 = IKatan2WithCheck(IkReal((((cj0*x7212))+(((-1.0)*cj0*r21*x7211)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7214.valid){
continue;
}
CheckValue<IkReal> x7215=IKPowWithIntegerCheck(IKsign((x7213+((r10*r20*x7210))+(((-1.0)*cj5*r10*r21*x7211))+((r12*r22))+(((-1.0)*x7210*x7213))+(((-1.0)*r11*x7211*x7212)))),-1);
if(!x7215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7214.value)+(((1.5707963267949)*(x7215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7216=IKsin(j4);
IkReal x7217=IKcos(j4);
IkReal x7218=((1.0)*sj0);
IkReal x7219=(cj5*r00);
IkReal x7220=(r11*sj5);
IkReal x7221=(cj5*r10);
IkReal x7222=(r21*sj5);
IkReal x7223=(cj5*r20);
IkReal x7224=(r01*sj5);
IkReal x7225=((1.0)*x7217);
IkReal x7226=((1.0)*x7216);
evalcond[0]=(((x7216*x7222))+(((-1.0)*r22*x7225))+(((-1.0)*x7223*x7226)));
evalcond[1]=((((-1.0)*x7222*x7225))+((x7217*x7223))+(((-1.0)*r22*x7226)));
evalcond[2]=(cj0+(((-1.0)*x7221*x7226))+((x7216*x7220))+(((-1.0)*r12*x7225)));
evalcond[3]=((((-1.0)*r02*x7225))+((x7216*x7224))+(((-1.0)*x7218))+(((-1.0)*x7219*x7226)));
evalcond[4]=((((-1.0)*r02*x7226))+(((-1.0)*x7224*x7225))+(((-1.0)*cj0))+((x7217*x7219)));
evalcond[5]=((((-1.0)*x7218))+(((-1.0)*r12*x7226))+(((-1.0)*x7220*x7225))+((x7217*x7221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7227=((1.0)*cj5);
CheckValue<IkReal> x7228 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7228.valid){
continue;
}
CheckValue<IkReal> x7229=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7227)))),-1);
if(!x7229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7228.value)+(((1.5707963267949)*(x7229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7230=IKsin(j4);
IkReal x7231=IKcos(j4);
IkReal x7232=((1.0)*sj0);
IkReal x7233=(cj5*r00);
IkReal x7234=(r11*sj5);
IkReal x7235=(cj5*r10);
IkReal x7236=(r21*sj5);
IkReal x7237=(cj5*r20);
IkReal x7238=(r01*sj5);
IkReal x7239=((1.0)*x7231);
IkReal x7240=((1.0)*x7230);
evalcond[0]=(((x7230*x7236))+(((-1.0)*x7237*x7240))+(((-1.0)*r22*x7239)));
evalcond[1]=((((-1.0)*r22*x7240))+((x7231*x7237))+(((-1.0)*x7236*x7239)));
evalcond[2]=(cj0+((x7230*x7234))+(((-1.0)*x7235*x7240))+(((-1.0)*r12*x7239)));
evalcond[3]=((((-1.0)*x7233*x7240))+((x7230*x7238))+(((-1.0)*x7232))+(((-1.0)*r02*x7239)));
evalcond[4]=(((x7231*x7233))+(((-1.0)*r02*x7240))+(((-1.0)*x7238*x7239))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7240))+((x7231*x7235))+(((-1.0)*x7234*x7239))+(((-1.0)*x7232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7241=((1.0)*cj5);
CheckValue<IkReal> x7242=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7241)))),-1);
if(!x7242.valid){
continue;
}
CheckValue<IkReal> x7243 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7242.value)))+(x7243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7244=IKsin(j4);
IkReal x7245=IKcos(j4);
IkReal x7246=((1.0)*sj0);
IkReal x7247=(cj5*r00);
IkReal x7248=(r11*sj5);
IkReal x7249=(cj5*r10);
IkReal x7250=(r21*sj5);
IkReal x7251=(cj5*r20);
IkReal x7252=(r01*sj5);
IkReal x7253=((1.0)*x7245);
IkReal x7254=((1.0)*x7244);
evalcond[0]=((((-1.0)*x7251*x7254))+((x7244*x7250))+(((-1.0)*r22*x7253)));
evalcond[1]=(((x7245*x7251))+(((-1.0)*r22*x7254))+(((-1.0)*x7250*x7253)));
evalcond[2]=(cj0+((x7244*x7248))+(((-1.0)*r12*x7253))+(((-1.0)*x7249*x7254)));
evalcond[3]=(((x7244*x7252))+(((-1.0)*x7247*x7254))+(((-1.0)*r02*x7253))+(((-1.0)*x7246)));
evalcond[4]=((((-1.0)*x7252*x7253))+(((-1.0)*r02*x7254))+((x7245*x7247))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7254))+(((-1.0)*x7248*x7253))+((x7245*x7249))+(((-1.0)*x7246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7255=IKcos(j0);
IkReal x7256=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x7255))+(((-0.10915)*x7256)));
evalcond[1]=((((0.10915)*x7255))+(((-1.0)*py))+(((-0.81725)*x7256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7257=((1.0)*cj5);
IkReal x7258=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7257)));
j4eval[0]=x7258;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7257)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7259=cj5*cj5;
IkReal x7260=((1.0)*r21);
IkReal x7261=(cj5*sj5);
IkReal x7262=((1.0)*r20);
IkReal x7263=((((-1.0)*r01*x7259*x7260))+((r01*r21))+(((-1.0)*r00*x7260*x7261))+((r02*r22))+((r00*r20*x7259))+(((-1.0)*r01*x7261*x7262)));
j4eval[0]=x7263;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7262)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7264=cj5*cj5;
IkReal x7265=(r21*sj5);
IkReal x7266=(r11*r21);
IkReal x7267=((1.0)*cj5*r20);
IkReal x7268=((((-1.0)*r11*sj5*x7267))+(((-1.0)*cj5*r10*x7265))+x7266+((r12*r22))+((r10*r20*x7264))+(((-1.0)*x7264*x7266)));
j4eval[0]=x7268;
j4eval[1]=((IKabs((((sj0*x7265))+(((-1.0)*sj0*x7267)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7269=cj5*cj5;
IkReal x7270=(r21*sj5);
IkReal x7271=(r11*r21);
IkReal x7272=((1.0)*cj5*r20);
CheckValue<IkReal> x7273 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7270))+(((-1.0)*sj0*x7272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7273.valid){
continue;
}
CheckValue<IkReal> x7274=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7269*x7271))+x7271+(((-1.0)*r11*sj5*x7272))+((r12*r22))+((r10*r20*x7269))+(((-1.0)*cj5*r10*x7270)))),-1);
if(!x7274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7273.value)+(((1.5707963267949)*(x7274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7275=IKsin(j4);
IkReal x7276=IKcos(j4);
IkReal x7277=(r11*sj5);
IkReal x7278=(cj5*r00);
IkReal x7279=(cj5*r10);
IkReal x7280=(r21*sj5);
IkReal x7281=(cj5*r20);
IkReal x7282=(r01*sj5);
IkReal x7283=((1.0)*x7276);
IkReal x7284=((1.0)*x7275);
evalcond[0]=(((x7275*x7280))+(((-1.0)*x7281*x7284))+(((-1.0)*r22*x7283)));
evalcond[1]=(((x7276*x7281))+(((-1.0)*x7280*x7283))+(((-1.0)*r22*x7284)));
evalcond[2]=(cj0+((x7275*x7277))+(((-1.0)*r12*x7283))+(((-1.0)*x7279*x7284)));
evalcond[3]=((((-1.0)*x7282*x7283))+cj0+((x7276*x7278))+(((-1.0)*r02*x7284)));
evalcond[4]=(sj0+(((-1.0)*x7277*x7283))+((x7276*x7279))+(((-1.0)*r12*x7284)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7278*x7284))+((x7275*x7282))+(((-1.0)*r02*x7283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7285=cj5*cj5;
IkReal x7286=((1.0)*r21);
IkReal x7287=(cj5*sj5);
IkReal x7288=((1.0)*r20);
CheckValue<IkReal> x7289=IKPowWithIntegerCheck(IKsign((((r00*r20*x7285))+((r01*r21))+(((-1.0)*r01*x7287*x7288))+(((-1.0)*r00*x7286*x7287))+((r02*r22))+(((-1.0)*r01*x7285*x7286)))),-1);
if(!x7289.valid){
continue;
}
CheckValue<IkReal> x7290 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7289.value)))+(x7290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7291=IKsin(j4);
IkReal x7292=IKcos(j4);
IkReal x7293=(r11*sj5);
IkReal x7294=(cj5*r00);
IkReal x7295=(cj5*r10);
IkReal x7296=(r21*sj5);
IkReal x7297=(cj5*r20);
IkReal x7298=(r01*sj5);
IkReal x7299=((1.0)*x7292);
IkReal x7300=((1.0)*x7291);
evalcond[0]=((((-1.0)*x7297*x7300))+(((-1.0)*r22*x7299))+((x7291*x7296)));
evalcond[1]=((((-1.0)*x7296*x7299))+((x7292*x7297))+(((-1.0)*r22*x7300)));
evalcond[2]=(cj0+(((-1.0)*x7295*x7300))+((x7291*x7293))+(((-1.0)*r12*x7299)));
evalcond[3]=((((-1.0)*r02*x7300))+cj0+(((-1.0)*x7298*x7299))+((x7292*x7294)));
evalcond[4]=(sj0+(((-1.0)*r12*x7300))+((x7292*x7295))+(((-1.0)*x7293*x7299)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7299))+((x7291*x7298))+(((-1.0)*x7294*x7300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7301=((1.0)*cj5);
CheckValue<IkReal> x7302 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7302.valid){
continue;
}
CheckValue<IkReal> x7303=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7301)))),-1);
if(!x7303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7302.value)+(((1.5707963267949)*(x7303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7304=IKsin(j4);
IkReal x7305=IKcos(j4);
IkReal x7306=(r11*sj5);
IkReal x7307=(cj5*r00);
IkReal x7308=(cj5*r10);
IkReal x7309=(r21*sj5);
IkReal x7310=(cj5*r20);
IkReal x7311=(r01*sj5);
IkReal x7312=((1.0)*x7305);
IkReal x7313=((1.0)*x7304);
evalcond[0]=(((x7304*x7309))+(((-1.0)*r22*x7312))+(((-1.0)*x7310*x7313)));
evalcond[1]=((((-1.0)*x7309*x7312))+((x7305*x7310))+(((-1.0)*r22*x7313)));
evalcond[2]=(cj0+((x7304*x7306))+(((-1.0)*r12*x7312))+(((-1.0)*x7308*x7313)));
evalcond[3]=(cj0+(((-1.0)*x7311*x7312))+((x7305*x7307))+(((-1.0)*r02*x7313)));
evalcond[4]=(sj0+(((-1.0)*r12*x7313))+((x7305*x7308))+(((-1.0)*x7306*x7312)));
evalcond[5]=((((-1.0)*sj0))+((x7304*x7311))+(((-1.0)*x7307*x7313))+(((-1.0)*r02*x7312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7314=IKcos(j0);
IkReal x7315=IKsin(j0);
evalcond[0]=((((-0.03275)*x7314))+(((-0.10915)*x7315))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x7314))+(((-0.03275)*x7315))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7316=((1.0)*cj5);
IkReal x7317=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7316)));
j4eval[0]=x7317;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7316)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7318=((1.0)*cj5);
IkReal x7319=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7318)));
j4eval[0]=x7319;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7318))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7320=cj5*cj5;
IkReal x7321=((1.0)*sj5);
IkReal x7322=(cj5*r20);
IkReal x7323=(r11*r21);
IkReal x7324=(x7323+(((-1.0)*cj5*r10*r21*x7321))+((r12*r22))+((r10*r20*x7320))+(((-1.0)*r11*x7321*x7322))+(((-1.0)*x7320*x7323)));
j4eval[0]=x7324;
j4eval[1]=IKsign(x7324);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7321))+((cj0*x7322))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7325=cj5*cj5;
IkReal x7326=((1.0)*sj5);
IkReal x7327=(cj5*r20);
IkReal x7328=(r11*r21);
CheckValue<IkReal> x7329=IKPowWithIntegerCheck(IKsign((x7328+(((-1.0)*r11*x7326*x7327))+(((-1.0)*cj5*r10*r21*x7326))+((r12*r22))+((r10*r20*x7325))+(((-1.0)*x7325*x7328)))),-1);
if(!x7329.valid){
continue;
}
CheckValue<IkReal> x7330 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7326))+((cj0*x7327)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7329.value)))+(x7330.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7331=IKsin(j4);
IkReal x7332=IKcos(j4);
IkReal x7333=((1.0)*sj0);
IkReal x7334=(cj5*r00);
IkReal x7335=(r11*sj5);
IkReal x7336=(cj5*r10);
IkReal x7337=(r21*sj5);
IkReal x7338=(cj5*r20);
IkReal x7339=(r01*sj5);
IkReal x7340=((1.0)*x7332);
IkReal x7341=((1.0)*x7331);
evalcond[0]=((((-1.0)*r22*x7340))+((x7331*x7337))+(((-1.0)*x7338*x7341)));
evalcond[1]=((((-1.0)*r22*x7341))+(((-1.0)*x7337*x7340))+((x7332*x7338)));
evalcond[2]=(cj0+(((-1.0)*r12*x7340))+((x7331*x7335))+(((-1.0)*x7336*x7341)));
evalcond[3]=((((-1.0)*x7334*x7341))+(((-1.0)*r02*x7340))+((x7331*x7339))+(((-1.0)*x7333)));
evalcond[4]=(((x7332*x7334))+(((-1.0)*r02*x7341))+(((-1.0)*cj0))+(((-1.0)*x7339*x7340)));
evalcond[5]=((((-1.0)*r12*x7341))+((x7332*x7336))+(((-1.0)*x7333))+(((-1.0)*x7335*x7340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7342=((1.0)*cj5);
CheckValue<IkReal> x7343 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7343.valid){
continue;
}
CheckValue<IkReal> x7344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7342)))),-1);
if(!x7344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7343.value)+(((1.5707963267949)*(x7344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7345=IKsin(j4);
IkReal x7346=IKcos(j4);
IkReal x7347=((1.0)*sj0);
IkReal x7348=(cj5*r00);
IkReal x7349=(r11*sj5);
IkReal x7350=(cj5*r10);
IkReal x7351=(r21*sj5);
IkReal x7352=(cj5*r20);
IkReal x7353=(r01*sj5);
IkReal x7354=((1.0)*x7346);
IkReal x7355=((1.0)*x7345);
evalcond[0]=((((-1.0)*r22*x7354))+((x7345*x7351))+(((-1.0)*x7352*x7355)));
evalcond[1]=((((-1.0)*r22*x7355))+(((-1.0)*x7351*x7354))+((x7346*x7352)));
evalcond[2]=(cj0+(((-1.0)*r12*x7354))+((x7345*x7349))+(((-1.0)*x7350*x7355)));
evalcond[3]=(((x7345*x7353))+(((-1.0)*x7347))+(((-1.0)*r02*x7354))+(((-1.0)*x7348*x7355)));
evalcond[4]=(((x7346*x7348))+(((-1.0)*r02*x7355))+(((-1.0)*x7353*x7354))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7355))+(((-1.0)*x7347))+((x7346*x7350))+(((-1.0)*x7349*x7354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7356=((1.0)*cj5);
CheckValue<IkReal> x7357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7356))+(((-1.0)*r00*sj5)))),-1);
if(!x7357.valid){
continue;
}
CheckValue<IkReal> x7358 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7357.value)))+(x7358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7359=IKsin(j4);
IkReal x7360=IKcos(j4);
IkReal x7361=((1.0)*sj0);
IkReal x7362=(cj5*r00);
IkReal x7363=(r11*sj5);
IkReal x7364=(cj5*r10);
IkReal x7365=(r21*sj5);
IkReal x7366=(cj5*r20);
IkReal x7367=(r01*sj5);
IkReal x7368=((1.0)*x7360);
IkReal x7369=((1.0)*x7359);
evalcond[0]=(((x7359*x7365))+(((-1.0)*x7366*x7369))+(((-1.0)*r22*x7368)));
evalcond[1]=((((-1.0)*x7365*x7368))+(((-1.0)*r22*x7369))+((x7360*x7366)));
evalcond[2]=(cj0+((x7359*x7363))+(((-1.0)*x7364*x7369))+(((-1.0)*r12*x7368)));
evalcond[3]=(((x7359*x7367))+(((-1.0)*x7361))+(((-1.0)*r02*x7368))+(((-1.0)*x7362*x7369)));
evalcond[4]=((((-1.0)*x7367*x7368))+((x7360*x7362))+(((-1.0)*r02*x7369))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7363*x7368))+(((-1.0)*r12*x7369))+(((-1.0)*x7361))+((x7360*x7364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7370=IKsin(j0);
IkReal x7371=IKcos(j0);
IkReal x7372=((1.0)*cj5);
IkReal x7373=((1.0)*sj5);
IkReal x7374=((0.09465)*cj5);
IkReal x7375=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r01*x7372))+x7371+(((-1.0)*r00*x7373)));
evalcond[1]=(x7370+(((-1.0)*r11*x7372))+(((-1.0)*r10*x7373)));
evalcond[2]=((((-1.0)*r01*x7374))+(((-1.0)*px))+(((-0.10915)*x7370))+(((-1.0)*r00*x7375)));
evalcond[3]=((((-1.0)*r11*x7374))+(((-1.0)*py))+(((0.10915)*x7371))+(((-1.0)*r10*x7375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7376=((1.0)*sj5);
IkReal x7377=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7376)));
j4eval[0]=x7377;
j4eval[1]=IKsign(x7377);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7376))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7378=((1.0)*cj5);
IkReal x7379=((((-1.0)*r01*x7378))+(((-1.0)*r00*sj5)));
j4eval[0]=x7379;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7378)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7380=r21*r21;
IkReal x7381=cj5*cj5;
IkReal x7382=(r21*sj5);
IkReal x7383=(cj5*r20);
IkReal x7384=((((-1.0)*x7381*(r20*r20)))+((x7380*x7381))+(((-1.0)*x7380))+(((-1.0)*(r22*r22)))+(((2.0)*x7382*x7383)));
j4eval[0]=x7384;
j4eval[1]=((IKabs((x7382+(((-1.0)*x7383)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7385=r21*r21;
IkReal x7386=cj5*cj5;
IkReal x7387=(r21*sj5);
IkReal x7388=(cj5*r20);
CheckValue<IkReal> x7389 = IKatan2WithCheck(IkReal(r22),IkReal((x7387+(((-1.0)*x7388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7389.valid){
continue;
}
CheckValue<IkReal> x7390=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7385))+((x7385*x7386))+(((2.0)*x7387*x7388))+(((-1.0)*(r22*r22)))+(((-1.0)*x7386*(r20*r20))))),-1);
if(!x7390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7389.value)+(((1.5707963267949)*(x7390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7391=IKsin(j4);
IkReal x7392=IKcos(j4);
IkReal x7393=(r11*sj5);
IkReal x7394=(r21*sj5);
IkReal x7395=(cj5*r00);
IkReal x7396=(cj5*r20);
IkReal x7397=(r01*sj5);
IkReal x7398=(cj5*r10);
IkReal x7399=((1.0)*x7392);
IkReal x7400=((1.0)*x7391);
evalcond[0]=((((-1.0)*r22*x7399))+(((-1.0)*x7396*x7400))+((x7391*x7394)));
evalcond[1]=((((-1.0)*x7397*x7399))+(((-1.0)*r02*x7400))+((x7392*x7395)));
evalcond[2]=((((-1.0)*r12*x7400))+(((-1.0)*x7393*x7399))+((x7392*x7398)));
evalcond[3]=((((-1.0)*r12*x7399))+cj0+(((-1.0)*x7398*x7400))+((x7391*x7393)));
evalcond[4]=((-1.0)+(((-1.0)*x7394*x7399))+(((-1.0)*r22*x7400))+((x7392*x7396)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7399))+(((-1.0)*x7395*x7400))+((x7391*x7397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7401=((1.0)*cj5);
CheckValue<IkReal> x7402 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7402.valid){
continue;
}
CheckValue<IkReal> x7403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7401))+(((-1.0)*r00*sj5)))),-1);
if(!x7403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7402.value)+(((1.5707963267949)*(x7403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7404=IKsin(j4);
IkReal x7405=IKcos(j4);
IkReal x7406=(r11*sj5);
IkReal x7407=(r21*sj5);
IkReal x7408=(cj5*r00);
IkReal x7409=(cj5*r20);
IkReal x7410=(r01*sj5);
IkReal x7411=(cj5*r10);
IkReal x7412=((1.0)*x7405);
IkReal x7413=((1.0)*x7404);
evalcond[0]=((((-1.0)*x7409*x7413))+((x7404*x7407))+(((-1.0)*r22*x7412)));
evalcond[1]=(((x7405*x7408))+(((-1.0)*x7410*x7412))+(((-1.0)*r02*x7413)));
evalcond[2]=((((-1.0)*r12*x7413))+((x7405*x7411))+(((-1.0)*x7406*x7412)));
evalcond[3]=((((-1.0)*r12*x7412))+cj0+((x7404*x7406))+(((-1.0)*x7411*x7413)));
evalcond[4]=((-1.0)+((x7405*x7409))+(((-1.0)*x7407*x7412))+(((-1.0)*r22*x7413)));
evalcond[5]=((((-1.0)*sj0))+((x7404*x7410))+(((-1.0)*x7408*x7413))+(((-1.0)*r02*x7412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7414=((1.0)*sj5);
CheckValue<IkReal> x7415=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7414)))),-1);
if(!x7415.valid){
continue;
}
CheckValue<IkReal> x7416 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7414))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7415.value)))+(x7416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7417=IKsin(j4);
IkReal x7418=IKcos(j4);
IkReal x7419=(r11*sj5);
IkReal x7420=(r21*sj5);
IkReal x7421=(cj5*r00);
IkReal x7422=(cj5*r20);
IkReal x7423=(r01*sj5);
IkReal x7424=(cj5*r10);
IkReal x7425=((1.0)*x7418);
IkReal x7426=((1.0)*x7417);
evalcond[0]=((((-1.0)*x7422*x7426))+(((-1.0)*r22*x7425))+((x7417*x7420)));
evalcond[1]=(((x7418*x7421))+(((-1.0)*r02*x7426))+(((-1.0)*x7423*x7425)));
evalcond[2]=(((x7418*x7424))+(((-1.0)*r12*x7426))+(((-1.0)*x7419*x7425)));
evalcond[3]=(cj0+(((-1.0)*r12*x7425))+(((-1.0)*x7424*x7426))+((x7417*x7419)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7426))+((x7418*x7422))+(((-1.0)*x7420*x7425)));
evalcond[5]=((((-1.0)*x7421*x7426))+(((-1.0)*sj0))+(((-1.0)*r02*x7425))+((x7417*x7423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7427=IKsin(j0);
IkReal x7428=IKcos(j0);
evalcond[0]=((((0.39225)*x7428))+(((-1.0)*px))+(((-0.10915)*x7427)));
evalcond[1]=((((0.39225)*x7427))+(((-1.0)*py))+(((0.10915)*x7428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7429=((1.0)*cj5);
IkReal x7430=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7429)));
j4eval[0]=x7430;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7429)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7431=((1.0)*cj5);
IkReal x7432=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7431)));
j4eval[0]=x7432;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7431))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7433=cj5*cj5;
IkReal x7434=((1.0)*sj5);
IkReal x7435=(cj5*r20);
IkReal x7436=(r11*r21);
IkReal x7437=((((-1.0)*cj5*r10*r21*x7434))+(((-1.0)*r11*x7434*x7435))+(((-1.0)*x7433*x7436))+((r12*r22))+((r10*r20*x7433))+x7436);
j4eval[0]=x7437;
j4eval[1]=IKsign(x7437);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7434))+((cj0*x7435)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7438=cj5*cj5;
IkReal x7439=((1.0)*sj5);
IkReal x7440=(cj5*r20);
IkReal x7441=(r11*r21);
CheckValue<IkReal> x7442 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7439))+((cj0*x7440)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7442.valid){
continue;
}
CheckValue<IkReal> x7443=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7439*x7440))+(((-1.0)*cj5*r10*r21*x7439))+((r12*r22))+(((-1.0)*x7438*x7441))+((r10*r20*x7438))+x7441)),-1);
if(!x7443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7442.value)+(((1.5707963267949)*(x7443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7444=IKsin(j4);
IkReal x7445=IKcos(j4);
IkReal x7446=((1.0)*sj0);
IkReal x7447=(cj5*r00);
IkReal x7448=(r11*sj5);
IkReal x7449=(cj5*r10);
IkReal x7450=(r21*sj5);
IkReal x7451=(cj5*r20);
IkReal x7452=(r01*sj5);
IkReal x7453=((1.0)*x7445);
IkReal x7454=((1.0)*x7444);
evalcond[0]=(((x7444*x7450))+(((-1.0)*x7451*x7454))+(((-1.0)*r22*x7453)));
evalcond[1]=((((-1.0)*x7450*x7453))+((x7445*x7451))+(((-1.0)*r22*x7454)));
evalcond[2]=(cj0+((x7444*x7448))+(((-1.0)*x7449*x7454))+(((-1.0)*r12*x7453)));
evalcond[3]=((((-1.0)*x7446))+((x7444*x7452))+(((-1.0)*x7447*x7454))+(((-1.0)*r02*x7453)));
evalcond[4]=(((x7445*x7447))+(((-1.0)*x7452*x7453))+(((-1.0)*r02*x7454))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7446))+((x7445*x7449))+(((-1.0)*r12*x7454))+(((-1.0)*x7448*x7453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7455=((1.0)*cj5);
CheckValue<IkReal> x7456 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7456.valid){
continue;
}
CheckValue<IkReal> x7457=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7455)))),-1);
if(!x7457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7456.value)+(((1.5707963267949)*(x7457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7458=IKsin(j4);
IkReal x7459=IKcos(j4);
IkReal x7460=((1.0)*sj0);
IkReal x7461=(cj5*r00);
IkReal x7462=(r11*sj5);
IkReal x7463=(cj5*r10);
IkReal x7464=(r21*sj5);
IkReal x7465=(cj5*r20);
IkReal x7466=(r01*sj5);
IkReal x7467=((1.0)*x7459);
IkReal x7468=((1.0)*x7458);
evalcond[0]=(((x7458*x7464))+(((-1.0)*r22*x7467))+(((-1.0)*x7465*x7468)));
evalcond[1]=((((-1.0)*x7464*x7467))+(((-1.0)*r22*x7468))+((x7459*x7465)));
evalcond[2]=(((x7458*x7462))+cj0+(((-1.0)*r12*x7467))+(((-1.0)*x7463*x7468)));
evalcond[3]=(((x7458*x7466))+(((-1.0)*r02*x7467))+(((-1.0)*x7461*x7468))+(((-1.0)*x7460)));
evalcond[4]=((((-1.0)*r02*x7468))+(((-1.0)*x7466*x7467))+((x7459*x7461))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7468))+(((-1.0)*x7462*x7467))+((x7459*x7463))+(((-1.0)*x7460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7469=((1.0)*cj5);
CheckValue<IkReal> x7470=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7469)))),-1);
if(!x7470.valid){
continue;
}
CheckValue<IkReal> x7471 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7469)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7470.value)))+(x7471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7472=IKsin(j4);
IkReal x7473=IKcos(j4);
IkReal x7474=((1.0)*sj0);
IkReal x7475=(cj5*r00);
IkReal x7476=(r11*sj5);
IkReal x7477=(cj5*r10);
IkReal x7478=(r21*sj5);
IkReal x7479=(cj5*r20);
IkReal x7480=(r01*sj5);
IkReal x7481=((1.0)*x7473);
IkReal x7482=((1.0)*x7472);
evalcond[0]=((((-1.0)*x7479*x7482))+((x7472*x7478))+(((-1.0)*r22*x7481)));
evalcond[1]=((((-1.0)*x7478*x7481))+(((-1.0)*r22*x7482))+((x7473*x7479)));
evalcond[2]=(cj0+((x7472*x7476))+(((-1.0)*r12*x7481))+(((-1.0)*x7477*x7482)));
evalcond[3]=((((-1.0)*x7475*x7482))+(((-1.0)*x7474))+((x7472*x7480))+(((-1.0)*r02*x7481)));
evalcond[4]=((((-1.0)*x7480*x7481))+((x7473*x7475))+(((-1.0)*r02*x7482))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7476*x7481))+(((-1.0)*x7474))+(((-1.0)*r12*x7482))+((x7473*x7477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7483=((1.0)*sj5);
IkReal x7484=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7483))+(((-1.0)*r11*x7484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7484))+(((-1.0)*r00*x7483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7483))+(((-1.0)*r11*x7484))))+IKsqr(((((-1.0)*r01*x7484))+(((-1.0)*r00*x7483))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7483))+(((-1.0)*r11*x7484))), ((((-1.0)*r01*x7484))+(((-1.0)*r00*x7483))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7485=IKsin(j0);
IkReal x7486=IKcos(j0);
IkReal x7487=((1.0)*cj5);
IkReal x7488=((1.0)*sj5);
IkReal x7489=((0.09465)*cj5);
IkReal x7490=((0.09465)*sj5);
evalcond[0]=((((-1.0)*x7486))+(((-1.0)*r01*x7487))+(((-1.0)*r00*x7488)));
evalcond[1]=((((-1.0)*x7485))+(((-1.0)*r10*x7488))+(((-1.0)*r11*x7487)));
evalcond[2]=((((-1.0)*r01*x7489))+(((-1.0)*px))+(((-1.0)*r00*x7490))+(((-0.10915)*x7485)));
evalcond[3]=((((0.10915)*x7486))+(((-1.0)*py))+(((-1.0)*r10*x7490))+(((-1.0)*r11*x7489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7491=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7491;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7492=((1.0)*cj5);
IkReal x7493=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7492)));
j4eval[0]=x7493;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7492))))));
j4eval[2]=IKsign(x7493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7494=cj5*cj5;
IkReal x7495=r21*r21;
IkReal x7496=(r21*sj5);
IkReal x7497=(cj5*r20);
IkReal x7498=((((-2.0)*x7496*x7497))+(r22*r22)+(((-1.0)*x7494*x7495))+x7495+((x7494*(r20*r20))));
j4eval[0]=x7498;
j4eval[1]=IKsign(x7498);
j4eval[2]=((IKabs(((((-1.0)*x7497))+x7496)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7499=cj5*cj5;
IkReal x7500=r21*r21;
IkReal x7501=(r21*sj5);
IkReal x7502=(cj5*r20);
CheckValue<IkReal> x7503 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7502))+x7501)),IKFAST_ATAN2_MAGTHRESH);
if(!x7503.valid){
continue;
}
CheckValue<IkReal> x7504=IKPowWithIntegerCheck(IKsign((((x7499*(r20*r20)))+(r22*r22)+(((-2.0)*x7501*x7502))+(((-1.0)*x7499*x7500))+x7500)),-1);
if(!x7504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7503.value)+(((1.5707963267949)*(x7504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7505=IKsin(j4);
IkReal x7506=IKcos(j4);
IkReal x7507=(r11*sj5);
IkReal x7508=(r21*sj5);
IkReal x7509=(cj5*r00);
IkReal x7510=(cj5*r20);
IkReal x7511=(r01*sj5);
IkReal x7512=(cj5*r10);
IkReal x7513=((1.0)*x7506);
IkReal x7514=((1.0)*x7505);
evalcond[0]=(((x7505*x7508))+(((-1.0)*x7510*x7514))+(((-1.0)*r22*x7513)));
evalcond[1]=(((x7506*x7509))+(((-1.0)*x7511*x7513))+(((-1.0)*r02*x7514)));
evalcond[2]=(((x7506*x7512))+(((-1.0)*x7507*x7513))+(((-1.0)*r12*x7514)));
evalcond[3]=(((x7505*x7507))+cj0+(((-1.0)*x7512*x7514))+(((-1.0)*r12*x7513)));
evalcond[4]=((1.0)+((x7506*x7510))+(((-1.0)*x7508*x7513))+(((-1.0)*r22*x7514)));
evalcond[5]=((((-1.0)*sj0))+((x7505*x7511))+(((-1.0)*x7509*x7514))+(((-1.0)*r02*x7513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7515=((1.0)*cj5);
CheckValue<IkReal> x7516=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7515))+(((-1.0)*r00*sj5)))),-1);
if(!x7516.valid){
continue;
}
CheckValue<IkReal> x7517 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7516.value)))+(x7517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7518=IKsin(j4);
IkReal x7519=IKcos(j4);
IkReal x7520=(r11*sj5);
IkReal x7521=(r21*sj5);
IkReal x7522=(cj5*r00);
IkReal x7523=(cj5*r20);
IkReal x7524=(r01*sj5);
IkReal x7525=(cj5*r10);
IkReal x7526=((1.0)*x7519);
IkReal x7527=((1.0)*x7518);
evalcond[0]=(((x7518*x7521))+(((-1.0)*x7523*x7527))+(((-1.0)*r22*x7526)));
evalcond[1]=(((x7519*x7522))+(((-1.0)*r02*x7527))+(((-1.0)*x7524*x7526)));
evalcond[2]=(((x7519*x7525))+(((-1.0)*x7520*x7526))+(((-1.0)*r12*x7527)));
evalcond[3]=(((x7518*x7520))+cj0+(((-1.0)*x7525*x7527))+(((-1.0)*r12*x7526)));
evalcond[4]=((1.0)+((x7519*x7523))+(((-1.0)*x7521*x7526))+(((-1.0)*r22*x7527)));
evalcond[5]=(((x7518*x7524))+(((-1.0)*sj0))+(((-1.0)*x7522*x7527))+(((-1.0)*r02*x7526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7528 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7528.valid){
continue;
}
CheckValue<IkReal> x7529=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7528.value)+(((1.5707963267949)*(x7529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7530=IKsin(j4);
IkReal x7531=IKcos(j4);
IkReal x7532=(r11*sj5);
IkReal x7533=(r21*sj5);
IkReal x7534=(cj5*r00);
IkReal x7535=(cj5*r20);
IkReal x7536=(r01*sj5);
IkReal x7537=(cj5*r10);
IkReal x7538=((1.0)*x7531);
IkReal x7539=((1.0)*x7530);
evalcond[0]=(((x7530*x7533))+(((-1.0)*r22*x7538))+(((-1.0)*x7535*x7539)));
evalcond[1]=(((x7531*x7534))+(((-1.0)*x7536*x7538))+(((-1.0)*r02*x7539)));
evalcond[2]=((((-1.0)*x7532*x7538))+(((-1.0)*r12*x7539))+((x7531*x7537)));
evalcond[3]=(cj0+(((-1.0)*r12*x7538))+((x7530*x7532))+(((-1.0)*x7537*x7539)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7539))+((x7531*x7535))+(((-1.0)*x7533*x7538)));
evalcond[5]=((((-1.0)*sj0))+((x7530*x7536))+(((-1.0)*x7534*x7539))+(((-1.0)*r02*x7538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7540=IKcos(j0);
IkReal x7541=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x7541))+(((-0.39225)*x7540)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x7540))+(((-0.39225)*x7541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7542=((1.0)*cj5);
IkReal x7543=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7542)));
j4eval[0]=x7543;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7542)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7544=cj5*cj5;
IkReal x7545=((1.0)*r21);
IkReal x7546=(cj5*sj5);
IkReal x7547=((1.0)*r20);
IkReal x7548=((((-1.0)*r01*x7544*x7545))+((r00*r20*x7544))+((r01*r21))+(((-1.0)*r01*x7546*x7547))+(((-1.0)*r00*x7545*x7546))+((r02*r22)));
j4eval[0]=x7548;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7547))))));
j4eval[2]=IKsign(x7548);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7549=cj5*cj5;
IkReal x7550=(r21*sj5);
IkReal x7551=(r11*r21);
IkReal x7552=((1.0)*cj5*r20);
IkReal x7553=((((-1.0)*x7549*x7551))+(((-1.0)*r11*sj5*x7552))+((r10*r20*x7549))+((r12*r22))+x7551+(((-1.0)*cj5*r10*x7550)));
j4eval[0]=x7553;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7550))+(((-1.0)*sj0*x7552))))));
j4eval[2]=IKsign(x7553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7554=cj5*cj5;
IkReal x7555=(r21*sj5);
IkReal x7556=(r11*r21);
IkReal x7557=((1.0)*cj5*r20);
CheckValue<IkReal> x7558 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7555))+(((-1.0)*sj0*x7557)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7558.valid){
continue;
}
CheckValue<IkReal> x7559=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7557))+((r10*r20*x7554))+((r12*r22))+(((-1.0)*x7554*x7556))+x7556+(((-1.0)*cj5*r10*x7555)))),-1);
if(!x7559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7558.value)+(((1.5707963267949)*(x7559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7560=IKsin(j4);
IkReal x7561=IKcos(j4);
IkReal x7562=(r11*sj5);
IkReal x7563=(cj5*r00);
IkReal x7564=(cj5*r10);
IkReal x7565=(r21*sj5);
IkReal x7566=(cj5*r20);
IkReal x7567=(r01*sj5);
IkReal x7568=((1.0)*x7561);
IkReal x7569=((1.0)*x7560);
evalcond[0]=((((-1.0)*r22*x7568))+(((-1.0)*x7566*x7569))+((x7560*x7565)));
evalcond[1]=((((-1.0)*x7565*x7568))+(((-1.0)*r22*x7569))+((x7561*x7566)));
evalcond[2]=(cj0+(((-1.0)*x7564*x7569))+((x7560*x7562))+(((-1.0)*r12*x7568)));
evalcond[3]=((((-1.0)*r02*x7569))+cj0+(((-1.0)*x7567*x7568))+((x7561*x7563)));
evalcond[4]=((((-1.0)*x7562*x7568))+sj0+(((-1.0)*r12*x7569))+((x7561*x7564)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7563*x7569))+(((-1.0)*r02*x7568))+((x7560*x7567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7570=cj5*cj5;
IkReal x7571=((1.0)*r21);
IkReal x7572=(cj5*sj5);
IkReal x7573=((1.0)*r20);
CheckValue<IkReal> x7574 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7574.valid){
continue;
}
CheckValue<IkReal> x7575=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x7570))+(((-1.0)*r01*x7572*x7573))+((r02*r22))+(((-1.0)*r00*x7571*x7572))+(((-1.0)*r01*x7570*x7571)))),-1);
if(!x7575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7574.value)+(((1.5707963267949)*(x7575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7576=IKsin(j4);
IkReal x7577=IKcos(j4);
IkReal x7578=(r11*sj5);
IkReal x7579=(cj5*r00);
IkReal x7580=(cj5*r10);
IkReal x7581=(r21*sj5);
IkReal x7582=(cj5*r20);
IkReal x7583=(r01*sj5);
IkReal x7584=((1.0)*x7577);
IkReal x7585=((1.0)*x7576);
evalcond[0]=(((x7576*x7581))+(((-1.0)*r22*x7584))+(((-1.0)*x7582*x7585)));
evalcond[1]=((((-1.0)*r22*x7585))+(((-1.0)*x7581*x7584))+((x7577*x7582)));
evalcond[2]=(cj0+((x7576*x7578))+(((-1.0)*x7580*x7585))+(((-1.0)*r12*x7584)));
evalcond[3]=(cj0+(((-1.0)*r02*x7585))+((x7577*x7579))+(((-1.0)*x7583*x7584)));
evalcond[4]=(sj0+(((-1.0)*r12*x7585))+((x7577*x7580))+(((-1.0)*x7578*x7584)));
evalcond[5]=((((-1.0)*sj0))+((x7576*x7583))+(((-1.0)*r02*x7584))+(((-1.0)*x7579*x7585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7586=((1.0)*cj5);
CheckValue<IkReal> x7587 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7586))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7587.valid){
continue;
}
CheckValue<IkReal> x7588=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7586))+(((-1.0)*r00*sj5)))),-1);
if(!x7588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7587.value)+(((1.5707963267949)*(x7588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7589=IKsin(j4);
IkReal x7590=IKcos(j4);
IkReal x7591=(r11*sj5);
IkReal x7592=(cj5*r00);
IkReal x7593=(cj5*r10);
IkReal x7594=(r21*sj5);
IkReal x7595=(cj5*r20);
IkReal x7596=(r01*sj5);
IkReal x7597=((1.0)*x7590);
IkReal x7598=((1.0)*x7589);
evalcond[0]=(((x7589*x7594))+(((-1.0)*x7595*x7598))+(((-1.0)*r22*x7597)));
evalcond[1]=((((-1.0)*r22*x7598))+(((-1.0)*x7594*x7597))+((x7590*x7595)));
evalcond[2]=(cj0+(((-1.0)*r12*x7597))+((x7589*x7591))+(((-1.0)*x7593*x7598)));
evalcond[3]=(cj0+(((-1.0)*x7596*x7597))+(((-1.0)*r02*x7598))+((x7590*x7592)));
evalcond[4]=(sj0+(((-1.0)*x7591*x7597))+(((-1.0)*r12*x7598))+((x7590*x7593)));
evalcond[5]=((((-1.0)*x7592*x7598))+(((-1.0)*sj0))+((x7589*x7596))+(((-1.0)*r02*x7597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7599=cj1*cj1;
IkReal x7600=(cj1*sj1);
IkReal x7601=(cj1*sj2);
IkReal x7602=(r00*sj5);
IkReal x7603=(cj2*sj1);
IkReal x7604=(cj5*r01);
IkReal x7605=((20000.0)*py);
IkReal x7606=((1893.0)*r10*sj5);
IkReal x7607=((1893.0)*cj5*r11);
IkReal x7608=(sj2*x7599);
CheckValue<IkReal> x7609=IKPowWithIntegerCheck(((((7845.0)*x7600))+(((-15690.0)*cj2*x7608))+(((-15690.0)*x7600*(cj2*cj2)))+(((-8500.0)*x7608))+(((7845.0)*cj2*sj2))+(((-8500.0)*cj2*x7600))),-1);
if(!x7609.valid){
continue;
}
CheckValue<IkReal> x7610=IKPowWithIntegerCheck(((((-1.0)*x7601))+(((-1.0)*x7603))),-1);
if(!x7610.valid){
continue;
}
if( IKabs(((x7609.value)*(((((-1.0)*x7601*x7607))+(((-1.0)*x7601*x7606))+(((-1.0)*x7601*x7605))+(((-1.0)*x7603*x7605))+(((-1.0)*x7603*x7606))+(((-1.0)*x7603*x7607))+(((-2183.0)*x7602))+(((-2183.0)*x7604)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7610.value)*((x7604+x7602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7609.value)*(((((-1.0)*x7601*x7607))+(((-1.0)*x7601*x7606))+(((-1.0)*x7601*x7605))+(((-1.0)*x7603*x7605))+(((-1.0)*x7603*x7606))+(((-1.0)*x7603*x7607))+(((-2183.0)*x7602))+(((-2183.0)*x7604))))))+IKsqr(((x7610.value)*((x7604+x7602))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7609.value)*(((((-1.0)*x7601*x7607))+(((-1.0)*x7601*x7606))+(((-1.0)*x7601*x7605))+(((-1.0)*x7603*x7605))+(((-1.0)*x7603*x7606))+(((-1.0)*x7603*x7607))+(((-2183.0)*x7602))+(((-2183.0)*x7604))))), ((x7610.value)*((x7604+x7602))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7611=IKcos(j0);
IkReal x7612=IKsin(j0);
IkReal x7613=((1.0)*cj1);
IkReal x7614=((0.39225)*sj1);
IkReal x7615=(cj5*r11);
IkReal x7616=((1.0)*sj5);
IkReal x7617=(cj5*r01);
IkReal x7618=((1.0)*sj1);
IkReal x7619=((0.09465)*sj5);
IkReal x7620=((0.39225)*cj1);
IkReal x7621=((0.425)*cj1);
IkReal x7622=(sj2*x7611);
IkReal x7623=(sj2*x7612);
IkReal x7624=(cj2*x7611);
IkReal x7625=(cj2*x7612);
evalcond[0]=((((-1.0)*r00*x7616))+(((-1.0)*x7617))+(((-1.0)*x7618*x7624))+(((-1.0)*x7613*x7622)));
evalcond[1]=((((-1.0)*x7615))+(((-1.0)*x7618*x7625))+(((-1.0)*r10*x7616))+(((-1.0)*x7613*x7623)));
evalcond[2]=((((-0.10915)*x7612))+(((-1.0)*x7614*x7622))+((x7620*x7624))+(((-0.09465)*x7617))+(((-1.0)*px))+(((-1.0)*r00*x7619))+((x7611*x7621)));
evalcond[3]=((((-1.0)*x7614*x7623))+((x7620*x7625))+(((-0.09465)*x7615))+(((-1.0)*py))+((x7612*x7621))+(((0.10915)*x7611))+(((-1.0)*r10*x7619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7626=((1.0)*cj5);
IkReal x7627=((((-1.0)*r01*x7626))+(((-1.0)*r00*sj5)));
j4eval[0]=x7627;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7626)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7628=((1.0)*cj5);
IkReal x7629=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7628)));
j4eval[0]=x7629;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7628))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7629);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7630=((1.0)*sj0);
IkReal x7631=((1.0)*cj0);
IkReal x7632=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7632;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x7630))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x7631)))))+(IKabs(((((-1.0)*r02*x7631))+(((-1.0)*r12*x7630))))));
j4eval[2]=IKsign(x7632);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7633=((-1.0)*r20);
IkReal x7635 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7635)==0){
continue;
}
IkReal x7634=pow(x7635,-0.5);
CheckValue<IkReal> x7636 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7633),IKFAST_ATAN2_MAGTHRESH);
if(!x7636.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7636.value));
IkReal gconst133=(r21*x7634);
IkReal gconst134=(x7633*x7634);
CheckValue<IkReal> x7637 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7637.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7637.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7638=((-1.0)*r20);
IkReal x7639=x7634;
CheckValue<IkReal> x7641 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7638),IKFAST_ATAN2_MAGTHRESH);
if(!x7641.valid){
continue;
}
IkReal x7640=((-1.0)*(x7641.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7640;
IkReal gconst132=x7640;
IkReal gconst133=(r21*x7639);
IkReal gconst134=(x7638*x7639);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7642=((-1.0)*r20);
IkReal x7643=x7634;
CheckValue<IkReal> x7645 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7642),IKFAST_ATAN2_MAGTHRESH);
if(!x7645.valid){
continue;
}
IkReal x7644=((-1.0)*(x7645.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7644;
IkReal gconst132=x7644;
IkReal gconst133=(r21*x7643);
IkReal gconst134=(x7642*x7643);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7646=((-1.0)*r20);
IkReal x7647=x7634;
CheckValue<IkReal> x7649 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7646),IKFAST_ATAN2_MAGTHRESH);
if(!x7649.valid){
continue;
}
IkReal x7648=((-1.0)*(x7649.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7648;
IkReal gconst132=x7648;
IkReal gconst133=(r21*x7647);
IkReal gconst134=(x7646*x7647);
IkReal x7650=r22*r22;
CheckValue<IkReal> x7653=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7650))),-1);
if(!x7653.valid){
continue;
}
IkReal x7651=x7653.value;
IkReal x7652=((((2.0)*x7651*(r20*r20)*(r21*r21)))+((x7651*(r20*r20*r20*r20)))+((x7651*(r21*r21*r21*r21)))+x7650);
j4eval[0]=x7652;
j4eval[1]=IKsign(x7652);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7654=(gconst133*r21);
IkReal x7655=(cj1*sj2);
IkReal x7656=(gconst134*r20);
IkReal x7657=(cj2*sj1);
CheckValue<IkReal> x7658=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7656*x7656)+(((-2.0)*x7654*x7656))+(x7654*x7654))),-1);
if(!x7658.valid){
continue;
}
CheckValue<IkReal> x7659 = IKatan2WithCheck(IkReal((((r22*x7655))+((r22*x7657)))),IkReal(((((-1.0)*x7656*x7657))+((x7654*x7655))+((x7654*x7657))+(((-1.0)*x7655*x7656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7658.value)))+(x7659.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7660=IKsin(j4);
IkReal x7661=IKcos(j4);
IkReal x7662=(sj1*sj2);
IkReal x7663=(gconst133*r11);
IkReal x7664=(gconst133*r21);
IkReal x7665=(gconst133*r01);
IkReal x7666=((1.0)*x7661);
IkReal x7667=(gconst134*x7661);
IkReal x7668=((1.0)*x7660);
IkReal x7669=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7668))+(((-1.0)*r22*x7666))+((x7660*x7664)));
evalcond[1]=((((-1.0)*gconst134*r10*x7668))+(((-1.0)*r12*x7666))+cj0+((x7660*x7663)));
evalcond[2]=((((-1.0)*sj0))+((x7660*x7665))+(((-1.0)*r02*x7666))+(((-1.0)*gconst134*r00*x7668)));
evalcond[3]=(((cj2*sj1))+((r20*x7667))+((cj1*sj2))+(((-1.0)*r22*x7668))+(((-1.0)*x7664*x7666)));
evalcond[4]=((((-1.0)*cj0*x7669))+((r00*x7667))+(((-1.0)*r02*x7668))+((cj0*x7662))+(((-1.0)*x7665*x7666)));
evalcond[5]=((((-1.0)*r12*x7668))+((r10*x7667))+(((-1.0)*x7663*x7666))+((sj0*x7662))+(((-1.0)*sj0*x7669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7670=((1.0)*gconst134);
CheckValue<IkReal> x7671=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7670)))),-1);
if(!x7671.valid){
continue;
}
CheckValue<IkReal> x7672 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7670))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7671.value)))+(x7672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7673=IKsin(j4);
IkReal x7674=IKcos(j4);
IkReal x7675=(sj1*sj2);
IkReal x7676=(gconst133*r11);
IkReal x7677=(gconst133*r21);
IkReal x7678=(gconst133*r01);
IkReal x7679=((1.0)*x7674);
IkReal x7680=(gconst134*x7674);
IkReal x7681=((1.0)*x7673);
IkReal x7682=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7681))+((x7673*x7677))+(((-1.0)*r22*x7679)));
evalcond[1]=((((-1.0)*gconst134*r10*x7681))+cj0+(((-1.0)*r12*x7679))+((x7673*x7676)));
evalcond[2]=((((-1.0)*gconst134*r00*x7681))+(((-1.0)*sj0))+(((-1.0)*r02*x7679))+((x7673*x7678)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7681))+((r20*x7680))+(((-1.0)*x7677*x7679)));
evalcond[4]=((((-1.0)*cj0*x7682))+(((-1.0)*x7678*x7679))+((r00*x7680))+((cj0*x7675))+(((-1.0)*r02*x7681)));
evalcond[5]=(((sj0*x7675))+((r10*x7680))+(((-1.0)*r12*x7681))+(((-1.0)*x7676*x7679))+(((-1.0)*sj0*x7682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7683=((1.0)*gconst134);
CheckValue<IkReal> x7684=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7683)))),-1);
if(!x7684.valid){
continue;
}
CheckValue<IkReal> x7685 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*r20*x7683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7684.value)))+(x7685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7686=IKsin(j4);
IkReal x7687=IKcos(j4);
IkReal x7688=(sj1*sj2);
IkReal x7689=(gconst133*r11);
IkReal x7690=(gconst133*r21);
IkReal x7691=(gconst133*r01);
IkReal x7692=((1.0)*x7687);
IkReal x7693=(gconst134*x7687);
IkReal x7694=((1.0)*x7686);
IkReal x7695=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7694))+((x7686*x7690))+(((-1.0)*r22*x7692)));
evalcond[1]=((((-1.0)*gconst134*r10*x7694))+cj0+((x7686*x7689))+(((-1.0)*r12*x7692)));
evalcond[2]=((((-1.0)*r02*x7692))+(((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7694))+((x7686*x7691)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7694))+((r20*x7693))+(((-1.0)*x7690*x7692)));
evalcond[4]=((((-1.0)*x7691*x7692))+(((-1.0)*r02*x7694))+(((-1.0)*cj0*x7695))+((cj0*x7688))+((r00*x7693)));
evalcond[5]=(((sj0*x7688))+((r10*x7693))+(((-1.0)*r12*x7694))+(((-1.0)*sj0*x7695))+(((-1.0)*x7689*x7692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7696=((-1.0)*r21);
IkReal x7698 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7698)==0){
continue;
}
IkReal x7697=pow(x7698,-0.5);
CheckValue<IkReal> x7699 = IKatan2WithCheck(IkReal(x7696),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7699.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7699.value))));
IkReal gconst136=(x7696*x7697);
IkReal gconst137=((1.0)*r20*x7697);
CheckValue<IkReal> x7700 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7700.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7700.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7701=((-1.0)*r21);
CheckValue<IkReal> x7704 = IKatan2WithCheck(IkReal(x7701),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7704.valid){
continue;
}
IkReal x7702=((1.0)*(x7704.value));
IkReal x7703=x7697;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7702)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7702)));
IkReal gconst136=(x7701*x7703);
IkReal gconst137=((1.0)*r20*x7703);
IkReal x7705=r22*r22;
IkReal x7706=((1.0)*x7705);
CheckValue<IkReal> x7710=IKPowWithIntegerCheck(((-1.0)+x7705),-1);
if(!x7710.valid){
continue;
}
IkReal x7707=x7710.value;
if((((1.0)+(((-1.0)*x7706)))) < -0.00001)
continue;
IkReal x7708=IKsqrt(((1.0)+(((-1.0)*x7706))));
IkReal x7709=(cj0*x7707*x7708);
j4eval[0]=((IKabs(((((-1.0)*x7706*x7709))+x7709)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7711=((-1.0)*r21);
CheckValue<IkReal> x7714 = IKatan2WithCheck(IkReal(x7711),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7714.valid){
continue;
}
IkReal x7712=((1.0)*(x7714.value));
IkReal x7713=x7697;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7712)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7712)));
IkReal gconst136=(x7711*x7713);
IkReal gconst137=((1.0)*r20*x7713);
IkReal x7715=r22*r22;
IkReal x7716=((1.0)*x7715);
CheckValue<IkReal> x7720=IKPowWithIntegerCheck(((-1.0)+x7715),-1);
if(!x7720.valid){
continue;
}
IkReal x7717=x7720.value;
if((((1.0)+(((-1.0)*x7716)))) < -0.00001)
continue;
IkReal x7718=IKsqrt(((1.0)+(((-1.0)*x7716))));
IkReal x7719=(sj0*x7717*x7718);
j4eval[0]=((IKabs(((((-1.0)*x7716*x7719))+x7719)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7721=((-1.0)*r21);
CheckValue<IkReal> x7724 = IKatan2WithCheck(IkReal(x7721),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7724.valid){
continue;
}
IkReal x7722=((1.0)*(x7724.value));
IkReal x7723=x7697;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7722)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7722)));
IkReal gconst136=(x7721*x7723);
IkReal gconst137=((1.0)*r20*x7723);
IkReal x7725=r22*r22;
IkReal x7726=(r12*sj0);
IkReal x7727=(cj0*r02);
CheckValue<IkReal> x7731=IKPowWithIntegerCheck(((-1.0)+x7725),-1);
if(!x7731.valid){
continue;
}
IkReal x7728=x7731.value;
if((((1.0)+(((-1.0)*x7725)))) < -0.00001)
continue;
IkReal x7729=IKsqrt(((1.0)+(((-1.0)*x7725))));
IkReal x7730=(r22*x7728*x7729);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7726*x7730))+((x7727*x7730)))))+(IKabs(((((-1.0)*x7727))+(((-1.0)*x7726))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7732=((1.0)*sj0);
IkReal x7733=((1.0)*cj0);
CheckValue<IkReal> x7734=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7734.valid){
continue;
}
CheckValue<IkReal> x7735 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7732))+(((-1.0)*r02*x7733)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x7733))+(((-1.0)*gconst136*r11*x7732))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7734.value)))+(x7735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7736=IKsin(j4);
IkReal x7737=IKcos(j4);
IkReal x7738=(gconst136*r01);
IkReal x7739=(gconst137*r10);
IkReal x7740=(sj1*sj2);
IkReal x7741=(gconst137*r20);
IkReal x7742=(gconst136*r11);
IkReal x7743=(gconst136*r21);
IkReal x7744=(gconst137*r00);
IkReal x7745=((1.0)*x7737);
IkReal x7746=((1.0)*cj1*cj2);
IkReal x7747=((1.0)*x7736);
evalcond[0]=((((-1.0)*r22*x7745))+(((-1.0)*x7741*x7747))+((x7736*x7743)));
evalcond[1]=(cj0+(((-1.0)*x7739*x7747))+(((-1.0)*r12*x7745))+((x7736*x7742)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7744*x7747))+(((-1.0)*r02*x7745))+((x7736*x7738)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7747))+((cj1*sj2))+((x7737*x7741))+(((-1.0)*x7743*x7745)));
evalcond[4]=((((-1.0)*r02*x7747))+((x7737*x7744))+(((-1.0)*cj0*x7746))+(((-1.0)*x7738*x7745))+((cj0*x7740)));
evalcond[5]=((((-1.0)*x7742*x7745))+((sj0*x7740))+(((-1.0)*r12*x7747))+((x7737*x7739))+(((-1.0)*sj0*x7746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7748=((1.0)*gconst137);
CheckValue<IkReal> x7749=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7748)))),-1);
if(!x7749.valid){
continue;
}
CheckValue<IkReal> x7750 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7748))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7749.value)))+(x7750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7751=IKsin(j4);
IkReal x7752=IKcos(j4);
IkReal x7753=(gconst136*r01);
IkReal x7754=(gconst137*r10);
IkReal x7755=(sj1*sj2);
IkReal x7756=(gconst137*r20);
IkReal x7757=(gconst136*r11);
IkReal x7758=(gconst136*r21);
IkReal x7759=(gconst137*r00);
IkReal x7760=((1.0)*x7752);
IkReal x7761=((1.0)*cj1*cj2);
IkReal x7762=((1.0)*x7751);
evalcond[0]=((((-1.0)*r22*x7760))+(((-1.0)*x7756*x7762))+((x7751*x7758)));
evalcond[1]=((((-1.0)*x7754*x7762))+cj0+(((-1.0)*r12*x7760))+((x7751*x7757)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7760))+(((-1.0)*x7759*x7762))+((x7751*x7753)));
evalcond[3]=(((cj2*sj1))+((x7752*x7756))+(((-1.0)*r22*x7762))+((cj1*sj2))+(((-1.0)*x7758*x7760)));
evalcond[4]=(((x7752*x7759))+(((-1.0)*r02*x7762))+(((-1.0)*cj0*x7761))+((cj0*x7755))+(((-1.0)*x7753*x7760)));
evalcond[5]=(((x7752*x7754))+(((-1.0)*x7757*x7760))+((sj0*x7755))+(((-1.0)*sj0*x7761))+(((-1.0)*r12*x7762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7763=((1.0)*gconst137);
CheckValue<IkReal> x7764 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x7763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7764.valid){
continue;
}
CheckValue<IkReal> x7765=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7763))+(((-1.0)*gconst136*r00)))),-1);
if(!x7765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7764.value)+(((1.5707963267949)*(x7765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7766=IKsin(j4);
IkReal x7767=IKcos(j4);
IkReal x7768=(gconst136*r01);
IkReal x7769=(gconst137*r10);
IkReal x7770=(sj1*sj2);
IkReal x7771=(gconst137*r20);
IkReal x7772=(gconst136*r11);
IkReal x7773=(gconst136*r21);
IkReal x7774=(gconst137*r00);
IkReal x7775=((1.0)*x7767);
IkReal x7776=((1.0)*cj1*cj2);
IkReal x7777=((1.0)*x7766);
evalcond[0]=((((-1.0)*x7771*x7777))+(((-1.0)*r22*x7775))+((x7766*x7773)));
evalcond[1]=((((-1.0)*x7769*x7777))+cj0+(((-1.0)*r12*x7775))+((x7766*x7772)));
evalcond[2]=(((x7766*x7768))+(((-1.0)*r02*x7775))+(((-1.0)*sj0))+(((-1.0)*x7774*x7777)));
evalcond[3]=(((cj2*sj1))+((x7767*x7771))+(((-1.0)*r22*x7777))+((cj1*sj2))+(((-1.0)*x7773*x7775)));
evalcond[4]=((((-1.0)*r02*x7777))+((x7767*x7774))+(((-1.0)*x7768*x7775))+(((-1.0)*cj0*x7776))+((cj0*x7770)));
evalcond[5]=(((x7767*x7769))+(((-1.0)*x7772*x7775))+((sj0*x7770))+(((-1.0)*sj0*x7776))+(((-1.0)*r12*x7777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7778=((-1.0)*r10);
IkReal x7780 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7780)==0){
continue;
}
IkReal x7779=pow(x7780,-0.5);
CheckValue<IkReal> x7781 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7778),IKFAST_ATAN2_MAGTHRESH);
if(!x7781.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7781.value));
IkReal gconst139=(r11*x7779);
IkReal gconst140=(x7778*x7779);
CheckValue<IkReal> x7782 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7782.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7782.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7783=((-1.0)*r10);
IkReal x7784=x7779;
CheckValue<IkReal> x7786 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7783),IKFAST_ATAN2_MAGTHRESH);
if(!x7786.valid){
continue;
}
IkReal x7785=((-1.0)*(x7786.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7785;
IkReal gconst138=x7785;
IkReal gconst139=(r11*x7784);
IkReal gconst140=(x7783*x7784);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7787=((1.0)*sj0);
IkReal x7788=((1.0)*gconst139);
CheckValue<IkReal> x7789=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7788)))),-1);
if(!x7789.valid){
continue;
}
CheckValue<IkReal> x7790 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7787)))),IkReal(((((-1.0)*gconst139*r11*x7787))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7788))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7789.value)))+(x7790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7791=IKsin(j4);
IkReal x7792=IKcos(j4);
IkReal x7793=(gconst140*r00);
IkReal x7794=(sj1*sj2);
IkReal x7795=(gconst139*r11);
IkReal x7796=(gconst139*r01);
IkReal x7797=(gconst139*r21);
IkReal x7798=((1.0)*x7792);
IkReal x7799=((1.0)*x7791);
IkReal x7800=((1.0)*cj1*cj2);
IkReal x7801=(gconst140*x7792);
evalcond[0]=((((-1.0)*r22*x7798))+((x7791*x7797))+(((-1.0)*gconst140*r20*x7799)));
evalcond[1]=(cj0+(((-1.0)*r12*x7798))+(((-1.0)*gconst140*r10*x7799))+((x7791*x7795)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7793*x7799))+(((-1.0)*r02*x7798))+((x7791*x7796)));
evalcond[3]=((((-1.0)*r22*x7799))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7797*x7798))+((r20*x7801)));
evalcond[4]=(((x7792*x7793))+((cj0*x7794))+(((-1.0)*r02*x7799))+(((-1.0)*cj0*x7800))+(((-1.0)*x7796*x7798)));
evalcond[5]=((((-1.0)*sj0*x7800))+(((-1.0)*r12*x7799))+(((-1.0)*x7795*x7798))+((sj0*x7794))+((r10*x7801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7802=((1.0)*gconst140);
CheckValue<IkReal> x7803=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7802)))),-1);
if(!x7803.valid){
continue;
}
CheckValue<IkReal> x7804 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7802))+((cj0*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7803.value)))+(x7804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7805=IKsin(j4);
IkReal x7806=IKcos(j4);
IkReal x7807=(gconst140*r00);
IkReal x7808=(sj1*sj2);
IkReal x7809=(gconst139*r11);
IkReal x7810=(gconst139*r01);
IkReal x7811=(gconst139*r21);
IkReal x7812=((1.0)*x7806);
IkReal x7813=((1.0)*x7805);
IkReal x7814=((1.0)*cj1*cj2);
IkReal x7815=(gconst140*x7806);
evalcond[0]=((((-1.0)*r22*x7812))+((x7805*x7811))+(((-1.0)*gconst140*r20*x7813)));
evalcond[1]=((((-1.0)*gconst140*r10*x7813))+cj0+(((-1.0)*r12*x7812))+((x7805*x7809)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7812))+(((-1.0)*x7807*x7813))+((x7805*x7810)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7811*x7812))+((r20*x7815))+((cj1*sj2))+(((-1.0)*r22*x7813)));
evalcond[4]=(((cj0*x7808))+(((-1.0)*r02*x7813))+((x7806*x7807))+(((-1.0)*x7810*x7812))+(((-1.0)*cj0*x7814)));
evalcond[5]=(((r10*x7815))+((sj0*x7808))+(((-1.0)*r12*x7813))+(((-1.0)*sj0*x7814))+(((-1.0)*x7809*x7812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7816=((-1.0)*r11);
IkReal x7818 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7818)==0){
continue;
}
IkReal x7817=pow(x7818,-0.5);
CheckValue<IkReal> x7819 = IKatan2WithCheck(IkReal(x7816),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7819.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7819.value))));
IkReal gconst142=(x7816*x7817);
IkReal gconst143=((1.0)*r10*x7817);
CheckValue<IkReal> x7820 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7820.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7820.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7821=((-1.0)*r11);
CheckValue<IkReal> x7824 = IKatan2WithCheck(IkReal(x7821),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7824.valid){
continue;
}
IkReal x7822=((1.0)*(x7824.value));
IkReal x7823=x7817;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7822)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7822)));
IkReal gconst142=(x7821*x7823);
IkReal gconst143=((1.0)*r10*x7823);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7825=((-1.0)*r11);
CheckValue<IkReal> x7828 = IKatan2WithCheck(IkReal(x7825),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7828.valid){
continue;
}
IkReal x7826=((1.0)*(x7828.value));
IkReal x7827=x7817;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7826)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7826)));
IkReal gconst142=(x7825*x7827);
IkReal gconst143=((1.0)*r10*x7827);
IkReal x7829=r12*r12;
IkReal x7830=((1.0)*sj0);
IkReal x7831=(cj0*r02);
IkReal x7832=x7817;
j4eval[0]=((IKabs((((sj0*x7829*x7832))+((r12*x7831*x7832))+(((-1.0)*x7830*x7832)))))+(IKabs(((((-1.0)*x7831))+(((-1.0)*r12*x7830))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7833=((-1.0)*r11);
CheckValue<IkReal> x7836 = IKatan2WithCheck(IkReal(x7833),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7836.valid){
continue;
}
IkReal x7834=((1.0)*(x7836.value));
IkReal x7835=x7817;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7834)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7834)));
IkReal gconst142=(x7833*x7835);
IkReal gconst143=((1.0)*r10*x7835);
IkReal x7837=r12*r12;
IkReal x7838=(cj1*r22*sj2);
IkReal x7839=(cj2*r22*sj1);
CheckValue<IkReal> x7843=IKPowWithIntegerCheck(((-1.0)+x7837),-1);
if(!x7843.valid){
continue;
}
IkReal x7840=x7843.value;
if((((1.0)+(((-1.0)*x7837)))) < -0.00001)
continue;
IkReal x7841=IKsqrt(((1.0)+(((-1.0)*x7837))));
IkReal x7842=((1.0)*r12*x7840*x7841);
j4eval[0]=((IKabs((x7838+x7839)))+(IKabs(((((-1.0)*x7838*x7842))+(((-1.0)*x7839*x7842))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7844=(gconst142*r21);
IkReal x7845=(cj1*sj2);
IkReal x7846=(cj2*sj1);
IkReal x7847=(gconst143*r20);
CheckValue<IkReal> x7848=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7844*x7847))+(r22*r22)+(x7844*x7844)+(x7847*x7847))),-1);
if(!x7848.valid){
continue;
}
CheckValue<IkReal> x7849 = IKatan2WithCheck(IkReal((((r22*x7845))+((r22*x7846)))),IkReal(((((-1.0)*x7845*x7847))+((x7844*x7845))+((x7844*x7846))+(((-1.0)*x7846*x7847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7848.value)))+(x7849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7850=IKsin(j4);
IkReal x7851=IKcos(j4);
IkReal x7852=(sj1*sj2);
IkReal x7853=(gconst143*r20);
IkReal x7854=((1.0)*x7851);
IkReal x7855=((1.0)*cj1*cj2);
IkReal x7856=((1.0)*x7850);
IkReal x7857=(gconst142*x7850);
IkReal x7858=(gconst143*x7851);
evalcond[0]=(((r21*x7857))+(((-1.0)*x7853*x7856))+(((-1.0)*r22*x7854)));
evalcond[1]=(((r11*x7857))+cj0+(((-1.0)*gconst143*r10*x7856))+(((-1.0)*r12*x7854)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7857))+(((-1.0)*r02*x7854))+(((-1.0)*gconst143*r00*x7856)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7854))+((x7851*x7853))+(((-1.0)*r22*x7856)));
evalcond[4]=((((-1.0)*cj0*x7855))+((cj0*x7852))+((r00*x7858))+(((-1.0)*r02*x7856))+(((-1.0)*gconst142*r01*x7854)));
evalcond[5]=((((-1.0)*sj0*x7855))+((sj0*x7852))+(((-1.0)*gconst142*r11*x7854))+((r10*x7858))+(((-1.0)*r12*x7856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7859=((1.0)*sj0);
IkReal x7860=((1.0)*gconst142);
CheckValue<IkReal> x7861 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7859)))),IkReal(((((-1.0)*gconst142*r11*x7859))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7860))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7861.valid){
continue;
}
CheckValue<IkReal> x7862=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x7860)))),-1);
if(!x7862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7861.value)+(((1.5707963267949)*(x7862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7863=IKsin(j4);
IkReal x7864=IKcos(j4);
IkReal x7865=(sj1*sj2);
IkReal x7866=(gconst143*r20);
IkReal x7867=((1.0)*x7864);
IkReal x7868=((1.0)*cj1*cj2);
IkReal x7869=((1.0)*x7863);
IkReal x7870=(gconst142*x7863);
IkReal x7871=(gconst143*x7864);
evalcond[0]=(((r21*x7870))+(((-1.0)*x7866*x7869))+(((-1.0)*r22*x7867)));
evalcond[1]=(cj0+((r11*x7870))+(((-1.0)*r12*x7867))+(((-1.0)*gconst143*r10*x7869)));
evalcond[2]=((((-1.0)*gconst143*r00*x7869))+(((-1.0)*sj0))+(((-1.0)*r02*x7867))+((r01*x7870)));
evalcond[3]=(((cj2*sj1))+((x7864*x7866))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7867))+(((-1.0)*r22*x7869)));
evalcond[4]=(((cj0*x7865))+(((-1.0)*gconst142*r01*x7867))+((r00*x7871))+(((-1.0)*r02*x7869))+(((-1.0)*cj0*x7868)));
evalcond[5]=(((r10*x7871))+((sj0*x7865))+(((-1.0)*r12*x7869))+(((-1.0)*sj0*x7868))+(((-1.0)*gconst142*r11*x7867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7872=((1.0)*gconst143);
CheckValue<IkReal> x7873=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7872))+(((-1.0)*gconst142*r00)))),-1);
if(!x7873.valid){
continue;
}
CheckValue<IkReal> x7874 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7872))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7873.value)))+(x7874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7875=IKsin(j4);
IkReal x7876=IKcos(j4);
IkReal x7877=(sj1*sj2);
IkReal x7878=(gconst143*r20);
IkReal x7879=((1.0)*x7876);
IkReal x7880=((1.0)*cj1*cj2);
IkReal x7881=((1.0)*x7875);
IkReal x7882=(gconst142*x7875);
IkReal x7883=(gconst143*x7876);
evalcond[0]=((((-1.0)*r22*x7879))+(((-1.0)*x7878*x7881))+((r21*x7882)));
evalcond[1]=(cj0+(((-1.0)*r12*x7879))+((r11*x7882))+(((-1.0)*gconst143*r10*x7881)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7881))+((r01*x7882))+(((-1.0)*r02*x7879)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7881))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7879))+((x7876*x7878)));
evalcond[4]=(((cj0*x7877))+(((-1.0)*r02*x7881))+((r00*x7883))+(((-1.0)*gconst142*r01*x7879))+(((-1.0)*cj0*x7880)));
evalcond[5]=((((-1.0)*gconst142*r11*x7879))+(((-1.0)*sj0*x7880))+((r10*x7883))+((sj0*x7877))+(((-1.0)*r12*x7881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7884=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7884;
j4eval[1]=IKsign(x7884);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7885=((1.0)*cj5);
IkReal x7886=((((-1.0)*r01*x7885))+(((-1.0)*r00*sj5)));
j4eval[0]=x7886;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7885))))));
j4eval[2]=IKsign(x7886);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7887=cj5*cj5;
IkReal x7888=r11*r11;
IkReal x7889=(r11*sj5);
IkReal x7890=(cj5*r10);
IkReal x7891=((r12*r12)+(((-2.0)*x7889*x7890))+x7888+((x7887*(r10*r10)))+(((-1.0)*x7887*x7888)));
j4eval[0]=x7891;
j4eval[1]=IKsign(x7891);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7889))+x7890))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7892=cj5*cj5;
IkReal x7893=r11*r11;
IkReal x7894=(cj5*r10);
IkReal x7895=(r11*sj5);
CheckValue<IkReal> x7896 = IKatan2WithCheck(IkReal((x7894+(((-1.0)*x7895)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7896.valid){
continue;
}
CheckValue<IkReal> x7897=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x7892*x7893))+x7893+((x7892*(r10*r10)))+(((-2.0)*x7894*x7895)))),-1);
if(!x7897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7896.value)+(((1.5707963267949)*(x7897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7898=IKsin(j4);
IkReal x7899=IKcos(j4);
IkReal x7900=(cj5*r10);
IkReal x7901=(r01*sj5);
IkReal x7902=(cj5*r00);
IkReal x7903=(cj5*r20);
IkReal x7904=((1.0)*x7899);
IkReal x7905=((1.0)*x7898);
IkReal x7906=(sj5*x7898);
evalcond[0]=(((r21*x7906))+(((-1.0)*r22*x7904))+(((-1.0)*x7903*x7905)));
evalcond[1]=(((x7898*x7901))+(((-1.0)*x7902*x7905))+(((-1.0)*r02*x7904)));
evalcond[2]=((((-1.0)*r12*x7905))+((x7899*x7900))+(((-1.0)*r11*sj5*x7904)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7904))+((r11*x7906))+(((-1.0)*x7900*x7905)));
evalcond[4]=(((cj2*sj1))+((x7899*x7903))+((cj1*sj2))+(((-1.0)*r22*x7905))+(((-1.0)*r21*sj5*x7904)));
evalcond[5]=(((x7899*x7902))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7901*x7904))+(((-1.0)*r02*x7905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7907=((1.0)*cj5);
CheckValue<IkReal> x7908 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7908.valid){
continue;
}
CheckValue<IkReal> x7909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7907))+(((-1.0)*r00*sj5)))),-1);
if(!x7909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7908.value)+(((1.5707963267949)*(x7909.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7910=IKsin(j4);
IkReal x7911=IKcos(j4);
IkReal x7912=(cj5*r10);
IkReal x7913=(r01*sj5);
IkReal x7914=(cj5*r00);
IkReal x7915=(cj5*r20);
IkReal x7916=((1.0)*x7911);
IkReal x7917=((1.0)*x7910);
IkReal x7918=(sj5*x7910);
evalcond[0]=(((r21*x7918))+(((-1.0)*x7915*x7917))+(((-1.0)*r22*x7916)));
evalcond[1]=((((-1.0)*r02*x7916))+(((-1.0)*x7914*x7917))+((x7910*x7913)));
evalcond[2]=(((x7911*x7912))+(((-1.0)*r11*sj5*x7916))+(((-1.0)*r12*x7917)));
evalcond[3]=((1.0)+(((-1.0)*x7912*x7917))+((r11*x7918))+(((-1.0)*r12*x7916)));
evalcond[4]=(((cj2*sj1))+((x7911*x7915))+((cj1*sj2))+(((-1.0)*r22*x7917))+(((-1.0)*r21*sj5*x7916)));
evalcond[5]=(((x7911*x7914))+(((-1.0)*r02*x7917))+(((-1.0)*x7913*x7916))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7919=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7919.valid){
continue;
}
CheckValue<IkReal> x7920 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7919.value)))+(x7920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7921=IKsin(j4);
IkReal x7922=IKcos(j4);
IkReal x7923=(cj5*r10);
IkReal x7924=(r01*sj5);
IkReal x7925=(cj5*r00);
IkReal x7926=(cj5*r20);
IkReal x7927=((1.0)*x7922);
IkReal x7928=((1.0)*x7921);
IkReal x7929=(sj5*x7921);
evalcond[0]=((((-1.0)*r22*x7927))+((r21*x7929))+(((-1.0)*x7926*x7928)));
evalcond[1]=(((x7921*x7924))+(((-1.0)*r02*x7927))+(((-1.0)*x7925*x7928)));
evalcond[2]=((((-1.0)*r11*sj5*x7927))+(((-1.0)*r12*x7928))+((x7922*x7923)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7927))+((r11*x7929))+(((-1.0)*x7923*x7928)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7928))+(((-1.0)*r21*sj5*x7927))+((x7922*x7926)));
evalcond[5]=((((-1.0)*r02*x7928))+(((-1.0)*x7924*x7927))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7922*x7925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7930=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7930;
j4eval[1]=IKsign(x7930);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7931=((1.0)*cj5);
IkReal x7932=((((-1.0)*r21*x7931))+(((-1.0)*r20*sj5)));
j4eval[0]=x7932;
j4eval[1]=((IKabs(((((-1.0)*r00*x7931))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x7932);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7933=cj5*cj5;
IkReal x7934=r11*r11;
IkReal x7935=(cj5*r10);
IkReal x7936=(r11*sj5);
IkReal x7937=((((-1.0)*x7933*(r10*r10)))+((x7933*x7934))+(((2.0)*x7935*x7936))+(((-1.0)*x7934))+(((-1.0)*(r12*r12))));
j4eval[0]=x7937;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7936))+x7935))));
j4eval[2]=IKsign(x7937);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7938=cj5*cj5;
IkReal x7939=r11*r11;
IkReal x7940=(cj5*r10);
IkReal x7941=(r11*sj5);
CheckValue<IkReal> x7942 = IKatan2WithCheck(IkReal((x7940+(((-1.0)*x7941)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7942.valid){
continue;
}
CheckValue<IkReal> x7943=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7938*(r10*r10)))+(((-1.0)*x7939))+(((2.0)*x7940*x7941))+(((-1.0)*(r12*r12)))+((x7938*x7939)))),-1);
if(!x7943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7942.value)+(((1.5707963267949)*(x7943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7944=IKsin(j4);
IkReal x7945=IKcos(j4);
IkReal x7946=(cj5*r10);
IkReal x7947=(r01*sj5);
IkReal x7948=(cj5*r00);
IkReal x7949=(cj5*r20);
IkReal x7950=((1.0)*x7945);
IkReal x7951=((1.0)*x7944);
IkReal x7952=(sj5*x7944);
evalcond[0]=((((-1.0)*r22*x7950))+(((-1.0)*x7949*x7951))+((r21*x7952)));
evalcond[1]=((((-1.0)*r02*x7950))+(((-1.0)*x7948*x7951))+((x7944*x7947)));
evalcond[2]=(((x7945*x7946))+(((-1.0)*r11*sj5*x7950))+(((-1.0)*r12*x7951)));
evalcond[3]=((-1.0)+((r11*x7952))+(((-1.0)*r12*x7950))+(((-1.0)*x7946*x7951)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7951))+((cj1*sj2))+((x7945*x7949))+(((-1.0)*r21*sj5*x7950)));
evalcond[5]=((((-1.0)*x7947*x7950))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7951))+((x7945*x7948))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7953=((1.0)*cj5);
CheckValue<IkReal> x7954 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7954.valid){
continue;
}
CheckValue<IkReal> x7955=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7953))+(((-1.0)*r20*sj5)))),-1);
if(!x7955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7954.value)+(((1.5707963267949)*(x7955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7956=IKsin(j4);
IkReal x7957=IKcos(j4);
IkReal x7958=(cj5*r10);
IkReal x7959=(r01*sj5);
IkReal x7960=(cj5*r00);
IkReal x7961=(cj5*r20);
IkReal x7962=((1.0)*x7957);
IkReal x7963=((1.0)*x7956);
IkReal x7964=(sj5*x7956);
evalcond[0]=(((r21*x7964))+(((-1.0)*r22*x7962))+(((-1.0)*x7961*x7963)));
evalcond[1]=((((-1.0)*x7960*x7963))+(((-1.0)*r02*x7962))+((x7956*x7959)));
evalcond[2]=((((-1.0)*r11*sj5*x7962))+(((-1.0)*r12*x7963))+((x7957*x7958)));
evalcond[3]=((-1.0)+((r11*x7964))+(((-1.0)*x7958*x7963))+(((-1.0)*r12*x7962)));
evalcond[4]=(((cj2*sj1))+((x7957*x7961))+(((-1.0)*r22*x7963))+((cj1*sj2))+(((-1.0)*r21*sj5*x7962)));
evalcond[5]=(((x7957*x7960))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7963))+((cj1*cj2))+(((-1.0)*x7959*x7962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7965 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7965.valid){
continue;
}
CheckValue<IkReal> x7966=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7965.value)+(((1.5707963267949)*(x7966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7967=IKsin(j4);
IkReal x7968=IKcos(j4);
IkReal x7969=(cj5*r10);
IkReal x7970=(r01*sj5);
IkReal x7971=(cj5*r00);
IkReal x7972=(cj5*r20);
IkReal x7973=((1.0)*x7968);
IkReal x7974=((1.0)*x7967);
IkReal x7975=(sj5*x7967);
evalcond[0]=((((-1.0)*r22*x7973))+(((-1.0)*x7972*x7974))+((r21*x7975)));
evalcond[1]=(((x7967*x7970))+(((-1.0)*r02*x7973))+(((-1.0)*x7971*x7974)));
evalcond[2]=((((-1.0)*r11*sj5*x7973))+(((-1.0)*r12*x7974))+((x7968*x7969)));
evalcond[3]=((-1.0)+((r11*x7975))+(((-1.0)*r12*x7973))+(((-1.0)*x7969*x7974)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7974))+((cj1*sj2))+(((-1.0)*r21*sj5*x7973))+((x7968*x7972)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x7970*x7973))+(((-1.0)*r02*x7974))+((cj1*cj2))+((x7968*x7971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7976=((-1.0)*r00);
IkReal x7978 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7978)==0){
continue;
}
IkReal x7977=pow(x7978,-0.5);
CheckValue<IkReal> x7979 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7976),IKFAST_ATAN2_MAGTHRESH);
if(!x7979.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7979.value));
IkReal gconst145=(r01*x7977);
IkReal gconst146=(x7976*x7977);
CheckValue<IkReal> x7980 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7980.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7980.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7981=((-1.0)*r00);
IkReal x7982=x7977;
CheckValue<IkReal> x7984 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7981),IKFAST_ATAN2_MAGTHRESH);
if(!x7984.valid){
continue;
}
IkReal x7983=((-1.0)*(x7984.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7983;
IkReal gconst144=x7983;
IkReal gconst145=(r01*x7982);
IkReal gconst146=(x7981*x7982);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7985=((1.0)*sj0);
IkReal x7986=((1.0)*gconst145);
CheckValue<IkReal> x7987 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7985))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7985))+(((-1.0)*cj0*r01*x7986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7987.valid){
continue;
}
CheckValue<IkReal> x7988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7986))+(((-1.0)*gconst146*r21)))),-1);
if(!x7988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7987.value)+(((1.5707963267949)*(x7988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7989=IKsin(j4);
IkReal x7990=IKcos(j4);
IkReal x7991=(gconst146*r10);
IkReal x7992=(sj1*sj2);
IkReal x7993=(gconst146*r20);
IkReal x7994=(gconst146*r00);
IkReal x7995=((1.0)*x7990);
IkReal x7996=((1.0)*x7989);
IkReal x7997=(gconst145*x7989);
IkReal x7998=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x7997))+(((-1.0)*x7993*x7996))+(((-1.0)*r22*x7995)));
evalcond[1]=((((-1.0)*x7991*x7996))+((r11*x7997))+(((-1.0)*r12*x7995))+cj0);
evalcond[2]=((((-1.0)*sj0))+((r01*x7997))+(((-1.0)*r02*x7995))+(((-1.0)*x7994*x7996)));
evalcond[3]=(((cj2*sj1))+((x7990*x7993))+(((-1.0)*gconst145*r21*x7995))+((cj1*sj2))+(((-1.0)*r22*x7996)));
evalcond[4]=((((-1.0)*gconst145*r01*x7995))+((x7990*x7994))+((cj0*x7992))+(((-1.0)*cj0*x7998))+(((-1.0)*r02*x7996)));
evalcond[5]=(((x7990*x7991))+(((-1.0)*r12*x7996))+(((-1.0)*gconst145*r11*x7995))+((sj0*x7992))+(((-1.0)*sj0*x7998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7999=((1.0)*gconst146);
CheckValue<IkReal> x8000 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7999))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8000.valid){
continue;
}
CheckValue<IkReal> x8001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7999))+(((-1.0)*gconst145*r10)))),-1);
if(!x8001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8000.value)+(((1.5707963267949)*(x8001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8002=IKsin(j4);
IkReal x8003=IKcos(j4);
IkReal x8004=(gconst146*r10);
IkReal x8005=(sj1*sj2);
IkReal x8006=(gconst146*r20);
IkReal x8007=(gconst146*r00);
IkReal x8008=((1.0)*x8003);
IkReal x8009=((1.0)*x8002);
IkReal x8010=(gconst145*x8002);
IkReal x8011=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8008))+(((-1.0)*x8006*x8009))+((r21*x8010)));
evalcond[1]=(cj0+(((-1.0)*x8004*x8009))+(((-1.0)*r12*x8008))+((r11*x8010)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8010))+(((-1.0)*x8007*x8009))+(((-1.0)*r02*x8008)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8008))+((cj1*sj2))+(((-1.0)*r22*x8009))+((x8003*x8006)));
evalcond[4]=(((cj0*x8005))+(((-1.0)*cj0*x8011))+(((-1.0)*gconst145*r01*x8008))+((x8003*x8007))+(((-1.0)*r02*x8009)));
evalcond[5]=(((sj0*x8005))+(((-1.0)*gconst145*r11*x8008))+(((-1.0)*r12*x8009))+(((-1.0)*sj0*x8011))+((x8003*x8004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8012=((-1.0)*r01);
IkReal x8014 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8014)==0){
continue;
}
IkReal x8013=pow(x8014,-0.5);
CheckValue<IkReal> x8015 = IKatan2WithCheck(IkReal(x8012),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8015.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8015.value))));
IkReal gconst148=(x8012*x8013);
IkReal gconst149=((1.0)*r00*x8013);
CheckValue<IkReal> x8016 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8016.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8016.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8017=((-1.0)*r01);
CheckValue<IkReal> x8020 = IKatan2WithCheck(IkReal(x8017),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8020.valid){
continue;
}
IkReal x8018=((1.0)*(x8020.value));
IkReal x8019=x8013;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8018)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8018)));
IkReal gconst148=(x8017*x8019);
IkReal gconst149=((1.0)*r00*x8019);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8021=((-1.0)*r01);
CheckValue<IkReal> x8024 = IKatan2WithCheck(IkReal(x8021),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8024.valid){
continue;
}
IkReal x8022=((1.0)*(x8024.value));
IkReal x8023=x8013;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8022)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8022)));
IkReal gconst148=(x8021*x8023);
IkReal gconst149=((1.0)*r00*x8023);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8025=((-1.0)*r01);
CheckValue<IkReal> x8028 = IKatan2WithCheck(IkReal(x8025),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8028.valid){
continue;
}
IkReal x8026=((1.0)*(x8028.value));
IkReal x8027=x8013;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8026)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8026)));
IkReal gconst148=(x8025*x8027);
IkReal gconst149=((1.0)*r00*x8027);
IkReal x8029=r02*r02;
IkReal x8030=(r12*sj0);
IkReal x8031=((1.0)*cj0);
IkReal x8032=x8013;
j4eval[0]=((IKabs((((cj0*x8029*x8032))+((r02*x8030*x8032))+(((-1.0)*x8031*x8032)))))+(IKabs(((((-1.0)*x8030))+(((-1.0)*r02*x8031))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8033=((1.0)*sj0);
IkReal x8034=((1.0)*gconst148);
CheckValue<IkReal> x8035=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8034))+(((-1.0)*gconst149*r21)))),-1);
if(!x8035.valid){
continue;
}
CheckValue<IkReal> x8036 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8033))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8034))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8035.value)))+(x8036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8037=IKsin(j4);
IkReal x8038=IKcos(j4);
IkReal x8039=(gconst148*r11);
IkReal x8040=(sj1*sj2);
IkReal x8041=((1.0)*x8038);
IkReal x8042=(gconst149*x8038);
IkReal x8043=(gconst148*x8037);
IkReal x8044=((1.0)*cj1*cj2);
IkReal x8045=((1.0)*x8037);
evalcond[0]=((((-1.0)*gconst149*r20*x8045))+((r21*x8043))+(((-1.0)*r22*x8041)));
evalcond[1]=(cj0+((x8037*x8039))+(((-1.0)*gconst149*r10*x8045))+(((-1.0)*r12*x8041)));
evalcond[2]=(((r01*x8043))+(((-1.0)*sj0))+(((-1.0)*r02*x8041))+(((-1.0)*gconst149*r00*x8045)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8041))+((cj1*sj2))+((r20*x8042))+(((-1.0)*r22*x8045)));
evalcond[4]=((((-1.0)*cj0*x8044))+(((-1.0)*gconst148*r01*x8041))+(((-1.0)*r02*x8045))+((cj0*x8040))+((r00*x8042)));
evalcond[5]=(((r10*x8042))+(((-1.0)*sj0*x8044))+((sj0*x8040))+(((-1.0)*x8039*x8041))+(((-1.0)*r12*x8045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8046=((1.0)*gconst149);
CheckValue<IkReal> x8047 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8046))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8047.valid){
continue;
}
CheckValue<IkReal> x8048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8046))+(((-1.0)*gconst148*r10)))),-1);
if(!x8048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8047.value)+(((1.5707963267949)*(x8048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8049=IKsin(j4);
IkReal x8050=IKcos(j4);
IkReal x8051=(gconst148*r11);
IkReal x8052=(sj1*sj2);
IkReal x8053=((1.0)*x8050);
IkReal x8054=(gconst149*x8050);
IkReal x8055=(gconst148*x8049);
IkReal x8056=((1.0)*cj1*cj2);
IkReal x8057=((1.0)*x8049);
evalcond[0]=((((-1.0)*gconst149*r20*x8057))+(((-1.0)*r22*x8053))+((r21*x8055)));
evalcond[1]=((((-1.0)*r12*x8053))+cj0+(((-1.0)*gconst149*r10*x8057))+((x8049*x8051)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8053))+(((-1.0)*gconst149*r00*x8057))+((r01*x8055)));
evalcond[3]=(((cj2*sj1))+((r20*x8054))+(((-1.0)*gconst148*r21*x8053))+((cj1*sj2))+(((-1.0)*r22*x8057)));
evalcond[4]=(((r00*x8054))+(((-1.0)*gconst148*r01*x8053))+((cj0*x8052))+(((-1.0)*r02*x8057))+(((-1.0)*cj0*x8056)));
evalcond[5]=((((-1.0)*r12*x8057))+(((-1.0)*sj0*x8056))+((r10*x8054))+((sj0*x8052))+(((-1.0)*x8051*x8053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8058=((1.0)*gconst149);
CheckValue<IkReal> x8059=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8058)))),-1);
if(!x8059.valid){
continue;
}
CheckValue<IkReal> x8060 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8059.value)))+(x8060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8061=IKsin(j4);
IkReal x8062=IKcos(j4);
IkReal x8063=(gconst148*r11);
IkReal x8064=(sj1*sj2);
IkReal x8065=((1.0)*x8062);
IkReal x8066=(gconst149*x8062);
IkReal x8067=(gconst148*x8061);
IkReal x8068=((1.0)*cj1*cj2);
IkReal x8069=((1.0)*x8061);
evalcond[0]=(((r21*x8067))+(((-1.0)*gconst149*r20*x8069))+(((-1.0)*r22*x8065)));
evalcond[1]=(((x8061*x8063))+cj0+(((-1.0)*r12*x8065))+(((-1.0)*gconst149*r10*x8069)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8067))+(((-1.0)*gconst149*r00*x8069))+(((-1.0)*r02*x8065)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8065))+((r20*x8066))+(((-1.0)*r22*x8069)));
evalcond[4]=((((-1.0)*cj0*x8068))+((r00*x8066))+((cj0*x8064))+(((-1.0)*gconst148*r01*x8065))+(((-1.0)*r02*x8069)));
evalcond[5]=(((r10*x8066))+(((-1.0)*sj0*x8068))+(((-1.0)*r12*x8069))+(((-1.0)*x8063*x8065))+((sj0*x8064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8070=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8070;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8071=((1.0)*cj5);
IkReal x8072=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8071)));
j4eval[0]=x8072;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8071)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8073=cj5*cj5;
IkReal x8074=r01*r01;
IkReal x8075=(r01*sj5);
IkReal x8076=(cj5*r00);
IkReal x8077=((((-1.0)*x8074))+(((-1.0)*x8073*(r00*r00)))+(((-1.0)*(r02*r02)))+((x8073*x8074))+(((2.0)*x8075*x8076)));
j4eval[0]=x8077;
j4eval[1]=IKsign(x8077);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8075))+x8076))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8078=cj5*cj5;
IkReal x8079=r01*r01;
IkReal x8080=(r01*sj5);
IkReal x8081=(cj5*r00);
CheckValue<IkReal> x8082 = IKatan2WithCheck(IkReal(((((-1.0)*x8080))+x8081)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8082.valid){
continue;
}
CheckValue<IkReal> x8083=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8079))+((x8078*x8079))+(((-1.0)*(r02*r02)))+(((2.0)*x8080*x8081))+(((-1.0)*x8078*(r00*r00))))),-1);
if(!x8083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8082.value)+(((1.5707963267949)*(x8083.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8084=IKsin(j4);
IkReal x8085=IKcos(j4);
IkReal x8086=(cj5*r10);
IkReal x8087=(r01*sj5);
IkReal x8088=(cj5*r00);
IkReal x8089=(cj5*r20);
IkReal x8090=((1.0)*x8085);
IkReal x8091=((1.0)*x8084);
IkReal x8092=(sj5*x8084);
evalcond[0]=((((-1.0)*x8089*x8091))+(((-1.0)*r22*x8090))+((r21*x8092)));
evalcond[1]=(((r11*x8092))+(((-1.0)*r12*x8090))+(((-1.0)*x8086*x8091)));
evalcond[2]=((((-1.0)*r02*x8091))+((x8085*x8088))+(((-1.0)*x8087*x8090)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8090))+((x8084*x8087))+(((-1.0)*x8088*x8091)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8090))+((cj1*sj2))+((x8085*x8089))+(((-1.0)*r22*x8091)));
evalcond[5]=((((-1.0)*r11*sj5*x8090))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8085*x8086))+(((-1.0)*r12*x8091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8093=((1.0)*cj5);
CheckValue<IkReal> x8094 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8094.valid){
continue;
}
CheckValue<IkReal> x8095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8093)))),-1);
if(!x8095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8094.value)+(((1.5707963267949)*(x8095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8096=IKsin(j4);
IkReal x8097=IKcos(j4);
IkReal x8098=(cj5*r10);
IkReal x8099=(r01*sj5);
IkReal x8100=(cj5*r00);
IkReal x8101=(cj5*r20);
IkReal x8102=((1.0)*x8097);
IkReal x8103=((1.0)*x8096);
IkReal x8104=(sj5*x8096);
evalcond[0]=((((-1.0)*r22*x8102))+(((-1.0)*x8101*x8103))+((r21*x8104)));
evalcond[1]=((((-1.0)*x8098*x8103))+((r11*x8104))+(((-1.0)*r12*x8102)));
evalcond[2]=((((-1.0)*x8099*x8102))+((x8097*x8100))+(((-1.0)*r02*x8103)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8102))+((x8096*x8099))+(((-1.0)*x8100*x8103)));
evalcond[4]=((((-1.0)*r21*sj5*x8102))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8103))+((x8097*x8101)));
evalcond[5]=(((x8097*x8098))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8102))+(((-1.0)*r12*x8103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8105=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8105.valid){
continue;
}
CheckValue<IkReal> x8106 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8105.value)))+(x8106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8107=IKsin(j4);
IkReal x8108=IKcos(j4);
IkReal x8109=(cj5*r10);
IkReal x8110=(r01*sj5);
IkReal x8111=(cj5*r00);
IkReal x8112=(cj5*r20);
IkReal x8113=((1.0)*x8108);
IkReal x8114=((1.0)*x8107);
IkReal x8115=(sj5*x8107);
evalcond[0]=((((-1.0)*x8112*x8114))+((r21*x8115))+(((-1.0)*r22*x8113)));
evalcond[1]=((((-1.0)*x8109*x8114))+(((-1.0)*r12*x8113))+((r11*x8115)));
evalcond[2]=((((-1.0)*x8110*x8113))+(((-1.0)*r02*x8114))+((x8108*x8111)));
evalcond[3]=((-1.0)+(((-1.0)*x8111*x8114))+(((-1.0)*r02*x8113))+((x8107*x8110)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8113))+((cj1*sj2))+(((-1.0)*r22*x8114))+((x8108*x8112)));
evalcond[5]=((((-1.0)*r11*sj5*x8113))+(((-1.0)*r12*x8114))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8108*x8109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8116=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8116;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8117=((1.0)*cj5);
IkReal x8118=((((-1.0)*r21*x8117))+(((-1.0)*r20*sj5)));
j4eval[0]=x8118;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8117))))));
j4eval[2]=IKsign(x8118);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8119=cj5*cj5;
IkReal x8120=r01*r01;
IkReal x8121=(cj5*r00);
IkReal x8122=(r01*sj5);
IkReal x8123=((((-1.0)*x8119*x8120))+(((-2.0)*x8121*x8122))+(r02*r02)+x8120+((x8119*(r00*r00))));
j4eval[0]=x8123;
j4eval[1]=((IKabs(r02))+(IKabs((x8121+(((-1.0)*x8122))))));
j4eval[2]=IKsign(x8123);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8124=cj5*cj5;
IkReal x8125=r01*r01;
IkReal x8126=(r01*sj5);
IkReal x8127=(cj5*r00);
CheckValue<IkReal> x8128 = IKatan2WithCheck(IkReal((x8127+(((-1.0)*x8126)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8128.valid){
continue;
}
CheckValue<IkReal> x8129=IKPowWithIntegerCheck(IKsign(((r02*r02)+((x8124*(r00*r00)))+(((-1.0)*x8124*x8125))+x8125+(((-2.0)*x8126*x8127)))),-1);
if(!x8129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8128.value)+(((1.5707963267949)*(x8129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8130=IKsin(j4);
IkReal x8131=IKcos(j4);
IkReal x8132=(cj5*r10);
IkReal x8133=(r01*sj5);
IkReal x8134=(cj5*r00);
IkReal x8135=(cj5*r20);
IkReal x8136=((1.0)*x8131);
IkReal x8137=((1.0)*x8130);
IkReal x8138=(sj5*x8130);
evalcond[0]=((((-1.0)*r22*x8136))+((r21*x8138))+(((-1.0)*x8135*x8137)));
evalcond[1]=((((-1.0)*x8132*x8137))+((r11*x8138))+(((-1.0)*r12*x8136)));
evalcond[2]=((((-1.0)*r02*x8137))+((x8131*x8134))+(((-1.0)*x8133*x8136)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8136))+(((-1.0)*x8134*x8137))+((x8130*x8133)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8137))+(((-1.0)*r21*sj5*x8136))+((x8131*x8135))+((cj1*sj2)));
evalcond[5]=(((x8131*x8132))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8137))+(((-1.0)*r11*sj5*x8136))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8139=((1.0)*cj5);
CheckValue<IkReal> x8140=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8139))+(((-1.0)*r20*sj5)))),-1);
if(!x8140.valid){
continue;
}
CheckValue<IkReal> x8141 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8140.value)))+(x8141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8142=IKsin(j4);
IkReal x8143=IKcos(j4);
IkReal x8144=(cj5*r10);
IkReal x8145=(r01*sj5);
IkReal x8146=(cj5*r00);
IkReal x8147=(cj5*r20);
IkReal x8148=((1.0)*x8143);
IkReal x8149=((1.0)*x8142);
IkReal x8150=(sj5*x8142);
evalcond[0]=((((-1.0)*r22*x8148))+((r21*x8150))+(((-1.0)*x8147*x8149)));
evalcond[1]=((((-1.0)*x8144*x8149))+(((-1.0)*r12*x8148))+((r11*x8150)));
evalcond[2]=(((x8143*x8146))+(((-1.0)*r02*x8149))+(((-1.0)*x8145*x8148)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8148))+(((-1.0)*x8146*x8149))+((x8142*x8145)));
evalcond[4]=(((cj2*sj1))+((x8143*x8147))+((cj1*sj2))+(((-1.0)*r22*x8149))+(((-1.0)*r21*sj5*x8148)));
evalcond[5]=((((-1.0)*r11*sj5*x8148))+((x8143*x8144))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8149))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8151 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8151.valid){
continue;
}
CheckValue<IkReal> x8152=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8151.value)+(((1.5707963267949)*(x8152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8153=IKsin(j4);
IkReal x8154=IKcos(j4);
IkReal x8155=(cj5*r10);
IkReal x8156=(r01*sj5);
IkReal x8157=(cj5*r00);
IkReal x8158=(cj5*r20);
IkReal x8159=((1.0)*x8154);
IkReal x8160=((1.0)*x8153);
IkReal x8161=(sj5*x8153);
evalcond[0]=(((r21*x8161))+(((-1.0)*x8158*x8160))+(((-1.0)*r22*x8159)));
evalcond[1]=(((r11*x8161))+(((-1.0)*x8155*x8160))+(((-1.0)*r12*x8159)));
evalcond[2]=((((-1.0)*x8156*x8159))+(((-1.0)*r02*x8160))+((x8154*x8157)));
evalcond[3]=((1.0)+(((-1.0)*x8157*x8160))+((x8153*x8156))+(((-1.0)*r02*x8159)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8154*x8158))+(((-1.0)*r21*sj5*x8159))+(((-1.0)*r22*x8160)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8159))+(((-1.0)*r12*x8160))+((x8154*x8155))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8162=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8162);
rxp1_1=(px*r21);
rxp1_2=(r11*x8162);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8163=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8163);
rxp1_1=(px*r21);
rxp1_2=(r11*x8163);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8164=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8164);
rxp1_1=(px*r21);
rxp1_2=(r11*x8164);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8167=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8167.valid){
continue;
}
IkReal x8165=x8167.value;
IkReal x8166=(sj0*x8165);
cj4array[0]=((((-1.0)*sj1*sj2*x8166))+((cj1*cj2*x8166)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8168=IKsin(j4);
IkReal x8169=IKcos(j4);
IkReal x8170=(r21*sj5);
IkReal x8171=(cj5*r20);
IkReal x8172=((1.0)*x8168);
IkReal x8173=((1.0)*x8169);
evalcond[0]=((-1.0)*r02*x8168);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8173)));
evalcond[2]=(((x8168*x8170))+(((-1.0)*x8171*x8172)));
evalcond[3]=(((r11*sj5*x8168))+(((-1.0)*cj5*r10*x8172)));
evalcond[4]=(((cj2*sj1))+((x8169*x8171))+((cj1*sj2))+(((-1.0)*x8170*x8173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8176=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8176.valid){
continue;
}
IkReal x8174=x8176.value;
IkReal x8175=((1.0)*x8174);
cj4array[0]=((((-1.0)*cj2*sj1*x8175))+(((-1.0)*cj1*sj2*x8175)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8177=IKsin(j4);
IkReal x8178=IKcos(j4);
IkReal x8179=(r11*sj5);
IkReal x8180=((1.0)*sj0);
IkReal x8181=((1.0)*x8178);
IkReal x8182=((1.0)*cj5*x8177);
evalcond[0]=((-1.0)*r02*x8177);
evalcond[1]=((((-1.0)*r02*x8181))+(((-1.0)*x8180)));
evalcond[2]=((((-1.0)*r20*x8182))+((r21*sj5*x8177)));
evalcond[3]=(((x8177*x8179))+(((-1.0)*r10*x8182)));
evalcond[4]=((((-1.0)*cj1*cj2*x8180))+(((-1.0)*x8179*x8181))+((cj5*r10*x8178))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8183=IKPowWithIntegerCheck(r02,-1);
if(!x8183.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8183.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8184=IKsin(j4);
IkReal x8185=IKcos(j4);
IkReal x8186=(cj5*x8185);
IkReal x8187=(sj5*x8184);
IkReal x8188=((1.0)*sj5*x8185);
IkReal x8189=((1.0)*cj5*x8184);
evalcond[0]=((-1.0)*r02*x8184);
evalcond[1]=(((r21*x8187))+(((-1.0)*r20*x8189)));
evalcond[2]=(((r11*x8187))+(((-1.0)*r10*x8189)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8188))+((r20*x8186)));
evalcond[4]=(((r10*x8186))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r11*x8188))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8190=((1.0)*sj0);
IkReal x8191=((1.0)*cj0);
CheckValue<IkReal> x8192=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8192.valid){
continue;
}
CheckValue<IkReal> x8193 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8191))+(((-1.0)*r12*x8190)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8191))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8192.value)))+(x8193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8194=IKsin(j4);
IkReal x8195=IKcos(j4);
IkReal x8196=(cj5*r10);
IkReal x8197=(sj1*sj2);
IkReal x8198=(r01*sj5);
IkReal x8199=(cj5*r00);
IkReal x8200=(cj5*r20);
IkReal x8201=((1.0)*x8195);
IkReal x8202=((1.0)*cj1*cj2);
IkReal x8203=((1.0)*x8194);
IkReal x8204=(sj5*x8194);
evalcond[0]=((((-1.0)*x8200*x8203))+(((-1.0)*r22*x8201))+((r21*x8204)));
evalcond[1]=(((r11*x8204))+(((-1.0)*x8196*x8203))+cj0+(((-1.0)*r12*x8201)));
evalcond[2]=((((-1.0)*sj0))+((x8194*x8198))+(((-1.0)*r02*x8201))+(((-1.0)*x8199*x8203)));
evalcond[3]=(((cj2*sj1))+((x8195*x8200))+((cj1*sj2))+(((-1.0)*r21*sj5*x8201))+(((-1.0)*r22*x8203)));
evalcond[4]=((((-1.0)*x8198*x8201))+(((-1.0)*cj0*x8202))+((x8195*x8199))+(((-1.0)*r02*x8203))+((cj0*x8197)));
evalcond[5]=(((x8195*x8196))+((sj0*x8197))+(((-1.0)*r12*x8203))+(((-1.0)*r11*sj5*x8201))+(((-1.0)*sj0*x8202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8205=((1.0)*cj5);
CheckValue<IkReal> x8206 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8205)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8206.valid){
continue;
}
CheckValue<IkReal> x8207=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8205)))),-1);
if(!x8207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8206.value)+(((1.5707963267949)*(x8207.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8208=IKsin(j4);
IkReal x8209=IKcos(j4);
IkReal x8210=(cj5*r10);
IkReal x8211=(sj1*sj2);
IkReal x8212=(r01*sj5);
IkReal x8213=(cj5*r00);
IkReal x8214=(cj5*r20);
IkReal x8215=((1.0)*x8209);
IkReal x8216=((1.0)*cj1*cj2);
IkReal x8217=((1.0)*x8208);
IkReal x8218=(sj5*x8208);
evalcond[0]=((((-1.0)*r22*x8215))+(((-1.0)*x8214*x8217))+((r21*x8218)));
evalcond[1]=(((r11*x8218))+cj0+(((-1.0)*x8210*x8217))+(((-1.0)*r12*x8215)));
evalcond[2]=((((-1.0)*sj0))+((x8208*x8212))+(((-1.0)*r02*x8215))+(((-1.0)*x8213*x8217)));
evalcond[3]=(((cj2*sj1))+((x8209*x8214))+((cj1*sj2))+(((-1.0)*r21*sj5*x8215))+(((-1.0)*r22*x8217)));
evalcond[4]=((((-1.0)*cj0*x8216))+((x8209*x8213))+((cj0*x8211))+(((-1.0)*r02*x8217))+(((-1.0)*x8212*x8215)));
evalcond[5]=(((x8209*x8210))+(((-1.0)*r12*x8217))+(((-1.0)*sj0*x8216))+(((-1.0)*r11*sj5*x8215))+((sj0*x8211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8219=((1.0)*cj5);
CheckValue<IkReal> x8220 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8220.valid){
continue;
}
CheckValue<IkReal> x8221=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8219))+(((-1.0)*r00*sj5)))),-1);
if(!x8221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8220.value)+(((1.5707963267949)*(x8221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8222=IKsin(j4);
IkReal x8223=IKcos(j4);
IkReal x8224=(cj5*r10);
IkReal x8225=(sj1*sj2);
IkReal x8226=(r01*sj5);
IkReal x8227=(cj5*r00);
IkReal x8228=(cj5*r20);
IkReal x8229=((1.0)*x8223);
IkReal x8230=((1.0)*cj1*cj2);
IkReal x8231=((1.0)*x8222);
IkReal x8232=(sj5*x8222);
evalcond[0]=((((-1.0)*x8228*x8231))+((r21*x8232))+(((-1.0)*r22*x8229)));
evalcond[1]=(cj0+((r11*x8232))+(((-1.0)*r12*x8229))+(((-1.0)*x8224*x8231)));
evalcond[2]=(((x8222*x8226))+(((-1.0)*sj0))+(((-1.0)*r02*x8229))+(((-1.0)*x8227*x8231)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8223*x8228))+(((-1.0)*r22*x8231))+(((-1.0)*r21*sj5*x8229)));
evalcond[4]=(((cj0*x8225))+(((-1.0)*r02*x8231))+((x8223*x8227))+(((-1.0)*x8226*x8229))+(((-1.0)*cj0*x8230)));
evalcond[5]=((((-1.0)*r11*sj5*x8229))+((x8223*x8224))+(((-1.0)*r12*x8231))+(((-1.0)*sj0*x8230))+((sj0*x8225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8233=cj5*cj5;
IkReal x8234=r21*r21;
IkReal x8235=(cj2*sj1);
IkReal x8236=(cj1*sj2);
IkReal x8237=(r21*sj5);
IkReal x8238=((1.0)*cj5*r20);
CheckValue<IkReal> x8239=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x8233*x8234))+((x8233*(r20*r20)))+x8234+(((-2.0)*cj5*r20*x8237)))),-1);
if(!x8239.valid){
continue;
}
CheckValue<IkReal> x8240 = IKatan2WithCheck(IkReal((((r22*x8236))+((r22*x8235)))),IkReal((((x8236*x8237))+(((-1.0)*x8236*x8238))+((x8235*x8237))+(((-1.0)*x8235*x8238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8239.value)))+(x8240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8241=IKsin(j4);
IkReal x8242=IKcos(j4);
IkReal x8243=(r21*sj5);
IkReal x8244=(cj5*r20);
IkReal x8245=((1.0)*x8242);
IkReal x8246=((1.0)*x8241);
evalcond[0]=((((-1.0)*x8244*x8246))+((x8241*x8243))+(((-1.0)*r22*x8245)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x8243*x8245))+((cj1*sj2))+(((-1.0)*r22*x8246))+((x8242*x8244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8247=(cj5*sj4);
IkReal x8248=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8248))+(((-1.0)*r00*x8247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8247))+(((-1.0)*r11*x8248))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8248))+(((-1.0)*r00*x8247))))+IKsqr((((r10*x8247))+(((-1.0)*r11*x8248))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8248))+(((-1.0)*r00*x8247))), (((r10*x8247))+(((-1.0)*r11*x8248))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8249=IKcos(j0);
IkReal x8250=IKsin(j0);
IkReal x8251=(cj4*cj5);
IkReal x8252=((1.0)*cj1);
IkReal x8253=((0.39225)*sj1);
IkReal x8254=(r11*sj5);
IkReal x8255=(cj5*r11);
IkReal x8256=((1.0)*sj5);
IkReal x8257=((1.0)*sj4);
IkReal x8258=((1.0)*sj1);
IkReal x8259=((0.09465)*sj5);
IkReal x8260=(cj5*r01);
IkReal x8261=((0.425)*cj1);
IkReal x8262=((1.0)*cj4);
IkReal x8263=(sj2*x8249);
IkReal x8264=(sj2*x8250);
IkReal x8265=((0.39225)*cj1*cj2);
IkReal x8266=(cj2*x8249);
IkReal x8267=(cj2*x8250);
evalcond[0]=((((-1.0)*r12*x8262))+((sj4*x8254))+(((-1.0)*cj5*r10*x8257))+x8249);
evalcond[1]=((((-1.0)*x8250))+((r01*sj4*sj5))+(((-1.0)*r02*x8262))+(((-1.0)*cj5*r00*x8257)));
evalcond[2]=((((-1.0)*x8252*x8263))+(((-1.0)*x8258*x8266))+(((-1.0)*r00*x8256))+(((-1.0)*x8260)));
evalcond[3]=((((-1.0)*x8255))+(((-1.0)*x8252*x8264))+(((-1.0)*r10*x8256))+(((-1.0)*x8258*x8267)));
evalcond[4]=(((r00*x8251))+(((-1.0)*x8252*x8266))+(((-1.0)*cj4*r01*x8256))+((sj1*x8263))+(((-1.0)*r02*x8257)));
evalcond[5]=(((r10*x8251))+(((-1.0)*x8252*x8267))+(((-1.0)*r12*x8257))+(((-1.0)*x8254*x8262))+((sj1*x8264)));
evalcond[6]=((((-0.10915)*x8250))+(((-1.0)*x8253*x8263))+(((-1.0)*r00*x8259))+(((-1.0)*px))+((x8249*x8265))+((x8249*x8261))+(((-0.09465)*x8260)));
evalcond[7]=((((-0.09465)*x8255))+((x8250*x8261))+((x8250*x8265))+(((-1.0)*r10*x8259))+(((-1.0)*x8253*x8264))+(((-1.0)*py))+(((0.10915)*x8249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8268 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8268.valid){
continue;
}
CheckValue<IkReal> x8269=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8269.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8268.value)+(((1.5707963267949)*(x8269.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8270=IKcos(j0);
IkReal x8271=IKsin(j0);
IkReal x8272=((1.0)*cj1);
IkReal x8273=((0.39225)*sj1);
IkReal x8274=(cj5*r11);
IkReal x8275=((1.0)*sj5);
IkReal x8276=(cj5*r01);
IkReal x8277=((1.0)*sj1);
IkReal x8278=((0.09465)*sj5);
IkReal x8279=((0.39225)*cj1);
IkReal x8280=((0.425)*cj1);
IkReal x8281=(sj2*x8270);
IkReal x8282=(sj2*x8271);
IkReal x8283=(cj2*x8270);
IkReal x8284=(cj2*x8271);
evalcond[0]=((((-1.0)*x8277*x8283))+(((-1.0)*r00*x8275))+(((-1.0)*x8276))+(((-1.0)*x8272*x8281)));
evalcond[1]=((((-1.0)*x8277*x8284))+(((-1.0)*r10*x8275))+(((-1.0)*x8274))+(((-1.0)*x8272*x8282)));
evalcond[2]=(((x8279*x8283))+(((-0.10915)*x8271))+(((-1.0)*px))+(((-1.0)*r00*x8278))+(((-1.0)*x8273*x8281))+((x8270*x8280))+(((-0.09465)*x8276)));
evalcond[3]=(((x8279*x8284))+(((-1.0)*py))+(((0.10915)*x8270))+(((-1.0)*r10*x8278))+((x8271*x8280))+(((-1.0)*x8273*x8282))+(((-0.09465)*x8274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8285=((1.0)*cj5);
IkReal x8286=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8285)));
j4eval[0]=x8286;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x8285))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x8286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8287=((1.0)*cj5);
IkReal x8288=((((-1.0)*r11*x8287))+(((-1.0)*r10*sj5)));
j4eval[0]=x8288;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8287))))));
j4eval[2]=IKsign(x8288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8289=((1.0)*sj0);
IkReal x8290=((1.0)*cj0);
IkReal x8291=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8291;
j4eval[1]=((IKabs(((((-1.0)*r12*x8289))+(((-1.0)*r02*x8290)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8289))+(((-1.0)*r01*sj5*x8290))))));
j4eval[2]=IKsign(x8291);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8292=((-1.0)*r20);
IkReal x8294 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8294)==0){
continue;
}
IkReal x8293=pow(x8294,-0.5);
CheckValue<IkReal> x8295 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8292),IKFAST_ATAN2_MAGTHRESH);
if(!x8295.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8295.value));
IkReal gconst133=(r21*x8293);
IkReal gconst134=(x8292*x8293);
CheckValue<IkReal> x8296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8296.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8296.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8297=((-1.0)*r20);
IkReal x8298=x8293;
CheckValue<IkReal> x8300 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8297),IKFAST_ATAN2_MAGTHRESH);
if(!x8300.valid){
continue;
}
IkReal x8299=((-1.0)*(x8300.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8299;
IkReal gconst132=x8299;
IkReal gconst133=(r21*x8298);
IkReal gconst134=(x8297*x8298);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8301=((-1.0)*r20);
IkReal x8302=x8293;
CheckValue<IkReal> x8304 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8301),IKFAST_ATAN2_MAGTHRESH);
if(!x8304.valid){
continue;
}
IkReal x8303=((-1.0)*(x8304.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8303;
IkReal gconst132=x8303;
IkReal gconst133=(r21*x8302);
IkReal gconst134=(x8301*x8302);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8305=((-1.0)*r20);
IkReal x8306=x8293;
CheckValue<IkReal> x8308 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8305),IKFAST_ATAN2_MAGTHRESH);
if(!x8308.valid){
continue;
}
IkReal x8307=((-1.0)*(x8308.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8307;
IkReal gconst132=x8307;
IkReal gconst133=(r21*x8306);
IkReal gconst134=(x8305*x8306);
IkReal x8309=r22*r22;
CheckValue<IkReal> x8312=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8309))),-1);
if(!x8312.valid){
continue;
}
IkReal x8310=x8312.value;
IkReal x8311=(x8309+((x8310*(r21*r21*r21*r21)))+((x8310*(r20*r20*r20*r20)))+(((2.0)*x8310*(r20*r20)*(r21*r21))));
j4eval[0]=x8311;
j4eval[1]=IKsign(x8311);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8313=(gconst133*r21);
IkReal x8314=(cj1*sj2);
IkReal x8315=(gconst134*r20);
IkReal x8316=(cj2*sj1);
CheckValue<IkReal> x8317=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8313*x8315))+(x8313*x8313)+(r22*r22)+(x8315*x8315))),-1);
if(!x8317.valid){
continue;
}
CheckValue<IkReal> x8318 = IKatan2WithCheck(IkReal((((r22*x8314))+((r22*x8316)))),IkReal(((((-1.0)*x8315*x8316))+((x8313*x8314))+((x8313*x8316))+(((-1.0)*x8314*x8315)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8317.value)))+(x8318.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8319=IKsin(j4);
IkReal x8320=IKcos(j4);
IkReal x8321=(sj1*sj2);
IkReal x8322=(gconst133*r11);
IkReal x8323=(gconst133*r21);
IkReal x8324=(gconst133*r01);
IkReal x8325=((1.0)*x8320);
IkReal x8326=(gconst134*x8320);
IkReal x8327=((1.0)*x8319);
IkReal x8328=((1.0)*cj1*cj2);
evalcond[0]=(((x8319*x8323))+(((-1.0)*gconst134*r20*x8327))+(((-1.0)*r22*x8325)));
evalcond[1]=(((x8319*x8322))+cj0+(((-1.0)*gconst134*r10*x8327))+(((-1.0)*r12*x8325)));
evalcond[2]=(((x8319*x8324))+(((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8327))+(((-1.0)*r02*x8325)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8327))+((cj1*sj2))+(((-1.0)*x8323*x8325))+((r20*x8326)));
evalcond[4]=(((cj0*x8321))+((r00*x8326))+(((-1.0)*r02*x8327))+(((-1.0)*cj0*x8328))+(((-1.0)*x8324*x8325)));
evalcond[5]=(((r10*x8326))+(((-1.0)*x8322*x8325))+((sj0*x8321))+(((-1.0)*sj0*x8328))+(((-1.0)*r12*x8327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8329=((1.0)*gconst134);
CheckValue<IkReal> x8330=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8329)))),-1);
if(!x8330.valid){
continue;
}
CheckValue<IkReal> x8331 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8329))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8330.value)))+(x8331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8332=IKsin(j4);
IkReal x8333=IKcos(j4);
IkReal x8334=(sj1*sj2);
IkReal x8335=(gconst133*r11);
IkReal x8336=(gconst133*r21);
IkReal x8337=(gconst133*r01);
IkReal x8338=((1.0)*x8333);
IkReal x8339=(gconst134*x8333);
IkReal x8340=((1.0)*x8332);
IkReal x8341=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8338))+((x8332*x8336))+(((-1.0)*gconst134*r20*x8340)));
evalcond[1]=((((-1.0)*gconst134*r10*x8340))+cj0+(((-1.0)*r12*x8338))+((x8332*x8335)));
evalcond[2]=((((-1.0)*sj0))+((x8332*x8337))+(((-1.0)*r02*x8338))+(((-1.0)*gconst134*r00*x8340)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8340))+((r20*x8339))+(((-1.0)*x8336*x8338)));
evalcond[4]=((((-1.0)*r02*x8340))+((r00*x8339))+(((-1.0)*cj0*x8341))+((cj0*x8334))+(((-1.0)*x8337*x8338)));
evalcond[5]=(((r10*x8339))+(((-1.0)*x8335*x8338))+(((-1.0)*r12*x8340))+((sj0*x8334))+(((-1.0)*sj0*x8341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8342=((1.0)*gconst134);
CheckValue<IkReal> x8343=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8342)))),-1);
if(!x8343.valid){
continue;
}
CheckValue<IkReal> x8344 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*r20*x8342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8343.value)))+(x8344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8345=IKsin(j4);
IkReal x8346=IKcos(j4);
IkReal x8347=(sj1*sj2);
IkReal x8348=(gconst133*r11);
IkReal x8349=(gconst133*r21);
IkReal x8350=(gconst133*r01);
IkReal x8351=((1.0)*x8346);
IkReal x8352=(gconst134*x8346);
IkReal x8353=((1.0)*x8345);
IkReal x8354=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8351))+((x8345*x8349))+(((-1.0)*gconst134*r20*x8353)));
evalcond[1]=(cj0+((x8345*x8348))+(((-1.0)*r12*x8351))+(((-1.0)*gconst134*r10*x8353)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8351))+(((-1.0)*gconst134*r00*x8353))+((x8345*x8350)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8353))+((cj1*sj2))+(((-1.0)*x8349*x8351))+((r20*x8352)));
evalcond[4]=((((-1.0)*r02*x8353))+(((-1.0)*cj0*x8354))+((cj0*x8347))+((r00*x8352))+(((-1.0)*x8350*x8351)));
evalcond[5]=(((r10*x8352))+((sj0*x8347))+(((-1.0)*r12*x8353))+(((-1.0)*sj0*x8354))+(((-1.0)*x8348*x8351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8355=((-1.0)*r21);
IkReal x8357 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8357)==0){
continue;
}
IkReal x8356=pow(x8357,-0.5);
CheckValue<IkReal> x8358 = IKatan2WithCheck(IkReal(x8355),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8358.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8358.value))));
IkReal gconst136=(x8355*x8356);
IkReal gconst137=((1.0)*r20*x8356);
CheckValue<IkReal> x8359 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8359.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8359.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8360=((-1.0)*r21);
CheckValue<IkReal> x8363 = IKatan2WithCheck(IkReal(x8360),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8363.valid){
continue;
}
IkReal x8361=((1.0)*(x8363.value));
IkReal x8362=x8356;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8361)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8361)));
IkReal gconst136=(x8360*x8362);
IkReal gconst137=((1.0)*r20*x8362);
IkReal x8364=r22*r22;
IkReal x8365=((1.0)*x8364);
CheckValue<IkReal> x8369=IKPowWithIntegerCheck(((-1.0)+x8364),-1);
if(!x8369.valid){
continue;
}
IkReal x8366=x8369.value;
if((((1.0)+(((-1.0)*x8365)))) < -0.00001)
continue;
IkReal x8367=IKsqrt(((1.0)+(((-1.0)*x8365))));
IkReal x8368=(cj0*x8366*x8367);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x8365*x8368))+x8368))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8370=((-1.0)*r21);
CheckValue<IkReal> x8373 = IKatan2WithCheck(IkReal(x8370),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8373.valid){
continue;
}
IkReal x8371=((1.0)*(x8373.value));
IkReal x8372=x8356;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8371)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8371)));
IkReal gconst136=(x8370*x8372);
IkReal gconst137=((1.0)*r20*x8372);
IkReal x8374=r22*r22;
IkReal x8375=((1.0)*x8374);
CheckValue<IkReal> x8379=IKPowWithIntegerCheck(((-1.0)+x8374),-1);
if(!x8379.valid){
continue;
}
IkReal x8376=x8379.value;
if((((1.0)+(((-1.0)*x8375)))) < -0.00001)
continue;
IkReal x8377=IKsqrt(((1.0)+(((-1.0)*x8375))));
IkReal x8378=(sj0*x8376*x8377);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8378+(((-1.0)*x8375*x8378))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8380=((-1.0)*r21);
CheckValue<IkReal> x8383 = IKatan2WithCheck(IkReal(x8380),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8383.valid){
continue;
}
IkReal x8381=((1.0)*(x8383.value));
IkReal x8382=x8356;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8381)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8381)));
IkReal gconst136=(x8380*x8382);
IkReal gconst137=((1.0)*r20*x8382);
IkReal x8384=r22*r22;
IkReal x8385=(r12*sj0);
IkReal x8386=(cj0*r02);
CheckValue<IkReal> x8390=IKPowWithIntegerCheck(((-1.0)+x8384),-1);
if(!x8390.valid){
continue;
}
IkReal x8387=x8390.value;
if((((1.0)+(((-1.0)*x8384)))) < -0.00001)
continue;
IkReal x8388=IKsqrt(((1.0)+(((-1.0)*x8384))));
IkReal x8389=(r22*x8387*x8388);
j4eval[0]=0;
j4eval[1]=((IKabs((((x8386*x8389))+((x8385*x8389)))))+(IKabs(((((-1.0)*x8386))+(((-1.0)*x8385))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8391=((1.0)*sj0);
IkReal x8392=((1.0)*cj0);
CheckValue<IkReal> x8393=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8393.valid){
continue;
}
CheckValue<IkReal> x8394 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8392))+(((-1.0)*r12*x8391)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x8391))+((cj0*gconst137*r00))+(((-1.0)*gconst136*r01*x8392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8393.value)))+(x8394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8395=IKsin(j4);
IkReal x8396=IKcos(j4);
IkReal x8397=(gconst136*r01);
IkReal x8398=(gconst137*r10);
IkReal x8399=(sj1*sj2);
IkReal x8400=(gconst137*r20);
IkReal x8401=(gconst136*r11);
IkReal x8402=(gconst136*r21);
IkReal x8403=(gconst137*r00);
IkReal x8404=((1.0)*x8396);
IkReal x8405=((1.0)*cj1*cj2);
IkReal x8406=((1.0)*x8395);
evalcond[0]=(((x8395*x8402))+(((-1.0)*x8400*x8406))+(((-1.0)*r22*x8404)));
evalcond[1]=(cj0+((x8395*x8401))+(((-1.0)*x8398*x8406))+(((-1.0)*r12*x8404)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8404))+((x8395*x8397))+(((-1.0)*x8403*x8406)));
evalcond[3]=(((cj2*sj1))+((x8396*x8400))+((cj1*sj2))+(((-1.0)*r22*x8406))+(((-1.0)*x8402*x8404)));
evalcond[4]=(((x8396*x8403))+(((-1.0)*cj0*x8405))+(((-1.0)*r02*x8406))+(((-1.0)*x8397*x8404))+((cj0*x8399)));
evalcond[5]=((((-1.0)*sj0*x8405))+((sj0*x8399))+(((-1.0)*r12*x8406))+((x8396*x8398))+(((-1.0)*x8401*x8404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8407=((1.0)*gconst137);
CheckValue<IkReal> x8408 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8407))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8408.valid){
continue;
}
CheckValue<IkReal> x8409=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8407)))),-1);
if(!x8409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8408.value)+(((1.5707963267949)*(x8409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8410=IKsin(j4);
IkReal x8411=IKcos(j4);
IkReal x8412=(gconst136*r01);
IkReal x8413=(gconst137*r10);
IkReal x8414=(sj1*sj2);
IkReal x8415=(gconst137*r20);
IkReal x8416=(gconst136*r11);
IkReal x8417=(gconst136*r21);
IkReal x8418=(gconst137*r00);
IkReal x8419=((1.0)*x8411);
IkReal x8420=((1.0)*cj1*cj2);
IkReal x8421=((1.0)*x8410);
evalcond[0]=((((-1.0)*x8415*x8421))+((x8410*x8417))+(((-1.0)*r22*x8419)));
evalcond[1]=((((-1.0)*r12*x8419))+cj0+(((-1.0)*x8413*x8421))+((x8410*x8416)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8419))+(((-1.0)*x8418*x8421))+((x8410*x8412)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8411*x8415))+(((-1.0)*x8417*x8419))+(((-1.0)*r22*x8421)));
evalcond[4]=(((x8411*x8418))+(((-1.0)*cj0*x8420))+(((-1.0)*r02*x8421))+((cj0*x8414))+(((-1.0)*x8412*x8419)));
evalcond[5]=(((x8411*x8413))+(((-1.0)*x8416*x8419))+(((-1.0)*sj0*x8420))+((sj0*x8414))+(((-1.0)*r12*x8421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8422=((1.0)*gconst137);
CheckValue<IkReal> x8423 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8422))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8423.valid){
continue;
}
CheckValue<IkReal> x8424=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8422)))),-1);
if(!x8424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8423.value)+(((1.5707963267949)*(x8424.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8425=IKsin(j4);
IkReal x8426=IKcos(j4);
IkReal x8427=(gconst136*r01);
IkReal x8428=(gconst137*r10);
IkReal x8429=(sj1*sj2);
IkReal x8430=(gconst137*r20);
IkReal x8431=(gconst136*r11);
IkReal x8432=(gconst136*r21);
IkReal x8433=(gconst137*r00);
IkReal x8434=((1.0)*x8426);
IkReal x8435=((1.0)*cj1*cj2);
IkReal x8436=((1.0)*x8425);
evalcond[0]=(((x8425*x8432))+(((-1.0)*x8430*x8436))+(((-1.0)*r22*x8434)));
evalcond[1]=(cj0+(((-1.0)*r12*x8434))+((x8425*x8431))+(((-1.0)*x8428*x8436)));
evalcond[2]=((((-1.0)*sj0))+((x8425*x8427))+(((-1.0)*r02*x8434))+(((-1.0)*x8433*x8436)));
evalcond[3]=(((x8426*x8430))+((cj2*sj1))+(((-1.0)*x8432*x8434))+((cj1*sj2))+(((-1.0)*r22*x8436)));
evalcond[4]=(((cj0*x8429))+((x8426*x8433))+(((-1.0)*x8427*x8434))+(((-1.0)*r02*x8436))+(((-1.0)*cj0*x8435)));
evalcond[5]=((((-1.0)*sj0*x8435))+(((-1.0)*r12*x8436))+(((-1.0)*x8431*x8434))+((sj0*x8429))+((x8426*x8428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8437=((-1.0)*r10);
IkReal x8439 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8439)==0){
continue;
}
IkReal x8438=pow(x8439,-0.5);
CheckValue<IkReal> x8440 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8437),IKFAST_ATAN2_MAGTHRESH);
if(!x8440.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8440.value));
IkReal gconst139=(r11*x8438);
IkReal gconst140=(x8437*x8438);
CheckValue<IkReal> x8441 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8441.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8441.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8442=((-1.0)*r10);
IkReal x8443=x8438;
CheckValue<IkReal> x8445 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8442),IKFAST_ATAN2_MAGTHRESH);
if(!x8445.valid){
continue;
}
IkReal x8444=((-1.0)*(x8445.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8444;
IkReal gconst138=x8444;
IkReal gconst139=(r11*x8443);
IkReal gconst140=(x8442*x8443);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8446=((1.0)*sj0);
IkReal x8447=((1.0)*gconst139);
CheckValue<IkReal> x8448=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8447)))),-1);
if(!x8448.valid){
continue;
}
CheckValue<IkReal> x8449 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8446))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8447))+(((-1.0)*gconst139*r11*x8446))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8448.value)))+(x8449.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8450=IKsin(j4);
IkReal x8451=IKcos(j4);
IkReal x8452=(gconst140*r00);
IkReal x8453=(sj1*sj2);
IkReal x8454=(gconst139*r11);
IkReal x8455=(gconst139*r01);
IkReal x8456=(gconst139*r21);
IkReal x8457=((1.0)*x8451);
IkReal x8458=((1.0)*x8450);
IkReal x8459=((1.0)*cj1*cj2);
IkReal x8460=(gconst140*x8451);
evalcond[0]=(((x8450*x8456))+(((-1.0)*r22*x8457))+(((-1.0)*gconst140*r20*x8458)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8458))+((x8450*x8454))+(((-1.0)*r12*x8457)));
evalcond[2]=((((-1.0)*x8452*x8458))+(((-1.0)*sj0))+((x8450*x8455))+(((-1.0)*r02*x8457)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8458))+(((-1.0)*x8456*x8457))+((r20*x8460)));
evalcond[4]=(((x8451*x8452))+(((-1.0)*cj0*x8459))+(((-1.0)*r02*x8458))+((cj0*x8453))+(((-1.0)*x8455*x8457)));
evalcond[5]=((((-1.0)*x8454*x8457))+(((-1.0)*sj0*x8459))+(((-1.0)*r12*x8458))+((sj0*x8453))+((r10*x8460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8461=((1.0)*gconst140);
CheckValue<IkReal> x8462=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8461)))),-1);
if(!x8462.valid){
continue;
}
CheckValue<IkReal> x8463 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8461))+((cj0*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8462.value)))+(x8463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8464=IKsin(j4);
IkReal x8465=IKcos(j4);
IkReal x8466=(gconst140*r00);
IkReal x8467=(sj1*sj2);
IkReal x8468=(gconst139*r11);
IkReal x8469=(gconst139*r01);
IkReal x8470=(gconst139*r21);
IkReal x8471=((1.0)*x8465);
IkReal x8472=((1.0)*x8464);
IkReal x8473=((1.0)*cj1*cj2);
IkReal x8474=(gconst140*x8465);
evalcond[0]=(((x8464*x8470))+(((-1.0)*gconst140*r20*x8472))+(((-1.0)*r22*x8471)));
evalcond[1]=(((x8464*x8468))+cj0+(((-1.0)*gconst140*r10*x8472))+(((-1.0)*r12*x8471)));
evalcond[2]=(((x8464*x8469))+(((-1.0)*sj0))+(((-1.0)*r02*x8471))+(((-1.0)*x8466*x8472)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8470*x8471))+((cj1*sj2))+(((-1.0)*r22*x8472))+((r20*x8474)));
evalcond[4]=(((x8465*x8466))+(((-1.0)*r02*x8472))+((cj0*x8467))+(((-1.0)*x8469*x8471))+(((-1.0)*cj0*x8473)));
evalcond[5]=((((-1.0)*sj0*x8473))+((r10*x8474))+(((-1.0)*x8468*x8471))+(((-1.0)*r12*x8472))+((sj0*x8467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8475=((-1.0)*r11);
IkReal x8477 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8477)==0){
continue;
}
IkReal x8476=pow(x8477,-0.5);
CheckValue<IkReal> x8478 = IKatan2WithCheck(IkReal(x8475),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8478.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8478.value))));
IkReal gconst142=(x8475*x8476);
IkReal gconst143=((1.0)*r10*x8476);
CheckValue<IkReal> x8479 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8479.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8479.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8480=((-1.0)*r11);
CheckValue<IkReal> x8483 = IKatan2WithCheck(IkReal(x8480),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8483.valid){
continue;
}
IkReal x8481=((1.0)*(x8483.value));
IkReal x8482=x8476;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8481)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8481)));
IkReal gconst142=(x8480*x8482);
IkReal gconst143=((1.0)*r10*x8482);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8484=((-1.0)*r11);
CheckValue<IkReal> x8487 = IKatan2WithCheck(IkReal(x8484),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8487.valid){
continue;
}
IkReal x8485=((1.0)*(x8487.value));
IkReal x8486=x8476;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8485)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8485)));
IkReal gconst142=(x8484*x8486);
IkReal gconst143=((1.0)*r10*x8486);
IkReal x8488=r12*r12;
IkReal x8489=((1.0)*sj0);
IkReal x8490=(cj0*r02);
IkReal x8491=x8476;
j4eval[0]=((IKabs(((((-1.0)*r12*x8489))+(((-1.0)*x8490)))))+(IKabs((((r12*x8490*x8491))+((sj0*x8488*x8491))+(((-1.0)*x8489*x8491))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8492=((-1.0)*r11);
CheckValue<IkReal> x8495 = IKatan2WithCheck(IkReal(x8492),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8495.valid){
continue;
}
IkReal x8493=((1.0)*(x8495.value));
IkReal x8494=x8476;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8493)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8493)));
IkReal gconst142=(x8492*x8494);
IkReal gconst143=((1.0)*r10*x8494);
IkReal x8496=r12*r12;
IkReal x8497=(cj1*r22*sj2);
IkReal x8498=(cj2*r22*sj1);
CheckValue<IkReal> x8502=IKPowWithIntegerCheck(((-1.0)+x8496),-1);
if(!x8502.valid){
continue;
}
IkReal x8499=x8502.value;
if((((1.0)+(((-1.0)*x8496)))) < -0.00001)
continue;
IkReal x8500=IKsqrt(((1.0)+(((-1.0)*x8496))));
IkReal x8501=((1.0)*r12*x8499*x8500);
j4eval[0]=((IKabs(((((-1.0)*x8498*x8501))+(((-1.0)*x8497*x8501)))))+(IKabs((x8497+x8498))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8503=(gconst142*r21);
IkReal x8504=(cj1*sj2);
IkReal x8505=(cj2*sj1);
IkReal x8506=(gconst143*r20);
CheckValue<IkReal> x8507=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8503*x8503)+(x8506*x8506)+(((-2.0)*x8503*x8506)))),-1);
if(!x8507.valid){
continue;
}
CheckValue<IkReal> x8508 = IKatan2WithCheck(IkReal((((r22*x8505))+((r22*x8504)))),IkReal(((((-1.0)*x8504*x8506))+((x8503*x8505))+((x8503*x8504))+(((-1.0)*x8505*x8506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8507.value)))+(x8508.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8509=IKsin(j4);
IkReal x8510=IKcos(j4);
IkReal x8511=(sj1*sj2);
IkReal x8512=(gconst143*r20);
IkReal x8513=((1.0)*x8510);
IkReal x8514=((1.0)*cj1*cj2);
IkReal x8515=((1.0)*x8509);
IkReal x8516=(gconst142*x8509);
IkReal x8517=(gconst143*x8510);
evalcond[0]=((((-1.0)*x8512*x8515))+((r21*x8516))+(((-1.0)*r22*x8513)));
evalcond[1]=((((-1.0)*gconst143*r10*x8515))+cj0+((r11*x8516))+(((-1.0)*r12*x8513)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8515))+(((-1.0)*r02*x8513))+((r01*x8516)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8513))+((cj1*sj2))+(((-1.0)*r22*x8515))+((x8510*x8512)));
evalcond[4]=(((cj0*x8511))+(((-1.0)*r02*x8515))+(((-1.0)*cj0*x8514))+(((-1.0)*gconst142*r01*x8513))+((r00*x8517)));
evalcond[5]=(((sj0*x8511))+(((-1.0)*r12*x8515))+(((-1.0)*sj0*x8514))+(((-1.0)*gconst142*r11*x8513))+((r10*x8517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8518=((1.0)*sj0);
IkReal x8519=((1.0)*gconst142);
CheckValue<IkReal> x8520 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8518)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8519))+(((-1.0)*gconst142*r11*x8518))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8520.valid){
continue;
}
CheckValue<IkReal> x8521=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8519))+(((-1.0)*gconst143*r21)))),-1);
if(!x8521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8520.value)+(((1.5707963267949)*(x8521.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8522=IKsin(j4);
IkReal x8523=IKcos(j4);
IkReal x8524=(sj1*sj2);
IkReal x8525=(gconst143*r20);
IkReal x8526=((1.0)*x8523);
IkReal x8527=((1.0)*cj1*cj2);
IkReal x8528=((1.0)*x8522);
IkReal x8529=(gconst142*x8522);
IkReal x8530=(gconst143*x8523);
evalcond[0]=(((r21*x8529))+(((-1.0)*x8525*x8528))+(((-1.0)*r22*x8526)));
evalcond[1]=((((-1.0)*gconst143*r10*x8528))+cj0+((r11*x8529))+(((-1.0)*r12*x8526)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8526))+((r01*x8529))+(((-1.0)*gconst143*r00*x8528)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8526))+((cj1*sj2))+(((-1.0)*r22*x8528))+((x8523*x8525)));
evalcond[4]=(((r00*x8530))+(((-1.0)*r02*x8528))+(((-1.0)*cj0*x8527))+((cj0*x8524))+(((-1.0)*gconst142*r01*x8526)));
evalcond[5]=(((sj0*x8524))+((r10*x8530))+(((-1.0)*gconst142*r11*x8526))+(((-1.0)*sj0*x8527))+(((-1.0)*r12*x8528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8531=((1.0)*gconst143);
CheckValue<IkReal> x8532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8531))+(((-1.0)*gconst142*r00)))),-1);
if(!x8532.valid){
continue;
}
CheckValue<IkReal> x8533 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8531))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8532.value)))+(x8533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8534=IKsin(j4);
IkReal x8535=IKcos(j4);
IkReal x8536=(sj1*sj2);
IkReal x8537=(gconst143*r20);
IkReal x8538=((1.0)*x8535);
IkReal x8539=((1.0)*cj1*cj2);
IkReal x8540=((1.0)*x8534);
IkReal x8541=(gconst142*x8534);
IkReal x8542=(gconst143*x8535);
evalcond[0]=((((-1.0)*x8537*x8540))+(((-1.0)*r22*x8538))+((r21*x8541)));
evalcond[1]=(cj0+(((-1.0)*r12*x8538))+((r11*x8541))+(((-1.0)*gconst143*r10*x8540)));
evalcond[2]=((((-1.0)*r02*x8538))+(((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8540))+((r01*x8541)));
evalcond[3]=(((cj2*sj1))+((x8535*x8537))+((cj1*sj2))+(((-1.0)*r22*x8540))+(((-1.0)*gconst142*r21*x8538)));
evalcond[4]=((((-1.0)*r02*x8540))+(((-1.0)*cj0*x8539))+((r00*x8542))+(((-1.0)*gconst142*r01*x8538))+((cj0*x8536)));
evalcond[5]=((((-1.0)*sj0*x8539))+(((-1.0)*gconst142*r11*x8538))+((r10*x8542))+(((-1.0)*r12*x8540))+((sj0*x8536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8543=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8543;
j4eval[1]=IKsign(x8543);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8544=((1.0)*cj5);
IkReal x8545=((((-1.0)*r01*x8544))+(((-1.0)*r00*sj5)));
j4eval[0]=x8545;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8544))))));
j4eval[2]=IKsign(x8545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8546=cj5*cj5;
IkReal x8547=r11*r11;
IkReal x8548=(r11*sj5);
IkReal x8549=(cj5*r10);
IkReal x8550=(((x8546*(r10*r10)))+(r12*r12)+x8547+(((-1.0)*x8546*x8547))+(((-2.0)*x8548*x8549)));
j4eval[0]=x8550;
j4eval[1]=IKsign(x8550);
j4eval[2]=((IKabs(r12))+(IKabs((x8549+(((-1.0)*x8548))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8551=cj5*cj5;
IkReal x8552=r11*r11;
IkReal x8553=(cj5*r10);
IkReal x8554=(r11*sj5);
CheckValue<IkReal> x8555 = IKatan2WithCheck(IkReal((x8553+(((-1.0)*x8554)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8555.valid){
continue;
}
CheckValue<IkReal> x8556=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8552+(((-2.0)*x8553*x8554))+((x8551*(r10*r10)))+(((-1.0)*x8551*x8552)))),-1);
if(!x8556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8555.value)+(((1.5707963267949)*(x8556.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8557=IKsin(j4);
IkReal x8558=IKcos(j4);
IkReal x8559=(cj5*r10);
IkReal x8560=(r01*sj5);
IkReal x8561=(cj5*r00);
IkReal x8562=(cj5*r20);
IkReal x8563=((1.0)*x8558);
IkReal x8564=((1.0)*x8557);
IkReal x8565=(sj5*x8557);
evalcond[0]=((((-1.0)*r22*x8563))+(((-1.0)*x8562*x8564))+((r21*x8565)));
evalcond[1]=(((x8557*x8560))+(((-1.0)*x8561*x8564))+(((-1.0)*r02*x8563)));
evalcond[2]=((((-1.0)*r12*x8564))+(((-1.0)*r11*sj5*x8563))+((x8558*x8559)));
evalcond[3]=((1.0)+((r11*x8565))+(((-1.0)*r12*x8563))+(((-1.0)*x8559*x8564)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8564))+(((-1.0)*r21*sj5*x8563))+((x8558*x8562)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8560*x8563))+(((-1.0)*r02*x8564))+((x8558*x8561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8566=((1.0)*cj5);
CheckValue<IkReal> x8567 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8567.valid){
continue;
}
CheckValue<IkReal> x8568=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8566))+(((-1.0)*r00*sj5)))),-1);
if(!x8568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8567.value)+(((1.5707963267949)*(x8568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8569=IKsin(j4);
IkReal x8570=IKcos(j4);
IkReal x8571=(cj5*r10);
IkReal x8572=(r01*sj5);
IkReal x8573=(cj5*r00);
IkReal x8574=(cj5*r20);
IkReal x8575=((1.0)*x8570);
IkReal x8576=((1.0)*x8569);
IkReal x8577=(sj5*x8569);
evalcond[0]=(((r21*x8577))+(((-1.0)*x8574*x8576))+(((-1.0)*r22*x8575)));
evalcond[1]=((((-1.0)*r02*x8575))+(((-1.0)*x8573*x8576))+((x8569*x8572)));
evalcond[2]=((((-1.0)*r11*sj5*x8575))+((x8570*x8571))+(((-1.0)*r12*x8576)));
evalcond[3]=((1.0)+(((-1.0)*x8571*x8576))+((r11*x8577))+(((-1.0)*r12*x8575)));
evalcond[4]=((((-1.0)*r21*sj5*x8575))+((cj2*sj1))+((cj1*sj2))+((x8570*x8574))+(((-1.0)*r22*x8576)));
evalcond[5]=(((x8570*x8573))+(((-1.0)*x8572*x8575))+(((-1.0)*r02*x8576))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8578=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8578.valid){
continue;
}
CheckValue<IkReal> x8579 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8578.value)))+(x8579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8580=IKsin(j4);
IkReal x8581=IKcos(j4);
IkReal x8582=(cj5*r10);
IkReal x8583=(r01*sj5);
IkReal x8584=(cj5*r00);
IkReal x8585=(cj5*r20);
IkReal x8586=((1.0)*x8581);
IkReal x8587=((1.0)*x8580);
IkReal x8588=(sj5*x8580);
evalcond[0]=((((-1.0)*r22*x8586))+(((-1.0)*x8585*x8587))+((r21*x8588)));
evalcond[1]=((((-1.0)*x8584*x8587))+(((-1.0)*r02*x8586))+((x8580*x8583)));
evalcond[2]=(((x8581*x8582))+(((-1.0)*r12*x8587))+(((-1.0)*r11*sj5*x8586)));
evalcond[3]=((1.0)+(((-1.0)*x8582*x8587))+((r11*x8588))+(((-1.0)*r12*x8586)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8587))+(((-1.0)*r21*sj5*x8586))+((cj1*sj2))+((x8581*x8585)));
evalcond[5]=((((-1.0)*x8583*x8586))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8587))+((x8581*x8584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8589=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8589;
j4eval[1]=IKsign(x8589);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8590=((1.0)*cj5);
IkReal x8591=((((-1.0)*r21*x8590))+(((-1.0)*r20*sj5)));
j4eval[0]=x8591;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8590))))));
j4eval[2]=IKsign(x8591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8592=cj5*cj5;
IkReal x8593=r11*r11;
IkReal x8594=(cj5*r10);
IkReal x8595=(r11*sj5);
IkReal x8596=((((2.0)*x8594*x8595))+(((-1.0)*x8593))+(((-1.0)*x8592*(r10*r10)))+(((-1.0)*(r12*r12)))+((x8592*x8593)));
j4eval[0]=x8596;
j4eval[1]=((IKabs(r12))+(IKabs((x8594+(((-1.0)*x8595))))));
j4eval[2]=IKsign(x8596);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8597=cj5*cj5;
IkReal x8598=r11*r11;
IkReal x8599=(cj5*r10);
IkReal x8600=(r11*sj5);
CheckValue<IkReal> x8601=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8597*(r10*r10)))+(((-1.0)*x8598))+(((-1.0)*(r12*r12)))+((x8597*x8598))+(((2.0)*x8599*x8600)))),-1);
if(!x8601.valid){
continue;
}
CheckValue<IkReal> x8602 = IKatan2WithCheck(IkReal((x8599+(((-1.0)*x8600)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8601.value)))+(x8602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8603=IKsin(j4);
IkReal x8604=IKcos(j4);
IkReal x8605=(cj5*r10);
IkReal x8606=(r01*sj5);
IkReal x8607=(cj5*r00);
IkReal x8608=(cj5*r20);
IkReal x8609=((1.0)*x8604);
IkReal x8610=((1.0)*x8603);
IkReal x8611=(sj5*x8603);
evalcond[0]=((((-1.0)*x8608*x8610))+(((-1.0)*r22*x8609))+((r21*x8611)));
evalcond[1]=((((-1.0)*x8607*x8610))+(((-1.0)*r02*x8609))+((x8603*x8606)));
evalcond[2]=(((x8604*x8605))+(((-1.0)*r12*x8610))+(((-1.0)*r11*sj5*x8609)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8609))+((r11*x8611))+(((-1.0)*x8605*x8610)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8604*x8608))+(((-1.0)*r22*x8610))+(((-1.0)*r21*sj5*x8609)));
evalcond[5]=((((-1.0)*r02*x8610))+(((-1.0)*sj1*sj2))+((x8604*x8607))+((cj1*cj2))+(((-1.0)*x8606*x8609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8612=((1.0)*cj5);
CheckValue<IkReal> x8613=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8612))+(((-1.0)*r20*sj5)))),-1);
if(!x8613.valid){
continue;
}
CheckValue<IkReal> x8614 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8612))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8613.value)))+(x8614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8615=IKsin(j4);
IkReal x8616=IKcos(j4);
IkReal x8617=(cj5*r10);
IkReal x8618=(r01*sj5);
IkReal x8619=(cj5*r00);
IkReal x8620=(cj5*r20);
IkReal x8621=((1.0)*x8616);
IkReal x8622=((1.0)*x8615);
IkReal x8623=(sj5*x8615);
evalcond[0]=(((r21*x8623))+(((-1.0)*x8620*x8622))+(((-1.0)*r22*x8621)));
evalcond[1]=(((x8615*x8618))+(((-1.0)*x8619*x8622))+(((-1.0)*r02*x8621)));
evalcond[2]=(((x8616*x8617))+(((-1.0)*r12*x8622))+(((-1.0)*r11*sj5*x8621)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8621))+(((-1.0)*x8617*x8622))+((r11*x8623)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8616*x8620))+(((-1.0)*r21*sj5*x8621))+(((-1.0)*r22*x8622)));
evalcond[5]=(((x8616*x8619))+(((-1.0)*x8618*x8621))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x8622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8624 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8624.valid){
continue;
}
CheckValue<IkReal> x8625=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8624.value)+(((1.5707963267949)*(x8625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8626=IKsin(j4);
IkReal x8627=IKcos(j4);
IkReal x8628=(cj5*r10);
IkReal x8629=(r01*sj5);
IkReal x8630=(cj5*r00);
IkReal x8631=(cj5*r20);
IkReal x8632=((1.0)*x8627);
IkReal x8633=((1.0)*x8626);
IkReal x8634=(sj5*x8626);
evalcond[0]=(((r21*x8634))+(((-1.0)*r22*x8632))+(((-1.0)*x8631*x8633)));
evalcond[1]=(((x8626*x8629))+(((-1.0)*x8630*x8633))+(((-1.0)*r02*x8632)));
evalcond[2]=(((x8627*x8628))+(((-1.0)*r12*x8633))+(((-1.0)*r11*sj5*x8632)));
evalcond[3]=((-1.0)+(((-1.0)*x8628*x8633))+(((-1.0)*r12*x8632))+((r11*x8634)));
evalcond[4]=(((cj2*sj1))+((x8627*x8631))+((cj1*sj2))+(((-1.0)*r21*sj5*x8632))+(((-1.0)*r22*x8633)));
evalcond[5]=(((x8627*x8630))+(((-1.0)*x8629*x8632))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x8633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8635=((-1.0)*r00);
IkReal x8637 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8637)==0){
continue;
}
IkReal x8636=pow(x8637,-0.5);
CheckValue<IkReal> x8638 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8635),IKFAST_ATAN2_MAGTHRESH);
if(!x8638.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8638.value));
IkReal gconst145=(r01*x8636);
IkReal gconst146=(x8635*x8636);
CheckValue<IkReal> x8639 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8639.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8639.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8640=((-1.0)*r00);
IkReal x8641=x8636;
CheckValue<IkReal> x8643 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8640),IKFAST_ATAN2_MAGTHRESH);
if(!x8643.valid){
continue;
}
IkReal x8642=((-1.0)*(x8643.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8642;
IkReal gconst144=x8642;
IkReal gconst145=(r01*x8641);
IkReal gconst146=(x8640*x8641);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8644=((1.0)*sj0);
IkReal x8645=((1.0)*gconst145);
CheckValue<IkReal> x8646=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x8645)))),-1);
if(!x8646.valid){
continue;
}
CheckValue<IkReal> x8647 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8644)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8645))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8646.value)))+(x8647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8648=IKsin(j4);
IkReal x8649=IKcos(j4);
IkReal x8650=(gconst146*r10);
IkReal x8651=(sj1*sj2);
IkReal x8652=(gconst146*r20);
IkReal x8653=(gconst146*r00);
IkReal x8654=((1.0)*x8649);
IkReal x8655=((1.0)*x8648);
IkReal x8656=(gconst145*x8648);
IkReal x8657=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8656))+(((-1.0)*x8652*x8655))+(((-1.0)*r22*x8654)));
evalcond[1]=((((-1.0)*r12*x8654))+cj0+((r11*x8656))+(((-1.0)*x8650*x8655)));
evalcond[2]=(((r01*x8656))+(((-1.0)*sj0))+(((-1.0)*x8653*x8655))+(((-1.0)*r02*x8654)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8654))+((x8649*x8652))+(((-1.0)*r22*x8655)));
evalcond[4]=((((-1.0)*gconst145*r01*x8654))+((x8649*x8653))+((cj0*x8651))+(((-1.0)*cj0*x8657))+(((-1.0)*r02*x8655)));
evalcond[5]=((((-1.0)*gconst145*r11*x8654))+(((-1.0)*r12*x8655))+(((-1.0)*sj0*x8657))+((sj0*x8651))+((x8649*x8650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8658=((1.0)*gconst146);
CheckValue<IkReal> x8659 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8658))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8659.valid){
continue;
}
CheckValue<IkReal> x8660=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8658))+(((-1.0)*gconst145*r10)))),-1);
if(!x8660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8659.value)+(((1.5707963267949)*(x8660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8661=IKsin(j4);
IkReal x8662=IKcos(j4);
IkReal x8663=(gconst146*r10);
IkReal x8664=(sj1*sj2);
IkReal x8665=(gconst146*r20);
IkReal x8666=(gconst146*r00);
IkReal x8667=((1.0)*x8662);
IkReal x8668=((1.0)*x8661);
IkReal x8669=(gconst145*x8661);
IkReal x8670=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8667))+(((-1.0)*x8665*x8668))+((r21*x8669)));
evalcond[1]=(cj0+(((-1.0)*r12*x8667))+((r11*x8669))+(((-1.0)*x8663*x8668)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8667))+((r01*x8669))+(((-1.0)*x8666*x8668)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8668))+((x8662*x8665))+(((-1.0)*gconst145*r21*x8667)));
evalcond[4]=((((-1.0)*cj0*x8670))+((cj0*x8664))+(((-1.0)*r02*x8668))+((x8662*x8666))+(((-1.0)*gconst145*r01*x8667)));
evalcond[5]=(((sj0*x8664))+(((-1.0)*gconst145*r11*x8667))+(((-1.0)*r12*x8668))+((x8662*x8663))+(((-1.0)*sj0*x8670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8671=((-1.0)*r01);
IkReal x8673 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8673)==0){
continue;
}
IkReal x8672=pow(x8673,-0.5);
CheckValue<IkReal> x8674 = IKatan2WithCheck(IkReal(x8671),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8674.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8674.value))));
IkReal gconst148=(x8671*x8672);
IkReal gconst149=((1.0)*r00*x8672);
CheckValue<IkReal> x8675 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8675.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8675.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8676=((-1.0)*r01);
CheckValue<IkReal> x8679 = IKatan2WithCheck(IkReal(x8676),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8679.valid){
continue;
}
IkReal x8677=((1.0)*(x8679.value));
IkReal x8678=x8672;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8677)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8677)));
IkReal gconst148=(x8676*x8678);
IkReal gconst149=((1.0)*r00*x8678);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8680=((-1.0)*r01);
CheckValue<IkReal> x8683 = IKatan2WithCheck(IkReal(x8680),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8683.valid){
continue;
}
IkReal x8681=((1.0)*(x8683.value));
IkReal x8682=x8672;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8681)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8681)));
IkReal gconst148=(x8680*x8682);
IkReal gconst149=((1.0)*r00*x8682);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8684=((-1.0)*r01);
CheckValue<IkReal> x8687 = IKatan2WithCheck(IkReal(x8684),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8687.valid){
continue;
}
IkReal x8685=((1.0)*(x8687.value));
IkReal x8686=x8672;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8685)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8685)));
IkReal gconst148=(x8684*x8686);
IkReal gconst149=((1.0)*r00*x8686);
IkReal x8688=r02*r02;
IkReal x8689=(r12*sj0);
IkReal x8690=((1.0)*cj0);
IkReal x8691=x8672;
j4eval[0]=((IKabs((((cj0*x8688*x8691))+(((-1.0)*x8690*x8691))+((r02*x8689*x8691)))))+(IKabs(((((-1.0)*r02*x8690))+(((-1.0)*x8689))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8692=((1.0)*sj0);
IkReal x8693=((1.0)*gconst148);
CheckValue<IkReal> x8694=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8693)))),-1);
if(!x8694.valid){
continue;
}
CheckValue<IkReal> x8695 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8692)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8692))+(((-1.0)*cj0*r01*x8693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8694.value)))+(x8695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8696=IKsin(j4);
IkReal x8697=IKcos(j4);
IkReal x8698=(gconst148*r11);
IkReal x8699=(sj1*sj2);
IkReal x8700=((1.0)*x8697);
IkReal x8701=(gconst149*x8697);
IkReal x8702=(gconst148*x8696);
IkReal x8703=((1.0)*cj1*cj2);
IkReal x8704=((1.0)*x8696);
evalcond[0]=(((r21*x8702))+(((-1.0)*gconst149*r20*x8704))+(((-1.0)*r22*x8700)));
evalcond[1]=((((-1.0)*gconst149*r10*x8704))+cj0+((x8696*x8698))+(((-1.0)*r12*x8700)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8704))+(((-1.0)*r02*x8700))+((r01*x8702)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8700))+((cj1*sj2))+(((-1.0)*r22*x8704))+((r20*x8701)));
evalcond[4]=((((-1.0)*cj0*x8703))+((cj0*x8699))+(((-1.0)*gconst148*r01*x8700))+(((-1.0)*r02*x8704))+((r00*x8701)));
evalcond[5]=(((r10*x8701))+(((-1.0)*x8698*x8700))+((sj0*x8699))+(((-1.0)*sj0*x8703))+(((-1.0)*r12*x8704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8705=((1.0)*gconst149);
CheckValue<IkReal> x8706=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8705)))),-1);
if(!x8706.valid){
continue;
}
CheckValue<IkReal> x8707 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8705))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8706.value)))+(x8707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8708=IKsin(j4);
IkReal x8709=IKcos(j4);
IkReal x8710=(gconst148*r11);
IkReal x8711=(sj1*sj2);
IkReal x8712=((1.0)*x8709);
IkReal x8713=(gconst149*x8709);
IkReal x8714=(gconst148*x8708);
IkReal x8715=((1.0)*cj1*cj2);
IkReal x8716=((1.0)*x8708);
evalcond[0]=((((-1.0)*r22*x8712))+(((-1.0)*gconst149*r20*x8716))+((r21*x8714)));
evalcond[1]=(cj0+(((-1.0)*r12*x8712))+((x8708*x8710))+(((-1.0)*gconst149*r10*x8716)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8712))+(((-1.0)*gconst149*r00*x8716))+((r01*x8714)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8712))+((cj1*sj2))+(((-1.0)*r22*x8716))+((r20*x8713)));
evalcond[4]=(((cj0*x8711))+(((-1.0)*gconst148*r01*x8712))+(((-1.0)*r02*x8716))+((r00*x8713))+(((-1.0)*cj0*x8715)));
evalcond[5]=((((-1.0)*sj0*x8715))+(((-1.0)*r12*x8716))+((sj0*x8711))+(((-1.0)*x8710*x8712))+((r10*x8713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8717=((1.0)*gconst149);
CheckValue<IkReal> x8718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8717))+(((-1.0)*gconst148*r00)))),-1);
if(!x8718.valid){
continue;
}
CheckValue<IkReal> x8719 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8718.value)))+(x8719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8720=IKsin(j4);
IkReal x8721=IKcos(j4);
IkReal x8722=(gconst148*r11);
IkReal x8723=(sj1*sj2);
IkReal x8724=((1.0)*x8721);
IkReal x8725=(gconst149*x8721);
IkReal x8726=(gconst148*x8720);
IkReal x8727=((1.0)*cj1*cj2);
IkReal x8728=((1.0)*x8720);
evalcond[0]=(((r21*x8726))+(((-1.0)*gconst149*r20*x8728))+(((-1.0)*r22*x8724)));
evalcond[1]=((((-1.0)*gconst149*r10*x8728))+cj0+((x8720*x8722))+(((-1.0)*r12*x8724)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8728))+(((-1.0)*r02*x8724))+((r01*x8726)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8724))+((cj1*sj2))+((r20*x8725))+(((-1.0)*r22*x8728)));
evalcond[4]=((((-1.0)*cj0*x8727))+((cj0*x8723))+(((-1.0)*gconst148*r01*x8724))+(((-1.0)*r02*x8728))+((r00*x8725)));
evalcond[5]=(((r10*x8725))+(((-1.0)*sj0*x8727))+(((-1.0)*x8722*x8724))+((sj0*x8723))+(((-1.0)*r12*x8728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8729=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8729;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8729);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8730=((1.0)*cj5);
IkReal x8731=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8730)));
j4eval[0]=x8731;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8730)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8731);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8732=cj5*cj5;
IkReal x8733=r01*r01;
IkReal x8734=(r01*sj5);
IkReal x8735=(cj5*r00);
IkReal x8736=((((-1.0)*x8732*(r00*r00)))+((x8732*x8733))+(((-1.0)*(r02*r02)))+(((-1.0)*x8733))+(((2.0)*x8734*x8735)));
j4eval[0]=x8736;
j4eval[1]=IKsign(x8736);
j4eval[2]=((IKabs(r02))+(IKabs((x8735+(((-1.0)*x8734))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8737=cj5*cj5;
IkReal x8738=r01*r01;
IkReal x8739=(r01*sj5);
IkReal x8740=(cj5*r00);
CheckValue<IkReal> x8741=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x8738))+(((2.0)*x8739*x8740))+(((-1.0)*x8737*(r00*r00)))+((x8737*x8738)))),-1);
if(!x8741.valid){
continue;
}
CheckValue<IkReal> x8742 = IKatan2WithCheck(IkReal((x8740+(((-1.0)*x8739)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8741.value)))+(x8742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8743=IKsin(j4);
IkReal x8744=IKcos(j4);
IkReal x8745=(cj5*r10);
IkReal x8746=(r01*sj5);
IkReal x8747=(cj5*r00);
IkReal x8748=(cj5*r20);
IkReal x8749=((1.0)*x8744);
IkReal x8750=((1.0)*x8743);
IkReal x8751=(sj5*x8743);
evalcond[0]=((((-1.0)*r22*x8749))+((r21*x8751))+(((-1.0)*x8748*x8750)));
evalcond[1]=((((-1.0)*r12*x8749))+((r11*x8751))+(((-1.0)*x8745*x8750)));
evalcond[2]=(((x8744*x8747))+(((-1.0)*r02*x8750))+(((-1.0)*x8746*x8749)));
evalcond[3]=((-1.0)+((x8743*x8746))+(((-1.0)*r02*x8749))+(((-1.0)*x8747*x8750)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8749))+(((-1.0)*r22*x8750))+((cj1*sj2))+((x8744*x8748)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8744*x8745))+(((-1.0)*r12*x8750))+(((-1.0)*r11*sj5*x8749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8752=((1.0)*cj5);
CheckValue<IkReal> x8753=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8752)))),-1);
if(!x8753.valid){
continue;
}
CheckValue<IkReal> x8754 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8753.value)))+(x8754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8755=IKsin(j4);
IkReal x8756=IKcos(j4);
IkReal x8757=(cj5*r10);
IkReal x8758=(r01*sj5);
IkReal x8759=(cj5*r00);
IkReal x8760=(cj5*r20);
IkReal x8761=((1.0)*x8756);
IkReal x8762=((1.0)*x8755);
IkReal x8763=(sj5*x8755);
evalcond[0]=((((-1.0)*r22*x8761))+(((-1.0)*x8760*x8762))+((r21*x8763)));
evalcond[1]=((((-1.0)*x8757*x8762))+(((-1.0)*r12*x8761))+((r11*x8763)));
evalcond[2]=((((-1.0)*r02*x8762))+((x8756*x8759))+(((-1.0)*x8758*x8761)));
evalcond[3]=((-1.0)+(((-1.0)*x8759*x8762))+(((-1.0)*r02*x8761))+((x8755*x8758)));
evalcond[4]=(((x8756*x8760))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8762))+(((-1.0)*r21*sj5*x8761)));
evalcond[5]=((((-1.0)*r11*sj5*x8761))+(((-1.0)*cj1*cj2))+((x8756*x8757))+((sj1*sj2))+(((-1.0)*r12*x8762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8764=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8764.valid){
continue;
}
CheckValue<IkReal> x8765 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8764.value)))+(x8765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8766=IKsin(j4);
IkReal x8767=IKcos(j4);
IkReal x8768=(cj5*r10);
IkReal x8769=(r01*sj5);
IkReal x8770=(cj5*r00);
IkReal x8771=(cj5*r20);
IkReal x8772=((1.0)*x8767);
IkReal x8773=((1.0)*x8766);
IkReal x8774=(sj5*x8766);
evalcond[0]=((((-1.0)*r22*x8772))+((r21*x8774))+(((-1.0)*x8771*x8773)));
evalcond[1]=((((-1.0)*x8768*x8773))+(((-1.0)*r12*x8772))+((r11*x8774)));
evalcond[2]=((((-1.0)*r02*x8773))+((x8767*x8770))+(((-1.0)*x8769*x8772)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8772))+((x8766*x8769))+(((-1.0)*x8770*x8773)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8767*x8771))+(((-1.0)*r22*x8773))+(((-1.0)*r21*sj5*x8772)));
evalcond[5]=((((-1.0)*r11*sj5*x8772))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8767*x8768))+(((-1.0)*r12*x8773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8775=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8775;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8776=((1.0)*cj5);
IkReal x8777=((((-1.0)*r21*x8776))+(((-1.0)*r20*sj5)));
j4eval[0]=x8777;
j4eval[1]=((IKabs(((((-1.0)*r10*x8776))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8778=cj5*cj5;
IkReal x8779=r01*r01;
IkReal x8780=(cj5*r00);
IkReal x8781=(r01*sj5);
IkReal x8782=(((x8778*(r00*r00)))+x8779+(((-1.0)*x8778*x8779))+(r02*r02)+(((-2.0)*x8780*x8781)));
j4eval[0]=x8782;
j4eval[1]=((IKabs(r02))+(IKabs((x8780+(((-1.0)*x8781))))));
j4eval[2]=IKsign(x8782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8783=cj5*cj5;
IkReal x8784=r01*r01;
IkReal x8785=(r01*sj5);
IkReal x8786=(cj5*r00);
CheckValue<IkReal> x8787=IKPowWithIntegerCheck(IKsign((x8784+(((-2.0)*x8785*x8786))+(((-1.0)*x8783*x8784))+(r02*r02)+((x8783*(r00*r00))))),-1);
if(!x8787.valid){
continue;
}
CheckValue<IkReal> x8788 = IKatan2WithCheck(IkReal((x8786+(((-1.0)*x8785)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8787.value)))+(x8788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8789=IKsin(j4);
IkReal x8790=IKcos(j4);
IkReal x8791=(cj5*r10);
IkReal x8792=(r01*sj5);
IkReal x8793=(cj5*r00);
IkReal x8794=(cj5*r20);
IkReal x8795=((1.0)*x8790);
IkReal x8796=((1.0)*x8789);
IkReal x8797=(sj5*x8789);
evalcond[0]=(((r21*x8797))+(((-1.0)*x8794*x8796))+(((-1.0)*r22*x8795)));
evalcond[1]=((((-1.0)*r12*x8795))+((r11*x8797))+(((-1.0)*x8791*x8796)));
evalcond[2]=((((-1.0)*x8792*x8795))+(((-1.0)*r02*x8796))+((x8790*x8793)));
evalcond[3]=((1.0)+(((-1.0)*x8793*x8796))+((x8789*x8792))+(((-1.0)*r02*x8795)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8790*x8794))+(((-1.0)*r22*x8796))+(((-1.0)*r21*sj5*x8795)));
evalcond[5]=((((-1.0)*r12*x8796))+(((-1.0)*r11*sj5*x8795))+(((-1.0)*sj1*sj2))+((x8790*x8791))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8798=((1.0)*cj5);
CheckValue<IkReal> x8799 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8799.valid){
continue;
}
CheckValue<IkReal> x8800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8798))+(((-1.0)*r20*sj5)))),-1);
if(!x8800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8799.value)+(((1.5707963267949)*(x8800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8801=IKsin(j4);
IkReal x8802=IKcos(j4);
IkReal x8803=(cj5*r10);
IkReal x8804=(r01*sj5);
IkReal x8805=(cj5*r00);
IkReal x8806=(cj5*r20);
IkReal x8807=((1.0)*x8802);
IkReal x8808=((1.0)*x8801);
IkReal x8809=(sj5*x8801);
evalcond[0]=(((r21*x8809))+(((-1.0)*x8806*x8808))+(((-1.0)*r22*x8807)));
evalcond[1]=((((-1.0)*r12*x8807))+(((-1.0)*x8803*x8808))+((r11*x8809)));
evalcond[2]=(((x8802*x8805))+(((-1.0)*r02*x8808))+(((-1.0)*x8804*x8807)));
evalcond[3]=((1.0)+((x8801*x8804))+(((-1.0)*r02*x8807))+(((-1.0)*x8805*x8808)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8808))+((x8802*x8806))+((cj1*sj2))+(((-1.0)*r21*sj5*x8807)));
evalcond[5]=((((-1.0)*r12*x8808))+((x8802*x8803))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8810 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8810.valid){
continue;
}
CheckValue<IkReal> x8811=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8810.value)+(((1.5707963267949)*(x8811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8812=IKsin(j4);
IkReal x8813=IKcos(j4);
IkReal x8814=(cj5*r10);
IkReal x8815=(r01*sj5);
IkReal x8816=(cj5*r00);
IkReal x8817=(cj5*r20);
IkReal x8818=((1.0)*x8813);
IkReal x8819=((1.0)*x8812);
IkReal x8820=(sj5*x8812);
evalcond[0]=((((-1.0)*r22*x8818))+((r21*x8820))+(((-1.0)*x8817*x8819)));
evalcond[1]=((((-1.0)*r12*x8818))+((r11*x8820))+(((-1.0)*x8814*x8819)));
evalcond[2]=((((-1.0)*r02*x8819))+((x8813*x8816))+(((-1.0)*x8815*x8818)));
evalcond[3]=((1.0)+(((-1.0)*x8816*x8819))+(((-1.0)*r02*x8818))+((x8812*x8815)));
evalcond[4]=((((-1.0)*r22*x8819))+((cj2*sj1))+((x8813*x8817))+((cj1*sj2))+(((-1.0)*r21*sj5*x8818)));
evalcond[5]=((((-1.0)*r12*x8819))+((x8813*x8814))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8821=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8821);
rxp1_1=(px*r21);
rxp1_2=(r11*x8821);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8822=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8822);
rxp1_1=(px*r21);
rxp1_2=(r11*x8822);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8823=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8823);
rxp1_1=(px*r21);
rxp1_2=(r11*x8823);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8826=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8826.valid){
continue;
}
IkReal x8824=x8826.value;
IkReal x8825=(sj0*x8824);
cj4array[0]=((((-1.0)*sj1*sj2*x8825))+((cj1*cj2*x8825)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8827=IKsin(j4);
IkReal x8828=IKcos(j4);
IkReal x8829=(r21*sj5);
IkReal x8830=(cj5*r20);
IkReal x8831=((1.0)*x8827);
IkReal x8832=((1.0)*x8828);
evalcond[0]=((-1.0)*r02*x8827);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8832)));
evalcond[2]=((((-1.0)*x8830*x8831))+((x8827*x8829)));
evalcond[3]=(((r11*sj5*x8827))+(((-1.0)*cj5*r10*x8831)));
evalcond[4]=(((cj2*sj1))+((x8828*x8830))+((cj1*sj2))+(((-1.0)*x8829*x8832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8835=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8835.valid){
continue;
}
IkReal x8833=x8835.value;
IkReal x8834=((1.0)*x8833);
cj4array[0]=((((-1.0)*cj1*sj2*x8834))+(((-1.0)*cj2*sj1*x8834)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8836=IKsin(j4);
IkReal x8837=IKcos(j4);
IkReal x8838=(r11*sj5);
IkReal x8839=((1.0)*sj0);
IkReal x8840=((1.0)*x8837);
IkReal x8841=((1.0)*cj5*x8836);
evalcond[0]=((-1.0)*r02*x8836);
evalcond[1]=((((-1.0)*r02*x8840))+(((-1.0)*x8839)));
evalcond[2]=((((-1.0)*r20*x8841))+((r21*sj5*x8836)));
evalcond[3]=(((x8836*x8838))+(((-1.0)*r10*x8841)));
evalcond[4]=((((-1.0)*cj1*cj2*x8839))+(((-1.0)*x8838*x8840))+((cj5*r10*x8837))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8842=IKPowWithIntegerCheck(r02,-1);
if(!x8842.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8842.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8843=IKsin(j4);
IkReal x8844=IKcos(j4);
IkReal x8845=(cj5*x8844);
IkReal x8846=(sj5*x8843);
IkReal x8847=((1.0)*sj5*x8844);
IkReal x8848=((1.0)*cj5*x8843);
evalcond[0]=((-1.0)*r02*x8843);
evalcond[1]=(((r21*x8846))+(((-1.0)*r20*x8848)));
evalcond[2]=((((-1.0)*r10*x8848))+((r11*x8846)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8845))+(((-1.0)*r21*x8847)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((r10*x8845))+((sj0*sj1*sj2))+(((-1.0)*r11*x8847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8849=((1.0)*sj0);
IkReal x8850=((1.0)*cj0);
CheckValue<IkReal> x8851=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8851.valid){
continue;
}
CheckValue<IkReal> x8852 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8850))+(((-1.0)*r12*x8849)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8850))+(((-1.0)*r11*sj5*x8849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8851.value)))+(x8852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8853=IKsin(j4);
IkReal x8854=IKcos(j4);
IkReal x8855=(cj5*r10);
IkReal x8856=(sj1*sj2);
IkReal x8857=(r01*sj5);
IkReal x8858=(cj5*r00);
IkReal x8859=(cj5*r20);
IkReal x8860=((1.0)*x8854);
IkReal x8861=((1.0)*cj1*cj2);
IkReal x8862=((1.0)*x8853);
IkReal x8863=(sj5*x8853);
evalcond[0]=(((r21*x8863))+(((-1.0)*r22*x8860))+(((-1.0)*x8859*x8862)));
evalcond[1]=(cj0+(((-1.0)*x8855*x8862))+((r11*x8863))+(((-1.0)*r12*x8860)));
evalcond[2]=((((-1.0)*sj0))+((x8853*x8857))+(((-1.0)*x8858*x8862))+(((-1.0)*r02*x8860)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8862))+(((-1.0)*r21*sj5*x8860))+((x8854*x8859)));
evalcond[4]=((((-1.0)*x8857*x8860))+(((-1.0)*cj0*x8861))+((cj0*x8856))+((x8854*x8858))+(((-1.0)*r02*x8862)));
evalcond[5]=(((sj0*x8856))+(((-1.0)*r11*sj5*x8860))+(((-1.0)*sj0*x8861))+(((-1.0)*r12*x8862))+((x8854*x8855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8864=((1.0)*cj5);
CheckValue<IkReal> x8865=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8864)))),-1);
if(!x8865.valid){
continue;
}
CheckValue<IkReal> x8866 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8865.value)))+(x8866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8867=IKsin(j4);
IkReal x8868=IKcos(j4);
IkReal x8869=(cj5*r10);
IkReal x8870=(sj1*sj2);
IkReal x8871=(r01*sj5);
IkReal x8872=(cj5*r00);
IkReal x8873=(cj5*r20);
IkReal x8874=((1.0)*x8868);
IkReal x8875=((1.0)*cj1*cj2);
IkReal x8876=((1.0)*x8867);
IkReal x8877=(sj5*x8867);
evalcond[0]=((((-1.0)*x8873*x8876))+(((-1.0)*r22*x8874))+((r21*x8877)));
evalcond[1]=(cj0+(((-1.0)*x8869*x8876))+((r11*x8877))+(((-1.0)*r12*x8874)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8874))+(((-1.0)*x8872*x8876))+((x8867*x8871)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8874))+(((-1.0)*r22*x8876))+((cj1*sj2))+((x8868*x8873)));
evalcond[4]=((((-1.0)*x8871*x8874))+(((-1.0)*r02*x8876))+(((-1.0)*cj0*x8875))+((cj0*x8870))+((x8868*x8872)));
evalcond[5]=((((-1.0)*r11*sj5*x8874))+(((-1.0)*r12*x8876))+(((-1.0)*sj0*x8875))+((x8868*x8869))+((sj0*x8870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8878=((1.0)*cj5);
CheckValue<IkReal> x8879=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8878))+(((-1.0)*r00*sj5)))),-1);
if(!x8879.valid){
continue;
}
CheckValue<IkReal> x8880 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8878)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8879.value)))+(x8880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8881=IKsin(j4);
IkReal x8882=IKcos(j4);
IkReal x8883=(cj5*r10);
IkReal x8884=(sj1*sj2);
IkReal x8885=(r01*sj5);
IkReal x8886=(cj5*r00);
IkReal x8887=(cj5*r20);
IkReal x8888=((1.0)*x8882);
IkReal x8889=((1.0)*cj1*cj2);
IkReal x8890=((1.0)*x8881);
IkReal x8891=(sj5*x8881);
evalcond[0]=((((-1.0)*r22*x8888))+(((-1.0)*x8887*x8890))+((r21*x8891)));
evalcond[1]=(cj0+(((-1.0)*r12*x8888))+(((-1.0)*x8883*x8890))+((r11*x8891)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8888))+((x8881*x8885))+(((-1.0)*x8886*x8890)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8882*x8887))+(((-1.0)*r21*sj5*x8888))+(((-1.0)*r22*x8890)));
evalcond[4]=((((-1.0)*cj0*x8889))+((x8882*x8886))+(((-1.0)*r02*x8890))+((cj0*x8884))+(((-1.0)*x8885*x8888)));
evalcond[5]=(((x8882*x8883))+((sj0*x8884))+(((-1.0)*r12*x8890))+(((-1.0)*r11*sj5*x8888))+(((-1.0)*sj0*x8889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8892=cj1*cj1;
IkReal x8893=cj2*cj2;
IkReal x8894=(sj1*sj2);
IkReal x8895=((156900000.0)*py);
IkReal x8896=(cj1*cj5);
IkReal x8897=((14850585.0)*cj2);
IkReal x8898=(r00*sj5);
IkReal x8899=((16090500.0)*cj1);
IkReal x8900=((4132419.0)*cj5);
IkReal x8901=(r10*sj5);
IkReal x8902=((170000000.0)*cj1);
IkReal x8903=((156900000.0)*px);
IkReal x8904=(cj1*cj2);
IkReal x8905=((14850585.0)*cj5);
CheckValue<IkReal> x8906 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+(((-4132419.0)*x8898))+((r11*x8896*x8897))+(((-1.0)*x8894*x8895))+((py*x8902))+(((-14850585.0)*x8894*x8901))+(((16090500.0)*r11*x8896))+(((-1.0)*r11*x8894*x8905))+((cj1*x8897*x8901))+(((-1.0)*r01*x8900))+((x8899*x8901))+((x8895*x8904)))),IkReal((((r11*x8900))+(((16090500.0)*r01*x8896))+(((43660000.0)*py))+((x8903*x8904))+((cj1*x8897*x8898))+(((4132419.0)*x8901))+((r01*x8896*x8897))+((px*x8902))+(((-14850585.0)*x8894*x8898))+(((-1.0)*r01*x8894*x8905))+(((-1.0)*x8894*x8903))+((x8898*x8899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8906.valid){
continue;
}
CheckValue<IkReal> x8907=IKPowWithIntegerCheck(IKsign(((66309514.0)+(((-61544025.0)*x8893))+(((10705975.0)*x8892))+(((-123088050.0)*x8894*x8904))+(((-133365000.0)*cj1*x8894))+(((133365000.0)*cj2*x8892))+(((123088050.0)*x8892*x8893)))),-1);
if(!x8907.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8906.value)+(((1.5707963267949)*(x8907.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8908=IKcos(j0);
IkReal x8909=IKsin(j0);
IkReal x8910=((0.425)*cj1);
IkReal x8911=(cj1*cj2);
IkReal x8912=(sj1*sj2);
IkReal x8913=((0.09465)*cj5);
IkReal x8914=((0.09465)*sj5);
IkReal x8915=((0.39225)*x8909);
IkReal x8916=((0.39225)*x8908);
evalcond[0]=((((-1.0)*r01*x8913))+((x8911*x8916))+(((-1.0)*px))+(((-1.0)*x8912*x8916))+(((-0.10915)*x8909))+((x8908*x8910))+(((-1.0)*r00*x8914)));
evalcond[1]=(((x8911*x8915))+(((0.10915)*x8908))+(((-1.0)*r11*x8913))+(((-1.0)*py))+(((-1.0)*x8912*x8915))+((x8909*x8910))+(((-1.0)*r10*x8914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8917=((1.0)*cj5);
IkReal x8918=((((-1.0)*r01*x8917))+(((-1.0)*r00*sj5)));
j4eval[0]=x8918;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8917)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8919=((1.0)*cj5);
IkReal x8920=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8919)));
j4eval[0]=x8920;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8919))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8920);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8921=((1.0)*sj0);
IkReal x8922=((1.0)*cj0);
IkReal x8923=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8923;
j4eval[1]=((IKabs(((((-1.0)*r02*x8922))+(((-1.0)*r12*x8921)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x8921))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8922))))));
j4eval[2]=IKsign(x8923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8924=((-1.0)*r20);
IkReal x8926 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8926)==0){
continue;
}
IkReal x8925=pow(x8926,-0.5);
CheckValue<IkReal> x8927 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8924),IKFAST_ATAN2_MAGTHRESH);
if(!x8927.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8927.value));
IkReal gconst1=(r21*x8925);
IkReal gconst2=(x8924*x8925);
CheckValue<IkReal> x8928 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8928.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8928.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8929=((-1.0)*r20);
IkReal x8930=x8925;
CheckValue<IkReal> x8932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8929),IKFAST_ATAN2_MAGTHRESH);
if(!x8932.valid){
continue;
}
IkReal x8931=((-1.0)*(x8932.value));
sj5=gconst1;
cj5=gconst2;
j5=x8931;
IkReal gconst0=x8931;
IkReal gconst1=(r21*x8930);
IkReal gconst2=(x8929*x8930);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8933=((-1.0)*r20);
IkReal x8934=x8925;
CheckValue<IkReal> x8936 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8933),IKFAST_ATAN2_MAGTHRESH);
if(!x8936.valid){
continue;
}
IkReal x8935=((-1.0)*(x8936.value));
sj5=gconst1;
cj5=gconst2;
j5=x8935;
IkReal gconst0=x8935;
IkReal gconst1=(r21*x8934);
IkReal gconst2=(x8933*x8934);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8937=((-1.0)*r20);
IkReal x8938=x8925;
CheckValue<IkReal> x8940 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8937),IKFAST_ATAN2_MAGTHRESH);
if(!x8940.valid){
continue;
}
IkReal x8939=((-1.0)*(x8940.value));
sj5=gconst1;
cj5=gconst2;
j5=x8939;
IkReal gconst0=x8939;
IkReal gconst1=(r21*x8938);
IkReal gconst2=(x8937*x8938);
IkReal x8941=r22*r22;
CheckValue<IkReal> x8945=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8941))),-1);
if(!x8945.valid){
continue;
}
IkReal x8942=x8945.value;
IkReal x8943=(sj3*x8942);
IkReal x8944=(((x8943*(r20*r20*r20*r20)))+((x8943*(r21*r21*r21*r21)))+((sj3*x8941))+(((2.0)*x8943*(r20*r20)*(r21*r21))));
j4eval[0]=x8944;
j4eval[1]=IKsign(x8944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8946=((-1.0)*r20);
IkReal x8947=x8925;
CheckValue<IkReal> x8949 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8946),IKFAST_ATAN2_MAGTHRESH);
if(!x8949.valid){
continue;
}
IkReal x8948=((-1.0)*(x8949.value));
sj5=gconst1;
cj5=gconst2;
j5=x8948;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8948;
IkReal gconst1=(r21*x8947);
IkReal gconst2=(x8946*x8947);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8950=((-1.0)*r20);
IkReal x8951=x8925;
CheckValue<IkReal> x8953 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8950),IKFAST_ATAN2_MAGTHRESH);
if(!x8953.valid){
continue;
}
IkReal x8952=((-1.0)*(x8953.value));
sj5=gconst1;
cj5=gconst2;
j5=x8952;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8952;
IkReal gconst1=(r21*x8951);
IkReal gconst2=(x8950*x8951);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8954=((-1.0)*r20);
IkReal x8955=x8925;
CheckValue<IkReal> x8957 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8954),IKFAST_ATAN2_MAGTHRESH);
if(!x8957.valid){
continue;
}
IkReal x8956=((-1.0)*(x8957.value));
sj5=gconst1;
cj5=gconst2;
j5=x8956;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8956;
IkReal gconst1=(r21*x8955);
IkReal gconst2=(x8954*x8955);
IkReal x8958=((1.0)*(r22*r22));
CheckValue<IkReal> x8962=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8958))),-1);
if(!x8962.valid){
continue;
}
IkReal x8959=x8962.value;
IkReal x8960=((1.0)*x8959);
IkReal x8961=((((-1.0)*x8960*(r20*r20*r20*r20)))+(((-1.0)*x8960*(r21*r21*r21*r21)))+(((-2.0)*x8959*(r20*r20)*(r21*r21)))+(((-1.0)*x8958)));
j4eval[0]=x8961;
j4eval[1]=IKsign(x8961);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8963=((-1.0)*r20);
IkReal x8964=x8925;
CheckValue<IkReal> x8966 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8963),IKFAST_ATAN2_MAGTHRESH);
if(!x8966.valid){
continue;
}
IkReal x8965=((-1.0)*(x8966.value));
sj5=gconst1;
cj5=gconst2;
j5=x8965;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8965;
IkReal gconst1=(r21*x8964);
IkReal gconst2=(x8963*x8964);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8967=((-1.0)*r20);
IkReal x8968=x8925;
CheckValue<IkReal> x8970 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8967),IKFAST_ATAN2_MAGTHRESH);
if(!x8970.valid){
continue;
}
IkReal x8969=((-1.0)*(x8970.value));
sj5=gconst1;
cj5=gconst2;
j5=x8969;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8969;
IkReal gconst1=(r21*x8968);
IkReal gconst2=(x8967*x8968);
IkReal x8971=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8975=IKPowWithIntegerCheck(x8971,-1);
if(!x8975.valid){
continue;
}
IkReal x8972=x8975.value;
IkReal x8973=((1.0)*x8972);
IkReal x8974=((((-1.0)*x8973*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8972))+(((-1.0)*(r12*r12)))+(((-1.0)*x8973*(r11*r11)*(r21*r21))));
j4eval[0]=x8974;
j4eval[1]=r12;
j4eval[2]=x8971;
j4eval[3]=IKsign(x8974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8976=((-1.0)*r20);
IkReal x8977=x8925;
CheckValue<IkReal> x8979 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8976),IKFAST_ATAN2_MAGTHRESH);
if(!x8979.valid){
continue;
}
IkReal x8978=((-1.0)*(x8979.value));
sj5=gconst1;
cj5=gconst2;
j5=x8978;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8978;
IkReal gconst1=(r21*x8977);
IkReal gconst2=(x8976*x8977);
IkReal x8980=r22*r22;
IkReal x8981=(cj1*r12*sj2);
IkReal x8982=(cj2*r12*sj1);
CheckValue<IkReal> x8986=IKPowWithIntegerCheck(((-1.0)+x8980),-1);
if(!x8986.valid){
continue;
}
IkReal x8983=x8986.value;
if((((1.0)+(((-1.0)*x8980)))) < -0.00001)
continue;
IkReal x8984=IKsqrt(((1.0)+(((-1.0)*x8980))));
IkReal x8985=(r22*x8983*x8984);
j4eval[0]=((IKabs((((x8981*x8985))+((x8982*x8985)))))+(IKabs(((((-1.0)*x8982))+(((-1.0)*x8981))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8987=(cj1*sj2);
IkReal x8988=(cj2*sj1);
IkReal x8989=((1.0)*r12);
IkReal x8990=(gconst1*r11);
IkReal x8991=((1.0)*gconst2*r10);
CheckValue<IkReal> x8992=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8992.valid){
continue;
}
CheckValue<IkReal> x8993 = IKatan2WithCheck(IkReal((((x8988*x8990))+((x8987*x8990))+(((-1.0)*x8987*x8991))+(((-1.0)*x8988*x8991)))),IkReal(((((-1.0)*x8988*x8989))+(((-1.0)*x8987*x8989)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8992.value)))+(x8993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8994=IKcos(j4);
IkReal x8995=IKsin(j4);
IkReal x8996=((1.0)*x8994);
IkReal x8997=(gconst1*x8994);
IkReal x8998=(gconst1*x8995);
IkReal x8999=((1.0)*gconst2*x8995);
evalcond[0]=(((r11*x8997))+((r12*x8995))+(((-1.0)*gconst2*r10*x8996)));
evalcond[1]=(((r21*x8998))+(((-1.0)*r22*x8996))+(((-1.0)*r20*x8999)));
evalcond[2]=(((r01*x8998))+(((-1.0)*r02*x8996))+(((-1.0)*r00*x8999)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8996))+((r11*x8998))+(((-1.0)*r10*x8999)));
evalcond[4]=(((cj2*sj1))+((r21*x8997))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8996))+((r22*x8995)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8997))+(((-1.0)*gconst2*r00*x8996))+((r02*x8995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9000=(gconst2*r10);
IkReal x9001=(gconst1*r11);
CheckValue<IkReal> x9002 = IKatan2WithCheck(IkReal(((((-1.0)*x9000))+x9001)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9002.valid){
continue;
}
CheckValue<IkReal> x9003=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9000*x9000)))+(((2.0)*x9000*x9001))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9001*x9001))))),-1);
if(!x9003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9002.value)+(((1.5707963267949)*(x9003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9004=IKcos(j4);
IkReal x9005=IKsin(j4);
IkReal x9006=((1.0)*x9004);
IkReal x9007=(gconst1*x9004);
IkReal x9008=(gconst1*x9005);
IkReal x9009=((1.0)*gconst2*x9005);
evalcond[0]=((((-1.0)*gconst2*r10*x9006))+((r11*x9007))+((r12*x9005)));
evalcond[1]=((((-1.0)*r22*x9006))+((r21*x9008))+(((-1.0)*r20*x9009)));
evalcond[2]=((((-1.0)*r02*x9006))+(((-1.0)*r00*x9009))+((r01*x9008)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9006))+(((-1.0)*r10*x9009))+((r11*x9008)));
evalcond[4]=(((cj2*sj1))+((r21*x9007))+((r22*x9005))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9006)));
evalcond[5]=(((r02*x9005))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9006))+((r01*x9007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9010=((1.0)*gconst2);
CheckValue<IkReal> x9011 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9011.valid){
continue;
}
CheckValue<IkReal> x9012=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9010)))),-1);
if(!x9012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9011.value)+(((1.5707963267949)*(x9012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9013=IKcos(j4);
IkReal x9014=IKsin(j4);
IkReal x9015=((1.0)*x9013);
IkReal x9016=(gconst1*x9013);
IkReal x9017=(gconst1*x9014);
IkReal x9018=((1.0)*gconst2*x9014);
evalcond[0]=(((r12*x9014))+(((-1.0)*gconst2*r10*x9015))+((r11*x9016)));
evalcond[1]=((((-1.0)*r22*x9015))+(((-1.0)*r20*x9018))+((r21*x9017)));
evalcond[2]=((((-1.0)*r00*x9018))+(((-1.0)*r02*x9015))+((r01*x9017)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9018))+(((-1.0)*r12*x9015))+((r11*x9017)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9015))+((cj1*sj2))+((r22*x9014))+((r21*x9016)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x9014))+((r01*x9016))+(((-1.0)*gconst2*r00*x9015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9019=((-1.0)*r20);
IkReal x9020=x8925;
CheckValue<IkReal> x9022 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9019),IKFAST_ATAN2_MAGTHRESH);
if(!x9022.valid){
continue;
}
IkReal x9021=((-1.0)*(x9022.value));
sj5=gconst1;
cj5=gconst2;
j5=x9021;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9021;
IkReal gconst1=(r21*x9020);
IkReal gconst2=(x9019*x9020);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9023=((-1.0)*r20);
IkReal x9024=x8925;
CheckValue<IkReal> x9026 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9023),IKFAST_ATAN2_MAGTHRESH);
if(!x9026.valid){
continue;
}
IkReal x9025=((-1.0)*(x9026.value));
sj5=gconst1;
cj5=gconst2;
j5=x9025;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9025;
IkReal gconst1=(r21*x9024);
IkReal gconst2=(x9023*x9024);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9027=((-1.0)*r20);
IkReal x9028=x8925;
CheckValue<IkReal> x9030 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9027),IKFAST_ATAN2_MAGTHRESH);
if(!x9030.valid){
continue;
}
IkReal x9029=((-1.0)*(x9030.value));
sj5=gconst1;
cj5=gconst2;
j5=x9029;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9029;
IkReal gconst1=(r21*x9028);
IkReal gconst2=(x9027*x9028);
IkReal x9031=r22*r22;
IkReal x9032=(cj1*r12*sj2);
IkReal x9033=(cj2*r12*sj1);
CheckValue<IkReal> x9037=IKPowWithIntegerCheck(((-1.0)+x9031),-1);
if(!x9037.valid){
continue;
}
IkReal x9034=x9037.value;
if((((1.0)+(((-1.0)*x9031)))) < -0.00001)
continue;
IkReal x9035=IKsqrt(((1.0)+(((-1.0)*x9031))));
IkReal x9036=(r22*x9034*x9035);
j4eval[0]=((IKabs((((x9033*x9036))+((x9032*x9036)))))+(IKabs(((((-1.0)*x9032))+(((-1.0)*x9033))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9038=(cj1*sj2);
IkReal x9039=(cj2*sj1);
IkReal x9040=((1.0)*r12);
IkReal x9041=(gconst1*r11);
IkReal x9042=((1.0)*gconst2*r10);
CheckValue<IkReal> x9043=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9043.valid){
continue;
}
CheckValue<IkReal> x9044 = IKatan2WithCheck(IkReal(((((-1.0)*x9038*x9042))+((x9038*x9041))+((x9039*x9041))+(((-1.0)*x9039*x9042)))),IkReal(((((-1.0)*x9038*x9040))+(((-1.0)*x9039*x9040)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9043.value)))+(x9044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9045=IKcos(j4);
IkReal x9046=IKsin(j4);
IkReal x9047=((1.0)*x9045);
IkReal x9048=(gconst1*x9045);
IkReal x9049=(gconst1*x9046);
IkReal x9050=((1.0)*gconst2*x9046);
evalcond[0]=(((r12*x9046))+((r11*x9048))+(((-1.0)*gconst2*r10*x9047)));
evalcond[1]=((((-1.0)*r22*x9047))+(((-1.0)*r20*x9050))+((r21*x9049)));
evalcond[2]=(((r01*x9049))+(((-1.0)*r00*x9050))+(((-1.0)*r02*x9047)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9050))+(((-1.0)*r12*x9047))+((r11*x9049)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9046))+((r21*x9048))+(((-1.0)*gconst2*r20*x9047)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9048))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9047))+((r02*x9046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9051=(gconst1*r11);
IkReal x9052=(gconst2*r10);
CheckValue<IkReal> x9053 = IKatan2WithCheck(IkReal((x9051+(((-1.0)*x9052)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9053.valid){
continue;
}
CheckValue<IkReal> x9054=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9051*x9052))+(x9052*x9052)+(x9051*x9051))),-1);
if(!x9054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9053.value)+(((1.5707963267949)*(x9054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9055=IKcos(j4);
IkReal x9056=IKsin(j4);
IkReal x9057=((1.0)*x9055);
IkReal x9058=(gconst1*x9055);
IkReal x9059=(gconst1*x9056);
IkReal x9060=((1.0)*gconst2*x9056);
evalcond[0]=((((-1.0)*gconst2*r10*x9057))+((r12*x9056))+((r11*x9058)));
evalcond[1]=((((-1.0)*r20*x9060))+(((-1.0)*r22*x9057))+((r21*x9059)));
evalcond[2]=((((-1.0)*r02*x9057))+((r01*x9059))+(((-1.0)*r00*x9060)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9060))+(((-1.0)*r12*x9057))+((r11*x9059)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9056))+(((-1.0)*gconst2*r20*x9057))+((r21*x9058)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9058))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9057))+((r02*x9056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9061 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9061.valid){
continue;
}
CheckValue<IkReal> x9062=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9061.value)+(((1.5707963267949)*(x9062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9063=IKcos(j4);
IkReal x9064=IKsin(j4);
IkReal x9065=((1.0)*x9063);
IkReal x9066=(gconst1*x9063);
IkReal x9067=(gconst1*x9064);
IkReal x9068=((1.0)*gconst2*x9064);
evalcond[0]=(((r11*x9066))+((r12*x9064))+(((-1.0)*gconst2*r10*x9065)));
evalcond[1]=((((-1.0)*r20*x9068))+((r21*x9067))+(((-1.0)*r22*x9065)));
evalcond[2]=(((r01*x9067))+(((-1.0)*r02*x9065))+(((-1.0)*r00*x9068)));
evalcond[3]=((-1.0)+((r11*x9067))+(((-1.0)*r10*x9068))+(((-1.0)*r12*x9065)));
evalcond[4]=(((cj2*sj1))+((r22*x9064))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9065))+((r21*x9066)));
evalcond[5]=(((r01*x9066))+(((-1.0)*gconst2*r00*x9065))+(((-1.0)*sj1*sj2))+((r02*x9064))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9069=((-1.0)*r20);
IkReal x9070=x8925;
CheckValue<IkReal> x9072 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9069),IKFAST_ATAN2_MAGTHRESH);
if(!x9072.valid){
continue;
}
IkReal x9071=((-1.0)*(x9072.value));
sj5=gconst1;
cj5=gconst2;
j5=x9071;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9071;
IkReal gconst1=(r21*x9070);
IkReal gconst2=(x9069*x9070);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9073=((-1.0)*r20);
IkReal x9074=x8925;
CheckValue<IkReal> x9076 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9073),IKFAST_ATAN2_MAGTHRESH);
if(!x9076.valid){
continue;
}
IkReal x9075=((-1.0)*(x9076.value));
sj5=gconst1;
cj5=gconst2;
j5=x9075;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9075;
IkReal gconst1=(r21*x9074);
IkReal gconst2=(x9073*x9074);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9077=((-1.0)*r20);
IkReal x9078=x8925;
CheckValue<IkReal> x9080 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9077),IKFAST_ATAN2_MAGTHRESH);
if(!x9080.valid){
continue;
}
IkReal x9079=((-1.0)*(x9080.value));
sj5=gconst1;
cj5=gconst2;
j5=x9079;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9079;
IkReal gconst1=(r21*x9078);
IkReal gconst2=(x9077*x9078);
IkReal x9081=r22*r22;
IkReal x9082=((1.0)*r02);
IkReal x9083=(cj1*sj2);
IkReal x9084=(cj2*sj1);
CheckValue<IkReal> x9088=IKPowWithIntegerCheck(((-1.0)+x9081),-1);
if(!x9088.valid){
continue;
}
IkReal x9085=x9088.value;
if((((1.0)+(((-1.0)*x9081)))) < -0.00001)
continue;
IkReal x9086=IKsqrt(((1.0)+(((-1.0)*x9081))));
IkReal x9087=(r02*r22*x9085*x9086);
j4eval[0]=((IKabs((((x9083*x9087))+((x9084*x9087)))))+(IKabs(((((-1.0)*x9082*x9084))+(((-1.0)*x9082*x9083))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9089=(cj1*sj2);
IkReal x9090=(gconst1*r01);
IkReal x9091=((1.0)*r02);
IkReal x9092=(cj2*sj1);
IkReal x9093=((1.0)*gconst2*r00);
CheckValue<IkReal> x9094 = IKatan2WithCheck(IkReal(((((-1.0)*x9092*x9093))+((x9090*x9092))+((x9089*x9090))+(((-1.0)*x9089*x9093)))),IkReal(((((-1.0)*x9091*x9092))+(((-1.0)*x9089*x9091)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9094.valid){
continue;
}
CheckValue<IkReal> x9095=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9094.value)+(((1.5707963267949)*(x9095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9096=IKcos(j4);
IkReal x9097=IKsin(j4);
IkReal x9098=((1.0)*x9096);
IkReal x9099=(gconst1*x9096);
IkReal x9100=(gconst1*x9097);
IkReal x9101=((1.0)*gconst2*x9097);
evalcond[0]=((((-1.0)*gconst2*r00*x9098))+((r01*x9099))+((r02*x9097)));
evalcond[1]=(((r21*x9100))+(((-1.0)*r20*x9101))+(((-1.0)*r22*x9098)));
evalcond[2]=((((-1.0)*r10*x9101))+((r11*x9100))+(((-1.0)*r12*x9098)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9101))+(((-1.0)*r02*x9098))+((r01*x9100)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9098))+((cj1*sj2))+((r21*x9099))+((r22*x9097)));
evalcond[5]=(((r11*x9099))+((r12*x9097))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9102=(gconst1*r01);
IkReal x9103=(gconst2*r00);
CheckValue<IkReal> x9104 = IKatan2WithCheck(IkReal(((((-1.0)*x9103))+x9102)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9104.valid){
continue;
}
CheckValue<IkReal> x9105=IKPowWithIntegerCheck(IKsign(((x9102*x9102)+(x9103*x9103)+(r02*r02)+(((-2.0)*x9102*x9103)))),-1);
if(!x9105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9104.value)+(((1.5707963267949)*(x9105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9106=IKcos(j4);
IkReal x9107=IKsin(j4);
IkReal x9108=((1.0)*x9106);
IkReal x9109=(gconst1*x9106);
IkReal x9110=(gconst1*x9107);
IkReal x9111=((1.0)*gconst2*x9107);
evalcond[0]=(((r02*x9107))+(((-1.0)*gconst2*r00*x9108))+((r01*x9109)));
evalcond[1]=(((r21*x9110))+(((-1.0)*r22*x9108))+(((-1.0)*r20*x9111)));
evalcond[2]=((((-1.0)*r10*x9111))+((r11*x9110))+(((-1.0)*r12*x9108)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9108))+((r01*x9110))+(((-1.0)*r00*x9111)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9107))+((r21*x9109))+(((-1.0)*gconst2*r20*x9108)));
evalcond[5]=((((-1.0)*gconst2*r10*x9108))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9107))+((r11*x9109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9112=((1.0)*gconst2);
CheckValue<IkReal> x9113=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9112)))),-1);
if(!x9113.valid){
continue;
}
CheckValue<IkReal> x9114 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9113.value)))+(x9114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9115=IKcos(j4);
IkReal x9116=IKsin(j4);
IkReal x9117=((1.0)*x9115);
IkReal x9118=(gconst1*x9115);
IkReal x9119=(gconst1*x9116);
IkReal x9120=((1.0)*gconst2*x9116);
evalcond[0]=((((-1.0)*gconst2*r00*x9117))+((r01*x9118))+((r02*x9116)));
evalcond[1]=(((r21*x9119))+(((-1.0)*r20*x9120))+(((-1.0)*r22*x9117)));
evalcond[2]=(((r11*x9119))+(((-1.0)*r10*x9120))+(((-1.0)*r12*x9117)));
evalcond[3]=((-1.0)+((r01*x9119))+(((-1.0)*r02*x9117))+(((-1.0)*r00*x9120)));
evalcond[4]=(((r21*x9118))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9117))+((r22*x9116)));
evalcond[5]=(((r12*x9116))+((r11*x9118))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9121=((-1.0)*r20);
IkReal x9122=x8925;
CheckValue<IkReal> x9124 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9121),IKFAST_ATAN2_MAGTHRESH);
if(!x9124.valid){
continue;
}
IkReal x9123=((-1.0)*(x9124.value));
sj5=gconst1;
cj5=gconst2;
j5=x9123;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9123;
IkReal gconst1=(r21*x9122);
IkReal gconst2=(x9121*x9122);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9125=((-1.0)*r20);
IkReal x9126=x8925;
CheckValue<IkReal> x9128 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9125),IKFAST_ATAN2_MAGTHRESH);
if(!x9128.valid){
continue;
}
IkReal x9127=((-1.0)*(x9128.value));
sj5=gconst1;
cj5=gconst2;
j5=x9127;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9127;
IkReal gconst1=(r21*x9126);
IkReal gconst2=(x9125*x9126);
IkReal x9129=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9133=IKPowWithIntegerCheck(x9129,-1);
if(!x9133.valid){
continue;
}
IkReal x9130=x9133.value;
IkReal x9131=((1.0)*x9130);
IkReal x9132=((((-1.0)*(r02*r02)))+(((-1.0)*x9131*(r00*r00)*(r20*r20)))+(((-1.0)*x9131*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9130)));
j4eval[0]=x9132;
j4eval[1]=IKsign(x9132);
j4eval[2]=r02;
j4eval[3]=x9129;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9134=((-1.0)*r20);
IkReal x9135=x8925;
CheckValue<IkReal> x9137 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9134),IKFAST_ATAN2_MAGTHRESH);
if(!x9137.valid){
continue;
}
IkReal x9136=((-1.0)*(x9137.value));
sj5=gconst1;
cj5=gconst2;
j5=x9136;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9136;
IkReal gconst1=(r21*x9135);
IkReal gconst2=(x9134*x9135);
IkReal x9138=r22*r22;
IkReal x9139=((1.0)*r02);
IkReal x9140=(cj1*sj2);
IkReal x9141=(cj2*sj1);
CheckValue<IkReal> x9145=IKPowWithIntegerCheck(((-1.0)+x9138),-1);
if(!x9145.valid){
continue;
}
IkReal x9142=x9145.value;
if((((1.0)+(((-1.0)*x9138)))) < -0.00001)
continue;
IkReal x9143=IKsqrt(((1.0)+(((-1.0)*x9138))));
IkReal x9144=(r02*r22*x9142*x9143);
j4eval[0]=((IKabs(((((-1.0)*x9139*x9140))+(((-1.0)*x9139*x9141)))))+(IKabs((((x9140*x9144))+((x9141*x9144))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9146=(cj1*sj2);
IkReal x9147=(gconst1*r01);
IkReal x9148=((1.0)*r02);
IkReal x9149=(cj2*sj1);
IkReal x9150=((1.0)*gconst2*r00);
CheckValue<IkReal> x9151=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9151.valid){
continue;
}
CheckValue<IkReal> x9152 = IKatan2WithCheck(IkReal((((x9147*x9149))+(((-1.0)*x9146*x9150))+((x9146*x9147))+(((-1.0)*x9149*x9150)))),IkReal(((((-1.0)*x9148*x9149))+(((-1.0)*x9146*x9148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9151.value)))+(x9152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9153=IKcos(j4);
IkReal x9154=IKsin(j4);
IkReal x9155=((1.0)*x9153);
IkReal x9156=(gconst1*x9153);
IkReal x9157=(gconst1*x9154);
IkReal x9158=((1.0)*gconst2*x9154);
evalcond[0]=(((r02*x9154))+(((-1.0)*gconst2*r00*x9155))+((r01*x9156)));
evalcond[1]=((((-1.0)*r20*x9158))+(((-1.0)*r22*x9155))+((r21*x9157)));
evalcond[2]=(((r11*x9157))+(((-1.0)*r12*x9155))+(((-1.0)*r10*x9158)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9155))+((r01*x9157))+(((-1.0)*r00*x9158)));
evalcond[4]=(((cj2*sj1))+((r22*x9154))+(((-1.0)*gconst2*r20*x9155))+((cj1*sj2))+((r21*x9156)));
evalcond[5]=(((r11*x9156))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9155))+((cj1*cj2))+((r12*x9154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9159=(gconst1*r01);
IkReal x9160=(gconst2*r00);
CheckValue<IkReal> x9161=IKPowWithIntegerCheck(IKsign(((((2.0)*x9159*x9160))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9159*x9159)))+(((-1.0)*(x9160*x9160))))),-1);
if(!x9161.valid){
continue;
}
CheckValue<IkReal> x9162 = IKatan2WithCheck(IkReal(((((-1.0)*x9160))+x9159)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9161.value)))+(x9162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9163=IKcos(j4);
IkReal x9164=IKsin(j4);
IkReal x9165=((1.0)*x9163);
IkReal x9166=(gconst1*x9163);
IkReal x9167=(gconst1*x9164);
IkReal x9168=((1.0)*gconst2*x9164);
evalcond[0]=(((r01*x9166))+((r02*x9164))+(((-1.0)*gconst2*r00*x9165)));
evalcond[1]=((((-1.0)*r22*x9165))+((r21*x9167))+(((-1.0)*r20*x9168)));
evalcond[2]=((((-1.0)*r12*x9165))+(((-1.0)*r10*x9168))+((r11*x9167)));
evalcond[3]=((1.0)+((r01*x9167))+(((-1.0)*r02*x9165))+(((-1.0)*r00*x9168)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9164))+((r21*x9166))+(((-1.0)*gconst2*r20*x9165)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9165))+((r11*x9166))+((r12*x9164))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9169 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9169.valid){
continue;
}
CheckValue<IkReal> x9170=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9169.value)+(((1.5707963267949)*(x9170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9171=IKcos(j4);
IkReal x9172=IKsin(j4);
IkReal x9173=((1.0)*x9171);
IkReal x9174=(gconst1*x9171);
IkReal x9175=(gconst1*x9172);
IkReal x9176=((1.0)*gconst2*x9172);
evalcond[0]=((((-1.0)*gconst2*r00*x9173))+((r02*x9172))+((r01*x9174)));
evalcond[1]=(((r21*x9175))+(((-1.0)*r22*x9173))+(((-1.0)*r20*x9176)));
evalcond[2]=((((-1.0)*r10*x9176))+(((-1.0)*r12*x9173))+((r11*x9175)));
evalcond[3]=((1.0)+((r01*x9175))+(((-1.0)*r02*x9173))+(((-1.0)*r00*x9176)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9173))+((cj1*sj2))+((r21*x9174))+((r22*x9172)));
evalcond[5]=((((-1.0)*gconst2*r10*x9173))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x9172))+((r11*x9174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9177=((-1.0)*r20);
IkReal x9178=((-1.0)*px);
CheckValue<IkReal> x9180 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9177),IKFAST_ATAN2_MAGTHRESH);
if(!x9180.valid){
continue;
}
IkReal x9179=((-1.0)*(x9180.value));
sj5=gconst1;
cj5=gconst2;
j5=x9179;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9178);
rxp1_1=(px*r21);
rxp1_2=(r11*x9178);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9179;
IkReal gconst1=r21;
IkReal gconst2=x9177;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9181=((-1.0)*r20);
IkReal x9182=((-1.0)*px);
CheckValue<IkReal> x9184 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9181),IKFAST_ATAN2_MAGTHRESH);
if(!x9184.valid){
continue;
}
IkReal x9183=((-1.0)*(x9184.value));
sj5=gconst1;
cj5=gconst2;
j5=x9183;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9182);
rxp1_1=(px*r21);
rxp1_2=(r11*x9182);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9183;
IkReal gconst1=r21;
IkReal gconst2=x9181;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9185=((-1.0)*r20);
IkReal x9186=((-1.0)*px);
CheckValue<IkReal> x9188 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9185),IKFAST_ATAN2_MAGTHRESH);
if(!x9188.valid){
continue;
}
IkReal x9187=((-1.0)*(x9188.value));
sj5=gconst1;
cj5=gconst2;
j5=x9187;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9186);
rxp1_1=(px*r21);
rxp1_2=(r11*x9186);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9187;
IkReal gconst1=r21;
IkReal gconst2=x9185;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9191=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9191.valid){
continue;
}
IkReal x9189=x9191.value;
IkReal x9190=(sj0*x9189);
cj4array[0]=(((cj1*cj2*x9190))+(((-1.0)*sj1*sj2*x9190)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9192=IKsin(j4);
IkReal x9193=IKcos(j4);
IkReal x9194=((1.0)*gconst2);
IkReal x9195=(gconst1*r21);
evalcond[0]=(r02*x9192);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9193)));
evalcond[2]=(((x9192*x9195))+(((-1.0)*r20*x9192*x9194)));
evalcond[3]=(((gconst1*r11*x9192))+(((-1.0)*r10*x9192*x9194)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x9193*x9194))+((x9193*x9195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9198=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9198.valid){
continue;
}
IkReal x9196=x9198.value;
IkReal x9197=((1.0)*x9196);
cj4array[0]=((((-1.0)*cj2*sj1*x9197))+(((-1.0)*cj1*sj2*x9197)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9199=IKsin(j4);
IkReal x9200=IKcos(j4);
IkReal x9201=((1.0)*sj0);
IkReal x9202=(gconst1*x9199);
IkReal x9203=((1.0)*x9200);
IkReal x9204=((1.0)*gconst2*x9199);
evalcond[0]=(r02*x9199);
evalcond[1]=((((-1.0)*r02*x9203))+(((-1.0)*x9201)));
evalcond[2]=(((r21*x9202))+(((-1.0)*r20*x9204)));
evalcond[3]=(((r11*x9202))+(((-1.0)*r10*x9204)));
evalcond[4]=(((gconst1*r11*x9200))+(((-1.0)*gconst2*r10*x9203))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x9201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9205=IKPowWithIntegerCheck(r02,-1);
if(!x9205.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9205.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9206=IKsin(j4);
IkReal x9207=IKcos(j4);
IkReal x9208=(gconst1*r21);
IkReal x9209=(gconst1*r11);
IkReal x9210=((1.0)*gconst2*r10);
IkReal x9211=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9206);
evalcond[1]=((((-1.0)*x9206*x9211))+((x9206*x9208)));
evalcond[2]=((((-1.0)*x9206*x9210))+((x9206*x9209)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9207*x9211))+((x9207*x9208)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9207*x9210))+((x9207*x9209))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9212=(cj2*sj1);
IkReal x9213=(cj1*sj2);
IkReal x9214=(gconst1*r21);
IkReal x9215=((1.0)*gconst2*r20);
CheckValue<IkReal> x9216 = IKatan2WithCheck(IkReal((((r22*x9212))+((r22*x9213)))),IkReal((((x9212*x9214))+(((-1.0)*x9212*x9215))+(((-1.0)*x9213*x9215))+((x9213*x9214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9216.valid){
continue;
}
CheckValue<IkReal> x9217=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst2*r20*x9214))+(((-1.0)*gconst2*r20*x9215))+(((-1.0)*(x9214*x9214)))+(((-1.0)*(r22*r22))))),-1);
if(!x9217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9216.value)+(((1.5707963267949)*(x9217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9218=IKsin(j4);
IkReal x9219=IKcos(j4);
IkReal x9220=(sj1*sj2);
IkReal x9221=(gconst2*r10);
IkReal x9222=(gconst2*r00);
IkReal x9223=(gconst2*r20);
IkReal x9224=((1.0)*x9219);
IkReal x9225=(gconst1*x9219);
IkReal x9226=((1.0)*cj1*cj2);
IkReal x9227=(gconst1*x9218);
IkReal x9228=((1.0)*x9218);
evalcond[0]=(((r21*x9227))+(((-1.0)*x9223*x9228))+(((-1.0)*r22*x9224)));
evalcond[1]=(cj0+(((-1.0)*x9221*x9228))+((r11*x9227))+(((-1.0)*r12*x9224)));
evalcond[2]=(((r01*x9227))+(((-1.0)*sj0))+(((-1.0)*r02*x9224))+(((-1.0)*x9222*x9228)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9225))+((r22*x9218))+(((-1.0)*x9223*x9224)));
evalcond[4]=(((r01*x9225))+(((-1.0)*cj0*x9226))+((r02*x9218))+((cj0*x9220))+(((-1.0)*x9222*x9224)));
evalcond[5]=((((-1.0)*x9221*x9224))+((r12*x9218))+((r11*x9225))+((sj0*x9220))+(((-1.0)*sj0*x9226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9229=((1.0)*gconst2);
CheckValue<IkReal> x9230 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9229))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9230.valid){
continue;
}
CheckValue<IkReal> x9231=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9229)))),-1);
if(!x9231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9230.value)+(((1.5707963267949)*(x9231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9232=IKsin(j4);
IkReal x9233=IKcos(j4);
IkReal x9234=(sj1*sj2);
IkReal x9235=(gconst2*r10);
IkReal x9236=(gconst2*r00);
IkReal x9237=(gconst2*r20);
IkReal x9238=((1.0)*x9233);
IkReal x9239=(gconst1*x9233);
IkReal x9240=((1.0)*cj1*cj2);
IkReal x9241=(gconst1*x9232);
IkReal x9242=((1.0)*x9232);
evalcond[0]=(((r21*x9241))+(((-1.0)*x9237*x9242))+(((-1.0)*r22*x9238)));
evalcond[1]=((((-1.0)*x9235*x9242))+cj0+(((-1.0)*r12*x9238))+((r11*x9241)));
evalcond[2]=((((-1.0)*x9236*x9242))+(((-1.0)*sj0))+((r01*x9241))+(((-1.0)*r02*x9238)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9237*x9238))+((cj1*sj2))+((r22*x9232))+((r21*x9239)));
evalcond[4]=((((-1.0)*x9236*x9238))+((r02*x9232))+((cj0*x9234))+((r01*x9239))+(((-1.0)*cj0*x9240)));
evalcond[5]=((((-1.0)*x9235*x9238))+((r11*x9239))+((sj0*x9234))+((r12*x9232))+(((-1.0)*sj0*x9240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9243=((1.0)*gconst2);
CheckValue<IkReal> x9244 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9243))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9244.valid){
continue;
}
CheckValue<IkReal> x9245=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9243)))),-1);
if(!x9245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9244.value)+(((1.5707963267949)*(x9245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9246=IKsin(j4);
IkReal x9247=IKcos(j4);
IkReal x9248=(sj1*sj2);
IkReal x9249=(gconst2*r10);
IkReal x9250=(gconst2*r00);
IkReal x9251=(gconst2*r20);
IkReal x9252=((1.0)*x9247);
IkReal x9253=(gconst1*x9247);
IkReal x9254=((1.0)*cj1*cj2);
IkReal x9255=(gconst1*x9246);
IkReal x9256=((1.0)*x9246);
evalcond[0]=((((-1.0)*r22*x9252))+(((-1.0)*x9251*x9256))+((r21*x9255)));
evalcond[1]=(cj0+(((-1.0)*r12*x9252))+(((-1.0)*x9249*x9256))+((r11*x9255)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9250*x9256))+((r01*x9255))+(((-1.0)*r02*x9252)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9251*x9252))+((cj1*sj2))+((r21*x9253))+((r22*x9246)));
evalcond[4]=((((-1.0)*cj0*x9254))+((cj0*x9248))+(((-1.0)*x9250*x9252))+((r02*x9246))+((r01*x9253)));
evalcond[5]=(((r12*x9246))+((sj0*x9248))+(((-1.0)*x9249*x9252))+((r11*x9253))+(((-1.0)*sj0*x9254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9257=((-1.0)*r20);
IkReal x9258=x8925;
CheckValue<IkReal> x9260 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9257),IKFAST_ATAN2_MAGTHRESH);
if(!x9260.valid){
continue;
}
IkReal x9259=((-1.0)*(x9260.value));
sj5=gconst1;
cj5=gconst2;
j5=x9259;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9259;
IkReal gconst1=(r21*x9258);
IkReal gconst2=(x9257*x9258);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9261=((-1.0)*r20);
IkReal x9262=x8925;
CheckValue<IkReal> x9264 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9261),IKFAST_ATAN2_MAGTHRESH);
if(!x9264.valid){
continue;
}
IkReal x9263=((-1.0)*(x9264.value));
sj5=gconst1;
cj5=gconst2;
j5=x9263;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9263;
IkReal gconst1=(r21*x9262);
IkReal gconst2=(x9261*x9262);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9265=((-1.0)*r20);
IkReal x9266=x8925;
CheckValue<IkReal> x9268 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9265),IKFAST_ATAN2_MAGTHRESH);
if(!x9268.valid){
continue;
}
IkReal x9267=((-1.0)*(x9268.value));
sj5=gconst1;
cj5=gconst2;
j5=x9267;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9267;
IkReal gconst1=(r21*x9266);
IkReal gconst2=(x9265*x9266);
IkReal x9269=r22*r22;
CheckValue<IkReal> x9272=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9269))),-1);
if(!x9272.valid){
continue;
}
IkReal x9270=x9272.value;
IkReal x9271=(((x9270*(r20*r20*r20*r20)))+(((2.0)*x9270*(r20*r20)*(r21*r21)))+((x9270*(r21*r21*r21*r21)))+x9269);
j4eval[0]=x9271;
j4eval[1]=IKsign(x9271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9273=((-1.0)*r20);
IkReal x9274=x8925;
CheckValue<IkReal> x9276 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9273),IKFAST_ATAN2_MAGTHRESH);
if(!x9276.valid){
continue;
}
IkReal x9275=((-1.0)*(x9276.value));
sj5=gconst1;
cj5=gconst2;
j5=x9275;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9275;
IkReal gconst1=(r21*x9274);
IkReal gconst2=(x9273*x9274);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9277=((-1.0)*r20);
IkReal x9278=x8925;
CheckValue<IkReal> x9280 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9277),IKFAST_ATAN2_MAGTHRESH);
if(!x9280.valid){
continue;
}
IkReal x9279=((-1.0)*(x9280.value));
sj5=gconst1;
cj5=gconst2;
j5=x9279;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9279;
IkReal gconst1=(r21*x9278);
IkReal gconst2=(x9277*x9278);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9281=((-1.0)*r20);
IkReal x9282=x8925;
CheckValue<IkReal> x9284 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9281),IKFAST_ATAN2_MAGTHRESH);
if(!x9284.valid){
continue;
}
IkReal x9283=((-1.0)*(x9284.value));
sj5=gconst1;
cj5=gconst2;
j5=x9283;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9283;
IkReal gconst1=(r21*x9282);
IkReal gconst2=(x9281*x9282);
IkReal x9285=r22*r22;
IkReal x9286=(cj1*r12*sj2);
IkReal x9287=(cj2*r12*sj1);
CheckValue<IkReal> x9291=IKPowWithIntegerCheck(((-1.0)+x9285),-1);
if(!x9291.valid){
continue;
}
IkReal x9288=x9291.value;
if((((1.0)+(((-1.0)*x9285)))) < -0.00001)
continue;
IkReal x9289=IKsqrt(((1.0)+(((-1.0)*x9285))));
IkReal x9290=((1.0)*r22*x9288*x9289);
j4eval[0]=((IKabs((x9287+x9286)))+(IKabs(((((-1.0)*x9286*x9290))+(((-1.0)*x9287*x9290))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9292=((1.0)*gconst1);
IkReal x9293=(cj2*sj1);
IkReal x9294=(gconst2*r10);
IkReal x9295=(cj1*sj2);
CheckValue<IkReal> x9296=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9292)))),-1);
if(!x9296.valid){
continue;
}
CheckValue<IkReal> x9297 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9292*x9293))+(((-1.0)*r11*x9292*x9295))+((x9293*x9294))+((x9294*x9295)))),IkReal((((r12*x9295))+((r12*x9293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9296.value)))+(x9297.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9298=IKsin(j4);
IkReal x9299=IKcos(j4);
IkReal x9300=((1.0)*x9299);
IkReal x9301=(gconst2*x9299);
IkReal x9302=(gconst1*x9298);
IkReal x9303=((1.0)*x9298);
evalcond[0]=(((r21*x9302))+(((-1.0)*r22*x9300))+(((-1.0)*gconst2*r20*x9303)));
evalcond[1]=((((-1.0)*gconst2*r00*x9303))+((r01*x9302))+(((-1.0)*r02*x9300)));
evalcond[2]=((((-1.0)*gconst1*r11*x9300))+((r10*x9301))+(((-1.0)*r12*x9303)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9303))+((r11*x9302))+(((-1.0)*r12*x9300)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9300))+((cj1*sj2))+((r20*x9301))+(((-1.0)*r22*x9303)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9300))+(((-1.0)*r02*x9303))+((r00*x9301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9304=(gconst1*r11);
IkReal x9305=(gconst2*r10);
CheckValue<IkReal> x9306 = IKatan2WithCheck(IkReal((x9305+(((-1.0)*x9304)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9306.valid){
continue;
}
CheckValue<IkReal> x9307=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9304*x9305))+(x9305*x9305)+(x9304*x9304))),-1);
if(!x9307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9306.value)+(((1.5707963267949)*(x9307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9308=IKsin(j4);
IkReal x9309=IKcos(j4);
IkReal x9310=((1.0)*x9309);
IkReal x9311=(gconst2*x9309);
IkReal x9312=(gconst1*x9308);
IkReal x9313=((1.0)*x9308);
evalcond[0]=(((r21*x9312))+(((-1.0)*r22*x9310))+(((-1.0)*gconst2*r20*x9313)));
evalcond[1]=((((-1.0)*gconst2*r00*x9313))+((r01*x9312))+(((-1.0)*r02*x9310)));
evalcond[2]=((((-1.0)*gconst1*r11*x9310))+((r10*x9311))+(((-1.0)*r12*x9313)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9313))+((r11*x9312))+(((-1.0)*r12*x9310)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9310))+((cj1*sj2))+((r20*x9311))+(((-1.0)*r22*x9313)));
evalcond[5]=((((-1.0)*gconst1*r01*x9310))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9313))+((r00*x9311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9314=((1.0)*gconst2);
CheckValue<IkReal> x9315=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9314)))),-1);
if(!x9315.valid){
continue;
}
CheckValue<IkReal> x9316 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9314))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9315.value)))+(x9316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9317=IKsin(j4);
IkReal x9318=IKcos(j4);
IkReal x9319=((1.0)*x9318);
IkReal x9320=(gconst2*x9318);
IkReal x9321=(gconst1*x9317);
IkReal x9322=((1.0)*x9317);
evalcond[0]=((((-1.0)*gconst2*r20*x9322))+(((-1.0)*r22*x9319))+((r21*x9321)));
evalcond[1]=(((r01*x9321))+(((-1.0)*r02*x9319))+(((-1.0)*gconst2*r00*x9322)));
evalcond[2]=((((-1.0)*r12*x9322))+((r10*x9320))+(((-1.0)*gconst1*r11*x9319)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9322))+((r11*x9321))+(((-1.0)*r12*x9319)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9319))+((r20*x9320))+(((-1.0)*r22*x9322))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r02*x9322))+((r00*x9320))+(((-1.0)*gconst1*r01*x9319))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9323=((-1.0)*r20);
IkReal x9324=x8925;
CheckValue<IkReal> x9326 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9323),IKFAST_ATAN2_MAGTHRESH);
if(!x9326.valid){
continue;
}
IkReal x9325=((-1.0)*(x9326.value));
sj5=gconst1;
cj5=gconst2;
j5=x9325;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9325;
IkReal gconst1=(r21*x9324);
IkReal gconst2=(x9323*x9324);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9327=((-1.0)*r20);
IkReal x9328=x8925;
CheckValue<IkReal> x9330 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9327),IKFAST_ATAN2_MAGTHRESH);
if(!x9330.valid){
continue;
}
IkReal x9329=((-1.0)*(x9330.value));
sj5=gconst1;
cj5=gconst2;
j5=x9329;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9329;
IkReal gconst1=(r21*x9328);
IkReal gconst2=(x9327*x9328);
IkReal x9331=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9335=IKPowWithIntegerCheck(x9331,-1);
if(!x9335.valid){
continue;
}
IkReal x9332=x9335.value;
IkReal x9333=((1.0)*x9332);
IkReal x9334=((((-1.0)*x9333*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9332))+(((-1.0)*(r12*r12)))+(((-1.0)*x9333*(r10*r10)*(r20*r20))));
j4eval[0]=x9334;
j4eval[1]=r12;
j4eval[2]=x9331;
j4eval[3]=IKsign(x9334);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9336=((-1.0)*r20);
IkReal x9337=x8925;
CheckValue<IkReal> x9339 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9336),IKFAST_ATAN2_MAGTHRESH);
if(!x9339.valid){
continue;
}
IkReal x9338=((-1.0)*(x9339.value));
sj5=gconst1;
cj5=gconst2;
j5=x9338;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9338;
IkReal gconst1=(r21*x9337);
IkReal gconst2=(x9336*x9337);
IkReal x9340=r22*r22;
IkReal x9341=(cj1*r12*sj2);
IkReal x9342=(cj2*r12*sj1);
CheckValue<IkReal> x9346=IKPowWithIntegerCheck(((-1.0)+x9340),-1);
if(!x9346.valid){
continue;
}
IkReal x9343=x9346.value;
if((((1.0)+(((-1.0)*x9340)))) < -0.00001)
continue;
IkReal x9344=IKsqrt(((1.0)+(((-1.0)*x9340))));
IkReal x9345=((1.0)*r22*x9343*x9344);
j4eval[0]=((IKabs((x9341+x9342)))+(IKabs(((((-1.0)*x9341*x9345))+(((-1.0)*x9342*x9345))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9347=((1.0)*gconst1);
IkReal x9348=(cj2*sj1);
IkReal x9349=(gconst2*r10);
IkReal x9350=(cj1*sj2);
CheckValue<IkReal> x9351=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9347)))),-1);
if(!x9351.valid){
continue;
}
CheckValue<IkReal> x9352 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9347*x9350))+(((-1.0)*r11*x9347*x9348))+((x9348*x9349))+((x9349*x9350)))),IkReal((((r12*x9348))+((r12*x9350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9351.value)))+(x9352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9353=IKsin(j4);
IkReal x9354=IKcos(j4);
IkReal x9355=((1.0)*x9354);
IkReal x9356=(gconst2*x9354);
IkReal x9357=(gconst1*x9353);
IkReal x9358=((1.0)*x9353);
evalcond[0]=((((-1.0)*r22*x9355))+(((-1.0)*gconst2*r20*x9358))+((r21*x9357)));
evalcond[1]=((((-1.0)*r02*x9355))+((r01*x9357))+(((-1.0)*gconst2*r00*x9358)));
evalcond[2]=((((-1.0)*r12*x9358))+((r10*x9356))+(((-1.0)*gconst1*r11*x9355)));
evalcond[3]=((-1.0)+((r11*x9357))+(((-1.0)*r12*x9355))+(((-1.0)*gconst2*r10*x9358)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9358))+((cj1*sj2))+((r20*x9356))+(((-1.0)*gconst1*r21*x9355)));
evalcond[5]=((((-1.0)*gconst1*r01*x9355))+(((-1.0)*r02*x9358))+(((-1.0)*sj1*sj2))+((r00*x9356))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9359=(gconst1*r11);
IkReal x9360=(gconst2*r10);
CheckValue<IkReal> x9361 = IKatan2WithCheck(IkReal((x9360+(((-1.0)*x9359)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9361.valid){
continue;
}
CheckValue<IkReal> x9362=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9359*x9359)))+(((-1.0)*(x9360*x9360)))+(((-1.0)*(r12*r12)))+(((2.0)*x9359*x9360)))),-1);
if(!x9362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9361.value)+(((1.5707963267949)*(x9362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9363=IKsin(j4);
IkReal x9364=IKcos(j4);
IkReal x9365=((1.0)*x9364);
IkReal x9366=(gconst2*x9364);
IkReal x9367=(gconst1*x9363);
IkReal x9368=((1.0)*x9363);
evalcond[0]=(((r21*x9367))+(((-1.0)*r22*x9365))+(((-1.0)*gconst2*r20*x9368)));
evalcond[1]=((((-1.0)*r02*x9365))+((r01*x9367))+(((-1.0)*gconst2*r00*x9368)));
evalcond[2]=((((-1.0)*gconst1*r11*x9365))+(((-1.0)*r12*x9368))+((r10*x9366)));
evalcond[3]=((-1.0)+((r11*x9367))+(((-1.0)*gconst2*r10*x9368))+(((-1.0)*r12*x9365)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9365))+((cj1*sj2))+(((-1.0)*r22*x9368))+((r20*x9366)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9368))+(((-1.0)*gconst1*r01*x9365))+((cj1*cj2))+((r00*x9366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9369 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9369.valid){
continue;
}
CheckValue<IkReal> x9370=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9369.value)+(((1.5707963267949)*(x9370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9371=IKsin(j4);
IkReal x9372=IKcos(j4);
IkReal x9373=((1.0)*x9372);
IkReal x9374=(gconst2*x9372);
IkReal x9375=(gconst1*x9371);
IkReal x9376=((1.0)*x9371);
evalcond[0]=(((r21*x9375))+(((-1.0)*r22*x9373))+(((-1.0)*gconst2*r20*x9376)));
evalcond[1]=((((-1.0)*r02*x9373))+(((-1.0)*gconst2*r00*x9376))+((r01*x9375)));
evalcond[2]=((((-1.0)*r12*x9376))+((r10*x9374))+(((-1.0)*gconst1*r11*x9373)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9376))+((r11*x9375))+(((-1.0)*r12*x9373)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9373))+((cj1*sj2))+(((-1.0)*r22*x9376))+((r20*x9374)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9376))+((cj1*cj2))+((r00*x9374))+(((-1.0)*gconst1*r01*x9373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9377=((-1.0)*r20);
IkReal x9378=x8925;
CheckValue<IkReal> x9380 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9377),IKFAST_ATAN2_MAGTHRESH);
if(!x9380.valid){
continue;
}
IkReal x9379=((-1.0)*(x9380.value));
sj5=gconst1;
cj5=gconst2;
j5=x9379;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9379;
IkReal gconst1=(r21*x9378);
IkReal gconst2=(x9377*x9378);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9381=((-1.0)*r20);
IkReal x9382=x8925;
CheckValue<IkReal> x9384 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9381),IKFAST_ATAN2_MAGTHRESH);
if(!x9384.valid){
continue;
}
IkReal x9383=((-1.0)*(x9384.value));
sj5=gconst1;
cj5=gconst2;
j5=x9383;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9383;
IkReal gconst1=(r21*x9382);
IkReal gconst2=(x9381*x9382);
IkReal x9385=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9389=IKPowWithIntegerCheck(x9385,-1);
if(!x9389.valid){
continue;
}
IkReal x9386=x9389.value;
IkReal x9387=((1.0)*x9386);
IkReal x9388=((((-1.0)*x9387*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9387*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9386)));
j4eval[0]=x9388;
j4eval[1]=IKsign(x9388);
j4eval[2]=r02;
j4eval[3]=x9385;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9390=((-1.0)*r20);
IkReal x9391=x8925;
CheckValue<IkReal> x9393 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9390),IKFAST_ATAN2_MAGTHRESH);
if(!x9393.valid){
continue;
}
IkReal x9392=((-1.0)*(x9393.value));
sj5=gconst1;
cj5=gconst2;
j5=x9392;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9392;
IkReal gconst1=(r21*x9391);
IkReal gconst2=(x9390*x9391);
IkReal x9394=r22*r22;
IkReal x9395=(cj1*r02*sj2);
IkReal x9396=(cj2*r02*sj1);
CheckValue<IkReal> x9400=IKPowWithIntegerCheck(((-1.0)+x9394),-1);
if(!x9400.valid){
continue;
}
IkReal x9397=x9400.value;
if((((1.0)+(((-1.0)*x9394)))) < -0.00001)
continue;
IkReal x9398=IKsqrt(((1.0)+(((-1.0)*x9394))));
IkReal x9399=((1.0)*r22*x9397*x9398);
j4eval[0]=((IKabs((x9396+x9395)))+(IKabs(((((-1.0)*x9396*x9399))+(((-1.0)*x9395*x9399))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9401=(cj2*sj1);
IkReal x9402=(cj1*sj2);
IkReal x9403=(gconst2*r00);
IkReal x9404=((1.0)*gconst1*r01);
CheckValue<IkReal> x9405 = IKatan2WithCheck(IkReal((((x9401*x9403))+((x9402*x9403))+(((-1.0)*x9401*x9404))+(((-1.0)*x9402*x9404)))),IkReal((((r02*x9402))+((r02*x9401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9405.valid){
continue;
}
CheckValue<IkReal> x9406=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9405.value)+(((1.5707963267949)*(x9406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9407=IKsin(j4);
IkReal x9408=IKcos(j4);
IkReal x9409=(gconst1*r11);
IkReal x9410=(gconst1*r21);
IkReal x9411=(gconst1*r01);
IkReal x9412=((1.0)*x9408);
IkReal x9413=(gconst2*x9408);
IkReal x9414=((1.0)*x9407);
evalcond[0]=((((-1.0)*gconst2*r20*x9414))+(((-1.0)*r22*x9412))+((x9407*x9410)));
evalcond[1]=((((-1.0)*r12*x9412))+((x9407*x9409))+(((-1.0)*gconst2*r10*x9414)));
evalcond[2]=((((-1.0)*r02*x9414))+((r00*x9413))+(((-1.0)*x9411*x9412)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9412))+(((-1.0)*gconst2*r00*x9414))+((x9407*x9411)));
evalcond[4]=(((r20*x9413))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9414))+(((-1.0)*x9410*x9412)));
evalcond[5]=((((-1.0)*r12*x9414))+((r10*x9413))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9409*x9412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9415=(gconst2*r00);
IkReal x9416=(gconst1*r01);
CheckValue<IkReal> x9417=IKPowWithIntegerCheck(IKsign(((((2.0)*x9415*x9416))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9416*x9416)))+(((-1.0)*(x9415*x9415))))),-1);
if(!x9417.valid){
continue;
}
CheckValue<IkReal> x9418 = IKatan2WithCheck(IkReal((x9415+(((-1.0)*x9416)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9417.value)))+(x9418.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9419=IKsin(j4);
IkReal x9420=IKcos(j4);
IkReal x9421=(gconst1*r11);
IkReal x9422=(gconst1*r21);
IkReal x9423=(gconst1*r01);
IkReal x9424=((1.0)*x9420);
IkReal x9425=(gconst2*x9420);
IkReal x9426=((1.0)*x9419);
evalcond[0]=(((x9419*x9422))+(((-1.0)*gconst2*r20*x9426))+(((-1.0)*r22*x9424)));
evalcond[1]=(((x9419*x9421))+(((-1.0)*gconst2*r10*x9426))+(((-1.0)*r12*x9424)));
evalcond[2]=((((-1.0)*x9423*x9424))+((r00*x9425))+(((-1.0)*r02*x9426)));
evalcond[3]=((-1.0)+((x9419*x9423))+(((-1.0)*r02*x9424))+(((-1.0)*gconst2*r00*x9426)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9425))+(((-1.0)*x9422*x9424))+(((-1.0)*r22*x9426)));
evalcond[5]=((((-1.0)*x9421*x9424))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9426))+((r10*x9425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9427=((1.0)*gconst2);
CheckValue<IkReal> x9428 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9427))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9428.valid){
continue;
}
CheckValue<IkReal> x9429=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9427)))),-1);
if(!x9429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9428.value)+(((1.5707963267949)*(x9429.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9430=IKsin(j4);
IkReal x9431=IKcos(j4);
IkReal x9432=(gconst1*r11);
IkReal x9433=(gconst1*r21);
IkReal x9434=(gconst1*r01);
IkReal x9435=((1.0)*x9431);
IkReal x9436=(gconst2*x9431);
IkReal x9437=((1.0)*x9430);
evalcond[0]=(((x9430*x9433))+(((-1.0)*gconst2*r20*x9437))+(((-1.0)*r22*x9435)));
evalcond[1]=((((-1.0)*gconst2*r10*x9437))+((x9430*x9432))+(((-1.0)*r12*x9435)));
evalcond[2]=((((-1.0)*x9434*x9435))+(((-1.0)*r02*x9437))+((r00*x9436)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x9437))+((x9430*x9434))+(((-1.0)*r02*x9435)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9436))+(((-1.0)*x9433*x9435))+(((-1.0)*r22*x9437)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9432*x9435))+(((-1.0)*r12*x9437))+((r10*x9436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9438=((-1.0)*r20);
IkReal x9439=x8925;
CheckValue<IkReal> x9441 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9438),IKFAST_ATAN2_MAGTHRESH);
if(!x9441.valid){
continue;
}
IkReal x9440=((-1.0)*(x9441.value));
sj5=gconst1;
cj5=gconst2;
j5=x9440;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9440;
IkReal gconst1=(r21*x9439);
IkReal gconst2=(x9438*x9439);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9442=((-1.0)*r20);
IkReal x9443=x8925;
CheckValue<IkReal> x9445 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9442),IKFAST_ATAN2_MAGTHRESH);
if(!x9445.valid){
continue;
}
IkReal x9444=((-1.0)*(x9445.value));
sj5=gconst1;
cj5=gconst2;
j5=x9444;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9444;
IkReal gconst1=(r21*x9443);
IkReal gconst2=(x9442*x9443);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9446=((-1.0)*r20);
IkReal x9447=x8925;
CheckValue<IkReal> x9449 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9446),IKFAST_ATAN2_MAGTHRESH);
if(!x9449.valid){
continue;
}
IkReal x9448=((-1.0)*(x9449.value));
sj5=gconst1;
cj5=gconst2;
j5=x9448;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9448;
IkReal gconst1=(r21*x9447);
IkReal gconst2=(x9446*x9447);
IkReal x9450=r22*r22;
IkReal x9451=(cj1*r02*sj2);
IkReal x9452=(cj2*r02*sj1);
CheckValue<IkReal> x9456=IKPowWithIntegerCheck(((-1.0)+x9450),-1);
if(!x9456.valid){
continue;
}
IkReal x9453=x9456.value;
if((((1.0)+(((-1.0)*x9450)))) < -0.00001)
continue;
IkReal x9454=IKsqrt(((1.0)+(((-1.0)*x9450))));
IkReal x9455=((1.0)*r22*x9453*x9454);
j4eval[0]=((IKabs((x9451+x9452)))+(IKabs(((((-1.0)*x9451*x9455))+(((-1.0)*x9452*x9455))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9457=(cj2*sj1);
IkReal x9458=(cj1*sj2);
IkReal x9459=(gconst2*r00);
IkReal x9460=((1.0)*gconst1*r01);
CheckValue<IkReal> x9461 = IKatan2WithCheck(IkReal((((x9457*x9459))+(((-1.0)*x9457*x9460))+(((-1.0)*x9458*x9460))+((x9458*x9459)))),IkReal((((r02*x9458))+((r02*x9457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9461.valid){
continue;
}
CheckValue<IkReal> x9462=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9461.value)+(((1.5707963267949)*(x9462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9463=IKsin(j4);
IkReal x9464=IKcos(j4);
IkReal x9465=(gconst1*r11);
IkReal x9466=(gconst1*r21);
IkReal x9467=(gconst1*r01);
IkReal x9468=((1.0)*x9464);
IkReal x9469=(gconst2*x9464);
IkReal x9470=((1.0)*x9463);
evalcond[0]=(((x9463*x9466))+(((-1.0)*r22*x9468))+(((-1.0)*gconst2*r20*x9470)));
evalcond[1]=(((x9463*x9465))+(((-1.0)*r12*x9468))+(((-1.0)*gconst2*r10*x9470)));
evalcond[2]=((((-1.0)*r02*x9470))+((r00*x9469))+(((-1.0)*x9467*x9468)));
evalcond[3]=((1.0)+((x9463*x9467))+(((-1.0)*gconst2*r00*x9470))+(((-1.0)*r02*x9468)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9470))+((r20*x9469))+(((-1.0)*x9466*x9468)));
evalcond[5]=(((r10*x9469))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9470))+((cj1*cj2))+(((-1.0)*x9465*x9468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9471=(gconst1*r01);
IkReal x9472=(gconst2*r00);
CheckValue<IkReal> x9473 = IKatan2WithCheck(IkReal(((((-1.0)*x9471))+x9472)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9473.valid){
continue;
}
CheckValue<IkReal> x9474=IKPowWithIntegerCheck(IKsign(((x9471*x9471)+(((-2.0)*x9471*x9472))+(r02*r02)+(x9472*x9472))),-1);
if(!x9474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9473.value)+(((1.5707963267949)*(x9474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9475=IKsin(j4);
IkReal x9476=IKcos(j4);
IkReal x9477=(gconst1*r11);
IkReal x9478=(gconst1*r21);
IkReal x9479=(gconst1*r01);
IkReal x9480=((1.0)*x9476);
IkReal x9481=(gconst2*x9476);
IkReal x9482=((1.0)*x9475);
evalcond[0]=(((x9475*x9478))+(((-1.0)*r22*x9480))+(((-1.0)*gconst2*r20*x9482)));
evalcond[1]=(((x9475*x9477))+(((-1.0)*gconst2*r10*x9482))+(((-1.0)*r12*x9480)));
evalcond[2]=(((r00*x9481))+(((-1.0)*r02*x9482))+(((-1.0)*x9479*x9480)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9482))+((x9475*x9479))+(((-1.0)*r02*x9480)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9478*x9480))+((cj1*sj2))+((r20*x9481))+(((-1.0)*r22*x9482)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9477*x9480))+((cj1*cj2))+((r10*x9481))+(((-1.0)*r12*x9482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9483 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9483.valid){
continue;
}
CheckValue<IkReal> x9484=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9483.value)+(((1.5707963267949)*(x9484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9485=IKsin(j4);
IkReal x9486=IKcos(j4);
IkReal x9487=(gconst1*r11);
IkReal x9488=(gconst1*r21);
IkReal x9489=(gconst1*r01);
IkReal x9490=((1.0)*x9486);
IkReal x9491=(gconst2*x9486);
IkReal x9492=((1.0)*x9485);
evalcond[0]=((((-1.0)*gconst2*r20*x9492))+((x9485*x9488))+(((-1.0)*r22*x9490)));
evalcond[1]=(((x9485*x9487))+(((-1.0)*gconst2*r10*x9492))+(((-1.0)*r12*x9490)));
evalcond[2]=((((-1.0)*r02*x9492))+(((-1.0)*x9489*x9490))+((r00*x9491)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9490))+((x9485*x9489))+(((-1.0)*gconst2*r00*x9492)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9492))+((cj1*sj2))+(((-1.0)*x9488*x9490))+((r20*x9491)));
evalcond[5]=(((r10*x9491))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9492))+(((-1.0)*x9487*x9490))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9493=((-1.0)*r20);
IkReal x9494=((-1.0)*px);
CheckValue<IkReal> x9496 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9493),IKFAST_ATAN2_MAGTHRESH);
if(!x9496.valid){
continue;
}
IkReal x9495=((-1.0)*(x9496.value));
sj5=gconst1;
cj5=gconst2;
j5=x9495;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9494);
rxp1_1=(px*r21);
rxp1_2=(r11*x9494);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9495;
IkReal gconst1=r21;
IkReal gconst2=x9493;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9497=((-1.0)*r20);
IkReal x9498=((-1.0)*px);
CheckValue<IkReal> x9500 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9497),IKFAST_ATAN2_MAGTHRESH);
if(!x9500.valid){
continue;
}
IkReal x9499=((-1.0)*(x9500.value));
sj5=gconst1;
cj5=gconst2;
j5=x9499;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9498);
rxp1_1=(px*r21);
rxp1_2=(r11*x9498);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9499;
IkReal gconst1=r21;
IkReal gconst2=x9497;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9501=((-1.0)*r20);
IkReal x9502=((-1.0)*px);
CheckValue<IkReal> x9504 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9501),IKFAST_ATAN2_MAGTHRESH);
if(!x9504.valid){
continue;
}
IkReal x9503=((-1.0)*(x9504.value));
sj5=gconst1;
cj5=gconst2;
j5=x9503;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9502);
rxp1_1=(px*r21);
rxp1_2=(r11*x9502);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9503;
IkReal gconst1=r21;
IkReal gconst2=x9501;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9507=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9507.valid){
continue;
}
IkReal x9505=x9507.value;
IkReal x9506=(sj0*x9505);
cj4array[0]=((((-1.0)*sj1*sj2*x9506))+((cj1*cj2*x9506)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9508=IKsin(j4);
IkReal x9509=IKcos(j4);
IkReal x9510=(gconst1*x9508);
IkReal x9511=((1.0)*x9509);
IkReal x9512=((1.0)*gconst2*x9508);
evalcond[0]=((-1.0)*r02*x9508);
evalcond[1]=((((-1.0)*r02*x9511))+(((-1.0)*sj0)));
evalcond[2]=(((r21*x9510))+(((-1.0)*r20*x9512)));
evalcond[3]=((((-1.0)*r10*x9512))+((r11*x9510)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9511))+((gconst2*r20*x9509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9515=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9515.valid){
continue;
}
IkReal x9513=x9515.value;
IkReal x9514=((1.0)*x9513);
cj4array[0]=((((-1.0)*cj2*sj1*x9514))+(((-1.0)*cj1*sj2*x9514)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9516=IKsin(j4);
IkReal x9517=IKcos(j4);
IkReal x9518=(gconst2*r10);
IkReal x9519=((1.0)*sj0);
IkReal x9520=(gconst1*r11);
IkReal x9521=((1.0)*x9516);
IkReal x9522=((1.0)*x9517);
evalcond[0]=((-1.0)*r02*x9516);
evalcond[1]=((((-1.0)*r02*x9522))+(((-1.0)*x9519)));
evalcond[2]=(((gconst1*r21*x9516))+(((-1.0)*gconst2*r20*x9521)));
evalcond[3]=(((x9516*x9520))+(((-1.0)*x9518*x9521)));
evalcond[4]=((((-1.0)*cj1*cj2*x9519))+((x9517*x9518))+(((-1.0)*x9520*x9522))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9523=IKPowWithIntegerCheck(r02,-1);
if(!x9523.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9523.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9524=IKsin(j4);
IkReal x9525=IKcos(j4);
IkReal x9526=(gconst2*r10);
IkReal x9527=(gconst1*r11);
IkReal x9528=(gconst1*r21);
IkReal x9529=(gconst2*r20);
IkReal x9530=((1.0)*x9524);
IkReal x9531=((1.0)*x9525);
evalcond[0]=((-1.0)*r02*x9524);
evalcond[1]=(((x9524*x9528))+(((-1.0)*x9529*x9530)));
evalcond[2]=(((x9524*x9527))+(((-1.0)*x9526*x9530)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x9525*x9529))+(((-1.0)*x9528*x9531)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x9525*x9526))+(((-1.0)*x9527*x9531))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9532=(cj2*sj1);
IkReal x9533=(cj1*sj2);
IkReal x9534=(gconst1*r21);
IkReal x9535=((1.0)*gconst2*r20);
CheckValue<IkReal> x9536 = IKatan2WithCheck(IkReal((((r22*x9533))+((r22*x9532)))),IkReal(((((-1.0)*x9532*x9535))+(((-1.0)*x9533*x9535))+((x9532*x9534))+((x9533*x9534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9536.valid){
continue;
}
CheckValue<IkReal> x9537=IKPowWithIntegerCheck(IKsign(((x9534*x9534)+(r22*r22)+(((gconst2*gconst2)*(r20*r20)))+(((-2.0)*gconst2*r20*x9534)))),-1);
if(!x9537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9536.value)+(((1.5707963267949)*(x9537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9538=IKsin(j4);
IkReal x9539=IKcos(j4);
IkReal x9540=(gconst1*r11);
IkReal x9541=(sj1*sj2);
IkReal x9542=(gconst1*r21);
IkReal x9543=(gconst1*r01);
IkReal x9544=((1.0)*x9539);
IkReal x9545=(gconst2*x9539);
IkReal x9546=((1.0)*cj1*cj2);
IkReal x9547=((1.0)*x9538);
evalcond[0]=(((x9538*x9542))+(((-1.0)*r22*x9544))+(((-1.0)*gconst2*r20*x9547)));
evalcond[1]=((((-1.0)*r12*x9544))+cj0+((x9538*x9540))+(((-1.0)*gconst2*r10*x9547)));
evalcond[2]=((((-1.0)*sj0))+((x9538*x9543))+(((-1.0)*r02*x9544))+(((-1.0)*gconst2*r00*x9547)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9542*x9544))+((cj1*sj2))+(((-1.0)*r22*x9547))+((r20*x9545)));
evalcond[4]=((((-1.0)*cj0*x9546))+(((-1.0)*x9543*x9544))+(((-1.0)*r02*x9547))+((cj0*x9541))+((r00*x9545)));
evalcond[5]=((((-1.0)*r12*x9547))+(((-1.0)*x9540*x9544))+(((-1.0)*sj0*x9546))+((r10*x9545))+((sj0*x9541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9548=((1.0)*gconst2);
CheckValue<IkReal> x9549 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9548))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9549.valid){
continue;
}
CheckValue<IkReal> x9550=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9548)))),-1);
if(!x9550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9549.value)+(((1.5707963267949)*(x9550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9551=IKsin(j4);
IkReal x9552=IKcos(j4);
IkReal x9553=(gconst1*r11);
IkReal x9554=(sj1*sj2);
IkReal x9555=(gconst1*r21);
IkReal x9556=(gconst1*r01);
IkReal x9557=((1.0)*x9552);
IkReal x9558=(gconst2*x9552);
IkReal x9559=((1.0)*cj1*cj2);
IkReal x9560=((1.0)*x9551);
evalcond[0]=((((-1.0)*gconst2*r20*x9560))+(((-1.0)*r22*x9557))+((x9551*x9555)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9560))+((x9551*x9553))+(((-1.0)*r12*x9557)));
evalcond[2]=((((-1.0)*gconst2*r00*x9560))+(((-1.0)*sj0))+(((-1.0)*r02*x9557))+((x9551*x9556)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9555*x9557))+((cj1*sj2))+((r20*x9558))+(((-1.0)*r22*x9560)));
evalcond[4]=((((-1.0)*x9556*x9557))+(((-1.0)*cj0*x9559))+((r00*x9558))+((cj0*x9554))+(((-1.0)*r02*x9560)));
evalcond[5]=(((sj0*x9554))+(((-1.0)*sj0*x9559))+(((-1.0)*x9553*x9557))+((r10*x9558))+(((-1.0)*r12*x9560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9561=((1.0)*gconst2);
CheckValue<IkReal> x9562=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9561)))),-1);
if(!x9562.valid){
continue;
}
CheckValue<IkReal> x9563 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9562.value)))+(x9563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9564=IKsin(j4);
IkReal x9565=IKcos(j4);
IkReal x9566=(gconst1*r11);
IkReal x9567=(sj1*sj2);
IkReal x9568=(gconst1*r21);
IkReal x9569=(gconst1*r01);
IkReal x9570=((1.0)*x9565);
IkReal x9571=(gconst2*x9565);
IkReal x9572=((1.0)*cj1*cj2);
IkReal x9573=((1.0)*x9564);
evalcond[0]=((((-1.0)*gconst2*r20*x9573))+((x9564*x9568))+(((-1.0)*r22*x9570)));
evalcond[1]=(((x9564*x9566))+cj0+(((-1.0)*r12*x9570))+(((-1.0)*gconst2*r10*x9573)));
evalcond[2]=((((-1.0)*sj0))+((x9564*x9569))+(((-1.0)*r02*x9570))+(((-1.0)*gconst2*r00*x9573)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9573))+(((-1.0)*x9568*x9570))+((r20*x9571)));
evalcond[4]=((((-1.0)*cj0*x9572))+((cj0*x9567))+(((-1.0)*r02*x9573))+((r00*x9571))+(((-1.0)*x9569*x9570)));
evalcond[5]=((((-1.0)*sj0*x9572))+((sj0*x9567))+(((-1.0)*x9566*x9570))+(((-1.0)*r12*x9573))+((r10*x9571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9574=((-1.0)*r20);
IkReal x9575=x8925;
CheckValue<IkReal> x9577 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9574),IKFAST_ATAN2_MAGTHRESH);
if(!x9577.valid){
continue;
}
IkReal x9576=((-1.0)*(x9577.value));
sj5=gconst1;
cj5=gconst2;
j5=x9576;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9576;
IkReal gconst1=(r21*x9575);
IkReal gconst2=(x9574*x9575);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9578=((-1.0)*r20);
IkReal x9579=x8925;
CheckValue<IkReal> x9581 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9578),IKFAST_ATAN2_MAGTHRESH);
if(!x9581.valid){
continue;
}
IkReal x9580=((-1.0)*(x9581.value));
sj5=gconst1;
cj5=gconst2;
j5=x9580;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9580;
IkReal gconst1=(r21*x9579);
IkReal gconst2=(x9578*x9579);
CheckValue<IkReal> x9589=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9589.valid){
continue;
}
IkReal x9582=x9589.value;
IkReal x9583=(sj3*x9582);
IkReal x9584=(r11*x9583);
IkReal x9585=(r00*x9583);
IkReal x9586=(r01*x9583);
IkReal x9587=(r10*x9583);
IkReal x9588=(r20*r21*x9583);
j4eval[0]=IKsign((((r00*r20*r21*x9584))+((r02*r12*sj3))+((r10*r20*r21*x9586))+((r10*x9585*(r20*r20)))+((r01*x9584*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9590=gconst2*gconst2;
IkReal x9591=gconst1*gconst1;
IkReal x9592=((1.0)*cj3);
IkReal x9593=((1.0)*sj3);
IkReal x9594=(r11*sj3);
IkReal x9595=(r10*sj3);
IkReal x9596=(gconst1*gconst2*r00);
IkReal x9597=(gconst1*gconst2*r01);
IkReal x9598=(r00*x9590);
IkReal x9599=(r01*x9591);
CheckValue<IkReal> x9600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9592*x9598))+((cj3*r11*x9596))+((cj3*r10*x9597))+(((-1.0)*r11*x9592*x9599))+(((-1.0)*r02*r12*x9592)))),-1);
if(!x9600.valid){
continue;
}
CheckValue<IkReal> x9601 = IKatan2WithCheck(IkReal((((gconst2*r02*x9594))+((gconst1*r02*x9595)))),IkReal((((x9594*x9597))+(((-1.0)*r10*x9593*x9596))+((x9595*x9599))+(((-1.0)*r11*x9593*x9598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9600.value)))+(x9601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9602=IKsin(j4);
IkReal x9603=IKcos(j4);
IkReal x9604=(sj1*sj2);
IkReal x9605=(gconst1*sj3);
IkReal x9606=(cj3*gconst1);
IkReal x9607=(cj3*gconst2);
IkReal x9608=((1.0)*cj2);
IkReal x9609=(cj1*sj2);
IkReal x9610=(gconst2*sj3);
IkReal x9611=(cj1*x9608);
IkReal x9612=((1.0)*x9603);
IkReal x9613=((1.0)*x9602);
IkReal x9614=(gconst1*x9602);
IkReal x9615=(cj3*x9602);
IkReal x9616=(x9603*x9610);
evalcond[0]=((((-1.0)*r22*x9612))+(((-1.0)*gconst2*r20*x9613))+((r21*x9614)));
evalcond[1]=(((r01*x9614))+(((-1.0)*r02*x9612))+(((-1.0)*gconst2*r00*x9613)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9613))+(((-1.0)*r12*x9612))+((r11*x9614)));
evalcond[3]=((((-1.0)*r10*x9607*x9612))+((r10*x9605))+((r11*x9610))+((r12*x9615))+((r11*x9603*x9606)));
evalcond[4]=((((-1.0)*r11*x9605*x9612))+((r10*x9616))+((r10*x9606))+((r11*x9607))+(((-1.0)*r12*sj3*x9613)));
evalcond[5]=(((cj2*sj1))+((r21*x9603*x9606))+(((-1.0)*r20*x9607*x9612))+((r22*x9615))+((r20*x9605))+((r21*x9610))+x9609);
evalcond[6]=(((r01*x9603*x9606))+((r01*x9610))+((r00*x9605))+((r02*x9615))+(((-1.0)*r00*x9607*x9612))+x9604+(((-1.0)*x9611)));
evalcond[7]=(((r20*x9616))+((r21*x9607))+(((-1.0)*r21*x9605*x9612))+((r20*x9606))+(((-1.0)*r22*sj3*x9613))+x9604+(((-1.0)*x9611)));
evalcond[8]=((((-1.0)*sj1*x9608))+((r00*x9616))+((r00*x9606))+((r01*x9607))+(((-1.0)*r01*x9605*x9612))+(((-1.0)*x9609))+(((-1.0)*r02*sj3*x9613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9617=gconst2*gconst2;
IkReal x9618=gconst1*gconst1;
IkReal x9619=(gconst2*r11);
IkReal x9620=(cj3*r02);
IkReal x9621=(gconst1*r01);
IkReal x9622=(cj3*r10);
IkReal x9623=(r10*sj3);
IkReal x9624=((1.0)*gconst1*r00);
IkReal x9625=(r01*x9618);
IkReal x9626=(r00*x9617);
CheckValue<IkReal> x9627=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst2*x9621*x9623))+((r11*sj3*x9625))+(((-1.0)*sj3*x9619*x9624))+((x9623*x9626)))),-1);
if(!x9627.valid){
continue;
}
CheckValue<IkReal> x9628 = IKatan2WithCheck(IkReal((((x9619*x9620))+((gconst1*r10*x9620)))),IkReal((((x9622*x9625))+(((-1.0)*gconst2*x9622*x9624))+((cj3*x9619*x9621))+(((-1.0)*cj3*r11*x9626)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9627.value)))+(x9628.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9629=IKsin(j4);
IkReal x9630=IKcos(j4);
IkReal x9631=(sj1*sj2);
IkReal x9632=(gconst1*sj3);
IkReal x9633=(cj3*gconst1);
IkReal x9634=(cj3*gconst2);
IkReal x9635=((1.0)*cj2);
IkReal x9636=(cj1*sj2);
IkReal x9637=(gconst2*sj3);
IkReal x9638=(cj1*x9635);
IkReal x9639=((1.0)*x9630);
IkReal x9640=((1.0)*x9629);
IkReal x9641=(gconst1*x9629);
IkReal x9642=(cj3*x9629);
IkReal x9643=(x9630*x9637);
evalcond[0]=((((-1.0)*gconst2*r20*x9640))+(((-1.0)*r22*x9639))+((r21*x9641)));
evalcond[1]=((((-1.0)*r02*x9639))+(((-1.0)*gconst2*r00*x9640))+((r01*x9641)));
evalcond[2]=((1.0)+((r11*x9641))+(((-1.0)*r12*x9639))+(((-1.0)*gconst2*r10*x9640)));
evalcond[3]=(((r10*x9632))+((r11*x9630*x9633))+((r11*x9637))+(((-1.0)*r10*x9634*x9639))+((r12*x9642)));
evalcond[4]=(((r10*x9633))+(((-1.0)*r11*x9632*x9639))+((r10*x9643))+(((-1.0)*r12*sj3*x9640))+((r11*x9634)));
evalcond[5]=(((r22*x9642))+((cj2*sj1))+((r20*x9632))+((r21*x9630*x9633))+((r21*x9637))+x9636+(((-1.0)*r20*x9634*x9639)));
evalcond[6]=(((r00*x9632))+((r01*x9637))+((r02*x9642))+x9631+((r01*x9630*x9633))+(((-1.0)*r00*x9634*x9639))+(((-1.0)*x9638)));
evalcond[7]=((((-1.0)*r22*sj3*x9640))+((r20*x9633))+(((-1.0)*r21*x9632*x9639))+((r21*x9634))+x9631+((r20*x9643))+(((-1.0)*x9638)));
evalcond[8]=(((r00*x9633))+((r01*x9634))+(((-1.0)*x9636))+((r00*x9643))+(((-1.0)*r02*sj3*x9640))+(((-1.0)*sj1*x9635))+(((-1.0)*r01*x9632*x9639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9644=((1.0)*gconst2);
CheckValue<IkReal> x9645 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9644))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9645.valid){
continue;
}
CheckValue<IkReal> x9646=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9644)))),-1);
if(!x9646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9645.value)+(((1.5707963267949)*(x9646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9647=IKsin(j4);
IkReal x9648=IKcos(j4);
IkReal x9649=(sj1*sj2);
IkReal x9650=(gconst1*sj3);
IkReal x9651=(cj3*gconst1);
IkReal x9652=(cj3*gconst2);
IkReal x9653=((1.0)*cj2);
IkReal x9654=(cj1*sj2);
IkReal x9655=(gconst2*sj3);
IkReal x9656=(cj1*x9653);
IkReal x9657=((1.0)*x9648);
IkReal x9658=((1.0)*x9647);
IkReal x9659=(gconst1*x9647);
IkReal x9660=(cj3*x9647);
IkReal x9661=(x9648*x9655);
evalcond[0]=((((-1.0)*gconst2*r20*x9658))+((r21*x9659))+(((-1.0)*r22*x9657)));
evalcond[1]=(((r01*x9659))+(((-1.0)*gconst2*r00*x9658))+(((-1.0)*r02*x9657)));
evalcond[2]=((1.0)+((r11*x9659))+(((-1.0)*r12*x9657))+(((-1.0)*gconst2*r10*x9658)));
evalcond[3]=(((r11*x9648*x9651))+((r11*x9655))+(((-1.0)*r10*x9652*x9657))+((r12*x9660))+((r10*x9650)));
evalcond[4]=(((r11*x9652))+(((-1.0)*r11*x9650*x9657))+((r10*x9661))+((r10*x9651))+(((-1.0)*r12*sj3*x9658)));
evalcond[5]=(((cj2*sj1))+((r21*x9655))+(((-1.0)*r20*x9652*x9657))+((r20*x9650))+x9654+((r22*x9660))+((r21*x9648*x9651)));
evalcond[6]=((((-1.0)*r00*x9652*x9657))+((r01*x9648*x9651))+((r01*x9655))+((r00*x9650))+x9649+((r02*x9660))+(((-1.0)*x9656)));
evalcond[7]=(((r21*x9652))+((r20*x9651))+((r20*x9661))+x9649+(((-1.0)*r22*sj3*x9658))+(((-1.0)*r21*x9650*x9657))+(((-1.0)*x9656)));
evalcond[8]=((((-1.0)*r01*x9650*x9657))+(((-1.0)*r02*sj3*x9658))+((r00*x9661))+((r01*x9652))+((r00*x9651))+(((-1.0)*x9654))+(((-1.0)*sj1*x9653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9662=((-1.0)*r20);
IkReal x9663=x8925;
CheckValue<IkReal> x9665 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9662),IKFAST_ATAN2_MAGTHRESH);
if(!x9665.valid){
continue;
}
IkReal x9664=((-1.0)*(x9665.value));
sj5=gconst1;
cj5=gconst2;
j5=x9664;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9664;
IkReal gconst1=(r21*x9663);
IkReal gconst2=(x9662*x9663);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9666=((-1.0)*r20);
IkReal x9667=x8925;
CheckValue<IkReal> x9669 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9666),IKFAST_ATAN2_MAGTHRESH);
if(!x9669.valid){
continue;
}
IkReal x9668=((-1.0)*(x9669.value));
sj5=gconst1;
cj5=gconst2;
j5=x9668;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9668;
IkReal gconst1=(r21*x9667);
IkReal gconst2=(x9666*x9667);
CheckValue<IkReal> x9677=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9677.valid){
continue;
}
IkReal x9670=x9677.value;
IkReal x9671=(sj3*x9670);
IkReal x9672=(r11*x9671);
IkReal x9673=(r00*x9671);
IkReal x9674=(r01*x9671);
IkReal x9675=(r10*x9671);
IkReal x9676=(r20*r21*x9671);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9674))+((r01*x9672*(r21*r21)))+((r00*r20*r21*x9672))+((r10*x9673*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9678=gconst2*gconst2;
IkReal x9679=gconst1*gconst1;
IkReal x9680=((1.0)*cj3);
IkReal x9681=((1.0)*sj3);
IkReal x9682=(r11*sj3);
IkReal x9683=(r10*sj3);
IkReal x9684=(gconst1*gconst2*r00);
IkReal x9685=(gconst1*gconst2*r01);
IkReal x9686=(r00*x9678);
IkReal x9687=(r01*x9679);
CheckValue<IkReal> x9688=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9680*x9686))+(((-1.0)*r11*x9680*x9687))+((cj3*r11*x9684))+((cj3*r10*x9685))+(((-1.0)*r02*r12*x9680)))),-1);
if(!x9688.valid){
continue;
}
CheckValue<IkReal> x9689 = IKatan2WithCheck(IkReal((((gconst1*r02*x9683))+((gconst2*r02*x9682)))),IkReal(((((-1.0)*r11*x9681*x9686))+((x9682*x9685))+(((-1.0)*r10*x9681*x9684))+((x9683*x9687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9688.value)))+(x9689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9690=IKsin(j4);
IkReal x9691=IKcos(j4);
IkReal x9692=(cj2*sj1);
IkReal x9693=(cj1*sj2);
IkReal x9694=(gconst1*sj3);
IkReal x9695=(cj3*gconst1);
IkReal x9696=(sj1*sj2);
IkReal x9697=(cj3*gconst2);
IkReal x9698=(cj1*cj2);
IkReal x9699=(gconst2*sj3);
IkReal x9700=((1.0)*x9691);
IkReal x9701=((1.0)*x9690);
IkReal x9702=(gconst1*x9690);
IkReal x9703=(cj3*x9690);
IkReal x9704=(x9692+x9693);
IkReal x9705=(x9691*x9699);
evalcond[0]=((((-1.0)*r22*x9700))+((r21*x9702))+(((-1.0)*gconst2*r20*x9701)));
evalcond[1]=((((-1.0)*r02*x9700))+((r01*x9702))+(((-1.0)*gconst2*r00*x9701)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9701))+((r11*x9702))+(((-1.0)*r12*x9700)));
evalcond[3]=(((r11*x9691*x9695))+((r12*x9703))+(((-1.0)*r10*x9697*x9700))+((r11*x9699))+((r10*x9694)));
evalcond[4]=((((-1.0)*r11*x9694*x9700))+((r10*x9705))+(((-1.0)*r12*sj3*x9701))+((r11*x9697))+((r10*x9695)));
evalcond[5]=((((-1.0)*r20*x9697*x9700))+x9704+((r21*x9699))+((r21*x9691*x9695))+((r20*x9694))+((r22*x9703)));
evalcond[6]=((((-1.0)*x9696))+((r02*x9703))+((r01*x9691*x9695))+x9698+(((-1.0)*r00*x9697*x9700))+((r00*x9694))+((r01*x9699)));
evalcond[7]=((((-1.0)*r01*x9694*x9700))+((r00*x9705))+x9704+(((-1.0)*r02*sj3*x9701))+((r00*x9695))+((r01*x9697)));
evalcond[8]=((((-1.0)*x9698))+(((-1.0)*r21*x9694*x9700))+((r20*x9705))+((r21*x9697))+(((-1.0)*r22*sj3*x9701))+x9696+((r20*x9695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9706=gconst2*gconst2;
IkReal x9707=gconst1*gconst1;
IkReal x9708=(gconst2*r11);
IkReal x9709=(cj3*r02);
IkReal x9710=(gconst1*r01);
IkReal x9711=(cj3*r10);
IkReal x9712=(r10*sj3);
IkReal x9713=((1.0)*gconst1*r00);
IkReal x9714=(r01*x9707);
IkReal x9715=(r00*x9706);
CheckValue<IkReal> x9716=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst2*x9710*x9712))+((x9712*x9715))+(((-1.0)*sj3*x9708*x9713))+((r11*sj3*x9714)))),-1);
if(!x9716.valid){
continue;
}
CheckValue<IkReal> x9717 = IKatan2WithCheck(IkReal((((gconst1*r10*x9709))+((x9708*x9709)))),IkReal((((x9711*x9714))+(((-1.0)*gconst2*x9711*x9713))+((cj3*x9708*x9710))+(((-1.0)*cj3*r11*x9715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9716.value)))+(x9717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9718=IKsin(j4);
IkReal x9719=IKcos(j4);
IkReal x9720=(cj2*sj1);
IkReal x9721=(cj1*sj2);
IkReal x9722=(gconst1*sj3);
IkReal x9723=(cj3*gconst1);
IkReal x9724=(sj1*sj2);
IkReal x9725=(cj3*gconst2);
IkReal x9726=(cj1*cj2);
IkReal x9727=(gconst2*sj3);
IkReal x9728=((1.0)*x9719);
IkReal x9729=((1.0)*x9718);
IkReal x9730=(gconst1*x9718);
IkReal x9731=(cj3*x9718);
IkReal x9732=(x9720+x9721);
IkReal x9733=(x9719*x9727);
evalcond[0]=((((-1.0)*gconst2*r20*x9729))+(((-1.0)*r22*x9728))+((r21*x9730)));
evalcond[1]=((((-1.0)*r02*x9728))+(((-1.0)*gconst2*r00*x9729))+((r01*x9730)));
evalcond[2]=((-1.0)+((r11*x9730))+(((-1.0)*r12*x9728))+(((-1.0)*gconst2*r10*x9729)));
evalcond[3]=((((-1.0)*r10*x9725*x9728))+((r11*x9727))+((r12*x9731))+((r11*x9719*x9723))+((r10*x9722)));
evalcond[4]=(((r11*x9725))+(((-1.0)*r12*sj3*x9729))+(((-1.0)*r11*x9722*x9728))+((r10*x9723))+((r10*x9733)));
evalcond[5]=(x9732+((r20*x9722))+(((-1.0)*r20*x9725*x9728))+((r21*x9727))+((r21*x9719*x9723))+((r22*x9731)));
evalcond[6]=(((r01*x9727))+((r01*x9719*x9723))+((r02*x9731))+x9726+(((-1.0)*r00*x9725*x9728))+(((-1.0)*x9724))+((r00*x9722)));
evalcond[7]=(((r01*x9725))+(((-1.0)*r01*x9722*x9728))+(((-1.0)*r02*sj3*x9729))+x9732+((r00*x9723))+((r00*x9733)));
evalcond[8]=(((r20*x9733))+x9724+((r20*x9723))+(((-1.0)*r21*x9722*x9728))+(((-1.0)*r22*sj3*x9729))+((r21*x9725))+(((-1.0)*x9726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9734 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9734.valid){
continue;
}
CheckValue<IkReal> x9735=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9734.value)+(((1.5707963267949)*(x9735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9736=IKsin(j4);
IkReal x9737=IKcos(j4);
IkReal x9738=(cj2*sj1);
IkReal x9739=(cj1*sj2);
IkReal x9740=(gconst1*sj3);
IkReal x9741=(cj3*gconst1);
IkReal x9742=(sj1*sj2);
IkReal x9743=(cj3*gconst2);
IkReal x9744=(cj1*cj2);
IkReal x9745=(gconst2*sj3);
IkReal x9746=((1.0)*x9737);
IkReal x9747=((1.0)*x9736);
IkReal x9748=(gconst1*x9736);
IkReal x9749=(cj3*x9736);
IkReal x9750=(x9739+x9738);
IkReal x9751=(x9737*x9745);
evalcond[0]=(((r21*x9748))+(((-1.0)*gconst2*r20*x9747))+(((-1.0)*r22*x9746)));
evalcond[1]=((((-1.0)*gconst2*r00*x9747))+(((-1.0)*r02*x9746))+((r01*x9748)));
evalcond[2]=((-1.0)+((r11*x9748))+(((-1.0)*gconst2*r10*x9747))+(((-1.0)*r12*x9746)));
evalcond[3]=(((r11*x9745))+((r10*x9740))+(((-1.0)*r10*x9743*x9746))+((r12*x9749))+((r11*x9737*x9741)));
evalcond[4]=(((r10*x9751))+((r11*x9743))+((r10*x9741))+(((-1.0)*r12*sj3*x9747))+(((-1.0)*r11*x9740*x9746)));
evalcond[5]=(((r21*x9745))+((r21*x9737*x9741))+((r22*x9749))+(((-1.0)*r20*x9743*x9746))+x9750+((r20*x9740)));
evalcond[6]=(((r02*x9749))+(((-1.0)*x9742))+((r01*x9737*x9741))+x9744+(((-1.0)*r00*x9743*x9746))+((r01*x9745))+((r00*x9740)));
evalcond[7]=((((-1.0)*r01*x9740*x9746))+((r00*x9751))+(((-1.0)*r02*sj3*x9747))+x9750+((r01*x9743))+((r00*x9741)));
evalcond[8]=(((r21*x9743))+(((-1.0)*r21*x9740*x9746))+(((-1.0)*x9744))+x9742+((r20*x9741))+(((-1.0)*r22*sj3*x9747))+((r20*x9751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9752=((-1.0)*r20);
IkReal x9753=x8925;
CheckValue<IkReal> x9755 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9752),IKFAST_ATAN2_MAGTHRESH);
if(!x9755.valid){
continue;
}
IkReal x9754=((-1.0)*(x9755.value));
sj5=gconst1;
cj5=gconst2;
j5=x9754;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9754;
IkReal gconst1=(r21*x9753);
IkReal gconst2=(x9752*x9753);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9756=((-1.0)*r20);
IkReal x9757=x8925;
CheckValue<IkReal> x9759 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9756),IKFAST_ATAN2_MAGTHRESH);
if(!x9759.valid){
continue;
}
IkReal x9758=((-1.0)*(x9759.value));
sj5=gconst1;
cj5=gconst2;
j5=x9758;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9758;
IkReal gconst1=(r21*x9757);
IkReal gconst2=(x9756*x9757);
CheckValue<IkReal> x9767=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9767.valid){
continue;
}
IkReal x9760=x9767.value;
IkReal x9761=(sj3*x9760);
IkReal x9762=(r11*x9761);
IkReal x9763=(r00*x9761);
IkReal x9764=(r01*x9761);
IkReal x9765=(r10*x9761);
IkReal x9766=(r20*r21*x9761);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9763*(r20*r20)))+((r00*r20*r21*x9762))+((r01*x9762*(r21*r21)))+((r10*r20*r21*x9764))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9768=gconst1*gconst1;
IkReal x9769=gconst2*gconst2;
IkReal x9770=((1.0)*cj3);
IkReal x9771=(gconst2*r10);
IkReal x9772=(r01*sj3);
IkReal x9773=(gconst1*r00*sj3);
IkReal x9774=(gconst1*gconst2*r11);
IkReal x9775=(r10*x9769);
IkReal x9776=(r11*x9768);
CheckValue<IkReal> x9777=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9770*x9776))+(((-1.0)*r02*r12*x9770))+(((-1.0)*r00*x9770*x9775))+((cj3*gconst1*r01*x9771))+((cj3*r00*x9774)))),-1);
if(!x9777.valid){
continue;
}
CheckValue<IkReal> x9778 = IKatan2WithCheck(IkReal((((r12*x9773))+((gconst2*r12*x9772)))),IkReal((((x9772*x9774))+((r00*sj3*x9776))+(((-1.0)*x9771*x9773))+(((-1.0)*x9772*x9775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9777.value)))+(x9778.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9779=IKsin(j4);
IkReal x9780=IKcos(j4);
IkReal x9781=(sj1*sj2);
IkReal x9782=(gconst1*sj3);
IkReal x9783=(cj3*gconst1);
IkReal x9784=(cj3*gconst2);
IkReal x9785=((1.0)*cj2);
IkReal x9786=(cj1*sj2);
IkReal x9787=(gconst2*sj3);
IkReal x9788=(cj1*x9785);
IkReal x9789=((1.0)*x9780);
IkReal x9790=((1.0)*x9779);
IkReal x9791=(gconst1*x9779);
IkReal x9792=(cj3*x9779);
IkReal x9793=(x9780*x9787);
evalcond[0]=((((-1.0)*r22*x9789))+((r21*x9791))+(((-1.0)*gconst2*r20*x9790)));
evalcond[1]=((((-1.0)*r12*x9789))+((r11*x9791))+(((-1.0)*gconst2*r10*x9790)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9790))+((r01*x9791))+(((-1.0)*r02*x9789)));
evalcond[3]=(((r00*x9782))+((r02*x9792))+((r01*x9787))+(((-1.0)*r00*x9784*x9789))+((r01*x9780*x9783)));
evalcond[4]=(((r00*x9783))+((r01*x9784))+(((-1.0)*r02*sj3*x9790))+((r00*x9793))+(((-1.0)*r01*x9782*x9789)));
evalcond[5]=(((cj2*sj1))+((r21*x9780*x9783))+((r21*x9787))+x9786+(((-1.0)*r20*x9784*x9789))+((r20*x9782))+((r22*x9792)));
evalcond[6]=(((r12*x9792))+x9781+((r10*x9782))+((r11*x9787))+(((-1.0)*x9788))+((r11*x9780*x9783))+(((-1.0)*r10*x9784*x9789)));
evalcond[7]=((((-1.0)*r21*x9782*x9789))+((r21*x9784))+((r20*x9793))+x9781+((r20*x9783))+(((-1.0)*r22*sj3*x9790))+(((-1.0)*x9788)));
evalcond[8]=(((r10*x9793))+(((-1.0)*r12*sj3*x9790))+(((-1.0)*r11*x9782*x9789))+(((-1.0)*sj1*x9785))+((r10*x9783))+((r11*x9784))+(((-1.0)*x9786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9794=gconst2*gconst2;
IkReal x9795=gconst1*gconst1;
IkReal x9796=(gconst1*r00);
IkReal x9797=(r11*sj3);
IkReal x9798=((1.0)*gconst2);
IkReal x9799=(cj3*r12);
IkReal x9800=(cj3*r11);
IkReal x9801=(gconst2*r01);
IkReal x9802=(cj3*r10);
IkReal x9803=(r10*sj3);
CheckValue<IkReal> x9804 = IKatan2WithCheck(IkReal((((x9799*x9801))+((x9796*x9799)))),IkReal((((gconst1*x9800*x9801))+(((-1.0)*r01*x9794*x9802))+(((-1.0)*x9796*x9798*x9802))+((r00*x9795*x9800)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9804.valid){
continue;
}
CheckValue<IkReal> x9805=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9798*x9803))+((r01*x9795*x9797))+(((-1.0)*x9796*x9797*x9798))+((r00*x9794*x9803)))),-1);
if(!x9805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9804.value)+(((1.5707963267949)*(x9805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9806=IKsin(j4);
IkReal x9807=IKcos(j4);
IkReal x9808=(sj1*sj2);
IkReal x9809=(gconst1*sj3);
IkReal x9810=(cj3*gconst1);
IkReal x9811=(cj3*gconst2);
IkReal x9812=((1.0)*cj2);
IkReal x9813=(cj1*sj2);
IkReal x9814=(gconst2*sj3);
IkReal x9815=(cj1*x9812);
IkReal x9816=((1.0)*x9807);
IkReal x9817=((1.0)*x9806);
IkReal x9818=(gconst1*x9806);
IkReal x9819=(cj3*x9806);
IkReal x9820=(x9807*x9814);
evalcond[0]=(((r21*x9818))+(((-1.0)*r22*x9816))+(((-1.0)*gconst2*r20*x9817)));
evalcond[1]=((((-1.0)*gconst2*r10*x9817))+((r11*x9818))+(((-1.0)*r12*x9816)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9817))+(((-1.0)*r02*x9816))+((r01*x9818)));
evalcond[3]=(((r00*x9809))+((r01*x9807*x9810))+((r02*x9819))+(((-1.0)*r00*x9811*x9816))+((r01*x9814)));
evalcond[4]=(((r00*x9820))+(((-1.0)*r01*x9809*x9816))+(((-1.0)*r02*sj3*x9817))+((r00*x9810))+((r01*x9811)));
evalcond[5]=(((cj2*sj1))+((r21*x9814))+((r21*x9807*x9810))+((r22*x9819))+(((-1.0)*r20*x9811*x9816))+((r20*x9809))+x9813);
evalcond[6]=(((r10*x9809))+(((-1.0)*x9815))+((r12*x9819))+((r11*x9814))+((r11*x9807*x9810))+(((-1.0)*r10*x9811*x9816))+x9808);
evalcond[7]=(((r20*x9820))+((r21*x9811))+(((-1.0)*x9815))+(((-1.0)*r22*sj3*x9817))+(((-1.0)*r21*x9809*x9816))+x9808+((r20*x9810)));
evalcond[8]=((((-1.0)*x9813))+((r11*x9811))+(((-1.0)*r12*sj3*x9817))+(((-1.0)*sj1*x9812))+((r10*x9820))+(((-1.0)*r11*x9809*x9816))+((r10*x9810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9821=((1.0)*gconst2);
CheckValue<IkReal> x9822=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9821)))),-1);
if(!x9822.valid){
continue;
}
CheckValue<IkReal> x9823 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9821)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9822.value)))+(x9823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9824=IKsin(j4);
IkReal x9825=IKcos(j4);
IkReal x9826=(sj1*sj2);
IkReal x9827=(gconst1*sj3);
IkReal x9828=(cj3*gconst1);
IkReal x9829=(cj3*gconst2);
IkReal x9830=((1.0)*cj2);
IkReal x9831=(cj1*sj2);
IkReal x9832=(gconst2*sj3);
IkReal x9833=(cj1*x9830);
IkReal x9834=((1.0)*x9825);
IkReal x9835=((1.0)*x9824);
IkReal x9836=(gconst1*x9824);
IkReal x9837=(cj3*x9824);
IkReal x9838=(x9825*x9832);
evalcond[0]=(((r21*x9836))+(((-1.0)*r22*x9834))+(((-1.0)*gconst2*r20*x9835)));
evalcond[1]=(((r11*x9836))+(((-1.0)*gconst2*r10*x9835))+(((-1.0)*r12*x9834)));
evalcond[2]=((-1.0)+((r01*x9836))+(((-1.0)*r02*x9834))+(((-1.0)*gconst2*r00*x9835)));
evalcond[3]=(((r01*x9832))+((r00*x9827))+((r02*x9837))+((r01*x9825*x9828))+(((-1.0)*r00*x9829*x9834)));
evalcond[4]=((((-1.0)*r02*sj3*x9835))+((r00*x9838))+((r00*x9828))+((r01*x9829))+(((-1.0)*r01*x9827*x9834)));
evalcond[5]=(((r20*x9827))+((cj2*sj1))+((r21*x9832))+((r22*x9837))+((r21*x9825*x9828))+(((-1.0)*r20*x9829*x9834))+x9831);
evalcond[6]=((((-1.0)*x9833))+((r11*x9832))+((r12*x9837))+(((-1.0)*r10*x9829*x9834))+x9826+((r10*x9827))+((r11*x9825*x9828)));
evalcond[7]=((((-1.0)*x9833))+((r20*x9828))+(((-1.0)*r21*x9827*x9834))+(((-1.0)*r22*sj3*x9835))+((r21*x9829))+((r20*x9838))+x9826);
evalcond[8]=(((r10*x9838))+((r11*x9829))+(((-1.0)*x9831))+(((-1.0)*sj1*x9830))+(((-1.0)*r11*x9827*x9834))+(((-1.0)*r12*sj3*x9835))+((r10*x9828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9839=((-1.0)*r20);
IkReal x9840=x8925;
CheckValue<IkReal> x9842 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9839),IKFAST_ATAN2_MAGTHRESH);
if(!x9842.valid){
continue;
}
IkReal x9841=((-1.0)*(x9842.value));
sj5=gconst1;
cj5=gconst2;
j5=x9841;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9841;
IkReal gconst1=(r21*x9840);
IkReal gconst2=(x9839*x9840);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9843=((-1.0)*r20);
IkReal x9844=x8925;
CheckValue<IkReal> x9846 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9843),IKFAST_ATAN2_MAGTHRESH);
if(!x9846.valid){
continue;
}
IkReal x9845=((-1.0)*(x9846.value));
sj5=gconst1;
cj5=gconst2;
j5=x9845;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9845;
IkReal gconst1=(r21*x9844);
IkReal gconst2=(x9843*x9844);
CheckValue<IkReal> x9854=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9854.valid){
continue;
}
IkReal x9847=x9854.value;
IkReal x9848=(sj3*x9847);
IkReal x9849=(r11*x9848);
IkReal x9850=(r00*x9848);
IkReal x9851=(r01*x9848);
IkReal x9852=(r10*x9848);
IkReal x9853=(r20*r21*x9848);
j4eval[0]=IKsign((((r00*r20*r21*x9849))+((r02*r12*sj3))+((r10*x9850*(r20*r20)))+((r01*x9849*(r21*r21)))+((r10*r20*r21*x9851))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9855=gconst1*gconst1;
IkReal x9856=gconst2*gconst2;
IkReal x9857=((1.0)*cj3);
IkReal x9858=(gconst2*r10);
IkReal x9859=(r01*sj3);
IkReal x9860=(gconst1*r00*sj3);
IkReal x9861=(gconst1*gconst2*r11);
IkReal x9862=(r10*x9856);
IkReal x9863=(r11*x9855);
CheckValue<IkReal> x9864=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9857))+((cj3*r00*x9861))+(((-1.0)*r01*x9857*x9863))+(((-1.0)*r00*x9857*x9862))+((cj3*gconst1*r01*x9858)))),-1);
if(!x9864.valid){
continue;
}
CheckValue<IkReal> x9865 = IKatan2WithCheck(IkReal((((r12*x9860))+((gconst2*r12*x9859)))),IkReal((((r00*sj3*x9863))+(((-1.0)*x9858*x9860))+(((-1.0)*x9859*x9862))+((x9859*x9861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9864.value)))+(x9865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9866=IKsin(j4);
IkReal x9867=IKcos(j4);
IkReal x9868=(cj2*sj1);
IkReal x9869=(cj1*sj2);
IkReal x9870=(gconst1*sj3);
IkReal x9871=(cj3*gconst1);
IkReal x9872=(sj1*sj2);
IkReal x9873=(cj3*gconst2);
IkReal x9874=(cj1*cj2);
IkReal x9875=(gconst2*sj3);
IkReal x9876=((1.0)*x9867);
IkReal x9877=((1.0)*x9866);
IkReal x9878=(gconst1*x9866);
IkReal x9879=(cj3*x9866);
IkReal x9880=(x9869+x9868);
IkReal x9881=(x9867*x9875);
evalcond[0]=((((-1.0)*gconst2*r20*x9877))+((r21*x9878))+(((-1.0)*r22*x9876)));
evalcond[1]=((((-1.0)*gconst2*r10*x9877))+((r11*x9878))+(((-1.0)*r12*x9876)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9876))+(((-1.0)*gconst2*r00*x9877))+((r01*x9878)));
evalcond[3]=(((r02*x9879))+(((-1.0)*r00*x9873*x9876))+((r01*x9867*x9871))+((r00*x9870))+((r01*x9875)));
evalcond[4]=((((-1.0)*r01*x9870*x9876))+(((-1.0)*r02*sj3*x9877))+((r00*x9881))+((r00*x9871))+((r01*x9873)));
evalcond[5]=(((r21*x9875))+((r20*x9870))+((r21*x9867*x9871))+((r22*x9879))+(((-1.0)*r20*x9873*x9876))+x9880);
evalcond[6]=(((r12*x9879))+(((-1.0)*x9872))+((r10*x9870))+((r11*x9867*x9871))+(((-1.0)*r10*x9873*x9876))+((r11*x9875))+x9874);
evalcond[7]=((((-1.0)*r12*sj3*x9877))+((r10*x9871))+(((-1.0)*r11*x9870*x9876))+((r10*x9881))+((r11*x9873))+x9880);
evalcond[8]=(((r20*x9881))+(((-1.0)*r21*x9870*x9876))+(((-1.0)*x9874))+((r21*x9873))+((r20*x9871))+(((-1.0)*r22*sj3*x9877))+x9872);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9882=gconst2*gconst2;
IkReal x9883=gconst1*gconst1;
IkReal x9884=(gconst1*r00);
IkReal x9885=(r11*sj3);
IkReal x9886=((1.0)*gconst2);
IkReal x9887=(cj3*r12);
IkReal x9888=(cj3*r11);
IkReal x9889=(gconst2*r01);
IkReal x9890=(cj3*r10);
IkReal x9891=(r10*sj3);
CheckValue<IkReal> x9892=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9884*x9885*x9886))+((r02*r12*sj3))+((r00*x9882*x9891))+((r01*x9883*x9885))+(((-1.0)*gconst1*r01*x9886*x9891)))),-1);
if(!x9892.valid){
continue;
}
CheckValue<IkReal> x9893 = IKatan2WithCheck(IkReal((((x9884*x9887))+((x9887*x9889)))),IkReal(((((-1.0)*x9884*x9886*x9890))+(((-1.0)*r01*x9882*x9890))+((r00*x9883*x9888))+((gconst1*x9888*x9889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9892.value)))+(x9893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9894=IKsin(j4);
IkReal x9895=IKcos(j4);
IkReal x9896=(cj2*sj1);
IkReal x9897=(cj1*sj2);
IkReal x9898=(gconst1*sj3);
IkReal x9899=(cj3*gconst1);
IkReal x9900=(sj1*sj2);
IkReal x9901=(cj3*gconst2);
IkReal x9902=(cj1*cj2);
IkReal x9903=(gconst2*sj3);
IkReal x9904=((1.0)*x9895);
IkReal x9905=((1.0)*x9894);
IkReal x9906=(gconst1*x9894);
IkReal x9907=(cj3*x9894);
IkReal x9908=(x9896+x9897);
IkReal x9909=(x9895*x9903);
evalcond[0]=((((-1.0)*gconst2*r20*x9905))+(((-1.0)*r22*x9904))+((r21*x9906)));
evalcond[1]=((((-1.0)*r12*x9904))+((r11*x9906))+(((-1.0)*gconst2*r10*x9905)));
evalcond[2]=((1.0)+((r01*x9906))+(((-1.0)*r02*x9904))+(((-1.0)*gconst2*r00*x9905)));
evalcond[3]=(((r02*x9907))+(((-1.0)*r00*x9901*x9904))+((r00*x9898))+((r01*x9903))+((r01*x9895*x9899)));
evalcond[4]=(((r00*x9899))+((r00*x9909))+((r01*x9901))+(((-1.0)*r01*x9898*x9904))+(((-1.0)*r02*sj3*x9905)));
evalcond[5]=(((r21*x9895*x9899))+((r22*x9907))+((r21*x9903))+((r20*x9898))+x9908+(((-1.0)*r20*x9901*x9904)));
evalcond[6]=(((r11*x9895*x9899))+(((-1.0)*x9900))+((r12*x9907))+((r11*x9903))+(((-1.0)*r10*x9901*x9904))+x9902+((r10*x9898)));
evalcond[7]=(((r11*x9901))+x9908+((r10*x9899))+((r10*x9909))+(((-1.0)*r11*x9898*x9904))+(((-1.0)*r12*sj3*x9905)));
evalcond[8]=((((-1.0)*r22*sj3*x9905))+((r20*x9909))+(((-1.0)*x9902))+(((-1.0)*r21*x9898*x9904))+((r21*x9901))+((r20*x9899))+x9900);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9910 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9910.valid){
continue;
}
CheckValue<IkReal> x9911=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9910.value)+(((1.5707963267949)*(x9911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9912=IKsin(j4);
IkReal x9913=IKcos(j4);
IkReal x9914=(cj2*sj1);
IkReal x9915=(cj1*sj2);
IkReal x9916=(gconst1*sj3);
IkReal x9917=(cj3*gconst1);
IkReal x9918=(sj1*sj2);
IkReal x9919=(cj3*gconst2);
IkReal x9920=(cj1*cj2);
IkReal x9921=(gconst2*sj3);
IkReal x9922=((1.0)*x9913);
IkReal x9923=((1.0)*x9912);
IkReal x9924=(gconst1*x9912);
IkReal x9925=(cj3*x9912);
IkReal x9926=(x9915+x9914);
IkReal x9927=(x9913*x9921);
evalcond[0]=((((-1.0)*gconst2*r20*x9923))+(((-1.0)*r22*x9922))+((r21*x9924)));
evalcond[1]=((((-1.0)*gconst2*r10*x9923))+(((-1.0)*r12*x9922))+((r11*x9924)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9922))+(((-1.0)*gconst2*r00*x9923))+((r01*x9924)));
evalcond[3]=(((r02*x9925))+((r00*x9916))+(((-1.0)*r00*x9919*x9922))+((r01*x9913*x9917))+((r01*x9921)));
evalcond[4]=((((-1.0)*r01*x9916*x9922))+((r01*x9919))+((r00*x9917))+(((-1.0)*r02*sj3*x9923))+((r00*x9927)));
evalcond[5]=(((r20*x9916))+((r21*x9913*x9917))+((r21*x9921))+x9926+(((-1.0)*r20*x9919*x9922))+((r22*x9925)));
evalcond[6]=((((-1.0)*r10*x9919*x9922))+(((-1.0)*x9918))+((r11*x9913*x9917))+((r11*x9921))+((r12*x9925))+x9920+((r10*x9916)));
evalcond[7]=(((r10*x9927))+((r11*x9919))+(((-1.0)*r12*sj3*x9923))+(((-1.0)*r11*x9916*x9922))+x9926+((r10*x9917)));
evalcond[8]=(((r20*x9917))+((r20*x9927))+(((-1.0)*x9920))+((r21*x9919))+(((-1.0)*r21*x9916*x9922))+x9918+(((-1.0)*r22*sj3*x9923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9928=((-1.0)*r20);
IkReal x9929=((-1.0)*px);
CheckValue<IkReal> x9931 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9928),IKFAST_ATAN2_MAGTHRESH);
if(!x9931.valid){
continue;
}
IkReal x9930=((-1.0)*(x9931.value));
sj5=gconst1;
cj5=gconst2;
j5=x9930;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9929);
rxp1_1=(px*r21);
rxp1_2=(r11*x9929);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9930;
IkReal gconst1=r21;
IkReal gconst2=x9928;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9932=((-1.0)*r20);
IkReal x9933=((-1.0)*px);
CheckValue<IkReal> x9935 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9932),IKFAST_ATAN2_MAGTHRESH);
if(!x9935.valid){
continue;
}
IkReal x9934=((-1.0)*(x9935.value));
sj5=gconst1;
cj5=gconst2;
j5=x9934;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9933);
rxp1_1=(px*r21);
rxp1_2=(r11*x9933);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9934;
IkReal gconst1=r21;
IkReal gconst2=x9932;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9936=((-1.0)*r20);
IkReal x9937=((-1.0)*px);
CheckValue<IkReal> x9939 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9936),IKFAST_ATAN2_MAGTHRESH);
if(!x9939.valid){
continue;
}
IkReal x9938=((-1.0)*(x9939.value));
sj5=gconst1;
cj5=gconst2;
j5=x9938;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9937);
rxp1_1=(px*r21);
rxp1_2=(r11*x9937);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9938;
IkReal gconst1=r21;
IkReal gconst2=x9936;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9940=((-1.0)*r20);
IkReal x9941=((-1.0)*px);
CheckValue<IkReal> x9943 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9940),IKFAST_ATAN2_MAGTHRESH);
if(!x9943.valid){
continue;
}
IkReal x9942=((-1.0)*(x9943.value));
sj5=gconst1;
cj5=gconst2;
j5=x9942;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9941);
rxp1_1=(px*r21);
rxp1_2=(r11*x9941);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9942;
IkReal gconst1=r21;
IkReal gconst2=x9940;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9944=((-1.0)*r20);
IkReal x9945=((-1.0)*px);
CheckValue<IkReal> x9947 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9944),IKFAST_ATAN2_MAGTHRESH);
if(!x9947.valid){
continue;
}
IkReal x9946=((-1.0)*(x9947.value));
sj5=gconst1;
cj5=gconst2;
j5=x9946;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9945);
rxp1_1=(px*r21);
rxp1_2=(r11*x9945);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9946;
IkReal gconst1=r21;
IkReal gconst2=x9944;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9948=((-1.0)*r20);
IkReal x9949=((-1.0)*px);
CheckValue<IkReal> x9951 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9948),IKFAST_ATAN2_MAGTHRESH);
if(!x9951.valid){
continue;
}
IkReal x9950=((-1.0)*(x9951.value));
sj5=gconst1;
cj5=gconst2;
j5=x9950;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9949);
rxp1_1=(px*r21);
rxp1_2=(r11*x9949);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9950;
IkReal gconst1=r21;
IkReal gconst2=x9948;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9954=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9954.valid){
continue;
}
IkReal x9952=x9954.value;
IkReal x9953=(sj0*x9952);
cj4array[0]=(((cj1*sj2*x9953))+((cj2*sj1*x9953)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9955=IKsin(j4);
IkReal x9956=IKcos(j4);
IkReal x9957=(gconst1*x9955);
IkReal x9958=((1.0)*x9956);
IkReal x9959=((1.0)*gconst2*x9955);
evalcond[0]=((-1.0)*r02*x9955);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9958)));
evalcond[2]=((((-1.0)*r20*x9959))+((r21*x9957)));
evalcond[3]=(((r11*x9957))+(((-1.0)*r10*x9959)));
evalcond[4]=((((-1.0)*gconst1*r21*x9958))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9961=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9961.valid){
continue;
}
IkReal x9960=x9961.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9960))+((cj1*cj2*x9960)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9962=IKsin(j4);
IkReal x9963=IKcos(j4);
IkReal x9964=(gconst2*r10);
IkReal x9965=((1.0)*sj0);
IkReal x9966=((1.0)*x9962);
IkReal x9967=(gconst1*x9962);
IkReal x9968=((1.0)*x9963);
evalcond[0]=((-1.0)*r02*x9962);
evalcond[1]=((((-1.0)*x9965))+(((-1.0)*r02*x9968)));
evalcond[2]=(((r21*x9967))+(((-1.0)*gconst2*r20*x9966)));
evalcond[3]=((((-1.0)*x9964*x9966))+((r11*x9967)));
evalcond[4]=((((-1.0)*cj2*sj1*x9965))+(((-1.0)*cj1*sj2*x9965))+((x9963*x9964))+(((-1.0)*gconst1*r11*x9968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9969=IKPowWithIntegerCheck(r02,-1);
if(!x9969.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9969.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9970=IKsin(j4);
IkReal x9971=IKcos(j4);
IkReal x9972=(gconst2*r10);
IkReal x9973=((1.0)*sj0);
IkReal x9974=(gconst1*r11);
IkReal x9975=(gconst1*r21);
IkReal x9976=(gconst2*r20);
IkReal x9977=((1.0)*x9970);
IkReal x9978=((1.0)*x9971);
evalcond[0]=((-1.0)*r02*x9970);
evalcond[1]=(((x9970*x9975))+(((-1.0)*x9976*x9977)));
evalcond[2]=(((x9970*x9974))+(((-1.0)*x9972*x9977)));
evalcond[3]=((((-1.0)*x9975*x9978))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9971*x9976)));
evalcond[4]=((((-1.0)*cj2*sj1*x9973))+(((-1.0)*cj1*sj2*x9973))+(((-1.0)*x9974*x9978))+((x9971*x9972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9979=((-1.0)*r20);
IkReal x9980=((-1.0)*px);
CheckValue<IkReal> x9982 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9979),IKFAST_ATAN2_MAGTHRESH);
if(!x9982.valid){
continue;
}
IkReal x9981=((-1.0)*(x9982.value));
sj5=gconst1;
cj5=gconst2;
j5=x9981;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9980);
rxp1_1=(px*r21);
rxp1_2=(r11*x9980);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9981;
IkReal gconst1=r21;
IkReal gconst2=x9979;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9983=((-1.0)*r20);
IkReal x9984=((-1.0)*px);
CheckValue<IkReal> x9986 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9983),IKFAST_ATAN2_MAGTHRESH);
if(!x9986.valid){
continue;
}
IkReal x9985=((-1.0)*(x9986.value));
sj5=gconst1;
cj5=gconst2;
j5=x9985;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9984);
rxp1_1=(px*r21);
rxp1_2=(r11*x9984);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9985;
IkReal gconst1=r21;
IkReal gconst2=x9983;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9987=((-1.0)*r20);
IkReal x9988=((-1.0)*px);
CheckValue<IkReal> x9990 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9987),IKFAST_ATAN2_MAGTHRESH);
if(!x9990.valid){
continue;
}
IkReal x9989=((-1.0)*(x9990.value));
sj5=gconst1;
cj5=gconst2;
j5=x9989;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9988);
rxp1_1=(px*r21);
rxp1_2=(r11*x9988);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9989;
IkReal gconst1=r21;
IkReal gconst2=x9987;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9993=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9993.valid){
continue;
}
IkReal x9991=x9993.value;
IkReal x9992=(sj0*x9991);
cj4array[0]=(((cj1*sj2*x9992))+((cj2*sj1*x9992)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9994=IKsin(j4);
IkReal x9995=IKcos(j4);
IkReal x9996=((1.0)*gconst2);
IkReal x9997=(gconst1*r21);
evalcond[0]=(r02*x9994);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9995)));
evalcond[2]=((((-1.0)*r20*x9994*x9996))+((x9994*x9997)));
evalcond[3]=(((gconst1*r11*x9994))+(((-1.0)*r10*x9994*x9996)));
evalcond[4]=((((-1.0)*r20*x9995*x9996))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9995*x9997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9999=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9999.valid){
continue;
}
IkReal x9998=x9999.value;
cj4array[0]=(((cj1*cj2*x9998))+(((-1.0)*sj1*sj2*x9998)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10000=IKsin(j4);
IkReal x10001=IKcos(j4);
IkReal x10002=((1.0)*sj0);
IkReal x10003=(gconst1*x10000);
IkReal x10004=((1.0)*x10001);
IkReal x10005=((1.0)*gconst2*x10000);
evalcond[0]=(r02*x10000);
evalcond[1]=((((-1.0)*r02*x10004))+(((-1.0)*x10002)));
evalcond[2]=((((-1.0)*r20*x10005))+((r21*x10003)));
evalcond[3]=(((r11*x10003))+(((-1.0)*r10*x10005)));
evalcond[4]=((((-1.0)*cj2*sj1*x10002))+(((-1.0)*cj1*sj2*x10002))+((gconst1*r11*x10001))+(((-1.0)*gconst2*r10*x10004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10006=IKPowWithIntegerCheck(r02,-1);
if(!x10006.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10006.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10007=IKsin(j4);
IkReal x10008=IKcos(j4);
IkReal x10009=(gconst1*r21);
IkReal x10010=((1.0)*sj0);
IkReal x10011=(gconst1*r11);
IkReal x10012=((1.0)*gconst2*r10);
IkReal x10013=((1.0)*gconst2*r20);
evalcond[0]=(r02*x10007);
evalcond[1]=(((x10007*x10009))+(((-1.0)*x10007*x10013)));
evalcond[2]=(((x10007*x10011))+(((-1.0)*x10007*x10012)));
evalcond[3]=(((x10008*x10009))+(((-1.0)*x10008*x10013))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj2*sj1*x10010))+(((-1.0)*x10008*x10012))+(((-1.0)*cj1*sj2*x10010))+((x10008*x10011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10015=IKPowWithIntegerCheck(r02,-1);
if(!x10015.valid){
continue;
}
IkReal x10014=x10015.value;
CheckValue<IkReal> x10016=IKPowWithIntegerCheck(cj3,-1);
if(!x10016.valid){
continue;
}
if( IKabs((x10014*(x10016.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10014)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10014*(x10016.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10014))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10014*(x10016.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10014));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10017=IKsin(j4);
IkReal x10018=IKcos(j4);
IkReal x10019=(gconst2*r10);
IkReal x10020=(gconst1*r11);
IkReal x10021=(sj1*sj2);
IkReal x10022=(gconst2*r20);
IkReal x10023=(cj2*sj1);
IkReal x10024=((1.0)*sj0);
IkReal x10025=(gconst1*r20);
IkReal x10026=(gconst2*r11);
IkReal x10027=(gconst1*r21);
IkReal x10028=((1.0)*cj0);
IkReal x10029=(gconst1*r10);
IkReal x10030=(cj1*sj2);
IkReal x10031=(gconst2*r21);
IkReal x10032=(sj3*x10018);
IkReal x10033=((1.0)*cj1*cj2);
IkReal x10034=(cj3*x10018);
IkReal x10035=(r02*x10017);
IkReal x10036=((1.0)*x10017);
evalcond[0]=((((-1.0)*x10024))+(((-1.0)*r02*x10018)));
evalcond[1]=(((x10017*x10027))+(((-1.0)*x10022*x10036)));
evalcond[2]=(cj0+((x10017*x10020))+(((-1.0)*x10019*x10036)));
evalcond[3]=(((cj0*x10021))+((cj3*x10035))+(((-1.0)*cj1*cj2*x10028)));
evalcond[4]=((((-1.0)*sj3*x10035))+(((-1.0)*x10028*x10030))+(((-1.0)*x10023*x10028)));
evalcond[5]=(((x10027*x10034))+((sj3*x10031))+((sj3*x10025))+x10030+x10023+(((-1.0)*x10022*x10034)));
evalcond[6]=((((-1.0)*x10027*x10032))+x10021+((cj3*x10031))+(((-1.0)*x10033))+((x10022*x10032))+((cj3*x10025)));
evalcond[7]=(((sj0*x10021))+((x10020*x10034))+((sj3*x10026))+((sj3*x10029))+(((-1.0)*x10019*x10034))+(((-1.0)*cj1*cj2*x10024)));
evalcond[8]=((((-1.0)*x10020*x10032))+(((-1.0)*x10023*x10024))+((x10019*x10032))+(((-1.0)*x10024*x10030))+((cj3*x10029))+((cj3*x10026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10037=((1.0)*sj3);
IkReal x10038=((1.0)*gconst2);
CheckValue<IkReal> x10039=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10038))),-1);
if(!x10039.valid){
continue;
}
CheckValue<IkReal> x10040=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10038))),-1);
if(!x10040.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10039.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10040.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10037))+(((-1.0)*gconst2*r21*x10037)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10039.value)))+IKsqr(((x10040.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10037))+(((-1.0)*gconst2*r21*x10037))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10039.value)), ((x10040.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10037))+(((-1.0)*gconst2*r21*x10037))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10041=IKsin(j4);
IkReal x10042=IKcos(j4);
IkReal x10043=(gconst2*r10);
IkReal x10044=(gconst1*r11);
IkReal x10045=(sj1*sj2);
IkReal x10046=(gconst2*r20);
IkReal x10047=(cj2*sj1);
IkReal x10048=((1.0)*sj0);
IkReal x10049=(gconst1*r20);
IkReal x10050=(gconst2*r11);
IkReal x10051=(gconst1*r21);
IkReal x10052=((1.0)*cj0);
IkReal x10053=(gconst1*r10);
IkReal x10054=(cj1*sj2);
IkReal x10055=(gconst2*r21);
IkReal x10056=(sj3*x10042);
IkReal x10057=((1.0)*cj1*cj2);
IkReal x10058=(cj3*x10042);
IkReal x10059=(r02*x10041);
IkReal x10060=((1.0)*x10041);
evalcond[0]=((((-1.0)*r02*x10042))+(((-1.0)*x10048)));
evalcond[1]=(((x10041*x10051))+(((-1.0)*x10046*x10060)));
evalcond[2]=(cj0+((x10041*x10044))+(((-1.0)*x10043*x10060)));
evalcond[3]=((((-1.0)*cj1*cj2*x10052))+((cj0*x10045))+((cj3*x10059)));
evalcond[4]=((((-1.0)*sj3*x10059))+(((-1.0)*x10047*x10052))+(((-1.0)*x10052*x10054)));
evalcond[5]=((((-1.0)*x10046*x10058))+((sj3*x10055))+((sj3*x10049))+x10054+x10047+((x10051*x10058)));
evalcond[6]=((((-1.0)*x10057))+(((-1.0)*x10051*x10056))+x10045+((cj3*x10049))+((cj3*x10055))+((x10046*x10056)));
evalcond[7]=(((sj3*x10053))+((sj3*x10050))+((sj0*x10045))+(((-1.0)*x10043*x10058))+((x10044*x10058))+(((-1.0)*cj1*cj2*x10048)));
evalcond[8]=(((x10043*x10056))+(((-1.0)*x10048*x10054))+(((-1.0)*x10047*x10048))+((cj3*x10053))+((cj3*x10050))+(((-1.0)*x10044*x10056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10061=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10061.valid){
continue;
}
CheckValue<IkReal> x10062=IKPowWithIntegerCheck(r02,-1);
if(!x10062.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10061.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10062.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10061.value)))+IKsqr(((-1.0)*sj0*(x10062.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10061.value)), ((-1.0)*sj0*(x10062.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10063=IKsin(j4);
IkReal x10064=IKcos(j4);
IkReal x10065=(gconst2*r10);
IkReal x10066=(gconst1*r11);
IkReal x10067=(sj1*sj2);
IkReal x10068=(gconst2*r20);
IkReal x10069=(cj2*sj1);
IkReal x10070=((1.0)*sj0);
IkReal x10071=(gconst1*r20);
IkReal x10072=(gconst2*r11);
IkReal x10073=(gconst1*r21);
IkReal x10074=((1.0)*cj0);
IkReal x10075=(gconst1*r10);
IkReal x10076=(cj1*sj2);
IkReal x10077=(gconst2*r21);
IkReal x10078=(sj3*x10064);
IkReal x10079=((1.0)*cj1*cj2);
IkReal x10080=(cj3*x10064);
IkReal x10081=(r02*x10063);
IkReal x10082=((1.0)*x10063);
evalcond[0]=((((-1.0)*x10070))+(((-1.0)*r02*x10064)));
evalcond[1]=((((-1.0)*x10068*x10082))+((x10063*x10073)));
evalcond[2]=((((-1.0)*x10065*x10082))+cj0+((x10063*x10066)));
evalcond[3]=(((cj3*x10081))+(((-1.0)*cj1*cj2*x10074))+((cj0*x10067)));
evalcond[4]=((((-1.0)*x10074*x10076))+(((-1.0)*sj3*x10081))+(((-1.0)*x10069*x10074)));
evalcond[5]=(((sj3*x10071))+((sj3*x10077))+((x10073*x10080))+x10076+x10069+(((-1.0)*x10068*x10080)));
evalcond[6]=((((-1.0)*x10079))+x10067+((x10068*x10078))+((cj3*x10071))+((cj3*x10077))+(((-1.0)*x10073*x10078)));
evalcond[7]=(((sj3*x10072))+((sj3*x10075))+(((-1.0)*x10065*x10080))+((x10066*x10080))+(((-1.0)*cj1*cj2*x10070))+((sj0*x10067)));
evalcond[8]=(((x10065*x10078))+(((-1.0)*x10066*x10078))+((cj3*x10072))+((cj3*x10075))+(((-1.0)*x10070*x10076))+(((-1.0)*x10069*x10070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10083=gconst1*gconst1;
IkReal x10084=r21*r21;
IkReal x10085=gconst2*gconst2;
IkReal x10086=r20*r20;
IkReal x10087=(gconst2*r20);
IkReal x10088=(cj1*cj2);
IkReal x10089=(sj1*sj2);
IkReal x10090=(gconst1*r21);
IkReal x10091=(cj3*gconst2);
IkReal x10092=(cj3*r20);
CheckValue<IkReal> x10093=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10085*x10086))+(((-2.0)*sj3*x10087*x10090))+((sj3*x10083*x10084)))),-1);
if(!x10093.valid){
continue;
}
CheckValue<IkReal> x10094 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10088))+((r21*r22*x10091))+((r22*x10089))+((gconst1*r22*x10092)))),IkReal((((x10087*x10088))+(((-1.0)*x10087*x10089))+((r21*x10083*x10092))+((gconst1*x10084*x10091))+(((-1.0)*gconst1*x10086*x10091))+(((-1.0)*r21*x10085*x10092))+((x10089*x10090))+(((-1.0)*x10088*x10090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10093.value)))+(x10094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10095=IKsin(j4);
IkReal x10096=IKcos(j4);
IkReal x10097=(cj3*gconst1);
IkReal x10098=(gconst1*r01);
IkReal x10099=(gconst1*r11);
IkReal x10100=(sj1*sj2);
IkReal x10101=(cj3*gconst2);
IkReal x10102=(gconst1*sj3);
IkReal x10103=(gconst2*sj3);
IkReal x10104=((1.0)*sj0);
IkReal x10105=(cj1*sj2);
IkReal x10106=((1.0)*x10096);
IkReal x10107=((1.0)*x10095);
IkReal x10108=((1.0)*cj1*cj2);
IkReal x10109=(cj3*x10095);
IkReal x10110=((1.0)*cj2*sj1);
IkReal x10111=(x10096*x10103);
evalcond[0]=((((-1.0)*gconst2*r20*x10107))+(((-1.0)*r22*x10106))+((gconst1*r21*x10095)));
evalcond[1]=((((-1.0)*r12*x10106))+cj0+((x10095*x10099))+(((-1.0)*gconst2*r10*x10107)));
evalcond[2]=(((x10095*x10098))+(((-1.0)*r02*x10106))+(((-1.0)*gconst2*r00*x10107))+(((-1.0)*x10104)));
evalcond[3]=(((r21*x10103))+((cj2*sj1))+((r20*x10102))+((r21*x10096*x10097))+x10105+(((-1.0)*r20*x10101*x10106))+((r22*x10109)));
evalcond[4]=(((r21*x10101))+((r20*x10111))+x10100+(((-1.0)*r21*x10102*x10106))+(((-1.0)*r22*sj3*x10107))+((r20*x10097))+(((-1.0)*x10108)));
evalcond[5]=(((cj0*x10100))+((r01*x10103))+((r00*x10102))+(((-1.0)*cj0*x10108))+((r02*x10109))+((r01*x10096*x10097))+(((-1.0)*r00*x10101*x10106)));
evalcond[6]=((((-1.0)*cj1*cj2*x10104))+((r11*x10096*x10097))+(((-1.0)*r10*x10101*x10106))+((sj0*x10100))+((r11*x10103))+((r10*x10102))+((r12*x10109)));
evalcond[7]=((((-1.0)*sj3*x10098*x10106))+((r01*x10101))+((r00*x10111))+(((-1.0)*cj0*x10110))+(((-1.0)*cj0*x10105))+(((-1.0)*r02*sj3*x10107))+((r00*x10097)));
evalcond[8]=((((-1.0)*x10104*x10105))+(((-1.0)*r12*sj3*x10107))+(((-1.0)*cj2*sj1*x10104))+((r11*x10101))+((r10*x10097))+((r10*x10111))+(((-1.0)*sj3*x10099*x10106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10112=((1.0)*gconst2);
CheckValue<IkReal> x10113=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10112)))),-1);
if(!x10113.valid){
continue;
}
CheckValue<IkReal> x10114 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10112))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10113.value)))+(x10114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10115=IKsin(j4);
IkReal x10116=IKcos(j4);
IkReal x10117=(cj3*gconst1);
IkReal x10118=(gconst1*r01);
IkReal x10119=(gconst1*r11);
IkReal x10120=(sj1*sj2);
IkReal x10121=(cj3*gconst2);
IkReal x10122=(gconst1*sj3);
IkReal x10123=(gconst2*sj3);
IkReal x10124=((1.0)*sj0);
IkReal x10125=(cj1*sj2);
IkReal x10126=((1.0)*x10116);
IkReal x10127=((1.0)*x10115);
IkReal x10128=((1.0)*cj1*cj2);
IkReal x10129=(cj3*x10115);
IkReal x10130=((1.0)*cj2*sj1);
IkReal x10131=(x10116*x10123);
evalcond[0]=(((gconst1*r21*x10115))+(((-1.0)*gconst2*r20*x10127))+(((-1.0)*r22*x10126)));
evalcond[1]=(cj0+((x10115*x10119))+(((-1.0)*gconst2*r10*x10127))+(((-1.0)*r12*x10126)));
evalcond[2]=((((-1.0)*gconst2*r00*x10127))+(((-1.0)*r02*x10126))+((x10115*x10118))+(((-1.0)*x10124)));
evalcond[3]=(((r21*x10116*x10117))+((cj2*sj1))+((r20*x10122))+(((-1.0)*r20*x10121*x10126))+((r21*x10123))+x10125+((r22*x10129)));
evalcond[4]=(((r20*x10131))+((r20*x10117))+(((-1.0)*r21*x10122*x10126))+((r21*x10121))+(((-1.0)*r22*sj3*x10127))+x10120+(((-1.0)*x10128)));
evalcond[5]=(((r01*x10116*x10117))+((r02*x10129))+((r00*x10122))+((cj0*x10120))+((r01*x10123))+(((-1.0)*cj0*x10128))+(((-1.0)*r00*x10121*x10126)));
evalcond[6]=(((r11*x10116*x10117))+((r10*x10122))+(((-1.0)*r10*x10121*x10126))+((sj0*x10120))+((r12*x10129))+(((-1.0)*cj1*cj2*x10124))+((r11*x10123)));
evalcond[7]=(((r00*x10117))+(((-1.0)*sj3*x10118*x10126))+(((-1.0)*cj0*x10125))+((r00*x10131))+((r01*x10121))+(((-1.0)*cj0*x10130))+(((-1.0)*r02*sj3*x10127)));
evalcond[8]=(((r10*x10131))+(((-1.0)*sj3*x10119*x10126))+(((-1.0)*cj2*sj1*x10124))+(((-1.0)*r12*sj3*x10127))+((r10*x10117))+(((-1.0)*x10124*x10125))+((r11*x10121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10132=((1.0)*gconst2);
CheckValue<IkReal> x10133=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10132)))),-1);
if(!x10133.valid){
continue;
}
CheckValue<IkReal> x10134 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x10132))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10133.value)))+(x10134.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10135=IKsin(j4);
IkReal x10136=IKcos(j4);
IkReal x10137=(cj3*gconst1);
IkReal x10138=(gconst1*r01);
IkReal x10139=(gconst1*r11);
IkReal x10140=(sj1*sj2);
IkReal x10141=(cj3*gconst2);
IkReal x10142=(gconst1*sj3);
IkReal x10143=(gconst2*sj3);
IkReal x10144=((1.0)*sj0);
IkReal x10145=(cj1*sj2);
IkReal x10146=((1.0)*x10136);
IkReal x10147=((1.0)*x10135);
IkReal x10148=((1.0)*cj1*cj2);
IkReal x10149=(cj3*x10135);
IkReal x10150=((1.0)*cj2*sj1);
IkReal x10151=(x10136*x10143);
evalcond[0]=(((gconst1*r21*x10135))+(((-1.0)*gconst2*r20*x10147))+(((-1.0)*r22*x10146)));
evalcond[1]=(cj0+(((-1.0)*r12*x10146))+((x10135*x10139))+(((-1.0)*gconst2*r10*x10147)));
evalcond[2]=((((-1.0)*r02*x10146))+(((-1.0)*x10144))+((x10135*x10138))+(((-1.0)*gconst2*r00*x10147)));
evalcond[3]=(((cj2*sj1))+((r21*x10143))+(((-1.0)*r20*x10141*x10146))+x10145+((r21*x10136*x10137))+((r22*x10149))+((r20*x10142)));
evalcond[4]=(((r20*x10137))+((r21*x10141))+x10140+(((-1.0)*r21*x10142*x10146))+(((-1.0)*r22*sj3*x10147))+(((-1.0)*x10148))+((r20*x10151)));
evalcond[5]=(((r02*x10149))+((r01*x10136*x10137))+(((-1.0)*r00*x10141*x10146))+((r00*x10142))+((cj0*x10140))+((r01*x10143))+(((-1.0)*cj0*x10148)));
evalcond[6]=(((sj0*x10140))+((r12*x10149))+(((-1.0)*cj1*cj2*x10144))+((r10*x10142))+(((-1.0)*r10*x10141*x10146))+((r11*x10143))+((r11*x10136*x10137)));
evalcond[7]=((((-1.0)*r02*sj3*x10147))+(((-1.0)*cj0*x10145))+((r00*x10137))+((r00*x10151))+((r01*x10141))+(((-1.0)*cj0*x10150))+(((-1.0)*sj3*x10138*x10146)));
evalcond[8]=(((r10*x10137))+((r10*x10151))+(((-1.0)*x10144*x10145))+(((-1.0)*cj2*sj1*x10144))+(((-1.0)*r12*sj3*x10147))+((r11*x10141))+(((-1.0)*sj3*x10139*x10146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10152=((-1.0)*r21);
IkReal x10154 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10154)==0){
continue;
}
IkReal x10153=pow(x10154,-0.5);
CheckValue<IkReal> x10155 = IKatan2WithCheck(IkReal(x10152),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10155.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10155.value))));
IkReal gconst4=(x10152*x10153);
IkReal gconst5=((1.0)*r20*x10153);
CheckValue<IkReal> x10156 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10156.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10156.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10157=((-1.0)*r21);
CheckValue<IkReal> x10160 = IKatan2WithCheck(IkReal(x10157),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10160.valid){
continue;
}
IkReal x10158=((1.0)*(x10160.value));
IkReal x10159=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10158)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10158)));
IkReal gconst4=(x10157*x10159);
IkReal gconst5=((1.0)*r20*x10159);
IkReal x10161=r22*r22;
IkReal x10162=((1.0)*x10161);
CheckValue<IkReal> x10166=IKPowWithIntegerCheck(((-1.0)+x10161),-1);
if(!x10166.valid){
continue;
}
IkReal x10163=x10166.value;
if((((1.0)+(((-1.0)*x10162)))) < -0.00001)
continue;
IkReal x10164=IKsqrt(((1.0)+(((-1.0)*x10162))));
IkReal x10165=(cj0*x10163*x10164);
j4eval[0]=((IKabs(((((-1.0)*x10162*x10165))+x10165)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10167=((-1.0)*r21);
CheckValue<IkReal> x10170 = IKatan2WithCheck(IkReal(x10167),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10170.valid){
continue;
}
IkReal x10168=((1.0)*(x10170.value));
IkReal x10169=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10168)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10168)));
IkReal gconst4=(x10167*x10169);
IkReal gconst5=((1.0)*r20*x10169);
IkReal x10171=r22*r22;
IkReal x10172=((1.0)*x10171);
CheckValue<IkReal> x10176=IKPowWithIntegerCheck(((-1.0)+x10171),-1);
if(!x10176.valid){
continue;
}
IkReal x10173=x10176.value;
if((((1.0)+(((-1.0)*x10172)))) < -0.00001)
continue;
IkReal x10174=IKsqrt(((1.0)+(((-1.0)*x10172))));
IkReal x10175=(sj0*x10173*x10174);
j4eval[0]=((IKabs(((((-1.0)*x10172*x10175))+x10175)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10177=((-1.0)*r21);
CheckValue<IkReal> x10180 = IKatan2WithCheck(IkReal(x10177),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10180.valid){
continue;
}
IkReal x10178=((1.0)*(x10180.value));
IkReal x10179=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10178)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10178)));
IkReal gconst4=(x10177*x10179);
IkReal gconst5=((1.0)*r20*x10179);
IkReal x10181=r22*r22;
IkReal x10182=(r12*sj0);
IkReal x10183=(cj0*r02);
CheckValue<IkReal> x10187=IKPowWithIntegerCheck(((-1.0)+x10181),-1);
if(!x10187.valid){
continue;
}
IkReal x10184=x10187.value;
if((((1.0)+(((-1.0)*x10181)))) < -0.00001)
continue;
IkReal x10185=IKsqrt(((1.0)+(((-1.0)*x10181))));
IkReal x10186=(r22*x10184*x10185);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10183*x10186))+((x10182*x10186)))))+(IKabs(((((-1.0)*x10183))+(((-1.0)*x10182))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10188=((-1.0)*r21);
CheckValue<IkReal> x10191 = IKatan2WithCheck(IkReal(x10188),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10191.valid){
continue;
}
IkReal x10189=((1.0)*(x10191.value));
IkReal x10190=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10189)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10189)));
IkReal gconst4=(x10188*x10190);
IkReal gconst5=((1.0)*r20*x10190);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10192=((-1.0)*r21);
CheckValue<IkReal> x10195 = IKatan2WithCheck(IkReal(x10192),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10195.valid){
continue;
}
IkReal x10193=((1.0)*(x10195.value));
IkReal x10194=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10193)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10193)));
IkReal gconst4=(x10192*x10194);
IkReal gconst5=((1.0)*r20*x10194);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10196=((-1.0)*r21);
CheckValue<IkReal> x10199 = IKatan2WithCheck(IkReal(x10196),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10199.valid){
continue;
}
IkReal x10197=((1.0)*(x10199.value));
IkReal x10198=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10197)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10197)));
IkReal gconst4=(x10196*x10198);
IkReal gconst5=((1.0)*r20*x10198);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10200=((-1.0)*r21);
CheckValue<IkReal> x10203 = IKatan2WithCheck(IkReal(x10200),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10203.valid){
continue;
}
IkReal x10201=((1.0)*(x10203.value));
IkReal x10202=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10201)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10201)));
IkReal gconst4=(x10200*x10202);
IkReal gconst5=((1.0)*r20*x10202);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10204=((-1.0)*r21);
CheckValue<IkReal> x10207 = IKatan2WithCheck(IkReal(x10204),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10207.valid){
continue;
}
IkReal x10205=((1.0)*(x10207.value));
IkReal x10206=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10205)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10205)));
IkReal gconst4=(x10204*x10206);
IkReal gconst5=((1.0)*r20*x10206);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10208=((-1.0)*r21);
CheckValue<IkReal> x10211 = IKatan2WithCheck(IkReal(x10208),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10211.valid){
continue;
}
IkReal x10209=((1.0)*(x10211.value));
IkReal x10210=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10209)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10209)));
IkReal gconst4=(x10208*x10210);
IkReal gconst5=((1.0)*r20*x10210);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10212=(gconst5*r10);
IkReal x10213=(gconst4*r11);
CheckValue<IkReal> x10214=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10213*x10213)+(((-2.0)*x10212*x10213))+(x10212*x10212))),-1);
if(!x10214.valid){
continue;
}
CheckValue<IkReal> x10215 = IKatan2WithCheck(IkReal((x10212+(((-1.0)*x10213)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10214.value)))+(x10215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10216=IKsin(j4);
IkReal x10217=IKcos(j4);
IkReal x10218=(gconst4*r11);
IkReal x10219=((1.0)*cj1);
IkReal x10220=(gconst5*r10);
IkReal x10221=(gconst4*r01);
IkReal x10222=(gconst5*r00);
IkReal x10223=(gconst4*r21);
IkReal x10224=(gconst5*r20);
IkReal x10225=((1.0)*x10217);
IkReal x10226=((1.0)*x10216);
evalcond[0]=((((-1.0)*x10224*x10226))+(((-1.0)*r22*x10225))+((x10216*x10223)));
evalcond[1]=((((-1.0)*r02*x10225))+(((-1.0)*x10222*x10226))+((x10216*x10221)));
evalcond[2]=((((-1.0)*r12*x10226))+((x10217*x10220))+(((-1.0)*x10218*x10225)));
evalcond[3]=((1.0)+(((-1.0)*x10220*x10226))+((x10216*x10218))+(((-1.0)*r12*x10225)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x10219))+(((-1.0)*r22*x10226))+((x10217*x10224))+(((-1.0)*x10223*x10225)));
evalcond[5]=((((-1.0)*r02*x10226))+(((-1.0)*sj2*x10219))+(((-1.0)*cj2*sj1))+(((-1.0)*x10221*x10225))+((x10217*x10222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10227=((1.0)*gconst5);
CheckValue<IkReal> x10228=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10227)))),-1);
if(!x10228.valid){
continue;
}
CheckValue<IkReal> x10229 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10227))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10228.value)))+(x10229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10230=IKsin(j4);
IkReal x10231=IKcos(j4);
IkReal x10232=(gconst4*r11);
IkReal x10233=((1.0)*cj1);
IkReal x10234=(gconst5*r10);
IkReal x10235=(gconst4*r01);
IkReal x10236=(gconst5*r00);
IkReal x10237=(gconst4*r21);
IkReal x10238=(gconst5*r20);
IkReal x10239=((1.0)*x10231);
IkReal x10240=((1.0)*x10230);
evalcond[0]=(((x10230*x10237))+(((-1.0)*x10238*x10240))+(((-1.0)*r22*x10239)));
evalcond[1]=(((x10230*x10235))+(((-1.0)*x10236*x10240))+(((-1.0)*r02*x10239)));
evalcond[2]=((((-1.0)*x10232*x10239))+(((-1.0)*r12*x10240))+((x10231*x10234)));
evalcond[3]=((1.0)+(((-1.0)*x10234*x10240))+((x10230*x10232))+(((-1.0)*r12*x10239)));
evalcond[4]=((((-1.0)*x10237*x10239))+((sj1*sj2))+(((-1.0)*cj2*x10233))+(((-1.0)*r22*x10240))+((x10231*x10238)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10235*x10239))+((x10231*x10236))+(((-1.0)*sj2*x10233))+(((-1.0)*r02*x10240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10241 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10241.valid){
continue;
}
CheckValue<IkReal> x10242=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10241.value)+(((1.5707963267949)*(x10242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10243=IKsin(j4);
IkReal x10244=IKcos(j4);
IkReal x10245=(gconst4*r11);
IkReal x10246=((1.0)*cj1);
IkReal x10247=(gconst5*r10);
IkReal x10248=(gconst4*r01);
IkReal x10249=(gconst5*r00);
IkReal x10250=(gconst4*r21);
IkReal x10251=(gconst5*r20);
IkReal x10252=((1.0)*x10244);
IkReal x10253=((1.0)*x10243);
evalcond[0]=((((-1.0)*x10251*x10253))+((x10243*x10250))+(((-1.0)*r22*x10252)));
evalcond[1]=(((x10243*x10248))+(((-1.0)*r02*x10252))+(((-1.0)*x10249*x10253)));
evalcond[2]=((((-1.0)*x10245*x10252))+(((-1.0)*r12*x10253))+((x10244*x10247)));
evalcond[3]=((1.0)+((x10243*x10245))+(((-1.0)*x10247*x10253))+(((-1.0)*r12*x10252)));
evalcond[4]=((((-1.0)*cj2*x10246))+((sj1*sj2))+(((-1.0)*r22*x10253))+(((-1.0)*x10250*x10252))+((x10244*x10251)));
evalcond[5]=((((-1.0)*r02*x10253))+(((-1.0)*x10248*x10252))+(((-1.0)*cj2*sj1))+((x10244*x10249))+(((-1.0)*sj2*x10246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10254=((-1.0)*r21);
CheckValue<IkReal> x10257 = IKatan2WithCheck(IkReal(x10254),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10257.valid){
continue;
}
IkReal x10255=((1.0)*(x10257.value));
IkReal x10256=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10255)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10255)));
IkReal gconst4=(x10254*x10256);
IkReal gconst5=((1.0)*r20*x10256);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10258=((-1.0)*r21);
CheckValue<IkReal> x10261 = IKatan2WithCheck(IkReal(x10258),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10261.valid){
continue;
}
IkReal x10259=((1.0)*(x10261.value));
IkReal x10260=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10259)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10259)));
IkReal gconst4=(x10258*x10260);
IkReal gconst5=((1.0)*r20*x10260);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10262=((-1.0)*r21);
CheckValue<IkReal> x10265 = IKatan2WithCheck(IkReal(x10262),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10265.valid){
continue;
}
IkReal x10263=((1.0)*(x10265.value));
IkReal x10264=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10263)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10263)));
IkReal gconst4=(x10262*x10264);
IkReal gconst5=((1.0)*r20*x10264);
IkReal x10266=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10270=IKPowWithIntegerCheck(x10266,-1);
if(!x10270.valid){
continue;
}
IkReal x10267=x10270.value;
IkReal x10268=((1.0)*x10267);
IkReal x10269=((((-1.0)*(r12*r12)))+(((-1.0)*x10268*(r10*r10)*(r20*r20)))+(((-1.0)*x10268*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10267)));
j4eval[0]=x10269;
j4eval[1]=r12;
j4eval[2]=x10266;
j4eval[3]=IKsign(x10269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10271=(gconst5*r10);
IkReal x10272=(gconst4*r11);
CheckValue<IkReal> x10273=IKPowWithIntegerCheck(IKsign(((((2.0)*x10271*x10272))+(((-1.0)*(x10271*x10271)))+(((-1.0)*(x10272*x10272)))+(((-1.0)*(r12*r12))))),-1);
if(!x10273.valid){
continue;
}
CheckValue<IkReal> x10274 = IKatan2WithCheck(IkReal((x10272+(((-1.0)*x10271)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10273.value)))+(x10274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10275=IKcos(j4);
IkReal x10276=IKsin(j4);
IkReal x10277=(gconst4*r11);
IkReal x10278=(gconst5*r10);
IkReal x10279=((1.0)*cj1);
IkReal x10280=(gconst5*r00);
IkReal x10281=(gconst5*r20);
IkReal x10282=((1.0)*x10275);
IkReal x10283=(gconst4*x10275);
IkReal x10284=((1.0)*x10276);
IkReal x10285=(gconst4*x10276);
evalcond[0]=((((-1.0)*x10278*x10282))+((r12*x10276))+((x10275*x10277)));
evalcond[1]=((((-1.0)*x10281*x10284))+(((-1.0)*r22*x10282))+((r21*x10285)));
evalcond[2]=(((r01*x10285))+(((-1.0)*r02*x10282))+(((-1.0)*x10280*x10284)));
evalcond[3]=((1.0)+(((-1.0)*x10278*x10284))+((x10276*x10277))+(((-1.0)*r12*x10282)));
evalcond[4]=((((-1.0)*x10281*x10282))+((sj1*sj2))+(((-1.0)*cj2*x10279))+((r21*x10283))+((r22*x10276)));
evalcond[5]=(((r01*x10283))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10279))+((r02*x10276))+(((-1.0)*x10280*x10282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10286=((1.0)*gconst5);
CheckValue<IkReal> x10287 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10287.valid){
continue;
}
CheckValue<IkReal> x10288=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10286)))),-1);
if(!x10288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10287.value)+(((1.5707963267949)*(x10288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10289=IKcos(j4);
IkReal x10290=IKsin(j4);
IkReal x10291=(gconst4*r11);
IkReal x10292=(gconst5*r10);
IkReal x10293=((1.0)*cj1);
IkReal x10294=(gconst5*r00);
IkReal x10295=(gconst5*r20);
IkReal x10296=((1.0)*x10289);
IkReal x10297=(gconst4*x10289);
IkReal x10298=((1.0)*x10290);
IkReal x10299=(gconst4*x10290);
evalcond[0]=(((x10289*x10291))+(((-1.0)*x10292*x10296))+((r12*x10290)));
evalcond[1]=((((-1.0)*x10295*x10298))+((r21*x10299))+(((-1.0)*r22*x10296)));
evalcond[2]=((((-1.0)*x10294*x10298))+(((-1.0)*r02*x10296))+((r01*x10299)));
evalcond[3]=((1.0)+(((-1.0)*x10292*x10298))+(((-1.0)*r12*x10296))+((x10290*x10291)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10295*x10296))+((r21*x10297))+((r22*x10290))+(((-1.0)*cj2*x10293)));
evalcond[5]=((((-1.0)*sj2*x10293))+(((-1.0)*x10294*x10296))+(((-1.0)*cj2*sj1))+((r02*x10290))+((r01*x10297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10300 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10300.valid){
continue;
}
CheckValue<IkReal> x10301=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10300.value)+(((1.5707963267949)*(x10301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10302=IKcos(j4);
IkReal x10303=IKsin(j4);
IkReal x10304=(gconst4*r11);
IkReal x10305=(gconst5*r10);
IkReal x10306=((1.0)*cj1);
IkReal x10307=(gconst5*r00);
IkReal x10308=(gconst5*r20);
IkReal x10309=((1.0)*x10302);
IkReal x10310=(gconst4*x10302);
IkReal x10311=((1.0)*x10303);
IkReal x10312=(gconst4*x10303);
evalcond[0]=((((-1.0)*x10305*x10309))+((r12*x10303))+((x10302*x10304)));
evalcond[1]=((((-1.0)*r22*x10309))+((r21*x10312))+(((-1.0)*x10308*x10311)));
evalcond[2]=(((r01*x10312))+(((-1.0)*x10307*x10311))+(((-1.0)*r02*x10309)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10309))+(((-1.0)*x10305*x10311))+((x10303*x10304)));
evalcond[4]=((((-1.0)*cj2*x10306))+((r21*x10310))+((sj1*sj2))+((r22*x10303))+(((-1.0)*x10308*x10309)));
evalcond[5]=(((r02*x10303))+((r01*x10310))+(((-1.0)*sj2*x10306))+(((-1.0)*cj2*sj1))+(((-1.0)*x10307*x10309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10313=((-1.0)*r21);
CheckValue<IkReal> x10316 = IKatan2WithCheck(IkReal(x10313),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10316.valid){
continue;
}
IkReal x10314=((1.0)*(x10316.value));
IkReal x10315=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10314)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10314)));
IkReal gconst4=(x10313*x10315);
IkReal gconst5=((1.0)*r20*x10315);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10317=((-1.0)*r21);
CheckValue<IkReal> x10320 = IKatan2WithCheck(IkReal(x10317),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10320.valid){
continue;
}
IkReal x10318=((1.0)*(x10320.value));
IkReal x10319=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10318)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10318)));
IkReal gconst4=(x10317*x10319);
IkReal gconst5=((1.0)*r20*x10319);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10321=((-1.0)*r21);
CheckValue<IkReal> x10324 = IKatan2WithCheck(IkReal(x10321),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10324.valid){
continue;
}
IkReal x10322=((1.0)*(x10324.value));
IkReal x10323=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10322)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10322)));
IkReal gconst4=(x10321*x10323);
IkReal gconst5=((1.0)*r20*x10323);
IkReal x10325=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10329=IKPowWithIntegerCheck(x10325,-1);
if(!x10329.valid){
continue;
}
IkReal x10326=x10329.value;
IkReal x10327=((1.0)*x10326);
IkReal x10328=((((-1.0)*x10327*(r10*r10)*(r20*r20)))+(((-1.0)*x10327*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10326)));
j4eval[0]=x10328;
j4eval[1]=r12;
j4eval[2]=x10325;
j4eval[3]=IKsign(x10328);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10330=(gconst5*r10);
IkReal x10331=(gconst4*r11);
CheckValue<IkReal> x10332=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10330*x10330)))+(((-1.0)*(r12*r12)))+(((2.0)*x10330*x10331))+(((-1.0)*(x10331*x10331))))),-1);
if(!x10332.valid){
continue;
}
CheckValue<IkReal> x10333 = IKatan2WithCheck(IkReal(((((-1.0)*x10330))+x10331)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10332.value)))+(x10333.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10334=IKcos(j4);
IkReal x10335=IKsin(j4);
IkReal x10336=(gconst4*r11);
IkReal x10337=(gconst5*r10);
IkReal x10338=(gconst5*r00);
IkReal x10339=(gconst5*r20);
IkReal x10340=((1.0)*x10334);
IkReal x10341=(gconst4*x10334);
IkReal x10342=((1.0)*x10335);
IkReal x10343=(gconst4*x10335);
evalcond[0]=((((-1.0)*x10337*x10340))+((r12*x10335))+((x10334*x10336)));
evalcond[1]=((((-1.0)*x10339*x10342))+((r21*x10343))+(((-1.0)*r22*x10340)));
evalcond[2]=((((-1.0)*x10338*x10342))+((r01*x10343))+(((-1.0)*r02*x10340)));
evalcond[3]=((1.0)+(((-1.0)*x10337*x10342))+(((-1.0)*r12*x10340))+((x10335*x10336)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10339*x10340))+((r22*x10335))+((cj1*sj2))+((r21*x10341)));
evalcond[5]=((((-1.0)*x10338*x10340))+((r02*x10335))+((r01*x10341))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10344=((1.0)*gconst5);
CheckValue<IkReal> x10345 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10345.valid){
continue;
}
CheckValue<IkReal> x10346=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10344)))),-1);
if(!x10346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10345.value)+(((1.5707963267949)*(x10346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10347=IKcos(j4);
IkReal x10348=IKsin(j4);
IkReal x10349=(gconst4*r11);
IkReal x10350=(gconst5*r10);
IkReal x10351=(gconst5*r00);
IkReal x10352=(gconst5*r20);
IkReal x10353=((1.0)*x10347);
IkReal x10354=(gconst4*x10347);
IkReal x10355=((1.0)*x10348);
IkReal x10356=(gconst4*x10348);
evalcond[0]=(((r12*x10348))+((x10347*x10349))+(((-1.0)*x10350*x10353)));
evalcond[1]=(((r21*x10356))+(((-1.0)*r22*x10353))+(((-1.0)*x10352*x10355)));
evalcond[2]=(((r01*x10356))+(((-1.0)*x10351*x10355))+(((-1.0)*r02*x10353)));
evalcond[3]=((1.0)+(((-1.0)*x10350*x10355))+(((-1.0)*r12*x10353))+((x10348*x10349)));
evalcond[4]=(((r21*x10354))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10352*x10353))+((r22*x10348)));
evalcond[5]=(((r01*x10354))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10351*x10353))+((r02*x10348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10357 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10357.valid){
continue;
}
CheckValue<IkReal> x10358=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10357.value)+(((1.5707963267949)*(x10358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10359=IKcos(j4);
IkReal x10360=IKsin(j4);
IkReal x10361=(gconst4*r11);
IkReal x10362=(gconst5*r10);
IkReal x10363=(gconst5*r00);
IkReal x10364=(gconst5*r20);
IkReal x10365=((1.0)*x10359);
IkReal x10366=(gconst4*x10359);
IkReal x10367=((1.0)*x10360);
IkReal x10368=(gconst4*x10360);
evalcond[0]=((((-1.0)*x10362*x10365))+((x10359*x10361))+((r12*x10360)));
evalcond[1]=(((r21*x10368))+(((-1.0)*x10364*x10367))+(((-1.0)*r22*x10365)));
evalcond[2]=(((r01*x10368))+(((-1.0)*r02*x10365))+(((-1.0)*x10363*x10367)));
evalcond[3]=((1.0)+(((-1.0)*x10362*x10367))+(((-1.0)*r12*x10365))+((x10360*x10361)));
evalcond[4]=(((r22*x10360))+((cj2*sj1))+((r21*x10366))+((cj1*sj2))+(((-1.0)*x10364*x10365)));
evalcond[5]=(((r01*x10366))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10360))+(((-1.0)*x10363*x10365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10369=((-1.0)*r21);
CheckValue<IkReal> x10372 = IKatan2WithCheck(IkReal(x10369),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10372.valid){
continue;
}
IkReal x10370=((1.0)*(x10372.value));
IkReal x10371=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10370)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10370)));
IkReal gconst4=(x10369*x10371);
IkReal gconst5=((1.0)*r20*x10371);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10373=((-1.0)*r21);
CheckValue<IkReal> x10376 = IKatan2WithCheck(IkReal(x10373),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10376.valid){
continue;
}
IkReal x10374=((1.0)*(x10376.value));
IkReal x10375=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10374)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10374)));
IkReal gconst4=(x10373*x10375);
IkReal gconst5=((1.0)*r20*x10375);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10377=((-1.0)*r21);
CheckValue<IkReal> x10380 = IKatan2WithCheck(IkReal(x10377),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10380.valid){
continue;
}
IkReal x10378=((1.0)*(x10380.value));
IkReal x10379=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10378)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10378)));
IkReal gconst4=(x10377*x10379);
IkReal gconst5=((1.0)*r20*x10379);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10381=(gconst5*r10);
IkReal x10382=(gconst4*r11);
CheckValue<IkReal> x10383 = IKatan2WithCheck(IkReal(((((-1.0)*x10382))+x10381)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10383.valid){
continue;
}
CheckValue<IkReal> x10384=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10381*x10381)+(((-2.0)*x10381*x10382))+(x10382*x10382))),-1);
if(!x10384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10383.value)+(((1.5707963267949)*(x10384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10385=IKsin(j4);
IkReal x10386=IKcos(j4);
IkReal x10387=(gconst4*r11);
IkReal x10388=(gconst5*r10);
IkReal x10389=(gconst4*r01);
IkReal x10390=(gconst5*r00);
IkReal x10391=(gconst4*r21);
IkReal x10392=(gconst5*r20);
IkReal x10393=((1.0)*x10386);
IkReal x10394=((1.0)*x10385);
evalcond[0]=((((-1.0)*x10392*x10394))+(((-1.0)*r22*x10393))+((x10385*x10391)));
evalcond[1]=(((x10385*x10389))+(((-1.0)*r02*x10393))+(((-1.0)*x10390*x10394)));
evalcond[2]=((((-1.0)*x10387*x10393))+(((-1.0)*r12*x10394))+((x10386*x10388)));
evalcond[3]=((1.0)+((x10385*x10387))+(((-1.0)*r12*x10393))+(((-1.0)*x10388*x10394)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10391*x10393))+(((-1.0)*r22*x10394))+((x10386*x10392)));
evalcond[5]=((((-1.0)*x10389*x10393))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10394))+((x10386*x10390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10395=((1.0)*gconst5);
CheckValue<IkReal> x10396=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10395)))),-1);
if(!x10396.valid){
continue;
}
CheckValue<IkReal> x10397 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10395))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10396.value)))+(x10397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10398=IKsin(j4);
IkReal x10399=IKcos(j4);
IkReal x10400=(gconst4*r11);
IkReal x10401=(gconst5*r10);
IkReal x10402=(gconst4*r01);
IkReal x10403=(gconst5*r00);
IkReal x10404=(gconst4*r21);
IkReal x10405=(gconst5*r20);
IkReal x10406=((1.0)*x10399);
IkReal x10407=((1.0)*x10398);
evalcond[0]=(((x10398*x10404))+(((-1.0)*x10405*x10407))+(((-1.0)*r22*x10406)));
evalcond[1]=(((x10398*x10402))+(((-1.0)*r02*x10406))+(((-1.0)*x10403*x10407)));
evalcond[2]=(((x10399*x10401))+(((-1.0)*r12*x10407))+(((-1.0)*x10400*x10406)));
evalcond[3]=((1.0)+((x10398*x10400))+(((-1.0)*x10401*x10407))+(((-1.0)*r12*x10406)));
evalcond[4]=(((cj2*sj1))+((x10399*x10405))+((cj1*sj2))+(((-1.0)*r22*x10407))+(((-1.0)*x10404*x10406)));
evalcond[5]=((((-1.0)*x10402*x10406))+((x10399*x10403))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10408 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10408.valid){
continue;
}
CheckValue<IkReal> x10409=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10408.value)+(((1.5707963267949)*(x10409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10410=IKsin(j4);
IkReal x10411=IKcos(j4);
IkReal x10412=(gconst4*r11);
IkReal x10413=(gconst5*r10);
IkReal x10414=(gconst4*r01);
IkReal x10415=(gconst5*r00);
IkReal x10416=(gconst4*r21);
IkReal x10417=(gconst5*r20);
IkReal x10418=((1.0)*x10411);
IkReal x10419=((1.0)*x10410);
evalcond[0]=(((x10410*x10416))+(((-1.0)*r22*x10418))+(((-1.0)*x10417*x10419)));
evalcond[1]=((((-1.0)*r02*x10418))+((x10410*x10414))+(((-1.0)*x10415*x10419)));
evalcond[2]=((((-1.0)*x10412*x10418))+((x10411*x10413))+(((-1.0)*r12*x10419)));
evalcond[3]=((1.0)+(((-1.0)*x10413*x10419))+((x10410*x10412))+(((-1.0)*r12*x10418)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10411*x10417))+(((-1.0)*x10416*x10418))+(((-1.0)*r22*x10419)));
evalcond[5]=((((-1.0)*r02*x10419))+(((-1.0)*x10414*x10418))+((x10411*x10415))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10420=gconst4*gconst4;
IkReal x10421=gconst5*gconst5;
IkReal x10422=(r10*r21);
IkReal x10423=((1.0)*cj3);
IkReal x10424=(r11*r21);
IkReal x10425=(r11*r20);
IkReal x10426=(r22*sj3);
IkReal x10427=(gconst4*r10);
IkReal x10428=((1.0)*sj3);
IkReal x10429=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10430=IKPowWithIntegerCheck(IKsign((((x10425*x10429))+(((-1.0)*x10420*x10423*x10424))+((x10422*x10429))+(((-1.0)*r10*r20*x10421*x10423))+(((-1.0)*r12*r22*x10423)))),-1);
if(!x10430.valid){
continue;
}
CheckValue<IkReal> x10431 = IKatan2WithCheck(IkReal((((x10426*x10427))+((gconst5*r11*x10426)))),IkReal(((((-1.0)*gconst5*r20*x10427*x10428))+((sj3*x10420*x10422))+(((-1.0)*x10421*x10425*x10428))+((gconst4*gconst5*sj3*x10424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10430.value)))+(x10431.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10432=IKsin(j4);
IkReal x10433=IKcos(j4);
IkReal x10434=(sj1*sj2);
IkReal x10435=(gconst5*sj3);
IkReal x10436=(cj3*gconst5);
IkReal x10437=(gconst4*r11);
IkReal x10438=((1.0)*cj1);
IkReal x10439=(gconst4*r01);
IkReal x10440=(cj2*sj1);
IkReal x10441=(gconst4*r21);
IkReal x10442=(gconst4*sj3);
IkReal x10443=(cj3*gconst4);
IkReal x10444=(cj2*x10438);
IkReal x10445=((1.0)*x10433);
IkReal x10446=((1.0)*x10432);
IkReal x10447=(cj3*x10432);
IkReal x10448=(cj3*x10433);
evalcond[0]=((((-1.0)*gconst5*r20*x10446))+((x10432*x10441))+(((-1.0)*r22*x10445)));
evalcond[1]=((((-1.0)*r02*x10445))+(((-1.0)*gconst5*r00*x10446))+((x10432*x10439)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10445))+((x10432*x10437))+(((-1.0)*gconst5*r10*x10446)));
evalcond[3]=(((x10437*x10448))+(((-1.0)*r10*x10436*x10445))+((r12*x10447))+((r11*x10435))+((r10*x10442)));
evalcond[4]=(((r10*x10433*x10435))+(((-1.0)*sj3*x10437*x10445))+(((-1.0)*r12*sj3*x10446))+((r11*x10436))+((r10*x10443)));
evalcond[5]=(((r22*x10447))+((cj1*sj2))+((r20*x10442))+x10440+((x10441*x10448))+(((-1.0)*r20*x10436*x10445))+((r21*x10435)));
evalcond[6]=(((r01*x10435))+(((-1.0)*x10444))+((r02*x10447))+((r00*x10442))+(((-1.0)*r00*x10436*x10445))+x10434+((x10439*x10448)));
evalcond[7]=((((-1.0)*r22*sj3*x10446))+(((-1.0)*x10444))+((r20*x10443))+x10434+(((-1.0)*sj3*x10441*x10445))+((r20*x10433*x10435))+((r21*x10436)));
evalcond[8]=((((-1.0)*x10440))+((r01*x10436))+(((-1.0)*r02*sj3*x10446))+(((-1.0)*sj2*x10438))+((r00*x10433*x10435))+(((-1.0)*sj3*x10439*x10445))+((r00*x10443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10449=((1.0)*gconst5);
CheckValue<IkReal> x10450 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10449))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10450.valid){
continue;
}
CheckValue<IkReal> x10451=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10449)))),-1);
if(!x10451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10450.value)+(((1.5707963267949)*(x10451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10452=IKsin(j4);
IkReal x10453=IKcos(j4);
IkReal x10454=(sj1*sj2);
IkReal x10455=(gconst5*sj3);
IkReal x10456=(cj3*gconst5);
IkReal x10457=(gconst4*r11);
IkReal x10458=((1.0)*cj1);
IkReal x10459=(gconst4*r01);
IkReal x10460=(cj2*sj1);
IkReal x10461=(gconst4*r21);
IkReal x10462=(gconst4*sj3);
IkReal x10463=(cj3*gconst4);
IkReal x10464=(cj2*x10458);
IkReal x10465=((1.0)*x10453);
IkReal x10466=((1.0)*x10452);
IkReal x10467=(cj3*x10452);
IkReal x10468=(cj3*x10453);
evalcond[0]=((((-1.0)*gconst5*r20*x10466))+((x10452*x10461))+(((-1.0)*r22*x10465)));
evalcond[1]=((((-1.0)*r02*x10465))+((x10452*x10459))+(((-1.0)*gconst5*r00*x10466)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10466))+((x10452*x10457))+(((-1.0)*r12*x10465)));
evalcond[3]=(((r12*x10467))+((r11*x10455))+(((-1.0)*r10*x10456*x10465))+((x10457*x10468))+((r10*x10462)));
evalcond[4]=(((r11*x10456))+(((-1.0)*sj3*x10457*x10465))+((r10*x10453*x10455))+(((-1.0)*r12*sj3*x10466))+((r10*x10463)));
evalcond[5]=(((r20*x10462))+((cj1*sj2))+((x10461*x10468))+((r22*x10467))+x10460+((r21*x10455))+(((-1.0)*r20*x10456*x10465)));
evalcond[6]=(((x10459*x10468))+(((-1.0)*r00*x10456*x10465))+((r00*x10462))+((r01*x10455))+x10454+((r02*x10467))+(((-1.0)*x10464)));
evalcond[7]=(((r20*x10463))+(((-1.0)*r22*sj3*x10466))+x10454+(((-1.0)*sj3*x10461*x10465))+((r21*x10456))+((r20*x10453*x10455))+(((-1.0)*x10464)));
evalcond[8]=((((-1.0)*x10460))+(((-1.0)*sj3*x10459*x10465))+((r00*x10463))+((r01*x10456))+(((-1.0)*r02*sj3*x10466))+(((-1.0)*sj2*x10458))+((r00*x10453*x10455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10469 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10469.valid){
continue;
}
CheckValue<IkReal> x10470=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10469.value)+(((1.5707963267949)*(x10470.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10471=IKsin(j4);
IkReal x10472=IKcos(j4);
IkReal x10473=(sj1*sj2);
IkReal x10474=(gconst5*sj3);
IkReal x10475=(cj3*gconst5);
IkReal x10476=(gconst4*r11);
IkReal x10477=((1.0)*cj1);
IkReal x10478=(gconst4*r01);
IkReal x10479=(cj2*sj1);
IkReal x10480=(gconst4*r21);
IkReal x10481=(gconst4*sj3);
IkReal x10482=(cj3*gconst4);
IkReal x10483=(cj2*x10477);
IkReal x10484=((1.0)*x10472);
IkReal x10485=((1.0)*x10471);
IkReal x10486=(cj3*x10471);
IkReal x10487=(cj3*x10472);
evalcond[0]=((((-1.0)*r22*x10484))+((x10471*x10480))+(((-1.0)*gconst5*r20*x10485)));
evalcond[1]=(((x10471*x10478))+(((-1.0)*r02*x10484))+(((-1.0)*gconst5*r00*x10485)));
evalcond[2]=((1.0)+((x10471*x10476))+(((-1.0)*gconst5*r10*x10485))+(((-1.0)*r12*x10484)));
evalcond[3]=(((r10*x10481))+((r12*x10486))+((r11*x10474))+((x10476*x10487))+(((-1.0)*r10*x10475*x10484)));
evalcond[4]=((((-1.0)*sj3*x10476*x10484))+((r10*x10482))+((r11*x10475))+((r10*x10472*x10474))+(((-1.0)*r12*sj3*x10485)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r20*x10475*x10484))+((r22*x10486))+((x10480*x10487))+((r21*x10474))+x10479+((r20*x10481)));
evalcond[6]=(((x10478*x10487))+((r00*x10481))+(((-1.0)*r00*x10475*x10484))+((r01*x10474))+(((-1.0)*x10483))+((r02*x10486))+x10473);
evalcond[7]=((((-1.0)*r22*sj3*x10485))+((r20*x10472*x10474))+(((-1.0)*sj3*x10480*x10484))+(((-1.0)*x10483))+((r21*x10475))+x10473+((r20*x10482)));
evalcond[8]=((((-1.0)*x10479))+((r00*x10482))+((r00*x10472*x10474))+((r01*x10475))+(((-1.0)*sj3*x10478*x10484))+(((-1.0)*sj2*x10477))+(((-1.0)*r02*sj3*x10485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10488=((-1.0)*r21);
CheckValue<IkReal> x10491 = IKatan2WithCheck(IkReal(x10488),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10491.valid){
continue;
}
IkReal x10489=((1.0)*(x10491.value));
IkReal x10490=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10489)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10489)));
IkReal gconst4=(x10488*x10490);
IkReal gconst5=((1.0)*r20*x10490);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10492=((-1.0)*r21);
CheckValue<IkReal> x10495 = IKatan2WithCheck(IkReal(x10492),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10495.valid){
continue;
}
IkReal x10493=((1.0)*(x10495.value));
IkReal x10494=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10493)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10493)));
IkReal gconst4=(x10492*x10494);
IkReal gconst5=((1.0)*r20*x10494);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10496=((-1.0)*r21);
CheckValue<IkReal> x10499 = IKatan2WithCheck(IkReal(x10496),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10499.valid){
continue;
}
IkReal x10497=((1.0)*(x10499.value));
IkReal x10498=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10497)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10497)));
IkReal gconst4=(x10496*x10498);
IkReal gconst5=((1.0)*r20*x10498);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10500=((-1.0)*r21);
CheckValue<IkReal> x10503 = IKatan2WithCheck(IkReal(x10500),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10503.valid){
continue;
}
IkReal x10501=((1.0)*(x10503.value));
IkReal x10502=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10501)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10501)));
IkReal gconst4=(x10500*x10502);
IkReal gconst5=((1.0)*r20*x10502);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10504=((-1.0)*r21);
CheckValue<IkReal> x10507 = IKatan2WithCheck(IkReal(x10504),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10507.valid){
continue;
}
IkReal x10505=((1.0)*(x10507.value));
IkReal x10506=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10505)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10505)));
IkReal gconst4=(x10504*x10506);
IkReal gconst5=((1.0)*r20*x10506);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10508=((-1.0)*r21);
CheckValue<IkReal> x10511 = IKatan2WithCheck(IkReal(x10508),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10511.valid){
continue;
}
IkReal x10509=((1.0)*(x10511.value));
IkReal x10510=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10509)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10509)));
IkReal gconst4=(x10508*x10510);
IkReal gconst5=((1.0)*r20*x10510);
IkReal x10512=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10516=IKPowWithIntegerCheck(x10512,-1);
if(!x10516.valid){
continue;
}
IkReal x10513=x10516.value;
IkReal x10514=((1.0)*x10513);
IkReal x10515=((((-2.0)*r10*r11*r20*r21*x10513))+(((-1.0)*x10514*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10514*(r10*r10)*(r20*r20))));
j4eval[0]=x10515;
j4eval[1]=r12;
j4eval[2]=x10512;
j4eval[3]=IKsign(x10515);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10517=(gconst5*r10);
IkReal x10518=(gconst4*r11);
CheckValue<IkReal> x10519 = IKatan2WithCheck(IkReal(((((-1.0)*x10518))+x10517)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10519.valid){
continue;
}
CheckValue<IkReal> x10520=IKPowWithIntegerCheck(IKsign(((((2.0)*x10517*x10518))+(((-1.0)*(x10517*x10517)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10518*x10518))))),-1);
if(!x10520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10519.value)+(((1.5707963267949)*(x10520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10521=IKsin(j4);
IkReal x10522=IKcos(j4);
IkReal x10523=(gconst4*r11);
IkReal x10524=(gconst5*r10);
IkReal x10525=(gconst4*r01);
IkReal x10526=(gconst5*r00);
IkReal x10527=(gconst4*r21);
IkReal x10528=(gconst5*r20);
IkReal x10529=((1.0)*x10522);
IkReal x10530=((1.0)*x10521);
evalcond[0]=(((x10521*x10527))+(((-1.0)*r22*x10529))+(((-1.0)*x10528*x10530)));
evalcond[1]=(((x10521*x10525))+(((-1.0)*r02*x10529))+(((-1.0)*x10526*x10530)));
evalcond[2]=((((-1.0)*x10523*x10529))+(((-1.0)*r12*x10530))+((x10522*x10524)));
evalcond[3]=((-1.0)+(((-1.0)*x10524*x10530))+((x10521*x10523))+(((-1.0)*r12*x10529)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10530))+((x10522*x10526))+(((-1.0)*x10525*x10529)));
evalcond[5]=((((-1.0)*r22*x10530))+(((-1.0)*x10527*x10529))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10522*x10528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10531=((1.0)*gconst5);
CheckValue<IkReal> x10532 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10532.valid){
continue;
}
CheckValue<IkReal> x10533=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10531))+(((-1.0)*gconst4*r20)))),-1);
if(!x10533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10532.value)+(((1.5707963267949)*(x10533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10534=IKsin(j4);
IkReal x10535=IKcos(j4);
IkReal x10536=(gconst4*r11);
IkReal x10537=(gconst5*r10);
IkReal x10538=(gconst4*r01);
IkReal x10539=(gconst5*r00);
IkReal x10540=(gconst4*r21);
IkReal x10541=(gconst5*r20);
IkReal x10542=((1.0)*x10535);
IkReal x10543=((1.0)*x10534);
evalcond[0]=(((x10534*x10540))+(((-1.0)*x10541*x10543))+(((-1.0)*r22*x10542)));
evalcond[1]=((((-1.0)*x10539*x10543))+(((-1.0)*r02*x10542))+((x10534*x10538)));
evalcond[2]=((((-1.0)*r12*x10543))+(((-1.0)*x10536*x10542))+((x10535*x10537)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10542))+((x10534*x10536))+(((-1.0)*x10537*x10543)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10538*x10542))+((cj1*sj2))+(((-1.0)*r02*x10543))+((x10535*x10539)));
evalcond[5]=(((x10535*x10541))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10543))+(((-1.0)*x10540*x10542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10544=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10544.valid){
continue;
}
CheckValue<IkReal> x10545 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10544.value)))+(x10545.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10546=IKsin(j4);
IkReal x10547=IKcos(j4);
IkReal x10548=(gconst4*r11);
IkReal x10549=(gconst5*r10);
IkReal x10550=(gconst4*r01);
IkReal x10551=(gconst5*r00);
IkReal x10552=(gconst4*r21);
IkReal x10553=(gconst5*r20);
IkReal x10554=((1.0)*x10547);
IkReal x10555=((1.0)*x10546);
evalcond[0]=(((x10546*x10552))+(((-1.0)*x10553*x10555))+(((-1.0)*r22*x10554)));
evalcond[1]=((((-1.0)*x10551*x10555))+((x10546*x10550))+(((-1.0)*r02*x10554)));
evalcond[2]=((((-1.0)*r12*x10555))+((x10547*x10549))+(((-1.0)*x10548*x10554)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10554))+((x10546*x10548))+(((-1.0)*x10549*x10555)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10547*x10551))+(((-1.0)*x10550*x10554))+(((-1.0)*r02*x10555)));
evalcond[5]=(((x10547*x10553))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10552*x10554))+(((-1.0)*r22*x10555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10556=((-1.0)*r21);
CheckValue<IkReal> x10559 = IKatan2WithCheck(IkReal(x10556),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10559.valid){
continue;
}
IkReal x10557=((1.0)*(x10559.value));
IkReal x10558=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10557)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10557)));
IkReal gconst4=(x10556*x10558);
IkReal gconst5=((1.0)*r20*x10558);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10560=((-1.0)*r21);
CheckValue<IkReal> x10563 = IKatan2WithCheck(IkReal(x10560),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10563.valid){
continue;
}
IkReal x10561=((1.0)*(x10563.value));
IkReal x10562=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10561)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10561)));
IkReal gconst4=(x10560*x10562);
IkReal gconst5=((1.0)*r20*x10562);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10564=((-1.0)*r21);
CheckValue<IkReal> x10567 = IKatan2WithCheck(IkReal(x10564),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10567.valid){
continue;
}
IkReal x10565=((1.0)*(x10567.value));
IkReal x10566=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10565)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10565)));
IkReal gconst4=(x10564*x10566);
IkReal gconst5=((1.0)*r20*x10566);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10568=(gconst5*r10);
IkReal x10569=(gconst4*r11);
CheckValue<IkReal> x10570=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10569*x10569)+(x10568*x10568)+(((-2.0)*x10568*x10569)))),-1);
if(!x10570.valid){
continue;
}
CheckValue<IkReal> x10571 = IKatan2WithCheck(IkReal(((((-1.0)*x10568))+x10569)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10570.value)))+(x10571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10572=IKcos(j4);
IkReal x10573=IKsin(j4);
IkReal x10574=(gconst4*r11);
IkReal x10575=(gconst5*r10);
IkReal x10576=(gconst5*r00);
IkReal x10577=(gconst5*r20);
IkReal x10578=((1.0)*x10572);
IkReal x10579=(gconst4*x10572);
IkReal x10580=((1.0)*x10573);
IkReal x10581=(gconst4*x10573);
evalcond[0]=(((x10572*x10574))+(((-1.0)*x10575*x10578))+((r12*x10573)));
evalcond[1]=((((-1.0)*x10577*x10580))+(((-1.0)*r22*x10578))+((r21*x10581)));
evalcond[2]=((((-1.0)*r02*x10578))+(((-1.0)*x10576*x10580))+((r01*x10581)));
evalcond[3]=((-1.0)+(((-1.0)*x10575*x10580))+(((-1.0)*r12*x10578))+((x10573*x10574)));
evalcond[4]=(((cj2*sj1))+((r01*x10579))+((cj1*sj2))+(((-1.0)*x10576*x10578))+((r02*x10573)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10579))+((r22*x10573))+(((-1.0)*x10577*x10578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10582=((1.0)*gconst5);
CheckValue<IkReal> x10583=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10582))+(((-1.0)*gconst4*r20)))),-1);
if(!x10583.valid){
continue;
}
CheckValue<IkReal> x10584 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10582))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10583.value)))+(x10584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10585=IKcos(j4);
IkReal x10586=IKsin(j4);
IkReal x10587=(gconst4*r11);
IkReal x10588=(gconst5*r10);
IkReal x10589=(gconst5*r00);
IkReal x10590=(gconst5*r20);
IkReal x10591=((1.0)*x10585);
IkReal x10592=(gconst4*x10585);
IkReal x10593=((1.0)*x10586);
IkReal x10594=(gconst4*x10586);
evalcond[0]=(((r12*x10586))+(((-1.0)*x10588*x10591))+((x10585*x10587)));
evalcond[1]=(((r21*x10594))+(((-1.0)*r22*x10591))+(((-1.0)*x10590*x10593)));
evalcond[2]=((((-1.0)*r02*x10591))+((r01*x10594))+(((-1.0)*x10589*x10593)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10591))+((x10586*x10587))+(((-1.0)*x10588*x10593)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x10592))+(((-1.0)*x10589*x10591))+((r02*x10586)));
evalcond[5]=(((r21*x10592))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10590*x10591))+((r22*x10586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10595=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10595.valid){
continue;
}
CheckValue<IkReal> x10596 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10595.value)))+(x10596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10597=IKcos(j4);
IkReal x10598=IKsin(j4);
IkReal x10599=(gconst4*r11);
IkReal x10600=(gconst5*r10);
IkReal x10601=(gconst5*r00);
IkReal x10602=(gconst5*r20);
IkReal x10603=((1.0)*x10597);
IkReal x10604=(gconst4*x10597);
IkReal x10605=((1.0)*x10598);
IkReal x10606=(gconst4*x10598);
evalcond[0]=((((-1.0)*x10600*x10603))+((x10597*x10599))+((r12*x10598)));
evalcond[1]=(((r21*x10606))+(((-1.0)*r22*x10603))+(((-1.0)*x10602*x10605)));
evalcond[2]=(((r01*x10606))+(((-1.0)*r02*x10603))+(((-1.0)*x10601*x10605)));
evalcond[3]=((-1.0)+(((-1.0)*x10600*x10605))+(((-1.0)*r12*x10603))+((x10598*x10599)));
evalcond[4]=(((r01*x10604))+((cj2*sj1))+((cj1*sj2))+((r02*x10598))+(((-1.0)*x10601*x10603)));
evalcond[5]=(((r21*x10604))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10598))+(((-1.0)*x10602*x10603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10607=((-1.0)*r21);
CheckValue<IkReal> x10610 = IKatan2WithCheck(IkReal(x10607),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10610.valid){
continue;
}
IkReal x10608=((1.0)*(x10610.value));
IkReal x10609=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10608)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10608)));
IkReal gconst4=(x10607*x10609);
IkReal gconst5=((1.0)*r20*x10609);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10611=((-1.0)*r21);
CheckValue<IkReal> x10614 = IKatan2WithCheck(IkReal(x10611),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10614.valid){
continue;
}
IkReal x10612=((1.0)*(x10614.value));
IkReal x10613=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10612)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10612)));
IkReal gconst4=(x10611*x10613);
IkReal gconst5=((1.0)*r20*x10613);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10615=((-1.0)*r21);
CheckValue<IkReal> x10618 = IKatan2WithCheck(IkReal(x10615),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10618.valid){
continue;
}
IkReal x10616=((1.0)*(x10618.value));
IkReal x10617=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10616)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10616)));
IkReal gconst4=(x10615*x10617);
IkReal gconst5=((1.0)*r20*x10617);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10619=(gconst5*r10);
IkReal x10620=(gconst4*r11);
CheckValue<IkReal> x10621=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10619*x10620))+(x10619*x10619)+(x10620*x10620))),-1);
if(!x10621.valid){
continue;
}
CheckValue<IkReal> x10622 = IKatan2WithCheck(IkReal(((((-1.0)*x10619))+x10620)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10621.value)))+(x10622.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10623=IKcos(j4);
IkReal x10624=IKsin(j4);
IkReal x10625=(gconst5*r10);
IkReal x10626=(gconst5*r00);
IkReal x10627=(gconst5*r20);
IkReal x10628=((1.0)*x10623);
IkReal x10629=(gconst4*x10624);
IkReal x10630=(gconst4*x10623);
IkReal x10631=((1.0)*x10624);
evalcond[0]=((((-1.0)*x10625*x10628))+((r11*x10630))+((r12*x10624)));
evalcond[1]=(((r21*x10629))+(((-1.0)*x10627*x10631))+(((-1.0)*r22*x10628)));
evalcond[2]=((((-1.0)*r02*x10628))+((r01*x10629))+(((-1.0)*x10626*x10631)));
evalcond[3]=((-1.0)+(((-1.0)*x10625*x10631))+(((-1.0)*r12*x10628))+((r11*x10629)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10627*x10628))+((r22*x10624))+((r21*x10630)));
evalcond[5]=(((r01*x10630))+(((-1.0)*sj1*sj2))+(((-1.0)*x10626*x10628))+((r02*x10624))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10632=((1.0)*gconst5);
CheckValue<IkReal> x10633=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10632))+(((-1.0)*gconst4*r20)))),-1);
if(!x10633.valid){
continue;
}
CheckValue<IkReal> x10634 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10632))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10633.value)))+(x10634.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10635=IKcos(j4);
IkReal x10636=IKsin(j4);
IkReal x10637=(gconst5*r10);
IkReal x10638=(gconst5*r00);
IkReal x10639=(gconst5*r20);
IkReal x10640=((1.0)*x10635);
IkReal x10641=(gconst4*x10636);
IkReal x10642=(gconst4*x10635);
IkReal x10643=((1.0)*x10636);
evalcond[0]=((((-1.0)*x10637*x10640))+((r11*x10642))+((r12*x10636)));
evalcond[1]=(((r21*x10641))+(((-1.0)*x10639*x10643))+(((-1.0)*r22*x10640)));
evalcond[2]=((((-1.0)*x10638*x10643))+(((-1.0)*r02*x10640))+((r01*x10641)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10640))+(((-1.0)*x10637*x10643))+((r11*x10641)));
evalcond[4]=(((r21*x10642))+((cj2*sj1))+(((-1.0)*x10639*x10640))+((cj1*sj2))+((r22*x10636)));
evalcond[5]=((((-1.0)*x10638*x10640))+((r01*x10642))+(((-1.0)*sj1*sj2))+((r02*x10636))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10644=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10644.valid){
continue;
}
CheckValue<IkReal> x10645 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10644.value)))+(x10645.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10646=IKcos(j4);
IkReal x10647=IKsin(j4);
IkReal x10648=(gconst5*r10);
IkReal x10649=(gconst5*r00);
IkReal x10650=(gconst5*r20);
IkReal x10651=((1.0)*x10646);
IkReal x10652=(gconst4*x10647);
IkReal x10653=(gconst4*x10646);
IkReal x10654=((1.0)*x10647);
evalcond[0]=(((r11*x10653))+(((-1.0)*x10648*x10651))+((r12*x10647)));
evalcond[1]=((((-1.0)*r22*x10651))+((r21*x10652))+(((-1.0)*x10650*x10654)));
evalcond[2]=((((-1.0)*x10649*x10654))+(((-1.0)*r02*x10651))+((r01*x10652)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10651))+((r11*x10652))+(((-1.0)*x10648*x10654)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10647))+((r21*x10653))+(((-1.0)*x10650*x10651)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x10647))+(((-1.0)*x10649*x10651))+((cj1*cj2))+((r01*x10653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10655=((-1.0)*r21);
CheckValue<IkReal> x10658 = IKatan2WithCheck(IkReal(x10655),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10658.valid){
continue;
}
IkReal x10656=((1.0)*(x10658.value));
IkReal x10657=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10656)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10656)));
IkReal gconst4=(x10655*x10657);
IkReal gconst5=((1.0)*r20*x10657);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10659=((-1.0)*r21);
CheckValue<IkReal> x10662 = IKatan2WithCheck(IkReal(x10659),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10662.valid){
continue;
}
IkReal x10660=((1.0)*(x10662.value));
IkReal x10661=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10660)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10660)));
IkReal gconst4=(x10659*x10661);
IkReal gconst5=((1.0)*r20*x10661);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10663=((-1.0)*r21);
CheckValue<IkReal> x10666 = IKatan2WithCheck(IkReal(x10663),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10666.valid){
continue;
}
IkReal x10664=((1.0)*(x10666.value));
IkReal x10665=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10664)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10664)));
IkReal gconst4=(x10663*x10665);
IkReal gconst5=((1.0)*r20*x10665);
IkReal x10667=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10671=IKPowWithIntegerCheck(x10667,-1);
if(!x10671.valid){
continue;
}
IkReal x10668=x10671.value;
IkReal x10669=((1.0)*x10668);
IkReal x10670=((((-1.0)*x10669*(r10*r10)*(r20*r20)))+(((-1.0)*x10669*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10668)));
j4eval[0]=x10670;
j4eval[1]=r12;
j4eval[2]=x10667;
j4eval[3]=IKsign(x10670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10672=(gconst5*r10);
IkReal x10673=(gconst4*r11);
CheckValue<IkReal> x10674=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10673*x10673)))+(((2.0)*x10672*x10673))+(((-1.0)*(x10672*x10672)))+(((-1.0)*(r12*r12))))),-1);
if(!x10674.valid){
continue;
}
CheckValue<IkReal> x10675 = IKatan2WithCheck(IkReal(((((-1.0)*x10673))+x10672)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10674.value)))+(x10675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10676=IKsin(j4);
IkReal x10677=IKcos(j4);
IkReal x10678=(gconst4*r11);
IkReal x10679=(gconst5*r10);
IkReal x10680=(gconst5*r00);
IkReal x10681=(gconst5*r20);
IkReal x10682=((1.0)*x10677);
IkReal x10683=(gconst4*x10676);
IkReal x10684=((1.0)*x10676);
evalcond[0]=((((-1.0)*r22*x10682))+((r21*x10683))+(((-1.0)*x10681*x10684)));
evalcond[1]=((((-1.0)*r02*x10682))+((r01*x10683))+(((-1.0)*x10680*x10684)));
evalcond[2]=((((-1.0)*x10678*x10682))+(((-1.0)*r12*x10684))+((x10677*x10679)));
evalcond[3]=((-1.0)+(((-1.0)*x10679*x10684))+(((-1.0)*r12*x10682))+((x10676*x10678)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10684))+((cj1*sj2))+((x10677*x10681))+(((-1.0)*gconst4*r21*x10682)));
evalcond[5]=((((-1.0)*gconst4*r01*x10682))+(((-1.0)*r02*x10684))+(((-1.0)*sj1*sj2))+((x10677*x10680))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10685=((1.0)*gconst5);
CheckValue<IkReal> x10686 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10686.valid){
continue;
}
CheckValue<IkReal> x10687=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10685))+(((-1.0)*gconst4*r20)))),-1);
if(!x10687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10686.value)+(((1.5707963267949)*(x10687.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10688=IKsin(j4);
IkReal x10689=IKcos(j4);
IkReal x10690=(gconst4*r11);
IkReal x10691=(gconst5*r10);
IkReal x10692=(gconst5*r00);
IkReal x10693=(gconst5*r20);
IkReal x10694=((1.0)*x10689);
IkReal x10695=(gconst4*x10688);
IkReal x10696=((1.0)*x10688);
evalcond[0]=((((-1.0)*x10693*x10696))+((r21*x10695))+(((-1.0)*r22*x10694)));
evalcond[1]=((((-1.0)*x10692*x10696))+(((-1.0)*r02*x10694))+((r01*x10695)));
evalcond[2]=(((x10689*x10691))+(((-1.0)*r12*x10696))+(((-1.0)*x10690*x10694)));
evalcond[3]=((-1.0)+(((-1.0)*x10691*x10696))+(((-1.0)*r12*x10694))+((x10688*x10690)));
evalcond[4]=(((cj2*sj1))+((x10689*x10693))+(((-1.0)*gconst4*r21*x10694))+((cj1*sj2))+(((-1.0)*r22*x10696)));
evalcond[5]=(((x10689*x10692))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x10696))+(((-1.0)*gconst4*r01*x10694))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10697=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10697.valid){
continue;
}
CheckValue<IkReal> x10698 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10697.value)))+(x10698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10699=IKsin(j4);
IkReal x10700=IKcos(j4);
IkReal x10701=(gconst4*r11);
IkReal x10702=(gconst5*r10);
IkReal x10703=(gconst5*r00);
IkReal x10704=(gconst5*r20);
IkReal x10705=((1.0)*x10700);
IkReal x10706=(gconst4*x10699);
IkReal x10707=((1.0)*x10699);
evalcond[0]=((((-1.0)*x10704*x10707))+(((-1.0)*r22*x10705))+((r21*x10706)));
evalcond[1]=(((r01*x10706))+(((-1.0)*r02*x10705))+(((-1.0)*x10703*x10707)));
evalcond[2]=((((-1.0)*r12*x10707))+((x10700*x10702))+(((-1.0)*x10701*x10705)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10705))+(((-1.0)*x10702*x10707))+((x10699*x10701)));
evalcond[4]=(((cj2*sj1))+((x10700*x10704))+(((-1.0)*gconst4*r21*x10705))+((cj1*sj2))+(((-1.0)*r22*x10707)));
evalcond[5]=(((x10700*x10703))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10705))+(((-1.0)*r02*x10707))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10708=((-1.0)*r21);
IkReal x10709=((-1.0)*px);
CheckValue<IkReal> x10711 = IKatan2WithCheck(IkReal(x10708),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10711.valid){
continue;
}
IkReal x10710=((1.0)*(x10711.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10710)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10709);
rxp1_1=(px*r21);
rxp1_2=(r11*x10709);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10710)));
IkReal gconst4=x10708;
IkReal gconst5=((1.0)*r20);
IkReal x10712=((1.0)*cj3);
IkReal x10713=(r10*r20);
IkReal x10714=(r11*r21);
j4eval[0]=((((-1.0)*x10713))+(((-1.0)*x10714)));
j4eval[1]=((((-1.0)*x10712*x10713))+(((-1.0)*x10712*x10714)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10715=((-1.0)*r21);
IkReal x10716=((-1.0)*px);
CheckValue<IkReal> x10718 = IKatan2WithCheck(IkReal(x10715),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10718.valid){
continue;
}
IkReal x10717=((1.0)*(x10718.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10717)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10716);
rxp1_1=(px*r21);
rxp1_2=(r11*x10716);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10717)));
IkReal gconst4=x10715;
IkReal gconst5=((1.0)*r20);
IkReal x10719=((1.0)*r11*r21);
IkReal x10720=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10719))+(((-1.0)*x10720)));
j4eval[1]=(((sj3*x10720))+((sj3*x10719)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10721=((-1.0)*r21);
IkReal x10722=((-1.0)*px);
CheckValue<IkReal> x10724 = IKatan2WithCheck(IkReal(x10721),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10724.valid){
continue;
}
IkReal x10723=((1.0)*(x10724.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10723)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10722);
rxp1_1=(px*r21);
rxp1_2=(r11*x10722);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10723)));
IkReal gconst4=x10721;
IkReal gconst5=((1.0)*r20);
IkReal x10725=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r21*x10725))+(((-1.0)*r10*r20*x10725)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10726=((1.0)*r10);
CheckValue<IkReal> x10727=IKPowWithIntegerCheck(cj3,-1);
if(!x10727.valid){
continue;
}
CheckValue<IkReal> x10728=IKPowWithIntegerCheck(r02,-1);
if(!x10728.valid){
continue;
}
CheckValue<IkReal> x10729=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10726))),-1);
if(!x10729.valid){
continue;
}
if( IKabs(((x10727.value)*(x10728.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10729.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10726)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10727.value)*(x10728.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10729.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10726))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10727.value)*(x10728.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10729.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10726))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10730=IKsin(j4);
IkReal x10731=IKcos(j4);
IkReal x10732=(cj2*sj1);
IkReal x10733=(cj1*sj2);
IkReal x10734=(gconst5*sj3);
IkReal x10735=(gconst4*r11);
IkReal x10736=(sj1*sj2);
IkReal x10737=((1.0)*gconst5);
IkReal x10738=(cj1*cj2);
IkReal x10739=(gconst4*r21);
IkReal x10740=(cj3*gconst4);
IkReal x10741=(gconst4*sj3);
IkReal x10742=(cj3*gconst5);
IkReal x10743=(r20*x10731);
IkReal x10744=(r10*x10731);
IkReal x10745=(cj3*x10731);
IkReal x10746=(r02*x10730);
IkReal x10747=(x10732+x10733);
IkReal x10748=((1.0)*sj3*x10731);
evalcond[0]=((-1.0)*r02*x10731);
evalcond[1]=((((-1.0)*r20*x10730*x10737))+((x10730*x10739)));
evalcond[2]=(((cj3*x10746))+(((-1.0)*x10736))+x10738);
evalcond[3]=((((-1.0)*sj3*x10746))+x10747);
evalcond[4]=((-1.0)+((x10730*x10735))+(((-1.0)*r10*x10730*x10737)));
evalcond[5]=(((r10*x10741))+((x10735*x10745))+(((-1.0)*cj3*x10737*x10744))+((r11*x10734)));
evalcond[6]=(((r10*x10740))+(((-1.0)*x10735*x10748))+((x10734*x10744))+((r11*x10742)));
evalcond[7]=(((r21*x10734))+(((-1.0)*cj3*x10737*x10743))+((r20*x10741))+((x10739*x10745))+x10747);
evalcond[8]=(((x10734*x10743))+(((-1.0)*x10739*x10748))+((r20*x10740))+(((-1.0)*x10738))+x10736+((r21*x10742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10749=((1.0)*gconst5);
IkReal x10750=(gconst4*r11);
CheckValue<IkReal> x10751=IKPowWithIntegerCheck(((((-1.0)*r10*x10749))+x10750),-1);
if(!x10751.valid){
continue;
}
CheckValue<IkReal> x10752=IKPowWithIntegerCheck(((((-1.0)*sj3*x10750))+((gconst5*r10*sj3))),-1);
if(!x10752.valid){
continue;
}
if( IKabs(x10751.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10752.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10749)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10751.value)+IKsqr(((x10752.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10749))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10751.value, ((x10752.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10749))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10753=IKsin(j4);
IkReal x10754=IKcos(j4);
IkReal x10755=(cj2*sj1);
IkReal x10756=(cj1*sj2);
IkReal x10757=(gconst5*sj3);
IkReal x10758=(gconst4*r11);
IkReal x10759=(sj1*sj2);
IkReal x10760=((1.0)*gconst5);
IkReal x10761=(cj1*cj2);
IkReal x10762=(gconst4*r21);
IkReal x10763=(cj3*gconst4);
IkReal x10764=(gconst4*sj3);
IkReal x10765=(cj3*gconst5);
IkReal x10766=(r20*x10754);
IkReal x10767=(r10*x10754);
IkReal x10768=(cj3*x10754);
IkReal x10769=(r02*x10753);
IkReal x10770=(x10756+x10755);
IkReal x10771=((1.0)*sj3*x10754);
evalcond[0]=((-1.0)*r02*x10754);
evalcond[1]=((((-1.0)*r20*x10753*x10760))+((x10753*x10762)));
evalcond[2]=(((cj3*x10769))+x10761+(((-1.0)*x10759)));
evalcond[3]=((((-1.0)*sj3*x10769))+x10770);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10753*x10760))+((x10753*x10758)));
evalcond[5]=((((-1.0)*cj3*x10760*x10767))+((r11*x10757))+((r10*x10764))+((x10758*x10768)));
evalcond[6]=(((r11*x10765))+(((-1.0)*x10758*x10771))+((x10757*x10767))+((r10*x10763)));
evalcond[7]=(((r20*x10764))+(((-1.0)*cj3*x10760*x10766))+x10770+((x10762*x10768))+((r21*x10757)));
evalcond[8]=((((-1.0)*x10761))+(((-1.0)*x10762*x10771))+((r20*x10763))+((r21*x10765))+((x10757*x10766))+x10759);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10772=((1.0)*sj3);
IkReal x10773=(gconst4*r11);
IkReal x10774=((1.0)*gconst5*r10);
CheckValue<IkReal> x10775=IKPowWithIntegerCheck(((((-1.0)*x10774))+x10773),-1);
if(!x10775.valid){
continue;
}
CheckValue<IkReal> x10776=IKPowWithIntegerCheck((((cj3*x10773))+(((-1.0)*cj3*x10774))),-1);
if(!x10776.valid){
continue;
}
if( IKabs(x10775.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10776.value)*(((((-1.0)*gconst4*r10*x10772))+(((-1.0)*gconst5*r11*x10772)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10775.value)+IKsqr(((x10776.value)*(((((-1.0)*gconst4*r10*x10772))+(((-1.0)*gconst5*r11*x10772))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10775.value, ((x10776.value)*(((((-1.0)*gconst4*r10*x10772))+(((-1.0)*gconst5*r11*x10772))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10777=IKsin(j4);
IkReal x10778=IKcos(j4);
IkReal x10779=(cj2*sj1);
IkReal x10780=(cj1*sj2);
IkReal x10781=(gconst5*sj3);
IkReal x10782=(gconst4*r11);
IkReal x10783=(sj1*sj2);
IkReal x10784=((1.0)*gconst5);
IkReal x10785=(cj1*cj2);
IkReal x10786=(gconst4*r21);
IkReal x10787=(cj3*gconst4);
IkReal x10788=(gconst4*sj3);
IkReal x10789=(cj3*gconst5);
IkReal x10790=(r20*x10778);
IkReal x10791=(r10*x10778);
IkReal x10792=(cj3*x10778);
IkReal x10793=(r02*x10777);
IkReal x10794=(x10780+x10779);
IkReal x10795=((1.0)*sj3*x10778);
evalcond[0]=((-1.0)*r02*x10778);
evalcond[1]=(((x10777*x10786))+(((-1.0)*r20*x10777*x10784)));
evalcond[2]=((((-1.0)*x10783))+((cj3*x10793))+x10785);
evalcond[3]=((((-1.0)*sj3*x10793))+x10794);
evalcond[4]=((-1.0)+((x10777*x10782))+(((-1.0)*r10*x10777*x10784)));
evalcond[5]=(((r11*x10781))+(((-1.0)*cj3*x10784*x10791))+((x10782*x10792))+((r10*x10788)));
evalcond[6]=(((r11*x10789))+((x10781*x10791))+(((-1.0)*x10782*x10795))+((r10*x10787)));
evalcond[7]=((((-1.0)*cj3*x10784*x10790))+((r21*x10781))+((r20*x10788))+x10794+((x10786*x10792)));
evalcond[8]=(((r21*x10789))+((r20*x10787))+((x10781*x10790))+(((-1.0)*x10785))+x10783+(((-1.0)*x10786*x10795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10796=gconst4*gconst4;
IkReal x10797=gconst5*gconst5;
IkReal x10798=(r10*r21);
IkReal x10799=((1.0)*cj3);
IkReal x10800=(r11*r21);
IkReal x10801=(r11*r20);
IkReal x10802=(r22*sj3);
IkReal x10803=(gconst4*r10);
IkReal x10804=((1.0)*sj3);
IkReal x10805=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10806 = IKatan2WithCheck(IkReal((((gconst5*r11*x10802))+((x10802*x10803)))),IkReal((((sj3*x10796*x10798))+(((-1.0)*x10797*x10801*x10804))+(((-1.0)*gconst5*r20*x10803*x10804))+((gconst4*gconst5*sj3*x10800)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10806.valid){
continue;
}
CheckValue<IkReal> x10807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10797*x10799))+(((-1.0)*r12*r22*x10799))+((x10801*x10805))+(((-1.0)*x10796*x10799*x10800))+((x10798*x10805)))),-1);
if(!x10807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10806.value)+(((1.5707963267949)*(x10807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10808=IKsin(j4);
IkReal x10809=IKcos(j4);
IkReal x10810=(cj2*sj1);
IkReal x10811=(cj1*sj2);
IkReal x10812=(gconst5*sj3);
IkReal x10813=(gconst4*r11);
IkReal x10814=(sj1*sj2);
IkReal x10815=(gconst5*r10);
IkReal x10816=(cj1*cj2);
IkReal x10817=(gconst4*r01);
IkReal x10818=(gconst4*r21);
IkReal x10819=(gconst5*r00);
IkReal x10820=(gconst4*sj3);
IkReal x10821=(cj3*gconst5);
IkReal x10822=(cj3*gconst4);
IkReal x10823=((1.0)*x10809);
IkReal x10824=((1.0)*x10808);
IkReal x10825=(cj3*x10808);
IkReal x10826=(cj3*x10809);
IkReal x10827=(x10811+x10810);
evalcond[0]=(((x10808*x10818))+(((-1.0)*gconst5*r20*x10824))+(((-1.0)*r22*x10823)));
evalcond[1]=((((-1.0)*r02*x10823))+((x10808*x10817))+(((-1.0)*x10819*x10824)));
evalcond[2]=((-1.0)+(((-1.0)*x10815*x10824))+(((-1.0)*r12*x10823))+((x10808*x10813)));
evalcond[3]=(((r12*x10825))+((x10813*x10826))+((r10*x10820))+(((-1.0)*cj3*x10815*x10823))+((r11*x10812)));
evalcond[4]=((((-1.0)*sj3*x10813*x10823))+((r10*x10822))+(((-1.0)*r12*sj3*x10824))+((r11*x10821))+((r10*x10809*x10812)));
evalcond[5]=((((-1.0)*r20*x10821*x10823))+((r20*x10820))+((x10818*x10826))+((r22*x10825))+((r21*x10812))+x10827);
evalcond[6]=(((x10817*x10826))+(((-1.0)*x10814))+((r02*x10825))+(((-1.0)*cj3*x10819*x10823))+((r01*x10812))+((r00*x10820))+x10816);
evalcond[7]=((((-1.0)*sj3*x10817*x10823))+((r00*x10809*x10812))+(((-1.0)*r02*sj3*x10824))+((r00*x10822))+((r01*x10821))+x10827);
evalcond[8]=(((r21*x10821))+(((-1.0)*x10816))+(((-1.0)*r22*sj3*x10824))+((r20*x10809*x10812))+((r20*x10822))+(((-1.0)*sj3*x10818*x10823))+x10814);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10828=((1.0)*gconst5);
CheckValue<IkReal> x10829 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10828)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10829.valid){
continue;
}
CheckValue<IkReal> x10830=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10828))+(((-1.0)*gconst4*r20)))),-1);
if(!x10830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10829.value)+(((1.5707963267949)*(x10830.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10831=IKsin(j4);
IkReal x10832=IKcos(j4);
IkReal x10833=(cj2*sj1);
IkReal x10834=(cj1*sj2);
IkReal x10835=(gconst5*sj3);
IkReal x10836=(gconst4*r11);
IkReal x10837=(sj1*sj2);
IkReal x10838=(gconst5*r10);
IkReal x10839=(cj1*cj2);
IkReal x10840=(gconst4*r01);
IkReal x10841=(gconst4*r21);
IkReal x10842=(gconst5*r00);
IkReal x10843=(gconst4*sj3);
IkReal x10844=(cj3*gconst5);
IkReal x10845=(cj3*gconst4);
IkReal x10846=((1.0)*x10832);
IkReal x10847=((1.0)*x10831);
IkReal x10848=(cj3*x10831);
IkReal x10849=(cj3*x10832);
IkReal x10850=(x10834+x10833);
evalcond[0]=((((-1.0)*r22*x10846))+(((-1.0)*gconst5*r20*x10847))+((x10831*x10841)));
evalcond[1]=((((-1.0)*r02*x10846))+(((-1.0)*x10842*x10847))+((x10831*x10840)));
evalcond[2]=((-1.0)+((x10831*x10836))+(((-1.0)*r12*x10846))+(((-1.0)*x10838*x10847)));
evalcond[3]=(((r12*x10848))+((r10*x10843))+(((-1.0)*cj3*x10838*x10846))+((x10836*x10849))+((r11*x10835)));
evalcond[4]=(((r11*x10844))+(((-1.0)*sj3*x10836*x10846))+((r10*x10832*x10835))+(((-1.0)*r12*sj3*x10847))+((r10*x10845)));
evalcond[5]=(((x10841*x10849))+((r22*x10848))+((r20*x10843))+((r21*x10835))+(((-1.0)*r20*x10844*x10846))+x10850);
evalcond[6]=((((-1.0)*cj3*x10842*x10846))+(((-1.0)*x10837))+((r00*x10843))+((x10840*x10849))+((r02*x10848))+((r01*x10835))+x10839);
evalcond[7]=(((r01*x10844))+((r00*x10845))+((r00*x10832*x10835))+(((-1.0)*r02*sj3*x10847))+(((-1.0)*sj3*x10840*x10846))+x10850);
evalcond[8]=(((r20*x10832*x10835))+(((-1.0)*x10839))+(((-1.0)*r22*sj3*x10847))+((r21*x10844))+((r20*x10845))+(((-1.0)*sj3*x10841*x10846))+x10837);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10851=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10851.valid){
continue;
}
CheckValue<IkReal> x10852 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10851.value)))+(x10852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10853=IKsin(j4);
IkReal x10854=IKcos(j4);
IkReal x10855=(cj2*sj1);
IkReal x10856=(cj1*sj2);
IkReal x10857=(gconst5*sj3);
IkReal x10858=(gconst4*r11);
IkReal x10859=(sj1*sj2);
IkReal x10860=(gconst5*r10);
IkReal x10861=(cj1*cj2);
IkReal x10862=(gconst4*r01);
IkReal x10863=(gconst4*r21);
IkReal x10864=(gconst5*r00);
IkReal x10865=(gconst4*sj3);
IkReal x10866=(cj3*gconst5);
IkReal x10867=(cj3*gconst4);
IkReal x10868=((1.0)*x10854);
IkReal x10869=((1.0)*x10853);
IkReal x10870=(cj3*x10853);
IkReal x10871=(cj3*x10854);
IkReal x10872=(x10855+x10856);
evalcond[0]=((((-1.0)*r22*x10868))+(((-1.0)*gconst5*r20*x10869))+((x10853*x10863)));
evalcond[1]=((((-1.0)*x10864*x10869))+((x10853*x10862))+(((-1.0)*r02*x10868)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10868))+(((-1.0)*x10860*x10869))+((x10853*x10858)));
evalcond[3]=(((x10858*x10871))+((r12*x10870))+((r11*x10857))+((r10*x10865))+(((-1.0)*cj3*x10860*x10868)));
evalcond[4]=(((r11*x10866))+((r10*x10854*x10857))+((r10*x10867))+(((-1.0)*r12*sj3*x10869))+(((-1.0)*sj3*x10858*x10868)));
evalcond[5]=((((-1.0)*r20*x10866*x10868))+((r21*x10857))+((x10863*x10871))+((r20*x10865))+((r22*x10870))+x10872);
evalcond[6]=(((r02*x10870))+(((-1.0)*cj3*x10864*x10868))+((r01*x10857))+((r00*x10865))+((x10862*x10871))+(((-1.0)*x10859))+x10861);
evalcond[7]=((((-1.0)*sj3*x10862*x10868))+((r00*x10854*x10857))+((r00*x10867))+((r01*x10866))+(((-1.0)*r02*sj3*x10869))+x10872);
evalcond[8]=((((-1.0)*sj3*x10863*x10868))+(((-1.0)*r22*sj3*x10869))+((r21*x10866))+((r20*x10867))+(((-1.0)*x10861))+((r20*x10854*x10857))+x10859);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10873=((-1.0)*r21);
CheckValue<IkReal> x10876 = IKatan2WithCheck(IkReal(x10873),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10876.valid){
continue;
}
IkReal x10874=((1.0)*(x10876.value));
IkReal x10875=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10874)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10874)));
IkReal gconst4=(x10873*x10875);
IkReal gconst5=((1.0)*r20*x10875);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10877=((-1.0)*r21);
CheckValue<IkReal> x10880 = IKatan2WithCheck(IkReal(x10877),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10880.valid){
continue;
}
IkReal x10878=((1.0)*(x10880.value));
IkReal x10879=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10878)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10878)));
IkReal gconst4=(x10877*x10879);
IkReal gconst5=((1.0)*r20*x10879);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10881=((-1.0)*r21);
CheckValue<IkReal> x10884 = IKatan2WithCheck(IkReal(x10881),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10884.valid){
continue;
}
IkReal x10882=((1.0)*(x10884.value));
IkReal x10883=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10882)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10882)));
IkReal gconst4=(x10881*x10883);
IkReal gconst5=((1.0)*r20*x10883);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10885=((-1.0)*r21);
CheckValue<IkReal> x10888 = IKatan2WithCheck(IkReal(x10885),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10888.valid){
continue;
}
IkReal x10886=((1.0)*(x10888.value));
IkReal x10887=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10886)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10886)));
IkReal gconst4=(x10885*x10887);
IkReal gconst5=((1.0)*r20*x10887);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10889=((-1.0)*r21);
CheckValue<IkReal> x10892 = IKatan2WithCheck(IkReal(x10889),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10892.valid){
continue;
}
IkReal x10890=((1.0)*(x10892.value));
IkReal x10891=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10890)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10890)));
IkReal gconst4=(x10889*x10891);
IkReal gconst5=((1.0)*r20*x10891);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10893=((-1.0)*r21);
CheckValue<IkReal> x10896 = IKatan2WithCheck(IkReal(x10893),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10896.valid){
continue;
}
IkReal x10894=((1.0)*(x10896.value));
IkReal x10895=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10894)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10894)));
IkReal gconst4=(x10893*x10895);
IkReal gconst5=((1.0)*r20*x10895);
IkReal x10897=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10901=IKPowWithIntegerCheck(x10897,-1);
if(!x10901.valid){
continue;
}
IkReal x10898=x10901.value;
IkReal x10899=((1.0)*x10898);
IkReal x10900=((((-1.0)*(r02*r02)))+(((-1.0)*x10899*(r00*r00)*(r20*r20)))+(((-1.0)*x10899*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10898)));
j4eval[0]=x10900;
j4eval[1]=r02;
j4eval[2]=x10897;
j4eval[3]=IKsign(x10900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10902=(gconst5*r00);
IkReal x10903=(gconst4*r01);
CheckValue<IkReal> x10904 = IKatan2WithCheck(IkReal(((((-1.0)*x10903))+x10902)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10904.valid){
continue;
}
CheckValue<IkReal> x10905=IKPowWithIntegerCheck(IKsign(((((2.0)*x10902*x10903))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10902*x10902)))+(((-1.0)*(x10903*x10903))))),-1);
if(!x10905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10904.value)+(((1.5707963267949)*(x10905.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10906=IKsin(j4);
IkReal x10907=IKcos(j4);
IkReal x10908=(gconst4*r11);
IkReal x10909=((1.0)*cj1);
IkReal x10910=(gconst5*r10);
IkReal x10911=(gconst4*r01);
IkReal x10912=(gconst5*r00);
IkReal x10913=(gconst4*r21);
IkReal x10914=(gconst5*r20);
IkReal x10915=((1.0)*x10907);
IkReal x10916=((1.0)*x10906);
evalcond[0]=((((-1.0)*x10914*x10916))+(((-1.0)*r22*x10915))+((x10906*x10913)));
evalcond[1]=((((-1.0)*r12*x10915))+(((-1.0)*x10910*x10916))+((x10906*x10908)));
evalcond[2]=((((-1.0)*r02*x10916))+(((-1.0)*x10911*x10915))+((x10907*x10912)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10915))+(((-1.0)*x10912*x10916))+((x10906*x10911)));
evalcond[4]=((((-1.0)*r22*x10916))+((sj1*sj2))+((x10907*x10914))+(((-1.0)*cj2*x10909))+(((-1.0)*x10913*x10915)));
evalcond[5]=((((-1.0)*x10908*x10915))+(((-1.0)*r12*x10916))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10909))+((x10907*x10910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10917=((1.0)*gconst5);
CheckValue<IkReal> x10918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10917))+(((-1.0)*gconst4*r10)))),-1);
if(!x10918.valid){
continue;
}
CheckValue<IkReal> x10919 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10917))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10918.value)))+(x10919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10920=IKsin(j4);
IkReal x10921=IKcos(j4);
IkReal x10922=(gconst4*r11);
IkReal x10923=((1.0)*cj1);
IkReal x10924=(gconst5*r10);
IkReal x10925=(gconst4*r01);
IkReal x10926=(gconst5*r00);
IkReal x10927=(gconst4*r21);
IkReal x10928=(gconst5*r20);
IkReal x10929=((1.0)*x10921);
IkReal x10930=((1.0)*x10920);
evalcond[0]=((((-1.0)*r22*x10929))+(((-1.0)*x10928*x10930))+((x10920*x10927)));
evalcond[1]=((((-1.0)*r12*x10929))+(((-1.0)*x10924*x10930))+((x10920*x10922)));
evalcond[2]=((((-1.0)*r02*x10930))+((x10921*x10926))+(((-1.0)*x10925*x10929)));
evalcond[3]=((-1.0)+(((-1.0)*x10926*x10930))+(((-1.0)*r02*x10929))+((x10920*x10925)));
evalcond[4]=((((-1.0)*r22*x10930))+(((-1.0)*x10927*x10929))+((sj1*sj2))+((x10921*x10928))+(((-1.0)*cj2*x10923)));
evalcond[5]=((((-1.0)*sj2*x10923))+(((-1.0)*r12*x10930))+(((-1.0)*cj2*sj1))+((x10921*x10924))+(((-1.0)*x10922*x10929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10931 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10931.valid){
continue;
}
CheckValue<IkReal> x10932=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10931.value)+(((1.5707963267949)*(x10932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10933=IKsin(j4);
IkReal x10934=IKcos(j4);
IkReal x10935=(gconst4*r11);
IkReal x10936=((1.0)*cj1);
IkReal x10937=(gconst5*r10);
IkReal x10938=(gconst4*r01);
IkReal x10939=(gconst5*r00);
IkReal x10940=(gconst4*r21);
IkReal x10941=(gconst5*r20);
IkReal x10942=((1.0)*x10934);
IkReal x10943=((1.0)*x10933);
evalcond[0]=((((-1.0)*x10941*x10943))+(((-1.0)*r22*x10942))+((x10933*x10940)));
evalcond[1]=(((x10933*x10935))+(((-1.0)*r12*x10942))+(((-1.0)*x10937*x10943)));
evalcond[2]=((((-1.0)*x10938*x10942))+(((-1.0)*r02*x10943))+((x10934*x10939)));
evalcond[3]=((-1.0)+(((-1.0)*x10939*x10943))+((x10933*x10938))+(((-1.0)*r02*x10942)));
evalcond[4]=(((x10934*x10941))+((sj1*sj2))+(((-1.0)*r22*x10943))+(((-1.0)*cj2*x10936))+(((-1.0)*x10940*x10942)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10935*x10942))+(((-1.0)*r12*x10943))+((x10934*x10937))+(((-1.0)*sj2*x10936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10944=((-1.0)*r21);
CheckValue<IkReal> x10947 = IKatan2WithCheck(IkReal(x10944),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10947.valid){
continue;
}
IkReal x10945=((1.0)*(x10947.value));
IkReal x10946=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10945)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10945)));
IkReal gconst4=(x10944*x10946);
IkReal gconst5=((1.0)*r20*x10946);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10948=((-1.0)*r21);
CheckValue<IkReal> x10951 = IKatan2WithCheck(IkReal(x10948),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10951.valid){
continue;
}
IkReal x10949=((1.0)*(x10951.value));
IkReal x10950=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10949)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10949)));
IkReal gconst4=(x10948*x10950);
IkReal gconst5=((1.0)*r20*x10950);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10952=((-1.0)*r21);
CheckValue<IkReal> x10955 = IKatan2WithCheck(IkReal(x10952),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10955.valid){
continue;
}
IkReal x10953=((1.0)*(x10955.value));
IkReal x10954=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10953)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10953)));
IkReal gconst4=(x10952*x10954);
IkReal gconst5=((1.0)*r20*x10954);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10956=(gconst4*r01);
IkReal x10957=(gconst5*r00);
CheckValue<IkReal> x10958 = IKatan2WithCheck(IkReal(((((-1.0)*x10957))+x10956)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10958.valid){
continue;
}
CheckValue<IkReal> x10959=IKPowWithIntegerCheck(IKsign(((x10957*x10957)+(((-2.0)*x10956*x10957))+(x10956*x10956)+(r02*r02))),-1);
if(!x10959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10958.value)+(((1.5707963267949)*(x10959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10960=IKcos(j4);
IkReal x10961=IKsin(j4);
IkReal x10962=(gconst4*r11);
IkReal x10963=(gconst5*r10);
IkReal x10964=((1.0)*cj1);
IkReal x10965=(gconst5*r00);
IkReal x10966=(gconst5*r20);
IkReal x10967=((1.0)*x10960);
IkReal x10968=(gconst4*x10960);
IkReal x10969=((1.0)*x10961);
IkReal x10970=(gconst4*x10961);
evalcond[0]=(((r02*x10961))+((r01*x10968))+(((-1.0)*x10965*x10967)));
evalcond[1]=((((-1.0)*r22*x10967))+((r21*x10970))+(((-1.0)*x10966*x10969)));
evalcond[2]=((((-1.0)*x10963*x10969))+((x10961*x10962))+(((-1.0)*r12*x10967)));
evalcond[3]=((-1.0)+((r01*x10970))+(((-1.0)*r02*x10967))+(((-1.0)*x10965*x10969)));
evalcond[4]=(((r22*x10961))+((sj1*sj2))+((r21*x10968))+(((-1.0)*x10966*x10967))+(((-1.0)*cj2*x10964)));
evalcond[5]=(((x10960*x10962))+(((-1.0)*x10963*x10967))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10964))+((r12*x10961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10971=((1.0)*gconst5);
CheckValue<IkReal> x10972 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10971))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10972.valid){
continue;
}
CheckValue<IkReal> x10973=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10971))+(((-1.0)*gconst4*r10)))),-1);
if(!x10973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10972.value)+(((1.5707963267949)*(x10973.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10974=IKcos(j4);
IkReal x10975=IKsin(j4);
IkReal x10976=(gconst4*r11);
IkReal x10977=(gconst5*r10);
IkReal x10978=((1.0)*cj1);
IkReal x10979=(gconst5*r00);
IkReal x10980=(gconst5*r20);
IkReal x10981=((1.0)*x10974);
IkReal x10982=(gconst4*x10974);
IkReal x10983=((1.0)*x10975);
IkReal x10984=(gconst4*x10975);
evalcond[0]=(((r02*x10975))+((r01*x10982))+(((-1.0)*x10979*x10981)));
evalcond[1]=(((r21*x10984))+(((-1.0)*r22*x10981))+(((-1.0)*x10980*x10983)));
evalcond[2]=((((-1.0)*r12*x10981))+(((-1.0)*x10977*x10983))+((x10975*x10976)));
evalcond[3]=((-1.0)+((r01*x10984))+(((-1.0)*r02*x10981))+(((-1.0)*x10979*x10983)));
evalcond[4]=((((-1.0)*cj2*x10978))+((r21*x10982))+((r22*x10975))+((sj1*sj2))+(((-1.0)*x10980*x10981)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10977*x10981))+((x10974*x10976))+(((-1.0)*sj2*x10978))+((r12*x10975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10985 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10985.valid){
continue;
}
CheckValue<IkReal> x10986=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10985.value)+(((1.5707963267949)*(x10986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10987=IKcos(j4);
IkReal x10988=IKsin(j4);
IkReal x10989=(gconst4*r11);
IkReal x10990=(gconst5*r10);
IkReal x10991=((1.0)*cj1);
IkReal x10992=(gconst5*r00);
IkReal x10993=(gconst5*r20);
IkReal x10994=((1.0)*x10987);
IkReal x10995=(gconst4*x10987);
IkReal x10996=((1.0)*x10988);
IkReal x10997=(gconst4*x10988);
evalcond[0]=((((-1.0)*x10992*x10994))+((r01*x10995))+((r02*x10988)));
evalcond[1]=(((r21*x10997))+(((-1.0)*x10993*x10996))+(((-1.0)*r22*x10994)));
evalcond[2]=((((-1.0)*x10990*x10996))+(((-1.0)*r12*x10994))+((x10988*x10989)));
evalcond[3]=((-1.0)+(((-1.0)*x10992*x10996))+((r01*x10997))+(((-1.0)*r02*x10994)));
evalcond[4]=(((r22*x10988))+((r21*x10995))+(((-1.0)*x10993*x10994))+(((-1.0)*cj2*x10991))+((sj1*sj2)));
evalcond[5]=(((r12*x10988))+((x10987*x10989))+(((-1.0)*sj2*x10991))+(((-1.0)*cj2*sj1))+(((-1.0)*x10990*x10994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10998=((-1.0)*r21);
CheckValue<IkReal> x11001 = IKatan2WithCheck(IkReal(x10998),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11001.valid){
continue;
}
IkReal x10999=((1.0)*(x11001.value));
IkReal x11000=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10999)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10999)));
IkReal gconst4=(x10998*x11000);
IkReal gconst5=((1.0)*r20*x11000);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11002=((-1.0)*r21);
CheckValue<IkReal> x11005 = IKatan2WithCheck(IkReal(x11002),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11005.valid){
continue;
}
IkReal x11003=((1.0)*(x11005.value));
IkReal x11004=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11003)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11003)));
IkReal gconst4=(x11002*x11004);
IkReal gconst5=((1.0)*r20*x11004);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11006=((-1.0)*r21);
CheckValue<IkReal> x11009 = IKatan2WithCheck(IkReal(x11006),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11009.valid){
continue;
}
IkReal x11007=((1.0)*(x11009.value));
IkReal x11008=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11007)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11007)));
IkReal gconst4=(x11006*x11008);
IkReal gconst5=((1.0)*r20*x11008);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11010=(gconst4*r01);
IkReal x11011=(gconst5*r00);
CheckValue<IkReal> x11012=IKPowWithIntegerCheck(IKsign(((x11010*x11010)+(x11011*x11011)+(r02*r02)+(((-2.0)*x11010*x11011)))),-1);
if(!x11012.valid){
continue;
}
CheckValue<IkReal> x11013 = IKatan2WithCheck(IkReal((x11010+(((-1.0)*x11011)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11012.value)))+(x11013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11014=IKcos(j4);
IkReal x11015=IKsin(j4);
IkReal x11016=(gconst4*r11);
IkReal x11017=(gconst5*r10);
IkReal x11018=(gconst5*r00);
IkReal x11019=(gconst5*r20);
IkReal x11020=((1.0)*x11014);
IkReal x11021=(gconst4*x11014);
IkReal x11022=((1.0)*x11015);
IkReal x11023=(gconst4*x11015);
evalcond[0]=(((r01*x11021))+(((-1.0)*x11018*x11020))+((r02*x11015)));
evalcond[1]=(((r21*x11023))+(((-1.0)*r22*x11020))+(((-1.0)*x11019*x11022)));
evalcond[2]=((((-1.0)*r12*x11020))+(((-1.0)*x11017*x11022))+((x11015*x11016)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11020))+((r01*x11023))+(((-1.0)*x11018*x11022)));
evalcond[4]=(((cj2*sj1))+((r21*x11021))+((cj1*sj2))+((r22*x11015))+(((-1.0)*x11019*x11020)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11015))+(((-1.0)*x11017*x11020))+((x11014*x11016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11024=((1.0)*gconst5);
CheckValue<IkReal> x11025 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11024))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11025.valid){
continue;
}
CheckValue<IkReal> x11026=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11024))+(((-1.0)*gconst4*r10)))),-1);
if(!x11026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11025.value)+(((1.5707963267949)*(x11026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11027=IKcos(j4);
IkReal x11028=IKsin(j4);
IkReal x11029=(gconst4*r11);
IkReal x11030=(gconst5*r10);
IkReal x11031=(gconst5*r00);
IkReal x11032=(gconst5*r20);
IkReal x11033=((1.0)*x11027);
IkReal x11034=(gconst4*x11027);
IkReal x11035=((1.0)*x11028);
IkReal x11036=(gconst4*x11028);
evalcond[0]=(((r01*x11034))+(((-1.0)*x11031*x11033))+((r02*x11028)));
evalcond[1]=(((r21*x11036))+(((-1.0)*r22*x11033))+(((-1.0)*x11032*x11035)));
evalcond[2]=((((-1.0)*x11030*x11035))+(((-1.0)*r12*x11033))+((x11028*x11029)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11033))+((r01*x11036))+(((-1.0)*x11031*x11035)));
evalcond[4]=(((cj2*sj1))+((r21*x11034))+((cj1*sj2))+((r22*x11028))+(((-1.0)*x11032*x11033)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11027*x11029))+((r12*x11028))+(((-1.0)*x11030*x11033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11037 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11037.valid){
continue;
}
CheckValue<IkReal> x11038=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11037.value)+(((1.5707963267949)*(x11038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11039=IKcos(j4);
IkReal x11040=IKsin(j4);
IkReal x11041=(gconst4*r11);
IkReal x11042=(gconst5*r10);
IkReal x11043=(gconst5*r00);
IkReal x11044=(gconst5*r20);
IkReal x11045=((1.0)*x11039);
IkReal x11046=(gconst4*x11039);
IkReal x11047=((1.0)*x11040);
IkReal x11048=(gconst4*x11040);
evalcond[0]=(((r01*x11046))+(((-1.0)*x11043*x11045))+((r02*x11040)));
evalcond[1]=((((-1.0)*r22*x11045))+((r21*x11048))+(((-1.0)*x11044*x11047)));
evalcond[2]=((((-1.0)*r12*x11045))+((x11040*x11041))+(((-1.0)*x11042*x11047)));
evalcond[3]=((-1.0)+((r01*x11048))+(((-1.0)*x11043*x11047))+(((-1.0)*r02*x11045)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11040))+((r21*x11046))+(((-1.0)*x11044*x11045)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11042*x11045))+((r12*x11040))+((x11039*x11041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11049=((-1.0)*r21);
CheckValue<IkReal> x11052 = IKatan2WithCheck(IkReal(x11049),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11052.valid){
continue;
}
IkReal x11050=((1.0)*(x11052.value));
IkReal x11051=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11050)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11050)));
IkReal gconst4=(x11049*x11051);
IkReal gconst5=((1.0)*r20*x11051);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11053=((-1.0)*r21);
CheckValue<IkReal> x11056 = IKatan2WithCheck(IkReal(x11053),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11056.valid){
continue;
}
IkReal x11054=((1.0)*(x11056.value));
IkReal x11055=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11054)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11054)));
IkReal gconst4=(x11053*x11055);
IkReal gconst5=((1.0)*r20*x11055);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11057=((-1.0)*r21);
CheckValue<IkReal> x11060 = IKatan2WithCheck(IkReal(x11057),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11060.valid){
continue;
}
IkReal x11058=((1.0)*(x11060.value));
IkReal x11059=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11058)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11058)));
IkReal gconst4=(x11057*x11059);
IkReal gconst5=((1.0)*r20*x11059);
IkReal x11061=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11065=IKPowWithIntegerCheck(x11061,-1);
if(!x11065.valid){
continue;
}
IkReal x11062=x11065.value;
IkReal x11063=((1.0)*x11062);
IkReal x11064=((((-1.0)*x11063*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11062))+(((-1.0)*(r02*r02)))+(((-1.0)*x11063*(r01*r01)*(r21*r21))));
j4eval[0]=x11064;
j4eval[1]=r02;
j4eval[2]=x11061;
j4eval[3]=IKsign(x11064);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11066=(gconst5*r00);
IkReal x11067=(gconst4*r01);
CheckValue<IkReal> x11068=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11067*x11067)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11066*x11066)))+(((2.0)*x11066*x11067)))),-1);
if(!x11068.valid){
continue;
}
CheckValue<IkReal> x11069 = IKatan2WithCheck(IkReal((x11066+(((-1.0)*x11067)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11068.value)))+(x11069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11070=IKsin(j4);
IkReal x11071=IKcos(j4);
IkReal x11072=(gconst4*r11);
IkReal x11073=(gconst5*r10);
IkReal x11074=(gconst4*r01);
IkReal x11075=(gconst5*r00);
IkReal x11076=(gconst4*r21);
IkReal x11077=(gconst5*r20);
IkReal x11078=((1.0)*x11071);
IkReal x11079=((1.0)*x11070);
evalcond[0]=((((-1.0)*x11077*x11079))+(((-1.0)*r22*x11078))+((x11070*x11076)));
evalcond[1]=((((-1.0)*x11073*x11079))+((x11070*x11072))+(((-1.0)*r12*x11078)));
evalcond[2]=((((-1.0)*r02*x11079))+((x11071*x11075))+(((-1.0)*x11074*x11078)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11078))+(((-1.0)*x11075*x11079))+((x11070*x11074)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11071*x11077))+(((-1.0)*x11076*x11078))+(((-1.0)*r22*x11079)));
evalcond[5]=((((-1.0)*x11072*x11078))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11071*x11073))+(((-1.0)*r12*x11079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11080=((1.0)*gconst5);
CheckValue<IkReal> x11081 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11080))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11081.valid){
continue;
}
CheckValue<IkReal> x11082=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11080))+(((-1.0)*gconst4*r10)))),-1);
if(!x11082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11081.value)+(((1.5707963267949)*(x11082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11083=IKsin(j4);
IkReal x11084=IKcos(j4);
IkReal x11085=(gconst4*r11);
IkReal x11086=(gconst5*r10);
IkReal x11087=(gconst4*r01);
IkReal x11088=(gconst5*r00);
IkReal x11089=(gconst4*r21);
IkReal x11090=(gconst5*r20);
IkReal x11091=((1.0)*x11084);
IkReal x11092=((1.0)*x11083);
evalcond[0]=((((-1.0)*r22*x11091))+(((-1.0)*x11090*x11092))+((x11083*x11089)));
evalcond[1]=((((-1.0)*x11086*x11092))+(((-1.0)*r12*x11091))+((x11083*x11085)));
evalcond[2]=((((-1.0)*r02*x11092))+((x11084*x11088))+(((-1.0)*x11087*x11091)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11091))+((x11083*x11087))+(((-1.0)*x11088*x11092)));
evalcond[4]=(((cj2*sj1))+((x11084*x11090))+(((-1.0)*r22*x11092))+((cj1*sj2))+(((-1.0)*x11089*x11091)));
evalcond[5]=((((-1.0)*r12*x11092))+(((-1.0)*x11085*x11091))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11084*x11086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11093 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11093.valid){
continue;
}
CheckValue<IkReal> x11094=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11093.value)+(((1.5707963267949)*(x11094.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11095=IKsin(j4);
IkReal x11096=IKcos(j4);
IkReal x11097=(gconst4*r11);
IkReal x11098=(gconst5*r10);
IkReal x11099=(gconst4*r01);
IkReal x11100=(gconst5*r00);
IkReal x11101=(gconst4*r21);
IkReal x11102=(gconst5*r20);
IkReal x11103=((1.0)*x11096);
IkReal x11104=((1.0)*x11095);
evalcond[0]=(((x11095*x11101))+(((-1.0)*x11102*x11104))+(((-1.0)*r22*x11103)));
evalcond[1]=((((-1.0)*x11098*x11104))+(((-1.0)*r12*x11103))+((x11095*x11097)));
evalcond[2]=((((-1.0)*r02*x11104))+(((-1.0)*x11099*x11103))+((x11096*x11100)));
evalcond[3]=((-1.0)+(((-1.0)*x11100*x11104))+(((-1.0)*r02*x11103))+((x11095*x11099)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11101*x11103))+((cj1*sj2))+(((-1.0)*r22*x11104))+((x11096*x11102)));
evalcond[5]=((((-1.0)*x11097*x11103))+((x11096*x11098))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11105=gconst4*gconst4;
IkReal x11106=gconst5*gconst5;
IkReal x11107=(r01*r20);
IkReal x11108=(gconst4*sj3);
IkReal x11109=(r01*r21);
IkReal x11110=((1.0)*cj3);
IkReal x11111=(r00*r21);
IkReal x11112=(r00*r20);
IkReal x11113=(cj3*gconst4*gconst5);
IkReal x11114=((1.0)*x11106);
CheckValue<IkReal> x11115=IKPowWithIntegerCheck(IKsign((((x11111*x11113))+((x11107*x11113))+(((-1.0)*r02*r22*x11110))+(((-1.0)*x11106*x11110*x11112))+(((-1.0)*x11105*x11109*x11110)))),-1);
if(!x11115.valid){
continue;
}
CheckValue<IkReal> x11116 = IKatan2WithCheck(IkReal((((r00*r22*x11108))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11108*x11112))+((sj3*x11105*x11111))+(((-1.0)*sj3*x11107*x11114))+((gconst5*x11108*x11109)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11115.value)))+(x11116.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11117=IKsin(j4);
IkReal x11118=IKcos(j4);
IkReal x11119=(sj1*sj2);
IkReal x11120=(gconst5*sj3);
IkReal x11121=(gconst4*r11);
IkReal x11122=(gconst5*r10);
IkReal x11123=((1.0)*cj1);
IkReal x11124=(gconst4*r01);
IkReal x11125=(cj2*sj1);
IkReal x11126=(gconst5*r00);
IkReal x11127=(gconst4*sj3);
IkReal x11128=(cj3*gconst5);
IkReal x11129=(cj3*gconst4);
IkReal x11130=(gconst4*r21);
IkReal x11131=(cj2*x11123);
IkReal x11132=((1.0)*x11118);
IkReal x11133=((1.0)*x11117);
IkReal x11134=(cj3*x11117);
IkReal x11135=(cj3*x11118);
evalcond[0]=(((x11117*x11130))+(((-1.0)*r22*x11132))+(((-1.0)*gconst5*r20*x11133)));
evalcond[1]=(((x11117*x11121))+(((-1.0)*r12*x11132))+(((-1.0)*x11122*x11133)));
evalcond[2]=((-1.0)+((x11117*x11124))+(((-1.0)*r02*x11132))+(((-1.0)*x11126*x11133)));
evalcond[3]=(((r02*x11134))+((x11124*x11135))+(((-1.0)*cj3*x11126*x11132))+((r00*x11127))+((r01*x11120)));
evalcond[4]=((((-1.0)*r02*sj3*x11133))+((r00*x11118*x11120))+((r00*x11129))+((r01*x11128))+(((-1.0)*sj3*x11124*x11132)));
evalcond[5]=(((r22*x11134))+((r21*x11120))+((cj1*sj2))+(((-1.0)*r20*x11128*x11132))+x11125+((r21*x11118*x11129))+((r20*x11127)));
evalcond[6]=(((x11121*x11135))+((r10*x11127))+x11119+((r11*x11120))+(((-1.0)*x11131))+((r12*x11134))+(((-1.0)*cj3*x11122*x11132)));
evalcond[7]=(((r21*x11128))+x11119+(((-1.0)*r22*sj3*x11133))+(((-1.0)*r21*x11127*x11132))+((r20*x11118*x11120))+(((-1.0)*x11131))+((r20*x11129)));
evalcond[8]=(((r10*x11118*x11120))+(((-1.0)*x11125))+(((-1.0)*sj3*x11121*x11132))+(((-1.0)*r12*sj3*x11133))+((r10*x11129))+((r11*x11128))+(((-1.0)*sj2*x11123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11136=((1.0)*gconst5);
CheckValue<IkReal> x11137=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11136))+(((-1.0)*gconst4*r10)))),-1);
if(!x11137.valid){
continue;
}
CheckValue<IkReal> x11138 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11136))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11137.value)))+(x11138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11139=IKsin(j4);
IkReal x11140=IKcos(j4);
IkReal x11141=(sj1*sj2);
IkReal x11142=(gconst5*sj3);
IkReal x11143=(gconst4*r11);
IkReal x11144=(gconst5*r10);
IkReal x11145=((1.0)*cj1);
IkReal x11146=(gconst4*r01);
IkReal x11147=(cj2*sj1);
IkReal x11148=(gconst5*r00);
IkReal x11149=(gconst4*sj3);
IkReal x11150=(cj3*gconst5);
IkReal x11151=(cj3*gconst4);
IkReal x11152=(gconst4*r21);
IkReal x11153=(cj2*x11145);
IkReal x11154=((1.0)*x11140);
IkReal x11155=((1.0)*x11139);
IkReal x11156=(cj3*x11139);
IkReal x11157=(cj3*x11140);
evalcond[0]=((((-1.0)*gconst5*r20*x11155))+(((-1.0)*r22*x11154))+((x11139*x11152)));
evalcond[1]=((((-1.0)*x11144*x11155))+(((-1.0)*r12*x11154))+((x11139*x11143)));
evalcond[2]=((-1.0)+(((-1.0)*x11148*x11155))+(((-1.0)*r02*x11154))+((x11139*x11146)));
evalcond[3]=(((r01*x11142))+((x11146*x11157))+((r00*x11149))+((r02*x11156))+(((-1.0)*cj3*x11148*x11154)));
evalcond[4]=(((r00*x11151))+((r01*x11150))+((r00*x11140*x11142))+(((-1.0)*sj3*x11146*x11154))+(((-1.0)*r02*sj3*x11155)));
evalcond[5]=(((r22*x11156))+((r21*x11142))+((r21*x11140*x11151))+((cj1*sj2))+x11147+((r20*x11149))+(((-1.0)*r20*x11150*x11154)));
evalcond[6]=(((x11143*x11157))+((r11*x11142))+x11141+(((-1.0)*cj3*x11144*x11154))+((r12*x11156))+((r10*x11149))+(((-1.0)*x11153)));
evalcond[7]=(((r21*x11150))+x11141+(((-1.0)*r21*x11149*x11154))+((r20*x11151))+(((-1.0)*r22*sj3*x11155))+(((-1.0)*x11153))+((r20*x11140*x11142)));
evalcond[8]=(((r11*x11150))+(((-1.0)*r12*sj3*x11155))+(((-1.0)*x11147))+((r10*x11140*x11142))+((r10*x11151))+(((-1.0)*sj3*x11143*x11154))+(((-1.0)*sj2*x11145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11158 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11158.valid){
continue;
}
CheckValue<IkReal> x11159=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11158.value)+(((1.5707963267949)*(x11159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11160=IKsin(j4);
IkReal x11161=IKcos(j4);
IkReal x11162=(sj1*sj2);
IkReal x11163=(gconst5*sj3);
IkReal x11164=(gconst4*r11);
IkReal x11165=(gconst5*r10);
IkReal x11166=((1.0)*cj1);
IkReal x11167=(gconst4*r01);
IkReal x11168=(cj2*sj1);
IkReal x11169=(gconst5*r00);
IkReal x11170=(gconst4*sj3);
IkReal x11171=(cj3*gconst5);
IkReal x11172=(cj3*gconst4);
IkReal x11173=(gconst4*r21);
IkReal x11174=(cj2*x11166);
IkReal x11175=((1.0)*x11161);
IkReal x11176=((1.0)*x11160);
IkReal x11177=(cj3*x11160);
IkReal x11178=(cj3*x11161);
evalcond[0]=(((x11160*x11173))+(((-1.0)*r22*x11175))+(((-1.0)*gconst5*r20*x11176)));
evalcond[1]=(((x11160*x11164))+(((-1.0)*r12*x11175))+(((-1.0)*x11165*x11176)));
evalcond[2]=((-1.0)+((x11160*x11167))+(((-1.0)*x11169*x11176))+(((-1.0)*r02*x11175)));
evalcond[3]=(((r01*x11163))+((r00*x11170))+(((-1.0)*cj3*x11169*x11175))+((x11167*x11178))+((r02*x11177)));
evalcond[4]=(((r00*x11172))+((r01*x11171))+(((-1.0)*sj3*x11167*x11175))+(((-1.0)*r02*sj3*x11176))+((r00*x11161*x11163)));
evalcond[5]=(((r20*x11170))+((cj1*sj2))+x11168+(((-1.0)*r20*x11171*x11175))+((r22*x11177))+((r21*x11161*x11172))+((r21*x11163)));
evalcond[6]=(((r12*x11177))+((r11*x11163))+(((-1.0)*x11174))+x11162+((r10*x11170))+((x11164*x11178))+(((-1.0)*cj3*x11165*x11175)));
evalcond[7]=((((-1.0)*r22*sj3*x11176))+((r20*x11172))+(((-1.0)*x11174))+x11162+((r21*x11171))+((r20*x11161*x11163))+(((-1.0)*r21*x11170*x11175)));
evalcond[8]=(((r10*x11161*x11163))+((r11*x11171))+(((-1.0)*sj2*x11166))+(((-1.0)*sj3*x11164*x11175))+(((-1.0)*x11168))+(((-1.0)*r12*sj3*x11176))+((r10*x11172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11179=((-1.0)*r21);
CheckValue<IkReal> x11182 = IKatan2WithCheck(IkReal(x11179),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11182.valid){
continue;
}
IkReal x11180=((1.0)*(x11182.value));
IkReal x11181=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11180)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11180)));
IkReal gconst4=(x11179*x11181);
IkReal gconst5=((1.0)*r20*x11181);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11183=((-1.0)*r21);
CheckValue<IkReal> x11186 = IKatan2WithCheck(IkReal(x11183),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11186.valid){
continue;
}
IkReal x11184=((1.0)*(x11186.value));
IkReal x11185=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11184)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11184)));
IkReal gconst4=(x11183*x11185);
IkReal gconst5=((1.0)*r20*x11185);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11187=((-1.0)*r21);
CheckValue<IkReal> x11190 = IKatan2WithCheck(IkReal(x11187),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11190.valid){
continue;
}
IkReal x11188=((1.0)*(x11190.value));
IkReal x11189=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11188)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11188)));
IkReal gconst4=(x11187*x11189);
IkReal gconst5=((1.0)*r20*x11189);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11191=((-1.0)*r21);
CheckValue<IkReal> x11194 = IKatan2WithCheck(IkReal(x11191),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11194.valid){
continue;
}
IkReal x11192=((1.0)*(x11194.value));
IkReal x11193=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11192)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11192)));
IkReal gconst4=(x11191*x11193);
IkReal gconst5=((1.0)*r20*x11193);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11195=((-1.0)*r21);
CheckValue<IkReal> x11198 = IKatan2WithCheck(IkReal(x11195),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11198.valid){
continue;
}
IkReal x11196=((1.0)*(x11198.value));
IkReal x11197=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11196)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11196)));
IkReal gconst4=(x11195*x11197);
IkReal gconst5=((1.0)*r20*x11197);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11199=((-1.0)*r21);
CheckValue<IkReal> x11202 = IKatan2WithCheck(IkReal(x11199),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11202.valid){
continue;
}
IkReal x11200=((1.0)*(x11202.value));
IkReal x11201=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11200)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11200)));
IkReal gconst4=(x11199*x11201);
IkReal gconst5=((1.0)*r20*x11201);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11203=(gconst5*r00);
IkReal x11204=(gconst4*r01);
CheckValue<IkReal> x11205 = IKatan2WithCheck(IkReal((x11203+(((-1.0)*x11204)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11205.valid){
continue;
}
CheckValue<IkReal> x11206=IKPowWithIntegerCheck(IKsign(((x11203*x11203)+(((-2.0)*x11203*x11204))+(x11204*x11204)+(r02*r02))),-1);
if(!x11206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11205.value)+(((1.5707963267949)*(x11206.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11207=IKsin(j4);
IkReal x11208=IKcos(j4);
IkReal x11209=(gconst4*r11);
IkReal x11210=(gconst5*r10);
IkReal x11211=(gconst4*r01);
IkReal x11212=(gconst5*r00);
IkReal x11213=(gconst4*r21);
IkReal x11214=(gconst5*r20);
IkReal x11215=((1.0)*x11208);
IkReal x11216=((1.0)*x11207);
evalcond[0]=(((x11207*x11213))+(((-1.0)*x11214*x11216))+(((-1.0)*r22*x11215)));
evalcond[1]=(((x11207*x11209))+(((-1.0)*r12*x11215))+(((-1.0)*x11210*x11216)));
evalcond[2]=(((x11208*x11212))+(((-1.0)*r02*x11216))+(((-1.0)*x11211*x11215)));
evalcond[3]=((1.0)+((x11207*x11211))+(((-1.0)*x11212*x11216))+(((-1.0)*r02*x11215)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11209*x11215))+((cj1*sj2))+(((-1.0)*r12*x11216))+((x11208*x11210)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11208*x11214))+(((-1.0)*x11213*x11215))+(((-1.0)*r22*x11216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11217=((1.0)*gconst5);
CheckValue<IkReal> x11218 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11218.valid){
continue;
}
CheckValue<IkReal> x11219=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11217))+(((-1.0)*gconst4*r20)))),-1);
if(!x11219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11218.value)+(((1.5707963267949)*(x11219.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11220=IKsin(j4);
IkReal x11221=IKcos(j4);
IkReal x11222=(gconst4*r11);
IkReal x11223=(gconst5*r10);
IkReal x11224=(gconst4*r01);
IkReal x11225=(gconst5*r00);
IkReal x11226=(gconst4*r21);
IkReal x11227=(gconst5*r20);
IkReal x11228=((1.0)*x11221);
IkReal x11229=((1.0)*x11220);
evalcond[0]=(((x11220*x11226))+(((-1.0)*x11227*x11229))+(((-1.0)*r22*x11228)));
evalcond[1]=(((x11220*x11222))+(((-1.0)*x11223*x11229))+(((-1.0)*r12*x11228)));
evalcond[2]=(((x11221*x11225))+(((-1.0)*x11224*x11228))+(((-1.0)*r02*x11229)));
evalcond[3]=((1.0)+(((-1.0)*x11225*x11229))+((x11220*x11224))+(((-1.0)*r02*x11228)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11221*x11223))+(((-1.0)*x11222*x11228))+(((-1.0)*r12*x11229)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11221*x11227))+(((-1.0)*x11226*x11228))+(((-1.0)*r22*x11229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11230=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11230.valid){
continue;
}
CheckValue<IkReal> x11231 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11230.value)))+(x11231.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11232=IKsin(j4);
IkReal x11233=IKcos(j4);
IkReal x11234=(gconst4*r11);
IkReal x11235=(gconst5*r10);
IkReal x11236=(gconst4*r01);
IkReal x11237=(gconst5*r00);
IkReal x11238=(gconst4*r21);
IkReal x11239=(gconst5*r20);
IkReal x11240=((1.0)*x11233);
IkReal x11241=((1.0)*x11232);
evalcond[0]=((((-1.0)*x11239*x11241))+((x11232*x11238))+(((-1.0)*r22*x11240)));
evalcond[1]=((((-1.0)*x11235*x11241))+((x11232*x11234))+(((-1.0)*r12*x11240)));
evalcond[2]=((((-1.0)*r02*x11241))+(((-1.0)*x11236*x11240))+((x11233*x11237)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11240))+((x11232*x11236))+(((-1.0)*x11237*x11241)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11233*x11235))+(((-1.0)*x11234*x11240))+(((-1.0)*r12*x11241)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11238*x11240))+((x11233*x11239))+(((-1.0)*r22*x11241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11242=((-1.0)*r21);
CheckValue<IkReal> x11245 = IKatan2WithCheck(IkReal(x11242),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11245.valid){
continue;
}
IkReal x11243=((1.0)*(x11245.value));
IkReal x11244=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11243)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11243)));
IkReal gconst4=(x11242*x11244);
IkReal gconst5=((1.0)*r20*x11244);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11246=((-1.0)*r21);
CheckValue<IkReal> x11249 = IKatan2WithCheck(IkReal(x11246),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11249.valid){
continue;
}
IkReal x11247=((1.0)*(x11249.value));
IkReal x11248=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11247)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11247)));
IkReal gconst4=(x11246*x11248);
IkReal gconst5=((1.0)*r20*x11248);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11250=((-1.0)*r21);
CheckValue<IkReal> x11253 = IKatan2WithCheck(IkReal(x11250),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11253.valid){
continue;
}
IkReal x11251=((1.0)*(x11253.value));
IkReal x11252=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11251)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11251)));
IkReal gconst4=(x11250*x11252);
IkReal gconst5=((1.0)*r20*x11252);
IkReal x11254=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11258=IKPowWithIntegerCheck(x11254,-1);
if(!x11258.valid){
continue;
}
IkReal x11255=x11258.value;
IkReal x11256=((1.0)*x11255);
IkReal x11257=((((-2.0)*r00*r01*r20*r21*x11255))+(((-1.0)*(r02*r02)))+(((-1.0)*x11256*(r00*r00)*(r20*r20)))+(((-1.0)*x11256*(r01*r01)*(r21*r21))));
j4eval[0]=x11257;
j4eval[1]=IKsign(x11257);
j4eval[2]=r02;
j4eval[3]=x11254;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11259=(gconst4*r01);
IkReal x11260=(gconst5*r00);
CheckValue<IkReal> x11261=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11259*x11259)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11260*x11260)))+(((2.0)*x11259*x11260)))),-1);
if(!x11261.valid){
continue;
}
CheckValue<IkReal> x11262 = IKatan2WithCheck(IkReal(((((-1.0)*x11260))+x11259)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11261.value)))+(x11262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11263=IKcos(j4);
IkReal x11264=IKsin(j4);
IkReal x11265=(gconst4*r11);
IkReal x11266=(gconst5*r10);
IkReal x11267=(gconst5*r00);
IkReal x11268=(gconst5*r20);
IkReal x11269=((1.0)*x11263);
IkReal x11270=(gconst4*x11263);
IkReal x11271=((1.0)*x11264);
IkReal x11272=(gconst4*x11264);
evalcond[0]=(((r01*x11270))+((r02*x11264))+(((-1.0)*x11267*x11269)));
evalcond[1]=(((r21*x11272))+(((-1.0)*x11268*x11271))+(((-1.0)*r22*x11269)));
evalcond[2]=(((x11264*x11265))+(((-1.0)*r12*x11269))+(((-1.0)*x11266*x11271)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11269))+((r01*x11272))+(((-1.0)*x11267*x11271)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11263*x11265))+(((-1.0)*x11266*x11269))+((r12*x11264)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11264))+((r21*x11270))+(((-1.0)*x11268*x11269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11273=((1.0)*gconst5);
CheckValue<IkReal> x11274 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11274.valid){
continue;
}
CheckValue<IkReal> x11275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11273))+(((-1.0)*gconst4*r20)))),-1);
if(!x11275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11274.value)+(((1.5707963267949)*(x11275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11276=IKcos(j4);
IkReal x11277=IKsin(j4);
IkReal x11278=(gconst4*r11);
IkReal x11279=(gconst5*r10);
IkReal x11280=(gconst5*r00);
IkReal x11281=(gconst5*r20);
IkReal x11282=((1.0)*x11276);
IkReal x11283=(gconst4*x11276);
IkReal x11284=((1.0)*x11277);
IkReal x11285=(gconst4*x11277);
evalcond[0]=(((r02*x11277))+((r01*x11283))+(((-1.0)*x11280*x11282)));
evalcond[1]=((((-1.0)*r22*x11282))+((r21*x11285))+(((-1.0)*x11281*x11284)));
evalcond[2]=((((-1.0)*r12*x11282))+(((-1.0)*x11279*x11284))+((x11277*x11278)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11282))+((r01*x11285))+(((-1.0)*x11280*x11284)));
evalcond[4]=(((cj2*sj1))+((x11276*x11278))+((r12*x11277))+((cj1*sj2))+(((-1.0)*x11279*x11282)));
evalcond[5]=(((r22*x11277))+((r21*x11283))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11281*x11282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11286=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11286.valid){
continue;
}
CheckValue<IkReal> x11287 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11286.value)))+(x11287.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11288=IKcos(j4);
IkReal x11289=IKsin(j4);
IkReal x11290=(gconst4*r11);
IkReal x11291=(gconst5*r10);
IkReal x11292=(gconst5*r00);
IkReal x11293=(gconst5*r20);
IkReal x11294=((1.0)*x11288);
IkReal x11295=(gconst4*x11288);
IkReal x11296=((1.0)*x11289);
IkReal x11297=(gconst4*x11289);
evalcond[0]=(((r01*x11295))+((r02*x11289))+(((-1.0)*x11292*x11294)));
evalcond[1]=((((-1.0)*r22*x11294))+((r21*x11297))+(((-1.0)*x11293*x11296)));
evalcond[2]=((((-1.0)*x11291*x11296))+((x11289*x11290))+(((-1.0)*r12*x11294)));
evalcond[3]=((1.0)+((r01*x11297))+(((-1.0)*r02*x11294))+(((-1.0)*x11292*x11296)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11291*x11294))+((cj1*sj2))+((x11288*x11290))+((r12*x11289)));
evalcond[5]=(((r22*x11289))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11295))+(((-1.0)*x11293*x11294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11298=((-1.0)*r21);
CheckValue<IkReal> x11301 = IKatan2WithCheck(IkReal(x11298),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11301.valid){
continue;
}
IkReal x11299=((1.0)*(x11301.value));
IkReal x11300=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11299)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11299)));
IkReal gconst4=(x11298*x11300);
IkReal gconst5=((1.0)*r20*x11300);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11302=((-1.0)*r21);
CheckValue<IkReal> x11305 = IKatan2WithCheck(IkReal(x11302),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11305.valid){
continue;
}
IkReal x11303=((1.0)*(x11305.value));
IkReal x11304=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11303)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11303)));
IkReal gconst4=(x11302*x11304);
IkReal gconst5=((1.0)*r20*x11304);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11306=((-1.0)*r21);
CheckValue<IkReal> x11309 = IKatan2WithCheck(IkReal(x11306),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11309.valid){
continue;
}
IkReal x11307=((1.0)*(x11309.value));
IkReal x11308=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11307)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11307)));
IkReal gconst4=(x11306*x11308);
IkReal gconst5=((1.0)*r20*x11308);
IkReal x11310=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11314=IKPowWithIntegerCheck(x11310,-1);
if(!x11314.valid){
continue;
}
IkReal x11311=x11314.value;
IkReal x11312=((1.0)*x11311);
IkReal x11313=((((-2.0)*r00*r01*r20*r21*x11311))+(((-1.0)*(r02*r02)))+(((-1.0)*x11312*(r00*r00)*(r20*r20)))+(((-1.0)*x11312*(r01*r01)*(r21*r21))));
j4eval[0]=x11313;
j4eval[1]=IKsign(x11313);
j4eval[2]=r02;
j4eval[3]=x11310;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11315=(gconst4*r01);
IkReal x11316=(gconst5*r00);
CheckValue<IkReal> x11317 = IKatan2WithCheck(IkReal((x11315+(((-1.0)*x11316)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11317.valid){
continue;
}
CheckValue<IkReal> x11318=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11315*x11315)))+(((-1.0)*(x11316*x11316)))+(((2.0)*x11315*x11316)))),-1);
if(!x11318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11317.value)+(((1.5707963267949)*(x11318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11319=IKcos(j4);
IkReal x11320=IKsin(j4);
IkReal x11321=(gconst5*r10);
IkReal x11322=(gconst5*r00);
IkReal x11323=(gconst5*r20);
IkReal x11324=((1.0)*x11319);
IkReal x11325=(gconst4*x11320);
IkReal x11326=(gconst4*x11319);
IkReal x11327=((1.0)*x11320);
evalcond[0]=((((-1.0)*x11322*x11324))+((r02*x11320))+((r01*x11326)));
evalcond[1]=((((-1.0)*r22*x11324))+((r21*x11325))+(((-1.0)*x11323*x11327)));
evalcond[2]=((((-1.0)*r12*x11324))+(((-1.0)*x11321*x11327))+((r11*x11325)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11324))+(((-1.0)*x11322*x11327))+((r01*x11325)));
evalcond[4]=(((cj2*sj1))+((r22*x11320))+((cj1*sj2))+((r21*x11326))+(((-1.0)*x11323*x11324)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11321*x11324))+((r12*x11320))+((r11*x11326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11328=((1.0)*gconst5);
CheckValue<IkReal> x11329 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11329.valid){
continue;
}
CheckValue<IkReal> x11330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11328))+(((-1.0)*gconst4*r20)))),-1);
if(!x11330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11329.value)+(((1.5707963267949)*(x11330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11331=IKcos(j4);
IkReal x11332=IKsin(j4);
IkReal x11333=(gconst5*r10);
IkReal x11334=(gconst5*r00);
IkReal x11335=(gconst5*r20);
IkReal x11336=((1.0)*x11331);
IkReal x11337=(gconst4*x11332);
IkReal x11338=(gconst4*x11331);
IkReal x11339=((1.0)*x11332);
evalcond[0]=((((-1.0)*x11334*x11336))+((r01*x11338))+((r02*x11332)));
evalcond[1]=((((-1.0)*r22*x11336))+(((-1.0)*x11335*x11339))+((r21*x11337)));
evalcond[2]=((((-1.0)*x11333*x11339))+(((-1.0)*r12*x11336))+((r11*x11337)));
evalcond[3]=((1.0)+(((-1.0)*x11334*x11339))+((r01*x11337))+(((-1.0)*r02*x11336)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11335*x11336))+((r22*x11332))+((r21*x11338)));
evalcond[5]=((((-1.0)*x11333*x11336))+((r11*x11338))+((r12*x11332))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11340=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11340.valid){
continue;
}
CheckValue<IkReal> x11341 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11340.value)))+(x11341.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11342=IKcos(j4);
IkReal x11343=IKsin(j4);
IkReal x11344=(gconst5*r10);
IkReal x11345=(gconst5*r00);
IkReal x11346=(gconst5*r20);
IkReal x11347=((1.0)*x11342);
IkReal x11348=(gconst4*x11343);
IkReal x11349=(gconst4*x11342);
IkReal x11350=((1.0)*x11343);
evalcond[0]=((((-1.0)*x11345*x11347))+((r01*x11349))+((r02*x11343)));
evalcond[1]=((((-1.0)*x11346*x11350))+(((-1.0)*r22*x11347))+((r21*x11348)));
evalcond[2]=(((r11*x11348))+(((-1.0)*x11344*x11350))+(((-1.0)*r12*x11347)));
evalcond[3]=((1.0)+(((-1.0)*x11345*x11350))+((r01*x11348))+(((-1.0)*r02*x11347)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11346*x11347))+((cj1*sj2))+((r22*x11343))+((r21*x11349)));
evalcond[5]=(((r11*x11349))+(((-1.0)*sj1*sj2))+((r12*x11343))+(((-1.0)*x11344*x11347))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11351=((-1.0)*r21);
CheckValue<IkReal> x11354 = IKatan2WithCheck(IkReal(x11351),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11354.valid){
continue;
}
IkReal x11352=((1.0)*(x11354.value));
IkReal x11353=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11352)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11352)));
IkReal gconst4=(x11351*x11353);
IkReal gconst5=((1.0)*r20*x11353);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11355=((-1.0)*r21);
CheckValue<IkReal> x11358 = IKatan2WithCheck(IkReal(x11355),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11358.valid){
continue;
}
IkReal x11356=((1.0)*(x11358.value));
IkReal x11357=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11356)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11356)));
IkReal gconst4=(x11355*x11357);
IkReal gconst5=((1.0)*r20*x11357);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11359=((-1.0)*r21);
CheckValue<IkReal> x11362 = IKatan2WithCheck(IkReal(x11359),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11362.valid){
continue;
}
IkReal x11360=((1.0)*(x11362.value));
IkReal x11361=x10153;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11360)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11360)));
IkReal gconst4=(x11359*x11361);
IkReal gconst5=((1.0)*r20*x11361);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11363=(gconst5*r00);
IkReal x11364=(gconst4*r01);
CheckValue<IkReal> x11365=IKPowWithIntegerCheck(IKsign(((x11363*x11363)+(((-2.0)*x11363*x11364))+(r02*r02)+(x11364*x11364))),-1);
if(!x11365.valid){
continue;
}
CheckValue<IkReal> x11366 = IKatan2WithCheck(IkReal(((((-1.0)*x11364))+x11363)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11365.value)))+(x11366.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11367=IKsin(j4);
IkReal x11368=IKcos(j4);
IkReal x11369=(gconst4*r11);
IkReal x11370=(gconst5*r10);
IkReal x11371=(gconst5*r00);
IkReal x11372=(gconst5*r20);
IkReal x11373=((1.0)*x11368);
IkReal x11374=(gconst4*x11367);
IkReal x11375=((1.0)*x11367);
evalcond[0]=(((r21*x11374))+(((-1.0)*r22*x11373))+(((-1.0)*x11372*x11375)));
evalcond[1]=((((-1.0)*x11370*x11375))+((x11367*x11369))+(((-1.0)*r12*x11373)));
evalcond[2]=((((-1.0)*gconst4*r01*x11373))+(((-1.0)*r02*x11375))+((x11368*x11371)));
evalcond[3]=((1.0)+((r01*x11374))+(((-1.0)*r02*x11373))+(((-1.0)*x11371*x11375)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11375))+((cj1*sj2))+((x11368*x11372))+(((-1.0)*gconst4*r21*x11373)));
evalcond[5]=((((-1.0)*x11369*x11373))+(((-1.0)*sj1*sj2))+((x11368*x11370))+(((-1.0)*r12*x11375))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11376=((1.0)*gconst5);
CheckValue<IkReal> x11377=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11376))+(((-1.0)*gconst4*r20)))),-1);
if(!x11377.valid){
continue;
}
CheckValue<IkReal> x11378 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11376))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11377.value)))+(x11378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11379=IKsin(j4);
IkReal x11380=IKcos(j4);
IkReal x11381=(gconst4*r11);
IkReal x11382=(gconst5*r10);
IkReal x11383=(gconst5*r00);
IkReal x11384=(gconst5*r20);
IkReal x11385=((1.0)*x11380);
IkReal x11386=(gconst4*x11379);
IkReal x11387=((1.0)*x11379);
evalcond[0]=((((-1.0)*r22*x11385))+(((-1.0)*x11384*x11387))+((r21*x11386)));
evalcond[1]=((((-1.0)*x11382*x11387))+((x11379*x11381))+(((-1.0)*r12*x11385)));
evalcond[2]=(((x11380*x11383))+(((-1.0)*r02*x11387))+(((-1.0)*gconst4*r01*x11385)));
evalcond[3]=((1.0)+(((-1.0)*x11383*x11387))+((r01*x11386))+(((-1.0)*r02*x11385)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x11385))+((cj1*sj2))+((x11380*x11384))+(((-1.0)*r22*x11387)));
evalcond[5]=((((-1.0)*x11381*x11385))+(((-1.0)*sj1*sj2))+((x11380*x11382))+(((-1.0)*r12*x11387))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11388=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11388.valid){
continue;
}
CheckValue<IkReal> x11389 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11388.value)))+(x11389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11390=IKsin(j4);
IkReal x11391=IKcos(j4);
IkReal x11392=(gconst4*r11);
IkReal x11393=(gconst5*r10);
IkReal x11394=(gconst5*r00);
IkReal x11395=(gconst5*r20);
IkReal x11396=((1.0)*x11391);
IkReal x11397=(gconst4*x11390);
IkReal x11398=((1.0)*x11390);
evalcond[0]=((((-1.0)*r22*x11396))+((r21*x11397))+(((-1.0)*x11395*x11398)));
evalcond[1]=((((-1.0)*x11393*x11398))+((x11390*x11392))+(((-1.0)*r12*x11396)));
evalcond[2]=((((-1.0)*gconst4*r01*x11396))+((x11391*x11394))+(((-1.0)*r02*x11398)));
evalcond[3]=((1.0)+((r01*x11397))+(((-1.0)*r02*x11396))+(((-1.0)*x11394*x11398)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11396))+((x11391*x11395))+(((-1.0)*r22*x11398)));
evalcond[5]=((((-1.0)*x11392*x11396))+(((-1.0)*sj1*sj2))+((x11391*x11393))+((cj1*cj2))+(((-1.0)*r12*x11398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11399=((-1.0)*r21);
IkReal x11400=((-1.0)*r20);
CheckValue<IkReal> x11402 = IKatan2WithCheck(IkReal(x11399),IkReal(x11400),IKFAST_ATAN2_MAGTHRESH);
if(!x11402.valid){
continue;
}
IkReal x11401=((1.0)*(x11402.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11401)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11400);
rxp0_2=(py*r00);
rxp1_0=(py*x11399);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11401)));
IkReal gconst4=x11399;
IkReal gconst5=((1.0)*r20);
IkReal x11403=((1.0)*r01*r21);
IkReal x11404=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11404))+(((-1.0)*x11403)));
j4eval[1]=((((-1.0)*cj3*x11403))+(((-1.0)*cj3*x11404)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11405=((-1.0)*r21);
IkReal x11406=((-1.0)*r20);
CheckValue<IkReal> x11408 = IKatan2WithCheck(IkReal(x11405),IkReal(x11406),IKFAST_ATAN2_MAGTHRESH);
if(!x11408.valid){
continue;
}
IkReal x11407=((1.0)*(x11408.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11407)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11406);
rxp0_2=(py*r00);
rxp1_0=(py*x11405);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11407)));
IkReal gconst4=x11405;
IkReal gconst5=((1.0)*r20);
IkReal x11409=((1.0)*r01*r21);
IkReal x11410=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11409))+(((-1.0)*x11410)));
j4eval[1]=(((sj3*x11409))+((sj3*x11410)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11411=((-1.0)*r21);
IkReal x11412=((-1.0)*r20);
CheckValue<IkReal> x11414 = IKatan2WithCheck(IkReal(x11411),IkReal(x11412),IKFAST_ATAN2_MAGTHRESH);
if(!x11414.valid){
continue;
}
IkReal x11413=((1.0)*(x11414.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11413)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11412);
rxp0_2=(py*r00);
rxp1_0=(py*x11411);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11413)));
IkReal gconst4=x11411;
IkReal gconst5=((1.0)*r20);
IkReal x11415=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x11415))+(((-1.0)*r00*r20*x11415)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11416=((1.0)*gconst5);
CheckValue<IkReal> x11417=IKPowWithIntegerCheck(cj3,-1);
if(!x11417.valid){
continue;
}
CheckValue<IkReal> x11418=IKPowWithIntegerCheck(r12,-1);
if(!x11418.valid){
continue;
}
CheckValue<IkReal> x11419=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11416))+((cj3*gconst4*r01))),-1);
if(!x11419.valid){
continue;
}
if( IKabs(((x11417.value)*(x11418.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11419.value)*(((((-1.0)*r01*sj3*x11416))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11417.value)*(x11418.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11419.value)*(((((-1.0)*r01*sj3*x11416))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11417.value)*(x11418.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11419.value)*(((((-1.0)*r01*sj3*x11416))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11420=IKsin(j4);
IkReal x11421=IKcos(j4);
IkReal x11422=(cj2*sj1);
IkReal x11423=(cj1*sj2);
IkReal x11424=(sj1*sj2);
IkReal x11425=(gconst5*sj3);
IkReal x11426=(gconst5*r00);
IkReal x11427=(cj3*gconst5);
IkReal x11428=(gconst4*sj3);
IkReal x11429=(cj3*gconst4);
IkReal x11430=(cj1*cj2);
IkReal x11431=((1.0)*x11420);
IkReal x11432=(gconst4*x11420);
IkReal x11433=((1.0)*x11421);
IkReal x11434=(x11423+x11422);
IkReal x11435=(x11421*x11425);
IkReal x11436=(x11421*x11429);
evalcond[0]=((-1.0)*r12*x11421);
evalcond[1]=(((r21*x11432))+(((-1.0)*gconst5*r20*x11431)));
evalcond[2]=(x11430+((cj3*r12*x11420))+(((-1.0)*x11424)));
evalcond[3]=(x11434+(((-1.0)*r12*sj3*x11431)));
evalcond[4]=((1.0)+(((-1.0)*x11426*x11431))+((r01*x11432)));
evalcond[5]=((((-1.0)*cj3*x11426*x11433))+((r01*x11436))+((r01*x11425))+((r00*x11428)));
evalcond[6]=((((-1.0)*r01*x11428*x11433))+((r01*x11427))+((r00*x11429))+((r00*x11435)));
evalcond[7]=(((r20*x11428))+x11434+((r21*x11425))+((r21*x11436))+(((-1.0)*r20*x11427*x11433)));
evalcond[8]=((((-1.0)*r21*x11428*x11433))+((r20*x11435))+((r20*x11429))+x11424+((r21*x11427))+(((-1.0)*x11430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11437=((1.0)*gconst4);
IkReal x11438=(gconst5*r00);
CheckValue<IkReal> x11439=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11438))),-1);
if(!x11439.valid){
continue;
}
CheckValue<IkReal> x11440=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11437))+((sj3*x11438))),-1);
if(!x11440.valid){
continue;
}
if( IKabs(((-1.0)*(x11439.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11440.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11437)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11439.value)))+IKsqr(((x11440.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11437))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11439.value)), ((x11440.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11437))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11441=IKsin(j4);
IkReal x11442=IKcos(j4);
IkReal x11443=(cj2*sj1);
IkReal x11444=(cj1*sj2);
IkReal x11445=(sj1*sj2);
IkReal x11446=(gconst5*sj3);
IkReal x11447=(gconst5*r00);
IkReal x11448=(cj3*gconst5);
IkReal x11449=(gconst4*sj3);
IkReal x11450=(cj3*gconst4);
IkReal x11451=(cj1*cj2);
IkReal x11452=((1.0)*x11441);
IkReal x11453=(gconst4*x11441);
IkReal x11454=((1.0)*x11442);
IkReal x11455=(x11443+x11444);
IkReal x11456=(x11442*x11446);
IkReal x11457=(x11442*x11450);
evalcond[0]=((-1.0)*r12*x11442);
evalcond[1]=(((r21*x11453))+(((-1.0)*gconst5*r20*x11452)));
evalcond[2]=((((-1.0)*x11445))+((cj3*r12*x11441))+x11451);
evalcond[3]=(x11455+(((-1.0)*r12*sj3*x11452)));
evalcond[4]=((1.0)+((r01*x11453))+(((-1.0)*x11447*x11452)));
evalcond[5]=(((r00*x11449))+((r01*x11457))+((r01*x11446))+(((-1.0)*cj3*x11447*x11454)));
evalcond[6]=(((r00*x11450))+((r00*x11456))+(((-1.0)*r01*x11449*x11454))+((r01*x11448)));
evalcond[7]=(x11455+(((-1.0)*r20*x11448*x11454))+((r21*x11457))+((r20*x11449))+((r21*x11446)));
evalcond[8]=(x11445+((r20*x11450))+((r20*x11456))+(((-1.0)*x11451))+(((-1.0)*r21*x11449*x11454))+((r21*x11448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11458=((1.0)*gconst5);
IkReal x11459=(gconst4*r01);
CheckValue<IkReal> x11460=IKPowWithIntegerCheck(((((-1.0)*r00*x11458))+x11459),-1);
if(!x11460.valid){
continue;
}
CheckValue<IkReal> x11461=IKPowWithIntegerCheck((((cj3*x11459))+(((-1.0)*cj3*r00*x11458))),-1);
if(!x11461.valid){
continue;
}
if( IKabs(((-1.0)*(x11460.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11461.value)*(((((-1.0)*r01*sj3*x11458))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11460.value)))+IKsqr(((x11461.value)*(((((-1.0)*r01*sj3*x11458))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11460.value)), ((x11461.value)*(((((-1.0)*r01*sj3*x11458))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11462=IKsin(j4);
IkReal x11463=IKcos(j4);
IkReal x11464=(cj2*sj1);
IkReal x11465=(cj1*sj2);
IkReal x11466=(sj1*sj2);
IkReal x11467=(gconst5*sj3);
IkReal x11468=(gconst5*r00);
IkReal x11469=(cj3*gconst5);
IkReal x11470=(gconst4*sj3);
IkReal x11471=(cj3*gconst4);
IkReal x11472=(cj1*cj2);
IkReal x11473=((1.0)*x11462);
IkReal x11474=(gconst4*x11462);
IkReal x11475=((1.0)*x11463);
IkReal x11476=(x11465+x11464);
IkReal x11477=(x11463*x11467);
IkReal x11478=(x11463*x11471);
evalcond[0]=((-1.0)*r12*x11463);
evalcond[1]=((((-1.0)*gconst5*r20*x11473))+((r21*x11474)));
evalcond[2]=(x11472+((cj3*r12*x11462))+(((-1.0)*x11466)));
evalcond[3]=(x11476+(((-1.0)*r12*sj3*x11473)));
evalcond[4]=((1.0)+(((-1.0)*x11468*x11473))+((r01*x11474)));
evalcond[5]=(((r00*x11470))+((r01*x11467))+(((-1.0)*cj3*x11468*x11475))+((r01*x11478)));
evalcond[6]=(((r00*x11477))+((r00*x11471))+((r01*x11469))+(((-1.0)*r01*x11470*x11475)));
evalcond[7]=(x11476+(((-1.0)*r20*x11469*x11475))+((r20*x11470))+((r21*x11478))+((r21*x11467)));
evalcond[8]=((((-1.0)*x11472))+x11466+(((-1.0)*r21*x11470*x11475))+((r20*x11477))+((r20*x11471))+((r21*x11469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11479=gconst4*gconst4;
IkReal x11480=gconst5*gconst5;
IkReal x11481=(r01*r20);
IkReal x11482=(gconst4*sj3);
IkReal x11483=(r01*r21);
IkReal x11484=((1.0)*cj3);
IkReal x11485=(r00*r21);
IkReal x11486=(r00*r20);
IkReal x11487=(cj3*gconst4*gconst5);
IkReal x11488=((1.0)*x11480);
CheckValue<IkReal> x11489=IKPowWithIntegerCheck(IKsign((((x11481*x11487))+(((-1.0)*x11479*x11483*x11484))+(((-1.0)*r02*r22*x11484))+(((-1.0)*x11480*x11484*x11486))+((x11485*x11487)))),-1);
if(!x11489.valid){
continue;
}
CheckValue<IkReal> x11490 = IKatan2WithCheck(IkReal((((r00*r22*x11482))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11482*x11483))+(((-1.0)*sj3*x11481*x11488))+((sj3*x11479*x11485))+(((-1.0)*gconst5*x11482*x11486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11489.value)))+(x11490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11491=IKsin(j4);
IkReal x11492=IKcos(j4);
IkReal x11493=(cj2*sj1);
IkReal x11494=(cj1*sj2);
IkReal x11495=(gconst5*sj3);
IkReal x11496=(gconst4*r11);
IkReal x11497=(sj1*sj2);
IkReal x11498=(gconst5*r10);
IkReal x11499=(cj1*cj2);
IkReal x11500=(gconst4*r01);
IkReal x11501=(gconst5*r00);
IkReal x11502=(gconst4*sj3);
IkReal x11503=(cj3*gconst5);
IkReal x11504=(cj3*gconst4);
IkReal x11505=(gconst4*r21);
IkReal x11506=((1.0)*x11492);
IkReal x11507=((1.0)*x11491);
IkReal x11508=(cj3*x11491);
IkReal x11509=(cj3*x11492);
IkReal x11510=(x11493+x11494);
evalcond[0]=((((-1.0)*gconst5*r20*x11507))+((x11491*x11505))+(((-1.0)*r22*x11506)));
evalcond[1]=((((-1.0)*x11498*x11507))+(((-1.0)*r12*x11506))+((x11491*x11496)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11506))+(((-1.0)*x11501*x11507))+((x11491*x11500)));
evalcond[3]=(((x11500*x11509))+(((-1.0)*cj3*x11501*x11506))+((r00*x11502))+((r01*x11495))+((r02*x11508)));
evalcond[4]=((((-1.0)*r02*sj3*x11507))+(((-1.0)*sj3*x11500*x11506))+((r00*x11504))+((r01*x11503))+((r00*x11492*x11495)));
evalcond[5]=(x11510+((r21*x11495))+((r21*x11492*x11504))+(((-1.0)*r20*x11503*x11506))+((r20*x11502))+((r22*x11508)));
evalcond[6]=(x11499+(((-1.0)*cj3*x11498*x11506))+((x11496*x11509))+((r12*x11508))+((r11*x11495))+((r10*x11502))+(((-1.0)*x11497)));
evalcond[7]=((((-1.0)*r12*sj3*x11507))+x11510+(((-1.0)*sj3*x11496*x11506))+((r11*x11503))+((r10*x11504))+((r10*x11492*x11495)));
evalcond[8]=(x11497+((r21*x11503))+((r20*x11492*x11495))+(((-1.0)*r21*x11502*x11506))+((r20*x11504))+(((-1.0)*r22*sj3*x11507))+(((-1.0)*x11499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11511=((1.0)*gconst5);
CheckValue<IkReal> x11512 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11512.valid){
continue;
}
CheckValue<IkReal> x11513=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11511))+(((-1.0)*gconst4*r20)))),-1);
if(!x11513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11512.value)+(((1.5707963267949)*(x11513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11514=IKsin(j4);
IkReal x11515=IKcos(j4);
IkReal x11516=(cj2*sj1);
IkReal x11517=(cj1*sj2);
IkReal x11518=(gconst5*sj3);
IkReal x11519=(gconst4*r11);
IkReal x11520=(sj1*sj2);
IkReal x11521=(gconst5*r10);
IkReal x11522=(cj1*cj2);
IkReal x11523=(gconst4*r01);
IkReal x11524=(gconst5*r00);
IkReal x11525=(gconst4*sj3);
IkReal x11526=(cj3*gconst5);
IkReal x11527=(cj3*gconst4);
IkReal x11528=(gconst4*r21);
IkReal x11529=((1.0)*x11515);
IkReal x11530=((1.0)*x11514);
IkReal x11531=(cj3*x11514);
IkReal x11532=(cj3*x11515);
IkReal x11533=(x11517+x11516);
evalcond[0]=((((-1.0)*gconst5*r20*x11530))+((x11514*x11528))+(((-1.0)*r22*x11529)));
evalcond[1]=((((-1.0)*x11521*x11530))+((x11514*x11519))+(((-1.0)*r12*x11529)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11529))+((x11514*x11523))+(((-1.0)*x11524*x11530)));
evalcond[3]=((((-1.0)*cj3*x11524*x11529))+((r01*x11518))+((r00*x11525))+((x11523*x11532))+((r02*x11531)));
evalcond[4]=((((-1.0)*r02*sj3*x11530))+(((-1.0)*sj3*x11523*x11529))+((r01*x11526))+((r00*x11527))+((r00*x11515*x11518)));
evalcond[5]=(((r22*x11531))+x11533+((r20*x11525))+((r21*x11518))+((r21*x11515*x11527))+(((-1.0)*r20*x11526*x11529)));
evalcond[6]=(x11522+((r12*x11531))+((x11519*x11532))+(((-1.0)*cj3*x11521*x11529))+((r10*x11525))+(((-1.0)*x11520))+((r11*x11518)));
evalcond[7]=((((-1.0)*r12*sj3*x11530))+x11533+((r10*x11515*x11518))+(((-1.0)*sj3*x11519*x11529))+((r11*x11526))+((r10*x11527)));
evalcond[8]=(((r20*x11515*x11518))+x11520+((r21*x11526))+((r20*x11527))+(((-1.0)*r22*sj3*x11530))+(((-1.0)*x11522))+(((-1.0)*r21*x11525*x11529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11534=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11534.valid){
continue;
}
CheckValue<IkReal> x11535 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11534.value)))+(x11535.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11536=IKsin(j4);
IkReal x11537=IKcos(j4);
IkReal x11538=(cj2*sj1);
IkReal x11539=(cj1*sj2);
IkReal x11540=(gconst5*sj3);
IkReal x11541=(gconst4*r11);
IkReal x11542=(sj1*sj2);
IkReal x11543=(gconst5*r10);
IkReal x11544=(cj1*cj2);
IkReal x11545=(gconst4*r01);
IkReal x11546=(gconst5*r00);
IkReal x11547=(gconst4*sj3);
IkReal x11548=(cj3*gconst5);
IkReal x11549=(cj3*gconst4);
IkReal x11550=(gconst4*r21);
IkReal x11551=((1.0)*x11537);
IkReal x11552=((1.0)*x11536);
IkReal x11553=(cj3*x11536);
IkReal x11554=(cj3*x11537);
IkReal x11555=(x11539+x11538);
evalcond[0]=((((-1.0)*gconst5*r20*x11552))+((x11536*x11550))+(((-1.0)*r22*x11551)));
evalcond[1]=((((-1.0)*r12*x11551))+(((-1.0)*x11543*x11552))+((x11536*x11541)));
evalcond[2]=((1.0)+(((-1.0)*x11546*x11552))+(((-1.0)*r02*x11551))+((x11536*x11545)));
evalcond[3]=(((r00*x11547))+((r01*x11540))+((r02*x11553))+(((-1.0)*cj3*x11546*x11551))+((x11545*x11554)));
evalcond[4]=(((r00*x11549))+((r01*x11548))+(((-1.0)*sj3*x11545*x11551))+((r00*x11537*x11540))+(((-1.0)*r02*sj3*x11552)));
evalcond[5]=(((r21*x11537*x11549))+x11555+((r22*x11553))+(((-1.0)*r20*x11548*x11551))+((r20*x11547))+((r21*x11540)));
evalcond[6]=(((r12*x11553))+(((-1.0)*cj3*x11543*x11551))+((r10*x11547))+x11544+((x11541*x11554))+(((-1.0)*x11542))+((r11*x11540)));
evalcond[7]=((((-1.0)*r12*sj3*x11552))+((r10*x11549))+x11555+((r11*x11548))+(((-1.0)*sj3*x11541*x11551))+((r10*x11537*x11540)));
evalcond[8]=((((-1.0)*r22*sj3*x11552))+x11542+(((-1.0)*x11544))+((r20*x11549))+((r20*x11537*x11540))+(((-1.0)*r21*x11547*x11551))+((r21*x11548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11556=((-1.0)*r21);
IkReal x11557=((-1.0)*px);
CheckValue<IkReal> x11559 = IKatan2WithCheck(IkReal(x11556),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11559.valid){
continue;
}
IkReal x11558=((1.0)*(x11559.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11558)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11557);
rxp1_1=(px*r21);
rxp1_2=(r11*x11557);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11558)));
IkReal gconst4=x11556;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11560=((-1.0)*r21);
IkReal x11561=((-1.0)*px);
CheckValue<IkReal> x11563 = IKatan2WithCheck(IkReal(x11560),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11563.valid){
continue;
}
IkReal x11562=((1.0)*(x11563.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11562)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11561);
rxp1_1=(px*r21);
rxp1_2=(r11*x11561);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11562)));
IkReal gconst4=x11560;
IkReal gconst5=((1.0)*r20);
IkReal x11564=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=(((x11564*(r10*r10)))+(((-1.0)*x11564))+(((-1.0)*x11564*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11565=((-1.0)*r21);
IkReal x11566=((-1.0)*px);
CheckValue<IkReal> x11568 = IKatan2WithCheck(IkReal(x11565),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11568.valid){
continue;
}
IkReal x11567=((1.0)*(x11568.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11567)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11566);
rxp1_1=(px*r21);
rxp1_2=(r11*x11566);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11567)));
IkReal gconst4=x11565;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11569=((-1.0)*r21);
IkReal x11570=((-1.0)*px);
CheckValue<IkReal> x11572 = IKatan2WithCheck(IkReal(x11569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11572.valid){
continue;
}
IkReal x11571=((1.0)*(x11572.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11571)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11570);
rxp1_1=(px*r21);
rxp1_2=(r11*x11570);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11571)));
IkReal gconst4=x11569;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11573=((-1.0)*r21);
IkReal x11574=((-1.0)*px);
CheckValue<IkReal> x11576 = IKatan2WithCheck(IkReal(x11573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11576.valid){
continue;
}
IkReal x11575=((1.0)*(x11576.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11575)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11574);
rxp1_1=(px*r21);
rxp1_2=(r11*x11574);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11575)));
IkReal gconst4=x11573;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11577=((-1.0)*r21);
IkReal x11578=((-1.0)*px);
CheckValue<IkReal> x11580 = IKatan2WithCheck(IkReal(x11577),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11580.valid){
continue;
}
IkReal x11579=((1.0)*(x11580.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11579)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11578);
rxp1_1=(px*r21);
rxp1_2=(r11*x11578);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11579)));
IkReal gconst4=x11577;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11583=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11583.valid){
continue;
}
IkReal x11581=x11583.value;
IkReal x11582=(sj0*x11581);
cj4array[0]=(((cj2*sj1*x11582))+((cj1*sj2*x11582)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11584=IKsin(j4);
IkReal x11585=IKcos(j4);
IkReal x11586=(gconst5*r20);
IkReal x11587=(gconst4*x11584);
IkReal x11588=((1.0)*x11585);
IkReal x11589=((1.0)*x11584);
evalcond[0]=((-1.0)*r02*x11584);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11588)));
evalcond[2]=((((-1.0)*x11586*x11589))+((r21*x11587)));
evalcond[3]=((((-1.0)*gconst5*r10*x11589))+((r11*x11587)));
evalcond[4]=(((x11585*x11586))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11591=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11591.valid){
continue;
}
IkReal x11590=x11591.value;
cj4array[0]=(((cj1*cj2*x11590))+(((-1.0)*sj1*sj2*x11590)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11592=IKsin(j4);
IkReal x11593=IKcos(j4);
IkReal x11594=(gconst5*r10);
IkReal x11595=((1.0)*sj0);
IkReal x11596=(gconst4*x11592);
IkReal x11597=((1.0)*x11593);
IkReal x11598=((1.0)*x11592);
evalcond[0]=((-1.0)*r02*x11592);
evalcond[1]=((((-1.0)*x11595))+(((-1.0)*r02*x11597)));
evalcond[2]=((((-1.0)*gconst5*r20*x11598))+((r21*x11596)));
evalcond[3]=((((-1.0)*x11594*x11598))+((r11*x11596)));
evalcond[4]=((((-1.0)*cj2*sj1*x11595))+(((-1.0)*gconst4*r11*x11597))+(((-1.0)*cj1*sj2*x11595))+((x11593*x11594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11599=IKPowWithIntegerCheck(r02,-1);
if(!x11599.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11599.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11600=IKsin(j4);
IkReal x11601=IKcos(j4);
IkReal x11602=((1.0)*sj0);
IkReal x11603=(gconst5*x11601);
IkReal x11604=(gconst4*x11600);
IkReal x11605=((1.0)*gconst4*x11601);
IkReal x11606=((1.0)*gconst5*x11600);
evalcond[0]=((-1.0)*r02*x11600);
evalcond[1]=((((-1.0)*r20*x11606))+((r21*x11604)));
evalcond[2]=((((-1.0)*r10*x11606))+((r11*x11604)));
evalcond[3]=((((-1.0)*r21*x11605))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11603)));
evalcond[4]=((((-1.0)*r11*x11605))+(((-1.0)*cj1*sj2*x11602))+(((-1.0)*cj2*sj1*x11602))+((r10*x11603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11607=((-1.0)*r21);
IkReal x11608=((-1.0)*px);
CheckValue<IkReal> x11610 = IKatan2WithCheck(IkReal(x11607),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11610.valid){
continue;
}
IkReal x11609=((1.0)*(x11610.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11609)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11608);
rxp1_1=(px*r21);
rxp1_2=(r11*x11608);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11609)));
IkReal gconst4=x11607;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11611=((-1.0)*r21);
IkReal x11612=((-1.0)*px);
CheckValue<IkReal> x11614 = IKatan2WithCheck(IkReal(x11611),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11614.valid){
continue;
}
IkReal x11613=((1.0)*(x11614.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11613)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11612);
rxp1_1=(px*r21);
rxp1_2=(r11*x11612);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11613)));
IkReal gconst4=x11611;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11615=((-1.0)*r21);
IkReal x11616=((-1.0)*px);
CheckValue<IkReal> x11618 = IKatan2WithCheck(IkReal(x11615),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11618.valid){
continue;
}
IkReal x11617=((1.0)*(x11618.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11617)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11616);
rxp1_1=(px*r21);
rxp1_2=(r11*x11616);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11617)));
IkReal gconst4=x11615;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11621=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11621.valid){
continue;
}
IkReal x11619=x11621.value;
IkReal x11620=(sj0*x11619);
cj4array[0]=(((cj2*sj1*x11620))+((cj1*sj2*x11620)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11622=IKsin(j4);
IkReal x11623=IKcos(j4);
IkReal x11624=(gconst5*r20);
IkReal x11625=(gconst4*x11622);
IkReal x11626=((1.0)*x11623);
IkReal x11627=((1.0)*x11622);
evalcond[0]=(r02*x11622);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11626)));
evalcond[2]=(((r21*x11625))+(((-1.0)*x11624*x11627)));
evalcond[3]=(((r11*x11625))+(((-1.0)*gconst5*r10*x11627)));
evalcond[4]=(((gconst4*r21*x11623))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11624*x11626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11629=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11629.valid){
continue;
}
IkReal x11628=x11629.value;
cj4array[0]=(((cj1*cj2*x11628))+(((-1.0)*sj1*sj2*x11628)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11630=IKsin(j4);
IkReal x11631=IKcos(j4);
IkReal x11632=(gconst4*r11);
IkReal x11633=((1.0)*sj0);
IkReal x11634=(gconst5*r10);
IkReal x11635=((1.0)*x11631);
IkReal x11636=((1.0)*x11630);
evalcond[0]=(r02*x11630);
evalcond[1]=((((-1.0)*x11633))+(((-1.0)*r02*x11635)));
evalcond[2]=(((gconst4*r21*x11630))+(((-1.0)*gconst5*r20*x11636)));
evalcond[3]=((((-1.0)*x11634*x11636))+((x11630*x11632)));
evalcond[4]=((((-1.0)*x11634*x11635))+((x11631*x11632))+(((-1.0)*cj1*sj2*x11633))+(((-1.0)*cj2*sj1*x11633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11637=IKPowWithIntegerCheck(r02,-1);
if(!x11637.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11637.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11638=IKsin(j4);
IkReal x11639=IKcos(j4);
IkReal x11640=(gconst4*r11);
IkReal x11641=((1.0)*cj1);
IkReal x11642=(gconst4*r21);
IkReal x11643=((1.0)*gconst5*x11639);
IkReal x11644=((1.0)*gconst5*x11638);
evalcond[0]=(r02*x11638);
evalcond[1]=((((-1.0)*r20*x11644))+((x11638*x11642)));
evalcond[2]=((((-1.0)*r10*x11644))+((x11638*x11640)));
evalcond[3]=(((sj1*sj2))+((x11639*x11642))+(((-1.0)*r20*x11643))+(((-1.0)*cj2*x11641)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11643))+(((-1.0)*sj0*sj2*x11641))+((x11639*x11640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11646=IKPowWithIntegerCheck(r02,-1);
if(!x11646.valid){
continue;
}
IkReal x11645=x11646.value;
CheckValue<IkReal> x11647=IKPowWithIntegerCheck(cj3,-1);
if(!x11647.valid){
continue;
}
if( IKabs((x11645*(x11647.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11645)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11645*(x11647.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11645))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11645*(x11647.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11645));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11648=IKsin(j4);
IkReal x11649=IKcos(j4);
IkReal x11650=(gconst5*sj3);
IkReal x11651=(gconst4*r11);
IkReal x11652=(sj1*sj2);
IkReal x11653=((1.0)*gconst5);
IkReal x11654=(cj2*sj1);
IkReal x11655=((1.0)*sj0);
IkReal x11656=((1.0)*cj0);
IkReal x11657=(gconst4*r21);
IkReal x11658=(cj1*sj2);
IkReal x11659=(cj3*gconst4);
IkReal x11660=(gconst4*sj3);
IkReal x11661=(cj3*gconst5);
IkReal x11662=(r20*x11649);
IkReal x11663=((1.0)*cj1*cj2);
IkReal x11664=(r10*x11649);
IkReal x11665=(cj3*x11649);
IkReal x11666=(r02*x11648);
IkReal x11667=((1.0)*sj3*x11649);
evalcond[0]=((((-1.0)*x11655))+(((-1.0)*r02*x11649)));
evalcond[1]=(((x11648*x11657))+(((-1.0)*r20*x11648*x11653)));
evalcond[2]=(cj0+(((-1.0)*r10*x11648*x11653))+((x11648*x11651)));
evalcond[3]=((((-1.0)*cj1*cj2*x11656))+((cj0*x11652))+((cj3*x11666)));
evalcond[4]=((((-1.0)*x11656*x11658))+(((-1.0)*x11654*x11656))+(((-1.0)*sj3*x11666)));
evalcond[5]=(x11658+x11654+((r20*x11660))+(((-1.0)*cj3*x11653*x11662))+((r21*x11650))+((x11657*x11665)));
evalcond[6]=(((r21*x11661))+((x11650*x11662))+x11652+((r20*x11659))+(((-1.0)*x11663))+(((-1.0)*x11657*x11667)));
evalcond[7]=((((-1.0)*cj1*cj2*x11655))+((r11*x11650))+(((-1.0)*cj3*x11653*x11664))+((sj0*x11652))+((r10*x11660))+((x11651*x11665)));
evalcond[8]=(((x11650*x11664))+((r10*x11659))+(((-1.0)*x11654*x11655))+(((-1.0)*x11655*x11658))+(((-1.0)*x11651*x11667))+((r11*x11661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11668=((1.0)*gconst5);
CheckValue<IkReal> x11669=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11668))),-1);
if(!x11669.valid){
continue;
}
CheckValue<IkReal> x11670=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11668))),-1);
if(!x11670.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11669.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11670.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11668)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11669.value)))+IKsqr(((x11670.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11668))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11669.value)), ((x11670.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11668))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11671=IKsin(j4);
IkReal x11672=IKcos(j4);
IkReal x11673=(gconst5*sj3);
IkReal x11674=(gconst4*r11);
IkReal x11675=(sj1*sj2);
IkReal x11676=((1.0)*gconst5);
IkReal x11677=(cj2*sj1);
IkReal x11678=((1.0)*sj0);
IkReal x11679=((1.0)*cj0);
IkReal x11680=(gconst4*r21);
IkReal x11681=(cj1*sj2);
IkReal x11682=(cj3*gconst4);
IkReal x11683=(gconst4*sj3);
IkReal x11684=(cj3*gconst5);
IkReal x11685=(r20*x11672);
IkReal x11686=((1.0)*cj1*cj2);
IkReal x11687=(r10*x11672);
IkReal x11688=(cj3*x11672);
IkReal x11689=(r02*x11671);
IkReal x11690=((1.0)*sj3*x11672);
evalcond[0]=((((-1.0)*r02*x11672))+(((-1.0)*x11678)));
evalcond[1]=((((-1.0)*r20*x11671*x11676))+((x11671*x11680)));
evalcond[2]=(cj0+((x11671*x11674))+(((-1.0)*r10*x11671*x11676)));
evalcond[3]=(((cj0*x11675))+((cj3*x11689))+(((-1.0)*cj1*cj2*x11679)));
evalcond[4]=((((-1.0)*x11677*x11679))+(((-1.0)*x11679*x11681))+(((-1.0)*sj3*x11689)));
evalcond[5]=(x11681+x11677+((x11680*x11688))+(((-1.0)*cj3*x11676*x11685))+((r21*x11673))+((r20*x11683)));
evalcond[6]=(x11675+(((-1.0)*x11686))+((r21*x11684))+(((-1.0)*x11680*x11690))+((r20*x11682))+((x11673*x11685)));
evalcond[7]=(((r10*x11683))+((r11*x11673))+((sj0*x11675))+(((-1.0)*cj3*x11676*x11687))+(((-1.0)*cj1*cj2*x11678))+((x11674*x11688)));
evalcond[8]=((((-1.0)*x11677*x11678))+(((-1.0)*x11674*x11690))+((r11*x11684))+((r10*x11682))+(((-1.0)*x11678*x11681))+((x11673*x11687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11691=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11691.valid){
continue;
}
CheckValue<IkReal> x11692=IKPowWithIntegerCheck(r02,-1);
if(!x11692.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11691.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11692.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11691.value)))+IKsqr(((-1.0)*sj0*(x11692.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11691.value)), ((-1.0)*sj0*(x11692.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11693=IKsin(j4);
IkReal x11694=IKcos(j4);
IkReal x11695=(gconst5*sj3);
IkReal x11696=(gconst4*r11);
IkReal x11697=(sj1*sj2);
IkReal x11698=((1.0)*gconst5);
IkReal x11699=(cj2*sj1);
IkReal x11700=((1.0)*sj0);
IkReal x11701=((1.0)*cj0);
IkReal x11702=(gconst4*r21);
IkReal x11703=(cj1*sj2);
IkReal x11704=(cj3*gconst4);
IkReal x11705=(gconst4*sj3);
IkReal x11706=(cj3*gconst5);
IkReal x11707=(r20*x11694);
IkReal x11708=((1.0)*cj1*cj2);
IkReal x11709=(r10*x11694);
IkReal x11710=(cj3*x11694);
IkReal x11711=(r02*x11693);
IkReal x11712=((1.0)*sj3*x11694);
evalcond[0]=((((-1.0)*x11700))+(((-1.0)*r02*x11694)));
evalcond[1]=(((x11693*x11702))+(((-1.0)*r20*x11693*x11698)));
evalcond[2]=(cj0+((x11693*x11696))+(((-1.0)*r10*x11693*x11698)));
evalcond[3]=(((cj0*x11697))+((cj3*x11711))+(((-1.0)*cj1*cj2*x11701)));
evalcond[4]=((((-1.0)*x11701*x11703))+(((-1.0)*x11699*x11701))+(((-1.0)*sj3*x11711)));
evalcond[5]=(x11703+((x11702*x11710))+x11699+((r20*x11705))+(((-1.0)*cj3*x11698*x11707))+((r21*x11695)));
evalcond[6]=((((-1.0)*x11702*x11712))+x11697+((r21*x11706))+(((-1.0)*x11708))+((r20*x11704))+((x11695*x11707)));
evalcond[7]=(((r11*x11695))+((sj0*x11697))+((x11696*x11710))+(((-1.0)*cj1*cj2*x11700))+((r10*x11705))+(((-1.0)*cj3*x11698*x11709)));
evalcond[8]=((((-1.0)*x11696*x11712))+((r10*x11704))+(((-1.0)*x11700*x11703))+((r11*x11706))+(((-1.0)*x11699*x11700))+((x11695*x11709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11713=((1.0)*sj0);
IkReal x11714=((1.0)*gconst4);
CheckValue<IkReal> x11715 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11713))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst5*r00))+(((-1.0)*cj0*r01*x11714))+(((-1.0)*gconst4*r11*x11713))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11715.valid){
continue;
}
CheckValue<IkReal> x11716=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11714))+(((-1.0)*gconst5*r21)))),-1);
if(!x11716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11715.value)+(((1.5707963267949)*(x11716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11717=IKsin(j4);
IkReal x11718=IKcos(j4);
IkReal x11719=(gconst5*sj3);
IkReal x11720=(cj3*gconst5);
IkReal x11721=(gconst4*r11);
IkReal x11722=(sj1*sj2);
IkReal x11723=(cj2*sj1);
IkReal x11724=((1.0)*sj0);
IkReal x11725=(gconst4*r01);
IkReal x11726=(gconst4*r21);
IkReal x11727=((1.0)*cj0);
IkReal x11728=(cj1*sj2);
IkReal x11729=(gconst4*sj3);
IkReal x11730=(cj3*gconst4);
IkReal x11731=((1.0)*x11718);
IkReal x11732=((1.0)*cj1*cj2);
IkReal x11733=(cj3*x11717);
IkReal x11734=(cj3*x11718);
IkReal x11735=((1.0)*gconst5*x11717);
IkReal x11736=((1.0)*sj3*x11717);
evalcond[0]=((((-1.0)*r20*x11735))+(((-1.0)*r22*x11731))+((x11717*x11726)));
evalcond[1]=(cj0+(((-1.0)*r10*x11735))+(((-1.0)*r12*x11731))+((x11717*x11721)));
evalcond[2]=((((-1.0)*x11724))+(((-1.0)*r00*x11735))+(((-1.0)*r02*x11731))+((x11717*x11725)));
evalcond[3]=(x11723+x11728+((r20*x11729))+((r21*x11719))+(((-1.0)*r20*x11720*x11731))+((r22*x11733))+((x11726*x11734)));
evalcond[4]=(x11722+(((-1.0)*x11732))+(((-1.0)*sj3*x11726*x11731))+(((-1.0)*r22*x11736))+((r20*x11730))+((r20*x11718*x11719))+((r21*x11720)));
evalcond[5]=(((r01*x11719))+((r00*x11729))+((cj0*x11722))+(((-1.0)*r00*x11720*x11731))+((r02*x11733))+(((-1.0)*cj1*cj2*x11727))+((x11725*x11734)));
evalcond[6]=(((sj0*x11722))+(((-1.0)*r10*x11720*x11731))+((r10*x11729))+(((-1.0)*cj1*cj2*x11724))+((x11721*x11734))+((r12*x11733))+((r11*x11719)));
evalcond[7]=(((r00*x11718*x11719))+(((-1.0)*sj3*x11725*x11731))+((r00*x11730))+((r01*x11720))+(((-1.0)*x11723*x11727))+(((-1.0)*r02*x11736))+(((-1.0)*x11727*x11728)));
evalcond[8]=(((r10*x11718*x11719))+(((-1.0)*x11723*x11724))+(((-1.0)*x11724*x11728))+((r10*x11730))+(((-1.0)*r12*x11736))+(((-1.0)*sj3*x11721*x11731))+((r11*x11720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11737=((1.0)*gconst5);
CheckValue<IkReal> x11738 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11737))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11738.valid){
continue;
}
CheckValue<IkReal> x11739=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11737))+(((-1.0)*gconst4*r10)))),-1);
if(!x11739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11738.value)+(((1.5707963267949)*(x11739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11740=IKsin(j4);
IkReal x11741=IKcos(j4);
IkReal x11742=(gconst5*sj3);
IkReal x11743=(cj3*gconst5);
IkReal x11744=(gconst4*r11);
IkReal x11745=(sj1*sj2);
IkReal x11746=(cj2*sj1);
IkReal x11747=((1.0)*sj0);
IkReal x11748=(gconst4*r01);
IkReal x11749=(gconst4*r21);
IkReal x11750=((1.0)*cj0);
IkReal x11751=(cj1*sj2);
IkReal x11752=(gconst4*sj3);
IkReal x11753=(cj3*gconst4);
IkReal x11754=((1.0)*x11741);
IkReal x11755=((1.0)*cj1*cj2);
IkReal x11756=(cj3*x11740);
IkReal x11757=(cj3*x11741);
IkReal x11758=((1.0)*gconst5*x11740);
IkReal x11759=((1.0)*sj3*x11740);
evalcond[0]=((((-1.0)*r22*x11754))+((x11740*x11749))+(((-1.0)*r20*x11758)));
evalcond[1]=((((-1.0)*r12*x11754))+cj0+(((-1.0)*r10*x11758))+((x11740*x11744)));
evalcond[2]=((((-1.0)*x11747))+(((-1.0)*r02*x11754))+((x11740*x11748))+(((-1.0)*r00*x11758)));
evalcond[3]=(x11751+x11746+(((-1.0)*r20*x11743*x11754))+((x11749*x11757))+((r22*x11756))+((r21*x11742))+((r20*x11752)));
evalcond[4]=(x11745+((r20*x11741*x11742))+(((-1.0)*r22*x11759))+(((-1.0)*x11755))+((r21*x11743))+(((-1.0)*sj3*x11749*x11754))+((r20*x11753)));
evalcond[5]=((((-1.0)*cj1*cj2*x11750))+((r01*x11742))+((x11748*x11757))+((cj0*x11745))+(((-1.0)*r00*x11743*x11754))+((r02*x11756))+((r00*x11752)));
evalcond[6]=(((sj0*x11745))+((r10*x11752))+((r12*x11756))+((x11744*x11757))+(((-1.0)*r10*x11743*x11754))+(((-1.0)*cj1*cj2*x11747))+((r11*x11742)));
evalcond[7]=(((r01*x11743))+((r00*x11741*x11742))+(((-1.0)*r02*x11759))+(((-1.0)*x11746*x11750))+(((-1.0)*x11750*x11751))+(((-1.0)*sj3*x11748*x11754))+((r00*x11753)));
evalcond[8]=((((-1.0)*r12*x11759))+((r10*x11753))+(((-1.0)*x11746*x11747))+(((-1.0)*x11747*x11751))+((r10*x11741*x11742))+(((-1.0)*sj3*x11744*x11754))+((r11*x11743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11760=((1.0)*gconst5);
CheckValue<IkReal> x11761 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11760))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11761.valid){
continue;
}
CheckValue<IkReal> x11762=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11760)))),-1);
if(!x11762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11761.value)+(((1.5707963267949)*(x11762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11763=IKsin(j4);
IkReal x11764=IKcos(j4);
IkReal x11765=(gconst5*sj3);
IkReal x11766=(cj3*gconst5);
IkReal x11767=(gconst4*r11);
IkReal x11768=(sj1*sj2);
IkReal x11769=(cj2*sj1);
IkReal x11770=((1.0)*sj0);
IkReal x11771=(gconst4*r01);
IkReal x11772=(gconst4*r21);
IkReal x11773=((1.0)*cj0);
IkReal x11774=(cj1*sj2);
IkReal x11775=(gconst4*sj3);
IkReal x11776=(cj3*gconst4);
IkReal x11777=((1.0)*x11764);
IkReal x11778=((1.0)*cj1*cj2);
IkReal x11779=(cj3*x11763);
IkReal x11780=(cj3*x11764);
IkReal x11781=((1.0)*gconst5*x11763);
IkReal x11782=((1.0)*sj3*x11763);
evalcond[0]=((((-1.0)*r20*x11781))+((x11763*x11772))+(((-1.0)*r22*x11777)));
evalcond[1]=(((x11763*x11767))+cj0+(((-1.0)*r12*x11777))+(((-1.0)*r10*x11781)));
evalcond[2]=(((x11763*x11771))+(((-1.0)*r02*x11777))+(((-1.0)*r00*x11781))+(((-1.0)*x11770)));
evalcond[3]=((((-1.0)*r20*x11766*x11777))+x11774+x11769+((r20*x11775))+((x11772*x11780))+((r22*x11779))+((r21*x11765)));
evalcond[4]=(x11768+((r20*x11776))+((r20*x11764*x11765))+(((-1.0)*sj3*x11772*x11777))+(((-1.0)*r22*x11782))+(((-1.0)*x11778))+((r21*x11766)));
evalcond[5]=(((cj0*x11768))+(((-1.0)*r00*x11766*x11777))+((r02*x11779))+((x11771*x11780))+((r00*x11775))+((r01*x11765))+(((-1.0)*cj1*cj2*x11773)));
evalcond[6]=(((r11*x11765))+((r10*x11775))+((r12*x11779))+((x11767*x11780))+((sj0*x11768))+(((-1.0)*r10*x11766*x11777))+(((-1.0)*cj1*cj2*x11770)));
evalcond[7]=((((-1.0)*x11773*x11774))+((r00*x11764*x11765))+((r00*x11776))+(((-1.0)*x11769*x11773))+(((-1.0)*r02*x11782))+(((-1.0)*sj3*x11771*x11777))+((r01*x11766)));
evalcond[8]=(((r11*x11766))+((r10*x11776))+(((-1.0)*sj3*x11767*x11777))+(((-1.0)*r12*x11782))+((r10*x11764*x11765))+(((-1.0)*x11770*x11774))+(((-1.0)*x11769*x11770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11783=((-1.0)*r10);
IkReal x11785 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11785)==0){
continue;
}
IkReal x11784=pow(x11785,-0.5);
CheckValue<IkReal> x11786 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11783),IKFAST_ATAN2_MAGTHRESH);
if(!x11786.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11786.value));
IkReal gconst7=(r11*x11784);
IkReal gconst8=(x11783*x11784);
CheckValue<IkReal> x11787 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11787.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11787.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11788=((-1.0)*r10);
IkReal x11789=x11784;
CheckValue<IkReal> x11791 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11788),IKFAST_ATAN2_MAGTHRESH);
if(!x11791.valid){
continue;
}
IkReal x11790=((-1.0)*(x11791.value));
sj5=gconst7;
cj5=gconst8;
j5=x11790;
IkReal gconst6=x11790;
IkReal gconst7=(r11*x11789);
IkReal gconst8=(x11788*x11789);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11792=((1.0)*sj0);
IkReal x11793=((1.0)*gconst7);
CheckValue<IkReal> x11794 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11792))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11793))+(((-1.0)*gconst7*r11*x11792))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11794.valid){
continue;
}
CheckValue<IkReal> x11795=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11793))+(((-1.0)*gconst8*r21)))),-1);
if(!x11795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11794.value)+(((1.5707963267949)*(x11795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11796=IKsin(j4);
IkReal x11797=IKcos(j4);
IkReal x11798=(gconst7*sj3);
IkReal x11799=(cj3*gconst8);
IkReal x11800=(cj3*gconst7);
IkReal x11801=(sj1*sj2);
IkReal x11802=(cj2*sj1);
IkReal x11803=((1.0)*sj0);
IkReal x11804=((1.0)*cj0);
IkReal x11805=(gconst8*sj3);
IkReal x11806=(cj1*sj2);
IkReal x11807=((1.0)*x11797);
IkReal x11808=((1.0)*x11796);
IkReal x11809=((1.0)*cj1*cj2);
IkReal x11810=(cj3*x11796);
IkReal x11811=(gconst7*x11796);
IkReal x11812=(x11797*x11805);
evalcond[0]=(((r21*x11811))+(((-1.0)*gconst8*r20*x11808))+(((-1.0)*r22*x11807)));
evalcond[1]=((((-1.0)*gconst8*r10*x11808))+cj0+(((-1.0)*r12*x11807))+((r11*x11811)));
evalcond[2]=((((-1.0)*gconst8*r00*x11808))+((r01*x11811))+(((-1.0)*x11803))+(((-1.0)*r02*x11807)));
evalcond[3]=(((r21*x11805))+(((-1.0)*r20*x11799*x11807))+((r20*x11798))+((r22*x11810))+((r21*x11797*x11800))+x11802+x11806);
evalcond[4]=((((-1.0)*r21*x11798*x11807))+(((-1.0)*r22*sj3*x11808))+(((-1.0)*x11809))+((r20*x11800))+((r21*x11799))+((r20*x11812))+x11801);
evalcond[5]=((((-1.0)*r00*x11799*x11807))+((r02*x11810))+((r01*x11797*x11800))+((cj0*x11801))+(((-1.0)*cj1*cj2*x11804))+((r01*x11805))+((r00*x11798)));
evalcond[6]=(((r10*x11798))+((r11*x11797*x11800))+(((-1.0)*r10*x11799*x11807))+((r11*x11805))+((sj0*x11801))+(((-1.0)*cj1*cj2*x11803))+((r12*x11810)));
evalcond[7]=(((r00*x11800))+(((-1.0)*x11802*x11804))+(((-1.0)*r02*sj3*x11808))+((r00*x11812))+(((-1.0)*r01*x11798*x11807))+((r01*x11799))+(((-1.0)*x11804*x11806)));
evalcond[8]=((((-1.0)*x11802*x11803))+(((-1.0)*x11803*x11806))+((r11*x11799))+(((-1.0)*r11*x11798*x11807))+((r10*x11800))+((r10*x11812))+(((-1.0)*r12*sj3*x11808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11813=((1.0)*gconst8);
CheckValue<IkReal> x11814=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11813))+(((-1.0)*gconst7*r00)))),-1);
if(!x11814.valid){
continue;
}
CheckValue<IkReal> x11815 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11814.value)))+(x11815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11816=IKsin(j4);
IkReal x11817=IKcos(j4);
IkReal x11818=(gconst7*sj3);
IkReal x11819=(cj3*gconst8);
IkReal x11820=(cj3*gconst7);
IkReal x11821=(sj1*sj2);
IkReal x11822=(cj2*sj1);
IkReal x11823=((1.0)*sj0);
IkReal x11824=((1.0)*cj0);
IkReal x11825=(gconst8*sj3);
IkReal x11826=(cj1*sj2);
IkReal x11827=((1.0)*x11817);
IkReal x11828=((1.0)*x11816);
IkReal x11829=((1.0)*cj1*cj2);
IkReal x11830=(cj3*x11816);
IkReal x11831=(gconst7*x11816);
IkReal x11832=(x11817*x11825);
evalcond[0]=(((r21*x11831))+(((-1.0)*gconst8*r20*x11828))+(((-1.0)*r22*x11827)));
evalcond[1]=(cj0+((r11*x11831))+(((-1.0)*r12*x11827))+(((-1.0)*gconst8*r10*x11828)));
evalcond[2]=((((-1.0)*gconst8*r00*x11828))+(((-1.0)*r02*x11827))+(((-1.0)*x11823))+((r01*x11831)));
evalcond[3]=((((-1.0)*r20*x11819*x11827))+((r22*x11830))+((r20*x11818))+((r21*x11817*x11820))+((r21*x11825))+x11826+x11822);
evalcond[4]=((((-1.0)*r21*x11818*x11827))+(((-1.0)*r22*sj3*x11828))+((r21*x11819))+(((-1.0)*x11829))+((r20*x11832))+((r20*x11820))+x11821);
evalcond[5]=(((r01*x11817*x11820))+((r00*x11818))+((r02*x11830))+((cj0*x11821))+(((-1.0)*r00*x11819*x11827))+(((-1.0)*cj1*cj2*x11824))+((r01*x11825)));
evalcond[6]=(((r11*x11817*x11820))+((sj0*x11821))+((r10*x11818))+((r12*x11830))+(((-1.0)*cj1*cj2*x11823))+((r11*x11825))+(((-1.0)*r10*x11819*x11827)));
evalcond[7]=((((-1.0)*x11822*x11824))+((r01*x11819))+(((-1.0)*x11824*x11826))+(((-1.0)*r01*x11818*x11827))+((r00*x11820))+((r00*x11832))+(((-1.0)*r02*sj3*x11828)));
evalcond[8]=((((-1.0)*x11822*x11823))+((r10*x11820))+(((-1.0)*r11*x11818*x11827))+(((-1.0)*x11823*x11826))+((r10*x11832))+(((-1.0)*r12*sj3*x11828))+((r11*x11819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11833=((-1.0)*r11);
IkReal x11835 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11835)==0){
continue;
}
IkReal x11834=pow(x11835,-0.5);
CheckValue<IkReal> x11836 = IKatan2WithCheck(IkReal(x11833),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11836.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11836.value))));
IkReal gconst10=(x11833*x11834);
IkReal gconst11=((1.0)*r10*x11834);
CheckValue<IkReal> x11837 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11837.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11837.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11838=((-1.0)*r11);
CheckValue<IkReal> x11841 = IKatan2WithCheck(IkReal(x11838),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11841.valid){
continue;
}
IkReal x11839=((1.0)*(x11841.value));
IkReal x11840=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11839)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11839)));
IkReal gconst10=(x11838*x11840);
IkReal gconst11=((1.0)*r10*x11840);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11842=((-1.0)*r11);
CheckValue<IkReal> x11845 = IKatan2WithCheck(IkReal(x11842),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11845.valid){
continue;
}
IkReal x11843=((1.0)*(x11845.value));
IkReal x11844=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11843)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11843)));
IkReal gconst10=(x11842*x11844);
IkReal gconst11=((1.0)*r10*x11844);
IkReal x11846=r12*r12;
IkReal x11847=((1.0)*sj0);
IkReal x11848=(cj0*r02);
IkReal x11849=x11834;
j4eval[0]=((IKabs((((sj0*x11846*x11849))+((r12*x11848*x11849))+(((-1.0)*x11847*x11849)))))+(IKabs(((((-1.0)*x11848))+(((-1.0)*r12*x11847))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11850=((-1.0)*r11);
CheckValue<IkReal> x11853 = IKatan2WithCheck(IkReal(x11850),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11853.valid){
continue;
}
IkReal x11851=((1.0)*(x11853.value));
IkReal x11852=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11851)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11851)));
IkReal gconst10=(x11850*x11852);
IkReal gconst11=((1.0)*r10*x11852);
IkReal x11854=((1.0)*cj3);
CheckValue<IkReal> x11859=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11859.valid){
continue;
}
IkReal x11855=x11859.value;
IkReal x11856=(cj3*x11855);
IkReal x11857=(x11854*x11855);
IkReal x11858=((((-1.0)*x11854*(r22*r22)))+(((-1.0)*x11857*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x11856))+(((-1.0)*x11857*(r11*r11)*(r21*r21))));
j4eval[0]=x11858;
j4eval[1]=IKsign(x11858);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11860=((-1.0)*r11);
CheckValue<IkReal> x11863 = IKatan2WithCheck(IkReal(x11860),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11863.valid){
continue;
}
IkReal x11861=((1.0)*(x11863.value));
IkReal x11862=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11861)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11861)));
IkReal gconst10=(x11860*x11862);
IkReal gconst11=((1.0)*r10*x11862);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11864=((-1.0)*r11);
CheckValue<IkReal> x11867 = IKatan2WithCheck(IkReal(x11864),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11867.valid){
continue;
}
IkReal x11865=((1.0)*(x11867.value));
IkReal x11866=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11865)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11865)));
IkReal gconst10=(x11864*x11866);
IkReal gconst11=((1.0)*r10*x11866);
IkReal x11868=r12*r12;
IkReal x11869=((1.0)*sj0);
IkReal x11870=(cj0*r02);
IkReal x11871=x11834;
j4eval[0]=((IKabs(((((-1.0)*x11870))+(((-1.0)*r12*x11869)))))+(IKabs((((r12*x11870*x11871))+((sj0*x11868*x11871))+(((-1.0)*x11869*x11871))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11872=((-1.0)*r11);
CheckValue<IkReal> x11875 = IKatan2WithCheck(IkReal(x11872),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11875.valid){
continue;
}
IkReal x11873=((1.0)*(x11875.value));
IkReal x11874=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11873)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11873)));
IkReal gconst10=(x11872*x11874);
IkReal gconst11=((1.0)*r10*x11874);
IkReal x11876=r12*r12;
IkReal x11877=(cj1*cj2*r22);
IkReal x11878=(r22*sj1*sj2);
CheckValue<IkReal> x11882=IKPowWithIntegerCheck(((-1.0)+x11876),-1);
if(!x11882.valid){
continue;
}
IkReal x11879=x11882.value;
if((((1.0)+(((-1.0)*x11876)))) < -0.00001)
continue;
IkReal x11880=IKsqrt(((1.0)+(((-1.0)*x11876))));
IkReal x11881=(r12*x11879*x11880);
j4eval[0]=((IKabs((((x11877*x11881))+(((-1.0)*x11878*x11881)))))+(IKabs(((((-1.0)*x11877))+x11878))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11883=((-1.0)*r11);
CheckValue<IkReal> x11886 = IKatan2WithCheck(IkReal(x11883),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11886.valid){
continue;
}
IkReal x11884=((1.0)*(x11886.value));
IkReal x11885=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11884)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11884)));
IkReal gconst10=(x11883*x11885);
IkReal gconst11=((1.0)*r10*x11885);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11887=((-1.0)*r11);
CheckValue<IkReal> x11890 = IKatan2WithCheck(IkReal(x11887),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11890.valid){
continue;
}
IkReal x11888=((1.0)*(x11890.value));
IkReal x11889=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11888)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11888)));
IkReal gconst10=(x11887*x11889);
IkReal gconst11=((1.0)*r10*x11889);
IkReal x11891=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11895=IKPowWithIntegerCheck(x11891,-1);
if(!x11895.valid){
continue;
}
IkReal x11892=x11895.value;
IkReal x11893=((1.0)*x11892);
IkReal x11894=((((-1.0)*x11893*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x11892))+(((-1.0)*(r02*r02)))+(((-1.0)*x11893*(r00*r00)*(r10*r10))));
j4eval[0]=x11894;
j4eval[1]=IKsign(x11894);
j4eval[2]=r02;
j4eval[3]=x11891;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11896=((-1.0)*r11);
CheckValue<IkReal> x11899 = IKatan2WithCheck(IkReal(x11896),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11899.valid){
continue;
}
IkReal x11897=((1.0)*(x11899.value));
IkReal x11898=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11897)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11897)));
IkReal gconst10=(x11896*x11898);
IkReal gconst11=((1.0)*r10*x11898);
IkReal x11900=r12*r12;
IkReal x11901=(cj1*cj2*r22);
IkReal x11902=(r22*sj1*sj2);
CheckValue<IkReal> x11906=IKPowWithIntegerCheck(((-1.0)+x11900),-1);
if(!x11906.valid){
continue;
}
IkReal x11903=x11906.value;
if((((1.0)+(((-1.0)*x11900)))) < -0.00001)
continue;
IkReal x11904=IKsqrt(((1.0)+(((-1.0)*x11900))));
IkReal x11905=(r12*x11903*x11904);
j4eval[0]=((IKabs((x11902+(((-1.0)*x11901)))))+(IKabs((((x11901*x11905))+(((-1.0)*x11902*x11905))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11907=(gconst10*r21);
IkReal x11908=(gconst11*r20);
IkReal x11909=(sj1*sj2);
IkReal x11910=(cj1*cj2);
CheckValue<IkReal> x11911=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x11907*x11907)+(((-2.0)*x11907*x11908))+(x11908*x11908))),-1);
if(!x11911.valid){
continue;
}
CheckValue<IkReal> x11912 = IKatan2WithCheck(IkReal((((r22*x11909))+(((-1.0)*r22*x11910)))),IkReal((((x11908*x11910))+((x11907*x11909))+(((-1.0)*x11907*x11910))+(((-1.0)*x11908*x11909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11911.value)))+(x11912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11913=IKsin(j4);
IkReal x11914=IKcos(j4);
IkReal x11915=((1.0)*cj2);
IkReal x11916=((1.0)*x11914);
IkReal x11917=(gconst10*x11913);
IkReal x11918=((1.0)*x11913);
IkReal x11919=(gconst11*x11914);
IkReal x11920=(gconst11*x11918);
evalcond[0]=((((-1.0)*r20*x11920))+(((-1.0)*r22*x11916))+((r21*x11917)));
evalcond[1]=(((r11*x11917))+(((-1.0)*r10*x11920))+(((-1.0)*r12*x11916)));
evalcond[2]=(((r00*x11919))+(((-1.0)*gconst10*r01*x11916))+(((-1.0)*r02*x11918)));
evalcond[3]=((-1.0)+((r01*x11917))+(((-1.0)*r00*x11920))+(((-1.0)*r02*x11916)));
evalcond[4]=((((-1.0)*gconst10*r21*x11916))+(((-1.0)*cj1*x11915))+(((-1.0)*r22*x11918))+((sj1*sj2))+((r20*x11919)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11916))+(((-1.0)*sj1*x11915))+((r10*x11919))+(((-1.0)*r12*x11918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11921=(gconst11*r00);
IkReal x11922=(gconst10*r01);
CheckValue<IkReal> x11923 = IKatan2WithCheck(IkReal((x11921+(((-1.0)*x11922)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11923.valid){
continue;
}
CheckValue<IkReal> x11924=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11922*x11922)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11921*x11921)))+(((2.0)*x11921*x11922)))),-1);
if(!x11924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11923.value)+(((1.5707963267949)*(x11924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11925=IKsin(j4);
IkReal x11926=IKcos(j4);
IkReal x11927=((1.0)*cj2);
IkReal x11928=((1.0)*x11926);
IkReal x11929=(gconst10*x11925);
IkReal x11930=((1.0)*x11925);
IkReal x11931=(gconst11*x11926);
IkReal x11932=(gconst11*x11930);
evalcond[0]=(((r21*x11929))+(((-1.0)*r22*x11928))+(((-1.0)*r20*x11932)));
evalcond[1]=((((-1.0)*r10*x11932))+((r11*x11929))+(((-1.0)*r12*x11928)));
evalcond[2]=((((-1.0)*r02*x11930))+((r00*x11931))+(((-1.0)*gconst10*r01*x11928)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11928))+(((-1.0)*r00*x11932))+((r01*x11929)));
evalcond[4]=((((-1.0)*cj1*x11927))+((r20*x11931))+((sj1*sj2))+(((-1.0)*r22*x11930))+(((-1.0)*gconst10*r21*x11928)));
evalcond[5]=(((r10*x11931))+(((-1.0)*gconst10*r11*x11928))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11930))+(((-1.0)*sj1*x11927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11933 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11933.valid){
continue;
}
CheckValue<IkReal> x11934=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11933.value)+(((1.5707963267949)*(x11934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11935=IKsin(j4);
IkReal x11936=IKcos(j4);
IkReal x11937=((1.0)*cj2);
IkReal x11938=((1.0)*x11936);
IkReal x11939=(gconst10*x11935);
IkReal x11940=((1.0)*x11935);
IkReal x11941=(gconst11*x11936);
IkReal x11942=(gconst11*x11940);
evalcond[0]=((((-1.0)*r20*x11942))+((r21*x11939))+(((-1.0)*r22*x11938)));
evalcond[1]=(((r11*x11939))+(((-1.0)*r12*x11938))+(((-1.0)*r10*x11942)));
evalcond[2]=((((-1.0)*gconst10*r01*x11938))+(((-1.0)*r02*x11940))+((r00*x11941)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11938))+(((-1.0)*r00*x11942))+((r01*x11939)));
evalcond[4]=(((r20*x11941))+(((-1.0)*r22*x11940))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11938))+(((-1.0)*cj1*x11937)));
evalcond[5]=((((-1.0)*sj1*x11937))+(((-1.0)*gconst10*r11*x11938))+(((-1.0)*cj1*sj2))+((r10*x11941))+(((-1.0)*r12*x11940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11943=((-1.0)*r11);
CheckValue<IkReal> x11946 = IKatan2WithCheck(IkReal(x11943),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11946.valid){
continue;
}
IkReal x11944=((1.0)*(x11946.value));
IkReal x11945=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11944)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11944)));
IkReal gconst10=(x11943*x11945);
IkReal gconst11=((1.0)*r10*x11945);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11947=((-1.0)*r11);
CheckValue<IkReal> x11950 = IKatan2WithCheck(IkReal(x11947),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11950.valid){
continue;
}
IkReal x11948=((1.0)*(x11950.value));
IkReal x11949=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11948)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11948)));
IkReal gconst10=(x11947*x11949);
IkReal gconst11=((1.0)*r10*x11949);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11951=((-1.0)*r11);
CheckValue<IkReal> x11954 = IKatan2WithCheck(IkReal(x11951),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11954.valid){
continue;
}
IkReal x11952=((1.0)*(x11954.value));
IkReal x11953=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11952)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11952)));
IkReal gconst10=(x11951*x11953);
IkReal gconst11=((1.0)*r10*x11953);
IkReal x11955=r12*r12;
CheckValue<IkReal> x11958=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11955))),-1);
if(!x11958.valid){
continue;
}
IkReal x11956=x11958.value;
IkReal x11957=((1.0)*x11956);
j4eval[0]=IKsign((x11955+((x11957*(r10*r10*r10*r10)))+(((2.0)*x11956*(r10*r10)*(r11*r11)))+((x11957*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11959=(cj2*sj1);
IkReal x11960=(gconst10*r11);
IkReal x11961=(gconst11*r10);
IkReal x11962=(cj1*sj2);
CheckValue<IkReal> x11963 = IKatan2WithCheck(IkReal((((r12*x11959))+((r12*x11962)))),IkReal((((x11959*x11960))+(((-1.0)*x11961*x11962))+((x11960*x11962))+(((-1.0)*x11959*x11961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11963.valid){
continue;
}
CheckValue<IkReal> x11964=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x11960*x11961))+(x11961*x11961)+(x11960*x11960))),-1);
if(!x11964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11963.value)+(((1.5707963267949)*(x11964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11965=IKsin(j4);
IkReal x11966=IKcos(j4);
IkReal x11967=((1.0)*x11966);
IkReal x11968=(gconst10*x11965);
IkReal x11969=((1.0)*x11965);
IkReal x11970=(gconst11*x11966);
IkReal x11971=(gconst11*x11969);
evalcond[0]=((((-1.0)*r20*x11971))+(((-1.0)*r22*x11967))+((r21*x11968)));
evalcond[1]=((((-1.0)*r10*x11971))+(((-1.0)*r12*x11967))+((r11*x11968)));
evalcond[2]=(((r00*x11970))+(((-1.0)*gconst10*r01*x11967))+(((-1.0)*r02*x11969)));
evalcond[3]=((1.0)+((r01*x11968))+(((-1.0)*r00*x11971))+(((-1.0)*r02*x11967)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11969))+((cj1*sj2))+((r10*x11970))+(((-1.0)*gconst10*r11*x11967)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11969))+((r20*x11970))+(((-1.0)*gconst10*r21*x11967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11972=(gconst11*r00);
IkReal x11973=(gconst10*r01);
CheckValue<IkReal> x11974 = IKatan2WithCheck(IkReal((x11972+(((-1.0)*x11973)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11974.valid){
continue;
}
CheckValue<IkReal> x11975=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11972*x11973))+(x11972*x11972)+(x11973*x11973)+(r02*r02))),-1);
if(!x11975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11974.value)+(((1.5707963267949)*(x11975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11976=IKsin(j4);
IkReal x11977=IKcos(j4);
IkReal x11978=((1.0)*x11977);
IkReal x11979=(gconst10*x11976);
IkReal x11980=((1.0)*x11976);
IkReal x11981=(gconst11*x11977);
IkReal x11982=(gconst11*x11980);
evalcond[0]=((((-1.0)*r22*x11978))+(((-1.0)*r20*x11982))+((r21*x11979)));
evalcond[1]=((((-1.0)*r12*x11978))+((r11*x11979))+(((-1.0)*r10*x11982)));
evalcond[2]=((((-1.0)*r02*x11980))+(((-1.0)*gconst10*r01*x11978))+((r00*x11981)));
evalcond[3]=((1.0)+((r01*x11979))+(((-1.0)*r00*x11982))+(((-1.0)*r02*x11978)));
evalcond[4]=((((-1.0)*r12*x11980))+((cj2*sj1))+((r10*x11981))+(((-1.0)*gconst10*r11*x11978))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11981))+(((-1.0)*r22*x11980))+(((-1.0)*gconst10*r21*x11978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11983=((1.0)*gconst11);
CheckValue<IkReal> x11984=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11983)))),-1);
if(!x11984.valid){
continue;
}
CheckValue<IkReal> x11985 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11984.value)))+(x11985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11986=IKsin(j4);
IkReal x11987=IKcos(j4);
IkReal x11988=((1.0)*x11987);
IkReal x11989=(gconst10*x11986);
IkReal x11990=((1.0)*x11986);
IkReal x11991=(gconst11*x11987);
IkReal x11992=(gconst11*x11990);
evalcond[0]=(((r21*x11989))+(((-1.0)*r20*x11992))+(((-1.0)*r22*x11988)));
evalcond[1]=((((-1.0)*r12*x11988))+((r11*x11989))+(((-1.0)*r10*x11992)));
evalcond[2]=((((-1.0)*r02*x11990))+(((-1.0)*gconst10*r01*x11988))+((r00*x11991)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11988))+((r01*x11989))+(((-1.0)*r00*x11992)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r11*x11988))+((cj1*sj2))+(((-1.0)*r12*x11990))+((r10*x11991)));
evalcond[5]=(((r20*x11991))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11988))+(((-1.0)*r22*x11990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11993=((-1.0)*r11);
IkReal x11994=((-1.0)*r10);
CheckValue<IkReal> x11996 = IKatan2WithCheck(IkReal(x11993),IkReal(x11994),IKFAST_ATAN2_MAGTHRESH);
if(!x11996.valid){
continue;
}
IkReal x11995=((1.0)*(x11996.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11995)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11994);
rxp1_1=(px*r21);
rxp1_2=(px*x11993);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11995)));
IkReal gconst10=x11993;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11997=((-1.0)*r11);
IkReal x11998=((-1.0)*r10);
CheckValue<IkReal> x12000 = IKatan2WithCheck(IkReal(x11997),IkReal(x11998),IKFAST_ATAN2_MAGTHRESH);
if(!x12000.valid){
continue;
}
IkReal x11999=((1.0)*(x12000.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11999)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11998);
rxp1_1=(px*r21);
rxp1_2=(px*x11997);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11999)));
IkReal gconst10=x11997;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12001=((-1.0)*r11);
IkReal x12002=((-1.0)*r10);
CheckValue<IkReal> x12004 = IKatan2WithCheck(IkReal(x12001),IkReal(x12002),IKFAST_ATAN2_MAGTHRESH);
if(!x12004.valid){
continue;
}
IkReal x12003=((1.0)*(x12004.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12003)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12002);
rxp1_1=(px*r21);
rxp1_2=(px*x12001);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12003)));
IkReal gconst10=x12001;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12007=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x12007.valid){
continue;
}
IkReal x12005=x12007.value;
IkReal x12006=(sj0*x12005);
cj4array[0]=(((cj1*sj2*x12006))+((cj2*sj1*x12006)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12008=IKsin(j4);
IkReal x12009=IKcos(j4);
IkReal x12010=(gconst10*r21);
IkReal x12011=(gconst11*r20);
IkReal x12012=((1.0)*x12008);
IkReal x12013=((1.0)*x12009);
evalcond[0]=((-1.0)*r02*x12008);
evalcond[1]=((((-1.0)*r02*x12013))+(((-1.0)*sj0)));
evalcond[2]=(((x12008*x12010))+(((-1.0)*x12011*x12012)));
evalcond[3]=((((-1.0)*gconst11*r10*x12012))+((gconst10*r11*x12008)));
evalcond[4]=(((x12009*x12011))+(((-1.0)*x12010*x12013))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12015=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12015.valid){
continue;
}
IkReal x12014=x12015.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12014))+((cj1*cj2*x12014)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12016=IKsin(j4);
IkReal x12017=IKcos(j4);
IkReal x12018=((1.0)*sj0);
IkReal x12019=(gconst10*x12016);
IkReal x12020=((1.0)*x12017);
IkReal x12021=((1.0)*gconst11*x12016);
evalcond[0]=((-1.0)*r02*x12016);
evalcond[1]=((((-1.0)*r02*x12020))+(((-1.0)*x12018)));
evalcond[2]=((((-1.0)*r20*x12021))+((r21*x12019)));
evalcond[3]=(((r11*x12019))+(((-1.0)*r10*x12021)));
evalcond[4]=(((gconst11*r10*x12017))+(((-1.0)*gconst10*r11*x12020))+(((-1.0)*cj2*sj1*x12018))+(((-1.0)*cj1*sj2*x12018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12022=IKPowWithIntegerCheck(r02,-1);
if(!x12022.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12022.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12023=IKsin(j4);
IkReal x12024=IKcos(j4);
IkReal x12025=(gconst10*r21);
IkReal x12026=((1.0)*sj0);
IkReal x12027=(gconst10*r11);
IkReal x12028=(gconst11*x12024);
IkReal x12029=((1.0)*x12024);
IkReal x12030=((1.0)*gconst11*x12023);
evalcond[0]=((-1.0)*r02*x12023);
evalcond[1]=((((-1.0)*r20*x12030))+((x12023*x12025)));
evalcond[2]=(((x12023*x12027))+(((-1.0)*r10*x12030)));
evalcond[3]=(((r20*x12028))+(((-1.0)*x12025*x12029))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj1*sj2*x12026))+(((-1.0)*cj2*sj1*x12026))+(((-1.0)*x12027*x12029))+((r10*x12028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12031=((1.0)*gconst11);
CheckValue<IkReal> x12032 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12031))+((gconst10*r11*sj0))+(((-1.0)*r10*sj0*x12031))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12032.valid){
continue;
}
CheckValue<IkReal> x12033=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12032.value)+(((1.5707963267949)*(x12033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12034=IKsin(j4);
IkReal x12035=IKcos(j4);
IkReal x12036=((1.0)*cj2);
IkReal x12037=((1.0)*sj0);
IkReal x12038=(cj1*sj2);
IkReal x12039=(gconst10*x12034);
IkReal x12040=((1.0)*x12035);
IkReal x12041=(gconst11*x12035);
IkReal x12042=((1.0)*x12034);
IkReal x12043=(gconst11*x12042);
evalcond[0]=((((-1.0)*r20*x12043))+((r21*x12039)));
evalcond[1]=((((-1.0)*r12*x12040))+cj0+(((-1.0)*r10*x12043))+((r11*x12039)));
evalcond[2]=((((-1.0)*cj1*x12036))+((sj1*sj2))+((r20*x12041))+(((-1.0)*gconst10*r21*x12040)));
evalcond[3]=((((-1.0)*r00*x12043))+(((-1.0)*x12037))+((r01*x12039))+(((-1.0)*r02*x12040)));
evalcond[4]=((((-1.0)*gconst10*r01*x12040))+((r00*x12041))+(((-1.0)*cj0*sj1*x12036))+(((-1.0)*r02*x12042))+(((-1.0)*cj0*x12038)));
evalcond[5]=(((r10*x12041))+(((-1.0)*r12*x12042))+(((-1.0)*gconst10*r11*x12040))+(((-1.0)*x12037*x12038))+(((-1.0)*sj0*sj1*x12036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12044=(gconst10*r21);
IkReal x12045=(gconst11*r20);
IkReal x12046=(sj1*sj2);
IkReal x12047=(cj1*cj2);
CheckValue<IkReal> x12048=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x12045*x12045)+(((-2.0)*x12044*x12045))+(x12044*x12044))),-1);
if(!x12048.valid){
continue;
}
CheckValue<IkReal> x12049 = IKatan2WithCheck(IkReal((((r22*x12046))+(((-1.0)*r22*x12047)))),IkReal(((((-1.0)*x12044*x12047))+(((-1.0)*x12045*x12046))+((x12045*x12047))+((x12044*x12046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12048.value)))+(x12049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12050=IKsin(j4);
IkReal x12051=IKcos(j4);
IkReal x12052=((1.0)*cj2);
IkReal x12053=((1.0)*sj0);
IkReal x12054=(cj1*sj2);
IkReal x12055=((1.0)*x12051);
IkReal x12056=(gconst10*x12050);
IkReal x12057=((1.0)*x12050);
IkReal x12058=(gconst11*x12051);
IkReal x12059=(gconst11*x12057);
evalcond[0]=((((-1.0)*r20*x12059))+(((-1.0)*r22*x12055))+((r21*x12056)));
evalcond[1]=((((-1.0)*r10*x12059))+cj0+(((-1.0)*r12*x12055))+((r11*x12056)));
evalcond[2]=((((-1.0)*x12053))+((r01*x12056))+(((-1.0)*r02*x12055))+(((-1.0)*r00*x12059)));
evalcond[3]=(((r20*x12058))+(((-1.0)*cj1*x12052))+((sj1*sj2))+(((-1.0)*r22*x12057))+(((-1.0)*gconst10*r21*x12055)));
evalcond[4]=((((-1.0)*cj0*sj1*x12052))+((r00*x12058))+(((-1.0)*r02*x12057))+(((-1.0)*gconst10*r01*x12055))+(((-1.0)*cj0*x12054)));
evalcond[5]=(((r10*x12058))+(((-1.0)*gconst10*r11*x12055))+(((-1.0)*r12*x12057))+(((-1.0)*sj0*sj1*x12052))+(((-1.0)*x12053*x12054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12060=((1.0)*sj0);
IkReal x12061=((1.0)*gconst10);
CheckValue<IkReal> x12062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12061))+(((-1.0)*gconst11*r21)))),-1);
if(!x12062.valid){
continue;
}
CheckValue<IkReal> x12063 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12060)))),IkReal(((((-1.0)*gconst10*r11*x12060))+(((-1.0)*cj0*r01*x12061))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12062.value)))+(x12063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12064=IKsin(j4);
IkReal x12065=IKcos(j4);
IkReal x12066=((1.0)*cj2);
IkReal x12067=((1.0)*sj0);
IkReal x12068=(cj1*sj2);
IkReal x12069=((1.0)*x12065);
IkReal x12070=(gconst10*x12064);
IkReal x12071=((1.0)*x12064);
IkReal x12072=(gconst11*x12065);
IkReal x12073=(gconst11*x12071);
evalcond[0]=((((-1.0)*r20*x12073))+(((-1.0)*r22*x12069))+((r21*x12070)));
evalcond[1]=(cj0+((r11*x12070))+(((-1.0)*r10*x12073))+(((-1.0)*r12*x12069)));
evalcond[2]=((((-1.0)*r02*x12069))+(((-1.0)*x12067))+(((-1.0)*r00*x12073))+((r01*x12070)));
evalcond[3]=((((-1.0)*gconst10*r21*x12069))+((sj1*sj2))+((r20*x12072))+(((-1.0)*r22*x12071))+(((-1.0)*cj1*x12066)));
evalcond[4]=((((-1.0)*cj0*x12068))+(((-1.0)*r02*x12071))+(((-1.0)*cj0*sj1*x12066))+(((-1.0)*gconst10*r01*x12069))+((r00*x12072)));
evalcond[5]=((((-1.0)*sj0*sj1*x12066))+(((-1.0)*x12067*x12068))+((r10*x12072))+(((-1.0)*gconst10*r11*x12069))+(((-1.0)*r12*x12071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12074=((1.0)*gconst11);
CheckValue<IkReal> x12075=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12074)))),-1);
if(!x12075.valid){
continue;
}
CheckValue<IkReal> x12076 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12075.value)))+(x12076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12077=IKsin(j4);
IkReal x12078=IKcos(j4);
IkReal x12079=((1.0)*cj2);
IkReal x12080=((1.0)*sj0);
IkReal x12081=(cj1*sj2);
IkReal x12082=((1.0)*x12078);
IkReal x12083=(gconst10*x12077);
IkReal x12084=((1.0)*x12077);
IkReal x12085=(gconst11*x12078);
IkReal x12086=(gconst11*x12084);
evalcond[0]=((((-1.0)*r22*x12082))+((r21*x12083))+(((-1.0)*r20*x12086)));
evalcond[1]=((((-1.0)*r12*x12082))+cj0+((r11*x12083))+(((-1.0)*r10*x12086)));
evalcond[2]=((((-1.0)*x12080))+((r01*x12083))+(((-1.0)*r00*x12086))+(((-1.0)*r02*x12082)));
evalcond[3]=(((r20*x12085))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12082))+(((-1.0)*r22*x12084))+(((-1.0)*cj1*x12079)));
evalcond[4]=(((r00*x12085))+(((-1.0)*gconst10*r01*x12082))+(((-1.0)*cj0*x12081))+(((-1.0)*cj0*sj1*x12079))+(((-1.0)*r02*x12084)));
evalcond[5]=((((-1.0)*r12*x12084))+(((-1.0)*sj0*sj1*x12079))+(((-1.0)*x12080*x12081))+(((-1.0)*gconst10*r11*x12082))+((r10*x12085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12087=((-1.0)*r11);
CheckValue<IkReal> x12090 = IKatan2WithCheck(IkReal(x12087),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12090.valid){
continue;
}
IkReal x12088=((1.0)*(x12090.value));
IkReal x12089=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12088)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12088)));
IkReal gconst10=(x12087*x12089);
IkReal gconst11=((1.0)*r10*x12089);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12091=((-1.0)*r11);
CheckValue<IkReal> x12094 = IKatan2WithCheck(IkReal(x12091),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12094.valid){
continue;
}
IkReal x12092=((1.0)*(x12094.value));
IkReal x12093=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12092)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12092)));
IkReal gconst10=(x12091*x12093);
IkReal gconst11=((1.0)*r10*x12093);
IkReal x12095=r12*r12;
IkReal x12096=((1.0)*sj0);
IkReal x12097=(cj0*r02);
IkReal x12098=x11834;
j4eval[0]=((IKabs(((((-1.0)*x12097))+(((-1.0)*r12*x12096)))))+(IKabs((((sj0*x12095*x12098))+(((-1.0)*x12096*x12098))+((r12*x12097*x12098))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12099=((-1.0)*r11);
CheckValue<IkReal> x12102 = IKatan2WithCheck(IkReal(x12099),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12102.valid){
continue;
}
IkReal x12100=((1.0)*(x12102.value));
IkReal x12101=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12100)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12100)));
IkReal gconst10=(x12099*x12101);
IkReal gconst11=((1.0)*r10*x12101);
IkReal x12103=r12*r12;
IkReal x12104=((1.0)+(((-1.0)*x12103)));
IkReal x12105=(r22*sj1*sj2);
IkReal x12106=(cj1*cj2*r22);
CheckValue<IkReal> x12113=IKPowWithIntegerCheck(x12104,-1);
if(!x12113.valid){
continue;
}
IkReal x12107=x12113.value;
CheckValue<IkReal> x12114=IKPowWithIntegerCheck(((-1.0)+x12103),-1);
if(!x12114.valid){
continue;
}
IkReal x12108=x12114.value;
IkReal x12109=((1.0)*x12107);
if((x12104) < -0.00001)
continue;
IkReal x12110=IKsqrt(x12104);
IkReal x12111=(r12*x12108*x12110);
IkReal x12112=((((-1.0)*x12109*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x12109*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x12107)));
j4eval[0]=x12112;
j4eval[1]=((IKabs(((((-1.0)*x12105*x12111))+((x12106*x12111)))))+(IKabs((x12105+(((-1.0)*x12106))))));
j4eval[2]=IKsign(x12112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12115=((-1.0)*r11);
CheckValue<IkReal> x12118 = IKatan2WithCheck(IkReal(x12115),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12118.valid){
continue;
}
IkReal x12116=((1.0)*(x12118.value));
IkReal x12117=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12116)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12116)));
IkReal gconst10=(x12115*x12117);
IkReal gconst11=((1.0)*r10*x12117);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12119=((-1.0)*r11);
CheckValue<IkReal> x12122 = IKatan2WithCheck(IkReal(x12119),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12122.valid){
continue;
}
IkReal x12120=((1.0)*(x12122.value));
IkReal x12121=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12120)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12120)));
IkReal gconst10=(x12119*x12121);
IkReal gconst11=((1.0)*r10*x12121);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12123=((-1.0)*r11);
CheckValue<IkReal> x12126 = IKatan2WithCheck(IkReal(x12123),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12126.valid){
continue;
}
IkReal x12124=((1.0)*(x12126.value));
IkReal x12125=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12124)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12124)));
IkReal gconst10=(x12123*x12125);
IkReal gconst11=((1.0)*r10*x12125);
IkReal x12127=(cj1*r02*sj2);
IkReal x12128=(cj2*r02*sj1);
IkReal x12129=x11834;
IkReal x12130=(r12*x12129);
j4eval[0]=((IKabs((((x12128*x12130))+((x12127*x12130)))))+(IKabs((x12128+x12127))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12131=(cj1*sj2);
IkReal x12132=(cj2*sj1);
IkReal x12133=(gconst11*r00);
IkReal x12134=((1.0)*gconst10*r01);
CheckValue<IkReal> x12135=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12135.valid){
continue;
}
CheckValue<IkReal> x12136 = IKatan2WithCheck(IkReal(((((-1.0)*x12131*x12134))+((x12131*x12133))+(((-1.0)*x12132*x12134))+((x12132*x12133)))),IkReal((((r02*x12132))+((r02*x12131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12135.value)))+(x12136.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12137=IKcos(j4);
IkReal x12138=IKsin(j4);
IkReal x12139=((1.0)*cj2);
IkReal x12140=((1.0)*x12137);
IkReal x12141=(gconst10*x12137);
IkReal x12142=(gconst10*x12138);
IkReal x12143=((1.0)*gconst11*x12138);
evalcond[0]=(((r01*x12141))+((r02*x12138))+(((-1.0)*gconst11*r00*x12140)));
evalcond[1]=((((-1.0)*r22*x12140))+(((-1.0)*r20*x12143))+((r21*x12142)));
evalcond[2]=((((-1.0)*r12*x12140))+((r11*x12142))+(((-1.0)*r10*x12143)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12143))+(((-1.0)*r02*x12140))+((r01*x12142)));
evalcond[4]=((((-1.0)*gconst11*r20*x12140))+(((-1.0)*cj1*x12139))+((sj1*sj2))+((r22*x12138))+((r21*x12141)));
evalcond[5]=((((-1.0)*gconst11*r10*x12140))+((r12*x12138))+(((-1.0)*cj1*sj2))+((r11*x12141))+(((-1.0)*sj1*x12139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12144=(gconst10*r01);
IkReal x12145=(gconst11*r00);
CheckValue<IkReal> x12146=IKPowWithIntegerCheck(IKsign(((x12145*x12145)+(x12144*x12144)+(((-2.0)*x12144*x12145))+(r02*r02))),-1);
if(!x12146.valid){
continue;
}
CheckValue<IkReal> x12147 = IKatan2WithCheck(IkReal(((((-1.0)*x12145))+x12144)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12146.value)))+(x12147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12148=IKcos(j4);
IkReal x12149=IKsin(j4);
IkReal x12150=((1.0)*cj2);
IkReal x12151=((1.0)*x12148);
IkReal x12152=(gconst10*x12148);
IkReal x12153=(gconst10*x12149);
IkReal x12154=((1.0)*gconst11*x12149);
evalcond[0]=(((r02*x12149))+((r01*x12152))+(((-1.0)*gconst11*r00*x12151)));
evalcond[1]=((((-1.0)*r22*x12151))+((r21*x12153))+(((-1.0)*r20*x12154)));
evalcond[2]=((((-1.0)*r12*x12151))+((r11*x12153))+(((-1.0)*r10*x12154)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12151))+(((-1.0)*r00*x12154))+((r01*x12153)));
evalcond[4]=(((r22*x12149))+(((-1.0)*gconst11*r20*x12151))+((sj1*sj2))+((r21*x12152))+(((-1.0)*cj1*x12150)));
evalcond[5]=((((-1.0)*gconst11*r10*x12151))+(((-1.0)*cj1*sj2))+((r12*x12149))+(((-1.0)*sj1*x12150))+((r11*x12152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12155 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12155.valid){
continue;
}
CheckValue<IkReal> x12156=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12155.value)+(((1.5707963267949)*(x12156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12157=IKcos(j4);
IkReal x12158=IKsin(j4);
IkReal x12159=((1.0)*cj2);
IkReal x12160=((1.0)*x12157);
IkReal x12161=(gconst10*x12157);
IkReal x12162=(gconst10*x12158);
IkReal x12163=((1.0)*gconst11*x12158);
evalcond[0]=((((-1.0)*gconst11*r00*x12160))+((r02*x12158))+((r01*x12161)));
evalcond[1]=(((r21*x12162))+(((-1.0)*r22*x12160))+(((-1.0)*r20*x12163)));
evalcond[2]=((((-1.0)*r10*x12163))+((r11*x12162))+(((-1.0)*r12*x12160)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12163))+((r01*x12162))+(((-1.0)*r02*x12160)));
evalcond[4]=(((r21*x12161))+((r22*x12158))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12160))+(((-1.0)*cj1*x12159)));
evalcond[5]=((((-1.0)*gconst11*r10*x12160))+((r12*x12158))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12159))+((r11*x12161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12164=((-1.0)*r11);
CheckValue<IkReal> x12167 = IKatan2WithCheck(IkReal(x12164),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12167.valid){
continue;
}
IkReal x12165=((1.0)*(x12167.value));
IkReal x12166=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12165)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12165)));
IkReal gconst10=(x12164*x12166);
IkReal gconst11=((1.0)*r10*x12166);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12168=((-1.0)*r11);
CheckValue<IkReal> x12171 = IKatan2WithCheck(IkReal(x12168),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12171.valid){
continue;
}
IkReal x12169=((1.0)*(x12171.value));
IkReal x12170=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12169)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12169)));
IkReal gconst10=(x12168*x12170);
IkReal gconst11=((1.0)*r10*x12170);
IkReal x12172=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12176=IKPowWithIntegerCheck(x12172,-1);
if(!x12176.valid){
continue;
}
IkReal x12173=x12176.value;
IkReal x12174=((1.0)*x12173);
IkReal x12175=((((-2.0)*r00*r01*r10*r11*x12173))+(((-1.0)*(r02*r02)))+(((-1.0)*x12174*(r00*r00)*(r10*r10)))+(((-1.0)*x12174*(r01*r01)*(r11*r11))));
j4eval[0]=x12175;
j4eval[1]=r02;
j4eval[2]=x12172;
j4eval[3]=IKsign(x12175);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12177=((-1.0)*r11);
CheckValue<IkReal> x12180 = IKatan2WithCheck(IkReal(x12177),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12180.valid){
continue;
}
IkReal x12178=((1.0)*(x12180.value));
IkReal x12179=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12178)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12178)));
IkReal gconst10=(x12177*x12179);
IkReal gconst11=((1.0)*r10*x12179);
IkReal x12181=r12*r12;
IkReal x12182=((1.0)*r02);
IkReal x12183=(cj1*sj2);
IkReal x12184=(cj2*sj1);
CheckValue<IkReal> x12188=IKPowWithIntegerCheck(((-1.0)+x12181),-1);
if(!x12188.valid){
continue;
}
IkReal x12185=x12188.value;
if((((1.0)+(((-1.0)*x12181)))) < -0.00001)
continue;
IkReal x12186=IKsqrt(((1.0)+(((-1.0)*x12181))));
IkReal x12187=(r12*x12185*x12186);
j4eval[0]=((IKabs(((((-1.0)*x12182*x12183))+(((-1.0)*x12182*x12184)))))+(IKabs(((((-1.0)*x12182*x12183*x12187))+(((-1.0)*x12182*x12184*x12187))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12189=(cj1*sj2);
IkReal x12190=(gconst10*r01);
IkReal x12191=(cj2*sj1);
IkReal x12192=((1.0)*r02);
IkReal x12193=((1.0)*gconst11*r00);
CheckValue<IkReal> x12194=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12194.valid){
continue;
}
CheckValue<IkReal> x12195 = IKatan2WithCheck(IkReal((((x12190*x12191))+((x12189*x12190))+(((-1.0)*x12189*x12193))+(((-1.0)*x12191*x12193)))),IkReal(((((-1.0)*x12189*x12192))+(((-1.0)*x12191*x12192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12194.value)))+(x12195.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12196=IKcos(j4);
IkReal x12197=IKsin(j4);
IkReal x12198=((1.0)*x12196);
IkReal x12199=(gconst10*x12196);
IkReal x12200=(gconst10*x12197);
IkReal x12201=((1.0)*gconst11*x12197);
evalcond[0]=((((-1.0)*gconst11*r00*x12198))+((r02*x12197))+((r01*x12199)));
evalcond[1]=(((r21*x12200))+(((-1.0)*r22*x12198))+(((-1.0)*r20*x12201)));
evalcond[2]=((((-1.0)*r10*x12201))+(((-1.0)*r12*x12198))+((r11*x12200)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12198))+(((-1.0)*r00*x12201))+((r01*x12200)));
evalcond[4]=(((cj2*sj1))+((r12*x12197))+((cj1*sj2))+((r11*x12199))+(((-1.0)*gconst11*r10*x12198)));
evalcond[5]=(((r21*x12199))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12197))+(((-1.0)*gconst11*r20*x12198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12202=(gconst10*r01);
IkReal x12203=(gconst11*r00);
CheckValue<IkReal> x12204=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12202*x12202)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12203*x12203)))+(((2.0)*x12202*x12203)))),-1);
if(!x12204.valid){
continue;
}
CheckValue<IkReal> x12205 = IKatan2WithCheck(IkReal(((((-1.0)*x12203))+x12202)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12204.value)))+(x12205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12206=IKcos(j4);
IkReal x12207=IKsin(j4);
IkReal x12208=((1.0)*x12206);
IkReal x12209=(gconst10*x12206);
IkReal x12210=(gconst10*x12207);
IkReal x12211=((1.0)*gconst11*x12207);
evalcond[0]=(((r02*x12207))+(((-1.0)*gconst11*r00*x12208))+((r01*x12209)));
evalcond[1]=((((-1.0)*r22*x12208))+((r21*x12210))+(((-1.0)*r20*x12211)));
evalcond[2]=((((-1.0)*r12*x12208))+(((-1.0)*r10*x12211))+((r11*x12210)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12208))+(((-1.0)*r00*x12211))+((r01*x12210)));
evalcond[4]=(((cj2*sj1))+((r12*x12207))+(((-1.0)*gconst11*r10*x12208))+((cj1*sj2))+((r11*x12209)));
evalcond[5]=(((r22*x12207))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12208))+((r21*x12209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12212=((1.0)*gconst11);
CheckValue<IkReal> x12213=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12212)))),-1);
if(!x12213.valid){
continue;
}
CheckValue<IkReal> x12214 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12213.value)))+(x12214.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12215=IKcos(j4);
IkReal x12216=IKsin(j4);
IkReal x12217=((1.0)*x12215);
IkReal x12218=(gconst10*x12215);
IkReal x12219=(gconst10*x12216);
IkReal x12220=((1.0)*gconst11*x12216);
evalcond[0]=((((-1.0)*gconst11*r00*x12217))+((r02*x12216))+((r01*x12218)));
evalcond[1]=((((-1.0)*r22*x12217))+((r21*x12219))+(((-1.0)*r20*x12220)));
evalcond[2]=((((-1.0)*r12*x12217))+(((-1.0)*r10*x12220))+((r11*x12219)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12217))+(((-1.0)*r00*x12220))+((r01*x12219)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12217))+((r12*x12216))+((cj1*sj2))+((r11*x12218)));
evalcond[5]=(((r22*x12216))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12217))+((r21*x12218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12221=((-1.0)*r11);
IkReal x12222=((-1.0)*r10);
CheckValue<IkReal> x12224 = IKatan2WithCheck(IkReal(x12221),IkReal(x12222),IKFAST_ATAN2_MAGTHRESH);
if(!x12224.valid){
continue;
}
IkReal x12223=((1.0)*(x12224.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12223)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12222);
rxp1_1=(px*r21);
rxp1_2=(px*x12221);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12223)));
IkReal gconst10=x12221;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12225=((-1.0)*r11);
IkReal x12226=((-1.0)*r10);
CheckValue<IkReal> x12228 = IKatan2WithCheck(IkReal(x12225),IkReal(x12226),IKFAST_ATAN2_MAGTHRESH);
if(!x12228.valid){
continue;
}
IkReal x12227=((1.0)*(x12228.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12227)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12226);
rxp1_1=(px*r21);
rxp1_2=(px*x12225);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12227)));
IkReal gconst10=x12225;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12229=((-1.0)*r11);
IkReal x12230=((-1.0)*r10);
CheckValue<IkReal> x12232 = IKatan2WithCheck(IkReal(x12229),IkReal(x12230),IKFAST_ATAN2_MAGTHRESH);
if(!x12232.valid){
continue;
}
IkReal x12231=((1.0)*(x12232.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12231)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12230);
rxp1_1=(px*r21);
rxp1_2=(px*x12229);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12231)));
IkReal gconst10=x12229;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12235=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12235.valid){
continue;
}
IkReal x12233=x12235.value;
IkReal x12234=(sj0*x12233);
cj4array[0]=(((cj2*sj1*x12234))+((cj1*sj2*x12234)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12236=IKsin(j4);
IkReal x12237=IKcos(j4);
IkReal x12238=(gconst10*r21);
IkReal x12239=((1.0)*x12237);
IkReal x12240=((1.0)*gconst11*x12236);
evalcond[0]=(r02*x12236);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12239)));
evalcond[2]=((((-1.0)*r20*x12240))+((x12236*x12238)));
evalcond[3]=((((-1.0)*r10*x12240))+((gconst10*r11*x12236)));
evalcond[4]=((((-1.0)*gconst11*r20*x12239))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12237*x12238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12242=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12242.valid){
continue;
}
IkReal x12241=x12242.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12241))+((cj1*cj2*x12241)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12243=IKsin(j4);
IkReal x12244=IKcos(j4);
IkReal x12245=((1.0)*sj0);
IkReal x12246=(gconst10*x12243);
IkReal x12247=((1.0)*x12244);
IkReal x12248=((1.0)*gconst11*x12243);
evalcond[0]=(r02*x12243);
evalcond[1]=((((-1.0)*x12245))+(((-1.0)*r02*x12247)));
evalcond[2]=((((-1.0)*r20*x12248))+((r21*x12246)));
evalcond[3]=((((-1.0)*r10*x12248))+((r11*x12246)));
evalcond[4]=(((gconst10*r11*x12244))+(((-1.0)*cj2*sj1*x12245))+(((-1.0)*gconst11*r10*x12247))+(((-1.0)*cj1*sj2*x12245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12249=IKPowWithIntegerCheck(r02,-1);
if(!x12249.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12249.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12250=IKsin(j4);
IkReal x12251=IKcos(j4);
IkReal x12252=(gconst10*r21);
IkReal x12253=((1.0)*cj1);
IkReal x12254=(gconst10*r11);
IkReal x12255=((1.0)*gconst11*x12250);
IkReal x12256=((1.0)*gconst11*x12251);
evalcond[0]=(r02*x12250);
evalcond[1]=((((-1.0)*r20*x12255))+((x12250*x12252)));
evalcond[2]=(((x12250*x12254))+(((-1.0)*r10*x12255)));
evalcond[3]=(((sj1*sj2))+((x12251*x12252))+(((-1.0)*r20*x12256))+(((-1.0)*cj2*x12253)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x12251*x12254))+(((-1.0)*sj0*sj2*x12253))+(((-1.0)*r10*x12256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12257=((1.0)*gconst11);
CheckValue<IkReal> x12258 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12257))+(((-1.0)*cj0*r00*x12257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12258.valid){
continue;
}
CheckValue<IkReal> x12259=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12258.value)+(((1.5707963267949)*(x12259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12260=IKsin(j4);
IkReal x12261=IKcos(j4);
IkReal x12262=((1.0)*gconst11);
IkReal x12263=((1.0)*cj2);
IkReal x12264=((1.0)*sj0);
IkReal x12265=(cj1*sj2);
IkReal x12266=(gconst10*x12261);
IkReal x12267=(gconst10*x12260);
IkReal x12268=((1.0)*x12261);
evalcond[0]=((((-1.0)*r20*x12260*x12262))+((r21*x12267)));
evalcond[1]=((((-1.0)*r12*x12268))+cj0+(((-1.0)*r10*x12260*x12262))+((r11*x12267)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r20*x12261*x12262))+((r21*x12266))+(((-1.0)*cj1*x12263)));
evalcond[3]=((((-1.0)*r00*x12260*x12262))+((r01*x12267))+(((-1.0)*r02*x12268))+(((-1.0)*x12264)));
evalcond[4]=((((-1.0)*cj0*sj1*x12263))+((r01*x12266))+(((-1.0)*r00*x12261*x12262))+(((-1.0)*cj0*x12265))+((r02*x12260)));
evalcond[5]=((((-1.0)*r10*x12261*x12262))+((r12*x12260))+((r11*x12266))+(((-1.0)*x12264*x12265))+(((-1.0)*sj0*sj1*x12263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12269=(gconst10*r21);
IkReal x12270=(gconst11*r20);
IkReal x12271=(sj1*sj2);
IkReal x12272=(cj1*cj2);
CheckValue<IkReal> x12273 = IKatan2WithCheck(IkReal((((r22*x12271))+(((-1.0)*r22*x12272)))),IkReal((((x12270*x12272))+((x12269*x12271))+(((-1.0)*x12270*x12271))+(((-1.0)*x12269*x12272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12273.valid){
continue;
}
CheckValue<IkReal> x12274=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((2.0)*x12269*x12270))+(((-1.0)*(x12269*x12269)))+(((-1.0)*(x12270*x12270))))),-1);
if(!x12274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12273.value)+(((1.5707963267949)*(x12274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12275=IKsin(j4);
IkReal x12276=IKcos(j4);
IkReal x12277=((1.0)*cj2);
IkReal x12278=((1.0)*sj0);
IkReal x12279=(cj1*sj2);
IkReal x12280=((1.0)*x12276);
IkReal x12281=(gconst10*x12276);
IkReal x12282=(gconst10*x12275);
IkReal x12283=((1.0)*gconst11*x12275);
evalcond[0]=((((-1.0)*r22*x12280))+(((-1.0)*r20*x12283))+((r21*x12282)));
evalcond[1]=((((-1.0)*r10*x12283))+cj0+(((-1.0)*r12*x12280))+((r11*x12282)));
evalcond[2]=((((-1.0)*x12278))+((r01*x12282))+(((-1.0)*r00*x12283))+(((-1.0)*r02*x12280)));
evalcond[3]=((((-1.0)*gconst11*r20*x12280))+(((-1.0)*cj1*x12277))+((sj1*sj2))+((r22*x12275))+((r21*x12281)));
evalcond[4]=((((-1.0)*cj0*x12279))+(((-1.0)*gconst11*r00*x12280))+((r02*x12275))+((r01*x12281))+(((-1.0)*cj0*sj1*x12277)));
evalcond[5]=((((-1.0)*gconst11*r10*x12280))+(((-1.0)*x12278*x12279))+(((-1.0)*sj0*sj1*x12277))+((r11*x12281))+((r12*x12275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12284=((1.0)*sj0);
IkReal x12285=((1.0)*gconst10);
CheckValue<IkReal> x12286=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12285)))),-1);
if(!x12286.valid){
continue;
}
CheckValue<IkReal> x12287 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12284))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12285))+(((-1.0)*gconst10*r11*x12284))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12286.value)))+(x12287.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12288=IKsin(j4);
IkReal x12289=IKcos(j4);
IkReal x12290=((1.0)*cj2);
IkReal x12291=((1.0)*sj0);
IkReal x12292=(cj1*sj2);
IkReal x12293=((1.0)*x12289);
IkReal x12294=(gconst10*x12289);
IkReal x12295=(gconst10*x12288);
IkReal x12296=((1.0)*gconst11*x12288);
evalcond[0]=(((r21*x12295))+(((-1.0)*r20*x12296))+(((-1.0)*r22*x12293)));
evalcond[1]=((((-1.0)*r10*x12296))+cj0+((r11*x12295))+(((-1.0)*r12*x12293)));
evalcond[2]=(((r01*x12295))+(((-1.0)*r00*x12296))+(((-1.0)*x12291))+(((-1.0)*r02*x12293)));
evalcond[3]=(((r21*x12294))+((r22*x12288))+((sj1*sj2))+(((-1.0)*cj1*x12290))+(((-1.0)*gconst11*r20*x12293)));
evalcond[4]=((((-1.0)*cj0*sj1*x12290))+((r01*x12294))+((r02*x12288))+(((-1.0)*cj0*x12292))+(((-1.0)*gconst11*r00*x12293)));
evalcond[5]=((((-1.0)*x12291*x12292))+((r11*x12294))+(((-1.0)*gconst11*r10*x12293))+((r12*x12288))+(((-1.0)*sj0*sj1*x12290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12297=((1.0)*gconst11);
CheckValue<IkReal> x12298 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12297))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12298.valid){
continue;
}
CheckValue<IkReal> x12299=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12297)))),-1);
if(!x12299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12298.value)+(((1.5707963267949)*(x12299.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12300=IKsin(j4);
IkReal x12301=IKcos(j4);
IkReal x12302=((1.0)*cj2);
IkReal x12303=((1.0)*sj0);
IkReal x12304=(cj1*sj2);
IkReal x12305=((1.0)*x12301);
IkReal x12306=(gconst10*x12301);
IkReal x12307=(gconst10*x12300);
IkReal x12308=((1.0)*gconst11*x12300);
evalcond[0]=((((-1.0)*r20*x12308))+((r21*x12307))+(((-1.0)*r22*x12305)));
evalcond[1]=(cj0+((r11*x12307))+(((-1.0)*r10*x12308))+(((-1.0)*r12*x12305)));
evalcond[2]=((((-1.0)*r02*x12305))+(((-1.0)*r00*x12308))+(((-1.0)*x12303))+((r01*x12307)));
evalcond[3]=((((-1.0)*cj1*x12302))+((r21*x12306))+(((-1.0)*gconst11*r20*x12305))+((sj1*sj2))+((r22*x12300)));
evalcond[4]=((((-1.0)*cj0*x12304))+(((-1.0)*gconst11*r00*x12305))+((r01*x12306))+((r02*x12300))+(((-1.0)*cj0*sj1*x12302)));
evalcond[5]=((((-1.0)*gconst11*r10*x12305))+((r11*x12306))+((r12*x12300))+(((-1.0)*sj0*sj1*x12302))+(((-1.0)*x12303*x12304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12309=((-1.0)*r11);
CheckValue<IkReal> x12312 = IKatan2WithCheck(IkReal(x12309),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12312.valid){
continue;
}
IkReal x12310=((1.0)*(x12312.value));
IkReal x12311=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12310)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12310)));
IkReal gconst10=(x12309*x12311);
IkReal gconst11=((1.0)*r10*x12311);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12313=gconst10*gconst10;
IkReal x12314=gconst11*gconst11;
IkReal x12315=(gconst10*r21);
IkReal x12316=(cj3*r00);
IkReal x12317=(r00*sj3);
IkReal x12318=((1.0)*gconst11);
IkReal x12319=(gconst10*r20);
IkReal x12320=(r01*sj3);
IkReal x12321=(cj3*gconst11*r01);
IkReal x12322=(r21*x12313);
IkReal x12323=(r20*x12314);
CheckValue<IkReal> x12324 = IKatan2WithCheck(IkReal((((gconst10*r22*x12316))+((r22*x12321)))),IkReal(((((-1.0)*cj3*r01*x12323))+((x12315*x12321))+(((-1.0)*x12316*x12318*x12319))+((x12316*x12322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12324.valid){
continue;
}
CheckValue<IkReal> x12325=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12315*x12317*x12318))+((x12317*x12323))+(((-1.0)*x12318*x12319*x12320))+((r02*r22*sj3))+((x12320*x12322)))),-1);
if(!x12325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12324.value)+(((1.5707963267949)*(x12325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12326=IKsin(j4);
IkReal x12327=IKcos(j4);
IkReal x12328=(sj1*sj2);
IkReal x12329=(gconst10*sj3);
IkReal x12330=(cj3*gconst10);
IkReal x12331=(gconst11*r20);
IkReal x12332=(gconst11*r21);
IkReal x12333=(gconst11*r00);
IkReal x12334=(cj3*gconst11);
IkReal x12335=(gconst11*r10);
IkReal x12336=((1.0)*cj1);
IkReal x12337=(cj2*sj1);
IkReal x12338=(gconst11*sj3);
IkReal x12339=(cj2*x12336);
IkReal x12340=((1.0)*x12327);
IkReal x12341=((1.0)*x12326);
IkReal x12342=(gconst10*x12326);
IkReal x12343=(cj3*x12326);
IkReal x12344=(sj3*x12327);
evalcond[0]=((((-1.0)*x12331*x12341))+((r21*x12342))+(((-1.0)*r22*x12340)));
evalcond[1]=((((-1.0)*x12335*x12341))+(((-1.0)*r12*x12340))+((r11*x12342)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12340))+((r01*x12342))+(((-1.0)*x12333*x12341)));
evalcond[3]=(((r00*x12329))+((r01*x12338))+(((-1.0)*cj3*x12333*x12340))+((r02*x12343))+((r01*x12327*x12330)));
evalcond[4]=(((x12333*x12344))+((r01*x12334))+((r00*x12330))+(((-1.0)*r01*x12329*x12340))+(((-1.0)*r02*sj3*x12341)));
evalcond[5]=(((cj1*sj2))+x12337+((r20*x12329))+((r22*x12343))+(((-1.0)*cj3*x12331*x12340))+((sj3*x12332))+((r21*x12327*x12330)));
evalcond[6]=((((-1.0)*r10*x12334*x12340))+x12328+(((-1.0)*x12339))+((r11*x12327*x12330))+((r10*x12329))+((r11*x12338))+((r12*x12343)));
evalcond[7]=(((r20*x12330))+x12328+(((-1.0)*x12339))+((cj3*x12332))+(((-1.0)*r22*sj3*x12341))+((x12331*x12344))+(((-1.0)*r21*x12329*x12340)));
evalcond[8]=((((-1.0)*r11*x12329*x12340))+((x12335*x12344))+((r10*x12330))+(((-1.0)*sj2*x12336))+(((-1.0)*r12*sj3*x12341))+((r11*x12334))+(((-1.0)*x12337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12345 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12345.valid){
continue;
}
CheckValue<IkReal> x12346=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12345.value)+(((1.5707963267949)*(x12346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12347=IKsin(j4);
IkReal x12348=IKcos(j4);
IkReal x12349=(sj1*sj2);
IkReal x12350=(gconst10*sj3);
IkReal x12351=(cj3*gconst10);
IkReal x12352=(gconst11*r20);
IkReal x12353=(gconst11*r21);
IkReal x12354=(gconst11*r00);
IkReal x12355=(cj3*gconst11);
IkReal x12356=(gconst11*r10);
IkReal x12357=((1.0)*cj1);
IkReal x12358=(cj2*sj1);
IkReal x12359=(gconst11*sj3);
IkReal x12360=(cj2*x12357);
IkReal x12361=((1.0)*x12348);
IkReal x12362=((1.0)*x12347);
IkReal x12363=(gconst10*x12347);
IkReal x12364=(cj3*x12347);
IkReal x12365=(sj3*x12348);
evalcond[0]=((((-1.0)*r22*x12361))+((r21*x12363))+(((-1.0)*x12352*x12362)));
evalcond[1]=(((r11*x12363))+(((-1.0)*r12*x12361))+(((-1.0)*x12356*x12362)));
evalcond[2]=((-1.0)+(((-1.0)*x12354*x12362))+(((-1.0)*r02*x12361))+((r01*x12363)));
evalcond[3]=(((r01*x12359))+((r01*x12348*x12351))+(((-1.0)*cj3*x12354*x12361))+((r00*x12350))+((r02*x12364)));
evalcond[4]=((((-1.0)*r02*sj3*x12362))+(((-1.0)*r01*x12350*x12361))+((r01*x12355))+((r00*x12351))+((x12354*x12365)));
evalcond[5]=(((r20*x12350))+((cj1*sj2))+x12358+((sj3*x12353))+(((-1.0)*cj3*x12352*x12361))+((r22*x12364))+((r21*x12348*x12351)));
evalcond[6]=((((-1.0)*x12360))+x12349+(((-1.0)*r10*x12355*x12361))+((r11*x12359))+((r10*x12350))+((r11*x12348*x12351))+((r12*x12364)));
evalcond[7]=((((-1.0)*x12360))+(((-1.0)*r21*x12350*x12361))+((r20*x12351))+x12349+((cj3*x12353))+((x12352*x12365))+(((-1.0)*r22*sj3*x12362)));
evalcond[8]=((((-1.0)*x12358))+(((-1.0)*sj2*x12357))+((r11*x12355))+((x12356*x12365))+((r10*x12351))+(((-1.0)*r11*x12350*x12361))+(((-1.0)*r12*sj3*x12362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12366=((-1.0)*r11);
CheckValue<IkReal> x12369 = IKatan2WithCheck(IkReal(x12366),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12369.valid){
continue;
}
IkReal x12367=((1.0)*(x12369.value));
IkReal x12368=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12367)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12367)));
IkReal gconst10=(x12366*x12368);
IkReal gconst11=((1.0)*r10*x12368);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12370=gconst10*gconst10;
IkReal x12371=gconst11*gconst11;
IkReal x12372=(gconst10*r21);
IkReal x12373=(cj3*r00);
IkReal x12374=(r00*sj3);
IkReal x12375=((1.0)*gconst11);
IkReal x12376=(gconst10*r20);
IkReal x12377=(r01*sj3);
IkReal x12378=(cj3*gconst11*r01);
IkReal x12379=(r21*x12370);
IkReal x12380=(r20*x12371);
CheckValue<IkReal> x12381=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12375*x12376*x12377))+(((-1.0)*x12372*x12374*x12375))+((x12377*x12379))+((x12374*x12380))+((r02*r22*sj3)))),-1);
if(!x12381.valid){
continue;
}
CheckValue<IkReal> x12382 = IKatan2WithCheck(IkReal((((r22*x12378))+((gconst10*r22*x12373)))),IkReal(((((-1.0)*x12373*x12375*x12376))+(((-1.0)*cj3*r01*x12380))+((x12373*x12379))+((x12372*x12378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12381.value)))+(x12382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12383=IKsin(j4);
IkReal x12384=IKcos(j4);
IkReal x12385=(cj2*sj1);
IkReal x12386=(cj1*sj2);
IkReal x12387=(gconst10*sj3);
IkReal x12388=(cj3*gconst10);
IkReal x12389=(gconst11*r20);
IkReal x12390=(gconst11*r21);
IkReal x12391=(gconst11*r00);
IkReal x12392=(sj1*sj2);
IkReal x12393=(cj3*gconst11);
IkReal x12394=(gconst11*r10);
IkReal x12395=(cj1*cj2);
IkReal x12396=(gconst11*sj3);
IkReal x12397=((1.0)*x12384);
IkReal x12398=((1.0)*x12383);
IkReal x12399=(gconst10*x12383);
IkReal x12400=(cj3*x12383);
IkReal x12401=(sj3*x12384);
IkReal x12402=(x12386+x12385);
evalcond[0]=((((-1.0)*x12389*x12398))+(((-1.0)*r22*x12397))+((r21*x12399)));
evalcond[1]=((((-1.0)*r12*x12397))+(((-1.0)*x12394*x12398))+((r11*x12399)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12397))+((r01*x12399))+(((-1.0)*x12391*x12398)));
evalcond[3]=(((r02*x12400))+((r00*x12387))+((r01*x12396))+((r01*x12384*x12388))+(((-1.0)*cj3*x12391*x12397)));
evalcond[4]=((((-1.0)*r01*x12387*x12397))+((x12391*x12401))+((r00*x12388))+((r01*x12393))+(((-1.0)*r02*sj3*x12398)));
evalcond[5]=(((r22*x12400))+(((-1.0)*cj3*x12389*x12397))+((r21*x12384*x12388))+((r20*x12387))+((sj3*x12390))+x12402);
evalcond[6]=((((-1.0)*r10*x12393*x12397))+((r11*x12396))+((r10*x12387))+x12395+((r11*x12384*x12388))+(((-1.0)*x12392))+((r12*x12400)));
evalcond[7]=(((r11*x12393))+((x12394*x12401))+((r10*x12388))+x12402+(((-1.0)*r12*sj3*x12398))+(((-1.0)*r11*x12387*x12397)));
evalcond[8]=(((cj3*x12390))+(((-1.0)*r22*sj3*x12398))+x12392+(((-1.0)*r21*x12387*x12397))+((r20*x12388))+((x12389*x12401))+(((-1.0)*x12395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12403=((1.0)*gconst11);
CheckValue<IkReal> x12404=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12403)))),-1);
if(!x12404.valid){
continue;
}
CheckValue<IkReal> x12405 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12404.value)))+(x12405.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12406=IKsin(j4);
IkReal x12407=IKcos(j4);
IkReal x12408=(cj2*sj1);
IkReal x12409=(cj1*sj2);
IkReal x12410=(gconst10*sj3);
IkReal x12411=(cj3*gconst10);
IkReal x12412=(gconst11*r20);
IkReal x12413=(gconst11*r21);
IkReal x12414=(gconst11*r00);
IkReal x12415=(sj1*sj2);
IkReal x12416=(cj3*gconst11);
IkReal x12417=(gconst11*r10);
IkReal x12418=(cj1*cj2);
IkReal x12419=(gconst11*sj3);
IkReal x12420=((1.0)*x12407);
IkReal x12421=((1.0)*x12406);
IkReal x12422=(gconst10*x12406);
IkReal x12423=(cj3*x12406);
IkReal x12424=(sj3*x12407);
IkReal x12425=(x12408+x12409);
evalcond[0]=((((-1.0)*x12412*x12421))+((r21*x12422))+(((-1.0)*r22*x12420)));
evalcond[1]=((((-1.0)*x12417*x12421))+((r11*x12422))+(((-1.0)*r12*x12420)));
evalcond[2]=((1.0)+(((-1.0)*x12414*x12421))+((r01*x12422))+(((-1.0)*r02*x12420)));
evalcond[3]=(((r01*x12407*x12411))+(((-1.0)*cj3*x12414*x12420))+((r00*x12410))+((r01*x12419))+((r02*x12423)));
evalcond[4]=((((-1.0)*r02*sj3*x12421))+((r00*x12411))+((r01*x12416))+(((-1.0)*r01*x12410*x12420))+((x12414*x12424)));
evalcond[5]=(((sj3*x12413))+((r20*x12410))+((r22*x12423))+(((-1.0)*cj3*x12412*x12420))+((r21*x12407*x12411))+x12425);
evalcond[6]=(((r10*x12410))+(((-1.0)*r10*x12416*x12420))+((r11*x12419))+(((-1.0)*x12415))+((r12*x12423))+((r11*x12407*x12411))+x12418);
evalcond[7]=(((r10*x12411))+((r11*x12416))+(((-1.0)*r12*sj3*x12421))+((x12417*x12424))+(((-1.0)*r11*x12410*x12420))+x12425);
evalcond[8]=(((cj3*x12413))+(((-1.0)*r22*sj3*x12421))+((r20*x12411))+(((-1.0)*r21*x12410*x12420))+(((-1.0)*x12418))+x12415+((x12412*x12424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12426=((-1.0)*r11);
IkReal x12427=((-1.0)*r10);
CheckValue<IkReal> x12429 = IKatan2WithCheck(IkReal(x12426),IkReal(x12427),IKFAST_ATAN2_MAGTHRESH);
if(!x12429.valid){
continue;
}
IkReal x12428=((1.0)*(x12429.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12428)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12427);
rxp1_1=(px*r21);
rxp1_2=(px*x12426);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12428)));
IkReal gconst10=x12426;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12430=((-1.0)*r11);
IkReal x12431=((-1.0)*r10);
CheckValue<IkReal> x12433 = IKatan2WithCheck(IkReal(x12430),IkReal(x12431),IKFAST_ATAN2_MAGTHRESH);
if(!x12433.valid){
continue;
}
IkReal x12432=((1.0)*(x12433.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12432)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12431);
rxp1_1=(px*r21);
rxp1_2=(px*x12430);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12432)));
IkReal gconst10=x12430;
IkReal gconst11=((1.0)*r10);
IkReal x12434=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12434))+(((-1.0)*r10*r20*x12434)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12435=((-1.0)*r11);
IkReal x12436=((-1.0)*r10);
CheckValue<IkReal> x12438 = IKatan2WithCheck(IkReal(x12435),IkReal(x12436),IKFAST_ATAN2_MAGTHRESH);
if(!x12438.valid){
continue;
}
IkReal x12437=((1.0)*(x12438.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12437)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12436);
rxp1_1=(px*r21);
rxp1_2=(px*x12435);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12437)));
IkReal gconst10=x12435;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12440=IKPowWithIntegerCheck(r02,-1);
if(!x12440.valid){
continue;
}
IkReal x12439=x12440.value;
CheckValue<IkReal> x12441=IKPowWithIntegerCheck(cj3,-1);
if(!x12441.valid){
continue;
}
if( IKabs((x12439*(x12441.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12439)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12439*(x12441.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12439))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12439*(x12441.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12439));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12442=IKsin(j4);
IkReal x12443=IKcos(j4);
IkReal x12444=(cj3*r10);
IkReal x12445=((1.0)*gconst11);
IkReal x12446=(sj1*sj2);
IkReal x12447=(gconst11*sj3);
IkReal x12448=(cj3*r11);
IkReal x12449=(cj2*sj1);
IkReal x12450=(gconst10*r20);
IkReal x12451=(gconst10*sj3);
IkReal x12452=((1.0)*cj0);
IkReal x12453=((1.0)*sj0);
IkReal x12454=(cj1*sj2);
IkReal x12455=(cj3*r21);
IkReal x12456=((1.0)*cj1*cj2);
IkReal x12457=(r20*x12443);
IkReal x12458=(gconst10*x12442);
IkReal x12459=(gconst10*x12443);
IkReal x12460=(r02*x12442);
IkReal x12461=((1.0)*x12443);
evalcond[0]=((((-1.0)*r02*x12461))+(((-1.0)*x12453)));
evalcond[1]=((((-1.0)*r20*x12442*x12445))+((r21*x12458)));
evalcond[2]=(cj0+(((-1.0)*r10*x12442*x12445))+((r11*x12458)));
evalcond[3]=(((cj0*x12446))+((cj3*x12460))+(((-1.0)*cj1*cj2*x12452)));
evalcond[4]=((((-1.0)*sj3*x12460))+(((-1.0)*x12452*x12454))+(((-1.0)*x12449*x12452)));
evalcond[5]=(((x12455*x12459))+((r21*x12447))+((sj3*x12450))+(((-1.0)*cj3*x12445*x12457))+x12449+x12454);
evalcond[6]=((((-1.0)*r21*x12451*x12461))+((cj3*x12450))+((x12447*x12457))+(((-1.0)*x12456))+x12446+((gconst11*x12455)));
evalcond[7]=(((sj0*x12446))+(((-1.0)*x12443*x12444*x12445))+((r11*x12447))+(((-1.0)*cj1*cj2*x12453))+((x12448*x12459))+((r10*x12451)));
evalcond[8]=(((gconst10*x12444))+(((-1.0)*r11*x12451*x12461))+(((-1.0)*x12453*x12454))+(((-1.0)*x12449*x12453))+((gconst11*x12448))+((r10*x12443*x12447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12462=((1.0)*r20);
IkReal x12463=((1.0)*gconst11);
CheckValue<IkReal> x12464=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12463))),-1);
if(!x12464.valid){
continue;
}
CheckValue<IkReal> x12465=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12462))+((cj3*gconst10*r21))),-1);
if(!x12465.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12464.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12465.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12462))+(((-1.0)*r21*sj3*x12463)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12464.value)))+IKsqr(((x12465.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12462))+(((-1.0)*r21*sj3*x12463))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12464.value)), ((x12465.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12462))+(((-1.0)*r21*sj3*x12463))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12466=IKsin(j4);
IkReal x12467=IKcos(j4);
IkReal x12468=(cj3*r10);
IkReal x12469=((1.0)*gconst11);
IkReal x12470=(sj1*sj2);
IkReal x12471=(gconst11*sj3);
IkReal x12472=(cj3*r11);
IkReal x12473=(cj2*sj1);
IkReal x12474=(gconst10*r20);
IkReal x12475=(gconst10*sj3);
IkReal x12476=((1.0)*cj0);
IkReal x12477=((1.0)*sj0);
IkReal x12478=(cj1*sj2);
IkReal x12479=(cj3*r21);
IkReal x12480=((1.0)*cj1*cj2);
IkReal x12481=(r20*x12467);
IkReal x12482=(gconst10*x12466);
IkReal x12483=(gconst10*x12467);
IkReal x12484=(r02*x12466);
IkReal x12485=((1.0)*x12467);
evalcond[0]=((((-1.0)*r02*x12485))+(((-1.0)*x12477)));
evalcond[1]=((((-1.0)*r20*x12466*x12469))+((r21*x12482)));
evalcond[2]=((((-1.0)*r10*x12466*x12469))+cj0+((r11*x12482)));
evalcond[3]=(((cj0*x12470))+((cj3*x12484))+(((-1.0)*cj1*cj2*x12476)));
evalcond[4]=((((-1.0)*x12476*x12478))+(((-1.0)*sj3*x12484))+(((-1.0)*x12473*x12476)));
evalcond[5]=(((sj3*x12474))+((x12479*x12483))+x12473+x12478+(((-1.0)*cj3*x12469*x12481))+((r21*x12471)));
evalcond[6]=((((-1.0)*x12480))+((cj3*x12474))+(((-1.0)*r21*x12475*x12485))+x12470+((gconst11*x12479))+((x12471*x12481)));
evalcond[7]=(((r11*x12471))+((x12472*x12483))+(((-1.0)*x12467*x12468*x12469))+((sj0*x12470))+((r10*x12475))+(((-1.0)*cj1*cj2*x12477)));
evalcond[8]=((((-1.0)*r11*x12475*x12485))+(((-1.0)*x12473*x12477))+((r10*x12467*x12471))+((gconst10*x12468))+(((-1.0)*x12477*x12478))+((gconst11*x12472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12486=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12486.valid){
continue;
}
CheckValue<IkReal> x12487=IKPowWithIntegerCheck(r02,-1);
if(!x12487.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12486.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12487.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12486.value)))+IKsqr(((-1.0)*sj0*(x12487.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12486.value)), ((-1.0)*sj0*(x12487.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12488=IKsin(j4);
IkReal x12489=IKcos(j4);
IkReal x12490=(cj3*r10);
IkReal x12491=((1.0)*gconst11);
IkReal x12492=(sj1*sj2);
IkReal x12493=(gconst11*sj3);
IkReal x12494=(cj3*r11);
IkReal x12495=(cj2*sj1);
IkReal x12496=(gconst10*r20);
IkReal x12497=(gconst10*sj3);
IkReal x12498=((1.0)*cj0);
IkReal x12499=((1.0)*sj0);
IkReal x12500=(cj1*sj2);
IkReal x12501=(cj3*r21);
IkReal x12502=((1.0)*cj1*cj2);
IkReal x12503=(r20*x12489);
IkReal x12504=(gconst10*x12488);
IkReal x12505=(gconst10*x12489);
IkReal x12506=(r02*x12488);
IkReal x12507=((1.0)*x12489);
evalcond[0]=((((-1.0)*r02*x12507))+(((-1.0)*x12499)));
evalcond[1]=((((-1.0)*r20*x12488*x12491))+((r21*x12504)));
evalcond[2]=(((r11*x12504))+cj0+(((-1.0)*r10*x12488*x12491)));
evalcond[3]=(((cj3*x12506))+((cj0*x12492))+(((-1.0)*cj1*cj2*x12498)));
evalcond[4]=((((-1.0)*x12498*x12500))+(((-1.0)*sj3*x12506))+(((-1.0)*x12495*x12498)));
evalcond[5]=(((r21*x12493))+((x12501*x12505))+x12500+(((-1.0)*cj3*x12491*x12503))+x12495+((sj3*x12496)));
evalcond[6]=((((-1.0)*x12502))+((x12493*x12503))+((cj3*x12496))+(((-1.0)*r21*x12497*x12507))+x12492+((gconst11*x12501)));
evalcond[7]=((((-1.0)*x12489*x12490*x12491))+((sj0*x12492))+((r10*x12497))+((x12494*x12505))+(((-1.0)*cj1*cj2*x12499))+((r11*x12493)));
evalcond[8]=((((-1.0)*r11*x12497*x12507))+((gconst11*x12494))+((r10*x12489*x12493))+((gconst10*x12490))+(((-1.0)*x12495*x12499))+(((-1.0)*x12499*x12500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12508=((-1.0)*r11);
CheckValue<IkReal> x12511 = IKatan2WithCheck(IkReal(x12508),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12511.valid){
continue;
}
IkReal x12509=((1.0)*(x12511.value));
IkReal x12510=x11834;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12509)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12509)));
IkReal gconst10=(x12508*x12510);
IkReal gconst11=((1.0)*r10*x12510);
IkReal x12512=r12*r12;
IkReal x12513=((1.0)*sj0);
IkReal x12514=(cj0*r02);
IkReal x12515=x11834;
j4eval[0]=((IKabs(((((-1.0)*r12*x12513))+(((-1.0)*x12514)))))+(IKabs((((r12*x12514*x12515))+((sj0*x12512*x12515))+(((-1.0)*x12513*x12515))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12516=((1.0)*r12);
IkReal x12517=(sj1*sj2);
IkReal x12518=((1.0)*r21);
IkReal x12519=(cj3*gconst11);
IkReal x12520=(r11*sj3);
IkReal x12521=(gconst11*r20);
IkReal x12522=((1.0)*sj3);
IkReal x12523=(cj1*cj2);
IkReal x12524=(gconst10*r21*sj3);
IkReal x12525=(cj3*gconst10*r20);
CheckValue<IkReal> x12526=IKPowWithIntegerCheck(((((-1.0)*x12518*x12520*(gconst10*gconst10)))+(((-1.0)*gconst11*r10*x12521*x12522))+((gconst11*r10*x12524))+((gconst10*x12520*x12521))),-1);
if(!x12526.valid){
continue;
}
CheckValue<IkReal> x12527=IKPowWithIntegerCheck((((sj3*x12521))+(((-1.0)*gconst10*sj3*x12518))),-1);
if(!x12527.valid){
continue;
}
if( IKabs(((x12526.value)*(((((-1.0)*x12516*x12517))+((cj0*x12524))+(((-1.0)*cj0*x12521*x12522))+(((-1.0)*x12516*x12525))+(((-1.0)*r21*x12516*x12519))+((r12*x12523)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12527.value)*(((((-1.0)*x12518*x12519))+(((-1.0)*x12517))+x12523+(((-1.0)*x12525)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12526.value)*(((((-1.0)*x12516*x12517))+((cj0*x12524))+(((-1.0)*cj0*x12521*x12522))+(((-1.0)*x12516*x12525))+(((-1.0)*r21*x12516*x12519))+((r12*x12523))))))+IKsqr(((x12527.value)*(((((-1.0)*x12518*x12519))+(((-1.0)*x12517))+x12523+(((-1.0)*x12525))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12526.value)*(((((-1.0)*x12516*x12517))+((cj0*x12524))+(((-1.0)*cj0*x12521*x12522))+(((-1.0)*x12516*x12525))+(((-1.0)*r21*x12516*x12519))+((r12*x12523))))), ((x12527.value)*(((((-1.0)*x12518*x12519))+(((-1.0)*x12517))+x12523+(((-1.0)*x12525))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12528=IKsin(j4);
IkReal x12529=IKcos(j4);
IkReal x12530=(cj3*r10);
IkReal x12531=(gconst11*r20);
IkReal x12532=(gconst11*sj3);
IkReal x12533=(sj1*sj2);
IkReal x12534=(cj3*r11);
IkReal x12535=(r10*sj3);
IkReal x12536=(gconst10*r01);
IkReal x12537=(gconst10*sj3);
IkReal x12538=(cj2*sj1);
IkReal x12539=((1.0)*sj0);
IkReal x12540=(cj1*sj2);
IkReal x12541=(gconst10*r21);
IkReal x12542=(cj3*gconst10);
IkReal x12543=(cj3*gconst11);
IkReal x12544=((1.0)*cj0);
IkReal x12545=((1.0)*x12528);
IkReal x12546=((1.0)*cj1*cj2);
IkReal x12547=(gconst11*x12529);
IkReal x12548=(sj3*x12529);
IkReal x12549=(gconst10*x12528);
IkReal x12550=((1.0)*x12529);
IkReal x12551=(cj3*x12529);
IkReal x12552=(cj3*x12528);
evalcond[0]=(((x12528*x12541))+(((-1.0)*x12531*x12545)));
evalcond[1]=((((-1.0)*r12*x12550))+cj0+((r11*x12549))+(((-1.0)*gconst11*r10*x12545)));
evalcond[2]=(((x12528*x12536))+(((-1.0)*x12539))+(((-1.0)*r02*x12550))+(((-1.0)*gconst11*r00*x12545)));
evalcond[3]=(((r20*x12537))+((r21*x12532))+(((-1.0)*cj3*x12531*x12550))+((x12541*x12551))+x12540+x12538);
evalcond[4]=(((r20*x12542))+(((-1.0)*r21*x12537*x12550))+((x12531*x12548))+x12533+((r21*x12543))+(((-1.0)*x12546)));
evalcond[5]=(((r00*x12537))+((x12536*x12551))+(((-1.0)*cj1*cj2*x12544))+((r02*x12552))+(((-1.0)*r00*x12543*x12550))+((r01*x12532))+((cj0*x12533)));
evalcond[6]=((((-1.0)*x12530*x12547))+((r11*x12532))+((r12*x12552))+((gconst10*x12529*x12534))+(((-1.0)*cj1*cj2*x12539))+((gconst10*x12535))+((sj0*x12533)));
evalcond[7]=((((-1.0)*x12538*x12544))+((r00*x12542))+((r01*x12543))+((r00*x12529*x12532))+(((-1.0)*x12536*x12548))+(((-1.0)*r02*sj3*x12545))+(((-1.0)*x12540*x12544)));
evalcond[8]=((((-1.0)*x12538*x12539))+(((-1.0)*x12539*x12540))+(((-1.0)*r12*sj3*x12545))+((r10*x12529*x12532))+((gconst10*x12530))+(((-1.0)*r11*x12537*x12550))+((gconst11*x12534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12553=((1.0)*sj0);
IkReal x12554=((1.0)*gconst10);
CheckValue<IkReal> x12555=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12554))+(((-1.0)*gconst11*r21)))),-1);
if(!x12555.valid){
continue;
}
CheckValue<IkReal> x12556 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12553))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12553))+(((-1.0)*cj0*r01*x12554))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12555.value)))+(x12556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12557=IKsin(j4);
IkReal x12558=IKcos(j4);
IkReal x12559=(cj3*r10);
IkReal x12560=(gconst11*r20);
IkReal x12561=(gconst11*sj3);
IkReal x12562=(sj1*sj2);
IkReal x12563=(cj3*r11);
IkReal x12564=(r10*sj3);
IkReal x12565=(gconst10*r01);
IkReal x12566=(gconst10*sj3);
IkReal x12567=(cj2*sj1);
IkReal x12568=((1.0)*sj0);
IkReal x12569=(cj1*sj2);
IkReal x12570=(gconst10*r21);
IkReal x12571=(cj3*gconst10);
IkReal x12572=(cj3*gconst11);
IkReal x12573=((1.0)*cj0);
IkReal x12574=((1.0)*x12557);
IkReal x12575=((1.0)*cj1*cj2);
IkReal x12576=(gconst11*x12558);
IkReal x12577=(sj3*x12558);
IkReal x12578=(gconst10*x12557);
IkReal x12579=((1.0)*x12558);
IkReal x12580=(cj3*x12558);
IkReal x12581=(cj3*x12557);
evalcond[0]=((((-1.0)*x12560*x12574))+((x12557*x12570)));
evalcond[1]=((((-1.0)*gconst11*r10*x12574))+cj0+(((-1.0)*r12*x12579))+((r11*x12578)));
evalcond[2]=((((-1.0)*r02*x12579))+(((-1.0)*gconst11*r00*x12574))+((x12557*x12565))+(((-1.0)*x12568)));
evalcond[3]=(((r20*x12566))+((x12570*x12580))+((r21*x12561))+x12569+x12567+(((-1.0)*cj3*x12560*x12579)));
evalcond[4]=((((-1.0)*r21*x12566*x12579))+((r21*x12572))+(((-1.0)*x12575))+((r20*x12571))+x12562+((x12560*x12577)));
evalcond[5]=(((x12565*x12580))+((r01*x12561))+((r00*x12566))+((r02*x12581))+(((-1.0)*r00*x12572*x12579))+(((-1.0)*cj1*cj2*x12573))+((cj0*x12562)));
evalcond[6]=(((r11*x12561))+((r12*x12581))+((gconst10*x12558*x12563))+((sj0*x12562))+(((-1.0)*x12559*x12576))+(((-1.0)*cj1*cj2*x12568))+((gconst10*x12564)));
evalcond[7]=((((-1.0)*x12565*x12577))+(((-1.0)*x12569*x12573))+(((-1.0)*x12567*x12573))+((r00*x12571))+((r01*x12572))+(((-1.0)*r02*sj3*x12574))+((r00*x12558*x12561)));
evalcond[8]=((((-1.0)*x12567*x12568))+((gconst11*x12563))+((gconst10*x12559))+(((-1.0)*r11*x12566*x12579))+(((-1.0)*r12*sj3*x12574))+(((-1.0)*x12568*x12569))+((r10*x12558*x12561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12582=gconst10*gconst10;
IkReal x12583=r21*r21;
IkReal x12584=gconst11*gconst11;
IkReal x12585=r20*r20;
IkReal x12586=((1.0)*cj3);
IkReal x12587=(r20*sj3);
IkReal x12588=(gconst10*gconst11);
IkReal x12589=(cj2*sj1);
IkReal x12590=(gconst10*r21);
IkReal x12591=(cj1*sj2);
IkReal x12592=((1.0)*gconst11*r20);
CheckValue<IkReal> x12593 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((r22*x12589))+((r22*x12591))+((gconst10*r22*x12587)))),IkReal(((((-1.0)*x12591*x12592))+(((-1.0)*sj3*x12585*x12588))+((x12590*x12591))+((x12589*x12590))+((r21*x12582*x12587))+(((-1.0)*x12589*x12592))+(((-1.0)*r21*x12584*x12587))+((sj3*x12583*x12588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12593.valid){
continue;
}
CheckValue<IkReal> x12594=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12582*x12583*x12586))+(((-1.0)*x12584*x12585*x12586))+(((2.0)*cj3*r20*r21*x12588))+(((-1.0)*x12586*(r22*r22))))),-1);
if(!x12594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12593.value)+(((1.5707963267949)*(x12594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12595=IKsin(j4);
IkReal x12596=IKcos(j4);
IkReal x12597=(cj3*r10);
IkReal x12598=(gconst11*r20);
IkReal x12599=(gconst11*sj3);
IkReal x12600=(sj1*sj2);
IkReal x12601=(gconst11*r00);
IkReal x12602=(cj3*r11);
IkReal x12603=(gconst10*sj3);
IkReal x12604=(cj2*sj1);
IkReal x12605=(cj3*r01);
IkReal x12606=((1.0)*sj0);
IkReal x12607=(cj1*sj2);
IkReal x12608=(cj3*r21);
IkReal x12609=(cj3*gconst10);
IkReal x12610=((1.0)*cj0);
IkReal x12611=((1.0)*x12596);
IkReal x12612=((1.0)*x12595);
IkReal x12613=((1.0)*cj1*cj2);
IkReal x12614=(cj3*x12595);
IkReal x12615=(gconst10*x12595);
IkReal x12616=(gconst10*x12596);
evalcond[0]=((((-1.0)*r22*x12611))+(((-1.0)*x12598*x12612))+((r21*x12615)));
evalcond[1]=((((-1.0)*r12*x12611))+cj0+(((-1.0)*gconst11*r10*x12612))+((r11*x12615)));
evalcond[2]=((((-1.0)*r02*x12611))+(((-1.0)*x12606))+(((-1.0)*x12601*x12612))+((r01*x12615)));
evalcond[3]=(((r20*x12603))+(((-1.0)*cj3*x12598*x12611))+((x12608*x12616))+((r21*x12599))+x12607+x12604+((r22*x12614)));
evalcond[4]=(((r20*x12609))+(((-1.0)*r22*sj3*x12612))+((gconst11*x12608))+x12600+((sj3*x12596*x12598))+(((-1.0)*r21*x12603*x12611))+(((-1.0)*x12613)));
evalcond[5]=(((r02*x12614))+((r01*x12599))+((r00*x12603))+((cj0*x12600))+(((-1.0)*cj3*x12601*x12611))+((x12605*x12616))+(((-1.0)*cj1*cj2*x12610)));
evalcond[6]=((((-1.0)*gconst11*x12597*x12611))+((r10*x12603))+((x12602*x12616))+((sj0*x12600))+((r12*x12614))+(((-1.0)*cj1*cj2*x12606))+((r11*x12599)));
evalcond[7]=(((r00*x12609))+((r00*x12596*x12599))+(((-1.0)*x12607*x12610))+(((-1.0)*x12604*x12610))+((gconst11*x12605))+(((-1.0)*r02*sj3*x12612))+(((-1.0)*r01*x12603*x12611)));
evalcond[8]=((((-1.0)*r11*x12603*x12611))+(((-1.0)*x12606*x12607))+((r10*x12596*x12599))+((gconst11*x12602))+((gconst10*x12597))+(((-1.0)*r12*sj3*x12612))+(((-1.0)*x12604*x12606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12617=((1.0)*sj0);
IkReal x12618=((1.0)*gconst10);
CheckValue<IkReal> x12619 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12617))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12618))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x12617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12619.valid){
continue;
}
CheckValue<IkReal> x12620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12618))+(((-1.0)*gconst11*r21)))),-1);
if(!x12620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12619.value)+(((1.5707963267949)*(x12620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12621=IKsin(j4);
IkReal x12622=IKcos(j4);
IkReal x12623=(cj3*r10);
IkReal x12624=(gconst11*r20);
IkReal x12625=(gconst11*sj3);
IkReal x12626=(sj1*sj2);
IkReal x12627=(gconst11*r00);
IkReal x12628=(cj3*r11);
IkReal x12629=(gconst10*sj3);
IkReal x12630=(cj2*sj1);
IkReal x12631=(cj3*r01);
IkReal x12632=((1.0)*sj0);
IkReal x12633=(cj1*sj2);
IkReal x12634=(cj3*r21);
IkReal x12635=(cj3*gconst10);
IkReal x12636=((1.0)*cj0);
IkReal x12637=((1.0)*x12622);
IkReal x12638=((1.0)*x12621);
IkReal x12639=((1.0)*cj1*cj2);
IkReal x12640=(cj3*x12621);
IkReal x12641=(gconst10*x12621);
IkReal x12642=(gconst10*x12622);
evalcond[0]=((((-1.0)*r22*x12637))+(((-1.0)*x12624*x12638))+((r21*x12641)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12638))+((r11*x12641))+(((-1.0)*r12*x12637)));
evalcond[2]=((((-1.0)*x12627*x12638))+((r01*x12641))+(((-1.0)*x12632))+(((-1.0)*r02*x12637)));
evalcond[3]=((((-1.0)*cj3*x12624*x12637))+((r21*x12625))+((r22*x12640))+x12633+x12630+((r20*x12629))+((x12634*x12642)));
evalcond[4]=(((sj3*x12622*x12624))+(((-1.0)*r21*x12629*x12637))+((r20*x12635))+(((-1.0)*x12639))+x12626+(((-1.0)*r22*sj3*x12638))+((gconst11*x12634)));
evalcond[5]=((((-1.0)*cj3*x12627*x12637))+(((-1.0)*cj1*cj2*x12636))+((r01*x12625))+((r00*x12629))+((cj0*x12626))+((r02*x12640))+((x12631*x12642)));
evalcond[6]=(((x12628*x12642))+((sj0*x12626))+((r12*x12640))+(((-1.0)*cj1*cj2*x12632))+(((-1.0)*gconst11*x12623*x12637))+((r10*x12629))+((r11*x12625)));
evalcond[7]=((((-1.0)*r02*sj3*x12638))+((r00*x12622*x12625))+(((-1.0)*r01*x12629*x12637))+(((-1.0)*x12633*x12636))+((r00*x12635))+(((-1.0)*x12630*x12636))+((gconst11*x12631)));
evalcond[8]=((((-1.0)*r11*x12629*x12637))+((gconst11*x12628))+(((-1.0)*x12632*x12633))+((gconst10*x12623))+(((-1.0)*r12*sj3*x12638))+((r10*x12622*x12625))+(((-1.0)*x12630*x12632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12643=((1.0)*gconst11);
CheckValue<IkReal> x12644 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12643))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12644.valid){
continue;
}
CheckValue<IkReal> x12645=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12643)))),-1);
if(!x12645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12644.value)+(((1.5707963267949)*(x12645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12646=IKsin(j4);
IkReal x12647=IKcos(j4);
IkReal x12648=(cj3*r10);
IkReal x12649=(gconst11*r20);
IkReal x12650=(gconst11*sj3);
IkReal x12651=(sj1*sj2);
IkReal x12652=(gconst11*r00);
IkReal x12653=(cj3*r11);
IkReal x12654=(gconst10*sj3);
IkReal x12655=(cj2*sj1);
IkReal x12656=(cj3*r01);
IkReal x12657=((1.0)*sj0);
IkReal x12658=(cj1*sj2);
IkReal x12659=(cj3*r21);
IkReal x12660=(cj3*gconst10);
IkReal x12661=((1.0)*cj0);
IkReal x12662=((1.0)*x12647);
IkReal x12663=((1.0)*x12646);
IkReal x12664=((1.0)*cj1*cj2);
IkReal x12665=(cj3*x12646);
IkReal x12666=(gconst10*x12646);
IkReal x12667=(gconst10*x12647);
evalcond[0]=((((-1.0)*r22*x12662))+((r21*x12666))+(((-1.0)*x12649*x12663)));
evalcond[1]=(cj0+((r11*x12666))+(((-1.0)*r12*x12662))+(((-1.0)*gconst11*r10*x12663)));
evalcond[2]=((((-1.0)*x12657))+(((-1.0)*r02*x12662))+((r01*x12666))+(((-1.0)*x12652*x12663)));
evalcond[3]=(((x12659*x12667))+((r21*x12650))+(((-1.0)*cj3*x12649*x12662))+((r22*x12665))+x12658+x12655+((r20*x12654)));
evalcond[4]=((((-1.0)*x12664))+((sj3*x12647*x12649))+(((-1.0)*r22*sj3*x12663))+((gconst11*x12659))+x12651+(((-1.0)*r21*x12654*x12662))+((r20*x12660)));
evalcond[5]=(((r02*x12665))+(((-1.0)*cj3*x12652*x12662))+((x12656*x12667))+(((-1.0)*cj1*cj2*x12661))+((r00*x12654))+((r01*x12650))+((cj0*x12651)));
evalcond[6]=(((r10*x12654))+((sj0*x12651))+((r11*x12650))+((r12*x12665))+(((-1.0)*gconst11*x12648*x12662))+((x12653*x12667))+(((-1.0)*cj1*cj2*x12657)));
evalcond[7]=(((r00*x12647*x12650))+(((-1.0)*x12655*x12661))+(((-1.0)*r02*sj3*x12663))+(((-1.0)*r01*x12654*x12662))+((gconst11*x12656))+(((-1.0)*x12658*x12661))+((r00*x12660)));
evalcond[8]=(((gconst11*x12653))+(((-1.0)*r11*x12654*x12662))+(((-1.0)*r12*sj3*x12663))+((gconst10*x12648))+((r10*x12647*x12650))+(((-1.0)*x12655*x12657))+(((-1.0)*x12657*x12658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12668=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12668;
j4eval[1]=IKsign(x12668);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12669=((1.0)*cj5);
IkReal x12670=((((-1.0)*r01*x12669))+(((-1.0)*r00*sj5)));
j4eval[0]=x12670;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12669)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12671=cj5*cj5;
IkReal x12672=(cj3*r21);
IkReal x12673=(cj5*sj5);
IkReal x12674=((1.0)*cj3);
IkReal x12675=(((cj3*r11*r20*x12673))+(((-1.0)*r10*r20*x12671*x12674))+(((-1.0)*r12*r22*x12674))+((r11*x12671*x12672))+((r10*x12672*x12673))+(((-1.0)*r11*x12672)));
j4eval[0]=x12675;
j4eval[1]=IKsign(x12675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12676=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12676;
j4eval[1]=IKsign(x12676);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12677=((1.0)*cj5);
IkReal x12678=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12677)));
j4eval[0]=x12678;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12677)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12678);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12679=cj5*cj5;
IkReal x12680=r11*r11;
IkReal x12681=(r11*sj5);
IkReal x12682=(cj5*r10);
IkReal x12683=((r12*r12)+(((-2.0)*x12681*x12682))+x12680+(((-1.0)*x12679*x12680))+((x12679*(r10*r10))));
j4eval[0]=x12683;
j4eval[1]=IKsign(x12683);
j4eval[2]=((IKabs(r12))+(IKabs((x12682+(((-1.0)*x12681))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12684=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12684);
rxp1_1=(px*r21);
rxp1_2=(r11*x12684);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12685=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12685);
rxp1_1=(px*r21);
rxp1_2=(r11*x12685);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12686=((1.0)*sj1);
CheckValue<IkReal> x12687=IKPowWithIntegerCheck(r02,-1);
if(!x12687.valid){
continue;
}
CheckValue<IkReal> x12688=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12688.valid){
continue;
}
if( IKabs(((x12687.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12686)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12688.value)*((((cj1*cj2))+(((-1.0)*sj2*x12686)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12687.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12686))))))+IKsqr(((x12688.value)*((((cj1*cj2))+(((-1.0)*sj2*x12686))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12687.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12686))))), ((x12688.value)*((((cj1*cj2))+(((-1.0)*sj2*x12686))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12689=IKsin(j4);
IkReal x12690=IKcos(j4);
IkReal x12691=(cj5*r20);
IkReal x12692=((1.0)*cj2);
IkReal x12693=(cj5*r10);
IkReal x12694=((1.0)*x12689);
IkReal x12695=(sj5*x12689);
IkReal x12696=((1.0)*sj5*x12690);
evalcond[0]=((-1.0)*r02*x12690);
evalcond[1]=(((r21*x12695))+(((-1.0)*x12691*x12694)));
evalcond[2]=((((-1.0)*r11*x12696))+((x12690*x12693)));
evalcond[3]=((1.0)+((r11*x12695))+(((-1.0)*x12693*x12694)));
evalcond[4]=((((-1.0)*r02*x12694))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12692)));
evalcond[5]=((((-1.0)*cj1*x12692))+((x12690*x12691))+((sj1*sj2))+(((-1.0)*r21*x12696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12697=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12697.valid){
continue;
}
CheckValue<IkReal> x12698=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12698.valid){
continue;
}
if( IKabs(((-1.0)*(x12697.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12698.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12697.value)))+IKsqr(((x12698.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12697.value)), ((x12698.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12699=IKsin(j4);
IkReal x12700=IKcos(j4);
IkReal x12701=(cj5*r20);
IkReal x12702=((1.0)*cj2);
IkReal x12703=(cj5*r10);
IkReal x12704=((1.0)*x12699);
IkReal x12705=(sj5*x12699);
IkReal x12706=((1.0)*sj5*x12700);
evalcond[0]=((-1.0)*r02*x12700);
evalcond[1]=(((r21*x12705))+(((-1.0)*x12701*x12704)));
evalcond[2]=((((-1.0)*r11*x12706))+((x12700*x12703)));
evalcond[3]=((1.0)+(((-1.0)*x12703*x12704))+((r11*x12705)));
evalcond[4]=((((-1.0)*sj1*x12702))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12704)));
evalcond[5]=(((x12700*x12701))+((sj1*sj2))+(((-1.0)*r21*x12706))+(((-1.0)*cj1*x12702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12707=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12707);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12707);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12708=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12708);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12708);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12709=IKPowWithIntegerCheck(r22,-1);
if(!x12709.valid){
continue;
}
CheckValue<IkReal> x12710=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12710.valid){
continue;
}
if( IKabs(((x12709.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12710.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12709.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12710.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12709.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12710.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12711=IKsin(j4);
IkReal x12712=IKcos(j4);
IkReal x12713=((1.0)*cj2);
IkReal x12714=(cj5*x12712);
IkReal x12715=(sj5*x12711);
IkReal x12716=((1.0)*sj5*x12712);
IkReal x12717=((1.0)*cj5*x12711);
evalcond[0]=((-1.0)*r22*x12712);
evalcond[1]=((((-1.0)*r00*x12717))+((r01*x12715)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12711))+(((-1.0)*cj1*x12713)));
evalcond[3]=(((r10*x12714))+(((-1.0)*r11*x12716)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12717))+((r11*x12715)));
evalcond[5]=((((-1.0)*sj1*x12713))+(((-1.0)*cj1*sj2))+((r00*x12714))+(((-1.0)*r01*x12716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12718=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12718.valid){
continue;
}
CheckValue<IkReal> x12719=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12719.valid){
continue;
}
if( IKabs(((-1.0)*(x12718.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12719.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12718.value)))+IKsqr(((x12719.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12718.value)), ((x12719.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12720=IKsin(j4);
IkReal x12721=IKcos(j4);
IkReal x12722=((1.0)*cj2);
IkReal x12723=(cj5*x12721);
IkReal x12724=(sj5*x12720);
IkReal x12725=((1.0)*sj5*x12721);
IkReal x12726=((1.0)*cj5*x12720);
evalcond[0]=((-1.0)*r22*x12721);
evalcond[1]=((((-1.0)*r00*x12726))+((r01*x12724)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12720))+(((-1.0)*cj1*x12722)));
evalcond[3]=(((r10*x12723))+(((-1.0)*r11*x12725)));
evalcond[4]=((1.0)+((r11*x12724))+(((-1.0)*r10*x12726)));
evalcond[5]=((((-1.0)*sj1*x12722))+(((-1.0)*r01*x12725))+(((-1.0)*cj1*sj2))+((r00*x12723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12727=cj5*cj5;
IkReal x12728=r11*r11;
IkReal x12729=(cj5*r10);
IkReal x12730=(r11*sj5);
CheckValue<IkReal> x12731 = IKatan2WithCheck(IkReal(((((-1.0)*x12730))+x12729)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12731.valid){
continue;
}
CheckValue<IkReal> x12732=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12729*x12730))+(((-1.0)*x12727*x12728))+((x12727*(r10*r10)))+x12728)),-1);
if(!x12732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12731.value)+(((1.5707963267949)*(x12732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12733=IKsin(j4);
IkReal x12734=IKcos(j4);
IkReal x12735=(cj5*r10);
IkReal x12736=(r01*sj5);
IkReal x12737=((1.0)*cj2);
IkReal x12738=(cj5*r00);
IkReal x12739=(cj5*r20);
IkReal x12740=((1.0)*x12734);
IkReal x12741=((1.0)*x12733);
IkReal x12742=(sj5*x12733);
evalcond[0]=((((-1.0)*r22*x12740))+(((-1.0)*x12739*x12741))+((r21*x12742)));
evalcond[1]=(((x12733*x12736))+(((-1.0)*r02*x12740))+(((-1.0)*x12738*x12741)));
evalcond[2]=((((-1.0)*r12*x12741))+((x12734*x12735))+(((-1.0)*r11*sj5*x12740)));
evalcond[3]=((1.0)+((r11*x12742))+(((-1.0)*r12*x12740))+(((-1.0)*x12735*x12741)));
evalcond[4]=(((x12734*x12739))+(((-1.0)*r21*sj5*x12740))+((sj1*sj2))+(((-1.0)*r22*x12741))+(((-1.0)*cj1*x12737)));
evalcond[5]=((((-1.0)*sj1*x12737))+(((-1.0)*r02*x12741))+((x12734*x12738))+(((-1.0)*cj1*sj2))+(((-1.0)*x12736*x12740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12743=((1.0)*cj5);
CheckValue<IkReal> x12744=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12743)))),-1);
if(!x12744.valid){
continue;
}
CheckValue<IkReal> x12745 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12744.value)))+(x12745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12746=IKsin(j4);
IkReal x12747=IKcos(j4);
IkReal x12748=(cj5*r10);
IkReal x12749=(r01*sj5);
IkReal x12750=((1.0)*cj2);
IkReal x12751=(cj5*r00);
IkReal x12752=(cj5*r20);
IkReal x12753=((1.0)*x12747);
IkReal x12754=((1.0)*x12746);
IkReal x12755=(sj5*x12746);
evalcond[0]=((((-1.0)*x12752*x12754))+(((-1.0)*r22*x12753))+((r21*x12755)));
evalcond[1]=((((-1.0)*r02*x12753))+(((-1.0)*x12751*x12754))+((x12746*x12749)));
evalcond[2]=((((-1.0)*r12*x12754))+(((-1.0)*r11*sj5*x12753))+((x12747*x12748)));
evalcond[3]=((1.0)+((r11*x12755))+(((-1.0)*r12*x12753))+(((-1.0)*x12748*x12754)));
evalcond[4]=((((-1.0)*r21*sj5*x12753))+(((-1.0)*r22*x12754))+((sj1*sj2))+(((-1.0)*cj1*x12750))+((x12747*x12752)));
evalcond[5]=((((-1.0)*r02*x12754))+(((-1.0)*sj1*x12750))+(((-1.0)*cj1*sj2))+(((-1.0)*x12749*x12753))+((x12747*x12751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12756=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12756.valid){
continue;
}
CheckValue<IkReal> x12757 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12756.value)))+(x12757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12758=IKsin(j4);
IkReal x12759=IKcos(j4);
IkReal x12760=(cj5*r10);
IkReal x12761=(r01*sj5);
IkReal x12762=((1.0)*cj2);
IkReal x12763=(cj5*r00);
IkReal x12764=(cj5*r20);
IkReal x12765=((1.0)*x12759);
IkReal x12766=((1.0)*x12758);
IkReal x12767=(sj5*x12758);
evalcond[0]=(((r21*x12767))+(((-1.0)*r22*x12765))+(((-1.0)*x12764*x12766)));
evalcond[1]=((((-1.0)*x12763*x12766))+((x12758*x12761))+(((-1.0)*r02*x12765)));
evalcond[2]=((((-1.0)*r12*x12766))+(((-1.0)*r11*sj5*x12765))+((x12759*x12760)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12765))+((r11*x12767))+(((-1.0)*x12760*x12766)));
evalcond[4]=((((-1.0)*r21*sj5*x12765))+(((-1.0)*r22*x12766))+((sj1*sj2))+((x12759*x12764))+(((-1.0)*cj1*x12762)));
evalcond[5]=((((-1.0)*sj1*x12762))+(((-1.0)*cj1*sj2))+((x12759*x12763))+(((-1.0)*r02*x12766))+(((-1.0)*x12761*x12765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12768=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12768;
j4eval[1]=IKsign(x12768);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12769=((1.0)*cj5);
IkReal x12770=((((-1.0)*r01*x12769))+(((-1.0)*r00*sj5)));
j4eval[0]=x12770;
j4eval[1]=((IKabs(((((-1.0)*r20*x12769))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12770);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12771=(sj1*sj2);
IkReal x12772=(cj5*r10);
IkReal x12773=(r11*sj5);
IkReal x12774=(cj1*cj2);
IkReal x12775=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12775;
j4eval[1]=((IKabs((((r12*x12774))+(((-1.0)*r12*x12771)))))+(IKabs((((x12772*x12774))+(((-1.0)*x12771*x12772))+(((-1.0)*x12773*x12774))+((x12771*x12773))))));
j4eval[2]=IKsign(x12775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12776=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12776);
rxp1_1=(px*r21);
rxp1_2=(r11*x12776);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12777=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12777);
rxp1_1=(px*r21);
rxp1_2=(r11*x12777);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12778=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12778)));
j4eval[1]=((((-1.0)*r20*x12778))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12779=((1.0)*cj5);
CheckValue<IkReal> x12780=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12779))),-1);
if(!x12780.valid){
continue;
}
CheckValue<IkReal> x12781=IKPowWithIntegerCheck(((((-1.0)*r20*x12779))+((r21*sj5))),-1);
if(!x12781.valid){
continue;
}
if( IKabs(((-1.0)*(x12780.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12781.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12780.value)))+IKsqr(((x12781.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12780.value)), ((x12781.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12782=IKsin(j4);
IkReal x12783=IKcos(j4);
IkReal x12784=((1.0)*cj2);
IkReal x12785=(r21*sj5);
IkReal x12786=(r11*sj5);
IkReal x12787=((1.0)*cj5*x12782);
IkReal x12788=((1.0)*cj5*x12783);
evalcond[0]=((-1.0)*r02*x12783);
evalcond[1]=(((x12782*x12785))+(((-1.0)*r20*x12787)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12784))+((r02*x12782)));
evalcond[3]=(((x12783*x12786))+(((-1.0)*r10*x12788)));
evalcond[4]=((1.0)+((x12782*x12786))+(((-1.0)*r10*x12787)));
evalcond[5]=(((x12783*x12785))+((sj1*sj2))+(((-1.0)*r20*x12788))+(((-1.0)*cj1*x12784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12789=IKPowWithIntegerCheck(r02,-1);
if(!x12789.valid){
continue;
}
CheckValue<IkReal> x12790=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12790.valid){
continue;
}
if( IKabs(((x12789.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12790.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12789.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12790.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12789.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12790.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12791=IKsin(j4);
IkReal x12792=IKcos(j4);
IkReal x12793=((1.0)*cj2);
IkReal x12794=(r21*sj5);
IkReal x12795=(r11*sj5);
IkReal x12796=((1.0)*cj5*x12791);
IkReal x12797=((1.0)*cj5*x12792);
evalcond[0]=((-1.0)*r02*x12792);
evalcond[1]=(((x12791*x12794))+(((-1.0)*r20*x12796)));
evalcond[2]=(((r02*x12791))+(((-1.0)*sj1*x12793))+(((-1.0)*cj1*sj2)));
evalcond[3]=(((x12792*x12795))+(((-1.0)*r10*x12797)));
evalcond[4]=((1.0)+((x12791*x12795))+(((-1.0)*r10*x12796)));
evalcond[5]=(((x12792*x12794))+(((-1.0)*r20*x12797))+((sj1*sj2))+(((-1.0)*cj1*x12793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12798=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12798;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12798);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12799=((1.0)*cj5);
IkReal x12800=((((-1.0)*r21*x12799))+(((-1.0)*r20*sj5)));
j4eval[0]=x12800;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12799))+((r11*sj5))))));
j4eval[2]=IKsign(x12800);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12801=cj5*cj5;
IkReal x12802=(r11*r21);
IkReal x12803=((1.0)*r20);
IkReal x12804=(cj5*sj5);
IkReal x12805=(((x12801*x12802))+((r11*r20*x12804))+(((-1.0)*r10*x12801*x12803))+(((-1.0)*r12*r22))+(((-1.0)*x12802))+((r10*r21*x12804)));
j4eval[0]=x12805;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12803))))));
j4eval[2]=IKsign(x12805);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12806=cj5*cj5;
IkReal x12807=(r21*sj5);
IkReal x12808=(r11*r21);
IkReal x12809=((1.0)*r20);
CheckValue<IkReal> x12810=IKPowWithIntegerCheck(IKsign((((x12806*x12808))+(((-1.0)*r12*r22))+(((-1.0)*x12808))+((cj5*r10*x12807))+((cj5*r11*r20*sj5))+(((-1.0)*r10*x12806*x12809)))),-1);
if(!x12810.valid){
continue;
}
CheckValue<IkReal> x12811 = IKatan2WithCheck(IkReal((x12807+(((-1.0)*cj5*x12809)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12810.value)))+(x12811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12812=IKcos(j4);
IkReal x12813=IKsin(j4);
IkReal x12814=(cj5*r00);
IkReal x12815=(cj5*r20);
IkReal x12816=(cj5*r10);
IkReal x12817=((1.0)*x12812);
IkReal x12818=((1.0)*x12813);
IkReal x12819=(sj5*x12812);
IkReal x12820=(sj5*x12813);
evalcond[0]=(((r21*x12819))+(((-1.0)*x12815*x12817))+((r22*x12813)));
evalcond[1]=((((-1.0)*x12816*x12817))+((r12*x12813))+((r11*x12819)));
evalcond[2]=(((r21*x12820))+(((-1.0)*r22*x12817))+(((-1.0)*x12815*x12818)));
evalcond[3]=((((-1.0)*x12814*x12818))+((r01*x12820))+(((-1.0)*r02*x12817)));
evalcond[4]=((-1.0)+(((-1.0)*x12814*x12817))+((r02*x12813))+((r01*x12819)));
evalcond[5]=((1.0)+(((-1.0)*x12816*x12818))+(((-1.0)*r12*x12817))+((r11*x12820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12821=((1.0)*cj5);
CheckValue<IkReal> x12822=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12821))+(((-1.0)*r20*sj5)))),-1);
if(!x12822.valid){
continue;
}
CheckValue<IkReal> x12823 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12821))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12822.value)))+(x12823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12824=IKcos(j4);
IkReal x12825=IKsin(j4);
IkReal x12826=(cj5*r00);
IkReal x12827=(cj5*r20);
IkReal x12828=(cj5*r10);
IkReal x12829=((1.0)*x12824);
IkReal x12830=((1.0)*x12825);
IkReal x12831=(sj5*x12824);
IkReal x12832=(sj5*x12825);
evalcond[0]=(((r21*x12831))+((r22*x12825))+(((-1.0)*x12827*x12829)));
evalcond[1]=((((-1.0)*x12828*x12829))+((r11*x12831))+((r12*x12825)));
evalcond[2]=(((r21*x12832))+(((-1.0)*r22*x12829))+(((-1.0)*x12827*x12830)));
evalcond[3]=((((-1.0)*r02*x12829))+((r01*x12832))+(((-1.0)*x12826*x12830)));
evalcond[4]=((-1.0)+(((-1.0)*x12826*x12829))+((r02*x12825))+((r01*x12831)));
evalcond[5]=((1.0)+((r11*x12832))+(((-1.0)*r12*x12829))+(((-1.0)*x12828*x12830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12833 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12833.valid){
continue;
}
CheckValue<IkReal> x12834=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12833.value)+(((1.5707963267949)*(x12834.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12835=IKcos(j4);
IkReal x12836=IKsin(j4);
IkReal x12837=(cj5*r00);
IkReal x12838=(cj5*r20);
IkReal x12839=(cj5*r10);
IkReal x12840=((1.0)*x12835);
IkReal x12841=((1.0)*x12836);
IkReal x12842=(sj5*x12835);
IkReal x12843=(sj5*x12836);
evalcond[0]=((((-1.0)*x12838*x12840))+((r22*x12836))+((r21*x12842)));
evalcond[1]=(((r12*x12836))+(((-1.0)*x12839*x12840))+((r11*x12842)));
evalcond[2]=((((-1.0)*r22*x12840))+(((-1.0)*x12838*x12841))+((r21*x12843)));
evalcond[3]=((((-1.0)*r02*x12840))+((r01*x12843))+(((-1.0)*x12837*x12841)));
evalcond[4]=((-1.0)+((r01*x12842))+((r02*x12836))+(((-1.0)*x12837*x12840)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12840))+(((-1.0)*x12839*x12841))+((r11*x12843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12844=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12844;
j4eval[1]=IKsign(x12844);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12845=((1.0)*cj5);
IkReal x12846=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12845)));
j4eval[0]=x12846;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12845)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12846);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12847=cj5*cj5;
IkReal x12848=(r11*r21);
IkReal x12849=((1.0)*r20);
IkReal x12850=(cj5*sj5);
IkReal x12851=((((-1.0)*r10*x12847*x12849))+((r11*r20*x12850))+(((-1.0)*r12*r22))+((x12847*x12848))+((r10*r21*x12850))+(((-1.0)*x12848)));
j4eval[0]=x12851;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12849))))));
j4eval[2]=IKsign(x12851);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12852=cj5*cj5;
IkReal x12853=(r21*sj5);
IkReal x12854=(r11*r21);
IkReal x12855=((1.0)*r20);
CheckValue<IkReal> x12856 = IKatan2WithCheck(IkReal((x12853+(((-1.0)*cj5*x12855)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12856.valid){
continue;
}
CheckValue<IkReal> x12857=IKPowWithIntegerCheck(IKsign((((x12852*x12854))+(((-1.0)*r12*r22))+(((-1.0)*x12854))+(((-1.0)*r10*x12852*x12855))+((cj5*r10*x12853))+((cj5*r11*r20*sj5)))),-1);
if(!x12857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12856.value)+(((1.5707963267949)*(x12857.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12858=IKcos(j4);
IkReal x12859=IKsin(j4);
IkReal x12860=(cj5*r00);
IkReal x12861=(cj5*r20);
IkReal x12862=(cj5*r10);
IkReal x12863=((1.0)*x12858);
IkReal x12864=((1.0)*x12859);
IkReal x12865=(sj5*x12858);
IkReal x12866=(sj5*x12859);
evalcond[0]=(((r21*x12865))+((r22*x12859))+(((-1.0)*x12861*x12863)));
evalcond[1]=(((r11*x12865))+(((-1.0)*x12862*x12863))+((r12*x12859)));
evalcond[2]=(((r21*x12866))+(((-1.0)*r22*x12863))+(((-1.0)*x12861*x12864)));
evalcond[3]=((((-1.0)*x12860*x12864))+(((-1.0)*r02*x12863))+((r01*x12866)));
evalcond[4]=((1.0)+(((-1.0)*x12860*x12863))+((r02*x12859))+((r01*x12865)));
evalcond[5]=((1.0)+((r11*x12866))+(((-1.0)*x12862*x12864))+(((-1.0)*r12*x12863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12867=((1.0)*cj5);
CheckValue<IkReal> x12868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12867)))),-1);
if(!x12868.valid){
continue;
}
CheckValue<IkReal> x12869 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12867)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12868.value)))+(x12869.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12870=IKcos(j4);
IkReal x12871=IKsin(j4);
IkReal x12872=(cj5*r00);
IkReal x12873=(cj5*r20);
IkReal x12874=(cj5*r10);
IkReal x12875=((1.0)*x12870);
IkReal x12876=((1.0)*x12871);
IkReal x12877=(sj5*x12870);
IkReal x12878=(sj5*x12871);
evalcond[0]=(((r22*x12871))+((r21*x12877))+(((-1.0)*x12873*x12875)));
evalcond[1]=(((r11*x12877))+((r12*x12871))+(((-1.0)*x12874*x12875)));
evalcond[2]=((((-1.0)*r22*x12875))+((r21*x12878))+(((-1.0)*x12873*x12876)));
evalcond[3]=((((-1.0)*x12872*x12876))+((r01*x12878))+(((-1.0)*r02*x12875)));
evalcond[4]=((1.0)+(((-1.0)*x12872*x12875))+((r01*x12877))+((r02*x12871)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12875))+((r11*x12878))+(((-1.0)*x12874*x12876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12879=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12879.valid){
continue;
}
CheckValue<IkReal> x12880 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12879.value)))+(x12880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12881=IKcos(j4);
IkReal x12882=IKsin(j4);
IkReal x12883=(cj5*r00);
IkReal x12884=(cj5*r20);
IkReal x12885=(cj5*r10);
IkReal x12886=((1.0)*x12881);
IkReal x12887=((1.0)*x12882);
IkReal x12888=(sj5*x12881);
IkReal x12889=(sj5*x12882);
evalcond[0]=((((-1.0)*x12884*x12886))+((r22*x12882))+((r21*x12888)));
evalcond[1]=((((-1.0)*x12885*x12886))+((r12*x12882))+((r11*x12888)));
evalcond[2]=((((-1.0)*r22*x12886))+(((-1.0)*x12884*x12887))+((r21*x12889)));
evalcond[3]=((((-1.0)*r02*x12886))+(((-1.0)*x12883*x12887))+((r01*x12889)));
evalcond[4]=((1.0)+(((-1.0)*x12883*x12886))+((r01*x12888))+((r02*x12882)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12886))+(((-1.0)*x12885*x12887))+((r11*x12889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12890=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12890;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12890);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12891=((1.0)*cj5);
IkReal x12892=((((-1.0)*r21*x12891))+(((-1.0)*r20*sj5)));
j4eval[0]=x12892;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12891))))));
j4eval[2]=IKsign(x12892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12893=cj5*cj5;
IkReal x12894=(r11*r21);
IkReal x12895=((1.0)*r20);
IkReal x12896=(cj5*sj5);
IkReal x12897=((((-1.0)*x12894))+(((-1.0)*r12*r22))+((r11*r20*x12896))+(((-1.0)*r10*x12893*x12895))+((r10*r21*x12896))+((x12893*x12894)));
j4eval[0]=x12897;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12895))))));
j4eval[2]=IKsign(x12897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12898=cj5*cj5;
IkReal x12899=(r21*sj5);
IkReal x12900=(r11*r21);
IkReal x12901=((1.0)*r20);
CheckValue<IkReal> x12902 = IKatan2WithCheck(IkReal((x12899+(((-1.0)*cj5*x12901)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12902.valid){
continue;
}
CheckValue<IkReal> x12903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12898*x12901))+((cj5*r10*x12899))+(((-1.0)*r12*r22))+(((-1.0)*x12900))+((x12898*x12900))+((cj5*r11*r20*sj5)))),-1);
if(!x12903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12902.value)+(((1.5707963267949)*(x12903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12904=IKcos(j4);
IkReal x12905=IKsin(j4);
IkReal x12906=(cj5*r00);
IkReal x12907=(cj5*r20);
IkReal x12908=(cj5*r10);
IkReal x12909=((1.0)*x12904);
IkReal x12910=((1.0)*x12905);
IkReal x12911=(sj5*x12904);
IkReal x12912=(sj5*x12905);
evalcond[0]=((((-1.0)*x12907*x12909))+((r21*x12911))+((r22*x12905)));
evalcond[1]=((((-1.0)*x12908*x12909))+((r12*x12905))+((r11*x12911)));
evalcond[2]=(((r21*x12912))+(((-1.0)*x12907*x12910))+(((-1.0)*r22*x12909)));
evalcond[3]=((((-1.0)*r02*x12909))+(((-1.0)*x12906*x12910))+((r01*x12912)));
evalcond[4]=((-1.0)+(((-1.0)*x12906*x12909))+((r02*x12905))+((r01*x12911)));
evalcond[5]=((1.0)+(((-1.0)*x12908*x12910))+(((-1.0)*r12*x12909))+((r11*x12912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12913=((1.0)*cj5);
CheckValue<IkReal> x12914=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12913))+(((-1.0)*r20*sj5)))),-1);
if(!x12914.valid){
continue;
}
CheckValue<IkReal> x12915 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12913))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12914.value)))+(x12915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12916=IKcos(j4);
IkReal x12917=IKsin(j4);
IkReal x12918=(cj5*r00);
IkReal x12919=(cj5*r20);
IkReal x12920=(cj5*r10);
IkReal x12921=((1.0)*x12916);
IkReal x12922=((1.0)*x12917);
IkReal x12923=(sj5*x12916);
IkReal x12924=(sj5*x12917);
evalcond[0]=((((-1.0)*x12919*x12921))+((r21*x12923))+((r22*x12917)));
evalcond[1]=(((r11*x12923))+((r12*x12917))+(((-1.0)*x12920*x12921)));
evalcond[2]=((((-1.0)*x12919*x12922))+((r21*x12924))+(((-1.0)*r22*x12921)));
evalcond[3]=((((-1.0)*r02*x12921))+(((-1.0)*x12918*x12922))+((r01*x12924)));
evalcond[4]=((-1.0)+(((-1.0)*x12918*x12921))+((r02*x12917))+((r01*x12923)));
evalcond[5]=((1.0)+((r11*x12924))+(((-1.0)*r12*x12921))+(((-1.0)*x12920*x12922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12925 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12925.valid){
continue;
}
CheckValue<IkReal> x12926=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12925.value)+(((1.5707963267949)*(x12926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12927=IKcos(j4);
IkReal x12928=IKsin(j4);
IkReal x12929=(cj5*r00);
IkReal x12930=(cj5*r20);
IkReal x12931=(cj5*r10);
IkReal x12932=((1.0)*x12927);
IkReal x12933=((1.0)*x12928);
IkReal x12934=(sj5*x12927);
IkReal x12935=(sj5*x12928);
evalcond[0]=((((-1.0)*x12930*x12932))+((r22*x12928))+((r21*x12934)));
evalcond[1]=(((r11*x12934))+(((-1.0)*x12931*x12932))+((r12*x12928)));
evalcond[2]=((((-1.0)*x12930*x12933))+(((-1.0)*r22*x12932))+((r21*x12935)));
evalcond[3]=((((-1.0)*r02*x12932))+(((-1.0)*x12929*x12933))+((r01*x12935)));
evalcond[4]=((-1.0)+(((-1.0)*x12929*x12932))+((r02*x12928))+((r01*x12934)));
evalcond[5]=((1.0)+((r11*x12935))+(((-1.0)*r12*x12932))+(((-1.0)*x12931*x12933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12936=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12936;
j4eval[1]=IKsign(x12936);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12937=((1.0)*cj5);
IkReal x12938=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12937)));
j4eval[0]=x12938;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12937))+((r21*sj5))))));
j4eval[2]=IKsign(x12938);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12939=cj5*cj5;
IkReal x12940=(r11*r21);
IkReal x12941=((1.0)*r20);
IkReal x12942=(cj5*sj5);
IkReal x12943=((((-1.0)*r10*x12939*x12941))+((x12939*x12940))+(((-1.0)*r12*r22))+((r10*r21*x12942))+(((-1.0)*x12940))+((r11*r20*x12942)));
j4eval[0]=x12943;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12941))+((r21*sj5))))));
j4eval[2]=IKsign(x12943);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12944=cj5*cj5;
IkReal x12945=(r21*sj5);
IkReal x12946=(r11*r21);
IkReal x12947=((1.0)*r20);
CheckValue<IkReal> x12948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12944*x12946))+(((-1.0)*x12946))+((cj5*r10*x12945))+((cj5*r11*r20*sj5))+(((-1.0)*r10*x12944*x12947)))),-1);
if(!x12948.valid){
continue;
}
CheckValue<IkReal> x12949 = IKatan2WithCheck(IkReal((x12945+(((-1.0)*cj5*x12947)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12948.value)))+(x12949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12950=IKcos(j4);
IkReal x12951=IKsin(j4);
IkReal x12952=(cj5*r00);
IkReal x12953=(cj5*r20);
IkReal x12954=(cj5*r10);
IkReal x12955=((1.0)*x12950);
IkReal x12956=((1.0)*x12951);
IkReal x12957=(sj5*x12950);
IkReal x12958=(sj5*x12951);
evalcond[0]=(((r22*x12951))+(((-1.0)*x12953*x12955))+((r21*x12957)));
evalcond[1]=((((-1.0)*x12954*x12955))+((r12*x12951))+((r11*x12957)));
evalcond[2]=((((-1.0)*x12953*x12956))+((r21*x12958))+(((-1.0)*r22*x12955)));
evalcond[3]=((((-1.0)*x12952*x12956))+((r01*x12958))+(((-1.0)*r02*x12955)));
evalcond[4]=((1.0)+(((-1.0)*x12952*x12955))+((r01*x12957))+((r02*x12951)));
evalcond[5]=((1.0)+(((-1.0)*x12954*x12956))+(((-1.0)*r12*x12955))+((r11*x12958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12959=((1.0)*cj5);
CheckValue<IkReal> x12960 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12959)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12960.valid){
continue;
}
CheckValue<IkReal> x12961=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12959)))),-1);
if(!x12961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12960.value)+(((1.5707963267949)*(x12961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12962=IKcos(j4);
IkReal x12963=IKsin(j4);
IkReal x12964=(cj5*r00);
IkReal x12965=(cj5*r20);
IkReal x12966=(cj5*r10);
IkReal x12967=((1.0)*x12962);
IkReal x12968=((1.0)*x12963);
IkReal x12969=(sj5*x12962);
IkReal x12970=(sj5*x12963);
evalcond[0]=((((-1.0)*x12965*x12967))+((r22*x12963))+((r21*x12969)));
evalcond[1]=((((-1.0)*x12966*x12967))+((r11*x12969))+((r12*x12963)));
evalcond[2]=((((-1.0)*x12965*x12968))+(((-1.0)*r22*x12967))+((r21*x12970)));
evalcond[3]=(((r01*x12970))+(((-1.0)*r02*x12967))+(((-1.0)*x12964*x12968)));
evalcond[4]=((1.0)+((r01*x12969))+((r02*x12963))+(((-1.0)*x12964*x12967)));
evalcond[5]=((1.0)+(((-1.0)*x12966*x12968))+(((-1.0)*r12*x12967))+((r11*x12970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12971=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12971.valid){
continue;
}
CheckValue<IkReal> x12972 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12971.value)))+(x12972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12973=IKcos(j4);
IkReal x12974=IKsin(j4);
IkReal x12975=(cj5*r00);
IkReal x12976=(cj5*r20);
IkReal x12977=(cj5*r10);
IkReal x12978=((1.0)*x12973);
IkReal x12979=((1.0)*x12974);
IkReal x12980=(sj5*x12973);
IkReal x12981=(sj5*x12974);
evalcond[0]=((((-1.0)*x12976*x12978))+((r21*x12980))+((r22*x12974)));
evalcond[1]=(((r11*x12980))+((r12*x12974))+(((-1.0)*x12977*x12978)));
evalcond[2]=((((-1.0)*x12976*x12979))+((r21*x12981))+(((-1.0)*r22*x12978)));
evalcond[3]=(((r01*x12981))+(((-1.0)*r02*x12978))+(((-1.0)*x12975*x12979)));
evalcond[4]=((1.0)+((r02*x12974))+((r01*x12980))+(((-1.0)*x12975*x12978)));
evalcond[5]=((1.0)+((r11*x12981))+(((-1.0)*r12*x12978))+(((-1.0)*x12977*x12979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12982=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12982;
j4eval[1]=IKsign(x12982);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12983=((1.0)*cj5);
IkReal x12984=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12983)));
j4eval[0]=x12984;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12983))))));
j4eval[2]=IKsign(x12984);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12985=cj5*cj5;
IkReal x12986=(r11*r21);
IkReal x12987=((1.0)*r20);
IkReal x12988=(cj5*sj5);
IkReal x12989=(((r10*r21*x12988))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12985*x12987))+((r11*r20*x12988))+((x12985*x12986))+(((-1.0)*x12986)));
j4eval[0]=x12989;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12987)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12990=cj5*cj5;
IkReal x12991=(r21*sj5);
IkReal x12992=(r11*r21);
IkReal x12993=((1.0)*r20);
CheckValue<IkReal> x12994=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12990*x12993))+(((-1.0)*r12*r22))+((x12990*x12992))+((cj5*r10*x12991))+(((-1.0)*x12992))+((cj5*r11*r20*sj5)))),-1);
if(!x12994.valid){
continue;
}
CheckValue<IkReal> x12995 = IKatan2WithCheck(IkReal((x12991+(((-1.0)*cj5*x12993)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12994.value)))+(x12995.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12996=IKcos(j4);
IkReal x12997=IKsin(j4);
IkReal x12998=(cj5*r00);
IkReal x12999=(cj5*r20);
IkReal x13000=(cj5*r10);
IkReal x13001=((1.0)*x12996);
IkReal x13002=((1.0)*x12997);
IkReal x13003=(sj5*x12996);
IkReal x13004=(sj5*x12997);
evalcond[0]=(((r22*x12997))+(((-1.0)*x12999*x13001))+((r21*x13003)));
evalcond[1]=(((r12*x12997))+((r11*x13003))+(((-1.0)*x13000*x13001)));
evalcond[2]=((((-1.0)*r22*x13001))+(((-1.0)*x12999*x13002))+((r21*x13004)));
evalcond[3]=((((-1.0)*x12998*x13002))+(((-1.0)*r02*x13001))+((r01*x13004)));
evalcond[4]=((1.0)+(((-1.0)*x12998*x13001))+((r02*x12997))+((r01*x13003)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13001))+((r11*x13004))+(((-1.0)*x13000*x13002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13005=((1.0)*cj5);
CheckValue<IkReal> x13006=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13005))+(((-1.0)*r10*sj5)))),-1);
if(!x13006.valid){
continue;
}
CheckValue<IkReal> x13007 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13005)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13006.value)))+(x13007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13008=IKcos(j4);
IkReal x13009=IKsin(j4);
IkReal x13010=(cj5*r00);
IkReal x13011=(cj5*r20);
IkReal x13012=(cj5*r10);
IkReal x13013=((1.0)*x13008);
IkReal x13014=((1.0)*x13009);
IkReal x13015=(sj5*x13008);
IkReal x13016=(sj5*x13009);
evalcond[0]=(((r21*x13015))+(((-1.0)*x13011*x13013))+((r22*x13009)));
evalcond[1]=((((-1.0)*x13012*x13013))+((r12*x13009))+((r11*x13015)));
evalcond[2]=((((-1.0)*r22*x13013))+((r21*x13016))+(((-1.0)*x13011*x13014)));
evalcond[3]=(((r01*x13016))+(((-1.0)*x13010*x13014))+(((-1.0)*r02*x13013)));
evalcond[4]=((1.0)+((r01*x13015))+((r02*x13009))+(((-1.0)*x13010*x13013)));
evalcond[5]=((1.0)+(((-1.0)*x13012*x13014))+((r11*x13016))+(((-1.0)*r12*x13013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13017=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13017.valid){
continue;
}
CheckValue<IkReal> x13018 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13017.value)))+(x13018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13019=IKcos(j4);
IkReal x13020=IKsin(j4);
IkReal x13021=(cj5*r00);
IkReal x13022=(cj5*r20);
IkReal x13023=(cj5*r10);
IkReal x13024=((1.0)*x13019);
IkReal x13025=((1.0)*x13020);
IkReal x13026=(sj5*x13019);
IkReal x13027=(sj5*x13020);
evalcond[0]=(((r21*x13026))+((r22*x13020))+(((-1.0)*x13022*x13024)));
evalcond[1]=(((r11*x13026))+((r12*x13020))+(((-1.0)*x13023*x13024)));
evalcond[2]=((((-1.0)*r22*x13024))+((r21*x13027))+(((-1.0)*x13022*x13025)));
evalcond[3]=(((r01*x13027))+(((-1.0)*x13021*x13025))+(((-1.0)*r02*x13024)));
evalcond[4]=((1.0)+((r01*x13026))+(((-1.0)*x13021*x13024))+((r02*x13020)));
evalcond[5]=((1.0)+((r11*x13027))+(((-1.0)*x13023*x13025))+(((-1.0)*r12*x13024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13028=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13028;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13028);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13029=((1.0)*cj5);
IkReal x13030=((((-1.0)*r21*x13029))+(((-1.0)*r20*sj5)));
j4eval[0]=x13030;
j4eval[1]=((IKabs(((((-1.0)*r10*x13029))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13031=cj5*cj5;
IkReal x13032=(r11*r21);
IkReal x13033=((1.0)*r20);
IkReal x13034=(cj5*sj5);
IkReal x13035=((((-1.0)*x13032))+(((-1.0)*r12*r22))+((x13031*x13032))+((r10*r21*x13034))+(((-1.0)*r10*x13031*x13033))+((r11*r20*x13034)));
j4eval[0]=x13035;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13033))))));
j4eval[2]=IKsign(x13035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13036=cj5*cj5;
IkReal x13037=(r21*sj5);
IkReal x13038=(r11*r21);
IkReal x13039=((1.0)*r20);
CheckValue<IkReal> x13040 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13039))+x13037)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13040.valid){
continue;
}
CheckValue<IkReal> x13041=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13038))+((x13036*x13038))+(((-1.0)*r10*x13036*x13039))+(((-1.0)*r12*r22))+((cj5*r10*x13037))+((cj5*r11*r20*sj5)))),-1);
if(!x13041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13040.value)+(((1.5707963267949)*(x13041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13042=IKcos(j4);
IkReal x13043=IKsin(j4);
IkReal x13044=(cj5*r00);
IkReal x13045=(cj5*r20);
IkReal x13046=(cj5*r10);
IkReal x13047=((1.0)*x13042);
IkReal x13048=((1.0)*x13043);
IkReal x13049=(sj5*x13042);
IkReal x13050=(sj5*x13043);
evalcond[0]=(((r21*x13049))+(((-1.0)*x13045*x13047))+((r22*x13043)));
evalcond[1]=(((r11*x13049))+(((-1.0)*x13046*x13047))+((r12*x13043)));
evalcond[2]=((((-1.0)*x13045*x13048))+((r21*x13050))+(((-1.0)*r22*x13047)));
evalcond[3]=((((-1.0)*r02*x13047))+(((-1.0)*x13044*x13048))+((r01*x13050)));
evalcond[4]=((-1.0)+((r02*x13043))+((r01*x13049))+(((-1.0)*x13044*x13047)));
evalcond[5]=((1.0)+(((-1.0)*x13046*x13048))+(((-1.0)*r12*x13047))+((r11*x13050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13051=((1.0)*cj5);
CheckValue<IkReal> x13052 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13051)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13052.valid){
continue;
}
CheckValue<IkReal> x13053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13051))+(((-1.0)*r20*sj5)))),-1);
if(!x13053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13052.value)+(((1.5707963267949)*(x13053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13054=IKcos(j4);
IkReal x13055=IKsin(j4);
IkReal x13056=(cj5*r00);
IkReal x13057=(cj5*r20);
IkReal x13058=(cj5*r10);
IkReal x13059=((1.0)*x13054);
IkReal x13060=((1.0)*x13055);
IkReal x13061=(sj5*x13054);
IkReal x13062=(sj5*x13055);
evalcond[0]=((((-1.0)*x13057*x13059))+((r22*x13055))+((r21*x13061)));
evalcond[1]=(((r12*x13055))+((r11*x13061))+(((-1.0)*x13058*x13059)));
evalcond[2]=((((-1.0)*x13057*x13060))+((r21*x13062))+(((-1.0)*r22*x13059)));
evalcond[3]=((((-1.0)*x13056*x13060))+(((-1.0)*r02*x13059))+((r01*x13062)));
evalcond[4]=((-1.0)+((r02*x13055))+(((-1.0)*x13056*x13059))+((r01*x13061)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13059))+((r11*x13062))+(((-1.0)*x13058*x13060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13063 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13063.valid){
continue;
}
CheckValue<IkReal> x13064=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13063.value)+(((1.5707963267949)*(x13064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13065=IKcos(j4);
IkReal x13066=IKsin(j4);
IkReal x13067=(cj5*r00);
IkReal x13068=(cj5*r20);
IkReal x13069=(cj5*r10);
IkReal x13070=((1.0)*x13065);
IkReal x13071=((1.0)*x13066);
IkReal x13072=(sj5*x13065);
IkReal x13073=(sj5*x13066);
evalcond[0]=(((r21*x13072))+(((-1.0)*x13068*x13070))+((r22*x13066)));
evalcond[1]=(((r12*x13066))+(((-1.0)*x13069*x13070))+((r11*x13072)));
evalcond[2]=(((r21*x13073))+(((-1.0)*x13068*x13071))+(((-1.0)*r22*x13070)));
evalcond[3]=((((-1.0)*r02*x13070))+(((-1.0)*x13067*x13071))+((r01*x13073)));
evalcond[4]=((-1.0)+(((-1.0)*x13067*x13070))+((r02*x13066))+((r01*x13072)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13070))+(((-1.0)*x13069*x13071))+((r11*x13073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13074=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13074;
j4eval[1]=IKsign(x13074);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13075=((1.0)*cj5);
IkReal x13076=((((-1.0)*r11*x13075))+(((-1.0)*r10*sj5)));
j4eval[0]=x13076;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13075)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13076);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13077=cj5*cj5;
IkReal x13078=(r11*r21);
IkReal x13079=((1.0)*r20);
IkReal x13080=(cj5*sj5);
IkReal x13081=(((x13077*x13078))+(((-1.0)*r10*x13077*x13079))+(((-1.0)*r12*r22))+((r11*r20*x13080))+((r10*r21*x13080))+(((-1.0)*x13078)));
j4eval[0]=x13081;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13079)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13081);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13082=cj5*cj5;
IkReal x13083=(r21*sj5);
IkReal x13084=(r11*r21);
IkReal x13085=((1.0)*r20);
CheckValue<IkReal> x13086 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13085))+x13083)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13086.valid){
continue;
}
CheckValue<IkReal> x13087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13082*x13085))+(((-1.0)*r12*r22))+(((-1.0)*x13084))+((x13082*x13084))+((cj5*r11*r20*sj5))+((cj5*r10*x13083)))),-1);
if(!x13087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13086.value)+(((1.5707963267949)*(x13087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13088=IKcos(j4);
IkReal x13089=IKsin(j4);
IkReal x13090=(cj5*r00);
IkReal x13091=(cj5*r20);
IkReal x13092=(cj5*r10);
IkReal x13093=((1.0)*x13088);
IkReal x13094=((1.0)*x13089);
IkReal x13095=(sj5*x13088);
IkReal x13096=(sj5*x13089);
evalcond[0]=(((r22*x13089))+(((-1.0)*x13091*x13093))+((r21*x13095)));
evalcond[1]=(((r11*x13095))+((r12*x13089))+(((-1.0)*x13092*x13093)));
evalcond[2]=((((-1.0)*r22*x13093))+(((-1.0)*x13091*x13094))+((r21*x13096)));
evalcond[3]=((((-1.0)*x13090*x13094))+((r01*x13096))+(((-1.0)*r02*x13093)));
evalcond[4]=((1.0)+((r02*x13089))+(((-1.0)*x13090*x13093))+((r01*x13095)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13093))+((r11*x13096))+(((-1.0)*x13092*x13094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13097=((1.0)*cj5);
CheckValue<IkReal> x13098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13097)))),-1);
if(!x13098.valid){
continue;
}
CheckValue<IkReal> x13099 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13097))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13098.value)))+(x13099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13100=IKcos(j4);
IkReal x13101=IKsin(j4);
IkReal x13102=(cj5*r00);
IkReal x13103=(cj5*r20);
IkReal x13104=(cj5*r10);
IkReal x13105=((1.0)*x13100);
IkReal x13106=((1.0)*x13101);
IkReal x13107=(sj5*x13100);
IkReal x13108=(sj5*x13101);
evalcond[0]=(((r22*x13101))+(((-1.0)*x13103*x13105))+((r21*x13107)));
evalcond[1]=((((-1.0)*x13104*x13105))+((r12*x13101))+((r11*x13107)));
evalcond[2]=((((-1.0)*x13103*x13106))+((r21*x13108))+(((-1.0)*r22*x13105)));
evalcond[3]=(((r01*x13108))+(((-1.0)*x13102*x13106))+(((-1.0)*r02*x13105)));
evalcond[4]=((1.0)+((r01*x13107))+(((-1.0)*x13102*x13105))+((r02*x13101)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13105))+(((-1.0)*x13104*x13106))+((r11*x13108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13109=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13109.valid){
continue;
}
CheckValue<IkReal> x13110 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13109.value)))+(x13110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13111=IKcos(j4);
IkReal x13112=IKsin(j4);
IkReal x13113=(cj5*r00);
IkReal x13114=(cj5*r20);
IkReal x13115=(cj5*r10);
IkReal x13116=((1.0)*x13111);
IkReal x13117=((1.0)*x13112);
IkReal x13118=(sj5*x13111);
IkReal x13119=(sj5*x13112);
evalcond[0]=(((r22*x13112))+((r21*x13118))+(((-1.0)*x13114*x13116)));
evalcond[1]=(((r12*x13112))+(((-1.0)*x13115*x13116))+((r11*x13118)));
evalcond[2]=(((r21*x13119))+(((-1.0)*x13114*x13117))+(((-1.0)*r22*x13116)));
evalcond[3]=((((-1.0)*r02*x13116))+(((-1.0)*x13113*x13117))+((r01*x13119)));
evalcond[4]=((1.0)+((r02*x13112))+(((-1.0)*x13113*x13116))+((r01*x13118)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13116))+(((-1.0)*x13115*x13117))+((r11*x13119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13120=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13120;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13120);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13121=((1.0)*cj5);
IkReal x13122=((((-1.0)*r21*x13121))+(((-1.0)*r20*sj5)));
j4eval[0]=x13122;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x13121))))));
j4eval[2]=IKsign(x13122);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13123=cj5*cj5;
IkReal x13124=(r11*r21);
IkReal x13125=((1.0)*r20);
IkReal x13126=(cj5*sj5);
IkReal x13127=((((-1.0)*r12*r22))+((r10*r21*x13126))+((x13123*x13124))+((r11*r20*x13126))+(((-1.0)*r10*x13123*x13125))+(((-1.0)*x13124)));
j4eval[0]=x13127;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13125))))));
j4eval[2]=IKsign(x13127);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13128=cj5*cj5;
IkReal x13129=(r21*sj5);
IkReal x13130=(r11*r21);
IkReal x13131=((1.0)*r20);
CheckValue<IkReal> x13132 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13131))+x13129)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13132.valid){
continue;
}
CheckValue<IkReal> x13133=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13129))+(((-1.0)*r12*r22))+((x13128*x13130))+(((-1.0)*r10*x13128*x13131))+(((-1.0)*x13130))+((cj5*r11*r20*sj5)))),-1);
if(!x13133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13132.value)+(((1.5707963267949)*(x13133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13134=IKcos(j4);
IkReal x13135=IKsin(j4);
IkReal x13136=(cj5*r00);
IkReal x13137=(cj5*r20);
IkReal x13138=(cj5*r10);
IkReal x13139=((1.0)*x13134);
IkReal x13140=((1.0)*x13135);
IkReal x13141=(sj5*x13134);
IkReal x13142=(sj5*x13135);
evalcond[0]=((((-1.0)*x13137*x13139))+((r21*x13141))+((r22*x13135)));
evalcond[1]=(((r12*x13135))+((r11*x13141))+(((-1.0)*x13138*x13139)));
evalcond[2]=((((-1.0)*x13137*x13140))+(((-1.0)*r22*x13139))+((r21*x13142)));
evalcond[3]=((((-1.0)*x13136*x13140))+((r01*x13142))+(((-1.0)*r02*x13139)));
evalcond[4]=((-1.0)+(((-1.0)*x13136*x13139))+((r02*x13135))+((r01*x13141)));
evalcond[5]=((1.0)+(((-1.0)*x13138*x13140))+((r11*x13142))+(((-1.0)*r12*x13139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13143=((1.0)*cj5);
CheckValue<IkReal> x13144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13143))+(((-1.0)*r20*sj5)))),-1);
if(!x13144.valid){
continue;
}
CheckValue<IkReal> x13145 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13143))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13144.value)))+(x13145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13146=IKcos(j4);
IkReal x13147=IKsin(j4);
IkReal x13148=(cj5*r00);
IkReal x13149=(cj5*r20);
IkReal x13150=(cj5*r10);
IkReal x13151=((1.0)*x13146);
IkReal x13152=((1.0)*x13147);
IkReal x13153=(sj5*x13146);
IkReal x13154=(sj5*x13147);
evalcond[0]=(((r21*x13153))+((r22*x13147))+(((-1.0)*x13149*x13151)));
evalcond[1]=(((r12*x13147))+((r11*x13153))+(((-1.0)*x13150*x13151)));
evalcond[2]=(((r21*x13154))+(((-1.0)*r22*x13151))+(((-1.0)*x13149*x13152)));
evalcond[3]=((((-1.0)*x13148*x13152))+(((-1.0)*r02*x13151))+((r01*x13154)));
evalcond[4]=((-1.0)+(((-1.0)*x13148*x13151))+((r02*x13147))+((r01*x13153)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13151))+((r11*x13154))+(((-1.0)*x13150*x13152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13155 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13155.valid){
continue;
}
CheckValue<IkReal> x13156=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13155.value)+(((1.5707963267949)*(x13156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13157=IKcos(j4);
IkReal x13158=IKsin(j4);
IkReal x13159=(cj5*r00);
IkReal x13160=(cj5*r20);
IkReal x13161=(cj5*r10);
IkReal x13162=((1.0)*x13157);
IkReal x13163=((1.0)*x13158);
IkReal x13164=(sj5*x13157);
IkReal x13165=(sj5*x13158);
evalcond[0]=((((-1.0)*x13160*x13162))+((r22*x13158))+((r21*x13164)));
evalcond[1]=((((-1.0)*x13161*x13162))+((r11*x13164))+((r12*x13158)));
evalcond[2]=((((-1.0)*x13160*x13163))+(((-1.0)*r22*x13162))+((r21*x13165)));
evalcond[3]=(((r01*x13165))+(((-1.0)*x13159*x13163))+(((-1.0)*r02*x13162)));
evalcond[4]=((-1.0)+((r02*x13158))+((r01*x13164))+(((-1.0)*x13159*x13162)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13162))+(((-1.0)*x13161*x13163))+((r11*x13165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13166=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13166);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13166);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13167=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13167);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13167);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13168=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13168)));
j4eval[1]=((((-1.0)*r00*x13168))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13169=((1.0)*cj5);
CheckValue<IkReal> x13170=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13169))),-1);
if(!x13170.valid){
continue;
}
CheckValue<IkReal> x13171=IKPowWithIntegerCheck(((((-1.0)*r00*x13169))+((r01*sj5))),-1);
if(!x13171.valid){
continue;
}
if( IKabs(((-1.0)*(x13170.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13171.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13170.value)))+IKsqr(((x13171.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13170.value)), ((x13171.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13172=IKsin(j4);
IkReal x13173=IKcos(j4);
IkReal x13174=((1.0)*cj5);
IkReal x13175=((1.0)*cj2);
IkReal x13176=(sj5*x13173);
IkReal x13177=(sj5*x13172);
evalcond[0]=((-1.0)*r22*x13173);
evalcond[1]=((((-1.0)*cj1*x13175))+((sj1*sj2))+((r22*x13172)));
evalcond[2]=(((r01*x13177))+(((-1.0)*r00*x13172*x13174)));
evalcond[3]=((((-1.0)*r10*x13173*x13174))+((r11*x13176)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13172*x13174))+((r11*x13177)));
evalcond[5]=(((r01*x13176))+(((-1.0)*sj1*x13175))+(((-1.0)*r00*x13173*x13174))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13178=IKPowWithIntegerCheck(r22,-1);
if(!x13178.valid){
continue;
}
CheckValue<IkReal> x13179=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13179.valid){
continue;
}
if( IKabs(((x13178.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13179.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13178.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13179.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13178.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13179.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13180=IKsin(j4);
IkReal x13181=IKcos(j4);
IkReal x13182=((1.0)*cj5);
IkReal x13183=((1.0)*cj2);
IkReal x13184=(sj5*x13181);
IkReal x13185=(sj5*x13180);
evalcond[0]=((-1.0)*r22*x13181);
evalcond[1]=(((r22*x13180))+((sj1*sj2))+(((-1.0)*cj1*x13183)));
evalcond[2]=(((r01*x13185))+(((-1.0)*r00*x13180*x13182)));
evalcond[3]=(((r11*x13184))+(((-1.0)*r10*x13181*x13182)));
evalcond[4]=((1.0)+((r11*x13185))+(((-1.0)*r10*x13180*x13182)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x13184))+(((-1.0)*sj1*x13183))+(((-1.0)*r00*x13181*x13182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13186=(sj1*sj2);
IkReal x13187=(cj5*r10);
IkReal x13188=(r11*sj5);
IkReal x13189=(cj1*cj2);
CheckValue<IkReal> x13190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13190.valid){
continue;
}
CheckValue<IkReal> x13191 = IKatan2WithCheck(IkReal(((((-1.0)*x13186*x13187))+((x13186*x13188))+((x13187*x13189))+(((-1.0)*x13188*x13189)))),IkReal((((r12*x13189))+(((-1.0)*r12*x13186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13190.value)))+(x13191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13192=IKcos(j4);
IkReal x13193=IKsin(j4);
IkReal x13194=(cj5*r00);
IkReal x13195=(cj5*r10);
IkReal x13196=(r21*sj5);
IkReal x13197=((1.0)*cj2);
IkReal x13198=(cj5*r20);
IkReal x13199=((1.0)*x13192);
IkReal x13200=((1.0)*x13193);
IkReal x13201=(sj5*x13193);
IkReal x13202=(sj5*x13192);
evalcond[0]=(((r12*x13193))+(((-1.0)*x13195*x13199))+((r11*x13202)));
evalcond[1]=((((-1.0)*x13198*x13200))+(((-1.0)*r22*x13199))+((x13193*x13196)));
evalcond[2]=(((r01*x13201))+(((-1.0)*r02*x13199))+(((-1.0)*x13194*x13200)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13199))+(((-1.0)*x13195*x13200))+((r11*x13201)));
evalcond[4]=((((-1.0)*x13198*x13199))+(((-1.0)*cj1*x13197))+((sj1*sj2))+((x13192*x13196))+((r22*x13193)));
evalcond[5]=(((r01*x13202))+((r02*x13193))+(((-1.0)*x13194*x13199))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13203=((1.0)*cj5);
CheckValue<IkReal> x13204=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13203)))),-1);
if(!x13204.valid){
continue;
}
CheckValue<IkReal> x13205 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13204.value)))+(x13205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13206=IKcos(j4);
IkReal x13207=IKsin(j4);
IkReal x13208=(cj5*r00);
IkReal x13209=(cj5*r10);
IkReal x13210=(r21*sj5);
IkReal x13211=((1.0)*cj2);
IkReal x13212=(cj5*r20);
IkReal x13213=((1.0)*x13206);
IkReal x13214=((1.0)*x13207);
IkReal x13215=(sj5*x13207);
IkReal x13216=(sj5*x13206);
evalcond[0]=(((r11*x13216))+((r12*x13207))+(((-1.0)*x13209*x13213)));
evalcond[1]=((((-1.0)*r22*x13213))+((x13207*x13210))+(((-1.0)*x13212*x13214)));
evalcond[2]=(((r01*x13215))+(((-1.0)*x13208*x13214))+(((-1.0)*r02*x13213)));
evalcond[3]=((1.0)+((r11*x13215))+(((-1.0)*r12*x13213))+(((-1.0)*x13209*x13214)));
evalcond[4]=((((-1.0)*cj1*x13211))+((x13206*x13210))+((sj1*sj2))+((r22*x13207))+(((-1.0)*x13212*x13213)));
evalcond[5]=(((r01*x13216))+(((-1.0)*x13208*x13213))+((r02*x13207))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13217=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13217.valid){
continue;
}
CheckValue<IkReal> x13218 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13217.value)))+(x13218.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13219=IKcos(j4);
IkReal x13220=IKsin(j4);
IkReal x13221=(cj5*r00);
IkReal x13222=(cj5*r10);
IkReal x13223=(r21*sj5);
IkReal x13224=((1.0)*cj2);
IkReal x13225=(cj5*r20);
IkReal x13226=((1.0)*x13219);
IkReal x13227=((1.0)*x13220);
IkReal x13228=(sj5*x13220);
IkReal x13229=(sj5*x13219);
evalcond[0]=(((r11*x13229))+((r12*x13220))+(((-1.0)*x13222*x13226)));
evalcond[1]=((((-1.0)*r22*x13226))+((x13220*x13223))+(((-1.0)*x13225*x13227)));
evalcond[2]=((((-1.0)*x13221*x13227))+(((-1.0)*r02*x13226))+((r01*x13228)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13226))+((r11*x13228))+(((-1.0)*x13222*x13227)));
evalcond[4]=((((-1.0)*cj1*x13224))+((r22*x13220))+((x13219*x13223))+((sj1*sj2))+(((-1.0)*x13225*x13226)));
evalcond[5]=(((r02*x13220))+(((-1.0)*x13221*x13226))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13224))+((r01*x13229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13230=((-1.0)*r00);
IkReal x13232 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13232)==0){
continue;
}
IkReal x13231=pow(x13232,-0.5);
CheckValue<IkReal> x13233 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13230),IKFAST_ATAN2_MAGTHRESH);
if(!x13233.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13233.value));
IkReal gconst19=(r01*x13231);
IkReal gconst20=(x13230*x13231);
CheckValue<IkReal> x13234 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13234.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13234.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13235=((-1.0)*r00);
IkReal x13236=x13231;
CheckValue<IkReal> x13238 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13235),IKFAST_ATAN2_MAGTHRESH);
if(!x13238.valid){
continue;
}
IkReal x13237=((-1.0)*(x13238.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13237;
IkReal gconst18=x13237;
IkReal gconst19=(r01*x13236);
IkReal gconst20=(x13235*x13236);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13239=((-1.0)*r00);
IkReal x13240=x13231;
CheckValue<IkReal> x13242 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13239),IKFAST_ATAN2_MAGTHRESH);
if(!x13242.valid){
continue;
}
IkReal x13241=((-1.0)*(x13242.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13241;
IkReal gconst18=x13241;
IkReal gconst19=(r01*x13240);
IkReal gconst20=(x13239*x13240);
CheckValue<IkReal> x13250=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13250.valid){
continue;
}
IkReal x13243=x13250.value;
IkReal x13244=(sj3*x13243);
IkReal x13245=(r11*x13244);
IkReal x13246=(r21*x13244);
IkReal x13247=(r20*x13244);
IkReal x13248=(r10*x13244);
IkReal x13249=(r00*r01*x13244);
j4eval[0]=IKsign((((r10*x13247*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r10*x13246))+((r21*x13245*(r01*r01)))+((r00*r01*r20*x13245))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13251=gconst19*gconst19;
IkReal x13252=gconst20*gconst20;
IkReal x13253=(gconst20*sj3);
IkReal x13254=((1.0)*cj3);
IkReal x13255=(r10*sj3);
IkReal x13256=(gconst19*r21);
IkReal x13257=(r11*r20);
IkReal x13258=(cj3*gconst20);
IkReal x13259=((1.0)*r10*r20);
IkReal x13260=(r21*x13251);
CheckValue<IkReal> x13261=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x13252*x13254))+(((-1.0)*r12*r22*x13254))+((gconst19*x13257*x13258))+((r10*x13256*x13258))+(((-1.0)*r11*x13254*x13260)))),-1);
if(!x13261.valid){
continue;
}
CheckValue<IkReal> x13262 = IKatan2WithCheck(IkReal((((gconst19*r22*x13255))+((r11*r22*x13253)))),IkReal((((x13255*x13260))+(((-1.0)*gconst19*x13253*x13259))+((r11*x13253*x13256))+(((-1.0)*sj3*x13252*x13257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13261.value)))+(x13262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13263=IKsin(j4);
IkReal x13264=IKcos(j4);
IkReal x13265=(sj1*sj2);
IkReal x13266=(gconst20*sj3);
IkReal x13267=(gconst19*r21);
IkReal x13268=(gconst20*r10);
IkReal x13269=(cj3*gconst19);
IkReal x13270=(gconst19*sj3);
IkReal x13271=((1.0)*cj1);
IkReal x13272=(cj3*gconst20);
IkReal x13273=(cj2*sj1);
IkReal x13274=(cj2*x13271);
IkReal x13275=((1.0)*x13264);
IkReal x13276=((1.0)*x13263);
IkReal x13277=(cj3*x13263);
IkReal x13278=(gconst19*x13263);
evalcond[0]=((((-1.0)*r22*x13275))+(((-1.0)*gconst20*r20*x13276))+((x13263*x13267)));
evalcond[1]=((((-1.0)*gconst20*r00*x13276))+((r01*x13278))+(((-1.0)*r02*x13275)));
evalcond[2]=((1.0)+(((-1.0)*x13268*x13276))+((r11*x13278))+(((-1.0)*r12*x13275)));
evalcond[3]=(((r11*x13264*x13269))+((r11*x13266))+((r12*x13277))+((r10*x13270))+(((-1.0)*cj3*x13268*x13275)));
evalcond[4]=((((-1.0)*r11*x13270*x13275))+((r11*x13272))+((r10*x13269))+((r10*x13264*x13266))+(((-1.0)*r12*sj3*x13276)));
evalcond[5]=(((r21*x13266))+((r20*x13270))+((cj1*sj2))+((cj3*x13264*x13267))+((r22*x13277))+x13273+(((-1.0)*r20*x13272*x13275)));
evalcond[6]=((((-1.0)*x13274))+(((-1.0)*r00*x13272*x13275))+((r01*x13264*x13269))+((r01*x13266))+((r00*x13270))+((r02*x13277))+x13265);
evalcond[7]=((((-1.0)*x13274))+((r21*x13272))+((r20*x13269))+(((-1.0)*r22*sj3*x13276))+(((-1.0)*sj3*x13267*x13275))+((r20*x13264*x13266))+x13265);
evalcond[8]=((((-1.0)*r01*x13270*x13275))+(((-1.0)*x13273))+((r01*x13272))+((r00*x13269))+(((-1.0)*sj2*x13271))+(((-1.0)*r02*sj3*x13276))+((r00*x13264*x13266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13279=gconst19*gconst19;
IkReal x13280=gconst20*gconst20;
IkReal x13281=(r21*sj3);
IkReal x13282=(cj3*r11);
IkReal x13283=(gconst19*gconst20);
IkReal x13284=((1.0)*r10);
IkReal x13285=(cj3*r10);
IkReal x13286=(r20*x13280);
CheckValue<IkReal> x13287 = IKatan2WithCheck(IkReal((((gconst20*r22*x13282))+((gconst19*r22*x13285)))),IkReal((((r21*x13279*x13285))+(((-1.0)*x13282*x13286))+((r21*x13282*x13283))+(((-1.0)*cj3*r20*x13283*x13284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13287.valid){
continue;
}
CheckValue<IkReal> x13288=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13281*x13283*x13284))+(((-1.0)*r11*r20*sj3*x13283))+((r10*sj3*x13286))+((r11*x13279*x13281))+((r12*r22*sj3)))),-1);
if(!x13288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13287.value)+(((1.5707963267949)*(x13288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13289=IKsin(j4);
IkReal x13290=IKcos(j4);
IkReal x13291=(sj1*sj2);
IkReal x13292=(gconst20*sj3);
IkReal x13293=(gconst19*r21);
IkReal x13294=(gconst20*r10);
IkReal x13295=(cj3*gconst19);
IkReal x13296=(gconst19*sj3);
IkReal x13297=((1.0)*cj1);
IkReal x13298=(cj3*gconst20);
IkReal x13299=(cj2*sj1);
IkReal x13300=(cj2*x13297);
IkReal x13301=((1.0)*x13290);
IkReal x13302=((1.0)*x13289);
IkReal x13303=(cj3*x13289);
IkReal x13304=(gconst19*x13289);
evalcond[0]=((((-1.0)*gconst20*r20*x13302))+(((-1.0)*r22*x13301))+((x13289*x13293)));
evalcond[1]=((((-1.0)*gconst20*r00*x13302))+((r01*x13304))+(((-1.0)*r02*x13301)));
evalcond[2]=((1.0)+(((-1.0)*x13294*x13302))+(((-1.0)*r12*x13301))+((r11*x13304)));
evalcond[3]=(((r11*x13292))+((r12*x13303))+((r11*x13290*x13295))+((r10*x13296))+(((-1.0)*cj3*x13294*x13301)));
evalcond[4]=((((-1.0)*r12*sj3*x13302))+((r11*x13298))+(((-1.0)*r11*x13296*x13301))+((r10*x13295))+((r10*x13290*x13292)));
evalcond[5]=(((r20*x13296))+((cj1*sj2))+(((-1.0)*r20*x13298*x13301))+((r22*x13303))+x13299+((cj3*x13290*x13293))+((r21*x13292)));
evalcond[6]=((((-1.0)*r00*x13298*x13301))+((r01*x13290*x13295))+(((-1.0)*x13300))+x13291+((r02*x13303))+((r00*x13296))+((r01*x13292)));
evalcond[7]=(((r20*x13295))+(((-1.0)*r22*sj3*x13302))+((r20*x13290*x13292))+(((-1.0)*x13300))+(((-1.0)*sj3*x13293*x13301))+x13291+((r21*x13298)));
evalcond[8]=((((-1.0)*r02*sj3*x13302))+(((-1.0)*r01*x13296*x13301))+(((-1.0)*x13299))+(((-1.0)*sj2*x13297))+((r00*x13290*x13292))+((r00*x13295))+((r01*x13298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13305 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13305.valid){
continue;
}
CheckValue<IkReal> x13306=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13305.value)+(((1.5707963267949)*(x13306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13307=IKsin(j4);
IkReal x13308=IKcos(j4);
IkReal x13309=(sj1*sj2);
IkReal x13310=(gconst20*sj3);
IkReal x13311=(gconst19*r21);
IkReal x13312=(gconst20*r10);
IkReal x13313=(cj3*gconst19);
IkReal x13314=(gconst19*sj3);
IkReal x13315=((1.0)*cj1);
IkReal x13316=(cj3*gconst20);
IkReal x13317=(cj2*sj1);
IkReal x13318=(cj2*x13315);
IkReal x13319=((1.0)*x13308);
IkReal x13320=((1.0)*x13307);
IkReal x13321=(cj3*x13307);
IkReal x13322=(gconst19*x13307);
evalcond[0]=((((-1.0)*gconst20*r20*x13320))+((x13307*x13311))+(((-1.0)*r22*x13319)));
evalcond[1]=((((-1.0)*r02*x13319))+((r01*x13322))+(((-1.0)*gconst20*r00*x13320)));
evalcond[2]=((1.0)+(((-1.0)*x13312*x13320))+((r11*x13322))+(((-1.0)*r12*x13319)));
evalcond[3]=(((r12*x13321))+((r11*x13310))+((r10*x13314))+(((-1.0)*cj3*x13312*x13319))+((r11*x13308*x13313)));
evalcond[4]=(((r10*x13308*x13310))+((r11*x13316))+((r10*x13313))+(((-1.0)*r11*x13314*x13319))+(((-1.0)*r12*sj3*x13320)));
evalcond[5]=(((r20*x13314))+((cj1*sj2))+((cj3*x13308*x13311))+(((-1.0)*r20*x13316*x13319))+((r21*x13310))+x13317+((r22*x13321)));
evalcond[6]=(((r02*x13321))+(((-1.0)*r00*x13316*x13319))+((r01*x13310))+((r00*x13314))+((r01*x13308*x13313))+(((-1.0)*x13318))+x13309);
evalcond[7]=(((r20*x13313))+((r20*x13308*x13310))+(((-1.0)*sj3*x13311*x13319))+(((-1.0)*x13318))+((r21*x13316))+(((-1.0)*r22*sj3*x13320))+x13309);
evalcond[8]=((((-1.0)*sj2*x13315))+((r01*x13316))+((r00*x13313))+((r00*x13308*x13310))+(((-1.0)*r02*sj3*x13320))+(((-1.0)*r01*x13314*x13319))+(((-1.0)*x13317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13323=((-1.0)*r01);
IkReal x13325 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13325)==0){
continue;
}
IkReal x13324=pow(x13325,-0.5);
CheckValue<IkReal> x13326 = IKatan2WithCheck(IkReal(x13323),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13326.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13326.value))));
IkReal gconst22=(x13323*x13324);
IkReal gconst23=((1.0)*r00*x13324);
CheckValue<IkReal> x13327 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13327.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13327.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13328=((-1.0)*r01);
CheckValue<IkReal> x13331 = IKatan2WithCheck(IkReal(x13328),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13331.valid){
continue;
}
IkReal x13329=((1.0)*(x13331.value));
IkReal x13330=x13324;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13329)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13329)));
IkReal gconst22=(x13328*x13330);
IkReal gconst23=((1.0)*r00*x13330);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13332=((-1.0)*r01);
CheckValue<IkReal> x13335 = IKatan2WithCheck(IkReal(x13332),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13335.valid){
continue;
}
IkReal x13333=((1.0)*(x13335.value));
IkReal x13334=x13324;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13333)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13333)));
IkReal gconst22=(x13332*x13334);
IkReal gconst23=((1.0)*r00*x13334);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13336=gconst22*gconst22;
IkReal x13337=gconst23*gconst23;
IkReal x13338=(r21*sj3);
IkReal x13339=((1.0)*cj3);
IkReal x13340=(gconst23*r11);
IkReal x13341=(r22*sj3);
IkReal x13342=(gconst22*r10);
IkReal x13343=((1.0)*r20*sj3);
CheckValue<IkReal> x13344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13339))+(((-1.0)*r11*r21*x13336*x13339))+(((-1.0)*r10*r20*x13337*x13339))+((cj3*gconst22*r20*x13340))+((cj3*gconst23*r21*x13342)))),-1);
if(!x13344.valid){
continue;
}
CheckValue<IkReal> x13345 = IKatan2WithCheck(IkReal((((x13341*x13342))+((x13340*x13341)))),IkReal(((((-1.0)*gconst23*x13342*x13343))+((gconst22*x13338*x13340))+(((-1.0)*r11*x13337*x13343))+((r10*x13336*x13338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13344.value)))+(x13345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13346=IKsin(j4);
IkReal x13347=IKcos(j4);
IkReal x13348=(sj1*sj2);
IkReal x13349=(gconst23*sj3);
IkReal x13350=(gconst22*sj3);
IkReal x13351=(cj2*sj1);
IkReal x13352=((1.0)*cj1);
IkReal x13353=(cj3*gconst23);
IkReal x13354=(cj3*gconst22);
IkReal x13355=(cj2*x13352);
IkReal x13356=((1.0)*x13347);
IkReal x13357=(cj3*x13346);
IkReal x13358=(gconst22*x13346);
IkReal x13359=((1.0)*sj3*x13346);
IkReal x13360=(x13347*x13354);
IkReal x13361=((1.0)*gconst23*x13346);
evalcond[0]=((((-1.0)*r22*x13356))+(((-1.0)*r20*x13361))+((r21*x13358)));
evalcond[1]=((((-1.0)*r02*x13356))+(((-1.0)*r00*x13361))+((r01*x13358)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13361))+(((-1.0)*r12*x13356))+((r11*x13358)));
evalcond[3]=(((r11*x13360))+(((-1.0)*r10*x13353*x13356))+((r10*x13350))+((r11*x13349))+((r12*x13357)));
evalcond[4]=((((-1.0)*r12*x13359))+((r10*x13347*x13349))+((r10*x13354))+((r11*x13353))+(((-1.0)*r11*x13350*x13356)));
evalcond[5]=(((r22*x13357))+((cj1*sj2))+((r20*x13350))+(((-1.0)*r20*x13353*x13356))+((r21*x13349))+((r21*x13360))+x13351);
evalcond[6]=(((r02*x13357))+((r01*x13360))+(((-1.0)*r00*x13353*x13356))+((r00*x13350))+((r01*x13349))+(((-1.0)*x13355))+x13348);
evalcond[7]=((((-1.0)*r22*x13359))+((r20*x13347*x13349))+((r20*x13354))+((r21*x13353))+(((-1.0)*x13355))+x13348+(((-1.0)*r21*x13350*x13356)));
evalcond[8]=((((-1.0)*r02*x13359))+((r00*x13347*x13349))+(((-1.0)*x13351))+(((-1.0)*r01*x13350*x13356))+((r01*x13353))+((r00*x13354))+(((-1.0)*sj2*x13352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13362=((1.0)*gconst23);
CheckValue<IkReal> x13363 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13363.valid){
continue;
}
CheckValue<IkReal> x13364=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13362)))),-1);
if(!x13364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13363.value)+(((1.5707963267949)*(x13364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13365=IKsin(j4);
IkReal x13366=IKcos(j4);
IkReal x13367=(sj1*sj2);
IkReal x13368=(gconst23*sj3);
IkReal x13369=(gconst22*sj3);
IkReal x13370=(cj2*sj1);
IkReal x13371=((1.0)*cj1);
IkReal x13372=(cj3*gconst23);
IkReal x13373=(cj3*gconst22);
IkReal x13374=(cj2*x13371);
IkReal x13375=((1.0)*x13366);
IkReal x13376=(cj3*x13365);
IkReal x13377=(gconst22*x13365);
IkReal x13378=((1.0)*sj3*x13365);
IkReal x13379=(x13366*x13373);
IkReal x13380=((1.0)*gconst23*x13365);
evalcond[0]=((((-1.0)*r22*x13375))+(((-1.0)*r20*x13380))+((r21*x13377)));
evalcond[1]=(((r01*x13377))+(((-1.0)*r00*x13380))+(((-1.0)*r02*x13375)));
evalcond[2]=((1.0)+((r11*x13377))+(((-1.0)*r10*x13380))+(((-1.0)*r12*x13375)));
evalcond[3]=(((r10*x13369))+((r12*x13376))+((r11*x13379))+((r11*x13368))+(((-1.0)*r10*x13372*x13375)));
evalcond[4]=(((r10*x13373))+((r10*x13366*x13368))+((r11*x13372))+(((-1.0)*r11*x13369*x13375))+(((-1.0)*r12*x13378)));
evalcond[5]=((((-1.0)*r20*x13372*x13375))+((r20*x13369))+((cj1*sj2))+((r22*x13376))+((r21*x13368))+((r21*x13379))+x13370);
evalcond[6]=(((r02*x13376))+((r01*x13368))+(((-1.0)*r00*x13372*x13375))+((r01*x13379))+((r00*x13369))+(((-1.0)*x13374))+x13367);
evalcond[7]=((((-1.0)*r22*x13378))+((r20*x13373))+(((-1.0)*r21*x13369*x13375))+(((-1.0)*x13374))+((r20*x13366*x13368))+((r21*x13372))+x13367);
evalcond[8]=(((r00*x13373))+((r01*x13372))+((r00*x13366*x13368))+(((-1.0)*r02*x13378))+(((-1.0)*sj2*x13371))+(((-1.0)*x13370))+(((-1.0)*r01*x13369*x13375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13381=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13381.valid){
continue;
}
CheckValue<IkReal> x13382 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13381.value)))+(x13382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13383=IKsin(j4);
IkReal x13384=IKcos(j4);
IkReal x13385=(sj1*sj2);
IkReal x13386=(gconst23*sj3);
IkReal x13387=(gconst22*sj3);
IkReal x13388=(cj2*sj1);
IkReal x13389=((1.0)*cj1);
IkReal x13390=(cj3*gconst23);
IkReal x13391=(cj3*gconst22);
IkReal x13392=(cj2*x13389);
IkReal x13393=((1.0)*x13384);
IkReal x13394=(cj3*x13383);
IkReal x13395=(gconst22*x13383);
IkReal x13396=((1.0)*sj3*x13383);
IkReal x13397=(x13384*x13391);
IkReal x13398=((1.0)*gconst23*x13383);
evalcond[0]=(((r21*x13395))+(((-1.0)*r22*x13393))+(((-1.0)*r20*x13398)));
evalcond[1]=(((r01*x13395))+(((-1.0)*r00*x13398))+(((-1.0)*r02*x13393)));
evalcond[2]=((1.0)+((r11*x13395))+(((-1.0)*r10*x13398))+(((-1.0)*r12*x13393)));
evalcond[3]=(((r11*x13397))+((r11*x13386))+((r10*x13387))+((r12*x13394))+(((-1.0)*r10*x13390*x13393)));
evalcond[4]=(((r11*x13390))+((r10*x13391))+((r10*x13384*x13386))+(((-1.0)*r11*x13387*x13393))+(((-1.0)*r12*x13396)));
evalcond[5]=(((r21*x13397))+((r20*x13387))+((cj1*sj2))+(((-1.0)*r20*x13390*x13393))+((r22*x13394))+x13388+((r21*x13386)));
evalcond[6]=(((r01*x13386))+((r01*x13397))+((r00*x13387))+(((-1.0)*r00*x13390*x13393))+(((-1.0)*x13392))+((r02*x13394))+x13385);
evalcond[7]=(((r21*x13390))+(((-1.0)*r22*x13396))+((r20*x13391))+((r20*x13384*x13386))+(((-1.0)*x13392))+(((-1.0)*r21*x13387*x13393))+x13385);
evalcond[8]=((((-1.0)*x13388))+(((-1.0)*r01*x13387*x13393))+((r00*x13391))+((r00*x13384*x13386))+((r01*x13390))+(((-1.0)*r02*x13396))+(((-1.0)*sj2*x13389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13400 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13400)==0){
continue;
}
IkReal x13399=pow(x13400,-0.5);
CheckValue<IkReal> x13401 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13401.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13401.value));
IkReal gconst25=((-1.0)*r21*x13399);
IkReal gconst26=(r20*x13399);
CheckValue<IkReal> x13402 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13402.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13402.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13405 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13405.valid){
continue;
}
IkReal x13403=((-1.0)*(x13405.value));
IkReal x13404=x13399;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13403;
IkReal gconst24=x13403;
IkReal gconst25=((-1.0)*r21*x13404);
IkReal gconst26=(r20*x13404);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13408 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13408.valid){
continue;
}
IkReal x13406=((-1.0)*(x13408.value));
IkReal x13407=x13399;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13406;
IkReal gconst24=x13406;
IkReal gconst25=((-1.0)*r21*x13407);
IkReal gconst26=(r20*x13407);
CheckValue<IkReal> x13416=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13416.valid){
continue;
}
IkReal x13409=x13416.value;
IkReal x13410=(sj3*x13409);
IkReal x13411=(r11*x13410);
IkReal x13412=(r00*x13410);
IkReal x13413=(r01*x13410);
IkReal x13414=(r10*x13410);
IkReal x13415=(r20*r21*x13410);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x13411*(r21*r21)))+((r00*r20*r21*x13411))+((r10*x13412*(r20*r20)))+((r10*r20*r21*x13413))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13417=gconst25*gconst25;
IkReal x13418=gconst26*gconst26;
IkReal x13419=(r00*r11);
IkReal x13420=(r01*r10);
IkReal x13421=(r02*sj3);
IkReal x13422=(gconst25*r10);
IkReal x13423=(gconst26*r11);
IkReal x13424=((1.0)*sj3);
IkReal x13425=((1.0)*cj3);
IkReal x13426=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13427=IKPowWithIntegerCheck(IKsign((((x13419*x13426))+(((-1.0)*r02*r12*x13425))+((x13420*x13426))+(((-1.0)*r01*r11*x13417*x13425))+(((-1.0)*r00*r10*x13418*x13425)))),-1);
if(!x13427.valid){
continue;
}
CheckValue<IkReal> x13428 = IKatan2WithCheck(IkReal((((x13421*x13422))+((x13421*x13423)))),IkReal(((((-1.0)*x13418*x13419*x13424))+(((-1.0)*gconst26*r00*x13422*x13424))+((sj3*x13417*x13420))+((gconst25*r01*sj3*x13423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13427.value)))+(x13428.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13429=IKsin(j4);
IkReal x13430=IKcos(j4);
IkReal x13431=(sj1*sj2);
IkReal x13432=(gconst26*sj3);
IkReal x13433=(gconst25*sj3);
IkReal x13434=(gconst26*r10);
IkReal x13435=(gconst25*r11);
IkReal x13436=(cj3*gconst25);
IkReal x13437=((1.0)*cj2);
IkReal x13438=(cj1*sj2);
IkReal x13439=(gconst26*r00);
IkReal x13440=(gconst26*r20);
IkReal x13441=(cj3*gconst26);
IkReal x13442=(cj1*x13437);
IkReal x13443=((1.0)*x13430);
IkReal x13444=((1.0)*x13429);
IkReal x13445=(cj3*x13429);
IkReal x13446=(gconst25*x13429);
evalcond[0]=((((-1.0)*x13440*x13444))+(((-1.0)*r22*x13443))+((r21*x13446)));
evalcond[1]=((((-1.0)*x13439*x13444))+(((-1.0)*r02*x13443))+((r01*x13446)));
evalcond[2]=((1.0)+((x13429*x13435))+(((-1.0)*r12*x13443))+(((-1.0)*x13434*x13444)));
evalcond[3]=(((r11*x13432))+(((-1.0)*cj3*x13434*x13443))+((r12*x13445))+((cj3*x13430*x13435))+((r10*x13433)));
evalcond[4]=((((-1.0)*r12*sj3*x13444))+((r11*x13441))+(((-1.0)*r11*x13433*x13443))+((r10*x13430*x13432))+((r10*x13436)));
evalcond[5]=(((r22*x13445))+x13438+((cj2*sj1))+((r21*x13430*x13436))+((r21*x13432))+(((-1.0)*cj3*x13440*x13443))+((r20*x13433)));
evalcond[6]=(((r01*x13432))+x13431+((r01*x13430*x13436))+((r02*x13445))+(((-1.0)*x13442))+(((-1.0)*cj3*x13439*x13443))+((r00*x13433)));
evalcond[7]=(x13431+(((-1.0)*r22*sj3*x13444))+(((-1.0)*x13442))+(((-1.0)*r21*x13433*x13443))+((r20*x13436))+((r20*x13430*x13432))+((r21*x13441)));
evalcond[8]=((((-1.0)*x13438))+(((-1.0)*sj1*x13437))+(((-1.0)*r02*sj3*x13444))+((r01*x13441))+(((-1.0)*r01*x13433*x13443))+((r00*x13430*x13432))+((r00*x13436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13447=gconst26*gconst26;
IkReal x13448=gconst25*gconst25;
IkReal x13449=(r01*r10);
IkReal x13450=(cj3*r11);
IkReal x13451=(gconst25*gconst26);
IkReal x13452=(cj3*r10);
IkReal x13453=(r00*x13447);
IkReal x13454=((1.0)*sj3*x13451);
CheckValue<IkReal> x13455 = IKatan2WithCheck(IkReal((((gconst25*r02*x13452))+((gconst26*r02*x13450)))),IkReal(((((-1.0)*x13450*x13453))+((r01*x13450*x13451))+((cj3*x13448*x13449))+(((-1.0)*r00*x13451*x13452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13455.valid){
continue;
}
CheckValue<IkReal> x13456=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*r00*r11*x13454))+((r01*r11*sj3*x13448))+(((-1.0)*x13449*x13454))+((r10*sj3*x13453)))),-1);
if(!x13456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13455.value)+(((1.5707963267949)*(x13456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13457=IKsin(j4);
IkReal x13458=IKcos(j4);
IkReal x13459=(sj1*sj2);
IkReal x13460=(gconst26*sj3);
IkReal x13461=(gconst25*sj3);
IkReal x13462=(gconst26*r10);
IkReal x13463=(gconst25*r11);
IkReal x13464=(cj3*gconst25);
IkReal x13465=((1.0)*cj2);
IkReal x13466=(cj1*sj2);
IkReal x13467=(gconst26*r00);
IkReal x13468=(gconst26*r20);
IkReal x13469=(cj3*gconst26);
IkReal x13470=(cj1*x13465);
IkReal x13471=((1.0)*x13458);
IkReal x13472=((1.0)*x13457);
IkReal x13473=(cj3*x13457);
IkReal x13474=(gconst25*x13457);
evalcond[0]=(((r21*x13474))+(((-1.0)*x13468*x13472))+(((-1.0)*r22*x13471)));
evalcond[1]=(((r01*x13474))+(((-1.0)*r02*x13471))+(((-1.0)*x13467*x13472)));
evalcond[2]=((1.0)+(((-1.0)*x13462*x13472))+(((-1.0)*r12*x13471))+((x13457*x13463)));
evalcond[3]=(((r10*x13461))+((r12*x13473))+((r11*x13460))+((cj3*x13458*x13463))+(((-1.0)*cj3*x13462*x13471)));
evalcond[4]=(((r10*x13464))+((r11*x13469))+(((-1.0)*r12*sj3*x13472))+(((-1.0)*r11*x13461*x13471))+((r10*x13458*x13460)));
evalcond[5]=(((r21*x13458*x13464))+x13466+((r20*x13461))+((cj2*sj1))+((r21*x13460))+((r22*x13473))+(((-1.0)*cj3*x13468*x13471)));
evalcond[6]=(x13459+(((-1.0)*cj3*x13467*x13471))+(((-1.0)*x13470))+((r02*x13473))+((r01*x13458*x13464))+((r01*x13460))+((r00*x13461)));
evalcond[7]=(x13459+((r20*x13464))+((r21*x13469))+(((-1.0)*r22*sj3*x13472))+(((-1.0)*r21*x13461*x13471))+(((-1.0)*x13470))+((r20*x13458*x13460)));
evalcond[8]=(((r00*x13458*x13460))+(((-1.0)*r02*sj3*x13472))+(((-1.0)*r01*x13461*x13471))+(((-1.0)*sj1*x13465))+(((-1.0)*x13466))+((r01*x13469))+((r00*x13464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13475=((1.0)*gconst26);
CheckValue<IkReal> x13476=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13475))+(((-1.0)*gconst25*r00)))),-1);
if(!x13476.valid){
continue;
}
CheckValue<IkReal> x13477 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst25*r21))+(((-1.0)*r20*x13475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13476.value)))+(x13477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13478=IKsin(j4);
IkReal x13479=IKcos(j4);
IkReal x13480=(sj1*sj2);
IkReal x13481=(gconst26*sj3);
IkReal x13482=(gconst25*sj3);
IkReal x13483=(gconst26*r10);
IkReal x13484=(gconst25*r11);
IkReal x13485=(cj3*gconst25);
IkReal x13486=((1.0)*cj2);
IkReal x13487=(cj1*sj2);
IkReal x13488=(gconst26*r00);
IkReal x13489=(gconst26*r20);
IkReal x13490=(cj3*gconst26);
IkReal x13491=(cj1*x13486);
IkReal x13492=((1.0)*x13479);
IkReal x13493=((1.0)*x13478);
IkReal x13494=(cj3*x13478);
IkReal x13495=(gconst25*x13478);
evalcond[0]=((((-1.0)*x13489*x13493))+(((-1.0)*r22*x13492))+((r21*x13495)));
evalcond[1]=((((-1.0)*x13488*x13493))+(((-1.0)*r02*x13492))+((r01*x13495)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13492))+(((-1.0)*x13483*x13493))+((x13478*x13484)));
evalcond[3]=((((-1.0)*cj3*x13483*x13492))+((cj3*x13479*x13484))+((r11*x13481))+((r10*x13482))+((r12*x13494)));
evalcond[4]=(((r10*x13479*x13481))+(((-1.0)*r12*sj3*x13493))+((r10*x13485))+(((-1.0)*r11*x13482*x13492))+((r11*x13490)));
evalcond[5]=(x13487+((cj2*sj1))+((r22*x13494))+((r21*x13479*x13485))+((r20*x13482))+(((-1.0)*cj3*x13489*x13492))+((r21*x13481)));
evalcond[6]=(x13480+((r02*x13494))+(((-1.0)*cj3*x13488*x13492))+((r01*x13479*x13485))+((r00*x13482))+((r01*x13481))+(((-1.0)*x13491)));
evalcond[7]=(x13480+(((-1.0)*r22*sj3*x13493))+((r20*x13485))+((r20*x13479*x13481))+((r21*x13490))+(((-1.0)*x13491))+(((-1.0)*r21*x13482*x13492)));
evalcond[8]=((((-1.0)*sj1*x13486))+(((-1.0)*r02*sj3*x13493))+(((-1.0)*x13487))+((r00*x13479*x13481))+(((-1.0)*r01*x13482*x13492))+((r00*x13485))+((r01*x13490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13497 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13497)==0){
continue;
}
IkReal x13496=pow(x13497,-0.5);
CheckValue<IkReal> x13498 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13498.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13498.value))));
IkReal gconst28=((1.0)*r21*x13496);
IkReal gconst29=((-1.0)*r20*x13496);
CheckValue<IkReal> x13499 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13499.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13499.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13502 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13502.valid){
continue;
}
IkReal x13500=((1.0)*(x13502.value));
IkReal x13501=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13500)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13500)));
IkReal gconst28=((1.0)*r21*x13501);
IkReal gconst29=((-1.0)*r20*x13501);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13505 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13505.valid){
continue;
}
IkReal x13503=((1.0)*(x13505.value));
IkReal x13504=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13503)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13503)));
IkReal gconst28=((1.0)*r21*x13504);
IkReal gconst29=((-1.0)*r20*x13504);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13508 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13508.valid){
continue;
}
IkReal x13506=((1.0)*(x13508.value));
IkReal x13507=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13506)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13506)));
IkReal gconst28=((1.0)*r21*x13507);
IkReal gconst29=((-1.0)*r20*x13507);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13511 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13511.valid){
continue;
}
IkReal x13509=((1.0)*(x13511.value));
IkReal x13510=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13509)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13509)));
IkReal gconst28=((1.0)*r21*x13510);
IkReal gconst29=((-1.0)*r20*x13510);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13514 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13514.valid){
continue;
}
IkReal x13512=((1.0)*(x13514.value));
IkReal x13513=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13512)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13512)));
IkReal gconst28=((1.0)*r21*x13513);
IkReal gconst29=((-1.0)*r20*x13513);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13517 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13517.valid){
continue;
}
IkReal x13515=((1.0)*(x13517.value));
IkReal x13516=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13515)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13515)));
IkReal gconst28=((1.0)*r21*x13516);
IkReal gconst29=((-1.0)*r20*x13516);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13518=(gconst29*r10);
IkReal x13519=(gconst28*r11);
CheckValue<IkReal> x13520=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13518*x13519))+(x13518*x13518)+(x13519*x13519))),-1);
if(!x13520.valid){
continue;
}
CheckValue<IkReal> x13521 = IKatan2WithCheck(IkReal((x13518+(((-1.0)*x13519)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13520.value)))+(x13521.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13522=IKsin(j4);
IkReal x13523=IKcos(j4);
IkReal x13524=(gconst28*r11);
IkReal x13525=((1.0)*cj2);
IkReal x13526=((1.0)*x13523);
IkReal x13527=(gconst29*x13523);
IkReal x13528=(gconst28*x13522);
IkReal x13529=((1.0)*x13522);
IkReal x13530=(gconst29*x13529);
evalcond[0]=(((r21*x13528))+(((-1.0)*r22*x13526))+(((-1.0)*r20*x13530)));
evalcond[1]=(((r01*x13528))+(((-1.0)*r00*x13530))+(((-1.0)*r02*x13526)));
evalcond[2]=((((-1.0)*r12*x13529))+(((-1.0)*x13524*x13526))+((r10*x13527)));
evalcond[3]=((1.0)+((x13522*x13524))+(((-1.0)*r12*x13526))+(((-1.0)*r10*x13530)));
evalcond[4]=((((-1.0)*r22*x13529))+((r20*x13527))+((sj1*sj2))+(((-1.0)*cj1*x13525))+(((-1.0)*gconst28*r21*x13526)));
evalcond[5]=((((-1.0)*sj1*x13525))+(((-1.0)*gconst28*r01*x13526))+(((-1.0)*cj1*sj2))+((r00*x13527))+(((-1.0)*r02*x13529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13531=((1.0)*gconst29);
CheckValue<IkReal> x13532 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13531))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13532.valid){
continue;
}
CheckValue<IkReal> x13533=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13531)))),-1);
if(!x13533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13532.value)+(((1.5707963267949)*(x13533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13534=IKsin(j4);
IkReal x13535=IKcos(j4);
IkReal x13536=(gconst28*r11);
IkReal x13537=((1.0)*cj2);
IkReal x13538=((1.0)*x13535);
IkReal x13539=(gconst29*x13535);
IkReal x13540=(gconst28*x13534);
IkReal x13541=((1.0)*x13534);
IkReal x13542=(gconst29*x13541);
evalcond[0]=((((-1.0)*r22*x13538))+((r21*x13540))+(((-1.0)*r20*x13542)));
evalcond[1]=(((r01*x13540))+(((-1.0)*r00*x13542))+(((-1.0)*r02*x13538)));
evalcond[2]=((((-1.0)*x13536*x13538))+((r10*x13539))+(((-1.0)*r12*x13541)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13538))+((x13534*x13536))+(((-1.0)*r10*x13542)));
evalcond[4]=(((r20*x13539))+(((-1.0)*cj1*x13537))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13538))+(((-1.0)*r22*x13541)));
evalcond[5]=((((-1.0)*sj1*x13537))+(((-1.0)*r02*x13541))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x13538))+((r00*x13539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13543=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13543.valid){
continue;
}
CheckValue<IkReal> x13544 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13543.value)))+(x13544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13545=IKsin(j4);
IkReal x13546=IKcos(j4);
IkReal x13547=(gconst28*r11);
IkReal x13548=((1.0)*cj2);
IkReal x13549=((1.0)*x13546);
IkReal x13550=(gconst29*x13546);
IkReal x13551=(gconst28*x13545);
IkReal x13552=((1.0)*x13545);
IkReal x13553=(gconst29*x13552);
evalcond[0]=(((r21*x13551))+(((-1.0)*r22*x13549))+(((-1.0)*r20*x13553)));
evalcond[1]=((((-1.0)*r00*x13553))+((r01*x13551))+(((-1.0)*r02*x13549)));
evalcond[2]=((((-1.0)*x13547*x13549))+((r10*x13550))+(((-1.0)*r12*x13552)));
evalcond[3]=((1.0)+((x13545*x13547))+(((-1.0)*r10*x13553))+(((-1.0)*r12*x13549)));
evalcond[4]=((((-1.0)*gconst28*r21*x13549))+((sj1*sj2))+(((-1.0)*cj1*x13548))+((r20*x13550))+(((-1.0)*r22*x13552)));
evalcond[5]=((((-1.0)*gconst28*r01*x13549))+((r00*x13550))+(((-1.0)*r02*x13552))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13556 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13556.valid){
continue;
}
IkReal x13554=((1.0)*(x13556.value));
IkReal x13555=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13554)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13554)));
IkReal gconst28=((1.0)*r21*x13555);
IkReal gconst29=((-1.0)*r20*x13555);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13559 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13559.valid){
continue;
}
IkReal x13557=((1.0)*(x13559.value));
IkReal x13558=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13557)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13557)));
IkReal gconst28=((1.0)*r21*x13558);
IkReal gconst29=((-1.0)*r20*x13558);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13562 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13562.valid){
continue;
}
IkReal x13560=((1.0)*(x13562.value));
IkReal x13561=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13560)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13560)));
IkReal gconst28=((1.0)*r21*x13561);
IkReal gconst29=((-1.0)*r20*x13561);
IkReal x13563=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13567=IKPowWithIntegerCheck(x13563,-1);
if(!x13567.valid){
continue;
}
IkReal x13564=x13567.value;
IkReal x13565=((1.0)*x13564);
IkReal x13566=((((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13564))+(((-1.0)*x13565*(r11*r11)*(r21*r21)))+(((-1.0)*x13565*(r10*r10)*(r20*r20))));
j4eval[0]=x13566;
j4eval[1]=r12;
j4eval[2]=x13563;
j4eval[3]=IKsign(x13566);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13568=(gconst28*r11);
IkReal x13569=(gconst29*r10);
CheckValue<IkReal> x13570 = IKatan2WithCheck(IkReal((x13568+(((-1.0)*x13569)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13570.valid){
continue;
}
CheckValue<IkReal> x13571=IKPowWithIntegerCheck(IKsign(((((2.0)*x13568*x13569))+(((-1.0)*(x13568*x13568)))+(((-1.0)*(x13569*x13569)))+(((-1.0)*(r12*r12))))),-1);
if(!x13571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13570.value)+(((1.5707963267949)*(x13571.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13572=IKcos(j4);
IkReal x13573=IKsin(j4);
IkReal x13574=(gconst29*r10);
IkReal x13575=(gconst29*r20);
IkReal x13576=(gconst28*r21);
IkReal x13577=((1.0)*cj2);
IkReal x13578=(gconst29*r00);
IkReal x13579=((1.0)*x13572);
IkReal x13580=((1.0)*x13573);
IkReal x13581=(gconst28*x13572);
IkReal x13582=(gconst28*x13573);
evalcond[0]=(((r12*x13573))+(((-1.0)*x13574*x13579))+((r11*x13581)));
evalcond[1]=((((-1.0)*r22*x13579))+(((-1.0)*x13575*x13580))+((x13573*x13576)));
evalcond[2]=((((-1.0)*r02*x13579))+(((-1.0)*x13578*x13580))+((r01*x13582)));
evalcond[3]=((1.0)+(((-1.0)*x13574*x13580))+(((-1.0)*r12*x13579))+((r11*x13582)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x13577))+((x13572*x13576))+(((-1.0)*x13575*x13579))+((r22*x13573)));
evalcond[5]=((((-1.0)*sj1*x13577))+(((-1.0)*cj1*sj2))+((r01*x13581))+((r02*x13573))+(((-1.0)*x13578*x13579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13583=((1.0)*gconst29);
CheckValue<IkReal> x13584 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13583))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13584.valid){
continue;
}
CheckValue<IkReal> x13585=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13583))+(((-1.0)*gconst28*r00)))),-1);
if(!x13585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13584.value)+(((1.5707963267949)*(x13585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13586=IKcos(j4);
IkReal x13587=IKsin(j4);
IkReal x13588=(gconst29*r10);
IkReal x13589=(gconst29*r20);
IkReal x13590=(gconst28*r21);
IkReal x13591=((1.0)*cj2);
IkReal x13592=(gconst29*r00);
IkReal x13593=((1.0)*x13586);
IkReal x13594=((1.0)*x13587);
IkReal x13595=(gconst28*x13586);
IkReal x13596=(gconst28*x13587);
evalcond[0]=(((r11*x13595))+((r12*x13587))+(((-1.0)*x13588*x13593)));
evalcond[1]=((((-1.0)*x13589*x13594))+((x13587*x13590))+(((-1.0)*r22*x13593)));
evalcond[2]=((((-1.0)*x13592*x13594))+((r01*x13596))+(((-1.0)*r02*x13593)));
evalcond[3]=((1.0)+((r11*x13596))+(((-1.0)*r12*x13593))+(((-1.0)*x13588*x13594)));
evalcond[4]=((((-1.0)*x13589*x13593))+((sj1*sj2))+((x13586*x13590))+(((-1.0)*cj1*x13591))+((r22*x13587)));
evalcond[5]=((((-1.0)*x13592*x13593))+((r01*x13595))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13591))+((r02*x13587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13597=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13597.valid){
continue;
}
CheckValue<IkReal> x13598 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13597.value)))+(x13598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13599=IKcos(j4);
IkReal x13600=IKsin(j4);
IkReal x13601=(gconst29*r10);
IkReal x13602=(gconst29*r20);
IkReal x13603=(gconst28*r21);
IkReal x13604=((1.0)*cj2);
IkReal x13605=(gconst29*r00);
IkReal x13606=((1.0)*x13599);
IkReal x13607=((1.0)*x13600);
IkReal x13608=(gconst28*x13599);
IkReal x13609=(gconst28*x13600);
evalcond[0]=(((r11*x13608))+((r12*x13600))+(((-1.0)*x13601*x13606)));
evalcond[1]=(((x13600*x13603))+(((-1.0)*r22*x13606))+(((-1.0)*x13602*x13607)));
evalcond[2]=((((-1.0)*r02*x13606))+(((-1.0)*x13605*x13607))+((r01*x13609)));
evalcond[3]=((1.0)+((r11*x13609))+(((-1.0)*r12*x13606))+(((-1.0)*x13601*x13607)));
evalcond[4]=(((x13599*x13603))+(((-1.0)*cj1*x13604))+((r22*x13600))+((sj1*sj2))+(((-1.0)*x13602*x13606)));
evalcond[5]=((((-1.0)*x13605*x13606))+(((-1.0)*sj1*x13604))+(((-1.0)*cj1*sj2))+((r02*x13600))+((r01*x13608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13612 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13612.valid){
continue;
}
IkReal x13610=((1.0)*(x13612.value));
IkReal x13611=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13610)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13610)));
IkReal gconst28=((1.0)*r21*x13611);
IkReal gconst29=((-1.0)*r20*x13611);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13615 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13615.valid){
continue;
}
IkReal x13613=((1.0)*(x13615.value));
IkReal x13614=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13613)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13613)));
IkReal gconst28=((1.0)*r21*x13614);
IkReal gconst29=((-1.0)*r20*x13614);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13618 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13618.valid){
continue;
}
IkReal x13616=((1.0)*(x13618.value));
IkReal x13617=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13616)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13616)));
IkReal gconst28=((1.0)*r21*x13617);
IkReal gconst29=((-1.0)*r20*x13617);
IkReal x13619=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13623=IKPowWithIntegerCheck(x13619,-1);
if(!x13623.valid){
continue;
}
IkReal x13620=x13623.value;
IkReal x13621=((1.0)*x13620);
IkReal x13622=((((-1.0)*x13621*(r11*r11)*(r21*r21)))+(((-1.0)*x13621*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13620))+(((-1.0)*(r12*r12))));
j4eval[0]=x13622;
j4eval[1]=r12;
j4eval[2]=x13619;
j4eval[3]=IKsign(x13622);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13624=(gconst28*r11);
IkReal x13625=(gconst29*r10);
CheckValue<IkReal> x13626=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13624*x13624)))+(((-1.0)*(x13625*x13625)))+(((2.0)*x13624*x13625))+(((-1.0)*(r12*r12))))),-1);
if(!x13626.valid){
continue;
}
CheckValue<IkReal> x13627 = IKatan2WithCheck(IkReal((x13624+(((-1.0)*x13625)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13626.value)))+(x13627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13628=IKcos(j4);
IkReal x13629=IKsin(j4);
IkReal x13630=(gconst29*r10);
IkReal x13631=(gconst29*r20);
IkReal x13632=(gconst28*r21);
IkReal x13633=(gconst29*r00);
IkReal x13634=((1.0)*x13628);
IkReal x13635=((1.0)*x13629);
IkReal x13636=(gconst28*x13628);
IkReal x13637=(gconst28*x13629);
evalcond[0]=(((r11*x13636))+((r12*x13629))+(((-1.0)*x13630*x13634)));
evalcond[1]=((((-1.0)*x13631*x13635))+(((-1.0)*r22*x13634))+((x13629*x13632)));
evalcond[2]=((((-1.0)*r02*x13634))+(((-1.0)*x13633*x13635))+((r01*x13637)));
evalcond[3]=((1.0)+((r11*x13637))+(((-1.0)*x13630*x13635))+(((-1.0)*r12*x13634)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13631*x13634))+((r22*x13629))+((x13628*x13632)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13629))+(((-1.0)*x13633*x13634))+((r01*x13636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13638=((1.0)*gconst29);
CheckValue<IkReal> x13639=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13638))+(((-1.0)*gconst28*r00)))),-1);
if(!x13639.valid){
continue;
}
CheckValue<IkReal> x13640 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13639.value)))+(x13640.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13641=IKcos(j4);
IkReal x13642=IKsin(j4);
IkReal x13643=(gconst29*r10);
IkReal x13644=(gconst29*r20);
IkReal x13645=(gconst28*r21);
IkReal x13646=(gconst29*r00);
IkReal x13647=((1.0)*x13641);
IkReal x13648=((1.0)*x13642);
IkReal x13649=(gconst28*x13641);
IkReal x13650=(gconst28*x13642);
evalcond[0]=(((r11*x13649))+(((-1.0)*x13643*x13647))+((r12*x13642)));
evalcond[1]=((((-1.0)*x13644*x13648))+((x13642*x13645))+(((-1.0)*r22*x13647)));
evalcond[2]=(((r01*x13650))+(((-1.0)*x13646*x13648))+(((-1.0)*r02*x13647)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13647))+(((-1.0)*x13643*x13648))+((r11*x13650)));
evalcond[4]=(((cj2*sj1))+((r22*x13642))+((cj1*sj2))+(((-1.0)*x13644*x13647))+((x13641*x13645)));
evalcond[5]=(((r02*x13642))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13646*x13647))+((r01*x13649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13651=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13651.valid){
continue;
}
CheckValue<IkReal> x13652 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13651.value)))+(x13652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13653=IKcos(j4);
IkReal x13654=IKsin(j4);
IkReal x13655=(gconst29*r10);
IkReal x13656=(gconst29*r20);
IkReal x13657=(gconst28*r21);
IkReal x13658=(gconst29*r00);
IkReal x13659=((1.0)*x13653);
IkReal x13660=((1.0)*x13654);
IkReal x13661=(gconst28*x13653);
IkReal x13662=(gconst28*x13654);
evalcond[0]=(((r12*x13654))+((r11*x13661))+(((-1.0)*x13655*x13659)));
evalcond[1]=((((-1.0)*r22*x13659))+(((-1.0)*x13656*x13660))+((x13654*x13657)));
evalcond[2]=((((-1.0)*r02*x13659))+((r01*x13662))+(((-1.0)*x13658*x13660)));
evalcond[3]=((1.0)+((r11*x13662))+(((-1.0)*r12*x13659))+(((-1.0)*x13655*x13660)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x13654))+(((-1.0)*x13656*x13659))+((x13653*x13657)));
evalcond[5]=((((-1.0)*x13658*x13659))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13661))+((r02*x13654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13665 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13665.valid){
continue;
}
IkReal x13663=((1.0)*(x13665.value));
IkReal x13664=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13663)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13663)));
IkReal gconst28=((1.0)*r21*x13664);
IkReal gconst29=((-1.0)*r20*x13664);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13668 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13668.valid){
continue;
}
IkReal x13666=((1.0)*(x13668.value));
IkReal x13667=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13666)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13666)));
IkReal gconst28=((1.0)*r21*x13667);
IkReal gconst29=((-1.0)*r20*x13667);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13671 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13671.valid){
continue;
}
IkReal x13669=((1.0)*(x13671.value));
IkReal x13670=x13496;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13669)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13669)));
IkReal gconst28=((1.0)*r21*x13670);
IkReal gconst29=((-1.0)*r20*x13670);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13672=(gconst29*r10);
IkReal x13673=(gconst28*r11);
CheckValue<IkReal> x13674=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13672*x13672)+(x13673*x13673)+(((-2.0)*x13672*x13673)))),-1);
if(!x13674.valid){
continue;
}
CheckValue<IkReal> x13675 = IKatan2WithCheck(IkReal((x13672+(((-1.0)*x13673)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13674.value)))+(x13675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13676=IKsin(j4);
IkReal x13677=IKcos(j4);
IkReal x13678=(gconst28*r11);
IkReal x13679=((1.0)*x13677);
IkReal x13680=(gconst29*x13677);
IkReal x13681=(gconst28*x13676);
IkReal x13682=((1.0)*x13676);
IkReal x13683=(gconst29*x13682);
evalcond[0]=((((-1.0)*r20*x13683))+((r21*x13681))+(((-1.0)*r22*x13679)));
evalcond[1]=((((-1.0)*r00*x13683))+(((-1.0)*r02*x13679))+((r01*x13681)));
evalcond[2]=((((-1.0)*r12*x13682))+((r10*x13680))+(((-1.0)*x13678*x13679)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13683))+(((-1.0)*r12*x13679))+((x13676*x13678)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13679))+(((-1.0)*r22*x13682))+((cj1*sj2))+((r20*x13680)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13680))+(((-1.0)*r02*x13682))+(((-1.0)*gconst28*r01*x13679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13684=((1.0)*gconst29);
CheckValue<IkReal> x13685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13684))+(((-1.0)*gconst28*r00)))),-1);
if(!x13685.valid){
continue;
}
CheckValue<IkReal> x13686 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13684))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13685.value)))+(x13686.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13687=IKsin(j4);
IkReal x13688=IKcos(j4);
IkReal x13689=(gconst28*r11);
IkReal x13690=((1.0)*x13688);
IkReal x13691=(gconst29*x13688);
IkReal x13692=(gconst28*x13687);
IkReal x13693=((1.0)*x13687);
IkReal x13694=(gconst29*x13693);
evalcond[0]=((((-1.0)*r20*x13694))+((r21*x13692))+(((-1.0)*r22*x13690)));
evalcond[1]=(((r01*x13692))+(((-1.0)*r02*x13690))+(((-1.0)*r00*x13694)));
evalcond[2]=(((r10*x13691))+(((-1.0)*x13689*x13690))+(((-1.0)*r12*x13693)));
evalcond[3]=((1.0)+((x13687*x13689))+(((-1.0)*r10*x13694))+(((-1.0)*r12*x13690)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13690))+((cj1*sj2))+((r20*x13691))+(((-1.0)*r22*x13693)));
evalcond[5]=(((r00*x13691))+(((-1.0)*r02*x13693))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13695=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13695.valid){
continue;
}
CheckValue<IkReal> x13696 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13695.value)))+(x13696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13697=IKsin(j4);
IkReal x13698=IKcos(j4);
IkReal x13699=(gconst28*r11);
IkReal x13700=((1.0)*x13698);
IkReal x13701=(gconst29*x13698);
IkReal x13702=(gconst28*x13697);
IkReal x13703=((1.0)*x13697);
IkReal x13704=(gconst29*x13703);
evalcond[0]=((((-1.0)*r22*x13700))+((r21*x13702))+(((-1.0)*r20*x13704)));
evalcond[1]=((((-1.0)*r00*x13704))+((r01*x13702))+(((-1.0)*r02*x13700)));
evalcond[2]=((((-1.0)*r12*x13703))+((r10*x13701))+(((-1.0)*x13699*x13700)));
evalcond[3]=((1.0)+((x13697*x13699))+(((-1.0)*r12*x13700))+(((-1.0)*r10*x13704)));
evalcond[4]=((((-1.0)*gconst28*r21*x13700))+(((-1.0)*r22*x13703))+((cj2*sj1))+((r20*x13701))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13701))+(((-1.0)*r02*x13703))+(((-1.0)*gconst28*r01*x13700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13705=gconst28*gconst28;
IkReal x13706=gconst29*gconst29;
IkReal x13707=(r11*r21);
IkReal x13708=(gconst29*sj3);
IkReal x13709=((1.0)*cj3);
IkReal x13710=(r10*r20);
IkReal x13711=(r10*r21);
IkReal x13712=(r11*r20);
IkReal x13713=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13714 = IKatan2WithCheck(IkReal((((r11*r22*x13708))+((gconst28*r10*r22*sj3)))),IkReal((((gconst28*x13707*x13708))+(((-1.0)*sj3*x13706*x13712))+((sj3*x13705*x13711))+(((-1.0)*gconst28*x13708*x13710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13714.valid){
continue;
}
CheckValue<IkReal> x13715=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13706*x13709*x13710))+((x13712*x13713))+((x13711*x13713))+(((-1.0)*x13705*x13707*x13709))+(((-1.0)*r12*r22*x13709)))),-1);
if(!x13715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13714.value)+(((1.5707963267949)*(x13715.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13716=IKsin(j4);
IkReal x13717=IKcos(j4);
IkReal x13718=(sj1*sj2);
IkReal x13719=(gconst29*r20);
IkReal x13720=(gconst28*r20);
IkReal x13721=((1.0)*cj2);
IkReal x13722=(r11*sj3);
IkReal x13723=(cj1*sj2);
IkReal x13724=(gconst29*r01);
IkReal x13725=(gconst29*r10);
IkReal x13726=(cj3*gconst28);
IkReal x13727=(cj3*gconst29);
IkReal x13728=(gconst28*sj3);
IkReal x13729=(gconst29*r00);
IkReal x13730=(cj1*x13721);
IkReal x13731=((1.0)*x13717);
IkReal x13732=((1.0)*x13716);
IkReal x13733=(gconst28*x13716);
IkReal x13734=(cj3*x13716);
IkReal x13735=(sj3*x13717);
evalcond[0]=((((-1.0)*r22*x13731))+(((-1.0)*x13719*x13732))+((r21*x13733)));
evalcond[1]=((((-1.0)*r02*x13731))+(((-1.0)*x13729*x13732))+((r01*x13733)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13731))+(((-1.0)*x13725*x13732))+((r11*x13733)));
evalcond[3]=(((r10*x13728))+((r12*x13734))+((r11*x13717*x13726))+((gconst29*x13722))+(((-1.0)*cj3*x13725*x13731)));
evalcond[4]=(((r10*x13726))+(((-1.0)*gconst28*x13722*x13731))+((r11*x13727))+((x13725*x13735))+(((-1.0)*r12*sj3*x13732)));
evalcond[5]=(((cj2*sj1))+((r21*x13717*x13726))+((gconst29*r21*sj3))+((r22*x13734))+x13723+(((-1.0)*cj3*x13719*x13731))+((sj3*x13720)));
evalcond[6]=(((r00*x13728))+x13718+(((-1.0)*x13730))+((r01*x13717*x13726))+((r02*x13734))+(((-1.0)*r00*x13727*x13731))+((sj3*x13724)));
evalcond[7]=(x13718+(((-1.0)*x13730))+((r21*x13727))+(((-1.0)*r21*x13728*x13731))+((x13719*x13735))+((cj3*x13720))+(((-1.0)*r22*sj3*x13732)));
evalcond[8]=((((-1.0)*r02*sj3*x13732))+(((-1.0)*r01*x13728*x13731))+((r00*x13726))+((x13729*x13735))+(((-1.0)*sj1*x13721))+(((-1.0)*x13723))+((cj3*x13724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13736=((1.0)*gconst29);
CheckValue<IkReal> x13737 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13736))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13737.valid){
continue;
}
CheckValue<IkReal> x13738=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13736)))),-1);
if(!x13738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13737.value)+(((1.5707963267949)*(x13738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13739=IKsin(j4);
IkReal x13740=IKcos(j4);
IkReal x13741=(sj1*sj2);
IkReal x13742=(gconst29*r20);
IkReal x13743=(gconst28*r20);
IkReal x13744=((1.0)*cj2);
IkReal x13745=(r11*sj3);
IkReal x13746=(cj1*sj2);
IkReal x13747=(gconst29*r01);
IkReal x13748=(gconst29*r10);
IkReal x13749=(cj3*gconst28);
IkReal x13750=(cj3*gconst29);
IkReal x13751=(gconst28*sj3);
IkReal x13752=(gconst29*r00);
IkReal x13753=(cj1*x13744);
IkReal x13754=((1.0)*x13740);
IkReal x13755=((1.0)*x13739);
IkReal x13756=(gconst28*x13739);
IkReal x13757=(cj3*x13739);
IkReal x13758=(sj3*x13740);
evalcond[0]=(((r21*x13756))+(((-1.0)*r22*x13754))+(((-1.0)*x13742*x13755)));
evalcond[1]=((((-1.0)*x13752*x13755))+((r01*x13756))+(((-1.0)*r02*x13754)));
evalcond[2]=((1.0)+((r11*x13756))+(((-1.0)*x13748*x13755))+(((-1.0)*r12*x13754)));
evalcond[3]=(((gconst29*x13745))+((r12*x13757))+((r10*x13751))+((r11*x13740*x13749))+(((-1.0)*cj3*x13748*x13754)));
evalcond[4]=(((r11*x13750))+(((-1.0)*gconst28*x13745*x13754))+(((-1.0)*r12*sj3*x13755))+((r10*x13749))+((x13748*x13758)));
evalcond[5]=(((cj2*sj1))+((r22*x13757))+((r21*x13740*x13749))+(((-1.0)*cj3*x13742*x13754))+((gconst29*r21*sj3))+x13746+((sj3*x13743)));
evalcond[6]=(((r01*x13740*x13749))+x13741+((r02*x13757))+(((-1.0)*x13753))+((r00*x13751))+(((-1.0)*r00*x13750*x13754))+((sj3*x13747)));
evalcond[7]=(((r21*x13750))+x13741+(((-1.0)*x13753))+(((-1.0)*r22*sj3*x13755))+(((-1.0)*r21*x13751*x13754))+((cj3*x13743))+((x13742*x13758)));
evalcond[8]=((((-1.0)*x13746))+(((-1.0)*sj1*x13744))+(((-1.0)*r02*sj3*x13755))+((x13752*x13758))+((cj3*x13747))+(((-1.0)*r01*x13751*x13754))+((r00*x13749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13759=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13759.valid){
continue;
}
CheckValue<IkReal> x13760 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13759.value)))+(x13760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13761=IKsin(j4);
IkReal x13762=IKcos(j4);
IkReal x13763=(sj1*sj2);
IkReal x13764=(gconst29*r20);
IkReal x13765=(gconst28*r20);
IkReal x13766=((1.0)*cj2);
IkReal x13767=(r11*sj3);
IkReal x13768=(cj1*sj2);
IkReal x13769=(gconst29*r01);
IkReal x13770=(gconst29*r10);
IkReal x13771=(cj3*gconst28);
IkReal x13772=(cj3*gconst29);
IkReal x13773=(gconst28*sj3);
IkReal x13774=(gconst29*r00);
IkReal x13775=(cj1*x13766);
IkReal x13776=((1.0)*x13762);
IkReal x13777=((1.0)*x13761);
IkReal x13778=(gconst28*x13761);
IkReal x13779=(cj3*x13761);
IkReal x13780=(sj3*x13762);
evalcond[0]=((((-1.0)*r22*x13776))+(((-1.0)*x13764*x13777))+((r21*x13778)));
evalcond[1]=(((r01*x13778))+(((-1.0)*r02*x13776))+(((-1.0)*x13774*x13777)));
evalcond[2]=((1.0)+((r11*x13778))+(((-1.0)*x13770*x13777))+(((-1.0)*r12*x13776)));
evalcond[3]=((((-1.0)*cj3*x13770*x13776))+((gconst29*x13767))+((r10*x13773))+((r11*x13762*x13771))+((r12*x13779)));
evalcond[4]=(((r11*x13772))+((x13770*x13780))+((r10*x13771))+(((-1.0)*gconst28*x13767*x13776))+(((-1.0)*r12*sj3*x13777)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+x13768+((sj3*x13765))+((r21*x13762*x13771))+((r22*x13779))+(((-1.0)*cj3*x13764*x13776)));
evalcond[6]=((((-1.0)*x13775))+((r01*x13762*x13771))+x13763+((r00*x13773))+((sj3*x13769))+(((-1.0)*r00*x13772*x13776))+((r02*x13779)));
evalcond[7]=((((-1.0)*x13775))+x13763+(((-1.0)*r22*sj3*x13777))+((x13764*x13780))+(((-1.0)*r21*x13773*x13776))+((cj3*x13765))+((r21*x13772)));
evalcond[8]=((((-1.0)*x13768))+(((-1.0)*sj1*x13766))+((r00*x13771))+((cj3*x13769))+(((-1.0)*r02*sj3*x13777))+((x13774*x13780))+(((-1.0)*r01*x13773*x13776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13781=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13781);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13781);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13782=(r11*sj5);
IkReal x13783=((1.0)*cj5*r10);
j4eval[0]=(x13782+(((-1.0)*x13783)));
j4eval[1]=((((-1.0)*cj3*x13783))+((cj3*x13782)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13784=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13784);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13784);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13785=(cj5*r10);
IkReal x13786=(r11*sj5);
j4eval[0]=(x13786+(((-1.0)*x13785)));
j4eval[1]=((((-1.0)*sj3*x13786))+((sj3*x13785)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13787=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13787);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13787);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13788=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13788);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13788);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13789=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13789))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13789)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13790=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13790);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13790);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13791=((1.0)*sj1);
CheckValue<IkReal> x13792=IKPowWithIntegerCheck(r22,-1);
if(!x13792.valid){
continue;
}
CheckValue<IkReal> x13793=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13793.valid){
continue;
}
if( IKabs(((x13792.value)*(((((-1.0)*cj2*x13791))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13793.value)*(((((-1.0)*sj2*x13791))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13792.value)*(((((-1.0)*cj2*x13791))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13793.value)*(((((-1.0)*sj2*x13791))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13792.value)*(((((-1.0)*cj2*x13791))+(((-1.0)*cj1*sj2))))), ((x13793.value)*(((((-1.0)*sj2*x13791))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13794=IKsin(j4);
IkReal x13795=IKcos(j4);
IkReal x13796=((1.0)*cj5);
IkReal x13797=(sj5*x13795);
IkReal x13798=(sj5*x13794);
evalcond[0]=((-1.0)*r22*x13795);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13794)));
evalcond[2]=(((r01*x13798))+(((-1.0)*r00*x13794*x13796)));
evalcond[3]=((((-1.0)*r10*x13795*x13796))+((r11*x13797)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13794*x13796))+((r11*x13798)));
evalcond[5]=(((r01*x13797))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13795*x13796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13799=((1.0)*cj5);
CheckValue<IkReal> x13800=IKPowWithIntegerCheck(((((-1.0)*r10*x13799))+((r11*sj5))),-1);
if(!x13800.valid){
continue;
}
CheckValue<IkReal> x13801=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13799))),-1);
if(!x13801.valid){
continue;
}
if( IKabs(((-1.0)*(x13800.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13801.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13800.value)))+IKsqr(((x13801.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13800.value)), ((x13801.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13802=IKsin(j4);
IkReal x13803=IKcos(j4);
IkReal x13804=((1.0)*cj5);
IkReal x13805=(sj5*x13803);
IkReal x13806=(sj5*x13802);
evalcond[0]=((-1.0)*r22*x13803);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13802)));
evalcond[2]=(((r01*x13806))+(((-1.0)*r00*x13802*x13804)));
evalcond[3]=(((r11*x13805))+(((-1.0)*r10*x13803*x13804)));
evalcond[4]=((1.0)+((r11*x13806))+(((-1.0)*r10*x13802*x13804)));
evalcond[5]=(((r01*x13805))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13803*x13804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13807=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13807);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13807);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13808=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13808);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13808);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13809=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13809.valid){
continue;
}
CheckValue<IkReal> x13810=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13810.valid){
continue;
}
if( IKabs(((-1.0)*(x13809.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13810.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13809.value)))+IKsqr(((x13810.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13809.value)), ((x13810.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13811=IKsin(j4);
IkReal x13812=IKcos(j4);
IkReal x13813=(cj5*x13812);
IkReal x13814=(sj5*x13811);
IkReal x13815=((1.0)*cj5*x13811);
IkReal x13816=((1.0)*sj5*x13812);
evalcond[0]=((-1.0)*r22*x13812);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13811)));
evalcond[2]=(((r01*x13814))+(((-1.0)*r00*x13815)));
evalcond[3]=(((r10*x13813))+(((-1.0)*r11*x13816)));
evalcond[4]=((1.0)+((r11*x13814))+(((-1.0)*r10*x13815)));
evalcond[5]=(((r00*x13813))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13817=IKPowWithIntegerCheck(r22,-1);
if(!x13817.valid){
continue;
}
CheckValue<IkReal> x13818=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13818.valid){
continue;
}
if( IKabs(((x13817.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13818.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13817.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13818.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13817.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13818.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13819=IKsin(j4);
IkReal x13820=IKcos(j4);
IkReal x13821=(cj5*x13820);
IkReal x13822=(sj5*x13819);
IkReal x13823=((1.0)*cj5*x13819);
IkReal x13824=((1.0)*sj5*x13820);
evalcond[0]=((-1.0)*r22*x13820);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13819)));
evalcond[2]=(((r01*x13822))+(((-1.0)*r00*x13823)));
evalcond[3]=(((r10*x13821))+(((-1.0)*r11*x13824)));
evalcond[4]=((1.0)+((r11*x13822))+(((-1.0)*r10*x13823)));
evalcond[5]=(((r00*x13821))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13825=((1.0)*r10);
CheckValue<IkReal> x13826=IKPowWithIntegerCheck(cj3,-1);
if(!x13826.valid){
continue;
}
CheckValue<IkReal> x13827=IKPowWithIntegerCheck(r22,-1);
if(!x13827.valid){
continue;
}
CheckValue<IkReal> x13828=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13825))+((cj3*r11*sj5))),-1);
if(!x13828.valid){
continue;
}
if( IKabs(((x13826.value)*(x13827.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13828.value)*(((((-1.0)*sj3*sj5*x13825))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13826.value)*(x13827.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13828.value)*(((((-1.0)*sj3*sj5*x13825))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13826.value)*(x13827.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13828.value)*(((((-1.0)*sj3*sj5*x13825))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13829=IKsin(j4);
IkReal x13830=IKcos(j4);
IkReal x13831=(sj1*sj2);
IkReal x13832=(r11*sj5);
IkReal x13833=(r00*sj3);
IkReal x13834=(cj5*r01);
IkReal x13835=((1.0)*cj1);
IkReal x13836=(cj3*sj5);
IkReal x13837=(cj5*r11);
IkReal x13838=(r10*sj3);
IkReal x13839=(cj2*sj1);
IkReal x13840=((1.0)*cj5);
IkReal x13841=((1.0)*sj3);
IkReal x13842=(r01*sj5);
IkReal x13843=(cj2*x13835);
IkReal x13844=(cj3*x13830);
IkReal x13845=(r22*x13829);
IkReal x13846=(cj5*x13830);
IkReal x13847=(x13829*x13840);
evalcond[0]=((-1.0)*r22*x13830);
evalcond[1]=(x13839+((cj1*sj2))+((cj3*x13845)));
evalcond[2]=(((x13829*x13842))+(((-1.0)*r00*x13847)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13847))+((x13829*x13832)));
evalcond[4]=((((-1.0)*x13843))+x13831+(((-1.0)*x13841*x13845)));
evalcond[5]=(((sj5*x13838))+(((-1.0)*r10*x13840*x13844))+((sj3*x13837))+((x13832*x13844)));
evalcond[6]=((((-1.0)*x13830*x13832*x13841))+((x13838*x13846))+((r10*x13836))+((cj3*x13837)));
evalcond[7]=((((-1.0)*x13843))+x13831+((sj5*x13833))+((sj3*x13834))+(((-1.0)*r00*x13840*x13844))+((r01*x13830*x13836)));
evalcond[8]=((((-1.0)*x13830*x13841*x13842))+(((-1.0)*sj2*x13835))+((x13833*x13846))+(((-1.0)*x13839))+((r00*x13836))+((cj3*x13834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13848=(cj5*r10);
IkReal x13849=((1.0)*r11);
CheckValue<IkReal> x13850=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13848))),-1);
if(!x13850.valid){
continue;
}
CheckValue<IkReal> x13851=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13849))+((sj3*x13848))),-1);
if(!x13851.valid){
continue;
}
if( IKabs(((-1.0)*(x13850.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13851.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13849)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13850.value)))+IKsqr(((x13851.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13849))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13850.value)), ((x13851.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13849))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13852=IKsin(j4);
IkReal x13853=IKcos(j4);
IkReal x13854=(sj1*sj2);
IkReal x13855=(r11*sj5);
IkReal x13856=(r00*sj3);
IkReal x13857=(cj5*r01);
IkReal x13858=((1.0)*cj1);
IkReal x13859=(cj3*sj5);
IkReal x13860=(cj5*r11);
IkReal x13861=(r10*sj3);
IkReal x13862=(cj2*sj1);
IkReal x13863=((1.0)*cj5);
IkReal x13864=((1.0)*sj3);
IkReal x13865=(r01*sj5);
IkReal x13866=(cj2*x13858);
IkReal x13867=(cj3*x13853);
IkReal x13868=(r22*x13852);
IkReal x13869=(cj5*x13853);
IkReal x13870=(x13852*x13863);
evalcond[0]=((-1.0)*r22*x13853);
evalcond[1]=(x13862+((cj1*sj2))+((cj3*x13868)));
evalcond[2]=((((-1.0)*r00*x13870))+((x13852*x13865)));
evalcond[3]=((1.0)+((x13852*x13855))+(((-1.0)*r10*x13870)));
evalcond[4]=(x13854+(((-1.0)*x13864*x13868))+(((-1.0)*x13866)));
evalcond[5]=(((sj3*x13860))+((sj5*x13861))+((x13855*x13867))+(((-1.0)*r10*x13863*x13867)));
evalcond[6]=((((-1.0)*x13853*x13855*x13864))+((x13861*x13869))+((r10*x13859))+((cj3*x13860)));
evalcond[7]=(((r01*x13853*x13859))+x13854+((sj3*x13857))+(((-1.0)*r00*x13863*x13867))+((sj5*x13856))+(((-1.0)*x13866)));
evalcond[8]=(((r00*x13859))+(((-1.0)*x13862))+(((-1.0)*sj2*x13858))+(((-1.0)*x13853*x13864*x13865))+((x13856*x13869))+((cj3*x13857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13871=((1.0)*sj3);
IkReal x13872=(r11*sj5);
IkReal x13873=((1.0)*cj5*r10);
CheckValue<IkReal> x13874=IKPowWithIntegerCheck((x13872+(((-1.0)*x13873))),-1);
if(!x13874.valid){
continue;
}
CheckValue<IkReal> x13875=IKPowWithIntegerCheck((((cj3*x13872))+(((-1.0)*cj3*x13873))),-1);
if(!x13875.valid){
continue;
}
if( IKabs(((-1.0)*(x13874.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13875.value)*(((((-1.0)*cj5*r11*x13871))+(((-1.0)*r10*sj5*x13871)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13874.value)))+IKsqr(((x13875.value)*(((((-1.0)*cj5*r11*x13871))+(((-1.0)*r10*sj5*x13871))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13874.value)), ((x13875.value)*(((((-1.0)*cj5*r11*x13871))+(((-1.0)*r10*sj5*x13871))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13876=IKsin(j4);
IkReal x13877=IKcos(j4);
IkReal x13878=(sj1*sj2);
IkReal x13879=(r11*sj5);
IkReal x13880=(r00*sj3);
IkReal x13881=(cj5*r01);
IkReal x13882=((1.0)*cj1);
IkReal x13883=(cj3*sj5);
IkReal x13884=(cj5*r11);
IkReal x13885=(r10*sj3);
IkReal x13886=(cj2*sj1);
IkReal x13887=((1.0)*cj5);
IkReal x13888=((1.0)*sj3);
IkReal x13889=(r01*sj5);
IkReal x13890=(cj2*x13882);
IkReal x13891=(cj3*x13877);
IkReal x13892=(r22*x13876);
IkReal x13893=(cj5*x13877);
IkReal x13894=(x13876*x13887);
evalcond[0]=((-1.0)*r22*x13877);
evalcond[1]=(x13886+((cj3*x13892))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13894))+((x13876*x13889)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13894))+((x13876*x13879)));
evalcond[4]=(x13878+(((-1.0)*x13888*x13892))+(((-1.0)*x13890)));
evalcond[5]=(((sj5*x13885))+((sj3*x13884))+((x13879*x13891))+(((-1.0)*r10*x13887*x13891)));
evalcond[6]=(((cj3*x13884))+((x13885*x13893))+((r10*x13883))+(((-1.0)*x13877*x13879*x13888)));
evalcond[7]=(((sj5*x13880))+((sj3*x13881))+x13878+(((-1.0)*r00*x13887*x13891))+(((-1.0)*x13890))+((r01*x13877*x13883)));
evalcond[8]=((((-1.0)*sj2*x13882))+((cj3*x13881))+((x13880*x13893))+(((-1.0)*x13886))+((r00*x13883))+(((-1.0)*x13877*x13888*x13889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13895=cj5*cj5;
IkReal x13896=((1.0)*cj3);
IkReal x13897=(r10*r21);
IkReal x13898=(cj5*sj5);
IkReal x13899=(r11*r21);
IkReal x13900=(r11*r20);
IkReal x13901=(r22*sj3);
IkReal x13902=(r10*r20);
IkReal x13903=((1.0)*sj3*x13895);
CheckValue<IkReal> x13904=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13895*x13896*x13902))+((cj3*x13895*x13899))+((cj3*x13898*x13900))+(((-1.0)*x13896*x13899))+(((-1.0)*r12*r22*x13896))+((cj3*x13897*x13898)))),-1);
if(!x13904.valid){
continue;
}
CheckValue<IkReal> x13905 = IKatan2WithCheck(IkReal((((cj5*r11*x13901))+((r10*sj5*x13901)))),IkReal(((((-1.0)*sj3*x13898*x13902))+((sj3*x13898*x13899))+((sj3*x13897))+(((-1.0)*x13897*x13903))+(((-1.0)*x13900*x13903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13904.value)))+(x13905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13906=IKsin(j4);
IkReal x13907=IKcos(j4);
IkReal x13908=(sj1*sj2);
IkReal x13909=(cj5*sj3);
IkReal x13910=(cj5*r10);
IkReal x13911=(r00*sj5);
IkReal x13912=(r11*sj5);
IkReal x13913=(cj3*cj5);
IkReal x13914=((1.0)*cj1);
IkReal x13915=(cj3*sj5);
IkReal x13916=(r21*sj5);
IkReal x13917=(cj2*sj1);
IkReal x13918=(sj3*sj5);
IkReal x13919=(r01*sj5);
IkReal x13920=(cj2*x13914);
IkReal x13921=((1.0)*x13907);
IkReal x13922=((1.0)*x13906);
IkReal x13923=(cj3*x13906);
IkReal x13924=(cj3*x13907);
evalcond[0]=(((x13906*x13916))+(((-1.0)*r22*x13921))+(((-1.0)*cj5*r20*x13922)));
evalcond[1]=(((x13906*x13919))+(((-1.0)*cj5*r00*x13922))+(((-1.0)*r02*x13921)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13921))+((x13906*x13912))+(((-1.0)*x13910*x13922)));
evalcond[3]=(((r10*x13918))+(((-1.0)*cj3*x13910*x13921))+((x13912*x13924))+((r11*x13909))+((r12*x13923)));
evalcond[4]=(((r10*x13915))+(((-1.0)*sj3*x13912*x13921))+(((-1.0)*r12*sj3*x13922))+((r11*x13913))+((r10*x13907*x13909)));
evalcond[5]=((((-1.0)*r20*x13913*x13921))+((cj1*sj2))+x13917+((r22*x13923))+((r20*x13918))+((r21*x13909))+((r21*x13907*x13915)));
evalcond[6]=((((-1.0)*r00*x13913*x13921))+x13908+((r01*x13907*x13915))+(((-1.0)*x13920))+((sj3*x13911))+((r01*x13909))+((r02*x13923)));
evalcond[7]=((((-1.0)*sj3*x13916*x13921))+x13908+((r20*x13907*x13909))+(((-1.0)*x13920))+((r20*x13915))+((r21*x13913))+(((-1.0)*r22*sj3*x13922)));
evalcond[8]=((((-1.0)*r01*x13918*x13921))+(((-1.0)*x13917))+(((-1.0)*sj2*x13914))+((cj3*x13911))+((r01*x13913))+((r00*x13907*x13909))+(((-1.0)*r02*sj3*x13922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13925=((1.0)*cj5);
CheckValue<IkReal> x13926=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13925)))),-1);
if(!x13926.valid){
continue;
}
CheckValue<IkReal> x13927 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13926.value)))+(x13927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13928=IKsin(j4);
IkReal x13929=IKcos(j4);
IkReal x13930=(sj1*sj2);
IkReal x13931=(cj5*sj3);
IkReal x13932=(cj5*r10);
IkReal x13933=(r00*sj5);
IkReal x13934=(r11*sj5);
IkReal x13935=(cj3*cj5);
IkReal x13936=((1.0)*cj1);
IkReal x13937=(cj3*sj5);
IkReal x13938=(r21*sj5);
IkReal x13939=(cj2*sj1);
IkReal x13940=(sj3*sj5);
IkReal x13941=(r01*sj5);
IkReal x13942=(cj2*x13936);
IkReal x13943=((1.0)*x13929);
IkReal x13944=((1.0)*x13928);
IkReal x13945=(cj3*x13928);
IkReal x13946=(cj3*x13929);
evalcond[0]=((((-1.0)*cj5*r20*x13944))+(((-1.0)*r22*x13943))+((x13928*x13938)));
evalcond[1]=((((-1.0)*cj5*r00*x13944))+(((-1.0)*r02*x13943))+((x13928*x13941)));
evalcond[2]=((1.0)+(((-1.0)*x13932*x13944))+(((-1.0)*r12*x13943))+((x13928*x13934)));
evalcond[3]=(((r11*x13931))+((x13934*x13946))+(((-1.0)*cj3*x13932*x13943))+((r12*x13945))+((r10*x13940)));
evalcond[4]=(((r11*x13935))+((r10*x13929*x13931))+(((-1.0)*r12*sj3*x13944))+((r10*x13937))+(((-1.0)*sj3*x13934*x13943)));
evalcond[5]=(((r21*x13931))+((cj1*sj2))+x13939+((r21*x13929*x13937))+((r20*x13940))+((r22*x13945))+(((-1.0)*r20*x13935*x13943)));
evalcond[6]=(((sj3*x13933))+((r01*x13929*x13937))+((r01*x13931))+x13930+(((-1.0)*r00*x13935*x13943))+(((-1.0)*x13942))+((r02*x13945)));
evalcond[7]=(((r20*x13937))+((r20*x13929*x13931))+((r21*x13935))+x13930+(((-1.0)*x13942))+(((-1.0)*r22*sj3*x13944))+(((-1.0)*sj3*x13938*x13943)));
evalcond[8]=((((-1.0)*sj2*x13936))+((cj3*x13933))+((r01*x13935))+((r00*x13929*x13931))+(((-1.0)*r01*x13940*x13943))+(((-1.0)*r02*sj3*x13944))+(((-1.0)*x13939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13947=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13947.valid){
continue;
}
CheckValue<IkReal> x13948 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13947.value)))+(x13948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13949=IKsin(j4);
IkReal x13950=IKcos(j4);
IkReal x13951=(sj1*sj2);
IkReal x13952=(cj5*sj3);
IkReal x13953=(cj5*r10);
IkReal x13954=(r00*sj5);
IkReal x13955=(r11*sj5);
IkReal x13956=(cj3*cj5);
IkReal x13957=((1.0)*cj1);
IkReal x13958=(cj3*sj5);
IkReal x13959=(r21*sj5);
IkReal x13960=(cj2*sj1);
IkReal x13961=(sj3*sj5);
IkReal x13962=(r01*sj5);
IkReal x13963=(cj2*x13957);
IkReal x13964=((1.0)*x13950);
IkReal x13965=((1.0)*x13949);
IkReal x13966=(cj3*x13949);
IkReal x13967=(cj3*x13950);
evalcond[0]=((((-1.0)*r22*x13964))+(((-1.0)*cj5*r20*x13965))+((x13949*x13959)));
evalcond[1]=((((-1.0)*r02*x13964))+((x13949*x13962))+(((-1.0)*cj5*r00*x13965)));
evalcond[2]=((1.0)+(((-1.0)*x13953*x13965))+(((-1.0)*r12*x13964))+((x13949*x13955)));
evalcond[3]=((((-1.0)*cj3*x13953*x13964))+((x13955*x13967))+((r11*x13952))+((r10*x13961))+((r12*x13966)));
evalcond[4]=(((r11*x13956))+((r10*x13950*x13952))+(((-1.0)*r12*sj3*x13965))+(((-1.0)*sj3*x13955*x13964))+((r10*x13958)));
evalcond[5]=(((cj1*sj2))+x13960+((r21*x13952))+((r20*x13961))+(((-1.0)*r20*x13956*x13964))+((r21*x13950*x13958))+((r22*x13966)));
evalcond[6]=(((r02*x13966))+((r01*x13952))+((r01*x13950*x13958))+x13951+(((-1.0)*x13963))+(((-1.0)*r00*x13956*x13964))+((sj3*x13954)));
evalcond[7]=((((-1.0)*r22*sj3*x13965))+x13951+((r21*x13956))+(((-1.0)*x13963))+(((-1.0)*sj3*x13959*x13964))+((r20*x13950*x13952))+((r20*x13958)));
evalcond[8]=(((cj3*x13954))+((r01*x13956))+(((-1.0)*x13960))+(((-1.0)*r02*sj3*x13965))+((r00*x13950*x13952))+(((-1.0)*sj2*x13957))+(((-1.0)*r01*x13961*x13964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13968=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13968;
j4eval[1]=IKsign(x13968);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13969=((1.0)*cj5);
IkReal x13970=((((-1.0)*r21*x13969))+(((-1.0)*r20*sj5)));
j4eval[0]=x13970;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13969))))));
j4eval[2]=IKsign(x13970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13971=cj5*cj5;
IkReal x13972=(cj3*r21);
IkReal x13973=(cj5*sj5);
IkReal x13974=((1.0)*cj3);
IkReal x13975=(((r10*x13972*x13973))+(((-1.0)*r12*r22*x13974))+(((-1.0)*r10*r20*x13971*x13974))+((cj3*r11*r20*x13973))+(((-1.0)*r11*x13972))+((r11*x13971*x13972)));
j4eval[0]=x13975;
j4eval[1]=IKsign(x13975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13976=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13976;
j4eval[1]=IKsign(x13976);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13977=((1.0)*cj5);
IkReal x13978=((((-1.0)*r21*x13977))+(((-1.0)*r20*sj5)));
j4eval[0]=x13978;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13977))))));
j4eval[2]=IKsign(x13978);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13979=cj5*cj5;
IkReal x13980=r11*r11;
IkReal x13981=(cj5*r10);
IkReal x13982=(r11*sj5);
IkReal x13983=((((-1.0)*x13979*(r10*r10)))+(((2.0)*x13981*x13982))+(((-1.0)*(r12*r12)))+(((-1.0)*x13980))+((x13979*x13980)));
j4eval[0]=x13983;
j4eval[1]=((IKabs((x13981+(((-1.0)*x13982)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13984=cj5*cj5;
IkReal x13985=r11*r11;
IkReal x13986=(cj5*r10);
IkReal x13987=(r11*sj5);
CheckValue<IkReal> x13988 = IKatan2WithCheck(IkReal((x13986+(((-1.0)*x13987)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13988.valid){
continue;
}
CheckValue<IkReal> x13989=IKPowWithIntegerCheck(IKsign((((x13984*x13985))+(((-1.0)*(r12*r12)))+(((2.0)*x13986*x13987))+(((-1.0)*x13984*(r10*r10)))+(((-1.0)*x13985)))),-1);
if(!x13989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13988.value)+(((1.5707963267949)*(x13989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13990=IKsin(j4);
IkReal x13991=IKcos(j4);
IkReal x13992=(cj5*r10);
IkReal x13993=(r01*sj5);
IkReal x13994=(cj5*r00);
IkReal x13995=(cj5*r20);
IkReal x13996=((1.0)*x13991);
IkReal x13997=((1.0)*x13990);
IkReal x13998=(sj5*x13990);
evalcond[0]=(((r21*x13998))+(((-1.0)*r22*x13996))+(((-1.0)*x13995*x13997)));
evalcond[1]=((((-1.0)*r02*x13996))+(((-1.0)*x13994*x13997))+((x13990*x13993)));
evalcond[2]=((((-1.0)*r11*sj5*x13996))+(((-1.0)*r12*x13997))+((x13991*x13992)));
evalcond[3]=((-1.0)+(((-1.0)*x13992*x13997))+((r11*x13998))+(((-1.0)*r12*x13996)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13993*x13996))+(((-1.0)*r02*x13997))+((cj1*sj2))+((x13991*x13994)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13997))+(((-1.0)*r21*sj5*x13996))+((x13991*x13995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13999=((1.0)*cj5);
CheckValue<IkReal> x14000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13999))+(((-1.0)*r20*sj5)))),-1);
if(!x14000.valid){
continue;
}
CheckValue<IkReal> x14001 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14000.value)))+(x14001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14002=IKsin(j4);
IkReal x14003=IKcos(j4);
IkReal x14004=(cj5*r10);
IkReal x14005=(r01*sj5);
IkReal x14006=(cj5*r00);
IkReal x14007=(cj5*r20);
IkReal x14008=((1.0)*x14003);
IkReal x14009=((1.0)*x14002);
IkReal x14010=(sj5*x14002);
evalcond[0]=(((r21*x14010))+(((-1.0)*x14007*x14009))+(((-1.0)*r22*x14008)));
evalcond[1]=((((-1.0)*r02*x14008))+((x14002*x14005))+(((-1.0)*x14006*x14009)));
evalcond[2]=(((x14003*x14004))+(((-1.0)*r11*sj5*x14008))+(((-1.0)*r12*x14009)));
evalcond[3]=((-1.0)+((r11*x14010))+(((-1.0)*r12*x14008))+(((-1.0)*x14004*x14009)));
evalcond[4]=((((-1.0)*r02*x14009))+((cj2*sj1))+(((-1.0)*x14005*x14008))+((cj1*sj2))+((x14003*x14006)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14003*x14007))+(((-1.0)*r21*sj5*x14008))+(((-1.0)*r22*x14009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14011 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14011.valid){
continue;
}
CheckValue<IkReal> x14012=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14011.value)+(((1.5707963267949)*(x14012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14013=IKsin(j4);
IkReal x14014=IKcos(j4);
IkReal x14015=(cj5*r10);
IkReal x14016=(r01*sj5);
IkReal x14017=(cj5*r00);
IkReal x14018=(cj5*r20);
IkReal x14019=((1.0)*x14014);
IkReal x14020=((1.0)*x14013);
IkReal x14021=(sj5*x14013);
evalcond[0]=(((r21*x14021))+(((-1.0)*x14018*x14020))+(((-1.0)*r22*x14019)));
evalcond[1]=((((-1.0)*r02*x14019))+((x14013*x14016))+(((-1.0)*x14017*x14020)));
evalcond[2]=((((-1.0)*r11*sj5*x14019))+(((-1.0)*r12*x14020))+((x14014*x14015)));
evalcond[3]=((-1.0)+((r11*x14021))+(((-1.0)*x14015*x14020))+(((-1.0)*r12*x14019)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x14014*x14017))+(((-1.0)*r02*x14020))+(((-1.0)*x14016*x14019)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14014*x14018))+(((-1.0)*r22*x14020))+(((-1.0)*r21*sj5*x14019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14022=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14022;
j4eval[1]=IKsign(x14022);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14023=((1.0)*cj5);
IkReal x14024=((((-1.0)*r21*x14023))+(((-1.0)*r20*sj5)));
j4eval[0]=x14024;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x14023))))));
j4eval[2]=IKsign(x14024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14025=cj5*cj5;
IkReal x14026=r11*r11;
IkReal x14027=(r11*sj5);
IkReal x14028=(cj5*r10);
IkReal x14029=((r12*r12)+(((-1.0)*x14025*x14026))+((x14025*(r10*r10)))+(((-2.0)*x14027*x14028))+x14026);
j4eval[0]=x14029;
j4eval[1]=IKsign(x14029);
j4eval[2]=((IKabs(((((-1.0)*x14028))+x14027)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14030=cj5*cj5;
IkReal x14031=r11*r11;
IkReal x14032=(cj5*r10);
IkReal x14033=(r11*sj5);
CheckValue<IkReal> x14034 = IKatan2WithCheck(IkReal(((((-1.0)*x14032))+x14033)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14034.valid){
continue;
}
CheckValue<IkReal> x14035=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x14030*x14031))+((x14030*(r10*r10)))+x14031+(((-2.0)*x14032*x14033)))),-1);
if(!x14035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14034.value)+(((1.5707963267949)*(x14035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14036=IKcos(j4);
IkReal x14037=IKsin(j4);
IkReal x14038=(cj5*r00);
IkReal x14039=(cj5*r10);
IkReal x14040=(r21*sj5);
IkReal x14041=(cj5*r20);
IkReal x14042=((1.0)*x14036);
IkReal x14043=((1.0)*x14037);
IkReal x14044=(sj5*x14037);
IkReal x14045=(sj5*x14036);
evalcond[0]=(((r11*x14045))+(((-1.0)*x14039*x14042))+((r12*x14037)));
evalcond[1]=(((x14037*x14040))+(((-1.0)*x14041*x14043))+(((-1.0)*r22*x14042)));
evalcond[2]=(((r01*x14044))+(((-1.0)*x14038*x14043))+(((-1.0)*r02*x14042)));
evalcond[3]=((-1.0)+((r11*x14044))+(((-1.0)*r12*x14042))+(((-1.0)*x14039*x14043)));
evalcond[4]=(((cj2*sj1))+((r01*x14045))+(((-1.0)*x14038*x14042))+((cj1*sj2))+((r02*x14037)));
evalcond[5]=(((r22*x14037))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14036*x14040))+(((-1.0)*x14041*x14042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14046=((1.0)*cj5);
CheckValue<IkReal> x14047=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14046))+(((-1.0)*r20*sj5)))),-1);
if(!x14047.valid){
continue;
}
CheckValue<IkReal> x14048 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14047.value)))+(x14048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14049=IKcos(j4);
IkReal x14050=IKsin(j4);
IkReal x14051=(cj5*r00);
IkReal x14052=(cj5*r10);
IkReal x14053=(r21*sj5);
IkReal x14054=(cj5*r20);
IkReal x14055=((1.0)*x14049);
IkReal x14056=((1.0)*x14050);
IkReal x14057=(sj5*x14050);
IkReal x14058=(sj5*x14049);
evalcond[0]=(((r11*x14058))+((r12*x14050))+(((-1.0)*x14052*x14055)));
evalcond[1]=(((x14050*x14053))+(((-1.0)*r22*x14055))+(((-1.0)*x14054*x14056)));
evalcond[2]=((((-1.0)*x14051*x14056))+(((-1.0)*r02*x14055))+((r01*x14057)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14055))+((r11*x14057))+(((-1.0)*x14052*x14056)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14051*x14055))+((r02*x14050))+((r01*x14058)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14054*x14055))+((r22*x14050))+((x14049*x14053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14059 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14059.valid){
continue;
}
CheckValue<IkReal> x14060=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14059.value)+(((1.5707963267949)*(x14060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14061=IKcos(j4);
IkReal x14062=IKsin(j4);
IkReal x14063=(cj5*r00);
IkReal x14064=(cj5*r10);
IkReal x14065=(r21*sj5);
IkReal x14066=(cj5*r20);
IkReal x14067=((1.0)*x14061);
IkReal x14068=((1.0)*x14062);
IkReal x14069=(sj5*x14062);
IkReal x14070=(sj5*x14061);
evalcond[0]=((((-1.0)*x14064*x14067))+((r11*x14070))+((r12*x14062)));
evalcond[1]=((((-1.0)*x14066*x14068))+(((-1.0)*r22*x14067))+((x14062*x14065)));
evalcond[2]=(((r01*x14069))+(((-1.0)*r02*x14067))+(((-1.0)*x14063*x14068)));
evalcond[3]=((-1.0)+(((-1.0)*x14064*x14068))+(((-1.0)*r12*x14067))+((r11*x14069)));
evalcond[4]=(((r02*x14062))+((cj2*sj1))+((cj1*sj2))+((r01*x14070))+(((-1.0)*x14063*x14067)));
evalcond[5]=((((-1.0)*x14066*x14067))+((r22*x14062))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14061*x14065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14072 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14072)==0){
continue;
}
IkReal x14071=pow(x14072,-0.5);
CheckValue<IkReal> x14073 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14073.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14073.value));
IkReal gconst37=((-1.0)*r01*x14071);
IkReal gconst38=(r00*x14071);
CheckValue<IkReal> x14074 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14074.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14074.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14077 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14077.valid){
continue;
}
IkReal x14075=((-1.0)*(x14077.value));
IkReal x14076=x14071;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14075;
IkReal gconst36=x14075;
IkReal gconst37=((-1.0)*r01*x14076);
IkReal gconst38=(r00*x14076);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14080 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14080.valid){
continue;
}
IkReal x14078=((-1.0)*(x14080.value));
IkReal x14079=x14071;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14078;
IkReal gconst36=x14078;
IkReal gconst37=((-1.0)*r01*x14079);
IkReal gconst38=(r00*x14079);
CheckValue<IkReal> x14088=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14088.valid){
continue;
}
IkReal x14081=x14088.value;
IkReal x14082=(sj3*x14081);
IkReal x14083=(r11*x14082);
IkReal x14084=(r21*x14082);
IkReal x14085=(r20*x14082);
IkReal x14086=(r10*x14082);
IkReal x14087=(r00*r01*x14082);
j4eval[0]=IKsign((((r00*r01*r10*x14084))+((r12*r22*sj3))+((r10*x14085*(r00*r00)))+((r21*x14083*(r01*r01)))+((r00*r01*r20*x14083))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14089=gconst38*gconst38;
IkReal x14090=gconst37*gconst37;
IkReal x14091=((1.0)*cj3);
IkReal x14092=(r11*r20);
IkReal x14093=(r10*sj3);
IkReal x14094=(gconst37*gconst38);
IkReal x14095=(r11*sj3);
IkReal x14096=(r21*x14090);
IkReal x14097=(cj3*x14094);
CheckValue<IkReal> x14098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x14089*x14091))+(((-1.0)*r11*x14091*x14096))+(((-1.0)*r12*r22*x14091))+((r10*r21*x14097))+((x14092*x14097)))),-1);
if(!x14098.valid){
continue;
}
CheckValue<IkReal> x14099 = IKatan2WithCheck(IkReal((((gconst37*r22*x14093))+((gconst38*r22*x14095)))),IkReal(((((-1.0)*r20*x14093*x14094))+(((-1.0)*sj3*x14089*x14092))+((x14093*x14096))+((r21*x14094*x14095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14098.value)))+(x14099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14100=IKsin(j4);
IkReal x14101=IKcos(j4);
IkReal x14102=(cj2*sj1);
IkReal x14103=(cj1*sj2);
IkReal x14104=(gconst38*r21);
IkReal x14105=(cj3*r20);
IkReal x14106=(gconst38*r10);
IkReal x14107=(cj3*gconst37);
IkReal x14108=(sj1*sj2);
IkReal x14109=(gconst38*r00);
IkReal x14110=(cj1*cj2);
IkReal x14111=(gconst37*sj3);
IkReal x14112=(gconst38*r20);
IkReal x14113=(gconst38*r01);
IkReal x14114=(gconst38*r11);
IkReal x14115=((1.0)*x14101);
IkReal x14116=((1.0)*x14100);
IkReal x14117=(cj3*x14100);
IkReal x14118=(sj3*x14101);
IkReal x14119=(gconst37*x14100);
IkReal x14120=(x14103+x14102);
evalcond[0]=((((-1.0)*r22*x14115))+(((-1.0)*x14112*x14116))+((r21*x14119)));
evalcond[1]=(((r01*x14119))+(((-1.0)*r02*x14115))+(((-1.0)*x14109*x14116)));
evalcond[2]=((-1.0)+((r11*x14119))+(((-1.0)*r12*x14115))+(((-1.0)*x14106*x14116)));
evalcond[3]=(((sj3*x14114))+((r10*x14111))+(((-1.0)*cj3*x14106*x14115))+((r11*x14101*x14107))+((r12*x14117)));
evalcond[4]=(((cj3*x14114))+((r10*x14107))+(((-1.0)*r11*x14111*x14115))+((x14106*x14118))+(((-1.0)*r12*sj3*x14116)));
evalcond[5]=(((sj3*x14104))+((r21*x14101*x14107))+((r22*x14117))+((r20*x14111))+x14120+(((-1.0)*gconst38*x14105*x14115)));
evalcond[6]=(((r02*x14117))+((sj3*x14113))+((r00*x14111))+(((-1.0)*x14108))+x14110+((r01*x14101*x14107))+(((-1.0)*cj3*x14109*x14115)));
evalcond[7]=((((-1.0)*r01*x14111*x14115))+((r00*x14107))+(((-1.0)*r02*sj3*x14116))+((x14109*x14118))+((cj3*x14113))+x14120);
evalcond[8]=(((x14112*x14118))+((cj3*x14104))+(((-1.0)*x14110))+x14108+(((-1.0)*r21*x14111*x14115))+((gconst37*x14105))+(((-1.0)*r22*sj3*x14116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14121=gconst38*gconst38;
IkReal x14122=gconst37*gconst37;
IkReal x14123=(gconst37*r10);
IkReal x14124=(cj3*r22);
IkReal x14125=((1.0)*gconst38);
IkReal x14126=(r21*sj3);
IkReal x14127=(gconst38*r11);
IkReal x14128=(cj3*r20);
IkReal x14129=(cj3*r21);
IkReal x14130=(r20*sj3);
CheckValue<IkReal> x14131 = IKatan2WithCheck(IkReal((((x14123*x14124))+((x14124*x14127)))),IkReal((((r10*x14122*x14129))+(((-1.0)*x14123*x14125*x14128))+((gconst37*x14127*x14129))+(((-1.0)*r11*x14121*x14128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14131.valid){
continue;
}
CheckValue<IkReal> x14132=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r11*x14125*x14130))+((r11*x14122*x14126))+(((-1.0)*x14123*x14125*x14126))+((r12*r22*sj3))+((r10*x14121*x14130)))),-1);
if(!x14132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14131.value)+(((1.5707963267949)*(x14132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14133=IKsin(j4);
IkReal x14134=IKcos(j4);
IkReal x14135=(cj2*sj1);
IkReal x14136=(cj1*sj2);
IkReal x14137=(gconst38*r21);
IkReal x14138=(cj3*r20);
IkReal x14139=(gconst38*r10);
IkReal x14140=(cj3*gconst37);
IkReal x14141=(sj1*sj2);
IkReal x14142=(gconst38*r00);
IkReal x14143=(cj1*cj2);
IkReal x14144=(gconst37*sj3);
IkReal x14145=(gconst38*r20);
IkReal x14146=(gconst38*r01);
IkReal x14147=(gconst38*r11);
IkReal x14148=((1.0)*x14134);
IkReal x14149=((1.0)*x14133);
IkReal x14150=(cj3*x14133);
IkReal x14151=(sj3*x14134);
IkReal x14152=(gconst37*x14133);
IkReal x14153=(x14136+x14135);
evalcond[0]=((((-1.0)*r22*x14148))+((r21*x14152))+(((-1.0)*x14145*x14149)));
evalcond[1]=((((-1.0)*x14142*x14149))+((r01*x14152))+(((-1.0)*r02*x14148)));
evalcond[2]=((-1.0)+(((-1.0)*x14139*x14149))+((r11*x14152))+(((-1.0)*r12*x14148)));
evalcond[3]=(((r10*x14144))+((sj3*x14147))+(((-1.0)*cj3*x14139*x14148))+((r11*x14134*x14140))+((r12*x14150)));
evalcond[4]=(((r10*x14140))+((cj3*x14147))+(((-1.0)*r11*x14144*x14148))+(((-1.0)*r12*sj3*x14149))+((x14139*x14151)));
evalcond[5]=((((-1.0)*gconst38*x14138*x14148))+((r21*x14134*x14140))+((sj3*x14137))+((r22*x14150))+x14153+((r20*x14144)));
evalcond[6]=(((r02*x14150))+((r01*x14134*x14140))+((sj3*x14146))+((r00*x14144))+(((-1.0)*cj3*x14142*x14148))+x14143+(((-1.0)*x14141)));
evalcond[7]=((((-1.0)*r02*sj3*x14149))+((cj3*x14146))+((x14142*x14151))+((r00*x14140))+x14153+(((-1.0)*r01*x14144*x14148)));
evalcond[8]=((((-1.0)*r22*sj3*x14149))+((gconst37*x14138))+x14141+((x14145*x14151))+(((-1.0)*x14143))+((cj3*x14137))+(((-1.0)*r21*x14144*x14148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14154=((1.0)*gconst38);
CheckValue<IkReal> x14155 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst37*r01))+(((-1.0)*r00*x14154)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14155.valid){
continue;
}
CheckValue<IkReal> x14156=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14154)))),-1);
if(!x14156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14155.value)+(((1.5707963267949)*(x14156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14157=IKsin(j4);
IkReal x14158=IKcos(j4);
IkReal x14159=(cj2*sj1);
IkReal x14160=(cj1*sj2);
IkReal x14161=(gconst38*r21);
IkReal x14162=(cj3*r20);
IkReal x14163=(gconst38*r10);
IkReal x14164=(cj3*gconst37);
IkReal x14165=(sj1*sj2);
IkReal x14166=(gconst38*r00);
IkReal x14167=(cj1*cj2);
IkReal x14168=(gconst37*sj3);
IkReal x14169=(gconst38*r20);
IkReal x14170=(gconst38*r01);
IkReal x14171=(gconst38*r11);
IkReal x14172=((1.0)*x14158);
IkReal x14173=((1.0)*x14157);
IkReal x14174=(cj3*x14157);
IkReal x14175=(sj3*x14158);
IkReal x14176=(gconst37*x14157);
IkReal x14177=(x14159+x14160);
evalcond[0]=((((-1.0)*x14169*x14173))+((r21*x14176))+(((-1.0)*r22*x14172)));
evalcond[1]=((((-1.0)*x14166*x14173))+((r01*x14176))+(((-1.0)*r02*x14172)));
evalcond[2]=((-1.0)+((r11*x14176))+(((-1.0)*x14163*x14173))+(((-1.0)*r12*x14172)));
evalcond[3]=(((r10*x14168))+((r12*x14174))+(((-1.0)*cj3*x14163*x14172))+((r11*x14158*x14164))+((sj3*x14171)));
evalcond[4]=((((-1.0)*r12*sj3*x14173))+((r10*x14164))+((x14163*x14175))+(((-1.0)*r11*x14168*x14172))+((cj3*x14171)));
evalcond[5]=(((r22*x14174))+((sj3*x14161))+(((-1.0)*gconst38*x14162*x14172))+((r21*x14158*x14164))+x14177+((r20*x14168)));
evalcond[6]=(((r01*x14158*x14164))+(((-1.0)*cj3*x14166*x14172))+((r02*x14174))+((r00*x14168))+x14167+((sj3*x14170))+(((-1.0)*x14165)));
evalcond[7]=(((x14166*x14175))+(((-1.0)*r01*x14168*x14172))+((cj3*x14170))+((r00*x14164))+x14177+(((-1.0)*r02*sj3*x14173)));
evalcond[8]=(((cj3*x14161))+(((-1.0)*r21*x14168*x14172))+((gconst37*x14162))+x14165+((x14169*x14175))+(((-1.0)*r22*sj3*x14173))+(((-1.0)*x14167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14179 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14179)==0){
continue;
}
IkReal x14178=pow(x14179,-0.5);
CheckValue<IkReal> x14180 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14180.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14180.value))));
IkReal gconst40=((1.0)*r01*x14178);
IkReal gconst41=((-1.0)*r00*x14178);
CheckValue<IkReal> x14181 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14181.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14181.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14184 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14184.valid){
continue;
}
IkReal x14182=((1.0)*(x14184.value));
IkReal x14183=x14178;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14182)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14182)));
IkReal gconst40=((1.0)*r01*x14183);
IkReal gconst41=((-1.0)*r00*x14183);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14187 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14187.valid){
continue;
}
IkReal x14185=((1.0)*(x14187.value));
IkReal x14186=x14178;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14185)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14185)));
IkReal gconst40=((1.0)*r01*x14186);
IkReal gconst41=((-1.0)*r00*x14186);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14188=gconst41*gconst41;
IkReal x14189=gconst40*gconst40;
IkReal x14190=(gconst40*r10);
IkReal x14191=(r22*sj3);
IkReal x14192=(r11*sj3);
IkReal x14193=((1.0)*cj3);
IkReal x14194=(gconst41*r21);
IkReal x14195=(gconst41*r20);
IkReal x14196=(r21*x14189);
IkReal x14197=((1.0)*r20*x14188);
CheckValue<IkReal> x14198 = IKatan2WithCheck(IkReal((((gconst41*r11*x14191))+((x14190*x14191)))),IkReal((((r10*sj3*x14196))+(((-1.0)*sj3*x14190*x14195))+(((-1.0)*x14192*x14197))+((gconst40*x14192*x14194)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14198.valid){
continue;
}
CheckValue<IkReal> x14199=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14193))+(((-1.0)*r10*r20*x14188*x14193))+(((-1.0)*r11*x14193*x14196))+((cj3*x14190*x14194))+((cj3*gconst40*r11*x14195)))),-1);
if(!x14199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14198.value)+(((1.5707963267949)*(x14199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14200=IKsin(j4);
IkReal x14201=IKcos(j4);
IkReal x14202=(cj2*sj1);
IkReal x14203=(cj1*sj2);
IkReal x14204=(gconst40*sj3);
IkReal x14205=(gconst41*sj3);
IkReal x14206=(gconst41*r20);
IkReal x14207=(cj3*gconst41);
IkReal x14208=(sj1*sj2);
IkReal x14209=(cj1*cj2);
IkReal x14210=(cj3*gconst40);
IkReal x14211=((1.0)*x14201);
IkReal x14212=((1.0)*x14200);
IkReal x14213=(cj3*x14200);
IkReal x14214=(gconst40*x14200);
IkReal x14215=(x14202+x14203);
IkReal x14216=(x14201*x14210);
evalcond[0]=((((-1.0)*x14206*x14212))+(((-1.0)*r22*x14211))+((r21*x14214)));
evalcond[1]=((((-1.0)*gconst41*r00*x14212))+(((-1.0)*r02*x14211))+((r01*x14214)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14211))+((r11*x14214))+(((-1.0)*gconst41*r10*x14212)));
evalcond[3]=(((r11*x14216))+((r12*x14213))+((r10*x14204))+((r11*x14205))+(((-1.0)*r10*x14207*x14211)));
evalcond[4]=(((r10*x14201*x14205))+((r10*x14210))+(((-1.0)*r11*x14204*x14211))+(((-1.0)*r12*sj3*x14212))+((r11*x14207)));
evalcond[5]=(((r22*x14213))+((r20*x14204))+((r21*x14205))+((r21*x14216))+(((-1.0)*cj3*x14206*x14211))+x14215);
evalcond[6]=(((r01*x14216))+((r00*x14204))+((r01*x14205))+(((-1.0)*x14208))+((r02*x14213))+x14209+(((-1.0)*r00*x14207*x14211)));
evalcond[7]=((((-1.0)*r02*sj3*x14212))+((r00*x14201*x14205))+(((-1.0)*r01*x14204*x14211))+((r00*x14210))+((r01*x14207))+x14215);
evalcond[8]=(((r20*x14201*x14205))+((r21*x14207))+(((-1.0)*r22*sj3*x14212))+(((-1.0)*x14209))+((r20*x14210))+(((-1.0)*r21*x14204*x14211))+x14208);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14217=((1.0)*gconst41);
CheckValue<IkReal> x14218=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14217))+(((-1.0)*gconst40*r20)))),-1);
if(!x14218.valid){
continue;
}
CheckValue<IkReal> x14219 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14217))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14218.value)))+(x14219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14220=IKsin(j4);
IkReal x14221=IKcos(j4);
IkReal x14222=(cj2*sj1);
IkReal x14223=(cj1*sj2);
IkReal x14224=(gconst40*sj3);
IkReal x14225=(gconst41*sj3);
IkReal x14226=(gconst41*r20);
IkReal x14227=(cj3*gconst41);
IkReal x14228=(sj1*sj2);
IkReal x14229=(cj1*cj2);
IkReal x14230=(cj3*gconst40);
IkReal x14231=((1.0)*x14221);
IkReal x14232=((1.0)*x14220);
IkReal x14233=(cj3*x14220);
IkReal x14234=(gconst40*x14220);
IkReal x14235=(x14222+x14223);
IkReal x14236=(x14221*x14230);
evalcond[0]=(((r21*x14234))+(((-1.0)*r22*x14231))+(((-1.0)*x14226*x14232)));
evalcond[1]=((((-1.0)*gconst41*r00*x14232))+(((-1.0)*r02*x14231))+((r01*x14234)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14232))+(((-1.0)*r12*x14231))+((r11*x14234)));
evalcond[3]=(((r10*x14224))+(((-1.0)*r10*x14227*x14231))+((r11*x14225))+((r12*x14233))+((r11*x14236)));
evalcond[4]=((((-1.0)*r11*x14224*x14231))+((r10*x14230))+(((-1.0)*r12*sj3*x14232))+((r11*x14227))+((r10*x14221*x14225)));
evalcond[5]=(((r20*x14224))+((r21*x14236))+((r21*x14225))+((r22*x14233))+(((-1.0)*cj3*x14226*x14231))+x14235);
evalcond[6]=(((r02*x14233))+((r01*x14236))+((r00*x14224))+(((-1.0)*x14228))+(((-1.0)*r00*x14227*x14231))+((r01*x14225))+x14229);
evalcond[7]=(((r00*x14221*x14225))+(((-1.0)*r01*x14224*x14231))+((r00*x14230))+(((-1.0)*r02*sj3*x14232))+((r01*x14227))+x14235);
evalcond[8]=((((-1.0)*r21*x14224*x14231))+((r20*x14230))+((r21*x14227))+((r20*x14221*x14225))+(((-1.0)*r22*sj3*x14232))+(((-1.0)*x14229))+x14228);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14237 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14237.valid){
continue;
}
CheckValue<IkReal> x14238=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14237.value)+(((1.5707963267949)*(x14238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14239=IKsin(j4);
IkReal x14240=IKcos(j4);
IkReal x14241=(cj2*sj1);
IkReal x14242=(cj1*sj2);
IkReal x14243=(gconst40*sj3);
IkReal x14244=(gconst41*sj3);
IkReal x14245=(gconst41*r20);
IkReal x14246=(cj3*gconst41);
IkReal x14247=(sj1*sj2);
IkReal x14248=(cj1*cj2);
IkReal x14249=(cj3*gconst40);
IkReal x14250=((1.0)*x14240);
IkReal x14251=((1.0)*x14239);
IkReal x14252=(cj3*x14239);
IkReal x14253=(gconst40*x14239);
IkReal x14254=(x14241+x14242);
IkReal x14255=(x14240*x14249);
evalcond[0]=(((r21*x14253))+(((-1.0)*x14245*x14251))+(((-1.0)*r22*x14250)));
evalcond[1]=((((-1.0)*gconst41*r00*x14251))+(((-1.0)*r02*x14250))+((r01*x14253)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14251))+((r11*x14253))+(((-1.0)*r12*x14250)));
evalcond[3]=((((-1.0)*r10*x14246*x14250))+((r12*x14252))+((r11*x14255))+((r11*x14244))+((r10*x14243)));
evalcond[4]=(((r10*x14240*x14244))+(((-1.0)*r11*x14243*x14250))+((r11*x14246))+((r10*x14249))+(((-1.0)*r12*sj3*x14251)));
evalcond[5]=(((r21*x14244))+((r21*x14255))+((r20*x14243))+(((-1.0)*cj3*x14245*x14250))+x14254+((r22*x14252)));
evalcond[6]=((((-1.0)*x14247))+(((-1.0)*r00*x14246*x14250))+((r02*x14252))+((r01*x14244))+x14248+((r00*x14243))+((r01*x14255)));
evalcond[7]=((((-1.0)*r02*sj3*x14251))+((r00*x14240*x14244))+(((-1.0)*r01*x14243*x14250))+((r01*x14246))+x14254+((r00*x14249)));
evalcond[8]=(((r21*x14246))+(((-1.0)*x14248))+(((-1.0)*r22*sj3*x14251))+((r20*x14240*x14244))+(((-1.0)*r21*x14243*x14250))+((r20*x14249))+x14247);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14256=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14256);
rxp1_1=(px*r21);
rxp1_2=(r11*x14256);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14257=(r11*sj5);
IkReal x14258=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14258))+x14257);
j4eval[1]=(((cj3*x14257))+(((-1.0)*cj3*x14258)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14259=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14259);
rxp1_1=(px*r21);
rxp1_2=(r11*x14259);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14260=(cj5*r10);
IkReal x14261=(r11*sj5);
j4eval[0]=((((-1.0)*x14260))+x14261);
j4eval[1]=(((sj3*x14260))+(((-1.0)*sj3*x14261)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14262=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14262);
rxp1_1=(px*r21);
rxp1_2=(r11*x14262);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14263=((1.0)*r10);
CheckValue<IkReal> x14264=IKPowWithIntegerCheck(cj3,-1);
if(!x14264.valid){
continue;
}
CheckValue<IkReal> x14265=IKPowWithIntegerCheck(r02,-1);
if(!x14265.valid){
continue;
}
CheckValue<IkReal> x14266=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14263))),-1);
if(!x14266.valid){
continue;
}
if( IKabs(((x14264.value)*(x14265.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14266.value)*(((((-1.0)*sj3*sj5*x14263))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14264.value)*(x14265.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14266.value)*(((((-1.0)*sj3*sj5*x14263))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14264.value)*(x14265.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14266.value)*(((((-1.0)*sj3*sj5*x14263))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14267=IKsin(j4);
IkReal x14268=IKcos(j4);
IkReal x14269=(cj2*sj1);
IkReal x14270=(cj1*sj2);
IkReal x14271=(cj5*r10);
IkReal x14272=(sj1*sj2);
IkReal x14273=(cj5*sj3);
IkReal x14274=(r11*sj5);
IkReal x14275=(cj3*sj5);
IkReal x14276=(r21*sj5);
IkReal x14277=(cj1*cj2);
IkReal x14278=(cj3*cj5);
IkReal x14279=(sj3*sj5);
IkReal x14280=((1.0)*x14267);
IkReal x14281=(r20*x14268);
IkReal x14282=(cj3*x14268);
IkReal x14283=(sj3*x14268);
IkReal x14284=(x14270+x14269);
evalcond[0]=((-1.0)*r02*x14268);
evalcond[1]=(((x14267*x14276))+(((-1.0)*cj5*r20*x14280)));
evalcond[2]=((((-1.0)*x14272))+((cj3*r02*x14267))+x14277);
evalcond[3]=((((-1.0)*r02*sj3*x14280))+x14284);
evalcond[4]=((-1.0)+((x14267*x14274))+(((-1.0)*x14271*x14280)));
evalcond[5]=(((r11*x14273))+(((-1.0)*x14271*x14282))+((r10*x14279))+((x14274*x14282)));
evalcond[6]=(((r11*x14278))+(((-1.0)*x14274*x14283))+((r10*x14275))+((x14271*x14283)));
evalcond[7]=(((r21*x14273))+((r21*x14268*x14275))+((r20*x14279))+x14284+(((-1.0)*x14278*x14281)));
evalcond[8]=(((x14273*x14281))+(((-1.0)*x14276*x14283))+(((-1.0)*x14277))+((r21*x14278))+((r20*x14275))+x14272);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14285=(cj5*r10);
IkReal x14286=((1.0)*r11);
CheckValue<IkReal> x14287=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14285))),-1);
if(!x14287.valid){
continue;
}
CheckValue<IkReal> x14288=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14286))+((sj3*x14285))),-1);
if(!x14288.valid){
continue;
}
if( IKabs(x14287.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14288.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14286)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14287.value)+IKsqr(((x14288.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14286))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14287.value, ((x14288.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14286))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14289=IKsin(j4);
IkReal x14290=IKcos(j4);
IkReal x14291=(cj2*sj1);
IkReal x14292=(cj1*sj2);
IkReal x14293=(cj5*r10);
IkReal x14294=(sj1*sj2);
IkReal x14295=(cj5*sj3);
IkReal x14296=(r11*sj5);
IkReal x14297=(cj3*sj5);
IkReal x14298=(r21*sj5);
IkReal x14299=(cj1*cj2);
IkReal x14300=(cj3*cj5);
IkReal x14301=(sj3*sj5);
IkReal x14302=((1.0)*x14289);
IkReal x14303=(r20*x14290);
IkReal x14304=(cj3*x14290);
IkReal x14305=(sj3*x14290);
IkReal x14306=(x14292+x14291);
evalcond[0]=((-1.0)*r02*x14290);
evalcond[1]=(((x14289*x14298))+(((-1.0)*cj5*r20*x14302)));
evalcond[2]=(((cj3*r02*x14289))+(((-1.0)*x14294))+x14299);
evalcond[3]=((((-1.0)*r02*sj3*x14302))+x14306);
evalcond[4]=((-1.0)+((x14289*x14296))+(((-1.0)*x14293*x14302)));
evalcond[5]=(((x14296*x14304))+(((-1.0)*x14293*x14304))+((r11*x14295))+((r10*x14301)));
evalcond[6]=(((r11*x14300))+((x14293*x14305))+((r10*x14297))+(((-1.0)*x14296*x14305)));
evalcond[7]=(((r20*x14301))+((r21*x14295))+((r21*x14290*x14297))+x14306+(((-1.0)*x14300*x14303)));
evalcond[8]=(((r20*x14297))+(((-1.0)*x14299))+(((-1.0)*x14298*x14305))+((r21*x14300))+x14294+((x14295*x14303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14307=((1.0)*r10);
IkReal x14308=(r11*sj5);
CheckValue<IkReal> x14309=IKPowWithIntegerCheck(((((-1.0)*cj5*x14307))+x14308),-1);
if(!x14309.valid){
continue;
}
CheckValue<IkReal> x14310=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14307))+((cj3*x14308))),-1);
if(!x14310.valid){
continue;
}
if( IKabs(x14309.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14310.value)*(((((-1.0)*sj3*sj5*x14307))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14309.value)+IKsqr(((x14310.value)*(((((-1.0)*sj3*sj5*x14307))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14309.value, ((x14310.value)*(((((-1.0)*sj3*sj5*x14307))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14311=IKsin(j4);
IkReal x14312=IKcos(j4);
IkReal x14313=(cj2*sj1);
IkReal x14314=(cj1*sj2);
IkReal x14315=(cj5*r10);
IkReal x14316=(sj1*sj2);
IkReal x14317=(cj5*sj3);
IkReal x14318=(r11*sj5);
IkReal x14319=(cj3*sj5);
IkReal x14320=(r21*sj5);
IkReal x14321=(cj1*cj2);
IkReal x14322=(cj3*cj5);
IkReal x14323=(sj3*sj5);
IkReal x14324=((1.0)*x14311);
IkReal x14325=(r20*x14312);
IkReal x14326=(cj3*x14312);
IkReal x14327=(sj3*x14312);
IkReal x14328=(x14314+x14313);
evalcond[0]=((-1.0)*r02*x14312);
evalcond[1]=(((x14311*x14320))+(((-1.0)*cj5*r20*x14324)));
evalcond[2]=((((-1.0)*x14316))+((cj3*r02*x14311))+x14321);
evalcond[3]=((((-1.0)*r02*sj3*x14324))+x14328);
evalcond[4]=((-1.0)+((x14311*x14318))+(((-1.0)*x14315*x14324)));
evalcond[5]=(((r11*x14317))+((r10*x14323))+((x14318*x14326))+(((-1.0)*x14315*x14326)));
evalcond[6]=(((x14315*x14327))+((r11*x14322))+(((-1.0)*x14318*x14327))+((r10*x14319)));
evalcond[7]=(((r21*x14312*x14319))+((r20*x14323))+((r21*x14317))+x14328+(((-1.0)*x14322*x14325)));
evalcond[8]=((((-1.0)*x14320*x14327))+((x14317*x14325))+((r20*x14319))+((r21*x14322))+x14316+(((-1.0)*x14321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14329=cj5*cj5;
IkReal x14330=((1.0)*cj3);
IkReal x14331=(r10*r21);
IkReal x14332=(cj5*sj5);
IkReal x14333=(r11*r21);
IkReal x14334=(r11*r20);
IkReal x14335=(r22*sj3);
IkReal x14336=(r10*r20);
IkReal x14337=((1.0)*sj3*x14329);
CheckValue<IkReal> x14338 = IKatan2WithCheck(IkReal((((r10*sj5*x14335))+((cj5*r11*x14335)))),IkReal((((sj3*x14332*x14333))+(((-1.0)*sj3*x14332*x14336))+(((-1.0)*x14334*x14337))+(((-1.0)*x14331*x14337))+((sj3*x14331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14338.valid){
continue;
}
CheckValue<IkReal> x14339=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14330))+((cj3*x14329*x14333))+((cj3*x14332*x14334))+((cj3*x14331*x14332))+(((-1.0)*x14330*x14333))+(((-1.0)*x14329*x14330*x14336)))),-1);
if(!x14339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14338.value)+(((1.5707963267949)*(x14339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14340=IKsin(j4);
IkReal x14341=IKcos(j4);
IkReal x14342=(cj2*sj1);
IkReal x14343=(cj1*sj2);
IkReal x14344=(cj5*sj3);
IkReal x14345=(cj5*r10);
IkReal x14346=(r00*sj5);
IkReal x14347=(sj1*sj2);
IkReal x14348=(r11*sj5);
IkReal x14349=(cj3*cj5);
IkReal x14350=(cj3*sj5);
IkReal x14351=(r21*sj5);
IkReal x14352=(cj1*cj2);
IkReal x14353=(sj3*sj5);
IkReal x14354=(r01*sj5);
IkReal x14355=((1.0)*x14341);
IkReal x14356=((1.0)*x14340);
IkReal x14357=(cj3*x14340);
IkReal x14358=(cj3*x14341);
IkReal x14359=(x14343+x14342);
evalcond[0]=((((-1.0)*cj5*r20*x14356))+(((-1.0)*r22*x14355))+((x14340*x14351)));
evalcond[1]=((((-1.0)*cj5*r00*x14356))+(((-1.0)*r02*x14355))+((x14340*x14354)));
evalcond[2]=((-1.0)+(((-1.0)*x14345*x14356))+((x14340*x14348))+(((-1.0)*r12*x14355)));
evalcond[3]=(((r12*x14357))+((x14348*x14358))+((r11*x14344))+(((-1.0)*cj3*x14345*x14355))+((r10*x14353)));
evalcond[4]=(((r10*x14341*x14344))+(((-1.0)*sj3*x14348*x14355))+((r11*x14349))+((r10*x14350))+(((-1.0)*r12*sj3*x14356)));
evalcond[5]=((((-1.0)*r20*x14349*x14355))+((r20*x14353))+((r21*x14344))+((r21*x14341*x14350))+((r22*x14357))+x14359);
evalcond[6]=(((r02*x14357))+((r01*x14344))+(((-1.0)*x14347))+((r01*x14341*x14350))+((sj3*x14346))+x14352+(((-1.0)*r00*x14349*x14355)));
evalcond[7]=((((-1.0)*r01*x14353*x14355))+((cj3*x14346))+((r01*x14349))+x14359+((r00*x14341*x14344))+(((-1.0)*r02*sj3*x14356)));
evalcond[8]=((((-1.0)*sj3*x14351*x14355))+(((-1.0)*r22*sj3*x14356))+((r20*x14350))+((r21*x14349))+((r20*x14341*x14344))+(((-1.0)*x14352))+x14347);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14360=((1.0)*cj5);
CheckValue<IkReal> x14361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14360))+(((-1.0)*r20*sj5)))),-1);
if(!x14361.valid){
continue;
}
CheckValue<IkReal> x14362 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14360))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14361.value)))+(x14362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14363=IKsin(j4);
IkReal x14364=IKcos(j4);
IkReal x14365=(cj2*sj1);
IkReal x14366=(cj1*sj2);
IkReal x14367=(cj5*sj3);
IkReal x14368=(cj5*r10);
IkReal x14369=(r00*sj5);
IkReal x14370=(sj1*sj2);
IkReal x14371=(r11*sj5);
IkReal x14372=(cj3*cj5);
IkReal x14373=(cj3*sj5);
IkReal x14374=(r21*sj5);
IkReal x14375=(cj1*cj2);
IkReal x14376=(sj3*sj5);
IkReal x14377=(r01*sj5);
IkReal x14378=((1.0)*x14364);
IkReal x14379=((1.0)*x14363);
IkReal x14380=(cj3*x14363);
IkReal x14381=(cj3*x14364);
IkReal x14382=(x14366+x14365);
evalcond[0]=(((x14363*x14374))+(((-1.0)*r22*x14378))+(((-1.0)*cj5*r20*x14379)));
evalcond[1]=(((x14363*x14377))+(((-1.0)*cj5*r00*x14379))+(((-1.0)*r02*x14378)));
evalcond[2]=((-1.0)+((x14363*x14371))+(((-1.0)*r12*x14378))+(((-1.0)*x14368*x14379)));
evalcond[3]=(((r11*x14367))+((x14371*x14381))+((r10*x14376))+((r12*x14380))+(((-1.0)*cj3*x14368*x14378)));
evalcond[4]=(((r10*x14364*x14367))+((r10*x14373))+(((-1.0)*r12*sj3*x14379))+(((-1.0)*sj3*x14371*x14378))+((r11*x14372)));
evalcond[5]=(((r21*x14364*x14373))+((r22*x14380))+(((-1.0)*r20*x14372*x14378))+((r21*x14367))+((r20*x14376))+x14382);
evalcond[6]=((((-1.0)*x14370))+((sj3*x14369))+((r01*x14364*x14373))+((r01*x14367))+((r02*x14380))+x14375+(((-1.0)*r00*x14372*x14378)));
evalcond[7]=(((r01*x14372))+((cj3*x14369))+(((-1.0)*r01*x14376*x14378))+(((-1.0)*r02*sj3*x14379))+((r00*x14364*x14367))+x14382);
evalcond[8]=(((r20*x14364*x14367))+((r21*x14372))+(((-1.0)*x14375))+(((-1.0)*sj3*x14374*x14378))+(((-1.0)*r22*sj3*x14379))+((r20*x14373))+x14370);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14383 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14383.valid){
continue;
}
CheckValue<IkReal> x14384=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14383.value)+(((1.5707963267949)*(x14384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14385=IKsin(j4);
IkReal x14386=IKcos(j4);
IkReal x14387=(cj2*sj1);
IkReal x14388=(cj1*sj2);
IkReal x14389=(cj5*sj3);
IkReal x14390=(cj5*r10);
IkReal x14391=(r00*sj5);
IkReal x14392=(sj1*sj2);
IkReal x14393=(r11*sj5);
IkReal x14394=(cj3*cj5);
IkReal x14395=(cj3*sj5);
IkReal x14396=(r21*sj5);
IkReal x14397=(cj1*cj2);
IkReal x14398=(sj3*sj5);
IkReal x14399=(r01*sj5);
IkReal x14400=((1.0)*x14386);
IkReal x14401=((1.0)*x14385);
IkReal x14402=(cj3*x14385);
IkReal x14403=(cj3*x14386);
IkReal x14404=(x14388+x14387);
evalcond[0]=((((-1.0)*r22*x14400))+((x14385*x14396))+(((-1.0)*cj5*r20*x14401)));
evalcond[1]=((((-1.0)*r02*x14400))+((x14385*x14399))+(((-1.0)*cj5*r00*x14401)));
evalcond[2]=((-1.0)+(((-1.0)*x14390*x14401))+((x14385*x14393))+(((-1.0)*r12*x14400)));
evalcond[3]=((((-1.0)*cj3*x14390*x14400))+((r12*x14402))+((r11*x14389))+((r10*x14398))+((x14393*x14403)));
evalcond[4]=(((r10*x14395))+((r11*x14394))+(((-1.0)*r12*sj3*x14401))+((r10*x14386*x14389))+(((-1.0)*sj3*x14393*x14400)));
evalcond[5]=((((-1.0)*r20*x14394*x14400))+((r21*x14389))+((r21*x14386*x14395))+((r22*x14402))+x14404+((r20*x14398)));
evalcond[6]=((((-1.0)*x14392))+(((-1.0)*r00*x14394*x14400))+((r01*x14386*x14395))+((r01*x14389))+((r02*x14402))+x14397+((sj3*x14391)));
evalcond[7]=((((-1.0)*r02*sj3*x14401))+((r00*x14386*x14389))+((r01*x14394))+((cj3*x14391))+x14404+(((-1.0)*r01*x14398*x14400)));
evalcond[8]=((((-1.0)*r22*sj3*x14401))+((r21*x14394))+(((-1.0)*sj3*x14396*x14400))+(((-1.0)*x14397))+((r20*x14386*x14389))+x14392+((r20*x14395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14405=((-1.0)*r00);
IkReal x14407 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14407)==0){
continue;
}
IkReal x14406=pow(x14407,-0.5);
CheckValue<IkReal> x14408 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14405),IKFAST_ATAN2_MAGTHRESH);
if(!x14408.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14408.value));
IkReal gconst13=(r01*x14406);
IkReal gconst14=(x14405*x14406);
CheckValue<IkReal> x14409 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14409.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14409.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14410=((-1.0)*r00);
IkReal x14411=x14406;
CheckValue<IkReal> x14413 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14410),IKFAST_ATAN2_MAGTHRESH);
if(!x14413.valid){
continue;
}
IkReal x14412=((-1.0)*(x14413.value));
sj5=gconst13;
cj5=gconst14;
j5=x14412;
IkReal gconst12=x14412;
IkReal gconst13=(r01*x14411);
IkReal gconst14=(x14410*x14411);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14414=((1.0)*sj0);
IkReal x14415=((1.0)*cj0);
CheckValue<IkReal> x14416 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14415))+(((-1.0)*r12*x14414)))),IkReal(((((-1.0)*gconst13*r11*x14414))+((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x14415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14416.valid){
continue;
}
CheckValue<IkReal> x14417=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14416.value)+(((1.5707963267949)*(x14417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14418=IKsin(j4);
IkReal x14419=IKcos(j4);
IkReal x14420=((1.0)*r22);
IkReal x14421=((1.0)*r12);
IkReal x14422=(gconst13*sj3);
IkReal x14423=(gconst13*r01);
IkReal x14424=(sj1*sj2);
IkReal x14425=(gconst14*sj3);
IkReal x14426=(cj2*sj1);
IkReal x14427=((1.0)*sj0);
IkReal x14428=(cj3*gconst13);
IkReal x14429=(cj3*gconst14);
IkReal x14430=((1.0)*cj0);
IkReal x14431=((1.0)*gconst14);
IkReal x14432=(cj1*sj2);
IkReal x14433=(sj3*x14418);
IkReal x14434=((1.0)*cj1*cj2);
IkReal x14435=(cj3*x14419);
IkReal x14436=(cj3*x14418);
IkReal x14437=(gconst13*x14418);
IkReal x14438=((1.0)*x14419);
IkReal x14439=(x14418*x14431);
evalcond[0]=((((-1.0)*x14419*x14420))+((r21*x14437))+(((-1.0)*r20*x14439)));
evalcond[1]=((((-1.0)*x14419*x14421))+(((-1.0)*r10*x14439))+cj0+((r11*x14437)));
evalcond[2]=(((x14418*x14423))+(((-1.0)*r00*x14439))+(((-1.0)*r02*x14438))+(((-1.0)*x14427)));
evalcond[3]=(((r21*x14419*x14428))+((r20*x14422))+x14432+x14426+((r22*x14436))+(((-1.0)*r20*x14429*x14438))+((r21*x14425)));
evalcond[4]=((((-1.0)*x14434))+((r20*x14419*x14425))+((r20*x14428))+(((-1.0)*x14420*x14433))+x14424+(((-1.0)*r21*x14422*x14438))+((r21*x14429)));
evalcond[5]=((((-1.0)*cj1*cj2*x14430))+((cj0*x14424))+((x14423*x14435))+((r01*x14425))+((r00*x14422))+(((-1.0)*r00*x14429*x14438))+((r02*x14436)));
evalcond[6]=(((r11*x14425))+((sj0*x14424))+((r12*x14436))+((r10*x14422))+((r11*x14419*x14428))+(((-1.0)*r10*x14429*x14438))+(((-1.0)*cj1*cj2*x14427)));
evalcond[7]=(((r00*x14419*x14425))+(((-1.0)*x14426*x14430))+((r01*x14429))+((r00*x14428))+(((-1.0)*r01*x14422*x14438))+(((-1.0)*r02*x14433))+(((-1.0)*x14430*x14432)));
evalcond[8]=((((-1.0)*x14426*x14427))+((r11*x14429))+(((-1.0)*x14421*x14433))+((r10*x14419*x14425))+((r10*x14428))+(((-1.0)*r11*x14422*x14438))+(((-1.0)*x14427*x14432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14440=((1.0)*gconst14);
CheckValue<IkReal> x14441 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14440))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14441.valid){
continue;
}
CheckValue<IkReal> x14442=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14440)))),-1);
if(!x14442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14441.value)+(((1.5707963267949)*(x14442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14443=IKsin(j4);
IkReal x14444=IKcos(j4);
IkReal x14445=((1.0)*r22);
IkReal x14446=((1.0)*r12);
IkReal x14447=(gconst13*sj3);
IkReal x14448=(gconst13*r01);
IkReal x14449=(sj1*sj2);
IkReal x14450=(gconst14*sj3);
IkReal x14451=(cj2*sj1);
IkReal x14452=((1.0)*sj0);
IkReal x14453=(cj3*gconst13);
IkReal x14454=(cj3*gconst14);
IkReal x14455=((1.0)*cj0);
IkReal x14456=((1.0)*gconst14);
IkReal x14457=(cj1*sj2);
IkReal x14458=(sj3*x14443);
IkReal x14459=((1.0)*cj1*cj2);
IkReal x14460=(cj3*x14444);
IkReal x14461=(cj3*x14443);
IkReal x14462=(gconst13*x14443);
IkReal x14463=((1.0)*x14444);
IkReal x14464=(x14443*x14456);
evalcond[0]=(((r21*x14462))+(((-1.0)*r20*x14464))+(((-1.0)*x14444*x14445)));
evalcond[1]=(cj0+(((-1.0)*r10*x14464))+((r11*x14462))+(((-1.0)*x14444*x14446)));
evalcond[2]=((((-1.0)*r00*x14464))+(((-1.0)*x14452))+(((-1.0)*r02*x14463))+((x14443*x14448)));
evalcond[3]=(((r21*x14444*x14453))+((r20*x14447))+((r22*x14461))+x14457+x14451+(((-1.0)*r20*x14454*x14463))+((r21*x14450)));
evalcond[4]=((((-1.0)*x14459))+((r20*x14453))+x14449+((r20*x14444*x14450))+(((-1.0)*r21*x14447*x14463))+(((-1.0)*x14445*x14458))+((r21*x14454)));
evalcond[5]=(((r00*x14447))+((r01*x14450))+((r02*x14461))+((x14448*x14460))+(((-1.0)*cj1*cj2*x14455))+((cj0*x14449))+(((-1.0)*r00*x14454*x14463)));
evalcond[6]=(((sj0*x14449))+((r11*x14450))+((r10*x14447))+((r12*x14461))+(((-1.0)*r10*x14454*x14463))+(((-1.0)*cj1*cj2*x14452))+((r11*x14444*x14453)));
evalcond[7]=((((-1.0)*r02*x14458))+((r00*x14444*x14450))+((r00*x14453))+((r01*x14454))+(((-1.0)*r01*x14447*x14463))+(((-1.0)*x14451*x14455))+(((-1.0)*x14455*x14457)));
evalcond[8]=((((-1.0)*x14446*x14458))+((r10*x14453))+((r11*x14454))+(((-1.0)*x14452*x14457))+(((-1.0)*r11*x14447*x14463))+(((-1.0)*x14451*x14452))+((r10*x14444*x14450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14465=((-1.0)*r01);
IkReal x14467 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14467)==0){
continue;
}
IkReal x14466=pow(x14467,-0.5);
CheckValue<IkReal> x14468 = IKatan2WithCheck(IkReal(x14465),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14468.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14468.value))));
IkReal gconst16=(x14465*x14466);
IkReal gconst17=((1.0)*r00*x14466);
CheckValue<IkReal> x14469 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14469.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14469.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14470=((-1.0)*r01);
CheckValue<IkReal> x14473 = IKatan2WithCheck(IkReal(x14470),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14473.valid){
continue;
}
IkReal x14471=((1.0)*(x14473.value));
IkReal x14472=x14466;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14471)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14471)));
IkReal gconst16=(x14470*x14472);
IkReal gconst17=((1.0)*r00*x14472);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14474=((-1.0)*r01);
CheckValue<IkReal> x14477 = IKatan2WithCheck(IkReal(x14474),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14477.valid){
continue;
}
IkReal x14475=((1.0)*(x14477.value));
IkReal x14476=x14466;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14475)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14475)));
IkReal gconst16=(x14474*x14476);
IkReal gconst17=((1.0)*r00*x14476);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14478=((-1.0)*r01);
CheckValue<IkReal> x14481 = IKatan2WithCheck(IkReal(x14478),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14481.valid){
continue;
}
IkReal x14479=((1.0)*(x14481.value));
IkReal x14480=x14466;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14479)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14479)));
IkReal gconst16=(x14478*x14480);
IkReal gconst17=((1.0)*r00*x14480);
IkReal x14482=r02*r02;
IkReal x14483=(r12*sj0);
IkReal x14484=((1.0)*cj0);
IkReal x14485=x14466;
j4eval[0]=((IKabs(((((-1.0)*x14483))+(((-1.0)*r02*x14484)))))+(IKabs((((cj0*x14482*x14485))+(((-1.0)*x14484*x14485))+((r02*x14483*x14485))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14486=((-1.0)*r01);
CheckValue<IkReal> x14489 = IKatan2WithCheck(IkReal(x14486),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14489.valid){
continue;
}
IkReal x14487=((1.0)*(x14489.value));
IkReal x14488=x14466;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14487)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14487)));
IkReal gconst16=(x14486*x14488);
IkReal gconst17=((1.0)*r00*x14488);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14490=((-1.0)*r01);
CheckValue<IkReal> x14493 = IKatan2WithCheck(IkReal(x14490),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14493.valid){
continue;
}
IkReal x14491=((1.0)*(x14493.value));
IkReal x14492=x14466;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14491)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14491)));
IkReal gconst16=(x14490*x14492);
IkReal gconst17=((1.0)*r00*x14492);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14494=gconst16*gconst16;
IkReal x14495=gconst17*gconst17;
IkReal x14496=(r11*sj3);
IkReal x14497=(cj3*r10);
IkReal x14498=((1.0)*cj3);
IkReal x14499=(r10*sj3);
IkReal x14500=(gconst16*gconst17);
IkReal x14501=(r21*x14494);
IkReal x14502=((1.0)*r20*x14495);
CheckValue<IkReal> x14503=IKPowWithIntegerCheck(IKsign((((cj3*r11*r20*x14500))+(((-1.0)*r12*r22*x14498))+(((-1.0)*r11*x14498*x14501))+((r21*x14497*x14500))+(((-1.0)*x14497*x14502)))),-1);
if(!x14503.valid){
continue;
}
CheckValue<IkReal> x14504 = IKatan2WithCheck(IkReal((((gconst17*r22*x14496))+((gconst16*r22*x14499)))),IkReal((((r21*x14496*x14500))+(((-1.0)*r20*x14499*x14500))+(((-1.0)*x14496*x14502))+((x14499*x14501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14503.value)))+(x14504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14505=IKsin(j4);
IkReal x14506=IKcos(j4);
IkReal x14507=(cj2*sj1);
IkReal x14508=(cj1*sj2);
IkReal x14509=(gconst16*r21);
IkReal x14510=(cj3*gconst17);
IkReal x14511=(gconst16*r20);
IkReal x14512=(sj1*sj2);
IkReal x14513=(gconst17*r20);
IkReal x14514=(gconst17*sj3);
IkReal x14515=(gconst16*r10);
IkReal x14516=(cj1*cj2);
IkReal x14517=(gconst16*sj3);
IkReal x14518=((1.0)*x14506);
IkReal x14519=((1.0)*x14505);
IkReal x14520=(gconst16*x14505);
IkReal x14521=(cj3*x14506);
IkReal x14522=(cj3*x14505);
IkReal x14523=(x14507+x14508);
evalcond[0]=((((-1.0)*r22*x14518))+((x14505*x14509))+(((-1.0)*x14513*x14519)));
evalcond[1]=(((r01*x14520))+(((-1.0)*gconst17*r00*x14519))+(((-1.0)*r02*x14518)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14519))+((r11*x14520))+(((-1.0)*r12*x14518)));
evalcond[3]=(((sj3*x14515))+((r11*x14514))+((r12*x14522))+(((-1.0)*r10*x14510*x14518))+((gconst16*r11*x14521)));
evalcond[4]=(((cj3*x14515))+((r11*x14510))+(((-1.0)*r11*x14517*x14518))+((r10*x14506*x14514))+(((-1.0)*r12*sj3*x14519)));
evalcond[5]=(((r22*x14522))+((sj3*x14511))+(((-1.0)*r20*x14510*x14518))+((x14509*x14521))+x14523+((r21*x14514)));
evalcond[6]=(((gconst16*r01*x14521))+((r00*x14517))+((r01*x14514))+(((-1.0)*r00*x14510*x14518))+x14516+((r02*x14522))+(((-1.0)*x14512)));
evalcond[7]=(((r01*x14510))+(((-1.0)*r01*x14517*x14518))+(((-1.0)*r02*sj3*x14519))+x14523+((r00*x14506*x14514))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*sj3*x14509*x14518))+((sj3*x14506*x14513))+((cj3*x14511))+x14512+(((-1.0)*r22*sj3*x14519))+((r21*x14510))+(((-1.0)*x14516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14524=((1.0)*gconst17);
CheckValue<IkReal> x14525=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14524)))),-1);
if(!x14525.valid){
continue;
}
CheckValue<IkReal> x14526 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14524))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14525.value)))+(x14526.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14527=IKsin(j4);
IkReal x14528=IKcos(j4);
IkReal x14529=(cj2*sj1);
IkReal x14530=(cj1*sj2);
IkReal x14531=(gconst16*r21);
IkReal x14532=(cj3*gconst17);
IkReal x14533=(gconst16*r20);
IkReal x14534=(sj1*sj2);
IkReal x14535=(gconst17*r20);
IkReal x14536=(gconst17*sj3);
IkReal x14537=(gconst16*r10);
IkReal x14538=(cj1*cj2);
IkReal x14539=(gconst16*sj3);
IkReal x14540=((1.0)*x14528);
IkReal x14541=((1.0)*x14527);
IkReal x14542=(gconst16*x14527);
IkReal x14543=(cj3*x14528);
IkReal x14544=(cj3*x14527);
IkReal x14545=(x14529+x14530);
evalcond[0]=((((-1.0)*x14535*x14541))+(((-1.0)*r22*x14540))+((x14527*x14531)));
evalcond[1]=(((r01*x14542))+(((-1.0)*gconst17*r00*x14541))+(((-1.0)*r02*x14540)));
evalcond[2]=((-1.0)+((r11*x14542))+(((-1.0)*gconst17*r10*x14541))+(((-1.0)*r12*x14540)));
evalcond[3]=(((r12*x14544))+(((-1.0)*r10*x14532*x14540))+((gconst16*r11*x14543))+((r11*x14536))+((sj3*x14537)));
evalcond[4]=(((cj3*x14537))+((r11*x14532))+(((-1.0)*r12*sj3*x14541))+(((-1.0)*r11*x14539*x14540))+((r10*x14528*x14536)));
evalcond[5]=((((-1.0)*r20*x14532*x14540))+((r21*x14536))+((r22*x14544))+x14545+((sj3*x14533))+((x14531*x14543)));
evalcond[6]=(((r02*x14544))+(((-1.0)*x14534))+((r00*x14539))+(((-1.0)*r00*x14532*x14540))+((r01*x14536))+x14538+((gconst16*r01*x14543)));
evalcond[7]=((((-1.0)*r01*x14539*x14540))+(((-1.0)*r02*sj3*x14541))+((r01*x14532))+((r00*x14528*x14536))+x14545+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14538))+((cj3*x14533))+((r21*x14532))+x14534+((sj3*x14528*x14535))+(((-1.0)*r22*sj3*x14541))+(((-1.0)*sj3*x14531*x14540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14546=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14546.valid){
continue;
}
CheckValue<IkReal> x14547 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14546.value)))+(x14547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14548=IKsin(j4);
IkReal x14549=IKcos(j4);
IkReal x14550=(cj2*sj1);
IkReal x14551=(cj1*sj2);
IkReal x14552=(gconst16*r21);
IkReal x14553=(cj3*gconst17);
IkReal x14554=(gconst16*r20);
IkReal x14555=(sj1*sj2);
IkReal x14556=(gconst17*r20);
IkReal x14557=(gconst17*sj3);
IkReal x14558=(gconst16*r10);
IkReal x14559=(cj1*cj2);
IkReal x14560=(gconst16*sj3);
IkReal x14561=((1.0)*x14549);
IkReal x14562=((1.0)*x14548);
IkReal x14563=(gconst16*x14548);
IkReal x14564=(cj3*x14549);
IkReal x14565=(cj3*x14548);
IkReal x14566=(x14550+x14551);
evalcond[0]=((((-1.0)*r22*x14561))+((x14548*x14552))+(((-1.0)*x14556*x14562)));
evalcond[1]=(((r01*x14563))+(((-1.0)*r02*x14561))+(((-1.0)*gconst17*r00*x14562)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14562))+(((-1.0)*r12*x14561))+((r11*x14563)));
evalcond[3]=(((sj3*x14558))+(((-1.0)*r10*x14553*x14561))+((gconst16*r11*x14564))+((r11*x14557))+((r12*x14565)));
evalcond[4]=((((-1.0)*r11*x14560*x14561))+((r11*x14553))+((cj3*x14558))+(((-1.0)*r12*sj3*x14562))+((r10*x14549*x14557)));
evalcond[5]=(((sj3*x14554))+(((-1.0)*r20*x14553*x14561))+x14566+((r22*x14565))+((x14552*x14564))+((r21*x14557)));
evalcond[6]=(((gconst16*r01*x14564))+((r02*x14565))+x14559+(((-1.0)*x14555))+((r01*x14557))+((r00*x14560))+(((-1.0)*r00*x14553*x14561)));
evalcond[7]=(((r00*x14549*x14557))+x14566+((r01*x14553))+(((-1.0)*r02*sj3*x14562))+(((-1.0)*r01*x14560*x14561))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*sj3*x14552*x14561))+((sj3*x14549*x14556))+(((-1.0)*r22*sj3*x14562))+x14555+(((-1.0)*x14559))+((cj3*x14554))+((r21*x14553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14567=((-1.0)*r01);
CheckValue<IkReal> x14570 = IKatan2WithCheck(IkReal(x14567),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14570.valid){
continue;
}
IkReal x14568=((1.0)*(x14570.value));
IkReal x14569=x14466;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14568)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14568)));
IkReal gconst16=(x14567*x14569);
IkReal gconst17=((1.0)*r00*x14569);
IkReal x14571=r02*r02;
IkReal x14572=(r12*sj0);
IkReal x14573=((1.0)*cj0);
IkReal x14574=x14466;
j4eval[0]=((IKabs(((((-1.0)*x14573*x14574))+((r02*x14572*x14574))+((cj0*x14571*x14574)))))+(IKabs(((((-1.0)*r02*x14573))+(((-1.0)*x14572))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14575=((1.0)*r12);
IkReal x14576=(sj1*sj2);
IkReal x14577=(cj1*cj2);
IkReal x14578=((1.0)*sj3);
IkReal x14579=(gconst16*r21);
IkReal x14580=(cj3*gconst16*r20);
IkReal x14581=(gconst17*r20*sj3);
IkReal x14582=(cj3*gconst17*r21);
CheckValue<IkReal> x14583=IKPowWithIntegerCheck((((gconst17*r10*sj3*x14579))+(((-1.0)*gconst16*r11*x14578*x14579))+((gconst16*r11*x14581))+(((-1.0)*r10*r20*x14578*(gconst17*gconst17)))),-1);
if(!x14583.valid){
continue;
}
CheckValue<IkReal> x14584=IKPowWithIntegerCheck((x14581+(((-1.0)*x14578*x14579))),-1);
if(!x14584.valid){
continue;
}
if( IKabs(((x14583.value)*(((((-1.0)*x14575*x14580))+(((-1.0)*x14575*x14582))+((cj0*sj3*x14579))+((r12*x14577))+(((-1.0)*cj0*gconst17*r20*x14578))+(((-1.0)*x14575*x14576)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14584.value)*(((((-1.0)*x14582))+(((-1.0)*x14580))+x14577+(((-1.0)*x14576)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14583.value)*(((((-1.0)*x14575*x14580))+(((-1.0)*x14575*x14582))+((cj0*sj3*x14579))+((r12*x14577))+(((-1.0)*cj0*gconst17*r20*x14578))+(((-1.0)*x14575*x14576))))))+IKsqr(((x14584.value)*(((((-1.0)*x14582))+(((-1.0)*x14580))+x14577+(((-1.0)*x14576))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14583.value)*(((((-1.0)*x14575*x14580))+(((-1.0)*x14575*x14582))+((cj0*sj3*x14579))+((r12*x14577))+(((-1.0)*cj0*gconst17*r20*x14578))+(((-1.0)*x14575*x14576))))), ((x14584.value)*(((((-1.0)*x14582))+(((-1.0)*x14580))+x14577+(((-1.0)*x14576))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14585=IKsin(j4);
IkReal x14586=IKcos(j4);
IkReal x14587=((1.0)*gconst17);
IkReal x14588=(gconst17*sj3);
IkReal x14589=(gconst16*r21);
IkReal x14590=(cj3*gconst17);
IkReal x14591=(sj1*sj2);
IkReal x14592=((1.0)*sj0);
IkReal x14593=(gconst16*sj3);
IkReal x14594=(cj3*gconst16);
IkReal x14595=(cj2*sj1);
IkReal x14596=((1.0)*cj0);
IkReal x14597=((1.0)*sj3);
IkReal x14598=(cj1*sj2);
IkReal x14599=(cj3*x14586);
IkReal x14600=(gconst16*x14585);
IkReal x14601=((1.0)*x14586);
IkReal x14602=((1.0)*cj1*cj2);
IkReal x14603=(r02*x14585);
IkReal x14604=(r12*x14585);
evalcond[0]=((((-1.0)*r20*x14585*x14587))+((x14585*x14589)));
evalcond[1]=(cj0+(((-1.0)*r10*x14585*x14587))+(((-1.0)*r12*x14601))+((r11*x14600)));
evalcond[2]=((((-1.0)*x14592))+((r01*x14600))+(((-1.0)*r00*x14585*x14587))+(((-1.0)*r02*x14601)));
evalcond[3]=(((r20*x14593))+((x14589*x14599))+((r21*x14588))+x14598+x14595+(((-1.0)*r20*x14587*x14599)));
evalcond[4]=(((r20*x14594))+((r20*x14586*x14588))+(((-1.0)*x14586*x14589*x14597))+((r21*x14590))+x14591+(((-1.0)*x14602)));
evalcond[5]=((((-1.0)*r00*x14587*x14599))+(((-1.0)*cj1*cj2*x14596))+((cj3*x14603))+((r01*x14588))+((cj0*x14591))+((r00*x14593))+((r01*x14586*x14594)));
evalcond[6]=(((sj0*x14591))+(((-1.0)*cj1*cj2*x14592))+((r10*x14593))+((cj3*x14604))+((r11*x14588))+((r11*x14586*x14594))+(((-1.0)*r10*x14587*x14599)));
evalcond[7]=((((-1.0)*x14595*x14596))+((r00*x14586*x14588))+(((-1.0)*x14596*x14598))+((r01*x14590))+(((-1.0)*r01*x14593*x14601))+(((-1.0)*x14597*x14603))+((r00*x14594)));
evalcond[8]=(((r10*x14586*x14588))+(((-1.0)*x14592*x14598))+(((-1.0)*x14592*x14595))+(((-1.0)*r11*x14593*x14601))+((r10*x14594))+((r11*x14590))+(((-1.0)*x14597*x14604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14605=((1.0)*sj0);
IkReal x14606=((1.0)*cj0);
CheckValue<IkReal> x14607=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14607.valid){
continue;
}
CheckValue<IkReal> x14608 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14605))+(((-1.0)*r02*x14606)))),IkReal(((((-1.0)*gconst16*r01*x14606))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14607.value)))+(x14608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14609=IKsin(j4);
IkReal x14610=IKcos(j4);
IkReal x14611=((1.0)*gconst17);
IkReal x14612=(gconst17*sj3);
IkReal x14613=(gconst16*r21);
IkReal x14614=(cj3*gconst17);
IkReal x14615=(sj1*sj2);
IkReal x14616=((1.0)*sj0);
IkReal x14617=(gconst16*sj3);
IkReal x14618=(cj3*gconst16);
IkReal x14619=(cj2*sj1);
IkReal x14620=((1.0)*cj0);
IkReal x14621=((1.0)*sj3);
IkReal x14622=(cj1*sj2);
IkReal x14623=(cj3*x14610);
IkReal x14624=(gconst16*x14609);
IkReal x14625=((1.0)*x14610);
IkReal x14626=((1.0)*cj1*cj2);
IkReal x14627=(r02*x14609);
IkReal x14628=(r12*x14609);
evalcond[0]=((((-1.0)*r20*x14609*x14611))+((x14609*x14613)));
evalcond[1]=(cj0+(((-1.0)*r10*x14609*x14611))+((r11*x14624))+(((-1.0)*r12*x14625)));
evalcond[2]=((((-1.0)*r00*x14609*x14611))+(((-1.0)*r02*x14625))+((r01*x14624))+(((-1.0)*x14616)));
evalcond[3]=(((r21*x14612))+(((-1.0)*r20*x14611*x14623))+x14619+x14622+((x14613*x14623))+((r20*x14617)));
evalcond[4]=((((-1.0)*x14626))+((r21*x14614))+((r20*x14610*x14612))+x14615+((r20*x14618))+(((-1.0)*x14610*x14613*x14621)));
evalcond[5]=(((r01*x14610*x14618))+((cj3*x14627))+((cj0*x14615))+((r01*x14612))+((r00*x14617))+(((-1.0)*r00*x14611*x14623))+(((-1.0)*cj1*cj2*x14620)));
evalcond[6]=((((-1.0)*r10*x14611*x14623))+((sj0*x14615))+((r10*x14617))+((cj3*x14628))+(((-1.0)*cj1*cj2*x14616))+((r11*x14610*x14618))+((r11*x14612)));
evalcond[7]=((((-1.0)*x14620*x14622))+(((-1.0)*x14619*x14620))+(((-1.0)*x14621*x14627))+((r01*x14614))+((r00*x14618))+(((-1.0)*r01*x14617*x14625))+((r00*x14610*x14612)));
evalcond[8]=((((-1.0)*r11*x14617*x14625))+((r10*x14618))+(((-1.0)*x14616*x14619))+(((-1.0)*x14621*x14628))+((r10*x14610*x14612))+((r11*x14614))+(((-1.0)*x14616*x14622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14629=((1.0)*sj0);
IkReal x14630=((1.0)*cj0);
CheckValue<IkReal> x14631=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14631.valid){
continue;
}
CheckValue<IkReal> x14632 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14629))+(((-1.0)*r02*x14630)))),IkReal(((((-1.0)*gconst16*r01*x14630))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14629)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14631.value)))+(x14632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14633=IKsin(j4);
IkReal x14634=IKcos(j4);
IkReal x14635=(cj3*gconst17);
IkReal x14636=(gconst16*r21);
IkReal x14637=(gconst17*sj3);
IkReal x14638=(gconst16*r20);
IkReal x14639=(sj1*sj2);
IkReal x14640=(gconst16*r10);
IkReal x14641=(cj2*sj1);
IkReal x14642=(gconst16*sj3);
IkReal x14643=((1.0)*cj0);
IkReal x14644=((1.0)*sj0);
IkReal x14645=(cj1*sj2);
IkReal x14646=((1.0)*x14634);
IkReal x14647=(gconst16*x14633);
IkReal x14648=(cj3*x14634);
IkReal x14649=(cj3*x14633);
IkReal x14650=((1.0)*cj1*cj2);
IkReal x14651=((1.0)*gconst17*x14633);
IkReal x14652=((1.0)*sj3*x14633);
evalcond[0]=(((x14633*x14636))+(((-1.0)*r22*x14646))+(((-1.0)*r20*x14651)));
evalcond[1]=(((r11*x14647))+cj0+(((-1.0)*r12*x14646))+(((-1.0)*r10*x14651)));
evalcond[2]=(((r01*x14647))+(((-1.0)*r02*x14646))+(((-1.0)*x14644))+(((-1.0)*r00*x14651)));
evalcond[3]=(((sj3*x14638))+((r22*x14649))+x14641+x14645+((x14636*x14648))+((r21*x14637))+(((-1.0)*r20*x14635*x14646)));
evalcond[4]=(((r20*x14634*x14637))+(((-1.0)*r22*x14652))+((cj3*x14638))+x14639+(((-1.0)*x14650))+((r21*x14635))+(((-1.0)*sj3*x14636*x14646)));
evalcond[5]=(((r00*x14642))+(((-1.0)*cj1*cj2*x14643))+((cj0*x14639))+((r01*x14637))+(((-1.0)*r00*x14635*x14646))+((r02*x14649))+((gconst16*r01*x14648)));
evalcond[6]=(((gconst16*r11*x14648))+(((-1.0)*r10*x14635*x14646))+((r12*x14649))+(((-1.0)*cj1*cj2*x14644))+((sj3*x14640))+((r11*x14637))+((sj0*x14639)));
evalcond[7]=((((-1.0)*x14641*x14643))+((r00*x14634*x14637))+(((-1.0)*r01*x14642*x14646))+(((-1.0)*r02*x14652))+((r01*x14635))+(((-1.0)*x14643*x14645))+((cj3*gconst16*r00)));
evalcond[8]=(((r10*x14634*x14637))+(((-1.0)*r12*x14652))+(((-1.0)*x14641*x14644))+((r11*x14635))+(((-1.0)*x14644*x14645))+((cj3*x14640))+(((-1.0)*r11*x14642*x14646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14653=((1.0)*gconst17);
CheckValue<IkReal> x14654 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14654.valid){
continue;
}
CheckValue<IkReal> x14655=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14653)))),-1);
if(!x14655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14654.value)+(((1.5707963267949)*(x14655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14656=IKsin(j4);
IkReal x14657=IKcos(j4);
IkReal x14658=(cj3*gconst17);
IkReal x14659=(gconst16*r21);
IkReal x14660=(gconst17*sj3);
IkReal x14661=(gconst16*r20);
IkReal x14662=(sj1*sj2);
IkReal x14663=(gconst16*r10);
IkReal x14664=(cj2*sj1);
IkReal x14665=(gconst16*sj3);
IkReal x14666=((1.0)*cj0);
IkReal x14667=((1.0)*sj0);
IkReal x14668=(cj1*sj2);
IkReal x14669=((1.0)*x14657);
IkReal x14670=(gconst16*x14656);
IkReal x14671=(cj3*x14657);
IkReal x14672=(cj3*x14656);
IkReal x14673=((1.0)*cj1*cj2);
IkReal x14674=((1.0)*gconst17*x14656);
IkReal x14675=((1.0)*sj3*x14656);
evalcond[0]=(((x14656*x14659))+(((-1.0)*r22*x14669))+(((-1.0)*r20*x14674)));
evalcond[1]=(cj0+(((-1.0)*r10*x14674))+(((-1.0)*r12*x14669))+((r11*x14670)));
evalcond[2]=(((r01*x14670))+(((-1.0)*r00*x14674))+(((-1.0)*r02*x14669))+(((-1.0)*x14667)));
evalcond[3]=(((r21*x14660))+(((-1.0)*r20*x14658*x14669))+((x14659*x14671))+x14668+x14664+((r22*x14672))+((sj3*x14661)));
evalcond[4]=((((-1.0)*x14673))+((r20*x14657*x14660))+(((-1.0)*r22*x14675))+(((-1.0)*sj3*x14659*x14669))+((cj3*x14661))+x14662+((r21*x14658)));
evalcond[5]=((((-1.0)*r00*x14658*x14669))+((r02*x14672))+((gconst16*r01*x14671))+((cj0*x14662))+((r00*x14665))+((r01*x14660))+(((-1.0)*cj1*cj2*x14666)));
evalcond[6]=(((sj0*x14662))+(((-1.0)*r10*x14658*x14669))+(((-1.0)*cj1*cj2*x14667))+((r11*x14660))+((r12*x14672))+((sj3*x14663))+((gconst16*r11*x14671)));
evalcond[7]=((((-1.0)*x14664*x14666))+((r00*x14657*x14660))+(((-1.0)*x14666*x14668))+((r01*x14658))+(((-1.0)*r01*x14665*x14669))+(((-1.0)*r02*x14675))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14664*x14667))+((cj3*x14663))+(((-1.0)*r11*x14665*x14669))+(((-1.0)*r12*x14675))+(((-1.0)*x14667*x14668))+((r11*x14658))+((r10*x14657*x14660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14676=((1.0)*gconst17);
CheckValue<IkReal> x14677=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14676)))),-1);
if(!x14677.valid){
continue;
}
CheckValue<IkReal> x14678 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14676))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14677.value)))+(x14678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14679=IKsin(j4);
IkReal x14680=IKcos(j4);
IkReal x14681=(cj3*gconst17);
IkReal x14682=(gconst16*r21);
IkReal x14683=(gconst17*sj3);
IkReal x14684=(gconst16*r20);
IkReal x14685=(sj1*sj2);
IkReal x14686=(gconst16*r10);
IkReal x14687=(cj2*sj1);
IkReal x14688=(gconst16*sj3);
IkReal x14689=((1.0)*cj0);
IkReal x14690=((1.0)*sj0);
IkReal x14691=(cj1*sj2);
IkReal x14692=((1.0)*x14680);
IkReal x14693=(gconst16*x14679);
IkReal x14694=(cj3*x14680);
IkReal x14695=(cj3*x14679);
IkReal x14696=((1.0)*cj1*cj2);
IkReal x14697=((1.0)*gconst17*x14679);
IkReal x14698=((1.0)*sj3*x14679);
evalcond[0]=(((x14679*x14682))+(((-1.0)*r20*x14697))+(((-1.0)*r22*x14692)));
evalcond[1]=(cj0+((r11*x14693))+(((-1.0)*r12*x14692))+(((-1.0)*r10*x14697)));
evalcond[2]=((((-1.0)*r00*x14697))+((r01*x14693))+(((-1.0)*r02*x14692))+(((-1.0)*x14690)));
evalcond[3]=(((r22*x14695))+(((-1.0)*r20*x14681*x14692))+((x14682*x14694))+((sj3*x14684))+x14691+x14687+((r21*x14683)));
evalcond[4]=(((cj3*x14684))+(((-1.0)*sj3*x14682*x14692))+(((-1.0)*x14696))+(((-1.0)*r22*x14698))+x14685+((r21*x14681))+((r20*x14680*x14683)));
evalcond[5]=(((r00*x14688))+((r01*x14683))+(((-1.0)*cj1*cj2*x14689))+((r02*x14695))+((gconst16*r01*x14694))+(((-1.0)*r00*x14681*x14692))+((cj0*x14685)));
evalcond[6]=(((sj3*x14686))+((r11*x14683))+(((-1.0)*cj1*cj2*x14690))+((r12*x14695))+((gconst16*r11*x14694))+((sj0*x14685))+(((-1.0)*r10*x14681*x14692)));
evalcond[7]=((((-1.0)*x14687*x14689))+((r01*x14681))+(((-1.0)*r02*x14698))+((r00*x14680*x14683))+(((-1.0)*r01*x14688*x14692))+((cj3*gconst16*r00))+(((-1.0)*x14689*x14691)));
evalcond[8]=((((-1.0)*r11*x14688*x14692))+((cj3*x14686))+((r10*x14680*x14683))+((r11*x14681))+(((-1.0)*r12*x14698))+(((-1.0)*x14690*x14691))+(((-1.0)*x14687*x14690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14699=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14699;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14699);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14700=((1.0)*cj5);
IkReal x14701=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14700)));
j4eval[0]=x14701;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14700)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14701);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14702=cj5*cj5;
IkReal x14703=(cj3*r01);
IkReal x14704=(cj5*sj5);
IkReal x14705=((1.0)*cj3);
IkReal x14706=((((-1.0)*r00*r20*x14702*x14705))+(((-1.0)*r21*x14703))+(((-1.0)*r02*r22*x14705))+((cj3*r00*r21*x14704))+((r21*x14702*x14703))+((r20*x14703*x14704)));
j4eval[0]=x14706;
j4eval[1]=IKsign(x14706);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14707=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14707;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14708=((1.0)*cj5);
IkReal x14709=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14708)));
j4eval[0]=x14709;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14708)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14710=cj5*cj5;
IkReal x14711=r01*r01;
IkReal x14712=(r01*sj5);
IkReal x14713=(cj5*r00);
IkReal x14714=(((x14710*x14711))+(((-1.0)*x14710*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x14711))+(((2.0)*x14712*x14713)));
j4eval[0]=x14714;
j4eval[1]=IKsign(x14714);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14712))+x14713))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14715=cj5*cj5;
IkReal x14716=r01*r01;
IkReal x14717=(r01*sj5);
IkReal x14718=(cj5*r00);
CheckValue<IkReal> x14719 = IKatan2WithCheck(IkReal(((((-1.0)*x14717))+x14718)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14719.valid){
continue;
}
CheckValue<IkReal> x14720=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x14716))+((x14715*x14716))+(((2.0)*x14717*x14718))+(((-1.0)*x14715*(r00*r00))))),-1);
if(!x14720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14719.value)+(((1.5707963267949)*(x14720.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14721=IKsin(j4);
IkReal x14722=IKcos(j4);
IkReal x14723=(cj5*r10);
IkReal x14724=(r01*sj5);
IkReal x14725=((1.0)*cj2);
IkReal x14726=(cj5*r00);
IkReal x14727=(cj5*r20);
IkReal x14728=((1.0)*x14722);
IkReal x14729=((1.0)*x14721);
IkReal x14730=(sj5*x14721);
evalcond[0]=((((-1.0)*r22*x14728))+(((-1.0)*x14727*x14729))+((r21*x14730)));
evalcond[1]=((((-1.0)*r12*x14728))+(((-1.0)*x14723*x14729))+((r11*x14730)));
evalcond[2]=(((x14722*x14726))+(((-1.0)*r02*x14729))+(((-1.0)*x14724*x14728)));
evalcond[3]=((-1.0)+((x14721*x14724))+(((-1.0)*x14726*x14729))+(((-1.0)*r02*x14728)));
evalcond[4]=((((-1.0)*r21*sj5*x14728))+((x14722*x14727))+((sj1*sj2))+(((-1.0)*cj1*x14725))+(((-1.0)*r22*x14729)));
evalcond[5]=((((-1.0)*r12*x14729))+(((-1.0)*sj1*x14725))+((x14722*x14723))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14731=((1.0)*cj5);
CheckValue<IkReal> x14732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14731))+(((-1.0)*r10*sj5)))),-1);
if(!x14732.valid){
continue;
}
CheckValue<IkReal> x14733 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14731))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14732.value)))+(x14733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14734=IKsin(j4);
IkReal x14735=IKcos(j4);
IkReal x14736=(cj5*r10);
IkReal x14737=(r01*sj5);
IkReal x14738=((1.0)*cj2);
IkReal x14739=(cj5*r00);
IkReal x14740=(cj5*r20);
IkReal x14741=((1.0)*x14735);
IkReal x14742=((1.0)*x14734);
IkReal x14743=(sj5*x14734);
evalcond[0]=(((r21*x14743))+(((-1.0)*r22*x14741))+(((-1.0)*x14740*x14742)));
evalcond[1]=((((-1.0)*x14736*x14742))+((r11*x14743))+(((-1.0)*r12*x14741)));
evalcond[2]=((((-1.0)*r02*x14742))+((x14735*x14739))+(((-1.0)*x14737*x14741)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14741))+((x14734*x14737))+(((-1.0)*x14739*x14742)));
evalcond[4]=(((x14735*x14740))+((sj1*sj2))+(((-1.0)*r22*x14742))+(((-1.0)*cj1*x14738))+(((-1.0)*r21*sj5*x14741)));
evalcond[5]=((((-1.0)*sj1*x14738))+(((-1.0)*r11*sj5*x14741))+((x14735*x14736))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14744=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14744.valid){
continue;
}
CheckValue<IkReal> x14745 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14744.value)))+(x14745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14746=IKsin(j4);
IkReal x14747=IKcos(j4);
IkReal x14748=(cj5*r10);
IkReal x14749=(r01*sj5);
IkReal x14750=((1.0)*cj2);
IkReal x14751=(cj5*r00);
IkReal x14752=(cj5*r20);
IkReal x14753=((1.0)*x14747);
IkReal x14754=((1.0)*x14746);
IkReal x14755=(sj5*x14746);
evalcond[0]=((((-1.0)*x14752*x14754))+((r21*x14755))+(((-1.0)*r22*x14753)));
evalcond[1]=((((-1.0)*r12*x14753))+((r11*x14755))+(((-1.0)*x14748*x14754)));
evalcond[2]=(((x14747*x14751))+(((-1.0)*r02*x14754))+(((-1.0)*x14749*x14753)));
evalcond[3]=((-1.0)+(((-1.0)*x14751*x14754))+((x14746*x14749))+(((-1.0)*r02*x14753)));
evalcond[4]=((((-1.0)*r21*sj5*x14753))+(((-1.0)*cj1*x14750))+((sj1*sj2))+((x14747*x14752))+(((-1.0)*r22*x14754)));
evalcond[5]=((((-1.0)*r11*sj5*x14753))+((x14747*x14748))+(((-1.0)*r12*x14754))+(((-1.0)*sj1*x14750))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14756=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14756;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14757=((1.0)*cj5);
IkReal x14758=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14757)));
j4eval[0]=x14758;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14757))+((r21*sj5))))));
j4eval[2]=IKsign(x14758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14759=cj5*cj5;
IkReal x14760=r01*r01;
IkReal x14761=(cj5*r00);
IkReal x14762=(r01*sj5);
IkReal x14763=(x14760+(((-2.0)*x14761*x14762))+((x14759*(r00*r00)))+(((-1.0)*x14759*x14760))+(r02*r02));
j4eval[0]=x14763;
j4eval[1]=IKsign(x14763);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14761))+x14762))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14764=cj5*cj5;
IkReal x14765=r01*r01;
IkReal x14766=(r01*sj5);
IkReal x14767=(cj5*r00);
CheckValue<IkReal> x14768=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14764*x14765))+((x14764*(r00*r00)))+x14765+(r02*r02)+(((-2.0)*x14766*x14767)))),-1);
if(!x14768.valid){
continue;
}
CheckValue<IkReal> x14769 = IKatan2WithCheck(IkReal(((((-1.0)*x14767))+x14766)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14768.value)))+(x14769.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14770=IKcos(j4);
IkReal x14771=IKsin(j4);
IkReal x14772=(cj5*r00);
IkReal x14773=(cj5*r10);
IkReal x14774=(r21*sj5);
IkReal x14775=((1.0)*cj2);
IkReal x14776=(cj5*r20);
IkReal x14777=((1.0)*x14770);
IkReal x14778=((1.0)*x14771);
IkReal x14779=(sj5*x14771);
IkReal x14780=(sj5*x14770);
evalcond[0]=(((r01*x14780))+(((-1.0)*x14772*x14777))+((r02*x14771)));
evalcond[1]=((((-1.0)*x14776*x14778))+((x14771*x14774))+(((-1.0)*r22*x14777)));
evalcond[2]=((((-1.0)*x14773*x14778))+((r11*x14779))+(((-1.0)*r12*x14777)));
evalcond[3]=((-1.0)+(((-1.0)*x14772*x14778))+(((-1.0)*r02*x14777))+((r01*x14779)));
evalcond[4]=(((r22*x14771))+((x14770*x14774))+((sj1*sj2))+(((-1.0)*x14776*x14777))+(((-1.0)*cj1*x14775)));
evalcond[5]=(((r12*x14771))+(((-1.0)*x14773*x14777))+(((-1.0)*cj1*sj2))+((r11*x14780))+(((-1.0)*sj1*x14775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14781=((1.0)*cj5);
CheckValue<IkReal> x14782 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14782.valid){
continue;
}
CheckValue<IkReal> x14783=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14781)))),-1);
if(!x14783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14782.value)+(((1.5707963267949)*(x14783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14784=IKcos(j4);
IkReal x14785=IKsin(j4);
IkReal x14786=(cj5*r00);
IkReal x14787=(cj5*r10);
IkReal x14788=(r21*sj5);
IkReal x14789=((1.0)*cj2);
IkReal x14790=(cj5*r20);
IkReal x14791=((1.0)*x14784);
IkReal x14792=((1.0)*x14785);
IkReal x14793=(sj5*x14785);
IkReal x14794=(sj5*x14784);
evalcond[0]=(((r01*x14794))+(((-1.0)*x14786*x14791))+((r02*x14785)));
evalcond[1]=(((x14785*x14788))+(((-1.0)*x14790*x14792))+(((-1.0)*r22*x14791)));
evalcond[2]=((((-1.0)*r12*x14791))+(((-1.0)*x14787*x14792))+((r11*x14793)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14791))+((r01*x14793))+(((-1.0)*x14786*x14792)));
evalcond[4]=((((-1.0)*x14790*x14791))+((sj1*sj2))+(((-1.0)*cj1*x14789))+((x14784*x14788))+((r22*x14785)));
evalcond[5]=((((-1.0)*sj1*x14789))+(((-1.0)*cj1*sj2))+(((-1.0)*x14787*x14791))+((r11*x14794))+((r12*x14785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14795=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14795.valid){
continue;
}
CheckValue<IkReal> x14796 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14795.value)))+(x14796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14797=IKcos(j4);
IkReal x14798=IKsin(j4);
IkReal x14799=(cj5*r00);
IkReal x14800=(cj5*r10);
IkReal x14801=(r21*sj5);
IkReal x14802=((1.0)*cj2);
IkReal x14803=(cj5*r20);
IkReal x14804=((1.0)*x14797);
IkReal x14805=((1.0)*x14798);
IkReal x14806=(sj5*x14798);
IkReal x14807=(sj5*x14797);
evalcond[0]=((((-1.0)*x14799*x14804))+((r01*x14807))+((r02*x14798)));
evalcond[1]=((((-1.0)*r22*x14804))+(((-1.0)*x14803*x14805))+((x14798*x14801)));
evalcond[2]=((((-1.0)*x14800*x14805))+(((-1.0)*r12*x14804))+((r11*x14806)));
evalcond[3]=((-1.0)+(((-1.0)*x14799*x14805))+((r01*x14806))+(((-1.0)*r02*x14804)));
evalcond[4]=((((-1.0)*x14803*x14804))+((sj1*sj2))+((x14797*x14801))+((r22*x14798))+(((-1.0)*cj1*x14802)));
evalcond[5]=((((-1.0)*x14800*x14804))+(((-1.0)*cj1*sj2))+((r12*x14798))+((r11*x14807))+(((-1.0)*sj1*x14802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14809 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14809)==0){
continue;
}
IkReal x14808=pow(x14809,-0.5);
CheckValue<IkReal> x14810 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14810.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14810.value));
IkReal gconst49=((-1.0)*r21*x14808);
IkReal gconst50=(r20*x14808);
CheckValue<IkReal> x14811 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14811.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14811.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14814 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14814.valid){
continue;
}
IkReal x14812=((-1.0)*(x14814.value));
IkReal x14813=x14808;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14812;
IkReal gconst48=x14812;
IkReal gconst49=((-1.0)*r21*x14813);
IkReal gconst50=(r20*x14813);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14817 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14817.valid){
continue;
}
IkReal x14815=((-1.0)*(x14817.value));
IkReal x14816=x14808;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14815;
IkReal gconst48=x14815;
IkReal gconst49=((-1.0)*r21*x14816);
IkReal gconst50=(r20*x14816);
CheckValue<IkReal> x14825=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14825.valid){
continue;
}
IkReal x14818=x14825.value;
IkReal x14819=(sj3*x14818);
IkReal x14820=(r11*x14819);
IkReal x14821=(r00*x14819);
IkReal x14822=(r01*x14819);
IkReal x14823=(r10*x14819);
IkReal x14824=(r20*r21*x14819);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x14820*(r21*r21)))+((r00*r20*r21*x14820))+((r10*x14821*(r20*r20)))+((r10*r20*r21*x14822))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14826=gconst49*gconst49;
IkReal x14827=gconst50*gconst50;
IkReal x14828=((1.0)*cj3);
IkReal x14829=(gconst50*r01);
IkReal x14830=(gconst49*r10);
IkReal x14831=(r12*sj3);
IkReal x14832=(gconst49*r00);
IkReal x14833=(r00*sj3);
IkReal x14834=(r11*x14826);
IkReal x14835=(r10*x14827);
CheckValue<IkReal> x14836 = IKatan2WithCheck(IkReal((((x14831*x14832))+((x14829*x14831)))),IkReal((((x14833*x14834))+(((-1.0)*r01*sj3*x14835))+((gconst49*r11*sj3*x14829))+(((-1.0)*gconst50*x14830*x14833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14836.valid){
continue;
}
CheckValue<IkReal> x14837=IKPowWithIntegerCheck(IKsign((((cj3*gconst50*r11*x14832))+(((-1.0)*r00*x14828*x14835))+(((-1.0)*r01*x14828*x14834))+((cj3*x14829*x14830))+(((-1.0)*r02*r12*x14828)))),-1);
if(!x14837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14836.value)+(((1.5707963267949)*(x14837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14838=IKsin(j4);
IkReal x14839=IKcos(j4);
IkReal x14840=(sj1*sj2);
IkReal x14841=(gconst50*r20);
IkReal x14842=(gconst50*sj3);
IkReal x14843=(cj3*r01);
IkReal x14844=(gconst50*r10);
IkReal x14845=(gconst49*sj3);
IkReal x14846=((1.0)*cj2);
IkReal x14847=(cj1*sj2);
IkReal x14848=(cj3*r11);
IkReal x14849=(gconst50*r00);
IkReal x14850=(cj3*r21);
IkReal x14851=(cj3*gconst49);
IkReal x14852=(cj1*x14846);
IkReal x14853=((1.0)*x14839);
IkReal x14854=((1.0)*x14838);
IkReal x14855=(gconst49*x14838);
IkReal x14856=(gconst49*x14839);
IkReal x14857=(cj3*x14838);
evalcond[0]=(((r21*x14855))+(((-1.0)*x14841*x14854))+(((-1.0)*r22*x14853)));
evalcond[1]=(((r11*x14855))+(((-1.0)*x14844*x14854))+(((-1.0)*r12*x14853)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14853))+(((-1.0)*x14849*x14854))+((r01*x14855)));
evalcond[3]=(((r02*x14857))+((x14843*x14856))+((r01*x14842))+((r00*x14845))+(((-1.0)*cj3*x14849*x14853)));
evalcond[4]=((((-1.0)*r02*sj3*x14854))+(((-1.0)*r01*x14845*x14853))+((gconst50*x14843))+((r00*x14839*x14842))+((r00*x14851)));
evalcond[5]=(((r20*x14845))+((cj2*sj1))+(((-1.0)*cj3*x14841*x14853))+x14847+((x14850*x14856))+((r22*x14857))+((r21*x14842)));
evalcond[6]=(x14840+((r11*x14842))+(((-1.0)*cj3*x14844*x14853))+((r10*x14845))+((r12*x14857))+((x14848*x14856))+(((-1.0)*x14852)));
evalcond[7]=(((sj3*x14839*x14841))+(((-1.0)*r22*sj3*x14854))+((r20*x14851))+x14840+(((-1.0)*r21*x14845*x14853))+(((-1.0)*x14852))+((gconst50*x14850)));
evalcond[8]=((((-1.0)*x14847))+(((-1.0)*sj1*x14846))+((r10*x14839*x14842))+((r10*x14851))+((gconst50*x14848))+(((-1.0)*r12*sj3*x14854))+(((-1.0)*r11*x14845*x14853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14858=gconst49*gconst49;
IkReal x14859=gconst50*gconst50;
IkReal x14860=(cj3*r12);
IkReal x14861=(gconst49*r00);
IkReal x14862=(r01*r11);
IkReal x14863=(r00*r11);
IkReal x14864=(cj3*gconst50);
IkReal x14865=((1.0)*r01*r10);
IkReal x14866=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14867=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst50*r11*sj3*x14861))+((sj3*x14858*x14862))+((r00*r10*sj3*x14859))+(((-1.0)*x14865*x14866)))),-1);
if(!x14867.valid){
continue;
}
CheckValue<IkReal> x14868 = IKatan2WithCheck(IkReal((((gconst50*r01*x14860))+((x14860*x14861)))),IkReal((((gconst49*x14862*x14864))+((cj3*x14858*x14863))+(((-1.0)*r10*x14861*x14864))+(((-1.0)*cj3*x14859*x14865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14867.value)))+(x14868.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14869=IKsin(j4);
IkReal x14870=IKcos(j4);
IkReal x14871=(sj1*sj2);
IkReal x14872=(gconst50*r20);
IkReal x14873=(gconst50*sj3);
IkReal x14874=(cj3*r01);
IkReal x14875=(gconst50*r10);
IkReal x14876=(gconst49*sj3);
IkReal x14877=((1.0)*cj2);
IkReal x14878=(cj1*sj2);
IkReal x14879=(cj3*r11);
IkReal x14880=(gconst50*r00);
IkReal x14881=(cj3*r21);
IkReal x14882=(cj3*gconst49);
IkReal x14883=(cj1*x14877);
IkReal x14884=((1.0)*x14870);
IkReal x14885=((1.0)*x14869);
IkReal x14886=(gconst49*x14869);
IkReal x14887=(gconst49*x14870);
IkReal x14888=(cj3*x14869);
evalcond[0]=((((-1.0)*r22*x14884))+(((-1.0)*x14872*x14885))+((r21*x14886)));
evalcond[1]=((((-1.0)*x14875*x14885))+((r11*x14886))+(((-1.0)*r12*x14884)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14884))+((r01*x14886))+(((-1.0)*x14880*x14885)));
evalcond[3]=((((-1.0)*cj3*x14880*x14884))+((r00*x14876))+((r01*x14873))+((x14874*x14887))+((r02*x14888)));
evalcond[4]=((((-1.0)*r01*x14876*x14884))+((r00*x14882))+((gconst50*x14874))+(((-1.0)*r02*sj3*x14885))+((r00*x14870*x14873)));
evalcond[5]=(((cj2*sj1))+((r22*x14888))+(((-1.0)*cj3*x14872*x14884))+x14878+((r21*x14873))+((r20*x14876))+((x14881*x14887)));
evalcond[6]=(((r11*x14873))+((x14879*x14887))+((r10*x14876))+((r12*x14888))+x14871+(((-1.0)*cj3*x14875*x14884))+(((-1.0)*x14883)));
evalcond[7]=((((-1.0)*r21*x14876*x14884))+(((-1.0)*r22*sj3*x14885))+x14871+((gconst50*x14881))+((sj3*x14870*x14872))+(((-1.0)*x14883))+((r20*x14882)));
evalcond[8]=(((r10*x14882))+((r10*x14870*x14873))+(((-1.0)*r12*sj3*x14885))+((gconst50*x14879))+(((-1.0)*r11*x14876*x14884))+(((-1.0)*x14878))+(((-1.0)*sj1*x14877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14889=((1.0)*gconst50);
CheckValue<IkReal> x14890=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14889)))),-1);
if(!x14890.valid){
continue;
}
CheckValue<IkReal> x14891 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14890.value)))+(x14891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14892=IKsin(j4);
IkReal x14893=IKcos(j4);
IkReal x14894=(sj1*sj2);
IkReal x14895=(gconst50*r20);
IkReal x14896=(gconst50*sj3);
IkReal x14897=(cj3*r01);
IkReal x14898=(gconst50*r10);
IkReal x14899=(gconst49*sj3);
IkReal x14900=((1.0)*cj2);
IkReal x14901=(cj1*sj2);
IkReal x14902=(cj3*r11);
IkReal x14903=(gconst50*r00);
IkReal x14904=(cj3*r21);
IkReal x14905=(cj3*gconst49);
IkReal x14906=(cj1*x14900);
IkReal x14907=((1.0)*x14893);
IkReal x14908=((1.0)*x14892);
IkReal x14909=(gconst49*x14892);
IkReal x14910=(gconst49*x14893);
IkReal x14911=(cj3*x14892);
evalcond[0]=(((r21*x14909))+(((-1.0)*r22*x14907))+(((-1.0)*x14895*x14908)));
evalcond[1]=((((-1.0)*r12*x14907))+((r11*x14909))+(((-1.0)*x14898*x14908)));
evalcond[2]=((-1.0)+(((-1.0)*x14903*x14908))+((r01*x14909))+(((-1.0)*r02*x14907)));
evalcond[3]=(((r02*x14911))+((r01*x14896))+((r00*x14899))+(((-1.0)*cj3*x14903*x14907))+((x14897*x14910)));
evalcond[4]=(((r00*x14905))+((gconst50*x14897))+(((-1.0)*r02*sj3*x14908))+((r00*x14893*x14896))+(((-1.0)*r01*x14899*x14907)));
evalcond[5]=(((cj2*sj1))+((r22*x14911))+(((-1.0)*cj3*x14895*x14907))+x14901+((r21*x14896))+((x14904*x14910))+((r20*x14899)));
evalcond[6]=(((r10*x14899))+((r11*x14896))+(((-1.0)*x14906))+x14894+((x14902*x14910))+((r12*x14911))+(((-1.0)*cj3*x14898*x14907)));
evalcond[7]=((((-1.0)*x14906))+x14894+(((-1.0)*r21*x14899*x14907))+(((-1.0)*r22*sj3*x14908))+((sj3*x14893*x14895))+((r20*x14905))+((gconst50*x14904)));
evalcond[8]=((((-1.0)*sj1*x14900))+(((-1.0)*x14901))+((gconst50*x14902))+(((-1.0)*r11*x14899*x14907))+((r10*x14893*x14896))+(((-1.0)*r12*sj3*x14908))+((r10*x14905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14913 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14913)==0){
continue;
}
IkReal x14912=pow(x14913,-0.5);
CheckValue<IkReal> x14914 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14914.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14914.value))));
IkReal gconst52=((1.0)*r21*x14912);
IkReal gconst53=((-1.0)*r20*x14912);
CheckValue<IkReal> x14915 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14915.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14915.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14918 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14918.valid){
continue;
}
IkReal x14916=((1.0)*(x14918.value));
IkReal x14917=x14912;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14916)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14916)));
IkReal gconst52=((1.0)*r21*x14917);
IkReal gconst53=((-1.0)*r20*x14917);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14921 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14921.valid){
continue;
}
IkReal x14919=((1.0)*(x14921.value));
IkReal x14920=x14912;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14919)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14919)));
IkReal gconst52=((1.0)*r21*x14920);
IkReal gconst53=((-1.0)*r20*x14920);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14924 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14924.valid){
continue;
}
IkReal x14922=((1.0)*(x14924.value));
IkReal x14923=x14912;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14922)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14922)));
IkReal gconst52=((1.0)*r21*x14923);
IkReal gconst53=((-1.0)*r20*x14923);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14925=gconst52*gconst52;
IkReal x14926=gconst53*gconst53;
IkReal x14927=(gconst53*r01);
IkReal x14928=(cj3*r20);
IkReal x14929=(r22*sj3);
IkReal x14930=((1.0)*cj3);
IkReal x14931=(gconst52*sj3);
IkReal x14932=((1.0)*r00);
IkReal x14933=(gconst52*r00);
IkReal x14934=(r21*x14925);
CheckValue<IkReal> x14935=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14930*x14934))+((cj3*gconst53*r21*x14933))+(((-1.0)*r02*r22*x14930))+((gconst52*x14927*x14928))+(((-1.0)*x14926*x14928*x14932)))),-1);
if(!x14935.valid){
continue;
}
CheckValue<IkReal> x14936 = IKatan2WithCheck(IkReal((((x14929*x14933))+((x14927*x14929)))),IkReal((((r00*sj3*x14934))+((r21*x14927*x14931))+(((-1.0)*gconst53*r20*x14931*x14932))+(((-1.0)*r01*r20*sj3*x14926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14935.value)))+(x14936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14937=IKsin(j4);
IkReal x14938=IKcos(j4);
IkReal x14939=(sj1*sj2);
IkReal x14940=((1.0)*cj1);
IkReal x14941=(cj3*gconst52);
IkReal x14942=(gconst53*sj3);
IkReal x14943=(cj3*gconst53);
IkReal x14944=(cj2*sj1);
IkReal x14945=(gconst52*sj3);
IkReal x14946=(cj2*x14940);
IkReal x14947=((1.0)*x14938);
IkReal x14948=((1.0)*x14937);
IkReal x14949=(gconst52*x14937);
IkReal x14950=(cj3*x14937);
evalcond[0]=((((-1.0)*gconst53*r20*x14948))+((r21*x14949))+(((-1.0)*r22*x14947)));
evalcond[1]=((((-1.0)*r12*x14947))+(((-1.0)*gconst53*r10*x14948))+((r11*x14949)));
evalcond[2]=((-1.0)+((r01*x14949))+(((-1.0)*r02*x14947))+(((-1.0)*gconst53*r00*x14948)));
evalcond[3]=((((-1.0)*r00*x14943*x14947))+((r00*x14945))+((r01*x14942))+((r02*x14950))+((r01*x14938*x14941)));
evalcond[4]=((((-1.0)*r01*x14945*x14947))+((r00*x14938*x14942))+(((-1.0)*r02*sj3*x14948))+((r00*x14941))+((r01*x14943)));
evalcond[5]=(x14944+((cj1*sj2))+((r22*x14950))+((r21*x14938*x14941))+(((-1.0)*r20*x14943*x14947))+((r21*x14942))+((r20*x14945)));
evalcond[6]=(((r12*x14950))+x14939+((r10*x14945))+((r11*x14938*x14941))+(((-1.0)*r10*x14943*x14947))+(((-1.0)*x14946))+((r11*x14942)));
evalcond[7]=(x14939+(((-1.0)*x14946))+(((-1.0)*r22*sj3*x14948))+(((-1.0)*r21*x14945*x14947))+((r21*x14943))+((r20*x14938*x14942))+((r20*x14941)));
evalcond[8]=(((r10*x14938*x14942))+(((-1.0)*r11*x14945*x14947))+((r10*x14941))+(((-1.0)*sj2*x14940))+(((-1.0)*r12*sj3*x14948))+(((-1.0)*x14944))+((r11*x14943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14951=((1.0)*gconst53);
CheckValue<IkReal> x14952 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14951))+((gconst52*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14952.valid){
continue;
}
CheckValue<IkReal> x14953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14951))+(((-1.0)*gconst52*r10)))),-1);
if(!x14953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14952.value)+(((1.5707963267949)*(x14953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14954=IKsin(j4);
IkReal x14955=IKcos(j4);
IkReal x14956=(sj1*sj2);
IkReal x14957=((1.0)*cj1);
IkReal x14958=(cj3*gconst52);
IkReal x14959=(gconst53*sj3);
IkReal x14960=(cj3*gconst53);
IkReal x14961=(cj2*sj1);
IkReal x14962=(gconst52*sj3);
IkReal x14963=(cj2*x14957);
IkReal x14964=((1.0)*x14955);
IkReal x14965=((1.0)*x14954);
IkReal x14966=(gconst52*x14954);
IkReal x14967=(cj3*x14954);
evalcond[0]=((((-1.0)*r22*x14964))+((r21*x14966))+(((-1.0)*gconst53*r20*x14965)));
evalcond[1]=((((-1.0)*r12*x14964))+((r11*x14966))+(((-1.0)*gconst53*r10*x14965)));
evalcond[2]=((-1.0)+((r01*x14966))+(((-1.0)*r02*x14964))+(((-1.0)*gconst53*r00*x14965)));
evalcond[3]=((((-1.0)*r00*x14960*x14964))+((r01*x14959))+((r02*x14967))+((r01*x14955*x14958))+((r00*x14962)));
evalcond[4]=(((r01*x14960))+(((-1.0)*r02*sj3*x14965))+((r00*x14958))+(((-1.0)*r01*x14962*x14964))+((r00*x14955*x14959)));
evalcond[5]=(((r22*x14967))+(((-1.0)*r20*x14960*x14964))+x14961+((cj1*sj2))+((r21*x14959))+((r20*x14962))+((r21*x14955*x14958)));
evalcond[6]=(x14956+((r12*x14967))+((r11*x14955*x14958))+(((-1.0)*x14963))+(((-1.0)*r10*x14960*x14964))+((r10*x14962))+((r11*x14959)));
evalcond[7]=((((-1.0)*r21*x14962*x14964))+x14956+(((-1.0)*r22*sj3*x14965))+((r20*x14955*x14959))+(((-1.0)*x14963))+((r20*x14958))+((r21*x14960)));
evalcond[8]=((((-1.0)*r11*x14962*x14964))+(((-1.0)*x14961))+(((-1.0)*sj2*x14957))+((r10*x14958))+((r11*x14960))+(((-1.0)*r12*sj3*x14965))+((r10*x14955*x14959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14968 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14968.valid){
continue;
}
CheckValue<IkReal> x14969=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14968.value)+(((1.5707963267949)*(x14969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14970=IKsin(j4);
IkReal x14971=IKcos(j4);
IkReal x14972=(sj1*sj2);
IkReal x14973=((1.0)*cj1);
IkReal x14974=(cj3*gconst52);
IkReal x14975=(gconst53*sj3);
IkReal x14976=(cj3*gconst53);
IkReal x14977=(cj2*sj1);
IkReal x14978=(gconst52*sj3);
IkReal x14979=(cj2*x14973);
IkReal x14980=((1.0)*x14971);
IkReal x14981=((1.0)*x14970);
IkReal x14982=(gconst52*x14970);
IkReal x14983=(cj3*x14970);
evalcond[0]=((((-1.0)*gconst53*r20*x14981))+((r21*x14982))+(((-1.0)*r22*x14980)));
evalcond[1]=((((-1.0)*gconst53*r10*x14981))+((r11*x14982))+(((-1.0)*r12*x14980)));
evalcond[2]=((-1.0)+((r01*x14982))+(((-1.0)*gconst53*r00*x14981))+(((-1.0)*r02*x14980)));
evalcond[3]=(((r01*x14971*x14974))+(((-1.0)*r00*x14976*x14980))+((r02*x14983))+((r01*x14975))+((r00*x14978)));
evalcond[4]=((((-1.0)*r01*x14978*x14980))+((r00*x14971*x14975))+(((-1.0)*r02*sj3*x14981))+((r01*x14976))+((r00*x14974)));
evalcond[5]=(x14977+((cj1*sj2))+(((-1.0)*r20*x14976*x14980))+((r21*x14971*x14974))+((r22*x14983))+((r20*x14978))+((r21*x14975)));
evalcond[6]=(((r11*x14971*x14974))+x14972+(((-1.0)*x14979))+((r11*x14975))+(((-1.0)*r10*x14976*x14980))+((r12*x14983))+((r10*x14978)));
evalcond[7]=((((-1.0)*r22*sj3*x14981))+x14972+(((-1.0)*x14979))+((r20*x14971*x14975))+((r20*x14974))+((r21*x14976))+(((-1.0)*r21*x14978*x14980)));
evalcond[8]=((((-1.0)*sj2*x14973))+(((-1.0)*x14977))+((r10*x14971*x14975))+(((-1.0)*r12*sj3*x14981))+((r11*x14976))+(((-1.0)*r11*x14978*x14980))+((r10*x14974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14984=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14984);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14984);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14985=(r01*sj5);
IkReal x14986=((1.0)*cj5*r00);
j4eval[0]=(x14985+(((-1.0)*x14986)));
j4eval[1]=((((-1.0)*cj3*x14986))+((cj3*x14985)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14987=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14987);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14987);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14988=(cj5*r00);
IkReal x14989=(r01*sj5);
j4eval[0]=(x14989+(((-1.0)*x14988)));
j4eval[1]=(((sj3*x14988))+(((-1.0)*sj3*x14989)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14990=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14990);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14990);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14991=((1.0)*r00);
CheckValue<IkReal> x14992=IKPowWithIntegerCheck(cj3,-1);
if(!x14992.valid){
continue;
}
CheckValue<IkReal> x14993=IKPowWithIntegerCheck(r22,-1);
if(!x14993.valid){
continue;
}
CheckValue<IkReal> x14994=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14991))),-1);
if(!x14994.valid){
continue;
}
if( IKabs(((x14992.value)*(x14993.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14994.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14991)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14992.value)*(x14993.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14994.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14991))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14992.value)*(x14993.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14994.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14991))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14995=IKsin(j4);
IkReal x14996=IKcos(j4);
IkReal x14997=(sj1*sj2);
IkReal x14998=(cj5*sj3);
IkReal x14999=(r11*sj5);
IkReal x15000=(cj3*cj5);
IkReal x15001=((1.0)*cj1);
IkReal x15002=(cj3*sj5);
IkReal x15003=(sj3*sj5);
IkReal x15004=(cj2*sj1);
IkReal x15005=(r01*sj5);
IkReal x15006=((1.0)*sj3);
IkReal x15007=(cj2*x15001);
IkReal x15008=(r10*x14996);
IkReal x15009=(r22*x14995);
IkReal x15010=(cj3*x14996);
IkReal x15011=((1.0)*cj5*x14995);
evalcond[0]=((-1.0)*r22*x14996);
evalcond[1]=(((cj1*sj2))+x15004+((cj3*x15009)));
evalcond[2]=(((x14995*x14999))+(((-1.0)*r10*x15011)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15011))+((x14995*x15005)));
evalcond[4]=(x14997+(((-1.0)*x15006*x15009))+(((-1.0)*x15007)));
evalcond[5]=((((-1.0)*r00*x14996*x15000))+((r00*x15003))+((r01*x14996*x15002))+((r01*x14998)));
evalcond[6]=(((r01*x15000))+((r00*x15002))+(((-1.0)*r01*x14996*x15003))+((r00*x14996*x14998)));
evalcond[7]=((((-1.0)*x15000*x15008))+x14997+((x14999*x15010))+((r10*x15003))+((r11*x14998))+(((-1.0)*x15007)));
evalcond[8]=((((-1.0)*x14996*x14999*x15006))+(((-1.0)*sj2*x15001))+(((-1.0)*x15004))+((x14998*x15008))+((r10*x15002))+((r11*x15000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15012=((1.0)*cj3);
IkReal x15013=(cj5*r00);
IkReal x15014=(r01*sj5);
CheckValue<IkReal> x15015=IKPowWithIntegerCheck(((((-1.0)*x15013))+x15014),-1);
if(!x15015.valid){
continue;
}
CheckValue<IkReal> x15016=IKPowWithIntegerCheck((((sj3*x15013))+(((-1.0)*sj3*x15014))),-1);
if(!x15016.valid){
continue;
}
if( IKabs(x15015.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15016.value)*(((((-1.0)*r00*sj5*x15012))+(((-1.0)*cj5*r01*x15012)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15015.value)+IKsqr(((x15016.value)*(((((-1.0)*r00*sj5*x15012))+(((-1.0)*cj5*r01*x15012))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15015.value, ((x15016.value)*(((((-1.0)*r00*sj5*x15012))+(((-1.0)*cj5*r01*x15012))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15017=IKsin(j4);
IkReal x15018=IKcos(j4);
IkReal x15019=(sj1*sj2);
IkReal x15020=(cj5*sj3);
IkReal x15021=(r11*sj5);
IkReal x15022=(cj3*cj5);
IkReal x15023=((1.0)*cj1);
IkReal x15024=(cj3*sj5);
IkReal x15025=(sj3*sj5);
IkReal x15026=(cj2*sj1);
IkReal x15027=(r01*sj5);
IkReal x15028=((1.0)*sj3);
IkReal x15029=(cj2*x15023);
IkReal x15030=(r10*x15018);
IkReal x15031=(r22*x15017);
IkReal x15032=(cj3*x15018);
IkReal x15033=((1.0)*cj5*x15017);
evalcond[0]=((-1.0)*r22*x15018);
evalcond[1]=(((cj1*sj2))+x15026+((cj3*x15031)));
evalcond[2]=(((x15017*x15021))+(((-1.0)*r10*x15033)));
evalcond[3]=((-1.0)+((x15017*x15027))+(((-1.0)*r00*x15033)));
evalcond[4]=((((-1.0)*x15028*x15031))+x15019+(((-1.0)*x15029)));
evalcond[5]=(((r00*x15025))+((r01*x15018*x15024))+(((-1.0)*r00*x15018*x15022))+((r01*x15020)));
evalcond[6]=(((r00*x15024))+(((-1.0)*r01*x15018*x15025))+((r00*x15018*x15020))+((r01*x15022)));
evalcond[7]=((((-1.0)*x15022*x15030))+((r10*x15025))+x15019+((x15021*x15032))+(((-1.0)*x15029))+((r11*x15020)));
evalcond[8]=((((-1.0)*x15026))+((r10*x15024))+((x15020*x15030))+(((-1.0)*x15018*x15021*x15028))+(((-1.0)*sj2*x15023))+((r11*x15022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15034=((1.0)*sj3);
IkReal x15035=(r01*sj5);
IkReal x15036=((1.0)*cj5*r00);
CheckValue<IkReal> x15037=IKPowWithIntegerCheck(((((-1.0)*x15036))+x15035),-1);
if(!x15037.valid){
continue;
}
CheckValue<IkReal> x15038=IKPowWithIntegerCheck((((cj3*x15035))+(((-1.0)*cj3*x15036))),-1);
if(!x15038.valid){
continue;
}
if( IKabs(x15037.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15038.value)*(((((-1.0)*r00*sj5*x15034))+(((-1.0)*cj5*r01*x15034)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15037.value)+IKsqr(((x15038.value)*(((((-1.0)*r00*sj5*x15034))+(((-1.0)*cj5*r01*x15034))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15037.value, ((x15038.value)*(((((-1.0)*r00*sj5*x15034))+(((-1.0)*cj5*r01*x15034))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15039=IKsin(j4);
IkReal x15040=IKcos(j4);
IkReal x15041=(sj1*sj2);
IkReal x15042=(cj5*sj3);
IkReal x15043=(r11*sj5);
IkReal x15044=(cj3*cj5);
IkReal x15045=((1.0)*cj1);
IkReal x15046=(cj3*sj5);
IkReal x15047=(sj3*sj5);
IkReal x15048=(cj2*sj1);
IkReal x15049=(r01*sj5);
IkReal x15050=((1.0)*sj3);
IkReal x15051=(cj2*x15045);
IkReal x15052=(r10*x15040);
IkReal x15053=(r22*x15039);
IkReal x15054=(cj3*x15040);
IkReal x15055=((1.0)*cj5*x15039);
evalcond[0]=((-1.0)*r22*x15040);
evalcond[1]=(((cj1*sj2))+x15048+((cj3*x15053)));
evalcond[2]=(((x15039*x15043))+(((-1.0)*r10*x15055)));
evalcond[3]=((-1.0)+((x15039*x15049))+(((-1.0)*r00*x15055)));
evalcond[4]=(x15041+(((-1.0)*x15051))+(((-1.0)*x15050*x15053)));
evalcond[5]=(((r01*x15040*x15046))+(((-1.0)*r00*x15040*x15044))+((r00*x15047))+((r01*x15042)));
evalcond[6]=(((r00*x15046))+((r01*x15044))+(((-1.0)*r01*x15040*x15047))+((r00*x15040*x15042)));
evalcond[7]=(((r11*x15042))+(((-1.0)*x15044*x15052))+x15041+(((-1.0)*x15051))+((r10*x15047))+((x15043*x15054)));
evalcond[8]=((((-1.0)*sj2*x15045))+((x15042*x15052))+((r11*x15044))+(((-1.0)*x15048))+((r10*x15046))+(((-1.0)*x15040*x15043*x15050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15056=cj5*cj5;
IkReal x15057=(cj3*r20);
IkReal x15058=(r21*sj3);
IkReal x15059=((1.0)*cj3);
IkReal x15060=(r01*r21);
IkReal x15061=(r01*sj3);
IkReal x15062=(r00*sj5);
IkReal x15063=(cj5*r01*sj5);
IkReal x15064=((1.0)*x15056);
CheckValue<IkReal> x15065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15057*x15064))+(((-1.0)*r02*r22*x15059))+((x15057*x15063))+(((-1.0)*x15059*x15060))+((cj3*cj5*r21*x15062))+((cj3*x15056*x15060)))),-1);
if(!x15065.valid){
continue;
}
CheckValue<IkReal> x15066 = IKatan2WithCheck(IkReal((((r22*sj3*x15062))+((cj5*r22*x15061)))),IkReal(((((-1.0)*r00*x15058*x15064))+(((-1.0)*cj5*r20*sj3*x15062))+(((-1.0)*r20*x15061*x15064))+((x15058*x15063))+((r00*x15058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15065.value)))+(x15066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15067=IKsin(j4);
IkReal x15068=IKcos(j4);
IkReal x15069=(sj1*sj2);
IkReal x15070=(r11*sj5);
IkReal x15071=(cj5*r10);
IkReal x15072=(cj5*r01);
IkReal x15073=(cj5*r00);
IkReal x15074=((1.0)*cj1);
IkReal x15075=(cj3*sj5);
IkReal x15076=(r21*sj5);
IkReal x15077=(cj5*sj3);
IkReal x15078=(sj3*sj5);
IkReal x15079=(cj2*sj1);
IkReal x15080=(r01*sj5);
IkReal x15081=(cj3*cj5);
IkReal x15082=(cj5*r20);
IkReal x15083=(cj2*x15074);
IkReal x15084=((1.0)*x15068);
IkReal x15085=((1.0)*x15067);
IkReal x15086=(cj3*x15068);
IkReal x15087=(sj3*x15068);
IkReal x15088=(cj3*x15067);
evalcond[0]=((((-1.0)*r22*x15084))+(((-1.0)*x15082*x15085))+((x15067*x15076)));
evalcond[1]=((((-1.0)*r12*x15084))+((x15067*x15070))+(((-1.0)*x15071*x15085)));
evalcond[2]=((-1.0)+(((-1.0)*x15073*x15085))+(((-1.0)*r02*x15084))+((x15067*x15080)));
evalcond[3]=(((r02*x15088))+((r00*x15078))+(((-1.0)*cj3*x15073*x15084))+((r01*x15068*x15075))+((sj3*x15072)));
evalcond[4]=(((r00*x15075))+((cj3*x15072))+(((-1.0)*r02*sj3*x15085))+(((-1.0)*r01*x15078*x15084))+((x15073*x15087)));
evalcond[5]=(((cj1*sj2))+((r22*x15088))+x15079+(((-1.0)*r20*x15081*x15084))+((r21*x15068*x15075))+((r20*x15078))+((r21*x15077)));
evalcond[6]=(((r12*x15088))+(((-1.0)*cj3*x15071*x15084))+(((-1.0)*x15083))+((r11*x15077))+x15069+((r10*x15078))+((x15070*x15086)));
evalcond[7]=((((-1.0)*x15083))+((r20*x15068*x15077))+x15069+((r20*x15075))+((r21*x15081))+(((-1.0)*r22*sj3*x15085))+(((-1.0)*sj3*x15076*x15084)));
evalcond[8]=((((-1.0)*sj2*x15074))+(((-1.0)*sj3*x15070*x15084))+(((-1.0)*x15079))+((r10*x15075))+(((-1.0)*r12*sj3*x15085))+((r11*x15081))+((x15071*x15087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15089=((1.0)*cj5);
CheckValue<IkReal> x15090=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15089)))),-1);
if(!x15090.valid){
continue;
}
CheckValue<IkReal> x15091 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15089)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15090.value)))+(x15091.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15092=IKsin(j4);
IkReal x15093=IKcos(j4);
IkReal x15094=(sj1*sj2);
IkReal x15095=(r11*sj5);
IkReal x15096=(cj5*r10);
IkReal x15097=(cj5*r01);
IkReal x15098=(cj5*r00);
IkReal x15099=((1.0)*cj1);
IkReal x15100=(cj3*sj5);
IkReal x15101=(r21*sj5);
IkReal x15102=(cj5*sj3);
IkReal x15103=(sj3*sj5);
IkReal x15104=(cj2*sj1);
IkReal x15105=(r01*sj5);
IkReal x15106=(cj3*cj5);
IkReal x15107=(cj5*r20);
IkReal x15108=(cj2*x15099);
IkReal x15109=((1.0)*x15093);
IkReal x15110=((1.0)*x15092);
IkReal x15111=(cj3*x15093);
IkReal x15112=(sj3*x15093);
IkReal x15113=(cj3*x15092);
evalcond[0]=((((-1.0)*r22*x15109))+((x15092*x15101))+(((-1.0)*x15107*x15110)));
evalcond[1]=((((-1.0)*x15096*x15110))+(((-1.0)*r12*x15109))+((x15092*x15095)));
evalcond[2]=((-1.0)+((x15092*x15105))+(((-1.0)*r02*x15109))+(((-1.0)*x15098*x15110)));
evalcond[3]=(((sj3*x15097))+((r00*x15103))+((r01*x15093*x15100))+(((-1.0)*cj3*x15098*x15109))+((r02*x15113)));
evalcond[4]=((((-1.0)*r02*sj3*x15110))+((r00*x15100))+((cj3*x15097))+((x15098*x15112))+(((-1.0)*r01*x15103*x15109)));
evalcond[5]=(((cj1*sj2))+((r21*x15102))+x15104+((r20*x15103))+((r22*x15113))+((r21*x15093*x15100))+(((-1.0)*r20*x15106*x15109)));
evalcond[6]=((((-1.0)*cj3*x15096*x15109))+x15094+((r10*x15103))+((r12*x15113))+((x15095*x15111))+(((-1.0)*x15108))+((r11*x15102)));
evalcond[7]=((((-1.0)*sj3*x15101*x15109))+((r21*x15106))+x15094+((r20*x15100))+(((-1.0)*x15108))+(((-1.0)*r22*sj3*x15110))+((r20*x15093*x15102)));
evalcond[8]=(((r10*x15100))+((x15096*x15112))+(((-1.0)*r12*sj3*x15110))+(((-1.0)*sj3*x15095*x15109))+(((-1.0)*x15104))+(((-1.0)*sj2*x15099))+((r11*x15106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15114=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15114.valid){
continue;
}
CheckValue<IkReal> x15115 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15114.value)))+(x15115.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15116=IKsin(j4);
IkReal x15117=IKcos(j4);
IkReal x15118=(sj1*sj2);
IkReal x15119=(r11*sj5);
IkReal x15120=(cj5*r10);
IkReal x15121=(cj5*r01);
IkReal x15122=(cj5*r00);
IkReal x15123=((1.0)*cj1);
IkReal x15124=(cj3*sj5);
IkReal x15125=(r21*sj5);
IkReal x15126=(cj5*sj3);
IkReal x15127=(sj3*sj5);
IkReal x15128=(cj2*sj1);
IkReal x15129=(r01*sj5);
IkReal x15130=(cj3*cj5);
IkReal x15131=(cj5*r20);
IkReal x15132=(cj2*x15123);
IkReal x15133=((1.0)*x15117);
IkReal x15134=((1.0)*x15116);
IkReal x15135=(cj3*x15117);
IkReal x15136=(sj3*x15117);
IkReal x15137=(cj3*x15116);
evalcond[0]=((((-1.0)*r22*x15133))+((x15116*x15125))+(((-1.0)*x15131*x15134)));
evalcond[1]=((((-1.0)*x15120*x15134))+(((-1.0)*r12*x15133))+((x15116*x15119)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15133))+(((-1.0)*x15122*x15134))+((x15116*x15129)));
evalcond[3]=((((-1.0)*cj3*x15122*x15133))+((sj3*x15121))+((r00*x15127))+((r01*x15117*x15124))+((r02*x15137)));
evalcond[4]=((((-1.0)*r02*sj3*x15134))+((r00*x15124))+(((-1.0)*r01*x15127*x15133))+((x15122*x15136))+((cj3*x15121)));
evalcond[5]=(((r20*x15127))+((r21*x15126))+(((-1.0)*r20*x15130*x15133))+((cj1*sj2))+((r22*x15137))+((r21*x15117*x15124))+x15128);
evalcond[6]=((((-1.0)*x15132))+(((-1.0)*cj3*x15120*x15133))+x15118+((x15119*x15135))+((r12*x15137))+((r10*x15127))+((r11*x15126)));
evalcond[7]=(((r20*x15124))+((r21*x15130))+(((-1.0)*x15132))+(((-1.0)*sj3*x15125*x15133))+(((-1.0)*r22*sj3*x15134))+x15118+((r20*x15117*x15126)));
evalcond[8]=((((-1.0)*r12*sj3*x15134))+(((-1.0)*sj3*x15119*x15133))+(((-1.0)*x15128))+((r10*x15124))+((r11*x15130))+(((-1.0)*sj2*x15123))+((x15120*x15136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15138=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15138;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15139=((1.0)*cj5);
IkReal x15140=((((-1.0)*r21*x15139))+(((-1.0)*r20*sj5)));
j4eval[0]=x15140;
j4eval[1]=((IKabs(((((-1.0)*r10*x15139))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15141=cj5*cj5;
IkReal x15142=(cj3*r01);
IkReal x15143=(cj5*sj5);
IkReal x15144=((1.0)*cj3);
IkReal x15145=(((cj3*r00*r21*x15143))+(((-1.0)*r02*r22*x15144))+(((-1.0)*r00*r20*x15141*x15144))+(((-1.0)*r21*x15142))+((r21*x15141*x15142))+((r20*x15142*x15143)));
j4eval[0]=x15145;
j4eval[1]=IKsign(x15145);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15146=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15146;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15146);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15147=((1.0)*cj5);
IkReal x15148=((((-1.0)*r21*x15147))+(((-1.0)*r20*sj5)));
j4eval[0]=x15148;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15147))+((r11*sj5))))));
j4eval[2]=IKsign(x15148);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15149=cj5*cj5;
IkReal x15150=r01*r01;
IkReal x15151=(cj5*r00);
IkReal x15152=(r01*sj5);
IkReal x15153=(((x15149*(r00*r00)))+(((-1.0)*x15149*x15150))+(((-2.0)*x15151*x15152))+x15150+(r02*r02));
j4eval[0]=x15153;
j4eval[1]=((IKabs(r02))+(IKabs((x15151+(((-1.0)*x15152))))));
j4eval[2]=IKsign(x15153);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15154=cj5*cj5;
IkReal x15155=r01*r01;
IkReal x15156=(r01*sj5);
IkReal x15157=(cj5*r00);
CheckValue<IkReal> x15158=IKPowWithIntegerCheck(IKsign((((x15154*(r00*r00)))+x15155+(((-2.0)*x15156*x15157))+(r02*r02)+(((-1.0)*x15154*x15155)))),-1);
if(!x15158.valid){
continue;
}
CheckValue<IkReal> x15159 = IKatan2WithCheck(IkReal((x15157+(((-1.0)*x15156)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15158.value)))+(x15159.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15160=IKsin(j4);
IkReal x15161=IKcos(j4);
IkReal x15162=(cj5*r10);
IkReal x15163=(r01*sj5);
IkReal x15164=(cj5*r00);
IkReal x15165=(cj5*r20);
IkReal x15166=((1.0)*x15161);
IkReal x15167=((1.0)*x15160);
IkReal x15168=(sj5*x15160);
evalcond[0]=((((-1.0)*x15165*x15167))+((r21*x15168))+(((-1.0)*r22*x15166)));
evalcond[1]=(((r11*x15168))+(((-1.0)*x15162*x15167))+(((-1.0)*r12*x15166)));
evalcond[2]=(((x15161*x15164))+(((-1.0)*x15163*x15166))+(((-1.0)*r02*x15167)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15166))+(((-1.0)*x15164*x15167))+((x15160*x15163)));
evalcond[4]=(((cj2*sj1))+((x15161*x15162))+((cj1*sj2))+(((-1.0)*r11*sj5*x15166))+(((-1.0)*r12*x15167)));
evalcond[5]=((((-1.0)*r21*sj5*x15166))+((x15161*x15165))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15169=((1.0)*cj5);
CheckValue<IkReal> x15170 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15170.valid){
continue;
}
CheckValue<IkReal> x15171=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15169))+(((-1.0)*r20*sj5)))),-1);
if(!x15171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15170.value)+(((1.5707963267949)*(x15171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15172=IKsin(j4);
IkReal x15173=IKcos(j4);
IkReal x15174=(cj5*r10);
IkReal x15175=(r01*sj5);
IkReal x15176=(cj5*r00);
IkReal x15177=(cj5*r20);
IkReal x15178=((1.0)*x15173);
IkReal x15179=((1.0)*x15172);
IkReal x15180=(sj5*x15172);
evalcond[0]=((((-1.0)*x15177*x15179))+(((-1.0)*r22*x15178))+((r21*x15180)));
evalcond[1]=(((r11*x15180))+(((-1.0)*x15174*x15179))+(((-1.0)*r12*x15178)));
evalcond[2]=(((x15173*x15176))+(((-1.0)*x15175*x15178))+(((-1.0)*r02*x15179)));
evalcond[3]=((1.0)+(((-1.0)*x15176*x15179))+((x15172*x15175))+(((-1.0)*r02*x15178)));
evalcond[4]=(((cj2*sj1))+((x15173*x15174))+((cj1*sj2))+(((-1.0)*r11*sj5*x15178))+(((-1.0)*r12*x15179)));
evalcond[5]=(((x15173*x15177))+(((-1.0)*r21*sj5*x15178))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15181 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15181.valid){
continue;
}
CheckValue<IkReal> x15182=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15181.value)+(((1.5707963267949)*(x15182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15183=IKsin(j4);
IkReal x15184=IKcos(j4);
IkReal x15185=(cj5*r10);
IkReal x15186=(r01*sj5);
IkReal x15187=(cj5*r00);
IkReal x15188=(cj5*r20);
IkReal x15189=((1.0)*x15184);
IkReal x15190=((1.0)*x15183);
IkReal x15191=(sj5*x15183);
evalcond[0]=(((r21*x15191))+(((-1.0)*x15188*x15190))+(((-1.0)*r22*x15189)));
evalcond[1]=(((r11*x15191))+(((-1.0)*x15185*x15190))+(((-1.0)*r12*x15189)));
evalcond[2]=((((-1.0)*r02*x15190))+(((-1.0)*x15186*x15189))+((x15184*x15187)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15189))+((x15183*x15186))+(((-1.0)*x15187*x15190)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x15189))+(((-1.0)*r12*x15190))+((cj1*sj2))+((x15184*x15185)));
evalcond[5]=((((-1.0)*r21*sj5*x15189))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15190))+((x15184*x15188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15192=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15192;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15192);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15193=((1.0)*cj5);
IkReal x15194=((((-1.0)*r21*x15193))+(((-1.0)*r20*sj5)));
j4eval[0]=x15194;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15193))+((r11*sj5))))));
j4eval[2]=IKsign(x15194);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15195=cj5*cj5;
IkReal x15196=r01*r01;
IkReal x15197=(r01*sj5);
IkReal x15198=(cj5*r00);
IkReal x15199=((((2.0)*x15197*x15198))+(((-1.0)*x15195*(r00*r00)))+(((-1.0)*(r02*r02)))+((x15195*x15196))+(((-1.0)*x15196)));
j4eval[0]=x15199;
j4eval[1]=IKsign(x15199);
j4eval[2]=((IKabs((x15197+(((-1.0)*x15198)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15200=cj5*cj5;
IkReal x15201=r01*r01;
IkReal x15202=(r01*sj5);
IkReal x15203=(cj5*r00);
CheckValue<IkReal> x15204=IKPowWithIntegerCheck(IKsign((((x15200*x15201))+(((-1.0)*x15201))+(((-1.0)*(r02*r02)))+(((2.0)*x15202*x15203))+(((-1.0)*x15200*(r00*r00))))),-1);
if(!x15204.valid){
continue;
}
CheckValue<IkReal> x15205 = IKatan2WithCheck(IkReal(((((-1.0)*x15203))+x15202)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15204.value)))+(x15205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15206=IKcos(j4);
IkReal x15207=IKsin(j4);
IkReal x15208=(cj5*r00);
IkReal x15209=(cj5*r10);
IkReal x15210=(r21*sj5);
IkReal x15211=(cj5*r20);
IkReal x15212=((1.0)*x15206);
IkReal x15213=((1.0)*x15207);
IkReal x15214=(sj5*x15207);
IkReal x15215=(sj5*x15206);
evalcond[0]=((((-1.0)*x15208*x15212))+((r01*x15215))+((r02*x15207)));
evalcond[1]=((((-1.0)*r22*x15212))+((x15207*x15210))+(((-1.0)*x15211*x15213)));
evalcond[2]=(((r11*x15214))+(((-1.0)*r12*x15212))+(((-1.0)*x15209*x15213)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15212))+(((-1.0)*x15208*x15213))+((r01*x15214)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15215))+((r12*x15207))+(((-1.0)*x15209*x15212)));
evalcond[5]=(((x15206*x15210))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15207))+(((-1.0)*x15211*x15212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15216=((1.0)*cj5);
CheckValue<IkReal> x15217=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15216))+(((-1.0)*r20*sj5)))),-1);
if(!x15217.valid){
continue;
}
CheckValue<IkReal> x15218 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15217.value)))+(x15218.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15219=IKcos(j4);
IkReal x15220=IKsin(j4);
IkReal x15221=(cj5*r00);
IkReal x15222=(cj5*r10);
IkReal x15223=(r21*sj5);
IkReal x15224=(cj5*r20);
IkReal x15225=((1.0)*x15219);
IkReal x15226=((1.0)*x15220);
IkReal x15227=(sj5*x15220);
IkReal x15228=(sj5*x15219);
evalcond[0]=((((-1.0)*x15221*x15225))+((r02*x15220))+((r01*x15228)));
evalcond[1]=(((x15220*x15223))+(((-1.0)*x15224*x15226))+(((-1.0)*r22*x15225)));
evalcond[2]=((((-1.0)*r12*x15225))+(((-1.0)*x15222*x15226))+((r11*x15227)));
evalcond[3]=((1.0)+(((-1.0)*x15221*x15226))+(((-1.0)*r02*x15225))+((r01*x15227)));
evalcond[4]=(((r12*x15220))+((cj2*sj1))+(((-1.0)*x15222*x15225))+((cj1*sj2))+((r11*x15228)));
evalcond[5]=(((r22*x15220))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15224*x15225))+((x15219*x15223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15229 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15229.valid){
continue;
}
CheckValue<IkReal> x15230=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15229.value)+(((1.5707963267949)*(x15230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15231=IKcos(j4);
IkReal x15232=IKsin(j4);
IkReal x15233=(cj5*r00);
IkReal x15234=(cj5*r10);
IkReal x15235=(r21*sj5);
IkReal x15236=(cj5*r20);
IkReal x15237=((1.0)*x15231);
IkReal x15238=((1.0)*x15232);
IkReal x15239=(sj5*x15232);
IkReal x15240=(sj5*x15231);
evalcond[0]=(((r02*x15232))+((r01*x15240))+(((-1.0)*x15233*x15237)));
evalcond[1]=((((-1.0)*x15236*x15238))+(((-1.0)*r22*x15237))+((x15232*x15235)));
evalcond[2]=((((-1.0)*r12*x15237))+((r11*x15239))+(((-1.0)*x15234*x15238)));
evalcond[3]=((1.0)+(((-1.0)*x15233*x15238))+((r01*x15239))+(((-1.0)*r02*x15237)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x15232))+((r11*x15240))+(((-1.0)*x15234*x15237)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15232))+(((-1.0)*x15236*x15237))+((x15231*x15235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15242 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15242)==0){
continue;
}
IkReal x15241=pow(x15242,-0.5);
CheckValue<IkReal> x15243 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15243.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15243.value));
IkReal gconst61=((-1.0)*r11*x15241);
IkReal gconst62=(r10*x15241);
CheckValue<IkReal> x15244 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15244.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15244.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15247 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15247.valid){
continue;
}
IkReal x15245=((-1.0)*(x15247.value));
IkReal x15246=x15241;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15245;
IkReal gconst60=x15245;
IkReal gconst61=((-1.0)*r11*x15246);
IkReal gconst62=(r10*x15246);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15250 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15250.valid){
continue;
}
IkReal x15248=((-1.0)*(x15250.value));
IkReal x15249=x15241;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15248;
IkReal gconst60=x15248;
IkReal gconst61=((-1.0)*r11*x15249);
IkReal gconst62=(r10*x15249);
CheckValue<IkReal> x15258=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15258.valid){
continue;
}
IkReal x15251=x15258.value;
IkReal x15252=(sj3*x15251);
IkReal x15253=(r20*x15252);
IkReal x15254=(r00*x15252);
IkReal x15255=(r01*x15252);
IkReal x15256=(r21*x15252);
IkReal x15257=(r10*r11*x15252);
j4eval[0]=IKsign((((r21*x15255*(r11*r11)))+((r10*r11*r21*x15254))+((r01*r10*r11*x15253))+((r00*x15253*(r10*r10)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15259=gconst61*gconst61;
IkReal x15260=gconst62*gconst62;
IkReal x15261=(cj3*r01);
IkReal x15262=(r22*sj3);
IkReal x15263=(gconst61*r00);
IkReal x15264=((1.0)*cj3);
IkReal x15265=(gconst62*r01);
IkReal x15266=((1.0)*sj3);
IkReal x15267=(gconst61*gconst62*r20);
IkReal x15268=(r21*x15259);
IkReal x15269=(r20*x15260);
CheckValue<IkReal> x15270 = IKatan2WithCheck(IkReal((((x15262*x15263))+((x15262*x15265)))),IkReal(((((-1.0)*gconst62*r20*x15263*x15266))+((r00*sj3*x15268))+(((-1.0)*r01*x15266*x15269))+((gconst61*r21*sj3*x15265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15270.valid){
continue;
}
CheckValue<IkReal> x15271=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15264*x15269))+((cj3*gconst62*r21*x15263))+((x15261*x15267))+(((-1.0)*r02*r22*x15264))+(((-1.0)*x15261*x15268)))),-1);
if(!x15271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15270.value)+(((1.5707963267949)*(x15271.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15272=IKsin(j4);
IkReal x15273=IKcos(j4);
IkReal x15274=(cj2*sj1);
IkReal x15275=(cj1*sj2);
IkReal x15276=(gconst61*sj3);
IkReal x15277=(cj3*gconst61);
IkReal x15278=(cj3*gconst62);
IkReal x15279=(sj1*sj2);
IkReal x15280=(gconst62*sj3);
IkReal x15281=(cj1*cj2);
IkReal x15282=((1.0)*x15273);
IkReal x15283=((1.0)*x15272);
IkReal x15284=(gconst61*x15272);
IkReal x15285=(cj3*x15272);
IkReal x15286=(x15274+x15275);
evalcond[0]=((((-1.0)*gconst62*r20*x15283))+(((-1.0)*r22*x15282))+((r21*x15284)));
evalcond[1]=((((-1.0)*r12*x15282))+((r11*x15284))+(((-1.0)*gconst62*r10*x15283)));
evalcond[2]=((1.0)+((r01*x15284))+(((-1.0)*gconst62*r00*x15283))+(((-1.0)*r02*x15282)));
evalcond[3]=(((r01*x15273*x15277))+((r01*x15280))+(((-1.0)*r00*x15278*x15282))+((r02*x15285))+((r00*x15276)));
evalcond[4]=((((-1.0)*r01*x15276*x15282))+((r00*x15273*x15280))+(((-1.0)*r02*sj3*x15283))+((r01*x15278))+((r00*x15277)));
evalcond[5]=(((r22*x15285))+x15286+((r20*x15276))+((r21*x15273*x15277))+(((-1.0)*r20*x15278*x15282))+((r21*x15280)));
evalcond[6]=((((-1.0)*r10*x15278*x15282))+x15281+((r10*x15276))+((r11*x15273*x15277))+(((-1.0)*x15279))+((r11*x15280))+((r12*x15285)));
evalcond[7]=(((r11*x15278))+(((-1.0)*r12*sj3*x15283))+x15286+((r10*x15273*x15280))+((r10*x15277))+(((-1.0)*r11*x15276*x15282)));
evalcond[8]=((((-1.0)*r21*x15276*x15282))+(((-1.0)*r22*sj3*x15283))+x15279+((r20*x15277))+((r21*x15278))+((r20*x15273*x15280))+(((-1.0)*x15281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15287=gconst61*gconst61;
IkReal x15288=gconst62*gconst62;
IkReal x15289=(cj3*r22);
IkReal x15290=(gconst62*r01);
IkReal x15291=(gconst61*r00);
IkReal x15292=((1.0)*r20);
IkReal x15293=(cj3*r21);
IkReal x15294=(r21*sj3);
CheckValue<IkReal> x15295 = IKatan2WithCheck(IkReal((((x15289*x15290))+((x15289*x15291)))),IkReal(((((-1.0)*cj3*gconst62*x15291*x15292))+((r00*x15287*x15293))+(((-1.0)*cj3*r01*x15288*x15292))+((gconst61*x15290*x15293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15295.valid){
continue;
}
CheckValue<IkReal> x15296=IKPowWithIntegerCheck(IKsign((((r01*x15287*x15294))+(((-1.0)*gconst62*x15291*x15294))+(((-1.0)*gconst61*sj3*x15290*x15292))+((r00*r20*sj3*x15288))+((r02*r22*sj3)))),-1);
if(!x15296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15295.value)+(((1.5707963267949)*(x15296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15297=IKsin(j4);
IkReal x15298=IKcos(j4);
IkReal x15299=(cj2*sj1);
IkReal x15300=(cj1*sj2);
IkReal x15301=(gconst61*sj3);
IkReal x15302=(cj3*gconst61);
IkReal x15303=(cj3*gconst62);
IkReal x15304=(sj1*sj2);
IkReal x15305=(gconst62*sj3);
IkReal x15306=(cj1*cj2);
IkReal x15307=((1.0)*x15298);
IkReal x15308=((1.0)*x15297);
IkReal x15309=(gconst61*x15297);
IkReal x15310=(cj3*x15297);
IkReal x15311=(x15299+x15300);
evalcond[0]=((((-1.0)*gconst62*r20*x15308))+((r21*x15309))+(((-1.0)*r22*x15307)));
evalcond[1]=((((-1.0)*gconst62*r10*x15308))+(((-1.0)*r12*x15307))+((r11*x15309)));
evalcond[2]=((1.0)+((r01*x15309))+(((-1.0)*r02*x15307))+(((-1.0)*gconst62*r00*x15308)));
evalcond[3]=((((-1.0)*r00*x15303*x15307))+((r00*x15301))+((r01*x15298*x15302))+((r01*x15305))+((r02*x15310)));
evalcond[4]=(((r00*x15298*x15305))+(((-1.0)*r02*sj3*x15308))+(((-1.0)*r01*x15301*x15307))+((r00*x15302))+((r01*x15303)));
evalcond[5]=((((-1.0)*r20*x15303*x15307))+((r20*x15301))+((r21*x15305))+x15311+((r22*x15310))+((r21*x15298*x15302)));
evalcond[6]=(((r11*x15298*x15302))+((r12*x15310))+(((-1.0)*x15304))+(((-1.0)*r10*x15303*x15307))+x15306+((r10*x15301))+((r11*x15305)));
evalcond[7]=((((-1.0)*r12*sj3*x15308))+x15311+((r10*x15302))+((r10*x15298*x15305))+(((-1.0)*r11*x15301*x15307))+((r11*x15303)));
evalcond[8]=(((r20*x15302))+(((-1.0)*x15306))+((r20*x15298*x15305))+((r21*x15303))+x15304+(((-1.0)*r21*x15301*x15307))+(((-1.0)*r22*sj3*x15308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15312=((1.0)*gconst62);
CheckValue<IkReal> x15313 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst61*r11))+(((-1.0)*r10*x15312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15313.valid){
continue;
}
CheckValue<IkReal> x15314=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15312)))),-1);
if(!x15314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15313.value)+(((1.5707963267949)*(x15314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15315=IKsin(j4);
IkReal x15316=IKcos(j4);
IkReal x15317=(cj2*sj1);
IkReal x15318=(cj1*sj2);
IkReal x15319=(gconst61*sj3);
IkReal x15320=(cj3*gconst61);
IkReal x15321=(cj3*gconst62);
IkReal x15322=(sj1*sj2);
IkReal x15323=(gconst62*sj3);
IkReal x15324=(cj1*cj2);
IkReal x15325=((1.0)*x15316);
IkReal x15326=((1.0)*x15315);
IkReal x15327=(gconst61*x15315);
IkReal x15328=(cj3*x15315);
IkReal x15329=(x15317+x15318);
evalcond[0]=((((-1.0)*gconst62*r20*x15326))+((r21*x15327))+(((-1.0)*r22*x15325)));
evalcond[1]=(((r11*x15327))+(((-1.0)*gconst62*r10*x15326))+(((-1.0)*r12*x15325)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15326))+((r01*x15327))+(((-1.0)*r02*x15325)));
evalcond[3]=(((r00*x15319))+((r01*x15323))+((r02*x15328))+((r01*x15316*x15320))+(((-1.0)*r00*x15321*x15325)));
evalcond[4]=(((r00*x15320))+((r01*x15321))+(((-1.0)*r02*sj3*x15326))+((r00*x15316*x15323))+(((-1.0)*r01*x15319*x15325)));
evalcond[5]=(((r21*x15316*x15320))+(((-1.0)*r20*x15321*x15325))+((r22*x15328))+x15329+((r21*x15323))+((r20*x15319)));
evalcond[6]=(((r11*x15323))+(((-1.0)*x15322))+((r12*x15328))+((r11*x15316*x15320))+x15324+((r10*x15319))+(((-1.0)*r10*x15321*x15325)));
evalcond[7]=(((r11*x15321))+(((-1.0)*r11*x15319*x15325))+x15329+(((-1.0)*r12*sj3*x15326))+((r10*x15320))+((r10*x15316*x15323)));
evalcond[8]=((((-1.0)*r21*x15319*x15325))+(((-1.0)*x15324))+((r20*x15316*x15323))+x15322+(((-1.0)*r22*sj3*x15326))+((r21*x15321))+((r20*x15320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15331 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15331)==0){
continue;
}
IkReal x15330=pow(x15331,-0.5);
CheckValue<IkReal> x15332 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15332.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15332.value))));
IkReal gconst64=((1.0)*r11*x15330);
IkReal gconst65=((-1.0)*r10*x15330);
CheckValue<IkReal> x15333 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15333.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15333.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15336 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15336.valid){
continue;
}
IkReal x15334=((1.0)*(x15336.value));
IkReal x15335=x15330;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15334)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15334)));
IkReal gconst64=((1.0)*r11*x15335);
IkReal gconst65=((-1.0)*r10*x15335);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15337=gconst64*gconst64;
IkReal x15338=gconst65*gconst65;
IkReal x15339=(gconst65*r01);
IkReal x15340=(cj3*r22);
IkReal x15341=(gconst64*r00);
IkReal x15342=(cj3*r21);
IkReal x15343=((1.0)*gconst64*sj3);
IkReal x15344=((1.0)*cj3*r20);
CheckValue<IkReal> x15345=IKPowWithIntegerCheck(IKsign((((r01*r21*sj3*x15337))+((r00*r20*sj3*x15338))+(((-1.0)*gconst65*r21*sj3*x15341))+(((-1.0)*r20*x15339*x15343))+((r02*r22*sj3)))),-1);
if(!x15345.valid){
continue;
}
CheckValue<IkReal> x15346 = IKatan2WithCheck(IkReal((((x15339*x15340))+((x15340*x15341)))),IkReal(((((-1.0)*gconst65*x15341*x15344))+((gconst64*x15339*x15342))+((r00*x15337*x15342))+(((-1.0)*r01*x15338*x15344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15345.value)))+(x15346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15347=IKsin(j4);
IkReal x15348=IKcos(j4);
IkReal x15349=(cj2*sj1);
IkReal x15350=(cj1*sj2);
IkReal x15351=(cj3*gconst64);
IkReal x15352=(gconst65*r21);
IkReal x15353=(sj1*sj2);
IkReal x15354=(gconst65*sj3);
IkReal x15355=(gconst64*sj3);
IkReal x15356=(cj3*gconst65);
IkReal x15357=(cj1*cj2);
IkReal x15358=((1.0)*x15348);
IkReal x15359=((1.0)*x15347);
IkReal x15360=(cj3*x15347);
IkReal x15361=(gconst64*x15347);
IkReal x15362=(x15350+x15349);
evalcond[0]=((((-1.0)*r22*x15358))+(((-1.0)*gconst65*r20*x15359))+((r21*x15361)));
evalcond[1]=((((-1.0)*r12*x15358))+((r11*x15361))+(((-1.0)*gconst65*r10*x15359)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15359))+(((-1.0)*r02*x15358))+((r01*x15361)));
evalcond[3]=((((-1.0)*r00*x15356*x15358))+((r02*x15360))+((r01*x15348*x15351))+((r01*x15354))+((r00*x15355)));
evalcond[4]=((((-1.0)*r01*x15355*x15358))+((r00*x15348*x15354))+((r01*x15356))+(((-1.0)*r02*sj3*x15359))+((r00*x15351)));
evalcond[5]=(((r22*x15360))+x15362+((r20*x15355))+(((-1.0)*r20*x15356*x15358))+((r21*x15348*x15351))+((sj3*x15352)));
evalcond[6]=(((r11*x15348*x15351))+((r10*x15355))+((r12*x15360))+x15357+((r11*x15354))+(((-1.0)*x15353))+(((-1.0)*r10*x15356*x15358)));
evalcond[7]=((((-1.0)*r12*sj3*x15359))+((r10*x15348*x15354))+((r10*x15351))+x15362+(((-1.0)*r11*x15355*x15358))+((r11*x15356)));
evalcond[8]=((((-1.0)*r21*x15355*x15358))+(((-1.0)*r22*sj3*x15359))+((r20*x15348*x15354))+((cj3*x15352))+x15353+((r20*x15351))+(((-1.0)*x15357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15363=((1.0)*gconst65);
CheckValue<IkReal> x15364=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x15363)))),-1);
if(!x15364.valid){
continue;
}
CheckValue<IkReal> x15365 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15363))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15364.value)))+(x15365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15366=IKsin(j4);
IkReal x15367=IKcos(j4);
IkReal x15368=(cj2*sj1);
IkReal x15369=(cj1*sj2);
IkReal x15370=(cj3*gconst64);
IkReal x15371=(gconst65*r21);
IkReal x15372=(sj1*sj2);
IkReal x15373=(gconst65*sj3);
IkReal x15374=(gconst64*sj3);
IkReal x15375=(cj3*gconst65);
IkReal x15376=(cj1*cj2);
IkReal x15377=((1.0)*x15367);
IkReal x15378=((1.0)*x15366);
IkReal x15379=(cj3*x15366);
IkReal x15380=(gconst64*x15366);
IkReal x15381=(x15368+x15369);
evalcond[0]=(((r21*x15380))+(((-1.0)*gconst65*r20*x15378))+(((-1.0)*r22*x15377)));
evalcond[1]=((((-1.0)*gconst65*r10*x15378))+((r11*x15380))+(((-1.0)*r12*x15377)));
evalcond[2]=((1.0)+((r01*x15380))+(((-1.0)*gconst65*r00*x15378))+(((-1.0)*r02*x15377)));
evalcond[3]=((((-1.0)*r00*x15375*x15377))+((r02*x15379))+((r00*x15374))+((r01*x15373))+((r01*x15367*x15370)));
evalcond[4]=((((-1.0)*r02*sj3*x15378))+((r00*x15367*x15373))+(((-1.0)*r01*x15374*x15377))+((r00*x15370))+((r01*x15375)));
evalcond[5]=(((r21*x15367*x15370))+((r20*x15374))+(((-1.0)*r20*x15375*x15377))+((sj3*x15371))+x15381+((r22*x15379)));
evalcond[6]=((((-1.0)*r10*x15375*x15377))+(((-1.0)*x15372))+x15376+((r10*x15374))+((r11*x15367*x15370))+((r12*x15379))+((r11*x15373)));
evalcond[7]=((((-1.0)*r11*x15374*x15377))+(((-1.0)*r12*sj3*x15378))+x15381+((r10*x15370))+((r10*x15367*x15373))+((r11*x15375)));
evalcond[8]=(((r20*x15370))+(((-1.0)*x15376))+x15372+(((-1.0)*r21*x15374*x15377))+((cj3*x15371))+(((-1.0)*r22*sj3*x15378))+((r20*x15367*x15373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15382=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15382);
rxp0_2=(py*r00);
rxp1_0=(r21*x15382);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15383=(r01*sj5);
IkReal x15384=((1.0)*cj5*r00);
j4eval[0]=(x15383+(((-1.0)*x15384)));
j4eval[1]=(((cj3*x15383))+(((-1.0)*cj3*x15384)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15385=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15385);
rxp0_2=(py*r00);
rxp1_0=(r21*x15385);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15386=(cj5*r00);
IkReal x15387=(r01*sj5);
j4eval[0]=(x15387+(((-1.0)*x15386)));
j4eval[1]=((((-1.0)*sj3*x15387))+((sj3*x15386)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15388=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15388);
rxp0_2=(py*r00);
rxp1_0=(r21*x15388);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15389=((1.0)*r00);
CheckValue<IkReal> x15390=IKPowWithIntegerCheck(cj3,-1);
if(!x15390.valid){
continue;
}
CheckValue<IkReal> x15391=IKPowWithIntegerCheck(r12,-1);
if(!x15391.valid){
continue;
}
CheckValue<IkReal> x15392=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15389))),-1);
if(!x15392.valid){
continue;
}
if( IKabs(((x15390.value)*(x15391.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15392.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15389)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15390.value)*(x15391.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15392.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15389))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15390.value)*(x15391.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15392.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15389))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15393=IKsin(j4);
IkReal x15394=IKcos(j4);
IkReal x15395=(cj2*sj1);
IkReal x15396=(cj1*sj2);
IkReal x15397=(sj1*sj2);
IkReal x15398=(cj5*sj3);
IkReal x15399=(cj3*cj5);
IkReal x15400=(r21*sj5);
IkReal x15401=(cj1*cj2);
IkReal x15402=(r00*sj5);
IkReal x15403=(r01*sj5);
IkReal x15404=(r20*sj5);
IkReal x15405=((1.0)*x15393);
IkReal x15406=(r20*x15394);
IkReal x15407=(r00*x15394);
IkReal x15408=(cj3*x15394);
IkReal x15409=(x15395+x15396);
IkReal x15410=((1.0)*sj3*x15394);
evalcond[0]=((-1.0)*r12*x15394);
evalcond[1]=(((x15393*x15400))+(((-1.0)*cj5*r20*x15405)));
evalcond[2]=(x15401+(((-1.0)*x15397))+((cj3*r12*x15393)));
evalcond[3]=(x15409+(((-1.0)*r12*sj3*x15405)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15405))+((x15393*x15403)));
evalcond[5]=(((x15403*x15408))+((sj3*x15402))+((r01*x15398))+(((-1.0)*x15399*x15407)));
evalcond[6]=(((x15398*x15407))+((r01*x15399))+(((-1.0)*x15403*x15410))+((cj3*x15402)));
evalcond[7]=(((x15400*x15408))+((r21*x15398))+((sj3*x15404))+x15409+(((-1.0)*x15399*x15406)));
evalcond[8]=((((-1.0)*x15401))+((r21*x15399))+(((-1.0)*x15400*x15410))+x15397+((x15398*x15406))+((cj3*x15404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15411=((1.0)*r01);
IkReal x15412=(cj5*r00);
CheckValue<IkReal> x15413=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15412))),-1);
if(!x15413.valid){
continue;
}
CheckValue<IkReal> x15414=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x15411))+((sj3*x15412))),-1);
if(!x15414.valid){
continue;
}
if( IKabs(((-1.0)*(x15413.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15414.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15411)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15413.value)))+IKsqr(((x15414.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15411))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15413.value)), ((x15414.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15411))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15415=IKsin(j4);
IkReal x15416=IKcos(j4);
IkReal x15417=(cj2*sj1);
IkReal x15418=(cj1*sj2);
IkReal x15419=(sj1*sj2);
IkReal x15420=(cj5*sj3);
IkReal x15421=(cj3*cj5);
IkReal x15422=(r21*sj5);
IkReal x15423=(cj1*cj2);
IkReal x15424=(r00*sj5);
IkReal x15425=(r01*sj5);
IkReal x15426=(r20*sj5);
IkReal x15427=((1.0)*x15415);
IkReal x15428=(r20*x15416);
IkReal x15429=(r00*x15416);
IkReal x15430=(cj3*x15416);
IkReal x15431=(x15418+x15417);
IkReal x15432=((1.0)*sj3*x15416);
evalcond[0]=((-1.0)*r12*x15416);
evalcond[1]=(((x15415*x15422))+(((-1.0)*cj5*r20*x15427)));
evalcond[2]=((((-1.0)*x15419))+x15423+((cj3*r12*x15415)));
evalcond[3]=((((-1.0)*r12*sj3*x15427))+x15431);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15427))+((x15415*x15425)));
evalcond[5]=(((x15425*x15430))+((sj3*x15424))+(((-1.0)*x15421*x15429))+((r01*x15420)));
evalcond[6]=(((x15420*x15429))+(((-1.0)*x15425*x15432))+((cj3*x15424))+((r01*x15421)));
evalcond[7]=(((sj3*x15426))+(((-1.0)*x15421*x15428))+((r21*x15420))+((x15422*x15430))+x15431);
evalcond[8]=(((x15420*x15428))+((r21*x15421))+(((-1.0)*x15422*x15432))+(((-1.0)*x15423))+((cj3*x15426))+x15419);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15433=((1.0)*r00);
IkReal x15434=(r01*sj5);
CheckValue<IkReal> x15435=IKPowWithIntegerCheck(((((-1.0)*cj5*x15433))+x15434),-1);
if(!x15435.valid){
continue;
}
CheckValue<IkReal> x15436=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15433))+((cj3*x15434))),-1);
if(!x15436.valid){
continue;
}
if( IKabs(((-1.0)*(x15435.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15436.value)*(((((-1.0)*sj3*sj5*x15433))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15435.value)))+IKsqr(((x15436.value)*(((((-1.0)*sj3*sj5*x15433))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15435.value)), ((x15436.value)*(((((-1.0)*sj3*sj5*x15433))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15437=IKsin(j4);
IkReal x15438=IKcos(j4);
IkReal x15439=(cj2*sj1);
IkReal x15440=(cj1*sj2);
IkReal x15441=(sj1*sj2);
IkReal x15442=(cj5*sj3);
IkReal x15443=(cj3*cj5);
IkReal x15444=(r21*sj5);
IkReal x15445=(cj1*cj2);
IkReal x15446=(r00*sj5);
IkReal x15447=(r01*sj5);
IkReal x15448=(r20*sj5);
IkReal x15449=((1.0)*x15437);
IkReal x15450=(r20*x15438);
IkReal x15451=(r00*x15438);
IkReal x15452=(cj3*x15438);
IkReal x15453=(x15440+x15439);
IkReal x15454=((1.0)*sj3*x15438);
evalcond[0]=((-1.0)*r12*x15438);
evalcond[1]=(((x15437*x15444))+(((-1.0)*cj5*r20*x15449)));
evalcond[2]=(((cj3*r12*x15437))+x15445+(((-1.0)*x15441)));
evalcond[3]=(x15453+(((-1.0)*r12*sj3*x15449)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15449))+((x15437*x15447)));
evalcond[5]=(((sj3*x15446))+((r01*x15442))+((x15447*x15452))+(((-1.0)*x15443*x15451)));
evalcond[6]=((((-1.0)*x15447*x15454))+((r01*x15443))+((x15442*x15451))+((cj3*x15446)));
evalcond[7]=(((sj3*x15448))+((x15444*x15452))+x15453+(((-1.0)*x15443*x15450))+((r21*x15442)));
evalcond[8]=((((-1.0)*x15444*x15454))+((x15442*x15450))+x15441+(((-1.0)*x15445))+((r21*x15443))+((cj3*x15448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15455=cj5*cj5;
IkReal x15456=(cj3*r20);
IkReal x15457=(r21*sj3);
IkReal x15458=((1.0)*cj3);
IkReal x15459=(r01*r21);
IkReal x15460=(r01*sj3);
IkReal x15461=(r00*sj5);
IkReal x15462=(cj5*r01*sj5);
IkReal x15463=((1.0)*x15455);
CheckValue<IkReal> x15464 = IKatan2WithCheck(IkReal((((cj5*r22*x15460))+((r22*sj3*x15461)))),IkReal(((((-1.0)*r20*x15460*x15463))+((r00*x15457))+(((-1.0)*cj5*r20*sj3*x15461))+((x15457*x15462))+(((-1.0)*r00*x15457*x15463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15464.valid){
continue;
}
CheckValue<IkReal> x15465=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15458*x15459))+((cj3*cj5*r21*x15461))+((cj3*x15455*x15459))+(((-1.0)*r02*r22*x15458))+((x15456*x15462))+(((-1.0)*r00*x15456*x15463)))),-1);
if(!x15465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15464.value)+(((1.5707963267949)*(x15465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15466=IKsin(j4);
IkReal x15467=IKcos(j4);
IkReal x15468=(cj2*sj1);
IkReal x15469=(cj1*sj2);
IkReal x15470=(r11*sj5);
IkReal x15471=(cj5*r10);
IkReal x15472=(sj1*sj2);
IkReal x15473=(cj5*r01);
IkReal x15474=(cj5*r00);
IkReal x15475=(cj3*sj5);
IkReal x15476=(r21*sj5);
IkReal x15477=(cj1*cj2);
IkReal x15478=(cj5*sj3);
IkReal x15479=(sj3*sj5);
IkReal x15480=(r01*sj5);
IkReal x15481=(cj3*cj5);
IkReal x15482=(cj5*r20);
IkReal x15483=((1.0)*x15467);
IkReal x15484=((1.0)*x15466);
IkReal x15485=(cj3*x15467);
IkReal x15486=(sj3*x15467);
IkReal x15487=(cj3*x15466);
IkReal x15488=(x15469+x15468);
evalcond[0]=((((-1.0)*x15482*x15484))+((x15466*x15476))+(((-1.0)*r22*x15483)));
evalcond[1]=((((-1.0)*r12*x15483))+(((-1.0)*x15471*x15484))+((x15466*x15470)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15483))+(((-1.0)*x15474*x15484))+((x15466*x15480)));
evalcond[3]=(((r02*x15487))+(((-1.0)*cj3*x15474*x15483))+((r01*x15467*x15475))+((r00*x15479))+((sj3*x15473)));
evalcond[4]=(((x15474*x15486))+(((-1.0)*r01*x15479*x15483))+((r00*x15475))+(((-1.0)*r02*sj3*x15484))+((cj3*x15473)));
evalcond[5]=((((-1.0)*r20*x15481*x15483))+((r22*x15487))+((r21*x15478))+x15488+((r20*x15479))+((r21*x15467*x15475)));
evalcond[6]=((((-1.0)*cj3*x15471*x15483))+(((-1.0)*x15472))+((x15470*x15485))+((r12*x15487))+x15477+((r11*x15478))+((r10*x15479)));
evalcond[7]=((((-1.0)*sj3*x15470*x15483))+(((-1.0)*r12*sj3*x15484))+((x15471*x15486))+((r11*x15481))+x15488+((r10*x15475)));
evalcond[8]=(((r21*x15481))+(((-1.0)*x15477))+(((-1.0)*r22*sj3*x15484))+(((-1.0)*sj3*x15476*x15483))+((r20*x15467*x15478))+x15472+((r20*x15475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15489=((1.0)*cj5);
CheckValue<IkReal> x15490 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15490.valid){
continue;
}
CheckValue<IkReal> x15491=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15489))+(((-1.0)*r20*sj5)))),-1);
if(!x15491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15490.value)+(((1.5707963267949)*(x15491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15492=IKsin(j4);
IkReal x15493=IKcos(j4);
IkReal x15494=(cj2*sj1);
IkReal x15495=(cj1*sj2);
IkReal x15496=(r11*sj5);
IkReal x15497=(cj5*r10);
IkReal x15498=(sj1*sj2);
IkReal x15499=(cj5*r01);
IkReal x15500=(cj5*r00);
IkReal x15501=(cj3*sj5);
IkReal x15502=(r21*sj5);
IkReal x15503=(cj1*cj2);
IkReal x15504=(cj5*sj3);
IkReal x15505=(sj3*sj5);
IkReal x15506=(r01*sj5);
IkReal x15507=(cj3*cj5);
IkReal x15508=(cj5*r20);
IkReal x15509=((1.0)*x15493);
IkReal x15510=((1.0)*x15492);
IkReal x15511=(cj3*x15493);
IkReal x15512=(sj3*x15493);
IkReal x15513=(cj3*x15492);
IkReal x15514=(x15494+x15495);
evalcond[0]=((((-1.0)*r22*x15509))+(((-1.0)*x15508*x15510))+((x15492*x15502)));
evalcond[1]=((((-1.0)*x15497*x15510))+(((-1.0)*r12*x15509))+((x15492*x15496)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15509))+((x15492*x15506))+(((-1.0)*x15500*x15510)));
evalcond[3]=(((r00*x15505))+((r02*x15513))+((r01*x15493*x15501))+((sj3*x15499))+(((-1.0)*cj3*x15500*x15509)));
evalcond[4]=((((-1.0)*r01*x15505*x15509))+((r00*x15501))+((cj3*x15499))+(((-1.0)*r02*sj3*x15510))+((x15500*x15512)));
evalcond[5]=(((r21*x15493*x15501))+((r21*x15504))+x15514+((r20*x15505))+(((-1.0)*r20*x15507*x15509))+((r22*x15513)));
evalcond[6]=(((x15496*x15511))+((r10*x15505))+(((-1.0)*cj3*x15497*x15509))+((r11*x15504))+((r12*x15513))+x15503+(((-1.0)*x15498)));
evalcond[7]=(((r10*x15501))+((r11*x15507))+(((-1.0)*sj3*x15496*x15509))+(((-1.0)*r12*sj3*x15510))+x15514+((x15497*x15512)));
evalcond[8]=((((-1.0)*r22*sj3*x15510))+(((-1.0)*sj3*x15502*x15509))+x15498+(((-1.0)*x15503))+((r21*x15507))+((r20*x15493*x15504))+((r20*x15501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15515 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15515.valid){
continue;
}
CheckValue<IkReal> x15516=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15515.value)+(((1.5707963267949)*(x15516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15517=IKsin(j4);
IkReal x15518=IKcos(j4);
IkReal x15519=(cj2*sj1);
IkReal x15520=(cj1*sj2);
IkReal x15521=(r11*sj5);
IkReal x15522=(cj5*r10);
IkReal x15523=(sj1*sj2);
IkReal x15524=(cj5*r01);
IkReal x15525=(cj5*r00);
IkReal x15526=(cj3*sj5);
IkReal x15527=(r21*sj5);
IkReal x15528=(cj1*cj2);
IkReal x15529=(cj5*sj3);
IkReal x15530=(sj3*sj5);
IkReal x15531=(r01*sj5);
IkReal x15532=(cj3*cj5);
IkReal x15533=(cj5*r20);
IkReal x15534=((1.0)*x15518);
IkReal x15535=((1.0)*x15517);
IkReal x15536=(cj3*x15518);
IkReal x15537=(sj3*x15518);
IkReal x15538=(cj3*x15517);
IkReal x15539=(x15520+x15519);
evalcond[0]=((((-1.0)*x15533*x15535))+(((-1.0)*r22*x15534))+((x15517*x15527)));
evalcond[1]=((((-1.0)*r12*x15534))+((x15517*x15521))+(((-1.0)*x15522*x15535)));
evalcond[2]=((1.0)+((x15517*x15531))+(((-1.0)*x15525*x15535))+(((-1.0)*r02*x15534)));
evalcond[3]=((((-1.0)*cj3*x15525*x15534))+((r01*x15518*x15526))+((r02*x15538))+((sj3*x15524))+((r00*x15530)));
evalcond[4]=(((cj3*x15524))+((r00*x15526))+(((-1.0)*r01*x15530*x15534))+(((-1.0)*r02*sj3*x15535))+((x15525*x15537)));
evalcond[5]=(((r20*x15530))+((r21*x15529))+x15539+((r22*x15538))+(((-1.0)*r20*x15532*x15534))+((r21*x15518*x15526)));
evalcond[6]=(((r10*x15530))+(((-1.0)*cj3*x15522*x15534))+(((-1.0)*x15523))+((x15521*x15536))+((r12*x15538))+x15528+((r11*x15529)));
evalcond[7]=((((-1.0)*r12*sj3*x15535))+((r10*x15526))+((x15522*x15537))+(((-1.0)*sj3*x15521*x15534))+x15539+((r11*x15532)));
evalcond[8]=(((r20*x15526))+(((-1.0)*sj3*x15527*x15534))+((r21*x15532))+(((-1.0)*x15528))+(((-1.0)*r22*sj3*x15535))+x15523+((r20*x15518*x15529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15540=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15540);
rxp1_1=(px*r21);
rxp1_2=(r11*x15540);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15541=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15541);
rxp1_1=(px*r21);
rxp1_2=(r11*x15541);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15542=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15542)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15542)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15543=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15543);
rxp1_1=(px*r21);
rxp1_2=(r11*x15543);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15544=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15544);
rxp1_1=(px*r21);
rxp1_2=(r11*x15544);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15545=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15545);
rxp1_1=(px*r21);
rxp1_2=(r11*x15545);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15546=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15546);
rxp1_1=(px*r21);
rxp1_2=(r11*x15546);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15549=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15549.valid){
continue;
}
IkReal x15547=x15549.value;
IkReal x15548=(sj0*x15547);
cj4array[0]=(((cj2*sj1*x15548))+((cj1*sj2*x15548)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15550=IKsin(j4);
IkReal x15551=IKcos(j4);
IkReal x15552=(cj5*r20);
IkReal x15553=(r21*sj5);
IkReal x15554=((1.0)*x15550);
IkReal x15555=((1.0)*x15551);
evalcond[0]=((-1.0)*r02*x15550);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15555)));
evalcond[2]=(((x15550*x15553))+(((-1.0)*x15552*x15554)));
evalcond[3]=(((r11*sj5*x15550))+(((-1.0)*cj5*r10*x15554)));
evalcond[4]=(((x15551*x15552))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15553*x15555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15557=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15557.valid){
continue;
}
IkReal x15556=x15557.value;
cj4array[0]=(((cj1*cj2*x15556))+(((-1.0)*sj1*sj2*x15556)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15558=IKsin(j4);
IkReal x15559=IKcos(j4);
IkReal x15560=(r11*sj5);
IkReal x15561=((1.0)*sj0);
IkReal x15562=((1.0)*x15559);
IkReal x15563=((1.0)*cj5*x15558);
evalcond[0]=((-1.0)*r02*x15558);
evalcond[1]=((((-1.0)*r02*x15562))+(((-1.0)*x15561)));
evalcond[2]=((((-1.0)*r20*x15563))+((r21*sj5*x15558)));
evalcond[3]=((((-1.0)*r10*x15563))+((x15558*x15560)));
evalcond[4]=(((cj5*r10*x15559))+(((-1.0)*cj1*sj2*x15561))+(((-1.0)*cj2*sj1*x15561))+(((-1.0)*x15560*x15562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15564=IKPowWithIntegerCheck(r02,-1);
if(!x15564.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15564.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15565=IKsin(j4);
IkReal x15566=IKcos(j4);
IkReal x15567=((1.0)*sj0);
IkReal x15568=(cj5*x15566);
IkReal x15569=(sj5*x15565);
IkReal x15570=((1.0)*sj5*x15566);
IkReal x15571=((1.0)*cj5*x15565);
evalcond[0]=((-1.0)*r02*x15565);
evalcond[1]=(((r21*x15569))+(((-1.0)*r20*x15571)));
evalcond[2]=((((-1.0)*r10*x15571))+((r11*x15569)));
evalcond[3]=((((-1.0)*r21*x15570))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15568)));
evalcond[4]=(((r10*x15568))+(((-1.0)*r11*x15570))+(((-1.0)*cj1*sj2*x15567))+(((-1.0)*cj2*sj1*x15567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15572=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15572);
rxp1_1=(px*r21);
rxp1_2=(r11*x15572);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15573=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15573);
rxp1_1=(px*r21);
rxp1_2=(r11*x15573);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15574=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15574);
rxp1_1=(px*r21);
rxp1_2=(r11*x15574);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15577=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15577.valid){
continue;
}
IkReal x15575=x15577.value;
IkReal x15576=(sj0*x15575);
cj4array[0]=(((cj2*sj1*x15576))+((cj1*sj2*x15576)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15578=IKsin(j4);
IkReal x15579=IKcos(j4);
IkReal x15580=(r21*sj5);
IkReal x15581=((1.0)*cj5*r20);
evalcond[0]=(r02*x15578);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15579)));
evalcond[2]=(((x15578*x15580))+(((-1.0)*x15578*x15581)));
evalcond[3]=(((r11*sj5*x15578))+(((-1.0)*cj5*r10*x15578)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15579*x15580))+(((-1.0)*x15579*x15581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15583=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15583.valid){
continue;
}
IkReal x15582=x15583.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15582))+((cj1*cj2*x15582)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15584=IKsin(j4);
IkReal x15585=IKcos(j4);
IkReal x15586=((1.0)*sj0);
IkReal x15587=((1.0)*cj5);
IkReal x15588=(sj5*x15584);
evalcond[0]=(r02*x15584);
evalcond[1]=((((-1.0)*x15586))+(((-1.0)*r02*x15585)));
evalcond[2]=(((r21*x15588))+(((-1.0)*r20*x15584*x15587)));
evalcond[3]=(((r11*x15588))+(((-1.0)*r10*x15584*x15587)));
evalcond[4]=((((-1.0)*cj1*sj2*x15586))+(((-1.0)*r10*x15585*x15587))+(((-1.0)*cj2*sj1*x15586))+((r11*sj5*x15585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15589=IKPowWithIntegerCheck(r02,-1);
if(!x15589.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15589.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15590=IKsin(j4);
IkReal x15591=IKcos(j4);
IkReal x15592=((1.0)*cj1);
IkReal x15593=(r21*sj5);
IkReal x15594=((1.0)*cj5);
IkReal x15595=(r11*sj5);
evalcond[0]=(r02*x15590);
evalcond[1]=(((x15590*x15593))+(((-1.0)*r20*x15590*x15594)));
evalcond[2]=(((x15590*x15595))+(((-1.0)*r10*x15590*x15594)));
evalcond[3]=((((-1.0)*cj2*x15592))+((sj1*sj2))+((x15591*x15593))+(((-1.0)*r20*x15591*x15594)));
evalcond[4]=((((-1.0)*sj0*sj2*x15592))+(((-1.0)*cj2*sj0*sj1))+((x15591*x15595))+(((-1.0)*r10*x15591*x15594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15596 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15596.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15596.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15597 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15597.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15597.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15598=((-1.0)*r10);
CheckValue<IkReal> x15600 = IKatan2WithCheck(IkReal(x15598),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15600.valid){
continue;
}
IkReal x15599=((-1.0)*(x15600.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15598);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15599;
IkReal gconst66=x15599;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15601=((-1.0)*r10);
CheckValue<IkReal> x15603 = IKatan2WithCheck(IkReal(x15601),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15603.valid){
continue;
}
IkReal x15602=((-1.0)*(x15603.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15601);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15602;
IkReal gconst66=x15602;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15604=((-1.0)*r10);
CheckValue<IkReal> x15606 = IKatan2WithCheck(IkReal(x15604),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15606.valid){
continue;
}
IkReal x15605=((-1.0)*(x15606.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15604);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15605;
IkReal gconst66=x15605;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15607=((1.0)*gconst67);
IkReal x15608=(cj1*cj2);
IkReal x15609=((1.0)*sj1*sj2);
CheckValue<IkReal> x15610=IKPowWithIntegerCheck(cj3,-1);
if(!x15610.valid){
continue;
}
CheckValue<IkReal> x15611=IKPowWithIntegerCheck(r02,-1);
if(!x15611.valid){
continue;
}
CheckValue<IkReal> x15612=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15607))+((gconst68*r20*sj3))),-1);
if(!x15612.valid){
continue;
}
if( IKabs(((x15610.value)*(x15611.value)*((((cj0*x15608))+(((-1.0)*cj0*x15609)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15612.value)*(((((-1.0)*x15609))+x15608+(((-1.0)*cj3*r20*x15607))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15610.value)*(x15611.value)*((((cj0*x15608))+(((-1.0)*cj0*x15609))))))+IKsqr(((x15612.value)*(((((-1.0)*x15609))+x15608+(((-1.0)*cj3*r20*x15607))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15610.value)*(x15611.value)*((((cj0*x15608))+(((-1.0)*cj0*x15609))))), ((x15612.value)*(((((-1.0)*x15609))+x15608+(((-1.0)*cj3*r20*x15607))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15613=IKsin(j4);
IkReal x15614=IKcos(j4);
IkReal x15615=(sj1*sj2);
IkReal x15616=(gconst68*sj3);
IkReal x15617=(gconst67*r11);
IkReal x15618=(gconst67*sj3);
IkReal x15619=((1.0)*gconst68);
IkReal x15620=(cj2*sj1);
IkReal x15621=((1.0)*cj0);
IkReal x15622=((1.0)*sj0);
IkReal x15623=(cj3*gconst67);
IkReal x15624=(cj3*gconst68);
IkReal x15625=(cj1*sj2);
IkReal x15626=(gconst67*r21);
IkReal x15627=((1.0)*cj1*cj2);
IkReal x15628=(cj3*x15614);
IkReal x15629=((1.0)*x15614);
IkReal x15630=(r02*x15613);
evalcond[0]=((((-1.0)*x15622))+(((-1.0)*r02*x15629)));
evalcond[1]=((((-1.0)*r20*x15613*x15619))+((x15613*x15626)));
evalcond[2]=(cj0+(((-1.0)*r10*x15613*x15619))+((x15613*x15617)));
evalcond[3]=(((cj3*x15630))+((cj0*x15615))+(((-1.0)*cj1*cj2*x15621)));
evalcond[4]=((((-1.0)*x15620*x15621))+(((-1.0)*sj3*x15630))+(((-1.0)*x15621*x15625)));
evalcond[5]=(((r21*x15616))+x15625+x15620+((r20*x15618))+((r21*x15614*x15623))+(((-1.0)*r20*x15619*x15628)));
evalcond[6]=(((r21*x15624))+((r20*x15614*x15616))+(((-1.0)*x15627))+x15615+((r20*x15623))+(((-1.0)*r21*x15618*x15629)));
evalcond[7]=(((sj0*x15615))+((r11*x15616))+((r10*x15618))+(((-1.0)*cj1*cj2*x15622))+((x15617*x15628))+(((-1.0)*r10*x15619*x15628)));
evalcond[8]=((((-1.0)*x15620*x15622))+((r10*x15614*x15616))+(((-1.0)*x15622*x15625))+(((-1.0)*sj3*x15617*x15629))+((r11*x15624))+((r10*x15623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15633=IKPowWithIntegerCheck(r02,-1);
if(!x15633.valid){
continue;
}
IkReal x15631=x15633.value;
IkReal x15632=((1.0)*cj0);
CheckValue<IkReal> x15634=IKPowWithIntegerCheck(sj3,-1);
if(!x15634.valid){
continue;
}
if( IKabs((x15631*(x15634.value)*(((((-1.0)*cj2*sj1*x15632))+(((-1.0)*cj1*sj2*x15632)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15631)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15631*(x15634.value)*(((((-1.0)*cj2*sj1*x15632))+(((-1.0)*cj1*sj2*x15632))))))+IKsqr(((-1.0)*sj0*x15631))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15631*(x15634.value)*(((((-1.0)*cj2*sj1*x15632))+(((-1.0)*cj1*sj2*x15632))))), ((-1.0)*sj0*x15631));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15635=IKsin(j4);
IkReal x15636=IKcos(j4);
IkReal x15637=(sj1*sj2);
IkReal x15638=(gconst68*sj3);
IkReal x15639=(gconst67*r11);
IkReal x15640=(gconst67*sj3);
IkReal x15641=((1.0)*gconst68);
IkReal x15642=(cj2*sj1);
IkReal x15643=((1.0)*cj0);
IkReal x15644=((1.0)*sj0);
IkReal x15645=(cj3*gconst67);
IkReal x15646=(cj3*gconst68);
IkReal x15647=(cj1*sj2);
IkReal x15648=(gconst67*r21);
IkReal x15649=((1.0)*cj1*cj2);
IkReal x15650=(cj3*x15636);
IkReal x15651=((1.0)*x15636);
IkReal x15652=(r02*x15635);
evalcond[0]=((((-1.0)*x15644))+(((-1.0)*r02*x15651)));
evalcond[1]=((((-1.0)*r20*x15635*x15641))+((x15635*x15648)));
evalcond[2]=(cj0+(((-1.0)*r10*x15635*x15641))+((x15635*x15639)));
evalcond[3]=(((cj3*x15652))+((cj0*x15637))+(((-1.0)*cj1*cj2*x15643)));
evalcond[4]=((((-1.0)*x15643*x15647))+(((-1.0)*sj3*x15652))+(((-1.0)*x15642*x15643)));
evalcond[5]=(x15647+x15642+(((-1.0)*r20*x15641*x15650))+((r21*x15638))+((r21*x15636*x15645))+((r20*x15640)));
evalcond[6]=(((r20*x15636*x15638))+(((-1.0)*r21*x15640*x15651))+x15637+((r21*x15646))+(((-1.0)*x15649))+((r20*x15645)));
evalcond[7]=((((-1.0)*r10*x15641*x15650))+((r11*x15638))+((sj0*x15637))+(((-1.0)*cj1*cj2*x15644))+((r10*x15640))+((x15639*x15650)));
evalcond[8]=((((-1.0)*x15644*x15647))+(((-1.0)*sj3*x15639*x15651))+((r11*x15646))+((r10*x15636*x15638))+(((-1.0)*x15642*x15644))+((r10*x15645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15654=IKPowWithIntegerCheck(r02,-1);
if(!x15654.valid){
continue;
}
IkReal x15653=x15654.value;
CheckValue<IkReal> x15655=IKPowWithIntegerCheck(cj3,-1);
if(!x15655.valid){
continue;
}
if( IKabs((x15653*(x15655.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15653)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15653*(x15655.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15653))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15653*(x15655.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15653));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15656=IKsin(j4);
IkReal x15657=IKcos(j4);
IkReal x15658=(sj1*sj2);
IkReal x15659=(gconst68*sj3);
IkReal x15660=(gconst67*r11);
IkReal x15661=(gconst67*sj3);
IkReal x15662=((1.0)*gconst68);
IkReal x15663=(cj2*sj1);
IkReal x15664=((1.0)*cj0);
IkReal x15665=((1.0)*sj0);
IkReal x15666=(cj3*gconst67);
IkReal x15667=(cj3*gconst68);
IkReal x15668=(cj1*sj2);
IkReal x15669=(gconst67*r21);
IkReal x15670=((1.0)*cj1*cj2);
IkReal x15671=(cj3*x15657);
IkReal x15672=((1.0)*x15657);
IkReal x15673=(r02*x15656);
evalcond[0]=((((-1.0)*x15665))+(((-1.0)*r02*x15672)));
evalcond[1]=((((-1.0)*r20*x15656*x15662))+((x15656*x15669)));
evalcond[2]=((((-1.0)*r10*x15656*x15662))+cj0+((x15656*x15660)));
evalcond[3]=(((cj3*x15673))+(((-1.0)*cj1*cj2*x15664))+((cj0*x15658)));
evalcond[4]=((((-1.0)*x15664*x15668))+(((-1.0)*sj3*x15673))+(((-1.0)*x15663*x15664)));
evalcond[5]=(((r21*x15657*x15666))+((r20*x15661))+x15668+x15663+(((-1.0)*r20*x15662*x15671))+((r21*x15659)));
evalcond[6]=((((-1.0)*x15670))+(((-1.0)*r21*x15661*x15672))+((r20*x15666))+x15658+((r21*x15667))+((r20*x15657*x15659)));
evalcond[7]=(((r10*x15661))+((x15660*x15671))+((r11*x15659))+(((-1.0)*cj1*cj2*x15665))+(((-1.0)*r10*x15662*x15671))+((sj0*x15658)));
evalcond[8]=((((-1.0)*sj3*x15660*x15672))+(((-1.0)*x15665*x15668))+((r10*x15666))+((r11*x15667))+((r10*x15657*x15659))+(((-1.0)*x15663*x15665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15674=((-1.0)*r10);
CheckValue<IkReal> x15675 = IKatan2WithCheck(IkReal(x15674),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15675.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15675.value))));
IkReal gconst70=x15674;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15676 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15676.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15676.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15677=((-1.0)*r10);
IkReal x15678=((-1.0)*r11);
CheckValue<IkReal> x15680 = IKatan2WithCheck(IkReal(x15677),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15680.valid){
continue;
}
IkReal x15679=((1.0)*(x15680.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15677);
rxp1_1=(px*r21);
rxp1_2=(px*x15678);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15679)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15679)));
IkReal gconst70=x15677;
IkReal gconst71=x15678;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15681=((-1.0)*r10);
IkReal x15682=((-1.0)*r11);
CheckValue<IkReal> x15684 = IKatan2WithCheck(IkReal(x15681),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15684.valid){
continue;
}
IkReal x15683=((1.0)*(x15684.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15681);
rxp1_1=(px*r21);
rxp1_2=(px*x15682);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15683)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15683)));
IkReal gconst70=x15681;
IkReal gconst71=x15682;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15685=((-1.0)*r10);
IkReal x15686=((-1.0)*r11);
CheckValue<IkReal> x15688 = IKatan2WithCheck(IkReal(x15685),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15688.valid){
continue;
}
IkReal x15687=((1.0)*(x15688.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15685);
rxp1_1=(px*r21);
rxp1_2=(px*x15686);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15687)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15687)));
IkReal gconst70=x15685;
IkReal gconst71=x15686;
IkReal x15689=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15689))+(((-1.0)*r11*r20*x15689)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15690=((1.0)*r21);
IkReal x15691=(cj1*cj2);
IkReal x15692=((1.0)*sj1*sj2);
CheckValue<IkReal> x15693=IKPowWithIntegerCheck(cj3,-1);
if(!x15693.valid){
continue;
}
CheckValue<IkReal> x15694=IKPowWithIntegerCheck(r02,-1);
if(!x15694.valid){
continue;
}
CheckValue<IkReal> x15695=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15690))+((gconst71*r20*sj3))),-1);
if(!x15695.valid){
continue;
}
if( IKabs(((x15693.value)*(x15694.value)*((((cj0*x15691))+(((-1.0)*cj0*x15692)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15695.value)*(((((-1.0)*x15692))+(((-1.0)*cj3*gconst71*x15690))+x15691+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15693.value)*(x15694.value)*((((cj0*x15691))+(((-1.0)*cj0*x15692))))))+IKsqr(((x15695.value)*(((((-1.0)*x15692))+(((-1.0)*cj3*gconst71*x15690))+x15691+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15693.value)*(x15694.value)*((((cj0*x15691))+(((-1.0)*cj0*x15692))))), ((x15695.value)*(((((-1.0)*x15692))+(((-1.0)*cj3*gconst71*x15690))+x15691+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15696=IKsin(j4);
IkReal x15697=IKcos(j4);
IkReal x15698=(cj3*gconst70);
IkReal x15699=(sj1*sj2);
IkReal x15700=((1.0)*gconst71);
IkReal x15701=(gconst71*sj3);
IkReal x15702=(cj2*sj1);
IkReal x15703=((1.0)*sj0);
IkReal x15704=(gconst70*r11);
IkReal x15705=(gconst70*sj3);
IkReal x15706=((1.0)*cj0);
IkReal x15707=(cj3*gconst71);
IkReal x15708=(cj1*sj2);
IkReal x15709=((1.0)*cj1*cj2);
IkReal x15710=(r21*x15697);
IkReal x15711=(r10*x15697);
IkReal x15712=((1.0)*x15697);
IkReal x15713=(r02*x15696);
IkReal x15714=(r20*x15697);
evalcond[0]=((((-1.0)*x15703))+(((-1.0)*r02*x15712)));
evalcond[1]=((((-1.0)*r20*x15696*x15700))+((gconst70*r21*x15696)));
evalcond[2]=(cj0+(((-1.0)*r10*x15696*x15700))+((x15696*x15704)));
evalcond[3]=((((-1.0)*cj1*cj2*x15706))+((cj3*x15713))+((cj0*x15699)));
evalcond[4]=((((-1.0)*sj3*x15713))+(((-1.0)*x15702*x15706))+(((-1.0)*x15706*x15708)));
evalcond[5]=((((-1.0)*cj3*x15700*x15714))+((r20*x15705))+x15708+x15702+((r21*x15701))+((x15698*x15710)));
evalcond[6]=((((-1.0)*x15709))+((r20*x15698))+x15699+(((-1.0)*x15705*x15710))+((r21*x15707))+((x15701*x15714)));
evalcond[7]=(((r11*x15701))+(((-1.0)*cj3*x15700*x15711))+((sj0*x15699))+(((-1.0)*cj1*cj2*x15703))+((r10*x15705))+((r11*x15697*x15698)));
evalcond[8]=(((r11*x15707))+((r10*x15698))+(((-1.0)*x15703*x15708))+(((-1.0)*sj3*x15704*x15712))+(((-1.0)*x15702*x15703))+((x15701*x15711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15717=IKPowWithIntegerCheck(r02,-1);
if(!x15717.valid){
continue;
}
IkReal x15715=x15717.value;
IkReal x15716=((1.0)*cj0);
CheckValue<IkReal> x15718=IKPowWithIntegerCheck(sj3,-1);
if(!x15718.valid){
continue;
}
if( IKabs((x15715*(x15718.value)*(((((-1.0)*cj2*sj1*x15716))+(((-1.0)*cj1*sj2*x15716)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15715)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15715*(x15718.value)*(((((-1.0)*cj2*sj1*x15716))+(((-1.0)*cj1*sj2*x15716))))))+IKsqr(((-1.0)*sj0*x15715))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15715*(x15718.value)*(((((-1.0)*cj2*sj1*x15716))+(((-1.0)*cj1*sj2*x15716))))), ((-1.0)*sj0*x15715));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15719=IKsin(j4);
IkReal x15720=IKcos(j4);
IkReal x15721=(cj3*gconst70);
IkReal x15722=(sj1*sj2);
IkReal x15723=((1.0)*gconst71);
IkReal x15724=(gconst71*sj3);
IkReal x15725=(cj2*sj1);
IkReal x15726=((1.0)*sj0);
IkReal x15727=(gconst70*r11);
IkReal x15728=(gconst70*sj3);
IkReal x15729=((1.0)*cj0);
IkReal x15730=(cj3*gconst71);
IkReal x15731=(cj1*sj2);
IkReal x15732=((1.0)*cj1*cj2);
IkReal x15733=(r21*x15720);
IkReal x15734=(r10*x15720);
IkReal x15735=((1.0)*x15720);
IkReal x15736=(r02*x15719);
IkReal x15737=(r20*x15720);
evalcond[0]=((((-1.0)*x15726))+(((-1.0)*r02*x15735)));
evalcond[1]=(((gconst70*r21*x15719))+(((-1.0)*r20*x15719*x15723)));
evalcond[2]=(cj0+(((-1.0)*r10*x15719*x15723))+((x15719*x15727)));
evalcond[3]=((((-1.0)*cj1*cj2*x15729))+((cj0*x15722))+((cj3*x15736)));
evalcond[4]=((((-1.0)*sj3*x15736))+(((-1.0)*x15725*x15729))+(((-1.0)*x15729*x15731)));
evalcond[5]=(((r20*x15728))+((r21*x15724))+((x15721*x15733))+x15731+x15725+(((-1.0)*cj3*x15723*x15737)));
evalcond[6]=((((-1.0)*x15732))+((x15724*x15737))+((r20*x15721))+(((-1.0)*x15728*x15733))+((r21*x15730))+x15722);
evalcond[7]=(((r11*x15720*x15721))+((r11*x15724))+(((-1.0)*cj1*cj2*x15726))+((sj0*x15722))+((r10*x15728))+(((-1.0)*cj3*x15723*x15734)));
evalcond[8]=(((r11*x15730))+((x15724*x15734))+(((-1.0)*sj3*x15727*x15735))+(((-1.0)*x15725*x15726))+(((-1.0)*x15726*x15731))+((r10*x15721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15739=IKPowWithIntegerCheck(r02,-1);
if(!x15739.valid){
continue;
}
IkReal x15738=x15739.value;
CheckValue<IkReal> x15740=IKPowWithIntegerCheck(cj3,-1);
if(!x15740.valid){
continue;
}
if( IKabs((x15738*(x15740.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15738)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15738*(x15740.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15738))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15738*(x15740.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15738));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15741=IKsin(j4);
IkReal x15742=IKcos(j4);
IkReal x15743=(cj3*gconst70);
IkReal x15744=(sj1*sj2);
IkReal x15745=((1.0)*gconst71);
IkReal x15746=(gconst71*sj3);
IkReal x15747=(cj2*sj1);
IkReal x15748=((1.0)*sj0);
IkReal x15749=(gconst70*r11);
IkReal x15750=(gconst70*sj3);
IkReal x15751=((1.0)*cj0);
IkReal x15752=(cj3*gconst71);
IkReal x15753=(cj1*sj2);
IkReal x15754=((1.0)*cj1*cj2);
IkReal x15755=(r21*x15742);
IkReal x15756=(r10*x15742);
IkReal x15757=((1.0)*x15742);
IkReal x15758=(r02*x15741);
IkReal x15759=(r20*x15742);
evalcond[0]=((((-1.0)*x15748))+(((-1.0)*r02*x15757)));
evalcond[1]=((((-1.0)*r20*x15741*x15745))+((gconst70*r21*x15741)));
evalcond[2]=(cj0+(((-1.0)*r10*x15741*x15745))+((x15741*x15749)));
evalcond[3]=(((cj3*x15758))+((cj0*x15744))+(((-1.0)*cj1*cj2*x15751)));
evalcond[4]=((((-1.0)*x15751*x15753))+(((-1.0)*sj3*x15758))+(((-1.0)*x15747*x15751)));
evalcond[5]=(((x15743*x15755))+(((-1.0)*cj3*x15745*x15759))+((r20*x15750))+((r21*x15746))+x15747+x15753);
evalcond[6]=((((-1.0)*x15750*x15755))+(((-1.0)*x15754))+((r21*x15752))+x15744+((r20*x15743))+((x15746*x15759)));
evalcond[7]=((((-1.0)*cj3*x15745*x15756))+((r10*x15750))+((r11*x15742*x15743))+((r11*x15746))+((sj0*x15744))+(((-1.0)*cj1*cj2*x15748)));
evalcond[8]=((((-1.0)*sj3*x15749*x15757))+(((-1.0)*x15748*x15753))+((r11*x15752))+(((-1.0)*x15747*x15748))+((x15746*x15756))+((r10*x15743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15761=IKPowWithIntegerCheck(r02,-1);
if(!x15761.valid){
continue;
}
IkReal x15760=x15761.value;
CheckValue<IkReal> x15762=IKPowWithIntegerCheck(cj3,-1);
if(!x15762.valid){
continue;
}
if( IKabs((x15760*(x15762.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15760)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15760*(x15762.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15760))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15760*(x15762.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15760));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15763=IKsin(j4);
IkReal x15764=IKcos(j4);
IkReal x15765=(cj5*r10);
IkReal x15766=(sj1*sj2);
IkReal x15767=(cj5*sj3);
IkReal x15768=(r11*sj5);
IkReal x15769=(cj3*cj5);
IkReal x15770=(cj3*sj5);
IkReal x15771=(r21*sj5);
IkReal x15772=(cj2*sj1);
IkReal x15773=((1.0)*sj0);
IkReal x15774=((1.0)*cj0);
IkReal x15775=(sj3*sj5);
IkReal x15776=(cj1*sj2);
IkReal x15777=((1.0)*cj1*cj2);
IkReal x15778=((1.0)*x15763);
IkReal x15779=(r20*x15764);
IkReal x15780=(cj3*x15764);
IkReal x15781=(sj3*x15764);
evalcond[0]=((((-1.0)*r02*x15764))+(((-1.0)*x15773)));
evalcond[1]=(((x15763*x15771))+(((-1.0)*cj5*r20*x15778)));
evalcond[2]=(cj0+((x15763*x15768))+(((-1.0)*x15765*x15778)));
evalcond[3]=(((cj0*x15766))+(((-1.0)*cj1*cj2*x15774))+((cj3*r02*x15763)));
evalcond[4]=((((-1.0)*x15772*x15774))+(((-1.0)*r02*sj3*x15778))+(((-1.0)*x15774*x15776)));
evalcond[5]=(((r21*x15767))+(((-1.0)*x15769*x15779))+((r20*x15775))+x15776+x15772+((r21*x15764*x15770)));
evalcond[6]=(((x15767*x15779))+((r21*x15769))+(((-1.0)*x15777))+((r20*x15770))+x15766+(((-1.0)*x15771*x15781)));
evalcond[7]=(((r10*x15775))+(((-1.0)*x15765*x15780))+((sj0*x15766))+((x15768*x15780))+(((-1.0)*cj1*cj2*x15773))+((r11*x15767)));
evalcond[8]=(((r10*x15770))+(((-1.0)*x15773*x15776))+((x15765*x15781))+(((-1.0)*x15772*x15773))+(((-1.0)*x15768*x15781))+((r11*x15769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15782=((1.0)*sj3);
IkReal x15783=((1.0)*cj5);
CheckValue<IkReal> x15784=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15783))),-1);
if(!x15784.valid){
continue;
}
CheckValue<IkReal> x15785=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15783))),-1);
if(!x15785.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15784.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15785.value)*(((((-1.0)*r20*sj5*x15782))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15782)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15784.value)))+IKsqr(((x15785.value)*(((((-1.0)*r20*sj5*x15782))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15782))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15784.value)), ((x15785.value)*(((((-1.0)*r20*sj5*x15782))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15782))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15786=IKsin(j4);
IkReal x15787=IKcos(j4);
IkReal x15788=(cj5*r10);
IkReal x15789=(sj1*sj2);
IkReal x15790=(cj5*sj3);
IkReal x15791=(r11*sj5);
IkReal x15792=(cj3*cj5);
IkReal x15793=(cj3*sj5);
IkReal x15794=(r21*sj5);
IkReal x15795=(cj2*sj1);
IkReal x15796=((1.0)*sj0);
IkReal x15797=((1.0)*cj0);
IkReal x15798=(sj3*sj5);
IkReal x15799=(cj1*sj2);
IkReal x15800=((1.0)*cj1*cj2);
IkReal x15801=((1.0)*x15786);
IkReal x15802=(r20*x15787);
IkReal x15803=(cj3*x15787);
IkReal x15804=(sj3*x15787);
evalcond[0]=((((-1.0)*x15796))+(((-1.0)*r02*x15787)));
evalcond[1]=((((-1.0)*cj5*r20*x15801))+((x15786*x15794)));
evalcond[2]=(((x15786*x15791))+cj0+(((-1.0)*x15788*x15801)));
evalcond[3]=(((cj3*r02*x15786))+(((-1.0)*cj1*cj2*x15797))+((cj0*x15789)));
evalcond[4]=((((-1.0)*x15797*x15799))+(((-1.0)*x15795*x15797))+(((-1.0)*r02*sj3*x15801)));
evalcond[5]=((((-1.0)*x15792*x15802))+((r21*x15787*x15793))+((r20*x15798))+((r21*x15790))+x15795+x15799);
evalcond[6]=((((-1.0)*x15794*x15804))+(((-1.0)*x15800))+((r20*x15793))+((x15790*x15802))+((r21*x15792))+x15789);
evalcond[7]=(((r11*x15790))+(((-1.0)*x15788*x15803))+((sj0*x15789))+(((-1.0)*cj1*cj2*x15796))+((r10*x15798))+((x15791*x15803)));
evalcond[8]=((((-1.0)*x15791*x15804))+((r11*x15792))+((x15788*x15804))+(((-1.0)*x15796*x15799))+(((-1.0)*x15795*x15796))+((r10*x15793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15805=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15805.valid){
continue;
}
CheckValue<IkReal> x15806=IKPowWithIntegerCheck(r02,-1);
if(!x15806.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15805.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15806.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15805.value)))+IKsqr(((-1.0)*sj0*(x15806.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15805.value)), ((-1.0)*sj0*(x15806.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15807=IKsin(j4);
IkReal x15808=IKcos(j4);
IkReal x15809=(cj5*r10);
IkReal x15810=(sj1*sj2);
IkReal x15811=(cj5*sj3);
IkReal x15812=(r11*sj5);
IkReal x15813=(cj3*cj5);
IkReal x15814=(cj3*sj5);
IkReal x15815=(r21*sj5);
IkReal x15816=(cj2*sj1);
IkReal x15817=((1.0)*sj0);
IkReal x15818=((1.0)*cj0);
IkReal x15819=(sj3*sj5);
IkReal x15820=(cj1*sj2);
IkReal x15821=((1.0)*cj1*cj2);
IkReal x15822=((1.0)*x15807);
IkReal x15823=(r20*x15808);
IkReal x15824=(cj3*x15808);
IkReal x15825=(sj3*x15808);
evalcond[0]=((((-1.0)*x15817))+(((-1.0)*r02*x15808)));
evalcond[1]=(((x15807*x15815))+(((-1.0)*cj5*r20*x15822)));
evalcond[2]=(cj0+((x15807*x15812))+(((-1.0)*x15809*x15822)));
evalcond[3]=((((-1.0)*cj1*cj2*x15818))+((cj0*x15810))+((cj3*r02*x15807)));
evalcond[4]=((((-1.0)*x15818*x15820))+(((-1.0)*r02*sj3*x15822))+(((-1.0)*x15816*x15818)));
evalcond[5]=((((-1.0)*x15813*x15823))+((r21*x15808*x15814))+((r21*x15811))+((r20*x15819))+x15816+x15820);
evalcond[6]=((((-1.0)*x15821))+((x15811*x15823))+((r21*x15813))+((r20*x15814))+x15810+(((-1.0)*x15815*x15825)));
evalcond[7]=(((r11*x15811))+(((-1.0)*cj1*cj2*x15817))+((sj0*x15810))+((r10*x15819))+((x15812*x15824))+(((-1.0)*x15809*x15824)));
evalcond[8]=(((r11*x15813))+((r10*x15814))+(((-1.0)*x15812*x15825))+((x15809*x15825))+(((-1.0)*x15816*x15817))+(((-1.0)*x15817*x15820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15826=((1.0)*sj0);
IkReal x15827=((1.0)*cj0);
CheckValue<IkReal> x15828 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15827))+(((-1.0)*r12*x15826)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x15826))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15828.valid){
continue;
}
CheckValue<IkReal> x15829=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15828.value)+(((1.5707963267949)*(x15829.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15830=IKsin(j4);
IkReal x15831=IKcos(j4);
IkReal x15832=(r11*sj5);
IkReal x15833=(cj5*r10);
IkReal x15834=(sj1*sj2);
IkReal x15835=(cj5*sj3);
IkReal x15836=((1.0)*sj0);
IkReal x15837=(cj3*cj5);
IkReal x15838=(cj3*sj5);
IkReal x15839=(r21*sj5);
IkReal x15840=(cj2*sj1);
IkReal x15841=(sj3*sj5);
IkReal x15842=(r01*sj5);
IkReal x15843=((1.0)*cj0);
IkReal x15844=(cj1*sj2);
IkReal x15845=((1.0)*x15831);
IkReal x15846=((1.0)*x15830);
IkReal x15847=(cj3*x15831);
IkReal x15848=((1.0)*cj1*cj2);
IkReal x15849=(cj3*x15830);
evalcond[0]=((((-1.0)*cj5*r20*x15846))+(((-1.0)*r22*x15845))+((x15830*x15839)));
evalcond[1]=((((-1.0)*x15833*x15846))+cj0+(((-1.0)*r12*x15845))+((x15830*x15832)));
evalcond[2]=((((-1.0)*cj5*r00*x15846))+((x15830*x15842))+(((-1.0)*x15836))+(((-1.0)*r02*x15845)));
evalcond[3]=(((r21*x15831*x15838))+((r20*x15841))+(((-1.0)*r20*x15837*x15845))+((r22*x15849))+x15840+x15844+((r21*x15835)));
evalcond[4]=(((r20*x15831*x15835))+(((-1.0)*sj3*x15839*x15845))+((r20*x15838))+(((-1.0)*r22*sj3*x15846))+(((-1.0)*x15848))+x15834+((r21*x15837)));
evalcond[5]=(((r00*x15841))+((cj0*x15834))+(((-1.0)*cj1*cj2*x15843))+((r01*x15835))+((r02*x15849))+(((-1.0)*r00*x15837*x15845))+((r01*x15831*x15838)));
evalcond[6]=(((sj0*x15834))+((r11*x15835))+((r10*x15841))+(((-1.0)*cj1*cj2*x15836))+(((-1.0)*cj3*x15833*x15845))+((r12*x15849))+((x15832*x15847)));
evalcond[7]=((((-1.0)*r02*sj3*x15846))+(((-1.0)*r01*x15841*x15845))+((r00*x15831*x15835))+((r01*x15837))+((r00*x15838))+(((-1.0)*x15843*x15844))+(((-1.0)*x15840*x15843)));
evalcond[8]=(((r10*x15838))+(((-1.0)*sj3*x15832*x15845))+((sj3*x15831*x15833))+((r11*x15837))+(((-1.0)*r12*sj3*x15846))+(((-1.0)*x15836*x15840))+(((-1.0)*x15836*x15844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15850=((1.0)*cj5);
CheckValue<IkReal> x15851=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15850)))),-1);
if(!x15851.valid){
continue;
}
CheckValue<IkReal> x15852 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15850))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15851.value)))+(x15852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15853=IKsin(j4);
IkReal x15854=IKcos(j4);
IkReal x15855=(r11*sj5);
IkReal x15856=(cj5*r10);
IkReal x15857=(sj1*sj2);
IkReal x15858=(cj5*sj3);
IkReal x15859=((1.0)*sj0);
IkReal x15860=(cj3*cj5);
IkReal x15861=(cj3*sj5);
IkReal x15862=(r21*sj5);
IkReal x15863=(cj2*sj1);
IkReal x15864=(sj3*sj5);
IkReal x15865=(r01*sj5);
IkReal x15866=((1.0)*cj0);
IkReal x15867=(cj1*sj2);
IkReal x15868=((1.0)*x15854);
IkReal x15869=((1.0)*x15853);
IkReal x15870=(cj3*x15854);
IkReal x15871=((1.0)*cj1*cj2);
IkReal x15872=(cj3*x15853);
evalcond[0]=((((-1.0)*r22*x15868))+(((-1.0)*cj5*r20*x15869))+((x15853*x15862)));
evalcond[1]=(cj0+((x15853*x15855))+(((-1.0)*x15856*x15869))+(((-1.0)*r12*x15868)));
evalcond[2]=((((-1.0)*cj5*r00*x15869))+(((-1.0)*r02*x15868))+(((-1.0)*x15859))+((x15853*x15865)));
evalcond[3]=((((-1.0)*r20*x15860*x15868))+((r21*x15854*x15861))+((r21*x15858))+((r22*x15872))+((r20*x15864))+x15867+x15863);
evalcond[4]=(((r21*x15860))+(((-1.0)*r22*sj3*x15869))+((r20*x15854*x15858))+(((-1.0)*x15871))+((r20*x15861))+x15857+(((-1.0)*sj3*x15862*x15868)));
evalcond[5]=(((cj0*x15857))+((r01*x15854*x15861))+((r01*x15858))+(((-1.0)*r00*x15860*x15868))+((r00*x15864))+((r02*x15872))+(((-1.0)*cj1*cj2*x15866)));
evalcond[6]=((((-1.0)*cj3*x15856*x15868))+(((-1.0)*cj1*cj2*x15859))+((r11*x15858))+((r12*x15872))+((r10*x15864))+((sj0*x15857))+((x15855*x15870)));
evalcond[7]=((((-1.0)*x15863*x15866))+((r00*x15854*x15858))+(((-1.0)*x15866*x15867))+(((-1.0)*r02*sj3*x15869))+(((-1.0)*r01*x15864*x15868))+((r00*x15861))+((r01*x15860)));
evalcond[8]=((((-1.0)*x15859*x15863))+(((-1.0)*x15859*x15867))+((r11*x15860))+((sj3*x15854*x15856))+(((-1.0)*sj3*x15855*x15868))+(((-1.0)*r12*sj3*x15869))+((r10*x15861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15873=((1.0)*cj5);
CheckValue<IkReal> x15874 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x15873))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15874.valid){
continue;
}
CheckValue<IkReal> x15875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15873)))),-1);
if(!x15875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15874.value)+(((1.5707963267949)*(x15875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15876=IKsin(j4);
IkReal x15877=IKcos(j4);
IkReal x15878=(r11*sj5);
IkReal x15879=(cj5*r10);
IkReal x15880=(sj1*sj2);
IkReal x15881=(cj5*sj3);
IkReal x15882=((1.0)*sj0);
IkReal x15883=(cj3*cj5);
IkReal x15884=(cj3*sj5);
IkReal x15885=(r21*sj5);
IkReal x15886=(cj2*sj1);
IkReal x15887=(sj3*sj5);
IkReal x15888=(r01*sj5);
IkReal x15889=((1.0)*cj0);
IkReal x15890=(cj1*sj2);
IkReal x15891=((1.0)*x15877);
IkReal x15892=((1.0)*x15876);
IkReal x15893=(cj3*x15877);
IkReal x15894=((1.0)*cj1*cj2);
IkReal x15895=(cj3*x15876);
evalcond[0]=((((-1.0)*cj5*r20*x15892))+(((-1.0)*r22*x15891))+((x15876*x15885)));
evalcond[1]=(cj0+((x15876*x15878))+(((-1.0)*r12*x15891))+(((-1.0)*x15879*x15892)));
evalcond[2]=((((-1.0)*r02*x15891))+(((-1.0)*x15882))+((x15876*x15888))+(((-1.0)*cj5*r00*x15892)));
evalcond[3]=((((-1.0)*r20*x15883*x15891))+((r20*x15887))+((r21*x15877*x15884))+((r22*x15895))+x15886+x15890+((r21*x15881)));
evalcond[4]=(((r20*x15884))+(((-1.0)*x15894))+(((-1.0)*r22*sj3*x15892))+(((-1.0)*sj3*x15885*x15891))+x15880+((r20*x15877*x15881))+((r21*x15883)));
evalcond[5]=(((r00*x15887))+((r01*x15881))+((r01*x15877*x15884))+((cj0*x15880))+(((-1.0)*cj1*cj2*x15889))+((r02*x15895))+(((-1.0)*r00*x15883*x15891)));
evalcond[6]=(((r10*x15887))+(((-1.0)*cj3*x15879*x15891))+((sj0*x15880))+((r12*x15895))+((r11*x15881))+(((-1.0)*cj1*cj2*x15882))+((x15878*x15893)));
evalcond[7]=(((r00*x15877*x15881))+((r00*x15884))+((r01*x15883))+(((-1.0)*x15886*x15889))+(((-1.0)*x15889*x15890))+(((-1.0)*r01*x15887*x15891))+(((-1.0)*r02*sj3*x15892)));
evalcond[8]=(((r10*x15884))+(((-1.0)*x15882*x15886))+(((-1.0)*x15882*x15890))+((sj3*x15877*x15879))+((r11*x15883))+(((-1.0)*r12*sj3*x15892))+(((-1.0)*sj3*x15878*x15891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15896=cj5*cj5;
IkReal x15897=r21*r21;
IkReal x15898=r20*r20;
IkReal x15899=(r20*r21);
IkReal x15900=((1.0)*cj3);
IkReal x15901=((1.0)*cj5);
IkReal x15902=(cj1*sj2);
IkReal x15903=(cj5*sj5);
IkReal x15904=(sj3*sj5);
IkReal x15905=(cj2*sj1);
IkReal x15906=(r21*sj5);
CheckValue<IkReal> x15907 = IKatan2WithCheck(IkReal((((r22*x15905))+((r22*x15902))+((cj5*r21*r22*sj3))+((r20*r22*x15904)))),IkReal(((((-1.0)*r20*x15901*x15905))+(((-1.0)*r20*x15901*x15902))+((x15902*x15906))+(((-1.0)*x15898*x15901*x15904))+(((-2.0)*sj3*x15896*x15899))+((sj3*x15897*x15903))+((sj3*x15899))+((x15905*x15906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15907.valid){
continue;
}
CheckValue<IkReal> x15908=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15896*x15898*x15900))+(((-1.0)*x15897*x15900))+((cj3*x15896*x15897))+(((2.0)*cj3*x15899*x15903))+(((-1.0)*x15900*(r22*r22))))),-1);
if(!x15908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15907.value)+(((1.5707963267949)*(x15908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15909=IKsin(j4);
IkReal x15910=IKcos(j4);
IkReal x15911=(cj3*r21);
IkReal x15912=(r21*sj5);
IkReal x15913=(r20*sj5);
IkReal x15914=(cj5*r20);
IkReal x15915=((1.0)*x15910);
IkReal x15916=((1.0)*x15909);
evalcond[0]=(((x15909*x15912))+(((-1.0)*x15914*x15916))+(((-1.0)*r22*x15915)));
evalcond[1]=(((cj2*sj1))+((sj3*x15913))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x15909))+(((-1.0)*cj3*x15914*x15915))+((sj5*x15910*x15911)));
evalcond[2]=(((cj5*x15911))+((sj3*x15910*x15914))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x15916))+(((-1.0)*sj3*x15912*x15915))+((cj3*x15913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15917=(cj5*sj4);
IkReal x15918=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15918))+(((-1.0)*r00*x15917)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15917))+(((-1.0)*r11*x15918))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15918))+(((-1.0)*r00*x15917))))+IKsqr((((r10*x15917))+(((-1.0)*r11*x15918))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15918))+(((-1.0)*r00*x15917))), (((r10*x15917))+(((-1.0)*r11*x15918))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15919=IKcos(j0);
IkReal x15920=IKsin(j0);
IkReal x15921=(r02*sj4);
IkReal x15922=((1.0)*sj3);
IkReal x15923=(r12*sj4);
IkReal x15924=(cj3*cj4);
IkReal x15925=((1.0)*cj5);
IkReal x15926=(r11*sj5);
IkReal x15927=((1.0)*cj1);
IkReal x15928=((0.39225)*sj1);
IkReal x15929=(cj5*r01);
IkReal x15930=(r01*sj5);
IkReal x15931=(r00*sj5);
IkReal x15932=((1.0)*sj1);
IkReal x15933=((0.39225)*cj2);
IkReal x15934=(cj5*r11);
IkReal x15935=(r10*sj5);
IkReal x15936=((1.0)*cj4);
IkReal x15937=(sj2*x15919);
IkReal x15938=(sj2*x15920);
IkReal x15939=(cj4*cj5*sj3);
IkReal x15940=(cj1*x15919);
IkReal x15941=(cj2*x15919);
IkReal x15942=(cj1*x15920);
IkReal x15943=(cj2*x15920);
evalcond[0]=((((-1.0)*r10*sj4*x15925))+(((-1.0)*r12*x15936))+((sj4*x15926))+x15919);
evalcond[1]=((((-1.0)*r00*sj4*x15925))+((sj4*x15930))+(((-1.0)*x15920))+(((-1.0)*r02*x15936)));
evalcond[2]=(((x15933*x15940))+(((-0.09465)*x15931))+(((-0.09465)*x15929))+(((-1.0)*px))+(((0.425)*x15940))+(((-0.10915)*x15920))+(((-1.0)*x15928*x15937)));
evalcond[3]=(((x15933*x15942))+(((-0.09465)*x15934))+(((-0.09465)*x15935))+(((0.10915)*x15919))+(((-1.0)*py))+(((0.425)*x15942))+(((-1.0)*x15928*x15938)));
evalcond[4]=((((-1.0)*x15927*x15941))+((sj3*x15929))+((cj3*x15921))+((x15924*x15930))+((sj1*x15937))+((sj3*x15931))+(((-1.0)*r00*x15924*x15925)));
evalcond[5]=((((-1.0)*x15927*x15943))+((cj3*x15923))+(((-1.0)*r10*x15924*x15925))+((x15924*x15926))+((sj1*x15938))+((sj3*x15934))+((sj3*x15935)));
evalcond[6]=((((-1.0)*x15921*x15922))+(((-1.0)*x15932*x15941))+((cj3*x15929))+(((-1.0)*cj4*x15922*x15930))+((r00*x15939))+((cj3*x15931))+(((-1.0)*x15927*x15937)));
evalcond[7]=((((-1.0)*x15922*x15923))+(((-1.0)*x15932*x15943))+((cj3*x15935))+((cj3*x15934))+(((-1.0)*cj4*x15922*x15926))+(((-1.0)*x15927*x15938))+((r10*x15939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15944=cj5*cj5;
IkReal x15945=r21*r21;
IkReal x15946=r20*r20;
IkReal x15947=(r20*r21);
IkReal x15948=(sj1*sj2);
IkReal x15949=(r21*sj5);
IkReal x15950=(cj1*cj2);
IkReal x15951=(cj5*r20);
IkReal x15952=(cj5*sj5);
IkReal x15953=(cj3*r22);
IkReal x15954=(sj3*x15945);
CheckValue<IkReal> x15955=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x15944*x15954))+((sj3*x15944*x15946))+(((-2.0)*sj3*x15947*x15952))+x15954)),-1);
if(!x15955.valid){
continue;
}
CheckValue<IkReal> x15956 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15950))+((r20*sj5*x15953))+((cj5*r21*x15953))+((r22*x15948)))),IkReal((((cj3*x15947))+(((-2.0)*cj3*x15944*x15947))+((x15950*x15951))+(((-1.0)*x15948*x15951))+(((-1.0)*cj3*x15946*x15952))+(((-1.0)*x15949*x15950))+((cj3*x15945*x15952))+((x15948*x15949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15955.value)))+(x15956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15957=IKsin(j4);
IkReal x15958=IKcos(j4);
IkReal x15959=(cj3*r21);
IkReal x15960=(r21*sj5);
IkReal x15961=(r20*sj5);
IkReal x15962=(cj5*r20);
IkReal x15963=((1.0)*x15958);
IkReal x15964=((1.0)*x15957);
evalcond[0]=((((-1.0)*x15962*x15964))+((x15957*x15960))+(((-1.0)*r22*x15963)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj3*x15962*x15963))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x15957))+((sj5*x15958*x15959))+((sj3*x15961)));
evalcond[2]=((((-1.0)*r22*sj3*x15964))+(((-1.0)*sj3*x15960*x15963))+((cj5*x15959))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x15958*x15962))+((cj3*x15961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15965=(cj5*sj4);
IkReal x15966=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15966))+(((-1.0)*r00*x15965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15966))+((r10*x15965))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15966))+(((-1.0)*r00*x15965))))+IKsqr(((((-1.0)*r11*x15966))+((r10*x15965))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15966))+(((-1.0)*r00*x15965))), ((((-1.0)*r11*x15966))+((r10*x15965))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15967=IKcos(j0);
IkReal x15968=IKsin(j0);
IkReal x15969=(r02*sj4);
IkReal x15970=((1.0)*sj3);
IkReal x15971=(r12*sj4);
IkReal x15972=(cj3*cj4);
IkReal x15973=((1.0)*cj5);
IkReal x15974=(r11*sj5);
IkReal x15975=((1.0)*cj1);
IkReal x15976=((0.39225)*sj1);
IkReal x15977=(cj5*r01);
IkReal x15978=(r01*sj5);
IkReal x15979=(r00*sj5);
IkReal x15980=((1.0)*sj1);
IkReal x15981=((0.39225)*cj2);
IkReal x15982=(cj5*r11);
IkReal x15983=(r10*sj5);
IkReal x15984=((1.0)*cj4);
IkReal x15985=(sj2*x15967);
IkReal x15986=(sj2*x15968);
IkReal x15987=(cj4*cj5*sj3);
IkReal x15988=(cj1*x15967);
IkReal x15989=(cj2*x15967);
IkReal x15990=(cj1*x15968);
IkReal x15991=(cj2*x15968);
evalcond[0]=(((sj4*x15974))+(((-1.0)*r10*sj4*x15973))+(((-1.0)*r12*x15984))+x15967);
evalcond[1]=((((-1.0)*r00*sj4*x15973))+(((-1.0)*r02*x15984))+((sj4*x15978))+(((-1.0)*x15968)));
evalcond[2]=((((-0.09465)*x15977))+(((-0.09465)*x15979))+(((-0.10915)*x15968))+(((-1.0)*x15976*x15985))+(((0.425)*x15988))+(((-1.0)*px))+((x15981*x15988)));
evalcond[3]=((((-1.0)*x15976*x15986))+(((0.425)*x15990))+(((0.10915)*x15967))+(((-1.0)*py))+((x15981*x15990))+(((-0.09465)*x15983))+(((-0.09465)*x15982)));
evalcond[4]=(((sj1*x15985))+((sj3*x15977))+((sj3*x15979))+((x15972*x15978))+((cj3*x15969))+(((-1.0)*x15975*x15989))+(((-1.0)*r00*x15972*x15973)));
evalcond[5]=((((-1.0)*x15975*x15991))+((sj1*x15986))+(((-1.0)*r10*x15972*x15973))+((sj3*x15983))+((sj3*x15982))+((x15972*x15974))+((cj3*x15971)));
evalcond[6]=(((r00*x15987))+(((-1.0)*cj4*x15970*x15978))+(((-1.0)*x15980*x15989))+((cj3*x15977))+((cj3*x15979))+(((-1.0)*x15969*x15970))+(((-1.0)*x15975*x15985)));
evalcond[7]=(((cj3*x15982))+((cj3*x15983))+(((-1.0)*x15970*x15971))+(((-1.0)*cj4*x15970*x15974))+((r10*x15987))+(((-1.0)*x15980*x15991))+(((-1.0)*x15975*x15986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (4af10b9a8fcfe3f5f059ef1c4aedbc79)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
